; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\voxcodec.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08BCCFIPOB@VOXCODEC?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@BACKOHHH@CVoxMediaObject?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@HDOBLKO@m_pfnVciFree?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@IHFDMAJI@Invalid?5encode?5format?5tag?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@FIIJPALH@m_ulRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@HBDOJIHH@pxmbSource?5?$CG?$CG?5pxmbDest?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@OGLOMHEL@CVoxMediaObject?3?3Process?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@NMCPHOON@Encode?5failed?5with?5error?5?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XMOCompletePacketSync@@YGXPBU_XMEDIAPACKET@@KK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CVoxMediaObject@@UAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Discontinuity@CVoxMediaObject@@UAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Flush@CVoxMediaObject@@UAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetInputAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetOutputAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _VoxwareCreateConverter@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CVoxMediaObject@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCVoxMediaObject@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CVoxMediaObject@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CVoxMediaObject@@QAGXGHPAUvoicecodecwaveformat_tag@@PAUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CVoxMediaObject@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CVoxMediaObject@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetInfo@CVoxMediaObject@@UAGJPAU_XMEDIAINFO@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Process@CVoxMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCVoxMediaObject@@PAV2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7XMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CVoxMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_XVoiceBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxwareCreateConverter@20
PUBLIC	??0CVoxMediaObject@@QAE@XZ			; CVoxMediaObject::CVoxMediaObject
PUBLIC	?Initialize@CVoxMediaObject@@QAGXGHPAUvoicecodecwaveformat_tag@@PAUtWAVEFORMATEX@@@Z ; CVoxMediaObject::Initialize
PUBLIC	??_C@_0BA@BACKOHHH@CVoxMediaObject?$AA@		; `string'
PUBLIC	??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	?__AddRef@DirectSound@@YGPAVCVoxMediaObject@@PAV2@@Z ; DirectSound::__AddRef
;	COMDAT ??_C@_0BA@BACKOHHH@CVoxMediaObject?$AA@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\voxcodec.cpp
DSOUND_RD	SEGMENT
??_C@_0BA@BACKOHHH@CVoxMediaObject?$AA@ DB 'CVoxMediaObject', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\voxcodec.cpp', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _VoxwareCreateConverter@20
DSOUND	SEGMENT
tv72 = -16
$T36191 = -12
_hr$ = -8
_pMediaObject$ = -4
_wEncodeFormatTag$ = 8
_fCreateEncoder$ = 12
_pwfxEncoded$ = 16
_pwfxDecoded$ = 20
_ppMediaObject$ = 24
_VoxwareCreateConverter@20 PROC NEAR			; COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 170  :     CVoxMediaObject *       pMediaObject;
; 171  :     HRESULT                 hr;
; 172  : 
; 173  :     DPF_ENTER();
; 174  : 
; 175  :     hr = HRFROMP(pMediaObject = NEW(CVoxMediaObject));

  00006	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@BACKOHHH@CVoxMediaObject?$AA@
  0000b	68 af 00 00 00	 push	 175			; 000000afH
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  00015	6a 70		 push	 112			; 00000070H
  00017	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	89 45 f4	 mov	 DWORD PTR $T36191[ebp], eax
  00022	83 7d f4 00	 cmp	 DWORD PTR $T36191[ebp], 0
  00026	74 0d		 je	 SHORT $L36192
  00028	8b 4d f4	 mov	 ecx, DWORD PTR $T36191[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CVoxMediaObject@@QAE@XZ ; CVoxMediaObject::CVoxMediaObject
  00030	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  00033	eb 07		 jmp	 SHORT $L36193
$L36192:
  00035	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L36193:
  0003c	8b 45 f0	 mov	 eax, DWORD PTR tv72[ebp]
  0003f	89 45 fc	 mov	 DWORD PTR _pMediaObject$[ebp], eax
  00042	33 c9		 xor	 ecx, ecx
  00044	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00048	0f 95 c1	 setne	 cl
  0004b	49		 dec	 ecx
  0004c	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00052	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 176  : 
; 177  :     if(SUCCEEDED(hr))

  00055	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00059	7c 1a		 jl	 SHORT $L35761

; 178  :     {
; 179  :         pMediaObject->Initialize(wEncodeFormatTag, fCreateEncoder, pwfxEncoded, pwfxDecoded);

  0005b	8b 55 14	 mov	 edx, DWORD PTR _pwfxDecoded$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 10	 mov	 eax, DWORD PTR _pwfxEncoded$[ebp]
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _fCreateEncoder$[ebp]
  00066	51		 push	 ecx
  00067	66 8b 55 08	 mov	 dx, WORD PTR _wEncodeFormatTag$[ebp]
  0006b	52		 push	 edx
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?Initialize@CVoxMediaObject@@QAGXGHPAUvoicecodecwaveformat_tag@@PAUtWAVEFORMATEX@@@Z ; CVoxMediaObject::Initialize
$L35761:

; 180  :     }
; 181  : 
; 182  :     if(SUCCEEDED(hr))

  00075	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00079	7c 0e		 jl	 SHORT $L35763

; 183  :     {
; 184  :         *ppMediaObject = ADDREF(pMediaObject);

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCVoxMediaObject@@PAV2@@Z ; DirectSound::__AddRef
  00084	8b 55 18	 mov	 edx, DWORD PTR _ppMediaObject$[ebp]
  00087	89 02		 mov	 DWORD PTR [edx], eax
$L35763:

; 185  :     }
; 186  : 
; 187  :     RELEASE(pMediaObject);

  00089	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  0008d	74 13		 je	 SHORT $L35768
  0008f	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00097	52		 push	 edx
  00098	ff 51 04	 call	 DWORD PTR [ecx+4]
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L35768:

; 188  : 
; 189  :     DPF_LEAVE_HRESULT(hr);
; 190  : 
; 191  :     return hr;

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 192  : }

  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 14 00	 ret	 20			; 00000014H
_VoxwareCreateConverter@20 ENDP
DSOUND	ENDS
EXTRN	?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemAlloc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  :     return DirectSound::CMemoryManager::TrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc

; 234  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
DSOUND	ENDS
PUBLIC	??0XMediaObject@@QAE@XZ				; XMediaObject::XMediaObject
PUBLIC	?AddRef@CVoxMediaObject@@UAGKXZ			; CVoxMediaObject::AddRef
PUBLIC	?Release@CVoxMediaObject@@UAGKXZ		; CVoxMediaObject::Release
PUBLIC	?GetInfo@CVoxMediaObject@@UAGJPAU_XMEDIAINFO@@@Z ; CVoxMediaObject::GetInfo
PUBLIC	?GetStatus@CVoxMediaObject@@UAGJPAK@Z		; CVoxMediaObject::GetStatus
PUBLIC	?Process@CVoxMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z ; CVoxMediaObject::Process
PUBLIC	?Discontinuity@CVoxMediaObject@@UAGJXZ		; CVoxMediaObject::Discontinuity
PUBLIC	?Flush@CVoxMediaObject@@UAGJXZ			; CVoxMediaObject::Flush
PUBLIC	??_7CVoxMediaObject@@6B@			; CVoxMediaObject::`vftable'
PUBLIC	??_GCVoxMediaObject@@UAEPAXI@Z			; CVoxMediaObject::`scalar deleting destructor'
EXTRN	??_ECVoxMediaObject@@UAEPAXI@Z:NEAR		; CVoxMediaObject::`vector deleting destructor'
;	COMDAT ??_7CVoxMediaObject@@6B@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\voxcodec.cpp
CONST	SEGMENT
??_7CVoxMediaObject@@6B@ DD FLAT:?AddRef@CVoxMediaObject@@UAGKXZ ; CVoxMediaObject::`vftable'
	DD	FLAT:?Release@CVoxMediaObject@@UAGKXZ
	DD	FLAT:?GetInfo@CVoxMediaObject@@UAGJPAU_XMEDIAINFO@@@Z
	DD	FLAT:?GetStatus@CVoxMediaObject@@UAGJPAK@Z
	DD	FLAT:?Process@CVoxMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
	DD	FLAT:?Discontinuity@CVoxMediaObject@@UAGJXZ
	DD	FLAT:?Flush@CVoxMediaObject@@UAGJXZ
	DD	FLAT:??_ECVoxMediaObject@@UAEPAXI@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CVoxMediaObject@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CVoxMediaObject@@QAE@XZ PROC NEAR			; CVoxMediaObject::CVoxMediaObject, COMDAT
; _this$ = ecx

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XMediaObject@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CVoxMediaObject@@6B@

; 218  :     DPF_ENTER();
; 219  : 
; 220  :     //
; 221  :     // Initialize defaults
; 222  :     //
; 223  : 
; 224  :     m_ulRefCount = 1;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 08 01 00
	00 00		 mov	 DWORD PTR [ecx+8], 1

; 225  : 
; 226  :     DPF_LEAVE_VOID();
; 227  : }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CVoxMediaObject@@QAE@XZ ENDP				; CVoxMediaObject::CVoxMediaObject
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetStatus@CVoxMediaObject@@UAGJPAK@Z
DSOUND	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@CVoxMediaObject@@UAGJPAK@Z PROC NEAR		; CVoxMediaObject::GetStatus, COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 102  :     *pdwStatus = XMO_STATUSF_ACCEPT_INPUT_DATA | XMO_STATUSF_ACCEPT_OUTPUT_DATA;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00006	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 103  :     return DS_OK;

  0000c	33 c0		 xor	 eax, eax

; 104  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?GetStatus@CVoxMediaObject@@UAGJPAK@Z ENDP		; CVoxMediaObject::GetStatus
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Discontinuity@CVoxMediaObject@@UAGJXZ
DSOUND	SEGMENT
_this$ = 8
?Discontinuity@CVoxMediaObject@@UAGJXZ PROC NEAR	; CVoxMediaObject::Discontinuity, COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 108  :     return DS_OK;

  00003	33 c0		 xor	 eax, eax

; 109  : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?Discontinuity@CVoxMediaObject@@UAGJXZ ENDP		; CVoxMediaObject::Discontinuity
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Flush@CVoxMediaObject@@UAGJXZ
DSOUND	SEGMENT
_this$ = 8
?Flush@CVoxMediaObject@@UAGJXZ PROC NEAR		; CVoxMediaObject::Flush, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 113  :     return DS_OK;

  00003	33 c0		 xor	 eax, eax

; 114  : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?Flush@CVoxMediaObject@@UAGJXZ ENDP			; CVoxMediaObject::Flush
DSOUND	ENDS
PUBLIC	??1CVoxMediaObject@@UAE@XZ			; CVoxMediaObject::~CVoxMediaObject
; Function compile flags: /Odt
;	COMDAT ??_GCVoxMediaObject@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCVoxMediaObject@@UAEPAXI@Z PROC NEAR		; CVoxMediaObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CVoxMediaObject@@UAE@XZ ; CVoxMediaObject::~CVoxMediaObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35776
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35776:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCVoxMediaObject@@UAEPAXI@Z ENDP			; CVoxMediaObject::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0XMediaObject@@QAE@XZ PROC NEAR			; XMediaObject::XMediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XMediaObject@@QAE@XZ ENDP				; XMediaObject::XMediaObject
DSOUND	ENDS
PUBLIC	??_C@_0N@HDOBLKO@m_pfnVciFree?$AA@		; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0N@HDOBLKO@m_pfnVciFree?$AA@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\voxcodec.cpp
DSOUND_RD	SEGMENT
??_C@_0N@HDOBLKO@m_pfnVciFree?$AA@ DB 'm_pfnVciFree', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CVoxMediaObject@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CVoxMediaObject@@UAE@XZ PROC NEAR			; CVoxMediaObject::~CVoxMediaObject, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CVoxMediaObject@@6B@

; 253  :     DPF_ENTER();
; 254  : 
; 255  :     //
; 256  :     // Free working memory
; 257  :     //
; 258  : 
; 259  :     if(m_pvMemBlock)

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 6c 00	 cmp	 DWORD PTR [ecx+108], 0
  00017	74 31		 je	 SHORT $L35782

; 260  :     {
; 261  :         ASSERT(m_pfnVciFree);

  00019	68 05 01 00 00	 push	 261			; 00000105H
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HDOBLKO@m_pfnVciFree?$AA@
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	33 c0		 xor	 eax, eax
  0002d	83 7a 68 00	 cmp	 DWORD PTR [edx+104], 0
  00031	0f 94 c0	 sete	 al
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 262  :         m_pfnVciFree(&m_pvMemBlock);

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00043	51		 push	 ecx
  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	ff 52 68	 call	 DWORD PTR [edx+104]
$L35782:

; 263  :     }
; 264  : 
; 265  :     DPF_LEAVE_VOID();
; 266  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??1CVoxMediaObject@@UAE@XZ ENDP				; CVoxMediaObject::~CVoxMediaObject
DSOUND	ENDS
PUBLIC	?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ	; CVoxMediaObject::GetEncodeAlignment
PUBLIC	??_C@_0BK@IHFDMAJI@Invalid?5encode?5format?5tag?$AA@ ; `string'
EXTRN	_vciGetInfoSC3@4:NEAR
EXTRN	_vciEncodeSC3@8:NEAR
EXTRN	_vciDecodeSC3@8:NEAR
EXTRN	_vciInitEncodeSC3@4:NEAR
EXTRN	_vciInitDecodeSC3@4:NEAR
EXTRN	_vciFreeEncodeSC3@4:NEAR
EXTRN	_vciFreeDecodeSC3@4:NEAR
EXTRN	_vciGetInfoSC6@4:NEAR
EXTRN	_vciEncodeSC6@8:NEAR
EXTRN	_vciDecodeSC6@8:NEAR
EXTRN	_vciInitEncodeSC6@4:NEAR
EXTRN	_vciInitDecodeSC6@4:NEAR
EXTRN	_vciFreeEncodeSC6@4:NEAR
EXTRN	_vciFreeDecodeSC6@4:NEAR
EXTRN	_vciGetInfoVR12@4:NEAR
EXTRN	_vciDecodeVR12@8:NEAR
EXTRN	_vciEncodeVR12@8:NEAR
EXTRN	_vciInitEncodeVR12@4:NEAR
EXTRN	_vciInitDecodeVR12@4:NEAR
EXTRN	_vciFreeEncodeVR12@4:NEAR
EXTRN	_vciFreeDecodeVR12@4:NEAR
;	COMDAT ??_C@_0BK@IHFDMAJI@Invalid?5encode?5format?5tag?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@IHFDMAJI@Invalid?5encode?5format?5tag?$AA@ DB 'Invalid encode f'
	DB	'ormat tag', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CVoxMediaObject@@QAGXGHPAUvoicecodecwaveformat_tag@@PAUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT
tv159 = -8
tv66 = -4
_this$ = 8
_wEncodeFormatTag$ = 12
_fCreateEncoder$ = 16
_pwfxEncoded$ = 20
_pwfxDecoded$ = 24
?Initialize@CVoxMediaObject@@QAGXGHPAUvoicecodecwaveformat_tag@@PAUtWAVEFORMATEX@@@Z PROC NEAR ; CVoxMediaObject::Initialize, COMDAT

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 300  :     DPF_ENTER();
; 301  : 
; 302  :     //
; 303  :     // Save data members
; 304  :     //
; 305  : 
; 306  :     m_fEncoder = fCreateEncoder;

  00006	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00009	8b 4d 10	 mov	 ecx, DWORD PTR _fCreateEncoder$[ebp]
  0000c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 307  : 
; 308  :     //
; 309  :     // Set up the function table and save CODEC-specific values
; 310  :     //
; 311  : 
; 312  :     switch(wEncodeFormatTag) 
; 313  :     {

  0000f	0f b7 55 0c	 movzx	 edx, WORD PTR _wEncodeFormatTag$[ebp]
  00013	89 55 fc	 mov	 DWORD PTR tv66[ebp], edx
  00016	83 7d fc 77	 cmp	 DWORD PTR tv66[ebp], 119 ; 00000077H
  0001a	0f 84 cc 00 00
	00		 je	 $L35802
  00020	83 7d fc 7a	 cmp	 DWORD PTR tv66[ebp], 122 ; 0000007aH
  00024	74 0b		 je	 SHORT $L35796
  00026	83 7d fc 7b	 cmp	 DWORD PTR tv66[ebp], 123 ; 0000007bH
  0002a	74 64		 je	 SHORT $L35799
  0002c	e9 17 01 00 00	 jmp	 $L35805
$L35796:

; 314  :         case WAVE_FORMAT_VOXWARE_SC03:
; 315  :             m_pfnVciGetInfo = vciGetInfoSC3;

  00031	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], OFFSET FLAT:_vciGetInfoSC3@4

; 316  : 
; 317  :             if(m_fEncoder)

  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00042	74 20		 je	 SHORT $L35797

; 318  :             {
; 319  :                 m_pfnVciProcess = vciEncodeSC3;

  00044	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00047	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], OFFSET FLAT:_vciEncodeSC3@8

; 320  :                 m_pfnVciInit = vciInitEncodeSC3;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00051	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], OFFSET FLAT:_vciInitEncodeSC3@4

; 321  :                 m_pfnVciFree = vciFreeEncodeSC3;

  00058	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], OFFSET FLAT:_vciFreeEncodeSC3@4

; 322  :             }
; 323  :             else

  00062	eb 1e		 jmp	 SHORT $L35798
$L35797:

; 324  :             {
; 325  :                 m_pfnVciProcess = vciDecodeSC3;

  00064	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00067	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], OFFSET FLAT:_vciDecodeSC3@8

; 326  :                 m_pfnVciInit = vciInitDecodeSC3;

  0006e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00071	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], OFFSET FLAT:_vciInitDecodeSC3@4

; 327  :                 m_pfnVciFree = vciFreeDecodeSC3;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], OFFSET FLAT:_vciFreeDecodeSC3@4
$L35798:

; 328  :             }
; 329  : 
; 330  :             m_wEncodeFrameSize = VOXWARE_SC03_FRAMELENGTH;

  00082	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00085	66 c7 42 58 08
	00		 mov	 WORD PTR [edx+88], 8

; 331  : 
; 332  :             break;

  0008b	e9 d1 00 00 00	 jmp	 $L35793
$L35799:

; 333  : 
; 334  :         case WAVE_FORMAT_VOXWARE_SC06:
; 335  :             m_pfnVciGetInfo = vciGetInfoSC6;

  00090	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00093	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], OFFSET FLAT:_vciGetInfoSC6@4

; 336  : 
; 337  :             if(m_fEncoder)

  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  000a1	74 20		 je	 SHORT $L35800

; 338  :             {
; 339  :                 m_pfnVciProcess = vciEncodeSC6;

  000a3	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], OFFSET FLAT:_vciEncodeSC6@8

; 340  :                 m_pfnVciInit = vciInitEncodeSC6;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], OFFSET FLAT:_vciInitEncodeSC6@4

; 341  :                 m_pfnVciFree = vciFreeEncodeSC6;

  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], OFFSET FLAT:_vciFreeEncodeSC6@4

; 342  :             }
; 343  :             else

  000c1	eb 1e		 jmp	 SHORT $L35801
$L35800:

; 344  :             {
; 345  :                 m_pfnVciProcess = vciDecodeSC6;

  000c3	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000c6	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], OFFSET FLAT:_vciDecodeSC6@8

; 346  :                 m_pfnVciInit = vciInitDecodeSC6;

  000cd	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], OFFSET FLAT:_vciInitDecodeSC6@4

; 347  :                 m_pfnVciFree = vciFreeDecodeSC6;

  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], OFFSET FLAT:_vciFreeDecodeSC6@4
$L35801:

; 348  :             }
; 349  : 
; 350  :             m_wEncodeFrameSize = VOXWARE_SC06_FRAMELENGTH;

  000e1	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000e4	66 c7 42 58 10
	00		 mov	 WORD PTR [edx+88], 16	; 00000010H

; 351  : 
; 352  :             break;

  000ea	eb 75		 jmp	 SHORT $L35793
$L35802:

; 353  : 
; 354  :         case WAVE_FORMAT_VOXWARE_VR12:
; 355  :             m_pfnVciGetInfo = vciGetInfoVR12;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], OFFSET FLAT:_vciGetInfoVR12@4

; 356  : 
; 357  :             if(m_fEncoder)

  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  000fd	74 20		 je	 SHORT $L35803

; 358  :             {
; 359  :                 m_pfnVciProcess = vciEncodeVR12;

  000ff	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00102	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], OFFSET FLAT:_vciEncodeVR12@8

; 360  :                 m_pfnVciInit = vciInitEncodeVR12;

  00109	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], OFFSET FLAT:_vciInitEncodeVR12@4

; 361  :                 m_pfnVciFree = vciFreeEncodeVR12;

  00113	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], OFFSET FLAT:_vciFreeEncodeVR12@4

; 362  :             }
; 363  :             else

  0011d	eb 1e		 jmp	 SHORT $L35804
$L35803:

; 364  :             {
; 365  :                 m_pfnVciProcess = vciDecodeVR12;

  0011f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00122	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], OFFSET FLAT:_vciDecodeVR12@8

; 366  :                 m_pfnVciInit = vciInitDecodeVR12;

  00129	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0012c	c7 40 64 00 00
	00 00		 mov	 DWORD PTR [eax+100], OFFSET FLAT:_vciInitDecodeVR12@4

; 367  :                 m_pfnVciFree = vciFreeDecodeVR12;

  00133	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], OFFSET FLAT:_vciFreeDecodeVR12@4
$L35804:

; 368  :             }
; 369  : 
; 370  :             m_wEncodeFrameSize = VOXWARE_VR12_FRAMELENGTH;

  0013d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00140	66 c7 42 58 15
	00		 mov	 WORD PTR [edx+88], 21	; 00000015H

; 371  : 
; 372  :             break;

  00146	eb 19		 jmp	 SHORT $L35793
$L35805:

; 373  : 
; 374  :         default:
; 375  :             ASSERTMSG("Invalid encode format tag");

  00148	68 77 01 00 00	 push	 375			; 00000177H
  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  00152	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@IHFDMAJI@Invalid?5encode?5format?5tag?$AA@
  00157	6a 01		 push	 1
  00159	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0015e	83 c4 10	 add	 esp, 16			; 00000010H
$L35793:

; 376  :             break;
; 377  :     }
; 378  : 
; 379  :     //
; 380  :     // Initialize the Voxware library
; 381  :     //
; 382  : 
; 383  :     m_pfnVciInit(&m_pvMemBlock);

  00161	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00164	83 c0 6c	 add	 eax, 108		; 0000006cH
  00167	50		 push	 eax
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	ff 51 64	 call	 DWORD PTR [ecx+100]

; 384  :     m_pfnVciGetInfo(&m_vciCodecInfo);

  0016e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00171	83 c2 0c	 add	 edx, 12			; 0000000cH
  00174	52		 push	 edx
  00175	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00178	ff 50 5c	 call	 DWORD PTR [eax+92]

; 385  : 
; 386  :     //
; 387  :     // Build an encoded format for the caller
; 388  :     //
; 389  : 
; 390  :     if(pwfxEncoded)

  0017b	83 7d 14 00	 cmp	 DWORD PTR _pwfxEncoded$[ebp], 0
  0017f	0f 84 ce 00 00
	00		 je	 $L35807

; 391  :     {
; 392  :         pwfxEncoded->wfx.wFormatTag = wEncodeFormatTag;

  00185	8b 4d 14	 mov	 ecx, DWORD PTR _pwfxEncoded$[ebp]
  00188	66 8b 55 0c	 mov	 dx, WORD PTR _wEncodeFormatTag$[ebp]
  0018c	66 89 11	 mov	 WORD PTR [ecx], dx

; 393  :         pwfxEncoded->wfx.nChannels = m_vciCodecInfo.wNumChannels;

  0018f	8b 45 14	 mov	 eax, DWORD PTR _pwfxEncoded$[ebp]
  00192	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	66 8b 51 3e	 mov	 dx, WORD PTR [ecx+62]
  00199	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 394  :         pwfxEncoded->wfx.nSamplesPerSec = m_vciCodecInfo.wSamplingRate;

  0019d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001a0	0f b7 48 38	 movzx	 ecx, WORD PTR [eax+56]
  001a4	8b 55 14	 mov	 edx, DWORD PTR _pwfxEncoded$[ebp]
  001a7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 395  :         pwfxEncoded->wfx.wBitsPerSample = m_vciCodecInfo.wNumBitsPerSample;

  001aa	8b 45 14	 mov	 eax, DWORD PTR _pwfxEncoded$[ebp]
  001ad	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001b0	66 8b 51 3a	 mov	 dx, WORD PTR [ecx+58]
  001b4	66 89 50 0e	 mov	 WORD PTR [eax+14], dx

; 396  :         pwfxEncoded->wfx.nBlockAlign = (WORD)GetEncodeAlignment();

  001b8	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 ?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetEncodeAlignment
  001c1	8b 4d 14	 mov	 ecx, DWORD PTR _pwfxEncoded$[ebp]
  001c4	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 397  :         pwfxEncoded->wfx.cbSize = sizeof(*pwfxEncoded) - sizeof(pwfxEncoded->wfx);

  001c8	8b 55 14	 mov	 edx, DWORD PTR _pwfxEncoded$[ebp]
  001cb	66 c7 42 10 04
	00		 mov	 WORD PTR [edx+16], 4

; 398  :         
; 399  :         switch(wEncodeFormatTag) 
; 400  :         {

  001d1	0f b7 45 0c	 movzx	 eax, WORD PTR _wEncodeFormatTag$[ebp]
  001d5	89 45 f8	 mov	 DWORD PTR tv159[ebp], eax
  001d8	83 7d f8 77	 cmp	 DWORD PTR tv159[ebp], 119 ; 00000077H
  001dc	74 42		 je	 SHORT $L35815
  001de	83 7d f8 7a	 cmp	 DWORD PTR tv159[ebp], 122 ; 0000007aH
  001e2	74 08		 je	 SHORT $L35813
  001e4	83 7d f8 7b	 cmp	 DWORD PTR tv159[ebp], 123 ; 0000007bH
  001e8	74 1c		 je	 SHORT $L35814
  001ea	eb 4e		 jmp	 SHORT $L35816
$L35813:

; 401  :             case WAVE_FORMAT_VOXWARE_SC03:
; 402  :                 pwfxEncoded->wfx.nAvgBytesPerSec = VOXWARE_SC03_MAXBITSPERSEC;

  001ec	8b 4d 14	 mov	 ecx, DWORD PTR _pwfxEncoded$[ebp]
  001ef	c7 41 08 80 0c
	00 00		 mov	 DWORD PTR [ecx+8], 3200	; 00000c80H

; 403  :                 
; 404  :                 pwfxEncoded->dwMilliSecPerFrame = VOXWARE_SC03_TIMEOUT;

  001f6	8b 55 14	 mov	 edx, DWORD PTR _pwfxEncoded$[ebp]
  001f9	c6 42 15 14	 mov	 BYTE PTR [edx+21], 20	; 00000014H

; 405  :                 pwfxEncoded->dwTrailFrames = VOXWARE_SC03_TRAILFRAMES;

  001fd	8b 45 14	 mov	 eax, DWORD PTR _pwfxEncoded$[ebp]
  00200	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 406  : 
; 407  :                 break;

  00204	eb 4d		 jmp	 SHORT $L35807
$L35814:

; 408  : 
; 409  :             case WAVE_FORMAT_VOXWARE_SC06:
; 410  :                 pwfxEncoded->wfx.nAvgBytesPerSec = VOXWARE_SC06_MAXBITSPERSEC;

  00206	8b 4d 14	 mov	 ecx, DWORD PTR _pwfxEncoded$[ebp]
  00209	c7 41 08 00 19
	00 00		 mov	 DWORD PTR [ecx+8], 6400	; 00001900H

; 411  :                 
; 412  :                 pwfxEncoded->dwMilliSecPerFrame = VOXWARE_SC06_TIMEOUT;

  00210	8b 55 14	 mov	 edx, DWORD PTR _pwfxEncoded$[ebp]
  00213	c6 42 15 14	 mov	 BYTE PTR [edx+21], 20	; 00000014H

; 413  :                 pwfxEncoded->dwTrailFrames = VOXWARE_SC06_TRAILFRAMES;

  00217	8b 45 14	 mov	 eax, DWORD PTR _pwfxEncoded$[ebp]
  0021a	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 414  : 
; 415  :                 break;

  0021e	eb 33		 jmp	 SHORT $L35807
$L35815:

; 416  : 
; 417  :             case WAVE_FORMAT_VOXWARE_VR12:
; 418  :                 pwfxEncoded->wfx.nAvgBytesPerSec = VOXWARE_VR12_MAXBITSPERSEC;

  00220	8b 4d 14	 mov	 ecx, DWORD PTR _pwfxEncoded$[ebp]
  00223	c7 41 08 1e 07
	00 00		 mov	 DWORD PTR [ecx+8], 1822	; 0000071eH

; 419  :                 
; 420  :                 pwfxEncoded->dwMilliSecPerFrame = VOXWARE_VR12_TIMEOUT;

  0022a	8b 55 14	 mov	 edx, DWORD PTR _pwfxEncoded$[ebp]
  0022d	c6 42 15 5a	 mov	 BYTE PTR [edx+21], 90	; 0000005aH

; 421  :                 pwfxEncoded->dwTrailFrames = VOXWARE_VR12_TRAILFRAMES;

  00231	8b 45 14	 mov	 eax, DWORD PTR _pwfxEncoded$[ebp]
  00234	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 422  : 
; 423  :                 break;

  00238	eb 19		 jmp	 SHORT $L35807
$L35816:

; 424  : 
; 425  :             default:
; 426  :                 ASSERTMSG("Invalid encode format tag");

  0023a	68 aa 01 00 00	 push	 426			; 000001aaH
  0023f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  00244	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@IHFDMAJI@Invalid?5encode?5format?5tag?$AA@
  00249	6a 01		 push	 1
  0024b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00250	83 c4 10	 add	 esp, 16			; 00000010H
$L35807:

; 427  :                 break;
; 428  :         }
; 429  :     }
; 430  : 
; 431  :     //
; 432  :     // Build a decoded format for the caller
; 433  :     //
; 434  : 
; 435  :     if(pwfxDecoded)

  00253	83 7d 18 00	 cmp	 DWORD PTR _pwfxDecoded$[ebp], 0
  00257	74 69		 je	 SHORT $L35791

; 436  :     {
; 437  :         pwfxDecoded->wFormatTag = WAVE_FORMAT_PCM;

  00259	8b 4d 18	 mov	 ecx, DWORD PTR _pwfxDecoded$[ebp]
  0025c	66 c7 01 01 00	 mov	 WORD PTR [ecx], 1

; 438  :         pwfxDecoded->nChannels = m_vciCodecInfo.wNumChannels;

  00261	8b 55 18	 mov	 edx, DWORD PTR _pwfxDecoded$[ebp]
  00264	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00267	66 8b 48 3e	 mov	 cx, WORD PTR [eax+62]
  0026b	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 439  :         pwfxDecoded->nSamplesPerSec = m_vciCodecInfo.wSamplingRate;

  0026f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00272	0f b7 42 38	 movzx	 eax, WORD PTR [edx+56]
  00276	8b 4d 18	 mov	 ecx, DWORD PTR _pwfxDecoded$[ebp]
  00279	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 440  :         pwfxDecoded->wBitsPerSample = m_vciCodecInfo.wNumBitsPerSample;

  0027c	8b 55 18	 mov	 edx, DWORD PTR _pwfxDecoded$[ebp]
  0027f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00282	66 8b 48 3a	 mov	 cx, WORD PTR [eax+58]
  00286	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx

; 441  :         pwfxDecoded->nBlockAlign = pwfxDecoded->nChannels * pwfxDecoded->wBitsPerSample >> 3;

  0028a	8b 55 18	 mov	 edx, DWORD PTR _pwfxDecoded$[ebp]
  0028d	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  00291	8b 4d 18	 mov	 ecx, DWORD PTR _pwfxDecoded$[ebp]
  00294	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  00298	0f af c2	 imul	 eax, edx
  0029b	c1 f8 03	 sar	 eax, 3
  0029e	8b 4d 18	 mov	 ecx, DWORD PTR _pwfxDecoded$[ebp]
  002a1	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 442  :         pwfxDecoded->nAvgBytesPerSec = pwfxDecoded->nBlockAlign * pwfxDecoded->nSamplesPerSec;

  002a5	8b 55 18	 mov	 edx, DWORD PTR _pwfxDecoded$[ebp]
  002a8	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  002ac	8b 4d 18	 mov	 ecx, DWORD PTR _pwfxDecoded$[ebp]
  002af	0f af 41 04	 imul	 eax, DWORD PTR [ecx+4]
  002b3	8b 55 18	 mov	 edx, DWORD PTR _pwfxDecoded$[ebp]
  002b6	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 443  :         pwfxDecoded->cbSize = 0;

  002b9	8b 45 18	 mov	 eax, DWORD PTR _pwfxDecoded$[ebp]
  002bc	66 c7 40 10 00
	00		 mov	 WORD PTR [eax+16], 0
$L35791:

; 444  :     }
; 445  : 
; 446  :     DPF_LEAVE_VOID();
; 447  : }

  002c2	8b e5		 mov	 esp, ebp
  002c4	5d		 pop	 ebp
  002c5	c2 14 00	 ret	 20			; 00000014H
?Initialize@CVoxMediaObject@@QAGXGHPAUvoicecodecwaveformat_tag@@PAUtWAVEFORMATEX@@@Z ENDP ; CVoxMediaObject::Initialize
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT
_this$ = 8
?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ PROC NEAR	; CVoxMediaObject::GetEncodeAlignment, COMDAT

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 118  :     return m_wEncodeFrameSize;

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	0f b7 40 58	 movzx	 eax, WORD PTR [eax+88]

; 119  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ ENDP	; CVoxMediaObject::GetEncodeAlignment
DSOUND	ENDS
PUBLIC	??_C@_0N@FIIJPALH@m_ulRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@FIIJPALH@m_ulRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@FIIJPALH@m_ulRefCount?$AA@ DB 'm_ulRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CVoxMediaObject@@UAGKXZ
DSOUND	SEGMENT
_ulRefCount$ = -4
_this$ = 8
?AddRef@CVoxMediaObject@@UAGKXZ PROC NEAR		; CVoxMediaObject::AddRef, COMDAT

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 474  :     ULONG                   ulRefCount;
; 475  : 
; 476  :     DPF_ENTER();
; 477  : 
; 478  :     ASSERT(m_ulRefCount);

  00004	68 de 01 00 00	 push	 478			; 000001deH
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@FIIJPALH@m_ulRefCount?$AA@
  00013	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00016	33 c9		 xor	 ecx, ecx
  00018	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001c	0f 94 c1	 sete	 cl
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 479  :     
; 480  :     ulRefCount = ++m_ulRefCount;

  00028	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002e	83 c0 01	 add	 eax, 1
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00037	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0003d	89 45 fc	 mov	 DWORD PTR _ulRefCount$[ebp], eax

; 481  : 
; 482  :     DPF_LEAVE(ulRefCount);
; 483  : 
; 484  :     return ulRefCount;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _ulRefCount$[ebp]

; 485  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?AddRef@CVoxMediaObject@@UAGKXZ ENDP			; CVoxMediaObject::AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Release@CVoxMediaObject@@UAGKXZ
DSOUND	SEGMENT
tv82 = -16
$T36234 = -12
$T36233 = -8
_ulRefCount$ = -4
_this$ = 8
?Release@CVoxMediaObject@@UAGKXZ PROC NEAR		; CVoxMediaObject::Release, COMDAT

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 512  :     ULONG                   ulRefCount;
; 513  : 
; 514  :     DPF_ENTER();
; 515  : 
; 516  :     ASSERT(m_ulRefCount);

  00006	68 04 02 00 00	 push	 516			; 00000204H
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@FIIJPALH@m_ulRefCount?$AA@
  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	33 c9		 xor	 ecx, ecx
  0001a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001e	0f 94 c1	 sete	 cl
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 517  :     
; 518  :     if(!(ulRefCount = --m_ulRefCount))

  0002a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00030	83 e8 01	 sub	 eax, 1
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0003f	89 45 fc	 mov	 DWORD PTR _ulRefCount$[ebp], eax
  00042	83 7d fc 00	 cmp	 DWORD PTR _ulRefCount$[ebp], 0
  00046	75 2b		 jne	 SHORT $L35829

; 519  :     {
; 520  :         delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f4	 mov	 DWORD PTR $T36234[ebp], ecx
  0004e	8b 55 f4	 mov	 edx, DWORD PTR $T36234[ebp]
  00051	89 55 f8	 mov	 DWORD PTR $T36233[ebp], edx
  00054	83 7d f8 00	 cmp	 DWORD PTR $T36233[ebp], 0
  00058	74 12		 je	 SHORT $L36235
  0005a	6a 01		 push	 1
  0005c	8b 45 f8	 mov	 eax, DWORD PTR $T36233[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d f8	 mov	 ecx, DWORD PTR $T36233[ebp]
  00064	ff 52 1c	 call	 DWORD PTR [edx+28]
  00067	89 45 f0	 mov	 DWORD PTR tv82[ebp], eax
  0006a	eb 07		 jmp	 SHORT $L35829
$L36235:
  0006c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L35829:

; 521  :     }
; 522  : 
; 523  :     DPF_LEAVE(ulRefCount);
; 524  : 
; 525  :     return ulRefCount;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _ulRefCount$[ebp]

; 526  : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?Release@CVoxMediaObject@@UAGKXZ ENDP			; CVoxMediaObject::Release
DSOUND	ENDS
PUBLIC	?GetInputAlignment@CVoxMediaObject@@IAGKXZ	; CVoxMediaObject::GetInputAlignment
PUBLIC	?GetOutputAlignment@CVoxMediaObject@@IAGKXZ	; CVoxMediaObject::GetOutputAlignment
; Function compile flags: /Odt
;	COMDAT ?GetInfo@CVoxMediaObject@@UAGJPAU_XMEDIAINFO@@@Z
DSOUND	SEGMENT
_this$ = 8
_pInfo$ = 12
?GetInfo@CVoxMediaObject@@UAGJPAU_XMEDIAINFO@@@Z PROC NEAR ; CVoxMediaObject::GetInfo, COMDAT

; 552  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  :     DPF_ENTER();
; 554  : 
; 555  :     pInfo->dwFlags = XMO_STREAMF_FIXED_SAMPLE_SIZE;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pInfo$[ebp]
  00006	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 556  :     pInfo->dwInputSize = GetInputAlignment();

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ?GetInputAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetInputAlignment
  00015	8b 55 0c	 mov	 edx, DWORD PTR _pInfo$[ebp]
  00018	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 557  :     pInfo->dwOutputSize = GetOutputAlignment();

  0001b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?GetOutputAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetOutputAlignment
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  00027	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 558  :     pInfo->dwMaxLookahead = 0;

  0002a	8b 55 0c	 mov	 edx, DWORD PTR _pInfo$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 559  : 
; 560  :     DPF_LEAVE_HRESULT(DS_OK);
; 561  : 
; 562  :     return DS_OK;

  00034	33 c0		 xor	 eax, eax

; 563  : }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
?GetInfo@CVoxMediaObject@@UAGJPAU_XMEDIAINFO@@@Z ENDP	; CVoxMediaObject::GetInfo
DSOUND	ENDS
PUBLIC	?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ	; CVoxMediaObject::GetDecodeAlignment
; Function compile flags: /Odt
;	COMDAT ?GetInputAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT
tv70 = -4
_this$ = 8
?GetInputAlignment@CVoxMediaObject@@IAGKXZ PROC NEAR	; CVoxMediaObject::GetInputAlignment, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 128  :     return m_fEncoder ? GetDecodeAlignment() : GetEncodeAlignment();

  00004	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00007	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000b	74 0e		 je	 SHORT $L36243
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetDecodeAlignment
  00016	89 45 fc	 mov	 DWORD PTR tv70[ebp], eax
  00019	eb 0c		 jmp	 SHORT $L36244
$L36243:
  0001b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetEncodeAlignment
  00024	89 45 fc	 mov	 DWORD PTR tv70[ebp], eax
$L36244:
  00027	8b 45 fc	 mov	 eax, DWORD PTR tv70[ebp]

; 129  : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?GetInputAlignment@CVoxMediaObject@@IAGKXZ ENDP		; CVoxMediaObject::GetInputAlignment
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT
_this$ = 8
?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ PROC NEAR	; CVoxMediaObject::GetDecodeAlignment, COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  :     return m_vciCodecInfo.wNumSamplesPerFrame << 1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	0f b7 40 3c	 movzx	 eax, WORD PTR [eax+60]
  0000a	d1 e0		 shl	 eax, 1

; 124  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ ENDP	; CVoxMediaObject::GetDecodeAlignment
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetOutputAlignment@CVoxMediaObject@@IAGKXZ
DSOUND	SEGMENT
tv70 = -4
_this$ = 8
?GetOutputAlignment@CVoxMediaObject@@IAGKXZ PROC NEAR	; CVoxMediaObject::GetOutputAlignment, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 133  :     return m_fEncoder ? GetEncodeAlignment() : GetDecodeAlignment();

  00004	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00007	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000b	74 0e		 je	 SHORT $L36251
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetEncodeAlignment
  00016	89 45 fc	 mov	 DWORD PTR tv70[ebp], eax
  00019	eb 0c		 jmp	 SHORT $L36252
$L36251:
  0001b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetDecodeAlignment
  00024	89 45 fc	 mov	 DWORD PTR tv70[ebp], eax
$L36252:
  00027	8b 45 fc	 mov	 eax, DWORD PTR tv70[ebp]

; 134  : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?GetOutputAlignment@CVoxMediaObject@@IAGKXZ ENDP	; CVoxMediaObject::GetOutputAlignment
DSOUND	ENDS
PUBLIC	??_C@_0BH@HBDOJIHH@pxmbSource?5?$CG?$CG?5pxmbDest?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OGLOMHEL@CVoxMediaObject?3?3Process?$AA@ ; `string'
PUBLIC	??_C@_0BN@NMCPHOON@Encode?5failed?5with?5error?5?$CFlu?$AA@ ; `string'
PUBLIC	?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z	; XMOAcceptPacket
PUBLIC	?XMOCompletePacketSync@@YGXPBU_XMEDIAPACKET@@KK@Z ; XMOCompletePacketSync
PUBLIC	??_C@_08BCCFIPOB@VOXCODEC?$AA@			; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0BH@HBDOJIHH@pxmbSource?5?$CG?$CG?5pxmbDest?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@HBDOJIHH@pxmbSource?5?$CG?$CG?5pxmbDest?$AA@ DB 'pxmbSource && '
	DB	'pxmbDest', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_08BCCFIPOB@VOXCODEC?$AA@
DSOUND_RD	SEGMENT
??_C@_08BCCFIPOB@VOXCODEC?$AA@ DB 'VOXCODEC', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@OGLOMHEL@CVoxMediaObject?3?3Process?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@OGLOMHEL@CVoxMediaObject?3?3Process?$AA@ DB 'CVoxMediaObject::P'
	DB	'rocess', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@NMCPHOON@Encode?5failed?5with?5error?5?$CFlu?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@NMCPHOON@Encode?5failed?5with?5error?5?$CFlu?$AA@ DB 'Encode fa'
	DB	'iled with error %lu', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Process@CVoxMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
DSOUND	SEGMENT
tv69 = -60
_pxmbDecode$ = -56
_hr$ = -52
_dwDecodeAlignment$ = -48
_pxmbEncode$ = -44
_vciBlock$ = -40
_i$ = -16
_dwEncodeAlignment$ = -12
_vciResult$ = -8
_dwFrames$ = -4
_this$ = 8
_pxmbSource$ = 12
_pxmbDest$ = 16
?Process@CVoxMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z PROC NEAR ; CVoxMediaObject::Process, COMDAT

; 591  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 592  :     HRESULT                 hr                  = DS_OK;

  00006	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 593  :     LPCXMEDIAPACKET         pxmbDecode;
; 594  :     LPCXMEDIAPACKET         pxmbEncode;
; 595  :     DWORD                   dwEncodeAlignment;
; 596  :     DWORD                   dwDecodeAlignment;
; 597  :     DWORD                   dwFrames;
; 598  :     VCI_CODEC_IO_BLOCK      vciBlock;
; 599  :     VCI_RETCODE             vciResult;
; 600  :     DWORD                   i;
; 601  :     
; 602  :     DPF_ENTER();
; 603  : 
; 604  :     ASSERT(pxmbSource && pxmbDest);

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _pxmbSource$[ebp], 0
  00011	74 0f		 je	 SHORT $L36256
  00013	83 7d 10 00	 cmp	 DWORD PTR _pxmbDest$[ebp], 0
  00017	74 09		 je	 SHORT $L36256
  00019	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  00020	eb 07		 jmp	 SHORT $L36257
$L36256:
  00022	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
$L36257:
  00029	68 5c 02 00 00	 push	 604			; 0000025cH
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@HBDOJIHH@pxmbSource?5?$CG?$CG?5pxmbDest?$AA@
  00038	8b 45 c4	 mov	 eax, DWORD PTR tv69[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 605  : 
; 606  :     if(m_fEncoder)

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0004b	74 0e		 je	 SHORT $L35853

; 607  :     {
; 608  :         pxmbDecode = pxmbSource;

  0004d	8b 55 0c	 mov	 edx, DWORD PTR _pxmbSource$[ebp]
  00050	89 55 c8	 mov	 DWORD PTR _pxmbDecode$[ebp], edx

; 609  :         pxmbEncode = pxmbDest;

  00053	8b 45 10	 mov	 eax, DWORD PTR _pxmbDest$[ebp]
  00056	89 45 d4	 mov	 DWORD PTR _pxmbEncode$[ebp], eax

; 610  :     }
; 611  :     else

  00059	eb 0c		 jmp	 SHORT $L35854
$L35853:

; 612  :     {
; 613  :         pxmbDecode = pxmbDest;

  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _pxmbDest$[ebp]
  0005e	89 4d c8	 mov	 DWORD PTR _pxmbDecode$[ebp], ecx

; 614  :         pxmbEncode = pxmbSource;

  00061	8b 55 0c	 mov	 edx, DWORD PTR _pxmbSource$[ebp]
  00064	89 55 d4	 mov	 DWORD PTR _pxmbEncode$[ebp], edx
$L35854:

; 615  :     }
; 616  : 
; 617  :     // 
; 618  :     // Initialize output members of the packet descriptors
; 619  :     //
; 620  :     
; 621  :     XMOAcceptPacket(pxmbSource);

  00067	8b 45 0c	 mov	 eax, DWORD PTR _pxmbSource$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z ; XMOAcceptPacket

; 622  :     XMOAcceptPacket(pxmbDest);

  00070	8b 4d 10	 mov	 ecx, DWORD PTR _pxmbDest$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z ; XMOAcceptPacket

; 623  : 
; 624  :     //
; 625  :     // Set up the processing block
; 626  :     //
; 627  : 
; 628  :     dwEncodeAlignment = GetEncodeAlignment();

  00079	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 ?GetEncodeAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetEncodeAlignment
  00082	89 45 f4	 mov	 DWORD PTR _dwEncodeAlignment$[ebp], eax

; 629  :     dwDecodeAlignment = GetDecodeAlignment();

  00085	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?GetDecodeAlignment@CVoxMediaObject@@IAGKXZ ; CVoxMediaObject::GetDecodeAlignment
  0008e	89 45 d0	 mov	 DWORD PTR _dwDecodeAlignment$[ebp], eax

; 630  : 
; 631  :     ZeroMemory(&vciBlock, sizeof(vciBlock));

  00091	6a 18		 push	 24			; 00000018H
  00093	6a 00		 push	 0
  00095	8d 4d d8	 lea	 ecx, DWORD PTR _vciBlock$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _memset
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 632  :     
; 633  :     vciBlock.pPCMBuffer = (short *)pxmbDecode->pvBuffer;

  000a1	8b 55 c8	 mov	 edx, DWORD PTR _pxmbDecode$[ebp]
  000a4	8b 02		 mov	 eax, DWORD PTR [edx]
  000a6	89 45 d8	 mov	 DWORD PTR _vciBlock$[ebp], eax

; 634  :     vciBlock.pVoxBuffer = (LPBYTE)pxmbEncode->pvBuffer;

  000a9	8b 4d d4	 mov	 ecx, DWORD PTR _pxmbEncode$[ebp]
  000ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ae	89 55 e0	 mov	 DWORD PTR _vciBlock$[ebp+8], edx

; 635  :     vciBlock.wVoxBufferSize = (WORD)pxmbEncode->dwMaxSize;

  000b1	8b 45 d4	 mov	 eax, DWORD PTR _pxmbEncode$[ebp]
  000b4	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  000b8	66 89 4d e4	 mov	 WORD PTR _vciBlock$[ebp+12], cx

; 636  : 
; 637  :     dwFrames = pxmbDecode->dwMaxSize / dwDecodeAlignment;

  000bc	8b 55 c8	 mov	 edx, DWORD PTR _pxmbDecode$[ebp]
  000bf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c2	33 d2		 xor	 edx, edx
  000c4	f7 75 d0	 div	 DWORD PTR _dwDecodeAlignment$[ebp]
  000c7	89 45 fc	 mov	 DWORD PTR _dwFrames$[ebp], eax

; 638  : 
; 639  :     if(!m_fEncoder)

  000ca	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000d1	75 13		 jne	 SHORT $L35858

; 640  :     {
; 641  :         vciBlock.wVoxBufferWriteByteOffset = vciBlock.wVoxBufferSize;

  000d3	66 8b 4d e4	 mov	 cx, WORD PTR _vciBlock$[ebp+12]
  000d7	66 89 4d ea	 mov	 WORD PTR _vciBlock$[ebp+18], cx

; 642  :         vciBlock.wVoxBufferSize += 1;

  000db	0f b7 55 e4	 movzx	 edx, WORD PTR _vciBlock$[ebp+12]
  000df	83 c2 01	 add	 edx, 1
  000e2	66 89 55 e4	 mov	 WORD PTR _vciBlock$[ebp+12], dx
$L35858:

; 643  :     }
; 644  : 
; 645  :     //
; 646  :     // Enter the main loop
; 647  :     //
; 648  : 
; 649  :     for(i = 0; i < dwFrames; i++)

  000e6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ed	eb 09		 jmp	 SHORT $L35859
$L35860:
  000ef	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000f2	83 c0 01	 add	 eax, 1
  000f5	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L35859:
  000f8	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  000fb	3b 4d fc	 cmp	 ecx, DWORD PTR _dwFrames$[ebp]
  000fe	73 7c		 jae	 SHORT $L35861

; 650  :     {
; 651  :         if(VCI_NO_ERROR != (vciResult = m_pfnVciProcess(m_pvMemBlock, &vciBlock)))

  00100	8d 55 d8	 lea	 edx, DWORD PTR _vciBlock$[ebp]
  00103	52		 push	 edx
  00104	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00107	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0010a	51		 push	 ecx
  0010b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0010e	ff 52 60	 call	 DWORD PTR [edx+96]
  00111	66 89 45 f8	 mov	 WORD PTR _vciResult$[ebp], ax
  00115	0f b7 45 f8	 movzx	 eax, WORD PTR _vciResult$[ebp]
  00119	85 c0		 test	 eax, eax
  0011b	74 3b		 je	 SHORT $L35862

; 652  :         {
; 653  :             DPF_ERROR("Encode failed with error %lu", vciResult);

  0011d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08BCCFIPOB@VOXCODEC?$AA@
  00122	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@OGLOMHEL@CVoxMediaObject?3?3Process?$AA@
  00127	68 8d 02 00 00	 push	 653			; 0000028dH
  0012c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@OOMNNIFJ@c?3?2xbox?2private?2windows?2directx?2@
  00131	6a 01		 push	 1
  00133	6a 09		 push	 9
  00135	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0013a	83 c4 18	 add	 esp, 24			; 00000018H
  0013d	0f b7 4d f8	 movzx	 ecx, WORD PTR _vciResult$[ebp]
  00141	51		 push	 ecx
  00142	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@NMCPHOON@Encode?5failed?5with?5error?5?$CFlu?$AA@
  00147	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0014c	83 c4 08	 add	 esp, 8

; 654  :             hr = DSERR_GENERIC;

  0014f	c7 45 cc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 655  : 
; 656  :             break;

  00156	eb 24		 jmp	 SHORT $L35861
$L35862:

; 657  :         }
; 658  : 
; 659  :         vciBlock.pPCMBuffer += m_vciCodecInfo.wNumSamplesPerFrame;

  00158	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0015b	0f b7 42 3c	 movzx	 eax, WORD PTR [edx+60]
  0015f	8b 4d d8	 mov	 ecx, DWORD PTR _vciBlock$[ebp]
  00162	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00165	89 55 d8	 mov	 DWORD PTR _vciBlock$[ebp], edx

; 660  :         
; 661  :         if(m_fEncoder)

  00168	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0016b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0016f	74 06		 je	 SHORT $L35866

; 662  :         {
; 663  :             vciBlock.wSamplesInPCMBuffer = 0;

  00171	66 c7 45 dc 00
	00		 mov	 WORD PTR _vciBlock$[ebp+4], 0
$L35866:

; 664  :         }
; 665  :     }

  00177	e9 73 ff ff ff	 jmp	 $L35860
$L35861:

; 666  : 
; 667  :     //
; 668  :     // Complete the packets
; 669  :     //
; 670  : 
; 671  :     XMOCompletePacketSync(pxmbEncode, i * dwEncodeAlignment, SUCCEEDED(hr) ? XMEDIAPACKET_STATUS_SUCCESS : XMEDIAPACKET_STATUS_FAILURE);

  0017c	33 c9		 xor	 ecx, ecx
  0017e	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00182	0f 9d c1	 setge	 cl
  00185	49		 dec	 ecx
  00186	81 e1 05 40 00
	80		 and	 ecx, -2147467259	; 80004005H
  0018c	51		 push	 ecx
  0018d	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00190	0f af 55 f4	 imul	 edx, DWORD PTR _dwEncodeAlignment$[ebp]
  00194	52		 push	 edx
  00195	8b 45 d4	 mov	 eax, DWORD PTR _pxmbEncode$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?XMOCompletePacketSync@@YGXPBU_XMEDIAPACKET@@KK@Z ; XMOCompletePacketSync

; 672  :     XMOCompletePacketSync(pxmbDecode, i * dwDecodeAlignment, SUCCEEDED(hr) ? XMEDIAPACKET_STATUS_SUCCESS : XMEDIAPACKET_STATUS_FAILURE);

  0019e	33 c9		 xor	 ecx, ecx
  001a0	83 7d cc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001a4	0f 9d c1	 setge	 cl
  001a7	49		 dec	 ecx
  001a8	81 e1 05 40 00
	80		 and	 ecx, -2147467259	; 80004005H
  001ae	51		 push	 ecx
  001af	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  001b2	0f af 55 d0	 imul	 edx, DWORD PTR _dwDecodeAlignment$[ebp]
  001b6	52		 push	 edx
  001b7	8b 45 c8	 mov	 eax, DWORD PTR _pxmbDecode$[ebp]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?XMOCompletePacketSync@@YGXPBU_XMEDIAPACKET@@KK@Z ; XMOCompletePacketSync

; 673  : 
; 674  :     DPF_LEAVE_HRESULT(hr);
; 675  : 
; 676  :     return hr;

  001c0	8b 45 cc	 mov	 eax, DWORD PTR _hr$[ebp]

; 677  : }

  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c2 0c 00	 ret	 12			; 0000000cH
?Process@CVoxMediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z ENDP ; CVoxMediaObject::Process
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
DSOUND	ENDS
;	COMDAT ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT
_pxmp$ = 8
?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z PROC NEAR	; XMOAcceptPacket, COMDAT

; 1440 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1441 :     if(pxmp->pdwCompletedSize)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00006	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000a	74 0c		 je	 SHORT $L27994

; 1442 :     {
; 1443 :         *pxmp->pdwCompletedSize = 0;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L27994:

; 1444 :     }
; 1445 : 
; 1446 :     if(pxmp->pdwStatus)

  00018	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  0001b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001f	74 0c		 je	 SHORT $L27993

; 1447 :     {
; 1448 :         *pxmp->pdwStatus = XMEDIAPACKET_STATUS_PENDING;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  00024	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00027	c7 02 0a 00 00
	80		 mov	 DWORD PTR [edx], -2147483638 ; 8000000aH
$L27993:

; 1449 :     }
; 1450 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z ENDP		; XMOAcceptPacket
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?XMOCompletePacketSync@@YGXPBU_XMEDIAPACKET@@KK@Z
DSOUND	SEGMENT
_pxmp$ = 8
_dwCompletedSize$ = 12
_dwStatus$ = 16
?XMOCompletePacketSync@@YGXPBU_XMEDIAPACKET@@KK@Z PROC NEAR ; XMOCompletePacketSync, COMDAT

; 1490 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1491 :     if(pxmp->pdwCompletedSize)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00006	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000a	74 0b		 je	 SHORT $L28015

; 1492 :     {
; 1493 :         *pxmp->pdwCompletedSize = dwCompletedSize;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwCompletedSize$[ebp]
  00015	89 02		 mov	 DWORD PTR [edx], eax
$L28015:

; 1494 :     }
; 1495 : 
; 1496 :     if(pxmp->pdwStatus)

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0001a	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0001e	74 0b		 je	 SHORT $L28014

; 1497 :     {
; 1498 :         *pxmp->pdwStatus = dwStatus;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pxmp$[ebp]
  00023	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00026	8b 4d 10	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
$L28014:

; 1499 :     }
; 1500 : }

  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
?XMOCompletePacketSync@@YGXPBU_XMEDIAPACKET@@KK@Z ENDP	; XMOCompletePacketSync
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCVoxMediaObject@@PAV2@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCVoxMediaObject@@PAV2@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0b		 je	 SHORT $L35928

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 11		 call	 DWORD PTR [ecx]
$L35928:

; 72   :         }
; 73   : 
; 74   :         return p;

  00014	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCVoxMediaObject@@PAV2@@Z ENDP ; DirectSound::__AddRef
DSOUND	ENDS
END
