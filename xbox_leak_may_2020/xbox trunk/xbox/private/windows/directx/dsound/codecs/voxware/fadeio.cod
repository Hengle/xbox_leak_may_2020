; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\fadeio.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxFadeIO@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxinitFadeIO@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxfreeFadeIO@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@42340000
PUBLIC	__real@00000000
PUBLIC	__real@3f9eb85000000000
PUBLIC	__real@3f7851ec
PUBLIC	__real@3f8147ae
PUBLIC	__real@3eaaaaab
PUBLIC	_VoxFadeIO@8
EXTRN	__fltused:NEAR
EXTRN	_sqrt:NEAR
EXTRN	_getnHarm@4:NEAR
;	COMDAT __real@40000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\fadeio.c
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f9eb85000000000
CONST	SEGMENT
__real@3f9eb85000000000 DQ 03f9eb85000000000r	; 0.03
CONST	ENDS
;	COMDAT __real@3f7851ec
CONST	SEGMENT
__real@3f7851ec DD 03f7851ecr			; 0.97
CONST	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
CONST	ENDS
;	COMDAT __real@3eaaaaab
CONST	SEGMENT
__real@3eaaaaab DD 03eaaaaabr			; 0.333333
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxFadeIO@8
_TEXT	SEGMENT
tv302 = -36
tv278 = -32
tv234 = -28
_FadeFactor$ = -24
_AmpLevel$ = -20
_FadeIO_mblk$ = -16
_Param_mblk$ = -12
_i$ = -8
_nHarm$ = -4
_pvFadeIOMemBlk$ = 8
_pvParamMemBlk$ = 12
_VoxFadeIO@8 PROC NEAR					; COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi

; 65   :    PARAM *Param_mblk = (PARAM *)pvParamMemBlk;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _pvParamMemBlk$[ebp]
  0000a	89 45 f4	 mov	 DWORD PTR _Param_mblk$[ebp], eax

; 66   :    FadeIOstruct *FadeIO_mblk = (FadeIOstruct *)pvFadeIOMemBlk;

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pvFadeIOMemBlk$[ebp]
  00010	89 4d f0	 mov	 DWORD PTR _FadeIO_mblk$[ebp], ecx

; 67   : 
; 68   :    short nHarm;
; 69   :    int   i;
; 70   :    float AmpLevel;
; 71   :    float FadeFactor;
; 72   : 
; 73   :    /*====================================================================
; 74   :      Check to see if there should be silence/background noise injection.
; 75   :      ====================================================================*/
; 76   :    if (FadeIO_mblk->CurrentFrameState == SILENCE)

  00013	8b 55 f0	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  00016	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00019	85 c0		 test	 eax, eax
  0001b	0f 85 3b 01 00
	00		 jne	 $L1036

; 77   :    {
; 78   :     /*===================================================================
; 79   :       Set the energy, pitch, pv, amplitudes, and lsfs to either preset
; 80   :       "noise" values, current noise estimates.
; 81   :       ===================================================================*/
; 82   :       Param_mblk->Energy = FadeIO_mblk->BackgroundEnergyEst;

  00021	8b 4d f4	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00024	8b 55 f0	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  00027	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 83   :       Param_mblk->Pitch  = SILENCE_PITCH;

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00030	c7 41 04 00 00
	fa 42		 mov	 DWORD PTR [ecx+4], 1123680256 ; 42fa0000H

; 84   :       Param_mblk->Pv     = 0.0F;

  00037	8b 55 f4	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  0003a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 85   :       nHarm              = getnHarm(Param_mblk->Pitch);

  00040	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00043	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _getnHarm@4
  0004c	66 89 45 fc	 mov	 WORD PTR _nHarm$[ebp], ax

; 86   :       AmpLevel           = (float)sqrt(2.0F*Param_mblk->Energy/nHarm);

  00050	8b 55 f4	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00053	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00059	d8 4a 08	 fmul	 DWORD PTR [edx+8]
  0005c	0f bf 45 fc	 movsx	 eax, WORD PTR _nHarm$[ebp]
  00060	89 45 e4	 mov	 DWORD PTR tv234[ebp], eax
  00063	da 75 e4	 fidiv	 DWORD PTR tv234[ebp]
  00066	83 ec 08	 sub	 esp, 8
  00069	dd 1c 24	 fstp	 QWORD PTR [esp]
  0006c	e8 00 00 00 00	 call	 _sqrt
  00071	83 c4 08	 add	 esp, 8
  00074	d9 5d ec	 fstp	 DWORD PTR _AmpLevel$[ebp]

; 87   : 
; 88   :       for (i=0; i< nHarm; i++)

  00077	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007e	eb 09		 jmp	 SHORT $L1038
$L1039:
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	83 c1 01	 add	 ecx, 1
  00086	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1038:
  00089	0f bf 55 fc	 movsx	 edx, WORD PTR _nHarm$[ebp]
  0008d	39 55 f8	 cmp	 DWORD PTR _i$[ebp], edx
  00090	7d 11		 jge	 SHORT $L1040

; 89   :       {
; 90   :          Param_mblk->Amp[i] = AmpLevel;

  00092	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00095	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00098	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0009b	8b 45 ec	 mov	 eax, DWORD PTR _AmpLevel$[ebp]
  0009e	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 91   :       }

  000a1	eb dd		 jmp	 SHORT $L1039
$L1040:

; 92   :       for (; i<MAXHARM; i++)

  000a3	eb 09		 jmp	 SHORT $L1041
$L1042:
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000a8	83 c1 01	 add	 ecx, 1
  000ab	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1041:
  000ae	83 7d f8 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  000b2	7d 12		 jge	 SHORT $L1043

; 93   :       {
; 94   :          Param_mblk->Amp[i] = 0.0F;

  000b4	8b 55 f4	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  000b7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000bd	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0

; 95   :       }

  000c4	eb df		 jmp	 SHORT $L1042
$L1043:

; 96   : 
; 97   :       for (i=0; i<LPC_ORDER; i++)

  000c6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000cd	eb 09		 jmp	 SHORT $L1044
$L1045:
  000cf	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000d2	83 c2 01	 add	 edx, 1
  000d5	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1044:
  000d8	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  000dc	7d 1a		 jge	 SHORT $L1046

; 98   :       {
; 99   :          Param_mblk->Lsf[i] = FadeIO_mblk->BackgroundLsf[i];

  000de	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  000e1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e4	8b 55 f4	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  000e7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000ea	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000ed	8b 75 f8	 mov	 esi, DWORD PTR _i$[ebp]
  000f0	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  000f3	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 100  :       }

  000f6	eb d7		 jmp	 SHORT $L1045
$L1046:

; 101  :       for (i=1;i<LPC_ORDER;i++)

  000f8	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  000ff	eb 09		 jmp	 SHORT $L1047
$L1048:
  00101	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00104	83 c2 01	 add	 edx, 1
  00107	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1047:
  0010a	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  0010e	7d 47		 jge	 SHORT $L1049

; 102  :       {
; 103  :          if (Param_mblk->Lsf[i]<(Param_mblk->Lsf[i-1]+LSP_SEPERATION_HZ))

  00110	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00113	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00116	8b 55 f4	 mov	 edx, DWORD PTR _Param_mblk$[ebp]
  00119	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0011c	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0011f	d9 44 90 fc	 fld	 DWORD PTR [eax+edx*4-4]
  00123	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@42340000
  00129	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0012c	d8 1c 81	 fcomp	 DWORD PTR [ecx+eax*4]
  0012f	df e0		 fnstsw	 ax
  00131	f6 c4 41	 test	 ah, 65			; 00000041H
  00134	75 1f		 jne	 SHORT $L1050

; 104  :          {
; 105  :             Param_mblk->Lsf[i] = Param_mblk->Lsf[i-1]+LSP_SEPERATION_HZ;

  00136	8b 4d f4	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  00139	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0013c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0013f	d9 44 82 fc	 fld	 DWORD PTR [edx+eax*4-4]
  00143	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@42340000
  00149	8b 4d f4	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  0014c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0014f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00152	d9 1c 82	 fstp	 DWORD PTR [edx+eax*4]
$L1050:

; 106  :          }
; 107  :       }  

  00155	eb aa		 jmp	 SHORT $L1048
$L1049:

; 108  :    }
; 109  :  /*========================================================================
; 110  :    If we are not in silence, and the voicing is zero, we must update our
; 111  :    background noise estimates of energy and lsfs.
; 112  :    ========================================================================*/
; 113  :    else if (Param_mblk->Pv == 0.0F)

  00157	e9 98 00 00 00	 jmp	 $L1051
$L1036:
  0015c	8b 4d f4	 mov	 ecx, DWORD PTR _Param_mblk$[ebp]
  0015f	d9 01		 fld	 DWORD PTR [ecx]
  00161	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00167	df e0		 fnstsw	 ax
  00169	f6 c4 44	 test	 ah, 68			; 00000044H
  0016c	0f 8a 82 00 00
	00		 jp	 $L1051

; 114  :    {
; 115  :       for (i=0; i<LPC_ORDER; i++)  /* running average of silence lsfs  */

  00172	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00179	eb 09		 jmp	 SHORT $L1053
$L1054:
  0017b	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0017e	83 c2 01	 add	 edx, 1
  00181	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1053:
  00184	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00188	7d 37		 jge	 SHORT $L1055

; 116  :       {
; 117  :          FadeIO_mblk->BackgroundLsf[i] = (float)((1.0-RUNNING_AVE)*Param_mblk->Lsf[i] 
; 118  :             +RUNNING_AVE*FadeIO_mblk->BackgroundLsf[i]);

  0018a	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  0018d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00190	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00193	d9 04 91	 fld	 DWORD PTR [ecx+edx*4]
  00196	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f9eb85000000000
  0019c	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  0019f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a2	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  001a5	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f7851ec
  001ab	d8 0c 91	 fmul	 DWORD PTR [ecx+edx*4]
  001ae	de c1		 faddp	 ST(1), ST(0)
  001b0	d9 55 e0	 fst	 DWORD PTR tv278[ebp]
  001b3	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  001b6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b9	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  001bc	d9 1c 91	 fstp	 DWORD PTR [ecx+edx*4]

; 119  :       }

  001bf	eb ba		 jmp	 SHORT $L1054
$L1055:

; 120  :       if (Param_mblk->Energy < FadeIO_mblk->BackgroundEnergyEst)

  001c1	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  001c4	8b 4d f0	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  001c7	d9 40 08	 fld	 DWORD PTR [eax+8]
  001ca	d8 59 04	 fcomp	 DWORD PTR [ecx+4]
  001cd	df e0		 fnstsw	 ax
  001cf	f6 c4 05	 test	 ah, 5
  001d2	7a 0e		 jp	 SHORT $L1057

; 121  :       {
; 122  :          FadeIO_mblk->BackgroundEnergyEst = Param_mblk->Energy;

  001d4	8b 55 f0	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  001d7	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  001da	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001dd	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 123  :       }
; 124  :       else

  001e0	eb 12		 jmp	 SHORT $L1051
$L1057:

; 125  :       {
; 126  :          FadeIO_mblk->BackgroundEnergyEst *= ENERGY_INCREASE;

  001e2	8b 55 f0	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  001e5	d9 42 04	 fld	 DWORD PTR [edx+4]
  001e8	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f8147ae
  001ee	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  001f1	d9 58 04	 fstp	 DWORD PTR [eax+4]
$L1051:

; 127  :       }
; 128  :    }
; 129  : 
; 130  : 
; 131  :  /*=========================================================================
; 132  :    We want to fade in over a few frames.  Check to see if the codec must 
; 133  :    fade in.  If it does, set the fade in length counting.
; 134  :    =========================================================================*/
; 135  :    if ((FadeIO_mblk->CurrentFrameState == NORMAL)
; 136  :       &&(FadeIO_mblk->LastFrameState   == SILENCE))

  001f4	8b 4d f0	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  001f7	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  001fa	83 fa 01	 cmp	 edx, 1
  001fd	75 14		 jne	 SHORT $L1059
  001ff	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  00202	0f bf 48 02	 movsx	 ecx, WORD PTR [eax+2]
  00206	85 c9		 test	 ecx, ecx
  00208	75 09		 jne	 SHORT $L1059

; 137  :    {
; 138  :       FadeIO_mblk->FadeInCount = FADEIN_LEN;

  0020a	8b 55 f0	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  0020d	66 c7 42 0c 03
	00		 mov	 WORD PTR [edx+12], 3
$L1059:

; 139  :    }
; 140  : 
; 141  :  /*=========================================================================
; 142  :    Check if the decoder needs to fade in this frame
; 143  :    =========================================================================*/
; 144  :    if (FadeIO_mblk->FadeInCount > 0)

  00213	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  00216	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  0021a	85 c9		 test	 ecx, ecx
  0021c	7e 64		 jle	 SHORT $L1060

; 145  :    {
; 146  :       FadeIO_mblk->FadeInCount--;

  0021e	8b 55 f0	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  00221	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  00225	66 2d 01 00	 sub	 ax, 1
  00229	8b 4d f0	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  0022c	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 147  :       FadeFactor = (FADEIN_LEN-FadeIO_mblk->FadeInCount)*(1.0F/((float)FADEIN_LEN));

  00230	8b 55 f0	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  00233	0f bf 42 0c	 movsx	 eax, WORD PTR [edx+12]
  00237	b9 03 00 00 00	 mov	 ecx, 3
  0023c	2b c8		 sub	 ecx, eax
  0023e	89 4d dc	 mov	 DWORD PTR tv302[ebp], ecx
  00241	db 45 dc	 fild	 DWORD PTR tv302[ebp]
  00244	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3eaaaaab
  0024a	d9 5d e8	 fstp	 DWORD PTR _FadeFactor$[ebp]

; 148  :       for (i=0;i<MAXHARM;i++)

  0024d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00254	eb 09		 jmp	 SHORT $L1062
$L1063:
  00256	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00259	83 c2 01	 add	 edx, 1
  0025c	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1062:
  0025f	83 7d f8 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  00263	7d 1d		 jge	 SHORT $L1060

; 149  :       {
; 150  :          Param_mblk->Amp[i] *= FadeFactor;

  00265	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00268	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0026b	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0026e	d9 45 e8	 fld	 DWORD PTR _FadeFactor$[ebp]
  00271	d8 0c 91	 fmul	 DWORD PTR [ecx+edx*4]
  00274	8b 45 f4	 mov	 eax, DWORD PTR _Param_mblk$[ebp]
  00277	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0027a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0027d	d9 1c 91	 fstp	 DWORD PTR [ecx+edx*4]

; 151  :       }

  00280	eb d4		 jmp	 SHORT $L1063
$L1060:

; 152  :    }
; 153  :   
; 154  :    FadeIO_mblk->LastFrameState    = FadeIO_mblk->CurrentFrameState;

  00282	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  00285	8b 4d f0	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  00288	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0028b	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 155  :    FadeIO_mblk->CurrentFrameState = NORMAL;

  0028f	8b 45 f0	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  00292	66 c7 00 01 00	 mov	 WORD PTR [eax], 1

; 156  : }

  00297	5e		 pop	 esi
  00298	8b e5		 mov	 esp, ebp
  0029a	5d		 pop	 ebp
  0029b	c2 08 00	 ret	 8
_VoxFadeIO@8 ENDP
_TEXT	ENDS
PUBLIC	__real@43c80000
PUBLIC	__real@43960000
PUBLIC	_VoxinitFadeIO@4
EXTRN	_calloc:NEAR
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxinitFadeIO@4
_TEXT	SEGMENT
tv131 = -12
_FadeIO_mblk$ = -8
_i$ = -4
_hFadeIOMemBlk$ = 8
_VoxinitFadeIO@4 PROC NEAR				; COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 184  :    FadeIOstruct *FadeIO_mblk;
; 185  :    short i;
; 186  : 
; 187  :    if(VOX_MEM_INIT(FadeIO_mblk=*hFadeIOMemBlk,1,sizeof(FadeIOstruct))) 

  00006	6a 10		 push	 16			; 00000010H
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 _calloc
  0000f	83 c4 08	 add	 esp, 8
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _hFadeIOMemBlk$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax
  00017	8b 55 08	 mov	 edx, DWORD PTR _hFadeIOMemBlk$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	89 45 f8	 mov	 DWORD PTR _FadeIO_mblk$[ebp], eax
  0001f	83 7d f8 00	 cmp	 DWORD PTR _FadeIO_mblk$[ebp], 0
  00023	75 09		 jne	 SHORT $L1071

; 188  :       return 1;

  00025	66 b8 01 00	 mov	 ax, 1
  00029	e9 8a 00 00 00	 jmp	 $L1067
$L1071:

; 189  : 
; 190  :    if(VOX_MEM_INIT(FadeIO_mblk->BackgroundLsf,LPC_ORDER,sizeof(float))) 

  0002e	6a 04		 push	 4
  00030	6a 0a		 push	 10			; 0000000aH
  00032	e8 00 00 00 00	 call	 _calloc
  00037	83 c4 08	 add	 esp, 8
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  0003d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00040	8b 55 f8	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  00043	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00047	75 06		 jne	 SHORT $L1073

; 191  :       return 1;

  00049	66 b8 01 00	 mov	 ax, 1
  0004d	eb 69		 jmp	 SHORT $L1067
$L1073:

; 192  : 
; 193  :   for(i=0;i<LPC_ORDER;i++) 

  0004f	66 c7 45 fc 00
	00		 mov	 WORD PTR _i$[ebp], 0
  00055	eb 0c		 jmp	 SHORT $L1074
$L1075:
  00057	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  0005b	66 05 01 00	 add	 ax, 1
  0005f	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$L1074:
  00063	0f bf 4d fc	 movsx	 ecx, WORD PTR _i$[ebp]
  00067	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0006a	7d 25		 jge	 SHORT $L1076

; 194  : 	FadeIO_mblk->BackgroundLsf[i] = LSP_INITIAL_COND_DEL*i + LSP_INITIAL_COND_0;

  0006c	0f bf 55 fc	 movsx	 edx, WORD PTR _i$[ebp]
  00070	89 55 f4	 mov	 DWORD PTR tv131[ebp], edx
  00073	db 45 f4	 fild	 DWORD PTR tv131[ebp]
  00076	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@43c80000
  0007c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@43960000
  00082	0f bf 45 fc	 movsx	 eax, WORD PTR _i$[ebp]
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  00089	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0008c	d9 1c 82	 fstp	 DWORD PTR [edx+eax*4]
  0008f	eb c6		 jmp	 SHORT $L1075
$L1076:

; 195  : 
; 196  :    FadeIO_mblk->FadeInCount         = 0; 

  00091	8b 45 f8	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  00094	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 197  :    FadeIO_mblk->CurrentFrameState   = NORMAL;

  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  0009d	66 c7 01 01 00	 mov	 WORD PTR [ecx], 1

; 198  :    FadeIO_mblk->LastFrameState      = NORMAL;

  000a2	8b 55 f8	 mov	 edx, DWORD PTR _FadeIO_mblk$[ebp]
  000a5	66 c7 42 02 01
	00		 mov	 WORD PTR [edx+2], 1

; 199  :    FadeIO_mblk->BackgroundEnergyEst = INITIAL_BACKGROUND_ENERGY;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  000ae	c7 40 04 00 00
	fa 43		 mov	 DWORD PTR [eax+4], 1140457472 ; 43fa0000H

; 200  : 
; 201  : 
; 202  :    return 0;

  000b5	66 33 c0	 xor	 ax, ax
$L1067:

; 203  : }

  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
_VoxinitFadeIO@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxfreeFadeIO@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxfreeFadeIO@4
_TEXT	SEGMENT
_FadeIO_mblk$ = -4
_hFadeIOMemBlk$ = 8
_VoxfreeFadeIO@4 PROC NEAR				; COMDAT

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 231  :    FadeIOstruct *FadeIO_mblk=(FadeIOstruct *)*hFadeIOMemBlk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hFadeIOMemBlk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _FadeIO_mblk$[ebp], ecx

; 232  : 
; 233  :    if(*hFadeIOMemBlk) {

  0000c	8b 55 08	 mov	 edx, DWORD PTR _hFadeIOMemBlk$[ebp]
  0000f	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00012	74 41		 je	 SHORT $L1083

; 234  :       VOX_MEM_FREE(FadeIO_mblk->BackgroundLsf);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  00017	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001b	74 19		 je	 SHORT $L1084
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _FadeIO_mblk$[ebp]
  00020	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 _free
  00029	83 c4 04	 add	 esp, 4
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _FadeIO_mblk$[ebp]
  0002f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$L1084:

; 235  :       VOX_MEM_FREE(*hFadeIOMemBlk);

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _hFadeIOMemBlk$[ebp]
  00039	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0003c	74 17		 je	 SHORT $L1083
  0003e	8b 55 08	 mov	 edx, DWORD PTR _hFadeIOMemBlk$[ebp]
  00041	8b 02		 mov	 eax, DWORD PTR [edx]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _free
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _hFadeIOMemBlk$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L1083:

; 236  :    }
; 237  :    return 0;

  00055	66 33 c0	 xor	 ax, ax

; 238  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_VoxfreeFadeIO@4 ENDP
_TEXT	ENDS
END
