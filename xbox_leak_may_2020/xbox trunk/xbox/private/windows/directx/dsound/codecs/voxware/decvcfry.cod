; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\decvcfry.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@HJIEOLIH@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@LFPLECPP@hParamMblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _Detect_VocalFry@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _UpdateVF_States@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Cepstrum4VocalFry@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitVocalFry@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeVocalFry@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_fCepWeight DD	0402362f1r			; 2.55291
	DD	040800000r			; 4
	DD	040a7c3b5r			; 5.24264
	DD	040c646dcr			; 6.19615
	DD	040d97530r			; 6.79556
	DD	040e00000r			; 7
	DD	040d97530r			; 6.79556
	DD	040c646e1r			; 6.19615
	DD	040a7c3b5r			; 5.24264
	DD	040800000r			; 4
	DD	0402362f1r			; 2.55291
	DD	03f800000r			; 1
CONST	ENDS
PUBLIC	_Detect_VocalFry@16
PUBLIC	??_C@_0EB@HJIEOLIH@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BD@LFPLECPP@hParamMblk?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f933333
PUBLIC	__real@40000000
PUBLIC	__real@40600000
PUBLIC	__real@3ecccccd
PUBLIC	__real@40200000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc00000
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EB@HJIEOLIH@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\decvcfry.c
CONST	SEGMENT
??_C@_0EB@HJIEOLIH@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\decvcfry.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LFPLECPP@hParamMblk?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BD@LFPLECPP@hParamMblk?5?$CB?$DN?5NULL?$AA@ DB 'hParamMblk != NULL'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f933333
CONST	SEGMENT
__real@3f933333 DD 03f933333r			; 1.15
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@40600000
CONST	SEGMENT
__real@40600000 DD 040600000r			; 3.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _Detect_VocalFry@16
_TEXT	SEGMENT
_confident$ = -36
_pParamMblk$ = -32
_averagePitch$ = -28
_dGain$ = -24
_pSubParam$ = -20
_vfPitch$ = -16
_VFflag$ = -12
_pVocalFryMblk$ = -8
_dCep$ = -4
_hParamMblk$ = 8
_hVocalFryMblk$ = 12
_fAS$ = 16
_lpcorder$ = 20
_Detect_VocalFry@16 PROC NEAR				; COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 62   :   VocalFry_mblk *pVocalFryMblk = (VocalFry_mblk *)hVocalFryMblk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _hVocalFryMblk$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _pVocalFryMblk$[ebp], eax

; 63   :   PARAM_SC *pParamMblk = (PARAM_SC *)hParamMblk;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _hParamMblk$[ebp]
  0000f	89 4d e0	 mov	 DWORD PTR _pParamMblk$[ebp], ecx

; 64   :   float dGain, dCep;
; 65   :   float averagePitch = pVocalFryMblk->averagePitch;

  00012	8b 55 f8	 mov	 edx, DWORD PTR _pVocalFryMblk$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	89 45 e4	 mov	 DWORD PTR _averagePitch$[ebp], eax

; 66   :   float confident = pVocalFryMblk->confident;

  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _pVocalFryMblk$[ebp]
  0001d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00020	89 55 dc	 mov	 DWORD PTR _confident$[ebp], edx

; 67   :   float vfPitch;
; 68   :   short VFflag = 0;

  00023	66 c7 45 f4 00
	00		 mov	 WORD PTR _VFflag$[ebp], 0

; 69   :   SUBFRAME_PARAM_SC *pSubParam;
; 70   : 
; 71   :   assert(hParamMblk != NULL);

  00029	83 7d 08 00	 cmp	 DWORD PTR _hParamMblk$[ebp], 0
  0002d	75 14		 jne	 SHORT $L1493
  0002f	6a 47		 push	 71			; 00000047H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@HJIEOLIH@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@LFPLECPP@hParamMblk?5?$CB?$DN?5NULL?$AA@
  0003b	e8 00 00 00 00	 call	 __assert
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1493:

; 72   : 
; 73   :   pSubParam = &(pParamMblk->SubParam[PARAM_ENDFRAME]);

  00043	8b 4d e0	 mov	 ecx, DWORD PTR _pParamMblk$[ebp]
  00046	83 c1 28	 add	 ecx, 40			; 00000028H
  00049	89 4d ec	 mov	 DWORD PTR _pSubParam$[ebp], ecx

; 74   : 
; 75   :   /* Calculate the cepstrum coefficients to verify the decision */
; 76   :   Cepstrum4VocalFry(STACK_S pParamMblk->fLog2Gain, fAS,
; 77   :                     pVocalFryMblk->averageCepstrum, &dGain, &dCep, lpcorder);

  0004c	8b 55 14	 mov	 edx, DWORD PTR _lpcorder$[ebp]
  0004f	52		 push	 edx
  00050	8d 45 fc	 lea	 eax, DWORD PTR _dCep$[ebp]
  00053	50		 push	 eax
  00054	8d 4d e8	 lea	 ecx, DWORD PTR _dGain$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 f8	 mov	 edx, DWORD PTR _pVocalFryMblk$[ebp]
  0005b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005e	50		 push	 eax
  0005f	8b 4d 10	 mov	 ecx, DWORD PTR _fAS$[ebp]
  00062	51		 push	 ecx
  00063	8b 55 e0	 mov	 edx, DWORD PTR _pParamMblk$[ebp]
  00066	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _Cepstrum4VocalFry@24

; 78   : 
; 79   :   /* Find out when the pitch suddently doubled */
; 80   :   if ((averagePitch < pSubParam->Pitch) && (pSubParam->Pv>=0.2F))

  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _pSubParam$[ebp]
  00072	d9 45 e4	 fld	 DWORD PTR _averagePitch$[ebp]
  00075	d8 19		 fcomp	 DWORD PTR [ecx]
  00077	df e0		 fnstsw	 ax
  00079	f6 c4 05	 test	 ah, 5
  0007c	7a 4d		 jp	 SHORT $L1405
  0007e	8b 55 ec	 mov	 edx, DWORD PTR _pSubParam$[ebp]
  00081	d9 42 04	 fld	 DWORD PTR [edx+4]
  00084	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e4ccccd
  0008a	df e0		 fnstsw	 ax
  0008c	f6 c4 01	 test	 ah, 1
  0008f	75 3a		 jne	 SHORT $L1405

; 81   :   {
; 82   :     vfPitch = 0.5F*pSubParam->Pitch;      /* find half pitch */

  00091	8b 45 ec	 mov	 eax, DWORD PTR _pSubParam$[ebp]
  00094	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f000000
  0009a	d8 08		 fmul	 DWORD PTR [eax]
  0009c	d9 5d f0	 fstp	 DWORD PTR _vfPitch$[ebp]

; 83   : 
; 84   :     if ((averagePitch>(0.87F*vfPitch))&&(averagePitch<(1.15F*vfPitch)))

  0009f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f5eb852
  000a5	d8 4d f0	 fmul	 DWORD PTR _vfPitch$[ebp]
  000a8	d8 5d e4	 fcomp	 DWORD PTR _averagePitch$[ebp]
  000ab	df e0		 fnstsw	 ax
  000ad	f6 c4 05	 test	 ah, 5
  000b0	7a 19		 jp	 SHORT $L1405
  000b2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f933333
  000b8	d8 4d f0	 fmul	 DWORD PTR _vfPitch$[ebp]
  000bb	d8 5d e4	 fcomp	 DWORD PTR _averagePitch$[ebp]
  000be	df e0		 fnstsw	 ax
  000c0	f6 c4 41	 test	 ah, 65			; 00000041H
  000c3	75 06		 jne	 SHORT $L1405

; 85   :       VFflag = 1;

  000c5	66 c7 45 f4 01
	00		 mov	 WORD PTR _VFflag$[ebp], 1
$L1405:

; 86   :   }
; 87   : 
; 88   : 
; 89   :   /* use dGain and dCep to eliminate the wrong decision */
; 90   :   if ((VFflag == 1) && (dGain <= 2.0F)
; 91   :       && (((dCep <= 0.5F) && (confident >= 3.5F))
; 92   :       || ((dCep <= 0.4F)&&(confident>=2.5F))
; 93   :       ||((dCep<=0.1)&&(confident>=1.5F))))

  000cb	0f bf 4d f4	 movsx	 ecx, WORD PTR _VFflag$[ebp]
  000cf	83 f9 01	 cmp	 ecx, 1
  000d2	75 78		 jne	 SHORT $L1407
  000d4	d9 45 e8	 fld	 DWORD PTR _dGain$[ebp]
  000d7	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@40000000
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 41	 test	 ah, 65			; 00000041H
  000e2	7a 68		 jp	 SHORT $L1407
  000e4	d9 45 fc	 fld	 DWORD PTR _dCep$[ebp]
  000e7	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f000000
  000ed	df e0		 fnstsw	 ax
  000ef	f6 c4 41	 test	 ah, 65			; 00000041H
  000f2	7a 10		 jp	 SHORT $L1409
  000f4	d9 45 dc	 fld	 DWORD PTR _confident$[ebp]
  000f7	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@40600000
  000fd	df e0		 fnstsw	 ax
  000ff	f6 c4 01	 test	 ah, 1
  00102	74 40		 je	 SHORT $L1408
$L1409:
  00104	d9 45 fc	 fld	 DWORD PTR _dCep$[ebp]
  00107	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3ecccccd
  0010d	df e0		 fnstsw	 ax
  0010f	f6 c4 41	 test	 ah, 65			; 00000041H
  00112	7a 10		 jp	 SHORT $L1410
  00114	d9 45 dc	 fld	 DWORD PTR _confident$[ebp]
  00117	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@40200000
  0011d	df e0		 fnstsw	 ax
  0011f	f6 c4 01	 test	 ah, 1
  00122	74 20		 je	 SHORT $L1408
$L1410:
  00124	d9 45 fc	 fld	 DWORD PTR _dCep$[ebp]
  00127	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@3fb999999999999a
  0012d	df e0		 fnstsw	 ax
  0012f	f6 c4 41	 test	 ah, 65			; 00000041H
  00132	7a 18		 jp	 SHORT $L1407
  00134	d9 45 dc	 fld	 DWORD PTR _confident$[ebp]
  00137	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3fc00000
  0013d	df e0		 fnstsw	 ax
  0013f	f6 c4 01	 test	 ah, 1
  00142	75 08		 jne	 SHORT $L1407
$L1408:

; 94   :     VFflag = 1;

  00144	66 c7 45 f4 01
	00		 mov	 WORD PTR _VFflag$[ebp], 1

; 95   :   else

  0014a	eb 06		 jmp	 SHORT $L1411
$L1407:

; 96   :     VFflag = 0;

  0014c	66 c7 45 f4 00
	00		 mov	 WORD PTR _VFflag$[ebp], 0
$L1411:

; 97   : 
; 98   :   return VFflag;

  00152	66 8b 45 f4	 mov	 ax, WORD PTR _VFflag$[ebp]

; 99   : }

  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 10 00	 ret	 16			; 00000010H
_Detect_VocalFry@16 ENDP
_TEXT	ENDS
PUBLIC	_UpdateVF_States@8
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f99999a
PUBLIC	__real@3e99999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f800000
PUBLIC	__real@3f666666
PUBLIC	__real@3f8ccccd
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _UpdateVF_States@8
_TEXT	SEGMENT
_confident$ = -28
_pParamMblk$ = -24
_averagePitch$ = -20
_pSubParam_End$ = -16
_vfPitch$ = -12
_pSubParam_Mid$ = -8
_pVocalFryMblk$ = -4
_hParamMblk$ = 8
_hVocalFryMblk$ = 12
_UpdateVF_States@8 PROC NEAR				; COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 105  :   VocalFry_mblk *pVocalFryMblk = (VocalFry_mblk *)hVocalFryMblk;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _hVocalFryMblk$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pVocalFryMblk$[ebp], eax

; 106  :   PARAM_SC *pParamMblk = (PARAM_SC *)hParamMblk;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _hParamMblk$[ebp]
  0000f	89 4d e8	 mov	 DWORD PTR _pParamMblk$[ebp], ecx

; 107  :   float averagePitch = pVocalFryMblk->averagePitch;

  00012	8b 55 fc	 mov	 edx, DWORD PTR _pVocalFryMblk$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	89 45 ec	 mov	 DWORD PTR _averagePitch$[ebp], eax

; 108  :   float confident = pVocalFryMblk->confident;

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _pVocalFryMblk$[ebp]
  0001d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00020	89 55 e4	 mov	 DWORD PTR _confident$[ebp], edx

; 109  :   float vfPitch;
; 110  :   SUBFRAME_PARAM_SC *pSubParam_Mid, *pSubParam_End;
; 111  : 
; 112  :   pSubParam_Mid = &(pParamMblk->SubParam[PARAM_MIDFRAME]);

  00023	8b 45 e8	 mov	 eax, DWORD PTR _pParamMblk$[ebp]
  00026	89 45 f8	 mov	 DWORD PTR _pSubParam_Mid$[ebp], eax

; 113  :   pSubParam_End = &(pParamMblk->SubParam[PARAM_ENDFRAME]);

  00029	8b 4d e8	 mov	 ecx, DWORD PTR _pParamMblk$[ebp]
  0002c	83 c1 28	 add	 ecx, 40			; 00000028H
  0002f	89 4d f0	 mov	 DWORD PTR _pSubParam_End$[ebp], ecx

; 114  : 
; 115  :   /* update the average pitch and confident */
; 116  :   vfPitch = pSubParam_End->Pitch;

  00032	8b 55 f0	 mov	 edx, DWORD PTR _pSubParam_End$[ebp]
  00035	8b 02		 mov	 eax, DWORD PTR [edx]
  00037	89 45 f4	 mov	 DWORD PTR _vfPitch$[ebp], eax

; 117  : 
; 118  :   if ((averagePitch>(0.8F*vfPitch))&&(averagePitch<(1.2F*vfPitch))) {

  0003a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f4ccccd
  00040	d8 4d f4	 fmul	 DWORD PTR _vfPitch$[ebp]
  00043	d8 5d ec	 fcomp	 DWORD PTR _averagePitch$[ebp]
  00046	df e0		 fnstsw	 ax
  00048	f6 c4 05	 test	 ah, 5
  0004b	7a 38		 jp	 SHORT $L1426
  0004d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f99999a
  00053	d8 4d f4	 fmul	 DWORD PTR _vfPitch$[ebp]
  00056	d8 5d ec	 fcomp	 DWORD PTR _averagePitch$[ebp]
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 25		 jne	 SHORT $L1426

; 119  :     averagePitch = 0.3F*averagePitch + 0.7F*vfPitch;

  00060	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3e99999a
  00066	d8 4d ec	 fmul	 DWORD PTR _averagePitch$[ebp]
  00069	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f333333
  0006f	d8 4d f4	 fmul	 DWORD PTR _vfPitch$[ebp]
  00072	de c1		 faddp	 ST(1), ST(0)
  00074	d9 5d ec	 fstp	 DWORD PTR _averagePitch$[ebp]

; 120  :     confident += 1.0F;

  00077	d9 45 e4	 fld	 DWORD PTR _confident$[ebp]
  0007a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f800000
  00080	d9 5d e4	 fstp	 DWORD PTR _confident$[ebp]

; 121  :   }
; 122  :   else {

  00083	eb 32		 jmp	 SHORT $L1427
$L1426:

; 123  :     if (pSubParam_End->Pv >= 0.3F) {  /*** probably voiced ****/

  00085	8b 4d f0	 mov	 ecx, DWORD PTR _pSubParam_End$[ebp]
  00088	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0008b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e99999a
  00091	df e0		 fnstsw	 ax
  00093	f6 c4 01	 test	 ah, 1
  00096	75 11		 jne	 SHORT $L1428

; 124  :       averagePitch = vfPitch;

  00098	8b 55 f4	 mov	 edx, DWORD PTR _vfPitch$[ebp]
  0009b	89 55 ec	 mov	 DWORD PTR _averagePitch$[ebp], edx

; 125  :       confident = pSubParam_End->Pv;

  0009e	8b 45 f0	 mov	 eax, DWORD PTR _pSubParam_End$[ebp]
  000a1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a4	89 4d e4	 mov	 DWORD PTR _confident$[ebp], ecx

; 126  :     }
; 127  :     else {

  000a7	eb 0e		 jmp	 SHORT $L1427
$L1428:

; 128  :       averagePitch = VF_BAD_PITCH;

  000a9	c7 45 ec 00 00
	7a 44		 mov	 DWORD PTR _averagePitch$[ebp], 1148846080 ; 447a0000H

; 129  :       confident = 0.0F;

  000b0	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _confident$[ebp], 0
$L1427:

; 130  :     }
; 131  :   }
; 132  : 
; 133  :   if ((averagePitch>(0.9F*pSubParam_Mid->Pitch))
; 134  :       &&(averagePitch<(1.1F*pSubParam_Mid->Pitch)))

  000b7	8b 55 f8	 mov	 edx, DWORD PTR _pSubParam_Mid$[ebp]
  000ba	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f666666
  000c0	d8 0a		 fmul	 DWORD PTR [edx]
  000c2	d8 5d ec	 fcomp	 DWORD PTR _averagePitch$[ebp]
  000c5	df e0		 fnstsw	 ax
  000c7	f6 c4 05	 test	 ah, 5
  000ca	7a 21		 jp	 SHORT $L1430
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _pSubParam_Mid$[ebp]
  000cf	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f8ccccd
  000d5	d8 08		 fmul	 DWORD PTR [eax]
  000d7	d8 5d ec	 fcomp	 DWORD PTR _averagePitch$[ebp]
  000da	df e0		 fnstsw	 ax
  000dc	f6 c4 41	 test	 ah, 65			; 00000041H
  000df	75 0c		 jne	 SHORT $L1430

; 135  :     confident += 1.0F;

  000e1	d9 45 e4	 fld	 DWORD PTR _confident$[ebp]
  000e4	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f800000
  000ea	d9 5d e4	 fstp	 DWORD PTR _confident$[ebp]
$L1430:

; 136  : 
; 137  :   pVocalFryMblk->confident = confident;

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _pVocalFryMblk$[ebp]
  000f0	8b 55 e4	 mov	 edx, DWORD PTR _confident$[ebp]
  000f3	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 138  :   pVocalFryMblk->averagePitch = averagePitch;

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _pVocalFryMblk$[ebp]
  000f9	8b 4d ec	 mov	 ecx, DWORD PTR _averagePitch$[ebp]
  000fc	89 08		 mov	 DWORD PTR [eax], ecx

; 139  : }

  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 08 00	 ret	 8
_UpdateVF_States@8 ENDP
_TEXT	ENDS
PUBLIC	__real@3daaaaab
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
EXTRN	_VoxAsToCs@20:NEAR
EXTRN	_fabs:NEAR
;	COMDAT __real@3daaaaab
CONST	SEGMENT
__real@3daaaaab DD 03daaaaabr			; 0.0833333
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _Cepstrum4VocalFry@24
_TEXT	SEGMENT
_dis$ = -60
_fCepstrum$ = -56
_i$ = -4
_fGain$ = 8
_pfAS$ = 12
_fAverageCepstrum$ = 16
_dGain$ = 20
_dCep$ = 24
_lpcorder$ = 28
_Cepstrum4VocalFry@24 PROC NEAR				; COMDAT

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH

; 152  :   STACK_INIT 
; 153  :     float fCepstrum[VF_CEP_ORDER+1];
; 154  :   STACK_INIT_END
; 155  :   int i;
; 156  :   register float dis;
; 157  :   
; 158  :   STACK_ATTACH(float *, fCepstrum)
; 159  : 
; 160  :   STACK_START
; 161  : 
; 162  :   /***** Change LPC coefficients to cepstrum *****/
; 163  :   VoxAsToCs(fGain, pfAS, lpcorder, fCepstrum, VF_CEP_ORDER+1);

  00006	6a 0d		 push	 13			; 0000000dH
  00008	8d 45 c8	 lea	 eax, DWORD PTR _fCepstrum$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 1c	 mov	 ecx, DWORD PTR _lpcorder$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _pfAS$[ebp]
  00013	52		 push	 edx
  00014	8b 45 08	 mov	 eax, DWORD PTR _fGain$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _VoxAsToCs@20

; 164  : 
; 165  :   /***** Compute the distortion *****/
; 166  :   *dGain =(float)fabs(-fCepstrum[0] + fAverageCepstrum[0]);

  0001d	d9 45 c8	 fld	 DWORD PTR _fCepstrum$[ebp]
  00020	d9 e0		 fchs
  00022	8b 4d 10	 mov	 ecx, DWORD PTR _fAverageCepstrum$[ebp]
  00025	d8 01		 fadd	 DWORD PTR [ecx]
  00027	83 ec 08	 sub	 esp, 8
  0002a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0002d	e8 00 00 00 00	 call	 _fabs
  00032	83 c4 08	 add	 esp, 8
  00035	8b 55 14	 mov	 edx, DWORD PTR _dGain$[ebp]
  00038	d9 1a		 fstp	 DWORD PTR [edx]

; 167  : 
; 168  :   *dCep = 0.0F;

  0003a	8b 45 18	 mov	 eax, DWORD PTR _dCep$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 169  :   for (i = 1; i <= VF_CEP_ORDER; i++) {

  00043	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0004a	eb 09		 jmp	 SHORT $L1448
$L1449:
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004f	83 c1 01	 add	 ecx, 1
  00052	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L1448:
  00055	83 7d fc 0c	 cmp	 DWORD PTR _i$[ebp], 12	; 0000000cH
  00059	7f 3a		 jg	 SHORT $L1450

; 170  :     fCepstrum[i] *= fCepWeight[i-1];

  0005b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00061	d9 44 95 c8	 fld	 DWORD PTR _fCepstrum$[ebp+edx*4]
  00065	d8 0c 85 fc ff
	ff ff		 fmul	 DWORD PTR _fCepWeight[eax*4-4]
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0006f	d9 5c 8d c8	 fstp	 DWORD PTR _fCepstrum$[ebp+ecx*4]

; 171  : 
; 172  :     dis = fCepstrum[i] - fAverageCepstrum[i];

  00073	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00076	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00079	8b 4d 10	 mov	 ecx, DWORD PTR _fAverageCepstrum$[ebp]
  0007c	d9 44 95 c8	 fld	 DWORD PTR _fCepstrum$[ebp+edx*4]
  00080	d8 24 81	 fsub	 DWORD PTR [ecx+eax*4]
  00083	d9 55 c4	 fst	 DWORD PTR _dis$[ebp]

; 173  : 
; 174  :     *dCep += dis * dis;

  00086	d8 4d c4	 fmul	 DWORD PTR _dis$[ebp]
  00089	8b 55 18	 mov	 edx, DWORD PTR _dCep$[ebp]
  0008c	d8 02		 fadd	 DWORD PTR [edx]
  0008e	8b 45 18	 mov	 eax, DWORD PTR _dCep$[ebp]
  00091	d9 18		 fstp	 DWORD PTR [eax]

; 175  :   }

  00093	eb b7		 jmp	 SHORT $L1449
$L1450:

; 176  :   *dCep *= (float)INV_ORDER;

  00095	8b 4d 18	 mov	 ecx, DWORD PTR _dCep$[ebp]
  00098	d9 01		 fld	 DWORD PTR [ecx]
  0009a	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3daaaaab
  000a0	8b 55 18	 mov	 edx, DWORD PTR _dCep$[ebp]
  000a3	d9 1a		 fstp	 DWORD PTR [edx]

; 177  : 
; 178  : 
; 179  :   /**** Get the average cepstrum ****/
; 180  :   if (*dCep < 0.05F) {

  000a5	8b 45 18	 mov	 eax, DWORD PTR _dCep$[ebp]
  000a8	d9 00		 fld	 DWORD PTR [eax]
  000aa	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3d4ccccd
  000b0	df e0		 fnstsw	 ax
  000b2	f6 c4 05	 test	 ah, 5
  000b5	7a 43		 jp	 SHORT $L1453

; 181  :     for (i = 0; i <= VF_CEP_ORDER; i++)

  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000be	eb 09		 jmp	 SHORT $L1454
$L1455:
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c3	83 c1 01	 add	 ecx, 1
  000c6	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L1454:
  000c9	83 7d fc 0c	 cmp	 DWORD PTR _i$[ebp], 12	; 0000000cH
  000cd	7f 29		 jg	 SHORT $L1456

; 182  :       fAverageCepstrum[i] = 0.9F*fCepstrum[i] + 0.1F*fAverageCepstrum[i];

  000cf	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000d2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f666666
  000d8	d8 4c 95 c8	 fmul	 DWORD PTR _fCepstrum$[ebp+edx*4]
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000df	8b 4d 10	 mov	 ecx, DWORD PTR _fAverageCepstrum$[ebp]
  000e2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3dcccccd
  000e8	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  000eb	de c1		 faddp	 ST(1), ST(0)
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000f0	8b 45 10	 mov	 eax, DWORD PTR _fAverageCepstrum$[ebp]
  000f3	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]
  000f6	eb c8		 jmp	 SHORT $L1455
$L1456:

; 183  :   }
; 184  :   else {

  000f8	eb 2a		 jmp	 SHORT $L1443
$L1453:

; 185  :     for (i = 0; i <= VF_CEP_ORDER; i++)

  000fa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00101	eb 09		 jmp	 SHORT $L1458
$L1459:
  00103	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00106	83 c1 01	 add	 ecx, 1
  00109	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L1458:
  0010c	83 7d fc 0c	 cmp	 DWORD PTR _i$[ebp], 12	; 0000000cH
  00110	7f 12		 jg	 SHORT $L1443

; 186  :       fAverageCepstrum[i] = fCepstrum[i];

  00112	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00115	8b 45 10	 mov	 eax, DWORD PTR _fAverageCepstrum$[ebp]
  00118	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0011b	8b 4c 8d c8	 mov	 ecx, DWORD PTR _fCepstrum$[ebp+ecx*4]
  0011f	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
  00122	eb df		 jmp	 SHORT $L1459
$L1443:

; 187  :   }
; 188  : 
; 189  :   STACK_END
; 190  : }

  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 18 00	 ret	 24			; 00000018H
_Cepstrum4VocalFry@24 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitVocalFry@4
EXTRN	_calloc:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxInitVocalFry@4
_TEXT	SEGMENT
_pVocalFryMblk$ = -4
_hVocalFryMblk$ = 8
_VoxInitVocalFry@4 PROC NEAR				; COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 198  :   
; 199  :   VocalFry_mblk *pVocalFryMblk;
; 200  : 
; 201  :   /**** initialize the structure pointer ****/
; 202  :   if (VOX_MEM_INIT(pVocalFryMblk=*hVocalFryMblk, 1, sizeof(VocalFry_mblk)))

  00004	6a 0c		 push	 12			; 0000000cH
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 _calloc
  0000d	83 c4 08	 add	 esp, 8
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _hVocalFryMblk$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	8b 55 08	 mov	 edx, DWORD PTR _hVocalFryMblk$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 fc	 mov	 DWORD PTR _pVocalFryMblk$[ebp], eax
  0001d	83 7d fc 00	 cmp	 DWORD PTR _pVocalFryMblk$[ebp], 0
  00021	75 06		 jne	 SHORT $L1466

; 203  :     return 1;

  00023	66 b8 01 00	 mov	 ax, 1
  00027	eb 4a		 jmp	 SHORT $L1463
$L1466:

; 204  : 
; 205  :   /**** initialize the averageCepstrum array *****/
; 206  :   if (VOX_MEM_INIT(pVocalFryMblk->averageCepstrum, VF_CEP_ORDER+1,
; 207  :          sizeof(float)))

  00029	6a 04		 push	 4
  0002b	6a 0d		 push	 13			; 0000000dH
  0002d	e8 00 00 00 00	 call	 _calloc
  00032	83 c4 08	 add	 esp, 8
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _pVocalFryMblk$[ebp]
  00038	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _pVocalFryMblk$[ebp]
  0003e	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00042	75 06		 jne	 SHORT $L1468

; 208  :     return 1;

  00044	66 b8 01 00	 mov	 ax, 1
  00048	eb 29		 jmp	 SHORT $L1463
$L1468:

; 209  :   
; 210  :   
; 211  :   /**** initialize the values ****/
; 212  :   pVocalFryMblk->averagePitch = VF_BAD_PITCH;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _pVocalFryMblk$[ebp]
  0004d	c7 00 00 00 7a
	44		 mov	 DWORD PTR [eax], 1148846080 ; 447a0000H

; 213  :   pVocalFryMblk->confident = 0.0F;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _pVocalFryMblk$[ebp]
  00056	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 214  :   memset(pVocalFryMblk->averageCepstrum, 0, sizeof(float)*(VF_CEP_ORDER+1));

  0005d	6a 34		 push	 52			; 00000034H
  0005f	6a 00		 push	 0
  00061	8b 55 fc	 mov	 edx, DWORD PTR _pVocalFryMblk$[ebp]
  00064	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _memset
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  :   
; 216  :   return 0;

  00070	66 33 c0	 xor	 ax, ax
$L1463:

; 217  : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
_VoxInitVocalFry@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeVocalFry@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxFreeVocalFry@4
_TEXT	SEGMENT
_pVocalFryMblk$ = -4
_hVocalFryMblk$ = 8
_VoxFreeVocalFry@4 PROC NEAR				; COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 225  :   VocalFry_mblk *pVocalFryMblk = (VocalFry_mblk *) *hVocalFryMblk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hVocalFryMblk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _pVocalFryMblk$[ebp], ecx

; 226  : 
; 227  : 
; 228  :   if (pVocalFryMblk) {

  0000c	83 7d fc 00	 cmp	 DWORD PTR _pVocalFryMblk$[ebp], 0
  00010	74 3b		 je	 SHORT $L1475

; 229  : 
; 230  :     /* free averageCepstrum */
; 231  :     VOX_MEM_FREE(pVocalFryMblk->averageCepstrum);

  00012	8b 55 fc	 mov	 edx, DWORD PTR _pVocalFryMblk$[ebp]
  00015	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00019	74 19		 je	 SHORT $L1476
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _pVocalFryMblk$[ebp]
  0001e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 _free
  00027	83 c4 04	 add	 esp, 4
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _pVocalFryMblk$[ebp]
  0002d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
$L1476:

; 232  :     
; 233  :     /* free pVocalFryMblk */
; 234  :     VOX_MEM_FREE(pVocalFryMblk);

  00034	83 7d fc 00	 cmp	 DWORD PTR _pVocalFryMblk$[ebp], 0
  00038	74 13		 je	 SHORT $L1475
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _pVocalFryMblk$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _free
  00043	83 c4 04	 add	 esp, 4
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVocalFryMblk$[ebp], 0
$L1475:

; 235  : 
; 236  :   }
; 237  : 
; 238  :   return 0;

  0004d	66 33 c0	 xor	 ax, ax

; 239  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
_VoxFreeVocalFry@4 ENDP
_TEXT	ENDS
END
