; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\symwinsp.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@MPPIDLLM@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@HMEHEAMG@?$CIpIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpWin?5?$CB?$DN?5NULL?$CJ?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _SymWindowSignal@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_SymWindowSignal@16
PUBLIC	??_C@_0EB@MPPIDLLM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0DC@HMEHEAMG@?$CIpIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpWin?5?$CB?$DN?5NULL?$CJ?5@ ; `string'
EXTRN	__assert:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0EB@MPPIDLLM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\symwinsp.c
CONST	SEGMENT
??_C@_0EB@MPPIDLLM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\symwinsp.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HMEHEAMG@?$CIpIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpWin?5?$CB?$DN?5NULL?$CJ?5@
CONST	SEGMENT
??_C@_0DC@HMEHEAMG@?$CIpIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpWin?5?$CB?$DN?5NULL?$CJ?5@ DB '('
	DB	'pIn != NULL) && (pWin != NULL) && (pOut != NULL)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _SymWindowSignal@16
_TEXT	SEGMENT
_half_length$ = -12
_pIn2$ = -8
_pOut2$ = -4
_pIn$ = 8
_pWin$ = 12
_pOut$ = 16
_length$ = 20
_SymWindowSignal@16 PROC NEAR				; COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 60   :    int half_length = length >> 1;

  00006	8b 45 14	 mov	 eax, DWORD PTR _length$[ebp]
  00009	d1 f8		 sar	 eax, 1
  0000b	89 45 f4	 mov	 DWORD PTR _half_length$[ebp], eax

; 61   :    float *pIn2, *pOut2;
; 62   : 
; 63   :    assert((pIn != NULL) && (pWin != NULL) && (pOut != NULL));

  0000e	83 7d 08 00	 cmp	 DWORD PTR _pIn$[ebp], 0
  00012	74 0c		 je	 SHORT $L927
  00014	83 7d 0c 00	 cmp	 DWORD PTR _pWin$[ebp], 0
  00018	74 06		 je	 SHORT $L927
  0001a	83 7d 10 00	 cmp	 DWORD PTR _pOut$[ebp], 0
  0001e	75 14		 jne	 SHORT $L928
$L927:
  00020	6a 3f		 push	 63			; 0000003fH
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@MPPIDLLM@c?3?2xbox?2private?2windows?2directx?2@
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DC@HMEHEAMG@?$CIpIn?5?$CB?$DN?5NULL?$CJ?5?$CG?$CG?5?$CIpWin?5?$CB?$DN?5NULL?$CJ?5@
  0002c	e8 00 00 00 00	 call	 __assert
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
$L928:

; 64   :   
; 65   :    /** window the signal in both sides **/
; 66   :    pIn2 = (float *) &(pIn[length-1]);

  00034	8b 55 14	 mov	 edx, DWORD PTR _length$[ebp]
  00037	8b 45 08	 mov	 eax, DWORD PTR _pIn$[ebp]
  0003a	8d 4c 90 fc	 lea	 ecx, DWORD PTR [eax+edx*4-4]
  0003e	89 4d f8	 mov	 DWORD PTR _pIn2$[ebp], ecx

; 67   :    pOut2 = &(pOut[length-1]);

  00041	8b 55 14	 mov	 edx, DWORD PTR _length$[ebp]
  00044	8b 45 10	 mov	 eax, DWORD PTR _pOut$[ebp]
  00047	8d 4c 90 fc	 lea	 ecx, DWORD PTR [eax+edx*4-4]
  0004b	89 4d fc	 mov	 DWORD PTR _pOut2$[ebp], ecx
$L915:

; 68   :    while ( (half_length --) > 0 ) 

  0004e	8b 55 f4	 mov	 edx, DWORD PTR _half_length$[ebp]
  00051	8b 45 f4	 mov	 eax, DWORD PTR _half_length$[ebp]
  00054	83 e8 01	 sub	 eax, 1
  00057	89 45 f4	 mov	 DWORD PTR _half_length$[ebp], eax
  0005a	85 d2		 test	 edx, edx
  0005c	7e 4d		 jle	 SHORT $L916

; 69   :      {
; 70   :         *pOut++ = *pIn++ * *pWin;

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _pIn$[ebp]
  00061	8b 55 0c	 mov	 edx, DWORD PTR _pWin$[ebp]
  00064	d9 01		 fld	 DWORD PTR [ecx]
  00066	d8 0a		 fmul	 DWORD PTR [edx]
  00068	8b 45 10	 mov	 eax, DWORD PTR _pOut$[ebp]
  0006b	d9 18		 fstp	 DWORD PTR [eax]
  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _pOut$[ebp]
  00070	83 c1 04	 add	 ecx, 4
  00073	89 4d 10	 mov	 DWORD PTR _pOut$[ebp], ecx
  00076	8b 55 08	 mov	 edx, DWORD PTR _pIn$[ebp]
  00079	83 c2 04	 add	 edx, 4
  0007c	89 55 08	 mov	 DWORD PTR _pIn$[ebp], edx

; 71   :         *pOut2-- = *pIn2-- * *pWin++;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _pIn2$[ebp]
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pWin$[ebp]
  00085	d9 00		 fld	 DWORD PTR [eax]
  00087	d8 09		 fmul	 DWORD PTR [ecx]
  00089	8b 55 fc	 mov	 edx, DWORD PTR _pOut2$[ebp]
  0008c	d9 1a		 fstp	 DWORD PTR [edx]
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _pOut2$[ebp]
  00091	83 e8 04	 sub	 eax, 4
  00094	89 45 fc	 mov	 DWORD PTR _pOut2$[ebp], eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _pWin$[ebp]
  0009a	83 c1 04	 add	 ecx, 4
  0009d	89 4d 0c	 mov	 DWORD PTR _pWin$[ebp], ecx
  000a0	8b 55 f8	 mov	 edx, DWORD PTR _pIn2$[ebp]
  000a3	83 ea 04	 sub	 edx, 4
  000a6	89 55 f8	 mov	 DWORD PTR _pIn2$[ebp], edx

; 72   :      }

  000a9	eb a3		 jmp	 SHORT $L915
$L916:

; 73   : 
; 74   :    /* considing the length is odd number */
; 75   :    if (length & 1)

  000ab	8b 45 14	 mov	 eax, DWORD PTR _length$[ebp]
  000ae	83 e0 01	 and	 eax, 1
  000b1	85 c0		 test	 eax, eax
  000b3	74 0f		 je	 SHORT $L903

; 76   :       *pOut = *pIn * *pWin;

  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _pIn$[ebp]
  000b8	8b 55 0c	 mov	 edx, DWORD PTR _pWin$[ebp]
  000bb	d9 01		 fld	 DWORD PTR [ecx]
  000bd	d8 0a		 fmul	 DWORD PTR [edx]
  000bf	8b 45 10	 mov	 eax, DWORD PTR _pOut$[ebp]
  000c2	d9 18		 fstp	 DWORD PTR [eax]
$L903:

; 77   : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 10 00	 ret	 16			; 00000010H
_SymWindowSignal@16 ENDP
_TEXT	ENDS
END
