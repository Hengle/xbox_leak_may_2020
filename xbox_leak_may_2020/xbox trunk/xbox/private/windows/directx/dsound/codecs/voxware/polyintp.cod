; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\polyintp.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@MMHLHGHD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@EOOFCEGA@pfOut?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCycle?5?$CB?$DN?5NULL@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@KBLKAPLA@iLog2CycleLength?5?$DM?515?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@HFADLANH@fabs?$CIfIndex?$CJ?$DM?$CIPP_SHIFT_SCALE?$CK0?45@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _PolyCycleIntp@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_PPWts	DD	03e2aaaabr			; 0.166667
	DD	03f2aaaabr			; 0.666667
	DD	03e2aaaabr			; 0.166667
	DD	000000000r			; 0
	DD	03e22ca80r			; 0.158976
	DD	03f2a9acbr			; 0.666424
	DD	03e32ca2br			; 0.174599
	DD	0352aabd8r			; 6.358e-007
	DD	03e1b2955r			; 0.151525
	DD	03f2a6babr			; 0.665705
	DD	03e3b26abr			; 0.182765
	DD	036aaaafcr			; 5.0863e-006
	DD	03e13c62br			; 0.144311
	DD	03f2a1e0br			; 0.664521
	DD	03e43bd2br			; 0.191151
	DD	0378fffebr			; 1.71661e-005
	DD	03e0ca000r			; 0.137329
	DD	03f29b2abr			; 0.662883
	DD	03e4c8aabr			; 0.199748
	DD	0382aaaaar			; 4.06901e-005
	DD	03e05b5d5r			; 0.130576
	DD	03f292a4br			; 0.660802
	DD	03e558c2br			; 0.208543
	DD	038a6aab0r			; 7.94729e-005
	DD	03dfe0d55r			; 0.124049
	DD	03f2885abr			; 0.65829
	DD	03e5ebeabr			; 0.217524
	DD	039100000r			; 0.000137329
	DD	03df12300r			; 0.117743
	DD	03f27c58br			; 0.655358
	DD	03e681f2br			; 0.226681
	DD	03964aaa9r			; 0.000218074
	DD	03de4aaabr			; 0.111654
	DD	03f26eaabr			; 0.652018
	DD	03e71aaabr			; 0.236003
	DD	039aaaaaar			; 0.000325521
	DD	03dd8a255r			; 0.105778
	DD	03f25f5cbr			; 0.648282
	DD	03e7b5e2br			; 0.245476
	DD	039f2ffffr			; 0.000463486
	DD	03dcd0800r			; 0.100113
	DD	03f24e7abr			; 0.64416
	DD	03e829b55r			; 0.255091
	DD	03a26aaabr			; 0.000635783
	DD	03dc1d9abr			; 0.0946534
	DD	03f23c10br			; 0.639664
	DD	03e879895r			; 0.264836
	DD	03a5dd555r			; 0.000846227
	DD	03db71555r			; 0.0893962
	DD	03f2282abr			; 0.634806
	DD	03e8ca555r			; 0.274699
	DD	03a900000r			; 0.00109863
	DD	03dacb900r			; 0.0843372
	DD	03f212d4br			; 0.629597
	DD	03e91c015r			; 0.284669
	DD	03ab71555r			; 0.00139681
	DD	03da2c2abr			; 0.0794729
	DD	03f1fc1abr			; 0.624049
	DD	03e96e755r			; 0.294734
	DD	03ae4aaabr			; 0.00174459
	DD	03d993055r			; 0.0747992
	DD	03f1e408br			; 0.618172
	DD	03e9c1995r			; 0.304883
	DD	03b0ca000r			; 0.00214577
	DD	03d900000r			; 0.0703125
	DD	03f1caaabr			; 0.611979
	DD	03ea15555r			; 0.315104
	DD	03b2aaaabr			; 0.00260417
	DD	03d872fabr			; 0.0660089
	DD	03f1b00cbr			; 0.605481
	DD	03ea69915r			; 0.325387
	DD	03b4cb555r			; 0.0031236
	DD	03d7d7aabr			; 0.0618846
	DD	03f1943abr			; 0.598689
	DD	03eabe355r			; 0.335719
	DD	03b730000r			; 0.00370789
	DD	03d6d4e00r			; 0.0579357
	DD	03f17740br			; 0.591614
	DD	03eb13295r			; 0.346089
	DD	03b8ee555r			; 0.00436083
	DD	03d5dd555r			; 0.0541585
	DD	03f1592abr			; 0.584269
	DD	03eb68555r			; 0.356486
	DD	03ba6aaabr			; 0.00508626
	DD	03d4f0cabr			; 0.0505492
	DD	03f13a04br			; 0.576665
	DD	03ebbda15r			; 0.366898
	DD	03bc0f000r			; 0.00588799
	DD	03d40f000r			; 0.0471039
	DD	03f119dabr			; 0.568812
	DD	03ec12f55r			; 0.377314
	DD	03bddd555r			; 0.00676982
	DD	03d337b55r			; 0.0438188
	DD	03f0f8b8br			; 0.560723
	DD	03ec68395r			; 0.387723
	DD	03bfd7aabr			; 0.00773557
	DD	03d26aaabr			; 0.0406901
	DD	03f0d6aabr			; 0.552409
	DD	03ecbd555r			; 0.398112
	DD	03c100000r			; 0.00878906
	DD	03d1a7a00r			; 0.037714
	DD	03f0b3bcbr			; 0.543881
	DD	03ed12315r			; 0.408471
	DD	03c22c2abr			; 0.00993411
	DD	03d0ee555r			; 0.0348867
	DD	03f08ffabr			; 0.535151
	DD	03ed66b55r			; 0.418788
	DD	03c371555r			; 0.0111745
	DD	03d03e8abr			; 0.0322043
	DD	03f06b70br			; 0.526231
	DD	03edbac95r			; 0.429051
	DD	03c4d0800r			; 0.0125141
	DD	03cf30000r			; 0.0296631
	DD	03f0462abr			; 0.517131
	DD	03ee0e555r			; 0.43925
	DD	03c64aaabr			; 0.0139567
	DD	03cdf4eabr			; 0.0272592
	DD	03f02034br			; 0.507863
	DD	03ee61415r			; 0.449372
	DD	03c7e0d55r			; 0.0155061
	DD	03cccb555r			; 0.0249888
	DD	03eff3355r			; 0.498439
	DD	03eeb3755r			; 0.459407
	DD	03c8ca000r			; 0.0171661
	DD	03cbb2c00r			; 0.0228481
	DD	03efa4d15r			; 0.488869
	DD	03ef04d95r			; 0.469342
	DD	03c9b2955r			; 0.0189406
	DD	03caaaaabr			; 0.0208333
	DD	03ef55555r			; 0.479167
	DD	03ef55555r			; 0.479167
	DD	03caaaaabr			; 0.0208333
	DD	03c9b2955r			; 0.0189406
	DD	03ef04d95r			; 0.469342
	DD	03efa4d15r			; 0.488869
	DD	03cbb2c00r			; 0.0228481
	DD	03c8ca000r			; 0.0171661
	DD	03eeb3755r			; 0.459407
	DD	03eff3355r			; 0.498439
	DD	03cccb555r			; 0.0249888
	DD	03c7e0d55r			; 0.0155061
	DD	03ee61415r			; 0.449372
	DD	03f02034br			; 0.507863
	DD	03cdf4eabr			; 0.0272592
	DD	03c64aaabr			; 0.0139567
	DD	03ee0e555r			; 0.43925
	DD	03f0462abr			; 0.517131
	DD	03cf30000r			; 0.0296631
	DD	03c4d0800r			; 0.0125141
	DD	03edbac95r			; 0.429051
	DD	03f06b70br			; 0.526231
	DD	03d03e8abr			; 0.0322043
	DD	03c371555r			; 0.0111745
	DD	03ed66b55r			; 0.418788
	DD	03f08ffabr			; 0.535151
	DD	03d0ee555r			; 0.0348867
	DD	03c22c2abr			; 0.00993411
	DD	03ed12315r			; 0.408471
	DD	03f0b3bcbr			; 0.543881
	DD	03d1a7a00r			; 0.037714
	DD	03c100000r			; 0.00878906
	DD	03ecbd555r			; 0.398112
	DD	03f0d6aabr			; 0.552409
	DD	03d26aaabr			; 0.0406901
	DD	03bfd7aabr			; 0.00773557
	DD	03ec68395r			; 0.387723
	DD	03f0f8b8br			; 0.560723
	DD	03d337b55r			; 0.0438188
	DD	03bddd555r			; 0.00676982
	DD	03ec12f55r			; 0.377314
	DD	03f119dabr			; 0.568812
	DD	03d40f000r			; 0.0471039
	DD	03bc0f000r			; 0.00588799
	DD	03ebbda15r			; 0.366898
	DD	03f13a04br			; 0.576665
	DD	03d4f0cabr			; 0.0505492
	DD	03ba6aaabr			; 0.00508626
	DD	03eb68555r			; 0.356486
	DD	03f1592abr			; 0.584269
	DD	03d5dd555r			; 0.0541585
	DD	03b8ee555r			; 0.00436083
	DD	03eb13295r			; 0.346089
	DD	03f17740br			; 0.591614
	DD	03d6d4e00r			; 0.0579357
	DD	03b730000r			; 0.00370789
	DD	03eabe355r			; 0.335719
	DD	03f1943abr			; 0.598689
	DD	03d7d7aabr			; 0.0618846
	DD	03b4cb555r			; 0.0031236
	DD	03ea69915r			; 0.325387
	DD	03f1b00cbr			; 0.605481
	DD	03d872fabr			; 0.0660089
	DD	03b2aaaabr			; 0.00260417
	DD	03ea15555r			; 0.315104
	DD	03f1caaabr			; 0.611979
	DD	03d900000r			; 0.0703125
	DD	03b0ca000r			; 0.00214577
	DD	03e9c1995r			; 0.304883
	DD	03f1e408br			; 0.618172
	DD	03d993055r			; 0.0747992
	DD	03ae4aaabr			; 0.00174459
	DD	03e96e755r			; 0.294734
	DD	03f1fc1abr			; 0.624049
	DD	03da2c2abr			; 0.0794729
	DD	03ab71555r			; 0.00139681
	DD	03e91c015r			; 0.284669
	DD	03f212d4br			; 0.629597
	DD	03dacb900r			; 0.0843372
	DD	03a900000r			; 0.00109863
	DD	03e8ca555r			; 0.274699
	DD	03f2282abr			; 0.634806
	DD	03db71555r			; 0.0893962
	DD	03a5dd555r			; 0.000846227
	DD	03e879895r			; 0.264836
	DD	03f23c10br			; 0.639664
	DD	03dc1d9abr			; 0.0946534
	DD	03a26aaabr			; 0.000635783
	DD	03e829b55r			; 0.255091
	DD	03f24e7abr			; 0.64416
	DD	03dcd0800r			; 0.100113
	DD	039f2ffffr			; 0.000463486
	DD	03e7b5e2br			; 0.245476
	DD	03f25f5cbr			; 0.648282
	DD	03dd8a255r			; 0.105778
	DD	039aaaaaar			; 0.000325521
	DD	03e71aaabr			; 0.236003
	DD	03f26eaabr			; 0.652018
	DD	03de4aaabr			; 0.111654
	DD	03964aaa9r			; 0.000218074
	DD	03e681f2br			; 0.226681
	DD	03f27c58br			; 0.655358
	DD	03df12300r			; 0.117743
	DD	039100000r			; 0.000137329
	DD	03e5ebeabr			; 0.217524
	DD	03f2885abr			; 0.65829
	DD	03dfe0d55r			; 0.124049
	DD	038a6aab0r			; 7.94729e-005
	DD	03e558c2br			; 0.208543
	DD	03f292a4br			; 0.660802
	DD	03e05b5d5r			; 0.130576
	DD	0382aaaaar			; 4.06901e-005
	DD	03e4c8aabr			; 0.199748
	DD	03f29b2abr			; 0.662883
	DD	03e0ca000r			; 0.137329
	DD	0378fffebr			; 1.71661e-005
	DD	03e43bd2br			; 0.191151
	DD	03f2a1e0br			; 0.664521
	DD	03e13c62br			; 0.144311
	DD	036aaaafcr			; 5.0863e-006
	DD	03e3b26abr			; 0.182765
	DD	03f2a6babr			; 0.665705
	DD	03e1b2955r			; 0.151525
	DD	0352aabd8r			; 6.358e-007
	DD	03e32ca2br			; 0.174599
	DD	03f2a9acbr			; 0.666424
	DD	03e22ca80r			; 0.158976
CONST	ENDS
PUBLIC	__real@47800000
PUBLIC	__real@40e0000000000000
PUBLIC	__real@37800000
PUBLIC	_PolyCycleIntp@24
PUBLIC	??_C@_0EB@MMHLHGHD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CB@EOOFCEGA@pfOut?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCycle?5?$CB?$DN?5NULL@ ; `string'
PUBLIC	??_C@_0BG@KBLKAPLA@iLog2CycleLength?5?$DM?515?$AA@ ; `string'
PUBLIC	??_C@_0CD@HFADLANH@fabs?$CIfIndex?$CJ?$DM?$CIPP_SHIFT_SCALE?$CK0?45@ ; `string'
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
EXTRN	_fabs:NEAR
;	COMDAT ??_C@_0EB@MMHLHGHD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\polyintp.c
CONST	SEGMENT
??_C@_0EB@MMHLHGHD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\polyintp.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EOOFCEGA@pfOut?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCycle?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0CB@EOOFCEGA@pfOut?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCycle?5?$CB?$DN?5NULL@ DB 'p'
	DB	'fOut != NULL && pfCycle != NULL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KBLKAPLA@iLog2CycleLength?5?$DM?515?$AA@
CONST	SEGMENT
??_C@_0BG@KBLKAPLA@iLog2CycleLength?5?$DM?515?$AA@ DB 'iLog2CycleLength <'
	DB	' 15', 00H					; `string'
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@40e0000000000000
CONST	SEGMENT
__real@40e0000000000000 DQ 040e0000000000000r	; 32768
CONST	ENDS
;	COMDAT ??_C@_0CD@HFADLANH@fabs?$CIfIndex?$CJ?$DM?$CIPP_SHIFT_SCALE?$CK0?45@
CONST	SEGMENT
??_C@_0CD@HFADLANH@fabs?$CIfIndex?$CJ?$DM?$CIPP_SHIFT_SCALE?$CK0?45@ DB 'f'
	DB	'abs(fIndex)<(PP_SHIFT_SCALE*0.5F)', 00H	; `string'
CONST	ENDS
;	COMDAT __real@37800000
CONST	SEGMENT
__real@37800000 DD 037800000r			; 1.52588e-005
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _PolyCycleIntp@24
_TEXT	SEGMENT
_lResampFactor$ = -36
_iCycleLength$ = -32
_lScaledCycleMask$ = -28
_pfW$ = -24
_pfC$ = -20
_fSum$ = -16
_lIndex$ = -12
_i$ = -8
_fIndex$ = -4
_pfOut$ = 8
_iOutLength$ = 12
_pfCycle$ = 16
_iLog2CycleLength$ = 20
_fResampRate$ = 24
_fNormPhase$ = 28
_PolyCycleIntp@24 PROC NEAR				; COMDAT

; 106  : {  

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 107  :   float fSum;
; 108  :   float *pfW, *pfC;
; 109  :   float fIndex;
; 110  :   long lIndex, lResampFactor;
; 111  :   int iCycleLength;
; 112  :   long lScaledCycleMask;
; 113  :   int i;
; 114  : 
; 115  :   /*-----------------------------------------------------
; 116  :     Error checking :
; 117  :     -----------------------------------------------------*/
; 118  :    assert(pfOut != NULL && pfCycle != NULL);

  00006	83 7d 08 00	 cmp	 DWORD PTR _pfOut$[ebp], 0
  0000a	74 06		 je	 SHORT $L1025
  0000c	83 7d 10 00	 cmp	 DWORD PTR _pfCycle$[ebp], 0
  00010	75 14		 jne	 SHORT $L1026
$L1025:
  00012	6a 76		 push	 118			; 00000076H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@MMHLHGHD@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@EOOFCEGA@pfOut?5?$CB?$DN?5NULL?5?$CG?$CG?5pfCycle?5?$CB?$DN?5NULL@
  0001e	e8 00 00 00 00	 call	 __assert
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1026:

; 119  :    assert(iLog2CycleLength < 15);  /* to make sure no overflow */

  00026	83 7d 14 0f	 cmp	 DWORD PTR _iLog2CycleLength$[ebp], 15 ; 0000000fH
  0002a	7c 14		 jl	 SHORT $L1027
  0002c	6a 77		 push	 119			; 00000077H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@MMHLHGHD@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@KBLKAPLA@iLog2CycleLength?5?$DM?515?$AA@
  00038	e8 00 00 00 00	 call	 __assert
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1027:

; 120  :    assert(PP_NUM_SAMPLES == 4);  /* the code is hardwired only for 4 */
; 121  : 
; 122  :    /*--------------------------------------------------
; 123  :      Get the prototype cycle length:
; 124  :     --------------------------------------------------*/
; 125  :    iCycleLength        = 1<<iLog2CycleLength;

  00040	ba 01 00 00 00	 mov	 edx, 1
  00045	8b 4d 14	 mov	 ecx, DWORD PTR _iLog2CycleLength$[ebp]
  00048	d3 e2		 shl	 edx, cl
  0004a	89 55 e0	 mov	 DWORD PTR _iCycleLength$[ebp], edx

; 126  :    lScaledCycleMask    = ((long)1<<(iLog2CycleLength+PP_SHIFT))-1;

  0004d	8b 4d 14	 mov	 ecx, DWORD PTR _iLog2CycleLength$[ebp]
  00050	83 c1 10	 add	 ecx, 16			; 00000010H
  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	d3 e0		 shl	 eax, cl
  0005a	83 e8 01	 sub	 eax, 1
  0005d	89 45 e4	 mov	 DWORD PTR _lScaledCycleMask$[ebp], eax

; 127  : 
; 128  : 
; 129  :    /*-------------------------------------------------        
; 130  :      Extend Cycle in both forward & Backward  
; 131  :      direction for extrapolation in upsampling 
; 132  :     -------------------------------------------------*/
; 133  :     pfCycle[iCycleLength]   = pfCycle[0];     

  00060	8b 4d e0	 mov	 ecx, DWORD PTR _iCycleLength$[ebp]
  00063	8b 55 10	 mov	 edx, DWORD PTR _pfCycle$[ebp]
  00066	8b 45 10	 mov	 eax, DWORD PTR _pfCycle$[ebp]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 134  :     pfCycle[iCycleLength+1] = pfCycle[1];    

  0006e	8b 4d e0	 mov	 ecx, DWORD PTR _iCycleLength$[ebp]
  00071	8b 55 10	 mov	 edx, DWORD PTR _pfCycle$[ebp]
  00074	8b 45 10	 mov	 eax, DWORD PTR _pfCycle$[ebp]
  00077	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007a	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 135  :     pfCycle[iCycleLength+2] = pfCycle[2];     

  0007e	8b 4d e0	 mov	 ecx, DWORD PTR _iCycleLength$[ebp]
  00081	8b 55 10	 mov	 edx, DWORD PTR _pfCycle$[ebp]
  00084	8b 45 10	 mov	 eax, DWORD PTR _pfCycle$[ebp]
  00087	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0008a	89 44 8a 08	 mov	 DWORD PTR [edx+ecx*4+8], eax

; 136  :     pfCycle[-1]             = pfCycle[iCycleLength-1]; 

  0008e	8b 4d 10	 mov	 ecx, DWORD PTR _pfCycle$[ebp]
  00091	8b 55 e0	 mov	 edx, DWORD PTR _iCycleLength$[ebp]
  00094	8b 45 10	 mov	 eax, DWORD PTR _pfCycle$[ebp]
  00097	8b 54 90 fc	 mov	 edx, DWORD PTR [eax+edx*4-4]
  0009b	89 51 fc	 mov	 DWORD PTR [ecx-4], edx

; 137  :     pfCycle                -=PP_DELAY;   

  0009e	8b 45 10	 mov	 eax, DWORD PTR _pfCycle$[ebp]
  000a1	83 e8 04	 sub	 eax, 4
  000a4	89 45 10	 mov	 DWORD PTR _pfCycle$[ebp], eax

; 138  : 
; 139  :     /*--------------------------------------------------
; 140  :       Convert to fix point for speeding up:
; 141  :       (1) Resample factor
; 142  :       (2) start index at proto-type cycle.
; 143  :       --------------------------------------------------*/
; 144  :     lResampFactor   = (long)(PP_SHIFT_SCALE*fResampRate);

  000a7	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@47800000
  000ad	d8 4d 18	 fmul	 DWORD PTR _fResampRate$[ebp]
  000b0	e8 00 00 00 00	 call	 __ftol2
  000b5	89 45 dc	 mov	 DWORD PTR _lResampFactor$[ebp], eax

; 145  : 
; 146  :     fIndex          = fNormPhase * (float)iCycleLength;

  000b8	db 45 e0	 fild	 DWORD PTR _iCycleLength$[ebp]
  000bb	d8 4d 1c	 fmul	 DWORD PTR _fNormPhase$[ebp]
  000be	d9 55 fc	 fst	 DWORD PTR _fIndex$[ebp]

; 147  :     assert(fabs(fIndex)<(PP_SHIFT_SCALE*0.5F)); 

  000c1	83 ec 08	 sub	 esp, 8
  000c4	dd 1c 24	 fstp	 QWORD PTR [esp]
  000c7	e8 00 00 00 00	 call	 _fabs
  000cc	83 c4 08	 add	 esp, 8
  000cf	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@40e0000000000000
  000d5	df e0		 fnstsw	 ax
  000d7	f6 c4 05	 test	 ah, 5
  000da	7b 17		 jnp	 SHORT $L1028
  000dc	68 93 00 00 00	 push	 147			; 00000093H
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@MMHLHGHD@c?3?2xbox?2private?2windows?2directx?2@
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@HFADLANH@fabs?$CIfIndex?$CJ?$DM?$CIPP_SHIFT_SCALE?$CK0?45@
  000eb	e8 00 00 00 00	 call	 __assert
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1028:

; 148  : 
; 149  :     lIndex          = (long)(PP_SHIFT_SCALE*fIndex);

  000f3	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@47800000
  000f9	d8 4d fc	 fmul	 DWORD PTR _fIndex$[ebp]
  000fc	e8 00 00 00 00	 call	 __ftol2
  00101	89 45 f4	 mov	 DWORD PTR _lIndex$[ebp], eax

; 150  :     lIndex         &= lScaledCycleMask;

  00104	8b 55 f4	 mov	 edx, DWORD PTR _lIndex$[ebp]
  00107	23 55 e4	 and	 edx, DWORD PTR _lScaledCycleMask$[ebp]
  0010a	89 55 f4	 mov	 DWORD PTR _lIndex$[ebp], edx
$L1005:

; 151  :     
; 152  :     /*--------------------------------------------------
; 153  :       To interpolate the prototype cycle and get the
; 154  :       output data.
; 155  :       --------------------------------------------------*/
; 156  :     while (iOutLength-- > 0)

  0010d	8b 45 0c	 mov	 eax, DWORD PTR _iOutLength$[ebp]
  00110	8b 4d 0c	 mov	 ecx, DWORD PTR _iOutLength$[ebp]
  00113	83 e9 01	 sub	 ecx, 1
  00116	89 4d 0c	 mov	 DWORD PTR _iOutLength$[ebp], ecx
  00119	85 c0		 test	 eax, eax
  0011b	0f 8e e1 00 00
	00		 jle	 $L1006

; 157  :       { 
; 158  :         /*-------------------------------------------------------
; 159  :           The length of prototype cycle is in order of 2. And
; 160  :           the fractional part of lIndex is in the last 16 bits.
; 161  :           So the weights' index can be calculated by:
; 162  :           fract(lIndex) * PP_RESAMP_RATE / PP_SHIFT_SCALE
; 163  :           ------------------------------------------------------*/
; 164  :          i      = (int)((lIndex&PP_SHIFT_MASK)>>PP_WEIGHTS_INDEX_SHIFT);

  00121	8b 55 f4	 mov	 edx, DWORD PTR _lIndex$[ebp]
  00124	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0012a	c1 fa 0a	 sar	 edx, 10			; 0000000aH
  0012d	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx

; 165  :          pfW    = (float *)&(PPWts[i<<2]);

  00130	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00133	c1 e0 02	 shl	 eax, 2
  00136	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR _PPWts[eax*4]
  0013d	89 4d e8	 mov	 DWORD PTR _pfW$[ebp], ecx

; 166  : 
; 167  :         /*-----------------------------------------------------
; 168  :           The integer part of lIndex is in the first 16 bits.
; 169  :           To make sure the operation won't overflow, need to 
; 170  :           make sure the integer index is between 
; 171  :           0 to (iCycleLength - 1).
; 172  :           -----------------------------------------------------*/
; 173  :         i      = (int)(lIndex >> PP_SHIFT);

  00140	8b 55 f4	 mov	 edx, DWORD PTR _lIndex$[ebp]
  00143	c1 fa 10	 sar	 edx, 16			; 00000010H
  00146	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx

; 174  :         pfC    = &(pfCycle[i]);

  00149	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0014c	8b 4d 10	 mov	 ecx, DWORD PTR _pfCycle$[ebp]
  0014f	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00152	89 55 ec	 mov	 DWORD PTR _pfC$[ebp], edx

; 175  :   
; 176  :         /*--------------------------------------------------
; 177  :           Convolve samples in the prototype cycle with 
; 178  :           weights (hardwired to use 4 samples).
; 179  :           --------------------------------------------------*/
; 180  :         fSum    = (*pfC++**pfW++);

  00155	8b 45 ec	 mov	 eax, DWORD PTR _pfC$[ebp]
  00158	8b 4d e8	 mov	 ecx, DWORD PTR _pfW$[ebp]
  0015b	d9 00		 fld	 DWORD PTR [eax]
  0015d	d8 09		 fmul	 DWORD PTR [ecx]
  0015f	d9 5d f0	 fstp	 DWORD PTR _fSum$[ebp]
  00162	8b 55 e8	 mov	 edx, DWORD PTR _pfW$[ebp]
  00165	83 c2 04	 add	 edx, 4
  00168	89 55 e8	 mov	 DWORD PTR _pfW$[ebp], edx
  0016b	8b 45 ec	 mov	 eax, DWORD PTR _pfC$[ebp]
  0016e	83 c0 04	 add	 eax, 4
  00171	89 45 ec	 mov	 DWORD PTR _pfC$[ebp], eax

; 181  :         fSum   += (*pfC++**pfW++);

  00174	8b 4d ec	 mov	 ecx, DWORD PTR _pfC$[ebp]
  00177	8b 55 e8	 mov	 edx, DWORD PTR _pfW$[ebp]
  0017a	d9 01		 fld	 DWORD PTR [ecx]
  0017c	d8 0a		 fmul	 DWORD PTR [edx]
  0017e	d8 45 f0	 fadd	 DWORD PTR _fSum$[ebp]
  00181	d9 5d f0	 fstp	 DWORD PTR _fSum$[ebp]
  00184	8b 45 e8	 mov	 eax, DWORD PTR _pfW$[ebp]
  00187	83 c0 04	 add	 eax, 4
  0018a	89 45 e8	 mov	 DWORD PTR _pfW$[ebp], eax
  0018d	8b 4d ec	 mov	 ecx, DWORD PTR _pfC$[ebp]
  00190	83 c1 04	 add	 ecx, 4
  00193	89 4d ec	 mov	 DWORD PTR _pfC$[ebp], ecx

; 182  :         fSum   += (*pfC++**pfW++);

  00196	8b 55 ec	 mov	 edx, DWORD PTR _pfC$[ebp]
  00199	8b 45 e8	 mov	 eax, DWORD PTR _pfW$[ebp]
  0019c	d9 02		 fld	 DWORD PTR [edx]
  0019e	d8 08		 fmul	 DWORD PTR [eax]
  001a0	d8 45 f0	 fadd	 DWORD PTR _fSum$[ebp]
  001a3	d9 5d f0	 fstp	 DWORD PTR _fSum$[ebp]
  001a6	8b 4d e8	 mov	 ecx, DWORD PTR _pfW$[ebp]
  001a9	83 c1 04	 add	 ecx, 4
  001ac	89 4d e8	 mov	 DWORD PTR _pfW$[ebp], ecx
  001af	8b 55 ec	 mov	 edx, DWORD PTR _pfC$[ebp]
  001b2	83 c2 04	 add	 edx, 4
  001b5	89 55 ec	 mov	 DWORD PTR _pfC$[ebp], edx

; 183  :         fSum   += (*pfC++**pfW++);

  001b8	8b 45 ec	 mov	 eax, DWORD PTR _pfC$[ebp]
  001bb	8b 4d e8	 mov	 ecx, DWORD PTR _pfW$[ebp]
  001be	d9 00		 fld	 DWORD PTR [eax]
  001c0	d8 09		 fmul	 DWORD PTR [ecx]
  001c2	d8 45 f0	 fadd	 DWORD PTR _fSum$[ebp]
  001c5	d9 5d f0	 fstp	 DWORD PTR _fSum$[ebp]
  001c8	8b 55 e8	 mov	 edx, DWORD PTR _pfW$[ebp]
  001cb	83 c2 04	 add	 edx, 4
  001ce	89 55 e8	 mov	 DWORD PTR _pfW$[ebp], edx
  001d1	8b 45 ec	 mov	 eax, DWORD PTR _pfC$[ebp]
  001d4	83 c0 04	 add	 eax, 4
  001d7	89 45 ec	 mov	 DWORD PTR _pfC$[ebp], eax

; 184  :         *pfOut++ = fSum;

  001da	8b 4d 08	 mov	 ecx, DWORD PTR _pfOut$[ebp]
  001dd	8b 55 f0	 mov	 edx, DWORD PTR _fSum$[ebp]
  001e0	89 11		 mov	 DWORD PTR [ecx], edx
  001e2	8b 45 08	 mov	 eax, DWORD PTR _pfOut$[ebp]
  001e5	83 c0 04	 add	 eax, 4
  001e8	89 45 08	 mov	 DWORD PTR _pfOut$[ebp], eax

; 185  : 
; 186  :         /*-------------------
; 187  :           Update lIndex:
; 188  :          -------------------*/
; 189  :         lIndex += lResampFactor;

  001eb	8b 4d f4	 mov	 ecx, DWORD PTR _lIndex$[ebp]
  001ee	03 4d dc	 add	 ecx, DWORD PTR _lResampFactor$[ebp]
  001f1	89 4d f4	 mov	 DWORD PTR _lIndex$[ebp], ecx

; 190  :         lIndex &= lScaledCycleMask;

  001f4	8b 55 f4	 mov	 edx, DWORD PTR _lIndex$[ebp]
  001f7	23 55 e4	 and	 edx, DWORD PTR _lScaledCycleMask$[ebp]
  001fa	89 55 f4	 mov	 DWORD PTR _lIndex$[ebp], edx

; 191  :    }

  001fd	e9 0b ff ff ff	 jmp	 $L1005
$L1006:

; 192  : 
; 193  : 
; 194  :     /*------------------------
; 195  :       Get the ending phase:
; 196  :       ------------------------*/
; 197  :     lIndex     = lIndex >> iLog2CycleLength;  /* remove the cycle length */

  00202	8b 45 f4	 mov	 eax, DWORD PTR _lIndex$[ebp]
  00205	8b 4d 14	 mov	 ecx, DWORD PTR _iLog2CycleLength$[ebp]
  00208	d3 f8		 sar	 eax, cl
  0020a	89 45 f4	 mov	 DWORD PTR _lIndex$[ebp], eax

; 198  :     fNormPhase = (float)(lIndex * INV_PP_SHIFT_SCALE);

  0020d	db 45 f4	 fild	 DWORD PTR _lIndex$[ebp]
  00210	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@37800000
  00216	d9 55 1c	 fst	 DWORD PTR _fNormPhase$[ebp]

; 199  : 
; 200  :     return fNormPhase;
; 201  : }

  00219	8b e5		 mov	 esp, ebp
  0021b	5d		 pop	 ebp
  0021c	c2 18 00	 ret	 24			; 00000018H
_PolyCycleIntp@24 ENDP
_TEXT	ENDS
END
