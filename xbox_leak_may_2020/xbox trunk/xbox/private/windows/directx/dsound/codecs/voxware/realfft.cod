; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\realfft.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07CEAPKMAN@log2N?$DO0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@NCFOKDCF@log2N?5?$DO?$DN?53?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06OODMLIBP@N?5?$DO?$DN?54?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@GHLNHKEE@N?5?$DM?$DN?5TWIDDLE_PERIOD?12?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MLEFJCGE@log2N?5?$DO?$DN?52?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OJNBHKGE@iWIndex?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@JBNHLKIP@pfBase?5?$DM?$DN?5?$CIpfInOut?5?$CL?5?$CIN?5?$DM?$DM?51?$CJ?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _RealFft@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _RealInverseFft@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Fft@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InverseFft@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Unpack@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _InverseUnpack@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _BitRev@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
PUBLIC	_sin0Index
PUBLIC	_cos0Index
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_twiddle DD	000000000r			; 0
	DD	03c490e90r			; 0.0122715
	DD	03cc90ab0r			; 0.0245412
	DD	03d16c32cr			; 0.0368072
	DD	03d48fb2fr			; 0.0490677
	DD	03d7b2b74r			; 0.0613207
	DD	03d96a905r			; 0.0735646
	DD	03dafb680r			; 0.0857973
	DD	03dc8bd36r			; 0.0980171
	DD	03de1bc2fr			; 0.110222
	DD	03dfab273r			; 0.122411
	DD	03e09cf87r			; 0.134581
	DD	03e164083r			; 0.14673
	DD	03e22abb5r			; 0.158858
	DD	03e2f10a2r			; 0.170962
	DD	03e3b6ecfr			; 0.18304
	DD	03e47c5c2r			; 0.19509
	DD	03e541501r			; 0.207111
	DD	03e605c13r			; 0.219101
	DD	03e6c9a7fr			; 0.231058
	DD	03e78cfccr			; 0.24298
	DD	03e827dc0r			; 0.254866
	DD	03e888e93r			; 0.266713
	DD	03e8e9a22r			; 0.27852
	DD	03e94a032r			; 0.290285
	DD	03e9aa086r			; 0.302006
	DD	03ea09ae5r			; 0.313682
	DD	03ea68f12r			; 0.32531
	DD	03eac7cd4r			; 0.33689
	DD	03eb263efr			; 0.348419
	DD	03eb8442ar			; 0.359895
	DD	03ebe1d49r			; 0.371317
	DD	03ec3ef15r			; 0.382683
	DD	03ec9b953r			; 0.393992
	DD	03ecf7bcar			; 0.405241
	DD	03ed53641r			; 0.41643
	DD	03edae880r			; 0.427555
	DD	03ee0924fr			; 0.438616
	DD	03ee63375r			; 0.449611
	DD	03eebcbbbr			; 0.460539
	DD	03ef15aear			; 0.471397
	DD	03ef6e0cbr			; 0.482184
	DD	03efc5d27r			; 0.492898
	DD	03f00e7e4r			; 0.503538
	DD	03f039c3dr			; 0.514103
	DD	03f064b82r			; 0.52459
	DD	03f08f59br			; 0.534998
	DD	03f0b9a6br			; 0.545325
	DD	03f0e39dar			; 0.55557
	DD	03f10d3cdr			; 0.565732
	DD	03f13682ar			; 0.575808
	DD	03f15f6d9r			; 0.585798
	DD	03f187fc0r			; 0.595699
	DD	03f1b02c6r			; 0.605511
	DD	03f1d7fd1r			; 0.615232
	DD	03f1ff6cbr			; 0.62486
	DD	03f226799r			; 0.634393
	DD	03f24d225r			; 0.643832
	DD	03f273656r			; 0.653173
	DD	03f299415r			; 0.662416
	DD	03f2beb4ar			; 0.671559
	DD	03f2e3bder			; 0.680601
	DD	03f3085bbr			; 0.689541
	DD	03f32c8c9r			; 0.698376
	DD	03f3504f3r			; 0.707107
	DD	03f373a23r			; 0.715731
	DD	03f396842r			; 0.724247
	DD	03f3b8f3br			; 0.732654
	DD	03f3daef9r			; 0.740951
	DD	03f3fc767r			; 0.749136
	DD	03f41d870r			; 0.757209
	DD	03f43e201r			; 0.765167
	DD	03f45e403r			; 0.77301
	DD	03f47de65r			; 0.780737
	DD	03f49d112r			; 0.788346
	DD	03f4bbbf8r			; 0.795837
	DD	03f4d9f02r			; 0.803208
	DD	03f4f7a20r			; 0.810457
	DD	03f514d3dr			; 0.817585
	DD	03f531849r			; 0.824589
	DD	03f54db31r			; 0.83147
	DD	03f5695e5r			; 0.838225
	DD	03f584853r			; 0.844854
	DD	03f59f26ar			; 0.851355
	DD	03f5b941ar			; 0.857729
	DD	03f5d2d53r			; 0.863973
	DD	03f5ebe05r			; 0.870087
	DD	03f604621r			; 0.87607
	DD	03f61c597r			; 0.881921
	DD	03f633c5ar			; 0.88764
	DD	03f64aa59r			; 0.893224
	DD	03f660f88r			; 0.898674
	DD	03f676bd8r			; 0.903989
	DD	03f68bf3cr			; 0.909168
	DD	03f6a09a7r			; 0.91421
	DD	03f6b4b0cr			; 0.919114
	DD	03f6c835er			; 0.92388
	DD	03f6db293r			; 0.928506
	DD	03f6ed89er			; 0.932993
	DD	03f6ff573r			; 0.937339
	DD	03f710908r			; 0.941544
	DD	03f721352r			; 0.945607
	DD	03f731447r			; 0.949528
	DD	03f740bddr			; 0.953306
	DD	03f74fa0br			; 0.95694
	DD	03f75dec6r			; 0.960431
	DD	03f76ba07r			; 0.963776
	DD	03f778bc5r			; 0.966976
	DD	03f7853f8r			; 0.970031
	DD	03f791298r			; 0.97294
	DD	03f79c79dr			; 0.975702
	DD	03f7a7302r			; 0.978317
	DD	03f7b14ber			; 0.980785
	DD	03f7baccdr			; 0.983105
	DD	03f7c3b28r			; 0.985278
	DD	03f7cbfc9r			; 0.987301
	DD	03f7d3aacr			; 0.989177
	DD	03f7dabccr			; 0.990903
	DD	03f7e1323r			; 0.99248
	DD	03f7e70b0r			; 0.993907
	DD	03f7ec46dr			; 0.995185
	DD	03f7f0e58r			; 0.996313
	DD	03f7f4e6dr			; 0.99729
	DD	03f7f84abr			; 0.998118
	DD	03f7fb10fr			; 0.998795
	DD	03f7fd397r			; 0.999322
	DD	03f7fec43r			; 0.999699
	DD	03f7ffb11r			; 0.999925
	DD	03f800000r			; 1
CONST	ENDS
_DATA	SEGMENT
_sin0Index DD	FLAT:_twiddle
_cos0Index DD	FLAT:_twiddle+512
_DATA	ENDS
PUBLIC	_RealFft@8
PUBLIC	??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@		; `string'
PUBLIC	??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@ ; `string'
PUBLIC	??_C@_07CEAPKMAN@log2N?$DO0?$AA@		; `string'
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\realfft.c
CONST	SEGMENT
??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\realfft.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@ DB 'pfInOut != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@
CONST	SEGMENT
??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@ DB 'N >= 8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@
CONST	SEGMENT
??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@ DB 'N <= TWIDDLE_PERI'
	DB	'OD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07CEAPKMAN@log2N?$DO0?$AA@
CONST	SEGMENT
??_C@_07CEAPKMAN@log2N?$DO0?$AA@ DB 'log2N>0', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _RealFft@8
_TEXT	SEGMENT
_N$ = -4
_pfInOut$ = 8
_log2N$ = 12
_RealFft@8 PROC NEAR					; COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 171  :   int N;
; 172  :   
; 173  :   N = 1<<log2N;

  00004	b8 01 00 00 00	 mov	 eax, 1
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  0000c	d3 e0		 shl	 eax, cl
  0000e	89 45 fc	 mov	 DWORD PTR _N$[ebp], eax

; 174  : 
; 175  :   assert(pfInOut != NULL);

  00011	83 7d 08 00	 cmp	 DWORD PTR _pfInOut$[ebp], 0
  00015	75 17		 jne	 SHORT $L1342
  00017	68 af 00 00 00	 push	 175			; 000000afH
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
  00026	e8 00 00 00 00	 call	 __assert
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1342:

; 176  :   assert(N >= 8);

  0002e	83 7d fc 08	 cmp	 DWORD PTR _N$[ebp], 8
  00032	7d 17		 jge	 SHORT $L1343
  00034	68 b0 00 00 00	 push	 176			; 000000b0H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@
  00043	e8 00 00 00 00	 call	 __assert
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1343:

; 177  :   assert(N <= TWIDDLE_PERIOD);

  0004b	81 7d fc 00 02
	00 00		 cmp	 DWORD PTR _N$[ebp], 512	; 00000200H
  00052	76 17		 jbe	 SHORT $L1344
  00054	68 b1 00 00 00	 push	 177			; 000000b1H
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@
  00063	e8 00 00 00 00	 call	 __assert
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1344:

; 178  :   assert(log2N>0);

  0006b	83 7d 0c 00	 cmp	 DWORD PTR _log2N$[ebp], 0
  0006f	7f 17		 jg	 SHORT $L1345
  00071	68 b2 00 00 00	 push	 178			; 000000b2H
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  0007b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CEAPKMAN@log2N?$DO0?$AA@
  00080	e8 00 00 00 00	 call	 __assert
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1345:

; 179  :   
; 180  :   BitRev(pfInOut, (N>>1));

  00088	8b 55 fc	 mov	 edx, DWORD PTR _N$[ebp]
  0008b	d1 fa		 sar	 edx, 1
  0008d	52		 push	 edx
  0008e	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _BitRev@8

; 181  :   
; 182  :   Fft(pfInOut, (log2N-1));

  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  0009a	83 e9 01	 sub	 ecx, 1
  0009d	51		 push	 ecx
  0009e	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 _Fft@8

; 183  : 
; 184  :   Unpack(pfInOut, log2N);

  000a7	8b 45 0c	 mov	 eax, DWORD PTR _log2N$[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _Unpack@8

; 185  : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 08 00	 ret	 8
_RealFft@8 ENDP
_TEXT	ENDS
PUBLIC	_RealInverseFft@12
PUBLIC	??_C@_0L@NCFOKDCF@log2N?5?$DO?$DN?53?$AA@	; `string'
PUBLIC	__real@3f800000
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0L@NCFOKDCF@log2N?5?$DO?$DN?53?$AA@
CONST	SEGMENT
??_C@_0L@NCFOKDCF@log2N?5?$DO?$DN?53?$AA@ DB 'log2N >= 3', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _RealInverseFft@12
_TEXT	SEGMENT
_N_2$ = -16
_N$ = -12
_fScale$ = -8
_i$ = -4
_pfInOut$ = 8
_log2N$ = 12
_iFlags$ = 16
_RealInverseFft@12 PROC NEAR				; COMDAT

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 228  :    int   i,
; 229  :          N,
; 230  :          N_2;
; 231  : 
; 232  :    float fScale;
; 233  :    
; 234  :    N = 1 << log2N;

  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  0000e	d3 e0		 shl	 eax, cl
  00010	89 45 f4	 mov	 DWORD PTR _N$[ebp], eax

; 235  : 
; 236  :    assert (pfInOut != NULL);

  00013	83 7d 08 00	 cmp	 DWORD PTR _pfInOut$[ebp], 0
  00017	75 17		 jne	 SHORT $L1349
  00019	68 ec 00 00 00	 push	 236			; 000000ecH
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
  00028	e8 00 00 00 00	 call	 __assert
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1349:

; 237  :    assert (N >= 8);

  00030	83 7d f4 08	 cmp	 DWORD PTR _N$[ebp], 8
  00034	7d 17		 jge	 SHORT $L1350
  00036	68 ed 00 00 00	 push	 237			; 000000edH
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@
  00045	e8 00 00 00 00	 call	 __assert
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1350:

; 238  :    assert (N <= TWIDDLE_PERIOD);

  0004d	81 7d f4 00 02
	00 00		 cmp	 DWORD PTR _N$[ebp], 512	; 00000200H
  00054	76 17		 jbe	 SHORT $L1351
  00056	68 ee 00 00 00	 push	 238			; 000000eeH
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@
  00065	e8 00 00 00 00	 call	 __assert
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1351:

; 239  :    assert (log2N >= 3);

  0006d	83 7d 0c 03	 cmp	 DWORD PTR _log2N$[ebp], 3
  00071	7d 17		 jge	 SHORT $L1352
  00073	68 ef 00 00 00	 push	 239			; 000000efH
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@NCFOKDCF@log2N?5?$DO?$DN?53?$AA@
  00082	e8 00 00 00 00	 call	 __assert
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1352:

; 240  : 
; 241  :    InverseUnpack(pfInOut, log2N);

  0008a	8b 55 0c	 mov	 edx, DWORD PTR _log2N$[ebp]
  0008d	52		 push	 edx
  0008e	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _InverseUnpack@8

; 242  : 
; 243  :    N_2 = N>>1;

  00097	8b 4d f4	 mov	 ecx, DWORD PTR _N$[ebp]
  0009a	d1 f9		 sar	 ecx, 1
  0009c	89 4d f0	 mov	 DWORD PTR _N_2$[ebp], ecx

; 244  : 
; 245  :    BitRev(pfInOut, N_2);

  0009f	8b 55 f0	 mov	 edx, DWORD PTR _N_2$[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _BitRev@8

; 246  :    InverseFft(pfInOut, log2N-1);

  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  000af	83 e9 01	 sub	 ecx, 1
  000b2	51		 push	 ecx
  000b3	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 _InverseFft@8

; 247  : 
; 248  :    if ((iFlags & IFFT_NO_SCALE_FLAG) == 0)

  000bc	8b 45 10	 mov	 eax, DWORD PTR _iFlags$[ebp]
  000bf	83 e0 08	 and	 eax, 8
  000c2	85 c0		 test	 eax, eax
  000c4	75 3d		 jne	 SHORT $L1112

; 249  :    {
; 250  :       /***** then do the scaling *****/
; 251  :      fScale = 1.0F / (float)N;

  000c6	db 45 f4	 fild	 DWORD PTR _N$[ebp]
  000c9	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  000cf	d9 5d f8	 fstp	 DWORD PTR _fScale$[ebp]

; 252  :      for (i = 0; i < N; i++)

  000d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d9	eb 09		 jmp	 SHORT $L1126
$L1127:
  000db	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000de	83 c1 01	 add	 ecx, 1
  000e1	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L1126:
  000e4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000e7	3b 55 f4	 cmp	 edx, DWORD PTR _N$[ebp]
  000ea	7d 17		 jge	 SHORT $L1112

; 253  :        pfInOut[i] *= fScale;

  000ec	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  000f2	d9 45 f8	 fld	 DWORD PTR _fScale$[ebp]
  000f5	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  000f8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000fb	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  000fe	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]
  00101	eb d8		 jmp	 SHORT $L1127
$L1112:

; 254  :    }
; 255  :     
; 256  : }

  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 0c 00	 ret	 12			; 0000000cH
_RealInverseFft@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_06OODMLIBP@N?5?$DO?$DN?54?$AA@		; `string'
PUBLIC	??_C@_0BG@GHLNHKEE@N?5?$DM?$DN?5TWIDDLE_PERIOD?12?$AA@ ; `string'
PUBLIC	??_C@_0L@MLEFJCGE@log2N?5?$DO?$DN?52?$AA@	; `string'
PUBLIC	??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@ ; `string'
PUBLIC	??_C@_0N@OJNBHKGE@iWIndex?5?$DO?$DN?50?$AA@	; `string'
;	COMDAT ??_C@_06OODMLIBP@N?5?$DO?$DN?54?$AA@
CONST	SEGMENT
??_C@_06OODMLIBP@N?5?$DO?$DN?54?$AA@ DB 'N >= 4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GHLNHKEE@N?5?$DM?$DN?5TWIDDLE_PERIOD?12?$AA@
CONST	SEGMENT
??_C@_0BG@GHLNHKEE@N?5?$DM?$DN?5TWIDDLE_PERIOD?12?$AA@ DB 'N <= TWIDDLE_P'
	DB	'ERIOD/2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MLEFJCGE@log2N?5?$DO?$DN?52?$AA@
CONST	SEGMENT
??_C@_0L@MLEFJCGE@log2N?5?$DO?$DN?52?$AA@ DB 'log2N >= 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@
CONST	SEGMENT
??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@ DB 'iWIndex'
	DB	' <= TWIDDLE_TABLE_SIZE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJNBHKGE@iWIndex?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0N@OJNBHKGE@iWIndex?5?$DO?$DN?50?$AA@ DB 'iWIndex >= 0', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _Fft@8
_TEXT	SEGMENT
_j$ = -76
_iWIndex$ = -72
_pfBase$ = -68
_c$ = -64
_d$ = -60
_pfQReal$ = -56
_pfWImag$ = -52
_iWInc$ = -48
_pfQImag$ = -44
_b$ = -40
_N$ = -36
_pfPImag$ = -32
_iStage$ = -28
_pfPReal$ = -24
_iButterflySep$ = -20
_pfWReal$ = -16
_i$ = -12
_a$ = -8
_iGroupsPerStage$ = -4
_pfInOut$ = 8
_log2N$ = 12
_Fft@8	PROC NEAR					; COMDAT

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH

; 299  : 
; 300  :   float        *pfBase,
; 301  :                *pfPReal,
; 302  :                *pfPImag,
; 303  :                *pfQReal,
; 304  :                *pfQImag;
; 305  : 
; 306  :   const float  *pfWReal,
; 307  :                *pfWImag;
; 308  : 
; 309  :   int          iWInc,
; 310  :                iWIndex,
; 311  :                iButterflySep,
; 312  :                iGroupsPerStage;
; 313  :   int          i,
; 314  :                iStage,
; 315  :                j;
; 316  :   float        a, b, c, d;
; 317  :   int          N;
; 318  :   
; 319  :   N = 1<<log2N;

  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  0000e	d3 e0		 shl	 eax, cl
  00010	89 45 dc	 mov	 DWORD PTR _N$[ebp], eax

; 320  : 
; 321  :    /*
; 322  :    ** The first couple of stages I can save significant complexity by
; 323  :    ** taking advantage of the fact that pfWReal[iWIndex] and pfWImag[iWIndex]
; 324  :    ** have a lot of nice values for the first couple stages (0, +1, -1)
; 325  :    */
; 326  : 
; 327  :   assert(pfInOut != NULL);

  00013	83 7d 08 00	 cmp	 DWORD PTR _pfInOut$[ebp], 0
  00017	75 17		 jne	 SHORT $L1359
  00019	68 47 01 00 00	 push	 327			; 00000147H
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
  00028	e8 00 00 00 00	 call	 __assert
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1359:

; 328  :   assert(N >= 4);

  00030	83 7d dc 04	 cmp	 DWORD PTR _N$[ebp], 4
  00034	7d 17		 jge	 SHORT $L1360
  00036	68 48 01 00 00	 push	 328			; 00000148H
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06OODMLIBP@N?5?$DO?$DN?54?$AA@
  00045	e8 00 00 00 00	 call	 __assert
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1360:

; 329  :   assert(N <= TWIDDLE_PERIOD/2);

  0004d	81 7d dc 00 01
	00 00		 cmp	 DWORD PTR _N$[ebp], 256	; 00000100H
  00054	76 17		 jbe	 SHORT $L1361
  00056	68 49 01 00 00	 push	 329			; 00000149H
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@GHLNHKEE@N?5?$DM?$DN?5TWIDDLE_PERIOD?12?$AA@
  00065	e8 00 00 00 00	 call	 __assert
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1361:

; 330  :   assert(log2N >= 2);

  0006d	83 7d 0c 02	 cmp	 DWORD PTR _log2N$[ebp], 2
  00071	7d 17		 jge	 SHORT $L1362
  00073	68 4a 01 00 00	 push	 330			; 0000014aH
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MLEFJCGE@log2N?5?$DO?$DN?52?$AA@
  00082	e8 00 00 00 00	 call	 __assert
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1362:

; 331  :   
; 332  :    /************
; 333  :    *************
; 334  :    **         **
; 335  :    ** Stage 1 **
; 336  :    **         **
; 337  :    *************
; 338  :    ************/
; 339  :    pfBase = pfInOut;

  0008a	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0008d	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 340  :    for (i = (N>>1); i > 0; i--)

  00090	8b 45 dc	 mov	 eax, DWORD PTR _N$[ebp]
  00093	d1 f8		 sar	 eax, 1
  00095	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  00098	eb 09		 jmp	 SHORT $L1162
$L1163:
  0009a	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0009d	83 e9 01	 sub	 ecx, 1
  000a0	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L1162:
  000a3	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  000a7	0f 8e 83 00 00
	00		 jle	 $L1164

; 341  :    {
; 342  :       pfPReal = pfBase;

  000ad	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  000b0	89 55 e8	 mov	 DWORD PTR _pfPReal$[ebp], edx

; 343  :       pfPImag = pfPReal + 1;

  000b3	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  000b6	83 c0 04	 add	 eax, 4
  000b9	89 45 e0	 mov	 DWORD PTR _pfPImag$[ebp], eax

; 344  :       pfQReal = pfPReal + 2;

  000bc	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  000bf	83 c1 08	 add	 ecx, 8
  000c2	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 345  :       pfQImag = pfQReal + 1;

  000c5	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  000c8	83 c2 04	 add	 edx, 4
  000cb	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 346  : 
; 347  :       /* Calculate cross terms in butterfly (W * Q) */
; 348  : 
; 349  :       a = (*pfPReal) - (*pfQReal);

  000ce	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  000d1	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  000d4	d9 00		 fld	 DWORD PTR [eax]
  000d6	d8 21		 fsub	 DWORD PTR [ecx]
  000d8	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 350  :       b = (*pfPReal) + (*pfQReal);

  000db	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  000de	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  000e1	d9 02		 fld	 DWORD PTR [edx]
  000e3	d8 00		 fadd	 DWORD PTR [eax]
  000e5	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 351  :       c = (*pfPImag) - (*pfQImag);

  000e8	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  000eb	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  000ee	d9 01		 fld	 DWORD PTR [ecx]
  000f0	d8 22		 fsub	 DWORD PTR [edx]
  000f2	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 352  :       d = (*pfPImag) + (*pfQImag);

  000f5	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  000f8	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  000fb	d9 00		 fld	 DWORD PTR [eax]
  000fd	d8 01		 fadd	 DWORD PTR [ecx]
  000ff	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 353  : 
; 354  :       *pfQReal = a;

  00102	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00105	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00108	89 02		 mov	 DWORD PTR [edx], eax

; 355  :       *pfPReal = b;

  0010a	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  0010d	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  00110	89 11		 mov	 DWORD PTR [ecx], edx

; 356  :       *pfQImag = c;

  00112	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  00115	8b 4d c0	 mov	 ecx, DWORD PTR _c$[ebp]
  00118	89 08		 mov	 DWORD PTR [eax], ecx

; 357  :       *pfPImag = d;

  0011a	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  0011d	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  00120	89 02		 mov	 DWORD PTR [edx], eax

; 358  : 
; 359  :       pfBase += 4;  /* Move ahead to next butterfly */

  00122	8b 4d bc	 mov	 ecx, DWORD PTR _pfBase$[ebp]
  00125	83 c1 10	 add	 ecx, 16			; 00000010H
  00128	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 360  :    }

  0012b	e9 6a ff ff ff	 jmp	 $L1163
$L1164:

; 361  : 
; 362  : 
; 363  :    /************
; 364  :    *************
; 365  :    **         **
; 366  :    ** Stage 2 **
; 367  :    **         **
; 368  :    *************
; 369  :    ************/
; 370  :    pfBase = pfInOut;

  00130	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00133	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 371  :    for (i = (N>>2); i > 0; i--)

  00136	8b 45 dc	 mov	 eax, DWORD PTR _N$[ebp]
  00139	c1 f8 02	 sar	 eax, 2
  0013c	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  0013f	eb 09		 jmp	 SHORT $L1165
$L1166:
  00141	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00144	83 e9 01	 sub	 ecx, 1
  00147	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L1165:
  0014a	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  0014e	0f 8e 01 01 00
	00		 jle	 $L1167

; 372  :    {
; 373  :       pfPReal = pfBase;

  00154	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  00157	89 55 e8	 mov	 DWORD PTR _pfPReal$[ebp], edx

; 374  :       pfPImag = pfPReal + 1;

  0015a	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  0015d	83 c0 04	 add	 eax, 4
  00160	89 45 e0	 mov	 DWORD PTR _pfPImag$[ebp], eax

; 375  :       pfQReal = pfPReal + 4;

  00163	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  00166	83 c1 10	 add	 ecx, 16			; 00000010H
  00169	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 376  :       pfQImag = pfQReal + 1;

  0016c	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  0016f	83 c2 04	 add	 edx, 4
  00172	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 377  : 
; 378  :       /* Calculate cross terms in butterfly (W * Q) */
; 379  :       a = (*pfPReal) - (*pfQReal); 

  00175	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  00178	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  0017b	d9 00		 fld	 DWORD PTR [eax]
  0017d	d8 21		 fsub	 DWORD PTR [ecx]
  0017f	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 380  :       b = (*pfPReal) + (*pfQReal);     

  00182	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  00185	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  00188	d9 02		 fld	 DWORD PTR [edx]
  0018a	d8 00		 fadd	 DWORD PTR [eax]
  0018c	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 381  :       c = (*pfPImag) - (*pfQImag);       

  0018f	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  00192	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  00195	d9 01		 fld	 DWORD PTR [ecx]
  00197	d8 22		 fsub	 DWORD PTR [edx]
  00199	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 382  :       d = (*pfPImag) + (*pfQImag); 

  0019c	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  0019f	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  001a2	d9 00		 fld	 DWORD PTR [eax]
  001a4	d8 01		 fadd	 DWORD PTR [ecx]
  001a6	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 383  : 
; 384  :       *pfQReal = a; 

  001a9	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  001ac	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  001af	89 02		 mov	 DWORD PTR [edx], eax

; 385  :       *pfPReal = b;

  001b1	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  001b4	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  001b7	89 11		 mov	 DWORD PTR [ecx], edx

; 386  :       *pfQImag = c;

  001b9	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  001bc	8b 4d c0	 mov	 ecx, DWORD PTR _c$[ebp]
  001bf	89 08		 mov	 DWORD PTR [eax], ecx

; 387  :       *pfPImag = d;

  001c1	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  001c4	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  001c7	89 02		 mov	 DWORD PTR [edx], eax

; 388  : 
; 389  :       pfBase += 2;  /* Move ahead to next butterfly */

  001c9	8b 4d bc	 mov	 ecx, DWORD PTR _pfBase$[ebp]
  001cc	83 c1 08	 add	 ecx, 8
  001cf	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 390  : 
; 391  :       pfPReal = pfBase;

  001d2	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  001d5	89 55 e8	 mov	 DWORD PTR _pfPReal$[ebp], edx

; 392  :       pfPImag = pfPReal + 1;

  001d8	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  001db	83 c0 04	 add	 eax, 4
  001de	89 45 e0	 mov	 DWORD PTR _pfPImag$[ebp], eax

; 393  :       pfQReal = pfPReal + 4;

  001e1	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  001e4	83 c1 10	 add	 ecx, 16			; 00000010H
  001e7	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 394  :       pfQImag = pfQReal + 1;

  001ea	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  001ed	83 c2 04	 add	 edx, 4
  001f0	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 395  : 
; 396  :       /* Calculate cross terms in butterfly (W * Q) */
; 397  :       a = (*pfPReal) - (*pfQImag);

  001f3	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  001f6	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  001f9	d9 00		 fld	 DWORD PTR [eax]
  001fb	d8 21		 fsub	 DWORD PTR [ecx]
  001fd	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 398  :       b = (*pfPReal) + (*pfQImag);

  00200	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  00203	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  00206	d9 02		 fld	 DWORD PTR [edx]
  00208	d8 00		 fadd	 DWORD PTR [eax]
  0020a	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 399  :       c = (*pfPImag) + (*pfQReal);

  0020d	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  00210	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00213	d9 01		 fld	 DWORD PTR [ecx]
  00215	d8 02		 fadd	 DWORD PTR [edx]
  00217	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 400  :       d = (*pfPImag) - (*pfQReal);

  0021a	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  0021d	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00220	d9 00		 fld	 DWORD PTR [eax]
  00222	d8 21		 fsub	 DWORD PTR [ecx]
  00224	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 401  : 
; 402  :       *pfQReal = a;

  00227	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  0022a	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  0022d	89 02		 mov	 DWORD PTR [edx], eax

; 403  :       *pfPReal = b;

  0022f	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  00232	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  00235	89 11		 mov	 DWORD PTR [ecx], edx

; 404  :       *pfQImag = c;

  00237	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  0023a	8b 4d c0	 mov	 ecx, DWORD PTR _c$[ebp]
  0023d	89 08		 mov	 DWORD PTR [eax], ecx

; 405  :       *pfPImag = d;

  0023f	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  00242	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  00245	89 02		 mov	 DWORD PTR [edx], eax

; 406  : 
; 407  :       pfBase += 6;  /* Move ahead to next group */

  00247	8b 4d bc	 mov	 ecx, DWORD PTR _pfBase$[ebp]
  0024a	83 c1 18	 add	 ecx, 24			; 00000018H
  0024d	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 408  :    }

  00250	e9 ec fe ff ff	 jmp	 $L1166
$L1167:

; 409  : 
; 410  : 
; 411  :    /*********************
; 412  :    **********************
; 413  :    **                  **
; 414  :    ** Stage 3 to log2N **
; 415  :    **                  **
; 416  :    **********************
; 417  :    *********************/
; 418  :    iWInc = STAGE_3_TWIDDLE_INC;

  00255	c7 45 d0 40 00
	00 00		 mov	 DWORD PTR _iWInc$[ebp], 64 ; 00000040H

; 419  :    iButterflySep = 4;

  0025c	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _iButterflySep$[ebp], 4

; 420  :    iGroupsPerStage = N>>3;

  00263	8b 55 dc	 mov	 edx, DWORD PTR _N$[ebp]
  00266	c1 fa 03	 sar	 edx, 3
  00269	89 55 fc	 mov	 DWORD PTR _iGroupsPerStage$[ebp], edx

; 421  :    pfWReal = cos0Index;

  0026c	a1 00 00 00 00	 mov	 eax, DWORD PTR _cos0Index
  00271	89 45 f0	 mov	 DWORD PTR _pfWReal$[ebp], eax

; 422  :    pfWImag = sin0Index;

  00274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sin0Index
  0027a	89 4d cc	 mov	 DWORD PTR _pfWImag$[ebp], ecx

; 423  :    iWIndex = 0;

  0027d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iWIndex$[ebp], 0

; 424  : 
; 425  :    for (iStage = 3; iStage <= log2N; iStage++)

  00284	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _iStage$[ebp], 3
  0028b	eb 09		 jmp	 SHORT $L1169
$L1170:
  0028d	8b 55 e4	 mov	 edx, DWORD PTR _iStage$[ebp]
  00290	83 c2 01	 add	 edx, 1
  00293	89 55 e4	 mov	 DWORD PTR _iStage$[ebp], edx
$L1169:
  00296	8b 45 e4	 mov	 eax, DWORD PTR _iStage$[ebp]
  00299	3b 45 0c	 cmp	 eax, DWORD PTR _log2N$[ebp]
  0029c	0f 8f 99 02 00
	00		 jg	 $L1133

; 426  :    {
; 427  :       pfBase = pfInOut;

  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  002a5	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 428  :       for (j = 0; j < iGroupsPerStage; j++)

  002a8	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  002af	eb 09		 jmp	 SHORT $L1172
$L1173:
  002b1	8b 55 b4	 mov	 edx, DWORD PTR _j$[ebp]
  002b4	83 c2 01	 add	 edx, 1
  002b7	89 55 b4	 mov	 DWORD PTR _j$[ebp], edx
$L1172:
  002ba	8b 45 b4	 mov	 eax, DWORD PTR _j$[ebp]
  002bd	3b 45 fc	 cmp	 eax, DWORD PTR _iGroupsPerStage$[ebp]
  002c0	0f 8d 58 02 00
	00		 jge	 $L1174

; 429  :       {
; 430  :          for (i = (iButterflySep>>1); i > 0; i--)

  002c6	8b 4d ec	 mov	 ecx, DWORD PTR _iButterflySep$[ebp]
  002c9	d1 f9		 sar	 ecx, 1
  002cb	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
  002ce	eb 09		 jmp	 SHORT $L1175
$L1176:
  002d0	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  002d3	83 ea 01	 sub	 edx, 1
  002d6	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L1175:
  002d9	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  002dd	0f 8e f7 00 00
	00		 jle	 $L1177

; 431  :          {
; 432  :             pfPReal = pfBase;

  002e3	8b 45 bc	 mov	 eax, DWORD PTR _pfBase$[ebp]
  002e6	89 45 e8	 mov	 DWORD PTR _pfPReal$[ebp], eax

; 433  :             pfPImag = pfPReal + 1;

  002e9	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  002ec	83 c1 04	 add	 ecx, 4
  002ef	89 4d e0	 mov	 DWORD PTR _pfPImag$[ebp], ecx

; 434  :             pfQReal = pfPReal + (iButterflySep<<1);

  002f2	8b 55 ec	 mov	 edx, DWORD PTR _iButterflySep$[ebp]
  002f5	d1 e2		 shl	 edx, 1
  002f7	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  002fa	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  002fd	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 435  :             pfQImag = pfQReal + 1;

  00300	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00303	83 c2 04	 add	 edx, 4
  00306	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 436  : 
; 437  :             /* Calculate cross terms in butterfly (W * Q) */            
; 438  :             a = (*pfQReal) * pfWReal[-iWIndex]; 

  00309	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  0030c	f7 d8		 neg	 eax
  0030e	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00311	8b 55 f0	 mov	 edx, DWORD PTR _pfWReal$[ebp]
  00314	d9 01		 fld	 DWORD PTR [ecx]
  00316	d8 0c 82	 fmul	 DWORD PTR [edx+eax*4]
  00319	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 439  :             b = (*pfQReal) * pfWImag[iWIndex];

  0031c	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  0031f	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  00322	8b 55 cc	 mov	 edx, DWORD PTR _pfWImag$[ebp]
  00325	d9 00		 fld	 DWORD PTR [eax]
  00327	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  0032a	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 440  :             
; 441  :             a += (*pfQImag) * pfWImag[iWIndex];

  0032d	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  00330	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  00333	8b 55 cc	 mov	 edx, DWORD PTR _pfWImag$[ebp]
  00336	d9 00		 fld	 DWORD PTR [eax]
  00338	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  0033b	d8 45 f8	 fadd	 DWORD PTR _a$[ebp]
  0033e	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 442  :             b -= (*pfQImag) * pfWReal[-iWIndex];

  00341	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  00344	f7 d8		 neg	 eax
  00346	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  00349	8b 55 f0	 mov	 edx, DWORD PTR _pfWReal$[ebp]
  0034c	d9 01		 fld	 DWORD PTR [ecx]
  0034e	d8 0c 82	 fmul	 DWORD PTR [edx+eax*4]
  00351	d8 6d d8	 fsubr	 DWORD PTR _b$[ebp]
  00354	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 443  :            
; 444  :             c = (*pfPReal) - a;             /* c==>*pfQReal */

  00357	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  0035a	d9 00		 fld	 DWORD PTR [eax]
  0035c	d8 65 f8	 fsub	 DWORD PTR _a$[ebp]
  0035f	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 445  :             a = (*pfPReal) + a;             /* a==>*pfPReal */

  00362	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  00365	d9 45 f8	 fld	 DWORD PTR _a$[ebp]
  00368	d8 01		 fadd	 DWORD PTR [ecx]
  0036a	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 446  : 
; 447  :             d = (*pfPImag) + b;             /* d==>*pfQImag */

  0036d	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  00370	d9 45 d8	 fld	 DWORD PTR _b$[ebp]
  00373	d8 02		 fadd	 DWORD PTR [edx]
  00375	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 448  :             b = (*pfPImag) - b;             /* b==>*pfPImag */

  00378	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  0037b	d9 00		 fld	 DWORD PTR [eax]
  0037d	d8 65 d8	 fsub	 DWORD PTR _b$[ebp]
  00380	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 449  : 
; 450  :             *pfQReal = c;

  00383	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00386	8b 55 c0	 mov	 edx, DWORD PTR _c$[ebp]
  00389	89 11		 mov	 DWORD PTR [ecx], edx

; 451  :             *pfPReal = a;

  0038b	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  0038e	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  00391	89 08		 mov	 DWORD PTR [eax], ecx

; 452  :             *pfQImag = d;

  00393	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  00396	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  00399	89 02		 mov	 DWORD PTR [edx], eax

; 453  :             *pfPImag = b;

  0039b	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  0039e	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  003a1	89 11		 mov	 DWORD PTR [ecx], edx

; 454  : 
; 455  :             /* Modulo addressing */
; 456  :             assert(iWIndex <= TWIDDLE_TABLE_SIZE);

  003a3	81 7d b8 81 00
	00 00		 cmp	 DWORD PTR _iWIndex$[ebp], 129 ; 00000081H
  003aa	76 17		 jbe	 SHORT $L1363
  003ac	68 c8 01 00 00	 push	 456			; 000001c8H
  003b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  003b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@
  003bb	e8 00 00 00 00	 call	 __assert
  003c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1363:

; 457  :             iWIndex = (iWIndex + iWInc);

  003c3	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  003c6	03 4d d0	 add	 ecx, DWORD PTR _iWInc$[ebp]
  003c9	89 4d b8	 mov	 DWORD PTR _iWIndex$[ebp], ecx

; 458  :             pfBase += 2;  /* Move ahead to next butterfly */

  003cc	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  003cf	83 c2 08	 add	 edx, 8
  003d2	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 459  :          }

  003d5	e9 f6 fe ff ff	 jmp	 $L1176
$L1177:

; 460  : 
; 461  :          for (i = (iButterflySep>>1); i > 0; i--)

  003da	8b 45 ec	 mov	 eax, DWORD PTR _iButterflySep$[ebp]
  003dd	d1 f8		 sar	 eax, 1
  003df	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  003e2	eb 09		 jmp	 SHORT $L1181
$L1182:
  003e4	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  003e7	83 e9 01	 sub	 ecx, 1
  003ea	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L1181:
  003ed	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  003f1	0f 8e 14 01 00
	00		 jle	 $L1183

; 462  :          {
; 463  :             pfPReal = pfBase;

  003f7	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  003fa	89 55 e8	 mov	 DWORD PTR _pfPReal$[ebp], edx

; 464  :             pfPImag = pfPReal + 1;

  003fd	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  00400	83 c0 04	 add	 eax, 4
  00403	89 45 e0	 mov	 DWORD PTR _pfPImag$[ebp], eax

; 465  :             pfQReal = pfPReal + (iButterflySep<<1);

  00406	8b 4d ec	 mov	 ecx, DWORD PTR _iButterflySep$[ebp]
  00409	d1 e1		 shl	 ecx, 1
  0040b	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  0040e	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00411	89 45 c8	 mov	 DWORD PTR _pfQReal$[ebp], eax

; 466  :             pfQImag = pfQReal + 1;

  00414	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00417	83 c1 04	 add	 ecx, 4
  0041a	89 4d d4	 mov	 DWORD PTR _pfQImag$[ebp], ecx

; 467  : 
; 468  :             /* Calculate cross terms in butterfly (W * Q) */
; 469  :             a = (*pfQReal) * pfWReal[-iWIndex]; 

  0041d	8b 55 b8	 mov	 edx, DWORD PTR _iWIndex$[ebp]
  00420	f7 da		 neg	 edx
  00422	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  00425	8b 4d f0	 mov	 ecx, DWORD PTR _pfWReal$[ebp]
  00428	d9 00		 fld	 DWORD PTR [eax]
  0042a	d8 0c 91	 fmul	 DWORD PTR [ecx+edx*4]
  0042d	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 470  :             b = (*pfQReal) * pfWImag[iWIndex];

  00430	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00433	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  00436	8b 4d cc	 mov	 ecx, DWORD PTR _pfWImag$[ebp]
  00439	d9 02		 fld	 DWORD PTR [edx]
  0043b	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0043e	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 471  :             
; 472  :             a -= (*pfQImag) * pfWImag[iWIndex];

  00441	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  00444	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  00447	8b 4d cc	 mov	 ecx, DWORD PTR _pfWImag$[ebp]
  0044a	d9 02		 fld	 DWORD PTR [edx]
  0044c	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0044f	d8 6d f8	 fsubr	 DWORD PTR _a$[ebp]
  00452	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 473  :             b += (*pfQImag) * pfWReal[-iWIndex];

  00455	8b 55 b8	 mov	 edx, DWORD PTR _iWIndex$[ebp]
  00458	f7 da		 neg	 edx
  0045a	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  0045d	8b 4d f0	 mov	 ecx, DWORD PTR _pfWReal$[ebp]
  00460	d9 00		 fld	 DWORD PTR [eax]
  00462	d8 0c 91	 fmul	 DWORD PTR [ecx+edx*4]
  00465	d8 45 d8	 fadd	 DWORD PTR _b$[ebp]
  00468	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 474  :            
; 475  :             c = (*pfPReal) + a;       /* c==>*pfQReal */

  0046b	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  0046e	d9 45 f8	 fld	 DWORD PTR _a$[ebp]
  00471	d8 02		 fadd	 DWORD PTR [edx]
  00473	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 476  :             a = (*pfPReal) - a;       /* a==>*pfPReal */

  00476	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  00479	d9 00		 fld	 DWORD PTR [eax]
  0047b	d8 65 f8	 fsub	 DWORD PTR _a$[ebp]
  0047e	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 477  :             d = (*pfPImag) + b;       /* d==>*pfQImag */

  00481	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  00484	d9 45 d8	 fld	 DWORD PTR _b$[ebp]
  00487	d8 01		 fadd	 DWORD PTR [ecx]
  00489	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 478  :             b = (*pfPImag) - b;       /* b==>*pfPImag */

  0048c	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  0048f	d9 02		 fld	 DWORD PTR [edx]
  00491	d8 65 d8	 fsub	 DWORD PTR _b$[ebp]
  00494	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 479  : 
; 480  :             (*pfQReal) = c;

  00497	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  0049a	8b 4d c0	 mov	 ecx, DWORD PTR _c$[ebp]
  0049d	89 08		 mov	 DWORD PTR [eax], ecx

; 481  :             (*pfPReal) = a;

  0049f	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  004a2	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  004a5	89 02		 mov	 DWORD PTR [edx], eax

; 482  :             (*pfQImag) = d;

  004a7	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  004aa	8b 55 c4	 mov	 edx, DWORD PTR _d$[ebp]
  004ad	89 11		 mov	 DWORD PTR [ecx], edx

; 483  :             (*pfPImag) = b;

  004af	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  004b2	8b 4d d8	 mov	 ecx, DWORD PTR _b$[ebp]
  004b5	89 08		 mov	 DWORD PTR [eax], ecx

; 484  : 
; 485  :             /* Modulo addressing */
; 486  :             assert(iWIndex <= TWIDDLE_TABLE_SIZE);

  004b7	81 7d b8 81 00
	00 00		 cmp	 DWORD PTR _iWIndex$[ebp], 129 ; 00000081H
  004be	76 17		 jbe	 SHORT $L1364
  004c0	68 e6 01 00 00	 push	 486			; 000001e6H
  004c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  004ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@
  004cf	e8 00 00 00 00	 call	 __assert
  004d4	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1364:

; 487  :             assert(iWIndex >= 0);

  004d7	83 7d b8 00	 cmp	 DWORD PTR _iWIndex$[ebp], 0
  004db	7d 17		 jge	 SHORT $L1365
  004dd	68 e7 01 00 00	 push	 487			; 000001e7H
  004e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  004e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OJNBHKGE@iWIndex?5?$DO?$DN?50?$AA@
  004ec	e8 00 00 00 00	 call	 __assert
  004f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1365:

; 488  :             iWIndex = (iWIndex - iWInc);

  004f4	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  004f7	2b 4d d0	 sub	 ecx, DWORD PTR _iWInc$[ebp]
  004fa	89 4d b8	 mov	 DWORD PTR _iWIndex$[ebp], ecx

; 489  :             pfBase += 2;  /* Move ahead to next butterfly */

  004fd	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  00500	83 c2 08	 add	 edx, 8
  00503	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 490  :          }

  00506	e9 d9 fe ff ff	 jmp	 $L1182
$L1183:

; 491  : 
; 492  :         /* Prepare for next group in current iStage */
; 493  :          pfBase += (iButterflySep<<1);

  0050b	8b 45 ec	 mov	 eax, DWORD PTR _iButterflySep$[ebp]
  0050e	d1 e0		 shl	 eax, 1
  00510	8b 4d bc	 mov	 ecx, DWORD PTR _pfBase$[ebp]
  00513	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00516	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 494  :       }

  00519	e9 93 fd ff ff	 jmp	 $L1173
$L1174:

; 495  : 
; 496  :       /* Prepare for next iStage */
; 497  :       iButterflySep <<= 1;          /* iButterflySep *= 2   */

  0051e	8b 45 ec	 mov	 eax, DWORD PTR _iButterflySep$[ebp]
  00521	d1 e0		 shl	 eax, 1
  00523	89 45 ec	 mov	 DWORD PTR _iButterflySep$[ebp], eax

; 498  :       iWInc >>= 1;                  /* iWInc /= 2           */

  00526	8b 4d d0	 mov	 ecx, DWORD PTR _iWInc$[ebp]
  00529	d1 f9		 sar	 ecx, 1
  0052b	89 4d d0	 mov	 DWORD PTR _iWInc$[ebp], ecx

; 499  :       iGroupsPerStage >>= 1;        /* iGroupsPerStage /= 2 */

  0052e	8b 55 fc	 mov	 edx, DWORD PTR _iGroupsPerStage$[ebp]
  00531	d1 fa		 sar	 edx, 1
  00533	89 55 fc	 mov	 DWORD PTR _iGroupsPerStage$[ebp], edx

; 500  :    }

  00536	e9 52 fd ff ff	 jmp	 $L1170
$L1133:

; 501  : }

  0053b	8b e5		 mov	 esp, ebp
  0053d	5d		 pop	 ebp
  0053e	c2 08 00	 ret	 8
_Fft@8	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@JBNHLKIP@pfBase?5?$DM?$DN?5?$CIpfInOut?5?$CL?5?$CIN?5?$DM?$DM?51?$CJ?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0BP@JBNHLKIP@pfBase?5?$DM?$DN?5?$CIpfInOut?5?$CL?5?$CIN?5?$DM?$DM?51?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_0BP@JBNHLKIP@pfBase?5?$DM?$DN?5?$CIpfInOut?5?$CL?5?$CIN?5?$DM?$DM?51?$CJ?$CJ?$AA@ DB 'p'
	DB	'fBase <= (pfInOut + (N << 1))', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _InverseFft@8
_TEXT	SEGMENT
_j$ = -76
_iWIndex$ = -72
_pfBase$ = -68
_c$ = -64
_d$ = -60
_pfQReal$ = -56
_pfWImag$ = -52
_iWInc$ = -48
_pfQImag$ = -44
_b$ = -40
_N$ = -36
_pfPImag$ = -32
_iStage$ = -28
_pfPReal$ = -24
_iButterflySep$ = -20
_pfWReal$ = -16
_i$ = -12
_a$ = -8
_iGroupsPerStage$ = -4
_pfInOut$ = 8
_log2N$ = 12
_InverseFft@8 PROC NEAR					; COMDAT

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH

; 546  :    float       *pfBase,
; 547  :                *pfPReal,
; 548  :                *pfPImag,
; 549  :                *pfQReal,
; 550  :                *pfQImag;
; 551  : 
; 552  :    float       a, b, c, d;
; 553  : 
; 554  :    const float *pfWReal,
; 555  :                *pfWImag;
; 556  : 
; 557  :    int         iWInc,
; 558  :                iWIndex,
; 559  :                iButterflySep,
; 560  :                iGroupsPerStage;
; 561  : 
; 562  :    int         i,
; 563  :                iStage,
; 564  :                j;
; 565  : 
; 566  :    int         N;
; 567  : 
; 568  :    N = 1<<log2N;

  00006	b8 01 00 00 00	 mov	 eax, 1
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  0000e	d3 e0		 shl	 eax, cl
  00010	89 45 dc	 mov	 DWORD PTR _N$[ebp], eax

; 569  : 
; 570  :    assert(pfInOut != NULL);

  00013	83 7d 08 00	 cmp	 DWORD PTR _pfInOut$[ebp], 0
  00017	75 17		 jne	 SHORT $L1369
  00019	68 3a 02 00 00	 push	 570			; 0000023aH
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
  00028	e8 00 00 00 00	 call	 __assert
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1369:

; 571  :    assert(N >= 4);

  00030	83 7d dc 04	 cmp	 DWORD PTR _N$[ebp], 4
  00034	7d 17		 jge	 SHORT $L1370
  00036	68 3b 02 00 00	 push	 571			; 0000023bH
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06OODMLIBP@N?5?$DO?$DN?54?$AA@
  00045	e8 00 00 00 00	 call	 __assert
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1370:

; 572  :    assert(N <= TWIDDLE_PERIOD);

  0004d	81 7d dc 00 02
	00 00		 cmp	 DWORD PTR _N$[ebp], 512	; 00000200H
  00054	76 17		 jbe	 SHORT $L1371
  00056	68 3c 02 00 00	 push	 572			; 0000023cH
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@
  00065	e8 00 00 00 00	 call	 __assert
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1371:

; 573  :    assert(log2N >= 2);

  0006d	83 7d 0c 02	 cmp	 DWORD PTR _log2N$[ebp], 2
  00071	7d 17		 jge	 SHORT $L1372
  00073	68 3d 02 00 00	 push	 573			; 0000023dH
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MLEFJCGE@log2N?5?$DO?$DN?52?$AA@
  00082	e8 00 00 00 00	 call	 __assert
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1372:

; 574  : 
; 575  :    /*
; 576  :    ** The first couple of stages I can save significant complexity by
; 577  :    ** taking advantage of the fact that pfWReal[iWIndex] and pfWImag[iWIndex]
; 578  :    ** have a lot of nice values for the first couple stages (0, +1, -1)
; 579  :    */
; 580  : 
; 581  :    /************
; 582  :    *************
; 583  :    **         **
; 584  :    ** Stage 1 **
; 585  :    **         **
; 586  :    *************
; 587  :    ************/
; 588  :    pfBase = pfInOut;

  0008a	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0008d	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 589  :    for (i = 0; i < (N>>1); i++)

  00090	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00097	eb 09		 jmp	 SHORT $L1218
$L1219:
  00099	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0009c	83 c0 01	 add	 eax, 1
  0009f	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L1218:
  000a2	8b 4d dc	 mov	 ecx, DWORD PTR _N$[ebp]
  000a5	d1 f9		 sar	 ecx, 1
  000a7	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  000aa	0f 8d 83 00 00
	00		 jge	 $L1220

; 590  :    {
; 591  :       pfPReal = pfBase;

  000b0	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  000b3	89 55 e8	 mov	 DWORD PTR _pfPReal$[ebp], edx

; 592  :       pfPImag = pfPReal + 1;

  000b6	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  000b9	83 c0 04	 add	 eax, 4
  000bc	89 45 e0	 mov	 DWORD PTR _pfPImag$[ebp], eax

; 593  :       pfQReal = pfPReal + 2;

  000bf	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  000c2	83 c1 08	 add	 ecx, 8
  000c5	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 594  :       pfQImag = pfQReal + 1;

  000c8	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  000cb	83 c2 04	 add	 edx, 4
  000ce	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 595  : 
; 596  :       a = (*pfPReal) - (*pfQReal);

  000d1	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  000d4	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  000d7	d9 00		 fld	 DWORD PTR [eax]
  000d9	d8 21		 fsub	 DWORD PTR [ecx]
  000db	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 597  :       b = (*pfPReal) + (*pfQReal);

  000de	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  000e1	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  000e4	d9 02		 fld	 DWORD PTR [edx]
  000e6	d8 00		 fadd	 DWORD PTR [eax]
  000e8	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 598  :       c = (*pfPImag) - (*pfQImag);

  000eb	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  000ee	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  000f1	d9 01		 fld	 DWORD PTR [ecx]
  000f3	d8 22		 fsub	 DWORD PTR [edx]
  000f5	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 599  :       d = (*pfPImag) + (*pfQImag);

  000f8	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  000fb	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  000fe	d9 00		 fld	 DWORD PTR [eax]
  00100	d8 01		 fadd	 DWORD PTR [ecx]
  00102	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 600  : 
; 601  :       *pfQReal = a;

  00105	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00108	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  0010b	89 02		 mov	 DWORD PTR [edx], eax

; 602  :       *pfPReal = b;

  0010d	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  00110	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  00113	89 11		 mov	 DWORD PTR [ecx], edx

; 603  :       *pfQImag = c;

  00115	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  00118	8b 4d c0	 mov	 ecx, DWORD PTR _c$[ebp]
  0011b	89 08		 mov	 DWORD PTR [eax], ecx

; 604  :       *pfPImag = d;

  0011d	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  00120	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  00123	89 02		 mov	 DWORD PTR [edx], eax

; 605  :       pfBase += 4;  /* Move ahead to next butterfly */

  00125	8b 4d bc	 mov	 ecx, DWORD PTR _pfBase$[ebp]
  00128	83 c1 10	 add	 ecx, 16			; 00000010H
  0012b	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 606  :    }

  0012e	e9 66 ff ff ff	 jmp	 $L1219
$L1220:

; 607  :   
; 608  :    /************
; 609  :    *************
; 610  :    **         **
; 611  :    ** Stage 2 **
; 612  :    **         **
; 613  :    *************
; 614  :    ************/
; 615  :    pfBase = pfInOut;

  00133	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00136	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 616  :    for (i = 0; i < (N>>2); i++)

  00139	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00140	eb 09		 jmp	 SHORT $L1221
$L1222:
  00142	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00145	83 c0 01	 add	 eax, 1
  00148	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L1221:
  0014b	8b 4d dc	 mov	 ecx, DWORD PTR _N$[ebp]
  0014e	c1 f9 02	 sar	 ecx, 2
  00151	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  00154	0f 8d 01 01 00
	00		 jge	 $L1223

; 617  :    {
; 618  :       pfPReal = pfBase;

  0015a	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  0015d	89 55 e8	 mov	 DWORD PTR _pfPReal$[ebp], edx

; 619  :       pfPImag = pfPReal + 1;

  00160	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  00163	83 c0 04	 add	 eax, 4
  00166	89 45 e0	 mov	 DWORD PTR _pfPImag$[ebp], eax

; 620  :       pfQReal = pfPReal + 4;

  00169	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  0016c	83 c1 10	 add	 ecx, 16			; 00000010H
  0016f	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 621  :       pfQImag = pfQReal + 1;

  00172	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00175	83 c2 04	 add	 edx, 4
  00178	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 622  : 
; 623  :       /* Calculate cross terms in butterfly (W * Q) */    
; 624  :       a = (*pfPReal) - (*pfQReal); 

  0017b	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  0017e	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00181	d9 00		 fld	 DWORD PTR [eax]
  00183	d8 21		 fsub	 DWORD PTR [ecx]
  00185	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 625  :       b = (*pfPReal) + (*pfQReal);     

  00188	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  0018b	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  0018e	d9 02		 fld	 DWORD PTR [edx]
  00190	d8 00		 fadd	 DWORD PTR [eax]
  00192	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 626  :       c = (*pfPImag) - (*pfQImag);       

  00195	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  00198	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  0019b	d9 01		 fld	 DWORD PTR [ecx]
  0019d	d8 22		 fsub	 DWORD PTR [edx]
  0019f	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 627  :       d = (*pfPImag) + (*pfQImag); 

  001a2	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  001a5	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  001a8	d9 00		 fld	 DWORD PTR [eax]
  001aa	d8 01		 fadd	 DWORD PTR [ecx]
  001ac	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 628  : 
; 629  :       (*pfQReal) = a;

  001af	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  001b2	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  001b5	89 02		 mov	 DWORD PTR [edx], eax

; 630  :       (*pfPReal) = b;

  001b7	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  001ba	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  001bd	89 11		 mov	 DWORD PTR [ecx], edx

; 631  :       (*pfQImag) = c;

  001bf	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  001c2	8b 4d c0	 mov	 ecx, DWORD PTR _c$[ebp]
  001c5	89 08		 mov	 DWORD PTR [eax], ecx

; 632  :       (*pfPImag) = d;

  001c7	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  001ca	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  001cd	89 02		 mov	 DWORD PTR [edx], eax

; 633  :       
; 634  :       pfBase += 2;  /* Move ahead to next butterfly */

  001cf	8b 4d bc	 mov	 ecx, DWORD PTR _pfBase$[ebp]
  001d2	83 c1 08	 add	 ecx, 8
  001d5	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 635  : 
; 636  :       pfPReal = pfBase;

  001d8	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  001db	89 55 e8	 mov	 DWORD PTR _pfPReal$[ebp], edx

; 637  :       pfPImag = pfPReal + 1;

  001de	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  001e1	83 c0 04	 add	 eax, 4
  001e4	89 45 e0	 mov	 DWORD PTR _pfPImag$[ebp], eax

; 638  :       pfQReal = pfPReal + 4;

  001e7	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  001ea	83 c1 10	 add	 ecx, 16			; 00000010H
  001ed	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 639  :       pfQImag = pfQReal + 1;

  001f0	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  001f3	83 c2 04	 add	 edx, 4
  001f6	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 640  : 
; 641  :       /* Calculate cross terms in butterfly (W * Q) */
; 642  : 
; 643  : 
; 644  :       a = (*pfPReal) + (*pfQImag);

  001f9	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  001fc	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  001ff	d9 00		 fld	 DWORD PTR [eax]
  00201	d8 01		 fadd	 DWORD PTR [ecx]
  00203	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 645  :       b = (*pfPReal) - (*pfQImag);

  00206	8b 55 e8	 mov	 edx, DWORD PTR _pfPReal$[ebp]
  00209	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  0020c	d9 02		 fld	 DWORD PTR [edx]
  0020e	d8 20		 fsub	 DWORD PTR [eax]
  00210	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 646  :       c = (*pfPImag) - (*pfQReal);

  00213	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  00216	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00219	d9 01		 fld	 DWORD PTR [ecx]
  0021b	d8 22		 fsub	 DWORD PTR [edx]
  0021d	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 647  :       d = (*pfPImag) + (*pfQReal);

  00220	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  00223	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00226	d9 00		 fld	 DWORD PTR [eax]
  00228	d8 01		 fadd	 DWORD PTR [ecx]
  0022a	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 648  : 
; 649  :       *pfQReal = a;

  0022d	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00230	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  00233	89 02		 mov	 DWORD PTR [edx], eax

; 650  :       *pfPReal = b;

  00235	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  00238	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  0023b	89 11		 mov	 DWORD PTR [ecx], edx

; 651  :       *pfQImag = c;

  0023d	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  00240	8b 4d c0	 mov	 ecx, DWORD PTR _c$[ebp]
  00243	89 08		 mov	 DWORD PTR [eax], ecx

; 652  :       *pfPImag = d;

  00245	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  00248	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  0024b	89 02		 mov	 DWORD PTR [edx], eax

; 653  : 
; 654  :       pfBase += 6;  /* Move ahead to next group */

  0024d	8b 4d bc	 mov	 ecx, DWORD PTR _pfBase$[ebp]
  00250	83 c1 18	 add	 ecx, 24			; 00000018H
  00253	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 655  : 
; 656  :    }

  00256	e9 e7 fe ff ff	 jmp	 $L1222
$L1223:

; 657  :    
; 658  :    /*********************
; 659  :    **********************
; 660  :    **                  **
; 661  :    ** Stage 3 to log2N **
; 662  :    **                  **
; 663  :    **********************
; 664  :    *********************/
; 665  : 
; 666  :    iWInc = STAGE_3_TWIDDLE_INC;

  0025b	c7 45 d0 40 00
	00 00		 mov	 DWORD PTR _iWInc$[ebp], 64 ; 00000040H

; 667  :    iButterflySep = 4;

  00262	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _iButterflySep$[ebp], 4

; 668  :    iGroupsPerStage = N >> 3;

  00269	8b 55 dc	 mov	 edx, DWORD PTR _N$[ebp]
  0026c	c1 fa 03	 sar	 edx, 3
  0026f	89 55 fc	 mov	 DWORD PTR _iGroupsPerStage$[ebp], edx

; 669  :    iWIndex = 0;

  00272	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _iWIndex$[ebp], 0

; 670  :    pfWReal = cos0Index;

  00279	a1 00 00 00 00	 mov	 eax, DWORD PTR _cos0Index
  0027e	89 45 f0	 mov	 DWORD PTR _pfWReal$[ebp], eax

; 671  :    pfWImag = sin0Index;

  00281	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sin0Index
  00287	89 4d cc	 mov	 DWORD PTR _pfWImag$[ebp], ecx

; 672  :    
; 673  :    for (iStage = 3; iStage <= log2N; iStage++)

  0028a	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _iStage$[ebp], 3
  00291	eb 09		 jmp	 SHORT $L1225
$L1226:
  00293	8b 55 e4	 mov	 edx, DWORD PTR _iStage$[ebp]
  00296	83 c2 01	 add	 edx, 1
  00299	89 55 e4	 mov	 DWORD PTR _iStage$[ebp], edx
$L1225:
  0029c	8b 45 e4	 mov	 eax, DWORD PTR _iStage$[ebp]
  0029f	3b 45 0c	 cmp	 eax, DWORD PTR _log2N$[ebp]
  002a2	0f 8f c0 02 00
	00		 jg	 $L1192

; 674  :    {
; 675  :       pfBase = pfInOut;

  002a8	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  002ab	89 4d bc	 mov	 DWORD PTR _pfBase$[ebp], ecx

; 676  :       for (j = 0; j < iGroupsPerStage; j++)

  002ae	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  002b5	eb 09		 jmp	 SHORT $L1228
$L1229:
  002b7	8b 55 b4	 mov	 edx, DWORD PTR _j$[ebp]
  002ba	83 c2 01	 add	 edx, 1
  002bd	89 55 b4	 mov	 DWORD PTR _j$[ebp], edx
$L1228:
  002c0	8b 45 b4	 mov	 eax, DWORD PTR _j$[ebp]
  002c3	3b 45 fc	 cmp	 eax, DWORD PTR _iGroupsPerStage$[ebp]
  002c6	0f 8d 7f 02 00
	00		 jge	 $L1230

; 677  :       {
; 678  :          for (i = (iButterflySep>>1); i > 0; i--)

  002cc	8b 4d ec	 mov	 ecx, DWORD PTR _iButterflySep$[ebp]
  002cf	d1 f9		 sar	 ecx, 1
  002d1	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
  002d4	eb 09		 jmp	 SHORT $L1231
$L1232:
  002d6	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  002d9	83 ea 01	 sub	 edx, 1
  002dc	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L1231:
  002df	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  002e3	0f 8e f7 00 00
	00		 jle	 $L1233

; 679  :          {
; 680  :             pfPReal = pfBase;

  002e9	8b 45 bc	 mov	 eax, DWORD PTR _pfBase$[ebp]
  002ec	89 45 e8	 mov	 DWORD PTR _pfPReal$[ebp], eax

; 681  :             pfPImag = pfPReal + 1;

  002ef	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  002f2	83 c1 04	 add	 ecx, 4
  002f5	89 4d e0	 mov	 DWORD PTR _pfPImag$[ebp], ecx

; 682  :             pfQReal = pfPReal + (iButterflySep<<1);

  002f8	8b 55 ec	 mov	 edx, DWORD PTR _iButterflySep$[ebp]
  002fb	d1 e2		 shl	 edx, 1
  002fd	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  00300	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00303	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 683  :             pfQImag = pfQReal + 1;

  00306	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00309	83 c2 04	 add	 edx, 4
  0030c	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 684  : 
; 685  :             /* Calculate cross terms in butterfly (W * Q) */
; 686  :             a = (*pfQReal) * pfWReal[-iWIndex]; 

  0030f	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  00312	f7 d8		 neg	 eax
  00314	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00317	8b 55 f0	 mov	 edx, DWORD PTR _pfWReal$[ebp]
  0031a	d9 01		 fld	 DWORD PTR [ecx]
  0031c	d8 0c 82	 fmul	 DWORD PTR [edx+eax*4]
  0031f	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 687  :             b = (*pfQReal) * pfWImag[iWIndex];

  00322	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  00325	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  00328	8b 55 cc	 mov	 edx, DWORD PTR _pfWImag$[ebp]
  0032b	d9 00		 fld	 DWORD PTR [eax]
  0032d	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  00330	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 688  :             
; 689  :             a -= (*pfQImag) * pfWImag[iWIndex];

  00333	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  00336	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  00339	8b 55 cc	 mov	 edx, DWORD PTR _pfWImag$[ebp]
  0033c	d9 00		 fld	 DWORD PTR [eax]
  0033e	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  00341	d8 6d f8	 fsubr	 DWORD PTR _a$[ebp]
  00344	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 690  :             b += (*pfQImag) * pfWReal[-iWIndex];

  00347	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  0034a	f7 d8		 neg	 eax
  0034c	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  0034f	8b 55 f0	 mov	 edx, DWORD PTR _pfWReal$[ebp]
  00352	d9 01		 fld	 DWORD PTR [ecx]
  00354	d8 0c 82	 fmul	 DWORD PTR [edx+eax*4]
  00357	d8 45 d8	 fadd	 DWORD PTR _b$[ebp]
  0035a	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 691  :            
; 692  :             /* convert data from Q15 to Q30 format before 
; 693  :             addition/substraction */
; 694  :             c = (*pfPReal) - a;    /* c==>*pfQReal */

  0035d	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  00360	d9 00		 fld	 DWORD PTR [eax]
  00362	d8 65 f8	 fsub	 DWORD PTR _a$[ebp]
  00365	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 695  :             a = (*pfPReal) + a;    /* a==>*pfPReal */

  00368	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  0036b	d9 45 f8	 fld	 DWORD PTR _a$[ebp]
  0036e	d8 01		 fadd	 DWORD PTR [ecx]
  00370	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 696  :             d = (*pfPImag) - b;    /* d==>*pfQImag */

  00373	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  00376	d9 02		 fld	 DWORD PTR [edx]
  00378	d8 65 d8	 fsub	 DWORD PTR _b$[ebp]
  0037b	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 697  :             b = (*pfPImag) + b;    /* b==>*pfPImag */

  0037e	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  00381	d9 45 d8	 fld	 DWORD PTR _b$[ebp]
  00384	d8 00		 fadd	 DWORD PTR [eax]
  00386	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 698  : 
; 699  :             *pfQReal = c;

  00389	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  0038c	8b 55 c0	 mov	 edx, DWORD PTR _c$[ebp]
  0038f	89 11		 mov	 DWORD PTR [ecx], edx

; 700  :             *pfPReal = a;

  00391	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  00394	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  00397	89 08		 mov	 DWORD PTR [eax], ecx

; 701  :             *pfQImag = d;

  00399	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  0039c	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  0039f	89 02		 mov	 DWORD PTR [edx], eax

; 702  :             *pfPImag = b;

  003a1	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  003a4	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  003a7	89 11		 mov	 DWORD PTR [ecx], edx

; 703  : 
; 704  :             assert(iWIndex <= TWIDDLE_TABLE_SIZE);

  003a9	81 7d b8 81 00
	00 00		 cmp	 DWORD PTR _iWIndex$[ebp], 129 ; 00000081H
  003b0	76 17		 jbe	 SHORT $L1373
  003b2	68 c0 02 00 00	 push	 704			; 000002c0H
  003b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  003bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@
  003c1	e8 00 00 00 00	 call	 __assert
  003c6	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1373:

; 705  :             iWIndex = iWIndex + iWInc;

  003c9	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  003cc	03 4d d0	 add	 ecx, DWORD PTR _iWInc$[ebp]
  003cf	89 4d b8	 mov	 DWORD PTR _iWIndex$[ebp], ecx

; 706  :             pfBase += 2;  /* Move ahead to next butterfly */

  003d2	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  003d5	83 c2 08	 add	 edx, 8
  003d8	89 55 bc	 mov	 DWORD PTR _pfBase$[ebp], edx

; 707  :          }

  003db	e9 f6 fe ff ff	 jmp	 $L1232
$L1233:

; 708  :         
; 709  :          for (i = (iButterflySep>>1); i > 0; i--)

  003e0	8b 45 ec	 mov	 eax, DWORD PTR _iButterflySep$[ebp]
  003e3	d1 f8		 sar	 eax, 1
  003e5	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
  003e8	eb 09		 jmp	 SHORT $L1236
$L1237:
  003ea	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  003ed	83 e9 01	 sub	 ecx, 1
  003f0	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L1236:
  003f3	83 7d f4 00	 cmp	 DWORD PTR _i$[ebp], 0
  003f7	0f 8e 3b 01 00
	00		 jle	 $L1238

; 710  :          {
; 711  :             assert(pfBase <= (pfInOut + (N << 1)));

  003fd	8b 55 dc	 mov	 edx, DWORD PTR _N$[ebp]
  00400	d1 e2		 shl	 edx, 1
  00402	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00405	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00408	39 4d bc	 cmp	 DWORD PTR _pfBase$[ebp], ecx
  0040b	76 17		 jbe	 SHORT $L1374
  0040d	68 c7 02 00 00	 push	 711			; 000002c7H
  00412	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00417	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@JBNHLKIP@pfBase?5?$DM?$DN?5?$CIpfInOut?5?$CL?5?$CIN?5?$DM?$DM?51?$CJ?$CJ?$AA@
  0041c	e8 00 00 00 00	 call	 __assert
  00421	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1374:

; 712  :             pfPReal = pfBase;

  00424	8b 45 bc	 mov	 eax, DWORD PTR _pfBase$[ebp]
  00427	89 45 e8	 mov	 DWORD PTR _pfPReal$[ebp], eax

; 713  :             pfPImag = pfPReal + 1;

  0042a	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  0042d	83 c1 04	 add	 ecx, 4
  00430	89 4d e0	 mov	 DWORD PTR _pfPImag$[ebp], ecx

; 714  :             pfQReal = pfPReal + (iButterflySep<<1);

  00433	8b 55 ec	 mov	 edx, DWORD PTR _iButterflySep$[ebp]
  00436	d1 e2		 shl	 edx, 1
  00438	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  0043b	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0043e	89 4d c8	 mov	 DWORD PTR _pfQReal$[ebp], ecx

; 715  :             pfQImag = pfQReal + 1;

  00441	8b 55 c8	 mov	 edx, DWORD PTR _pfQReal$[ebp]
  00444	83 c2 04	 add	 edx, 4
  00447	89 55 d4	 mov	 DWORD PTR _pfQImag$[ebp], edx

; 716  : 
; 717  :             /* Calculate cross terms in butterfly (W * Q) */
; 718  :             a = (*pfQReal) * pfWReal[-iWIndex]; 

  0044a	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  0044d	f7 d8		 neg	 eax
  0044f	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  00452	8b 55 f0	 mov	 edx, DWORD PTR _pfWReal$[ebp]
  00455	d9 01		 fld	 DWORD PTR [ecx]
  00457	d8 0c 82	 fmul	 DWORD PTR [edx+eax*4]
  0045a	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 719  :             b = (*pfQReal) * pfWImag[iWIndex];

  0045d	8b 45 c8	 mov	 eax, DWORD PTR _pfQReal$[ebp]
  00460	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  00463	8b 55 cc	 mov	 edx, DWORD PTR _pfWImag$[ebp]
  00466	d9 00		 fld	 DWORD PTR [eax]
  00468	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  0046b	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 720  :             
; 721  :             a += (*pfQImag) * pfWImag[iWIndex];

  0046e	8b 45 d4	 mov	 eax, DWORD PTR _pfQImag$[ebp]
  00471	8b 4d b8	 mov	 ecx, DWORD PTR _iWIndex$[ebp]
  00474	8b 55 cc	 mov	 edx, DWORD PTR _pfWImag$[ebp]
  00477	d9 00		 fld	 DWORD PTR [eax]
  00479	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  0047c	d8 45 f8	 fadd	 DWORD PTR _a$[ebp]
  0047f	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 722  :             b -= (*pfQImag) * pfWReal[-iWIndex];

  00482	8b 45 b8	 mov	 eax, DWORD PTR _iWIndex$[ebp]
  00485	f7 d8		 neg	 eax
  00487	8b 4d d4	 mov	 ecx, DWORD PTR _pfQImag$[ebp]
  0048a	8b 55 f0	 mov	 edx, DWORD PTR _pfWReal$[ebp]
  0048d	d9 01		 fld	 DWORD PTR [ecx]
  0048f	d8 0c 82	 fmul	 DWORD PTR [edx+eax*4]
  00492	d8 6d d8	 fsubr	 DWORD PTR _b$[ebp]
  00495	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 723  :            
; 724  :             c = (*pfPReal) + a;       /* c==>*pfQReal */

  00498	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  0049b	d9 45 f8	 fld	 DWORD PTR _a$[ebp]
  0049e	d8 00		 fadd	 DWORD PTR [eax]
  004a0	d9 5d c0	 fstp	 DWORD PTR _c$[ebp]

; 725  :             a = (*pfPReal) - a;       /* a==>*pfPReal */

  004a3	8b 4d e8	 mov	 ecx, DWORD PTR _pfPReal$[ebp]
  004a6	d9 01		 fld	 DWORD PTR [ecx]
  004a8	d8 65 f8	 fsub	 DWORD PTR _a$[ebp]
  004ab	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 726  :             d = (*pfPImag) - b;       /* d==>*pfQImag */

  004ae	8b 55 e0	 mov	 edx, DWORD PTR _pfPImag$[ebp]
  004b1	d9 02		 fld	 DWORD PTR [edx]
  004b3	d8 65 d8	 fsub	 DWORD PTR _b$[ebp]
  004b6	d9 5d c4	 fstp	 DWORD PTR _d$[ebp]

; 727  :             b = (*pfPImag) + b;       /* b==>*pfPImag */

  004b9	8b 45 e0	 mov	 eax, DWORD PTR _pfPImag$[ebp]
  004bc	d9 45 d8	 fld	 DWORD PTR _b$[ebp]
  004bf	d8 00		 fadd	 DWORD PTR [eax]
  004c1	d9 5d d8	 fstp	 DWORD PTR _b$[ebp]

; 728  : 
; 729  :             *pfQReal = c;

  004c4	8b 4d c8	 mov	 ecx, DWORD PTR _pfQReal$[ebp]
  004c7	8b 55 c0	 mov	 edx, DWORD PTR _c$[ebp]
  004ca	89 11		 mov	 DWORD PTR [ecx], edx

; 730  :             *pfPReal = a;

  004cc	8b 45 e8	 mov	 eax, DWORD PTR _pfPReal$[ebp]
  004cf	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  004d2	89 08		 mov	 DWORD PTR [eax], ecx

; 731  :             *pfQImag = d;

  004d4	8b 55 d4	 mov	 edx, DWORD PTR _pfQImag$[ebp]
  004d7	8b 45 c4	 mov	 eax, DWORD PTR _d$[ebp]
  004da	89 02		 mov	 DWORD PTR [edx], eax

; 732  :             *pfPImag = b;

  004dc	8b 4d e0	 mov	 ecx, DWORD PTR _pfPImag$[ebp]
  004df	8b 55 d8	 mov	 edx, DWORD PTR _b$[ebp]
  004e2	89 11		 mov	 DWORD PTR [ecx], edx

; 733  : 
; 734  :             assert(iWIndex <= TWIDDLE_TABLE_SIZE);

  004e4	81 7d b8 81 00
	00 00		 cmp	 DWORD PTR _iWIndex$[ebp], 129 ; 00000081H
  004eb	76 17		 jbe	 SHORT $L1375
  004ed	68 de 02 00 00	 push	 734			; 000002deH
  004f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  004f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IAIAPJGC@iWIndex?5?$DM?$DN?5TWIDDLE_TABLE_SIZE?$AA@
  004fc	e8 00 00 00 00	 call	 __assert
  00501	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1375:

; 735  :             assert(iWIndex >= 0);

  00504	83 7d b8 00	 cmp	 DWORD PTR _iWIndex$[ebp], 0
  00508	7d 17		 jge	 SHORT $L1376
  0050a	68 df 02 00 00	 push	 735			; 000002dfH
  0050f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00514	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OJNBHKGE@iWIndex?5?$DO?$DN?50?$AA@
  00519	e8 00 00 00 00	 call	 __assert
  0051e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1376:

; 736  :             iWIndex = iWIndex - iWInc;

  00521	8b 55 b8	 mov	 edx, DWORD PTR _iWIndex$[ebp]
  00524	2b 55 d0	 sub	 edx, DWORD PTR _iWInc$[ebp]
  00527	89 55 b8	 mov	 DWORD PTR _iWIndex$[ebp], edx

; 737  :             pfBase += 2;  /* Move ahead to next butterfly */

  0052a	8b 45 bc	 mov	 eax, DWORD PTR _pfBase$[ebp]
  0052d	83 c0 08	 add	 eax, 8
  00530	89 45 bc	 mov	 DWORD PTR _pfBase$[ebp], eax

; 738  :          }

  00533	e9 b2 fe ff ff	 jmp	 $L1237
$L1238:

; 739  :          pfBase += (iButterflySep<<1);

  00538	8b 4d ec	 mov	 ecx, DWORD PTR _iButterflySep$[ebp]
  0053b	d1 e1		 shl	 ecx, 1
  0053d	8b 55 bc	 mov	 edx, DWORD PTR _pfBase$[ebp]
  00540	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00543	89 45 bc	 mov	 DWORD PTR _pfBase$[ebp], eax

; 740  :       }

  00546	e9 6c fd ff ff	 jmp	 $L1229
$L1230:

; 741  :       iButterflySep <<= 1;

  0054b	8b 4d ec	 mov	 ecx, DWORD PTR _iButterflySep$[ebp]
  0054e	d1 e1		 shl	 ecx, 1
  00550	89 4d ec	 mov	 DWORD PTR _iButterflySep$[ebp], ecx

; 742  :       iWInc >>= 1;

  00553	8b 55 d0	 mov	 edx, DWORD PTR _iWInc$[ebp]
  00556	d1 fa		 sar	 edx, 1
  00558	89 55 d0	 mov	 DWORD PTR _iWInc$[ebp], edx

; 743  :       iGroupsPerStage >>= 1;

  0055b	8b 45 fc	 mov	 eax, DWORD PTR _iGroupsPerStage$[ebp]
  0055e	d1 f8		 sar	 eax, 1
  00560	89 45 fc	 mov	 DWORD PTR _iGroupsPerStage$[ebp], eax

; 744  :    }

  00563	e9 2b fd ff ff	 jmp	 $L1226
$L1192:

; 745  : }

  00568	8b e5		 mov	 esp, ebp
  0056a	5d		 pop	 ebp
  0056b	c2 08 00	 ret	 8
_InverseFft@8 ENDP
_TEXT	ENDS
PUBLIC	__real@3f000000
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _Unpack@8
_TEXT	SEGMENT
_pfSin$ = -52
_x0$ = -48
_c$ = -44
_d$ = -40
_x1$ = -36
_k$ = -32
_twiddleMod$ = -28
_b$ = -24
_N$ = -20
_pfCos$ = -16
_y1$ = -12
_a$ = -8
_y0$ = -4
_pfInOut$ = 8
_log2N$ = 12
_Unpack@8 PROC NEAR					; COMDAT

; 769  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi

; 770  :    int         k;
; 771  :    const float *pfCos,
; 772  :                *pfSin;
; 773  :    int         twiddleMod;
; 774  :    float       a, b, c, d;
; 775  :    float       x0, x1, y0, y1;
; 776  :    int         N;
; 777  :    
; 778  :    N = 1<<log2N;

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  0000f	d3 e0		 shl	 eax, cl
  00011	89 45 ec	 mov	 DWORD PTR _N$[ebp], eax

; 779  : 
; 780  :    assert(pfInOut != NULL);

  00014	83 7d 08 00	 cmp	 DWORD PTR _pfInOut$[ebp], 0
  00018	75 17		 jne	 SHORT $L1380
  0001a	68 0c 03 00 00	 push	 780			; 0000030cH
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
  00029	e8 00 00 00 00	 call	 __assert
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1380:

; 781  :    assert(N >= 8);

  00031	83 7d ec 08	 cmp	 DWORD PTR _N$[ebp], 8
  00035	7d 17		 jge	 SHORT $L1381
  00037	68 0d 03 00 00	 push	 781			; 0000030dH
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@
  00046	e8 00 00 00 00	 call	 __assert
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1381:

; 782  :    assert(N <= TWIDDLE_PERIOD);

  0004e	81 7d ec 00 02
	00 00		 cmp	 DWORD PTR _N$[ebp], 512	; 00000200H
  00055	76 17		 jbe	 SHORT $L1382
  00057	68 0e 03 00 00	 push	 782			; 0000030eH
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@
  00066	e8 00 00 00 00	 call	 __assert
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1382:

; 783  : 
; 784  :    /* Define the boundary conditions */
; 785  :    /* The 0 and 1 terms and the N and N+1 terms */
; 786  :    a = pfInOut[0] - pfInOut[1];

  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00071	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00074	d9 01		 fld	 DWORD PTR [ecx]
  00076	d8 62 04	 fsub	 DWORD PTR [edx+4]
  00079	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 787  :    b = pfInOut[0] + pfInOut[1];

  0007c	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00082	d9 00		 fld	 DWORD PTR [eax]
  00084	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  00087	d9 5d e8	 fstp	 DWORD PTR _b$[ebp]

; 788  :    
; 789  :    pfInOut[N] = a;

  0008a	8b 55 ec	 mov	 edx, DWORD PTR _N$[ebp]
  0008d	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  00093	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 790  :    pfInOut[0] = b;

  00096	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00099	8b 45 e8	 mov	 eax, DWORD PTR _b$[ebp]
  0009c	89 02		 mov	 DWORD PTR [edx], eax

; 791  : 
; 792  :    pfInOut[N+1] = 0.0F;

  0009e	8b 4d ec	 mov	 ecx, DWORD PTR _N$[ebp]
  000a1	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  000a4	c7 44 8a 04 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+4], 0

; 793  :    pfInOut[1] = 0.0F;

  000ac	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  000af	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 794  : 
; 795  :    pfCos = cos0Index;

  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _cos0Index
  000bc	89 4d f0	 mov	 DWORD PTR _pfCos$[ebp], ecx

; 796  :    pfSin = sin0Index;

  000bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sin0Index
  000c5	89 55 cc	 mov	 DWORD PTR _pfSin$[ebp], edx

; 797  :    twiddleMod = TWIDDLE_PERIOD >> log2N;

  000c8	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  000cd	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  000d0	d3 e8		 shr	 eax, cl
  000d2	89 45 e4	 mov	 DWORD PTR _twiddleMod$[ebp], eax

; 798  : 
; 799  :    for (k = 2; k < (N>>1); k+=2)

  000d5	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _k$[ebp], 2
  000dc	eb 09		 jmp	 SHORT $L1268
$L1269:
  000de	8b 4d e0	 mov	 ecx, DWORD PTR _k$[ebp]
  000e1	83 c1 02	 add	 ecx, 2
  000e4	89 4d e0	 mov	 DWORD PTR _k$[ebp], ecx
$L1268:
  000e7	8b 55 ec	 mov	 edx, DWORD PTR _N$[ebp]
  000ea	d1 fa		 sar	 edx, 1
  000ec	39 55 e0	 cmp	 DWORD PTR _k$[ebp], edx
  000ef	0f 8d 2b 01 00
	00		 jge	 $L1270

; 800  :    {
; 801  :       x0 = 0.5f * (pfInOut[k]   + pfInOut[N-k]);

  000f5	8b 45 ec	 mov	 eax, DWORD PTR _N$[ebp]
  000f8	2b 45 e0	 sub	 eax, DWORD PTR _k$[ebp]
  000fb	8b 4d e0	 mov	 ecx, DWORD PTR _k$[ebp]
  000fe	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00101	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  00104	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00107	d8 04 86	 fadd	 DWORD PTR [esi+eax*4]
  0010a	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00110	d9 5d d0	 fstp	 DWORD PTR _x0$[ebp]

; 802  :       x1 = 0.5f * (pfInOut[k]   - pfInOut[N-k]);

  00113	8b 45 ec	 mov	 eax, DWORD PTR _N$[ebp]
  00116	2b 45 e0	 sub	 eax, DWORD PTR _k$[ebp]
  00119	8b 4d e0	 mov	 ecx, DWORD PTR _k$[ebp]
  0011c	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0011f	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  00122	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00125	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  00128	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0012e	d9 5d dc	 fstp	 DWORD PTR _x1$[ebp]

; 803  :       y0 = 0.5f * (pfInOut[k+1] + pfInOut[N-k+1]); 

  00131	8b 45 ec	 mov	 eax, DWORD PTR _N$[ebp]
  00134	2b 45 e0	 sub	 eax, DWORD PTR _k$[ebp]
  00137	8b 4d e0	 mov	 ecx, DWORD PTR _k$[ebp]
  0013a	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0013d	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  00140	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00144	d8 44 86 04	 fadd	 DWORD PTR [esi+eax*4+4]
  00148	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0014e	d9 5d fc	 fstp	 DWORD PTR _y0$[ebp]

; 804  :       y1 = 0.5f * (pfInOut[k+1] - pfInOut[N-k+1]);     

  00151	8b 45 ec	 mov	 eax, DWORD PTR _N$[ebp]
  00154	2b 45 e0	 sub	 eax, DWORD PTR _k$[ebp]
  00157	8b 4d e0	 mov	 ecx, DWORD PTR _k$[ebp]
  0015a	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0015d	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  00160	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00164	d8 64 86 04	 fsub	 DWORD PTR [esi+eax*4+4]
  00168	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0016e	d9 5d f4	 fstp	 DWORD PTR _y1$[ebp]

; 805  : 
; 806  :       pfCos -= twiddleMod;

  00171	8b 45 e4	 mov	 eax, DWORD PTR _twiddleMod$[ebp]
  00174	c1 e0 02	 shl	 eax, 2
  00177	8b 4d f0	 mov	 ecx, DWORD PTR _pfCos$[ebp]
  0017a	2b c8		 sub	 ecx, eax
  0017c	89 4d f0	 mov	 DWORD PTR _pfCos$[ebp], ecx

; 807  :       pfSin += twiddleMod;

  0017f	8b 55 e4	 mov	 edx, DWORD PTR _twiddleMod$[ebp]
  00182	8b 45 cc	 mov	 eax, DWORD PTR _pfSin$[ebp]
  00185	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00188	89 4d cc	 mov	 DWORD PTR _pfSin$[ebp], ecx

; 808  : 
; 809  :       a =  (*pfCos) * y0;

  0018b	8b 55 f0	 mov	 edx, DWORD PTR _pfCos$[ebp]
  0018e	d9 45 fc	 fld	 DWORD PTR _y0$[ebp]
  00191	d8 0a		 fmul	 DWORD PTR [edx]
  00193	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 810  :       b =  (*pfCos) * x1;

  00196	8b 45 f0	 mov	 eax, DWORD PTR _pfCos$[ebp]
  00199	d9 45 dc	 fld	 DWORD PTR _x1$[ebp]
  0019c	d8 08		 fmul	 DWORD PTR [eax]
  0019e	d9 5d e8	 fstp	 DWORD PTR _b$[ebp]

; 811  :       a -= (*pfSin) * x1;      /* a = Wr*IE-Wi*RO  */

  001a1	8b 4d cc	 mov	 ecx, DWORD PTR _pfSin$[ebp]
  001a4	d9 45 dc	 fld	 DWORD PTR _x1$[ebp]
  001a7	d8 09		 fmul	 DWORD PTR [ecx]
  001a9	d8 6d f8	 fsubr	 DWORD PTR _a$[ebp]
  001ac	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 812  :       b += (*pfSin) * y0;      /* b = Wr*RO+Wi*IE  */

  001af	8b 55 cc	 mov	 edx, DWORD PTR _pfSin$[ebp]
  001b2	d9 45 fc	 fld	 DWORD PTR _y0$[ebp]
  001b5	d8 0a		 fmul	 DWORD PTR [edx]
  001b7	d8 45 e8	 fadd	 DWORD PTR _b$[ebp]
  001ba	d9 5d e8	 fstp	 DWORD PTR _b$[ebp]

; 813  : 
; 814  :       c = x0 + a;             /* pfInOut[k]         */

  001bd	d9 45 d0	 fld	 DWORD PTR _x0$[ebp]
  001c0	d8 45 f8	 fadd	 DWORD PTR _a$[ebp]
  001c3	d9 5d d4	 fstp	 DWORD PTR _c$[ebp]

; 815  :       d = x0 - a;             /* pfInOut[N-k]       */

  001c6	d9 45 d0	 fld	 DWORD PTR _x0$[ebp]
  001c9	d8 65 f8	 fsub	 DWORD PTR _a$[ebp]
  001cc	d9 5d d8	 fstp	 DWORD PTR _d$[ebp]

; 816  :       a = y1 - b;             /* pfInOut[k+1]       */

  001cf	d9 45 f4	 fld	 DWORD PTR _y1$[ebp]
  001d2	d8 65 e8	 fsub	 DWORD PTR _b$[ebp]
  001d5	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 817  :       b = y1 + b;             /* -pfInOut[N-k+1]    */

  001d8	d9 45 f4	 fld	 DWORD PTR _y1$[ebp]
  001db	d8 45 e8	 fadd	 DWORD PTR _b$[ebp]
  001de	d9 5d e8	 fstp	 DWORD PTR _b$[ebp]

; 818  : 
; 819  :       pfInOut[k]         =  c; 

  001e1	8b 45 e0	 mov	 eax, DWORD PTR _k$[ebp]
  001e4	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  001e7	8b 55 d4	 mov	 edx, DWORD PTR _c$[ebp]
  001ea	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 820  :       pfInOut[N - k]     =  d;

  001ed	8b 45 ec	 mov	 eax, DWORD PTR _N$[ebp]
  001f0	2b 45 e0	 sub	 eax, DWORD PTR _k$[ebp]
  001f3	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  001f6	8b 55 d8	 mov	 edx, DWORD PTR _d$[ebp]
  001f9	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 821  :       pfInOut[k + 1]     =  a;

  001fc	8b 45 e0	 mov	 eax, DWORD PTR _k$[ebp]
  001ff	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00202	8b 55 f8	 mov	 edx, DWORD PTR _a$[ebp]
  00205	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx

; 822  :       pfInOut[N - k + 1] =  -b;

  00209	d9 45 e8	 fld	 DWORD PTR _b$[ebp]
  0020c	d9 e0		 fchs
  0020e	8b 45 ec	 mov	 eax, DWORD PTR _N$[ebp]
  00211	2b 45 e0	 sub	 eax, DWORD PTR _k$[ebp]
  00214	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00217	d9 5c 81 04	 fstp	 DWORD PTR [ecx+eax*4+4]

; 823  :    }

  0021b	e9 be fe ff ff	 jmp	 $L1269
$L1270:

; 824  : 
; 825  :    /* The N/2 term */
; 826  :    /* at this point k = N/2 */
; 827  :    /* pfInOut[k] = pfInOut[k]; */
; 828  :    pfInOut[k + 1] = -pfInOut[k+1];

  00220	8b 55 e0	 mov	 edx, DWORD PTR _k$[ebp]
  00223	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00226	d9 44 90 04	 fld	 DWORD PTR [eax+edx*4+4]
  0022a	d9 e0		 fchs
  0022c	8b 4d e0	 mov	 ecx, DWORD PTR _k$[ebp]
  0022f	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00232	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 829  : }

  00236	5e		 pop	 esi
  00237	8b e5		 mov	 esp, ebp
  00239	5d		 pop	 ebp
  0023a	c2 08 00	 ret	 8
_Unpack@8 ENDP
_TEXT	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@c0000000
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _InverseUnpack@8
_TEXT	SEGMENT
_pfSin$ = -56
_x0$ = -52
_c$ = -48
_d$ = -44
_x1$ = -40
_k$ = -36
_twiddleMod$ = -32
_b$ = -28
_N$ = -24
_pfCos$ = -20
_y1$ = -16
_Nv2$ = -12
_a$ = -8
_y0$ = -4
_pfInOut$ = 8
_log2N$ = 12
_InverseUnpack@8 PROC NEAR				; COMDAT

; 856  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi

; 857  :    int         k;
; 858  :    const float *pfCos,
; 859  :                *pfSin;
; 860  :    int         twiddleMod;
; 861  :    float       a, b, c, d;
; 862  :    float       x0, x1, y0, y1;
; 863  :    int         N;
; 864  :    int         Nv2;
; 865  : 
; 866  :    N = 1<<log2N;

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  0000f	d3 e0		 shl	 eax, cl
  00011	89 45 e8	 mov	 DWORD PTR _N$[ebp], eax

; 867  : 
; 868  :    assert(pfInOut != NULL);

  00014	83 7d 08 00	 cmp	 DWORD PTR _pfInOut$[ebp], 0
  00018	75 17		 jne	 SHORT $L1388
  0001a	68 64 03 00 00	 push	 868			; 00000364H
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@MCFFPHPF@pfInOut?5?$CB?$DN?5NULL?$AA@
  00029	e8 00 00 00 00	 call	 __assert
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1388:

; 869  :    assert(N >= 8);

  00031	83 7d e8 08	 cmp	 DWORD PTR _N$[ebp], 8
  00035	7d 17		 jge	 SHORT $L1389
  00037	68 65 03 00 00	 push	 869			; 00000365H
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06ECIJPHBD@N?5?$DO?$DN?58?$AA@
  00046	e8 00 00 00 00	 call	 __assert
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1389:

; 870  :    assert(N <= TWIDDLE_PERIOD);

  0004e	81 7d e8 00 02
	00 00		 cmp	 DWORD PTR _N$[ebp], 512	; 00000200H
  00055	76 17		 jbe	 SHORT $L1390
  00057	68 66 03 00 00	 push	 870			; 00000366H
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CLNHHDPE@N?5?$DM?$DN?5TWIDDLE_PERIOD?$AA@
  00066	e8 00 00 00 00	 call	 __assert
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1390:

; 871  :    assert(log2N >= 3);

  0006e	83 7d 0c 03	 cmp	 DWORD PTR _log2N$[ebp], 3
  00072	7d 17		 jge	 SHORT $L1391
  00074	68 67 03 00 00	 push	 871			; 00000367H
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HOFBOBKL@c?3?2xbox?2private?2windows?2directx?2@
  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@NCFOKDCF@log2N?5?$DO?$DN?53?$AA@
  00083	e8 00 00 00 00	 call	 __assert
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1391:

; 872  : 
; 873  :    /* Define boundary conditions */
; 874  : 
; 875  :    /* the 0th and 1st terms */
; 876  :    a =  pfInOut[0] + pfInOut[N];   /* realEven   */

  0008b	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0008e	8b 45 e8	 mov	 eax, DWORD PTR _N$[ebp]
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00094	d9 02		 fld	 DWORD PTR [edx]
  00096	d8 04 81	 fadd	 DWORD PTR [ecx+eax*4]
  00099	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 877  :    b =  pfInOut[1] + pfInOut[N+1]; /* imagEven   */

  0009c	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0009f	8b 45 e8	 mov	 eax, DWORD PTR _N$[ebp]
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  000a5	d9 42 04	 fld	 DWORD PTR [edx+4]
  000a8	d8 44 81 04	 fadd	 DWORD PTR [ecx+eax*4+4]
  000ac	d9 5d e4	 fstp	 DWORD PTR _b$[ebp]

; 878  :    c =  pfInOut[0] - pfInOut[N];   /* realOdd    */

  000af	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  000b2	8b 45 e8	 mov	 eax, DWORD PTR _N$[ebp]
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  000b8	d9 02		 fld	 DWORD PTR [edx]
  000ba	d8 24 81	 fsub	 DWORD PTR [ecx+eax*4]
  000bd	d9 5d d0	 fstp	 DWORD PTR _c$[ebp]

; 879  :    d =  pfInOut[1] - pfInOut[N+1]; /* imagOdd    */

  000c0	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  000c3	8b 45 e8	 mov	 eax, DWORD PTR _N$[ebp]
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  000c9	d9 42 04	 fld	 DWORD PTR [edx+4]
  000cc	d8 64 81 04	 fsub	 DWORD PTR [ecx+eax*4+4]
  000d0	d9 5d d4	 fstp	 DWORD PTR _d$[ebp]

; 880  : 
; 881  :    c = c + d;

  000d3	d9 45 d0	 fld	 DWORD PTR _c$[ebp]
  000d6	d8 45 d4	 fadd	 DWORD PTR _d$[ebp]
  000d9	d9 5d d0	 fstp	 DWORD PTR _c$[ebp]

; 882  :    a = a - b;

  000dc	d9 45 f8	 fld	 DWORD PTR _a$[ebp]
  000df	d8 65 e4	 fsub	 DWORD PTR _b$[ebp]
  000e2	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 883  : 
; 884  :    pfInOut[0] = a;

  000e5	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _a$[ebp]
  000eb	89 02		 mov	 DWORD PTR [edx], eax

; 885  :    pfInOut[1] = c;

  000ed	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  000f0	8b 55 d0	 mov	 edx, DWORD PTR _c$[ebp]
  000f3	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 886  : 
; 887  :    /* The N/2 term */
; 888  :    Nv2 = N>>1;

  000f6	8b 45 e8	 mov	 eax, DWORD PTR _N$[ebp]
  000f9	d1 f8		 sar	 eax, 1
  000fb	89 45 f4	 mov	 DWORD PTR _Nv2$[ebp], eax

; 889  : 
; 890  :    pfInOut[Nv2]   =  2.0f * pfInOut[Nv2];

  000fe	8b 4d f4	 mov	 ecx, DWORD PTR _Nv2$[ebp]
  00101	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00104	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  0010a	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  0010d	8b 45 f4	 mov	 eax, DWORD PTR _Nv2$[ebp]
  00110	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00113	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 891  :    pfInOut[Nv2+1] = -2.0f * pfInOut[Nv2+1];

  00116	8b 55 f4	 mov	 edx, DWORD PTR _Nv2$[ebp]
  00119	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  0011c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@c0000000
  00122	d8 4c 90 04	 fmul	 DWORD PTR [eax+edx*4+4]
  00126	8b 4d f4	 mov	 ecx, DWORD PTR _Nv2$[ebp]
  00129	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0012c	d9 5c 8a 04	 fstp	 DWORD PTR [edx+ecx*4+4]

; 892  : 
; 893  :    /* second iStage - combine in "butterfly" fashion" */
; 894  :    pfCos = cos0Index;

  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR _cos0Index
  00135	89 45 ec	 mov	 DWORD PTR _pfCos$[ebp], eax

; 895  :    pfSin = sin0Index;

  00138	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sin0Index
  0013e	89 4d c8	 mov	 DWORD PTR _pfSin$[ebp], ecx

; 896  :    twiddleMod = TWIDDLE_PERIOD >> log2N;

  00141	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _log2N$[ebp]
  00149	d3 ea		 shr	 edx, cl
  0014b	89 55 e0	 mov	 DWORD PTR _twiddleMod$[ebp], edx

; 897  : 
; 898  :    for (k=2; k < Nv2; k+=2)

  0014e	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _k$[ebp], 2
  00155	eb 09		 jmp	 SHORT $L1297
$L1298:
  00157	8b 45 dc	 mov	 eax, DWORD PTR _k$[ebp]
  0015a	83 c0 02	 add	 eax, 2
  0015d	89 45 dc	 mov	 DWORD PTR _k$[ebp], eax
$L1297:
  00160	8b 4d dc	 mov	 ecx, DWORD PTR _k$[ebp]
  00163	3b 4d f4	 cmp	 ecx, DWORD PTR _Nv2$[ebp]
  00166	0f 8d 13 01 00
	00		 jge	 $L1275

; 899  :    {
; 900  :       x0 = pfInOut[k]   + pfInOut[N-k];

  0016c	8b 55 e8	 mov	 edx, DWORD PTR _N$[ebp]
  0016f	2b 55 dc	 sub	 edx, DWORD PTR _k$[ebp]
  00172	8b 45 dc	 mov	 eax, DWORD PTR _k$[ebp]
  00175	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00178	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  0017b	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  0017e	d8 04 96	 fadd	 DWORD PTR [esi+edx*4]
  00181	d9 5d cc	 fstp	 DWORD PTR _x0$[ebp]

; 901  :       x1 = pfInOut[k]   - pfInOut[N-k];

  00184	8b 55 e8	 mov	 edx, DWORD PTR _N$[ebp]
  00187	2b 55 dc	 sub	 edx, DWORD PTR _k$[ebp]
  0018a	8b 45 dc	 mov	 eax, DWORD PTR _k$[ebp]
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  00190	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  00193	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  00196	d8 24 96	 fsub	 DWORD PTR [esi+edx*4]
  00199	d9 5d d8	 fstp	 DWORD PTR _x1$[ebp]

; 902  :       y0 = pfInOut[k+1] + pfInOut[N-k+1]; 

  0019c	8b 55 e8	 mov	 edx, DWORD PTR _N$[ebp]
  0019f	2b 55 dc	 sub	 edx, DWORD PTR _k$[ebp]
  001a2	8b 45 dc	 mov	 eax, DWORD PTR _k$[ebp]
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  001a8	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  001ab	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  001af	d8 44 96 04	 fadd	 DWORD PTR [esi+edx*4+4]
  001b3	d9 5d fc	 fstp	 DWORD PTR _y0$[ebp]

; 903  :       y1 = pfInOut[k+1] - pfInOut[N-k+1];     

  001b6	8b 55 e8	 mov	 edx, DWORD PTR _N$[ebp]
  001b9	2b 55 dc	 sub	 edx, DWORD PTR _k$[ebp]
  001bc	8b 45 dc	 mov	 eax, DWORD PTR _k$[ebp]
  001bf	8b 4d 08	 mov	 ecx, DWORD PTR _pfInOut$[ebp]
  001c2	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  001c5	d9 44 81 04	 fld	 DWORD PTR [ecx+eax*4+4]
  001c9	d8 64 96 04	 fsub	 DWORD PTR [esi+edx*4+4]
  001cd	d9 5d f0	 fstp	 DWORD PTR _y1$[ebp]

; 904  : 
; 905  :       pfCos -= twiddleMod;

  001d0	8b 55 e0	 mov	 edx, DWORD PTR _twiddleMod$[ebp]
  001d3	c1 e2 02	 shl	 edx, 2
  001d6	8b 45 ec	 mov	 eax, DWORD PTR _pfCos$[ebp]
  001d9	2b c2		 sub	 eax, edx
  001db	89 45 ec	 mov	 DWORD PTR _pfCos$[ebp], eax

; 906  :       pfSin += twiddleMod;

  001de	8b 4d e0	 mov	 ecx, DWORD PTR _twiddleMod$[ebp]
  001e1	8b 55 c8	 mov	 edx, DWORD PTR _pfSin$[ebp]
  001e4	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  001e7	89 45 c8	 mov	 DWORD PTR _pfSin$[ebp], eax

; 907  : 
; 908  :       a =  (*pfCos) * y0;

  001ea	8b 4d ec	 mov	 ecx, DWORD PTR _pfCos$[ebp]
  001ed	d9 45 fc	 fld	 DWORD PTR _y0$[ebp]
  001f0	d8 09		 fmul	 DWORD PTR [ecx]
  001f2	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 909  :       b =  (*pfCos) * x1;

  001f5	8b 55 ec	 mov	 edx, DWORD PTR _pfCos$[ebp]
  001f8	d9 45 d8	 fld	 DWORD PTR _x1$[ebp]
  001fb	d8 0a		 fmul	 DWORD PTR [edx]
  001fd	d9 5d e4	 fstp	 DWORD PTR _b$[ebp]

; 910  :       a += (*pfSin) * x1;   /* a = -(Wr*IE-Wi*RO) */

  00200	8b 45 c8	 mov	 eax, DWORD PTR _pfSin$[ebp]
  00203	d9 45 d8	 fld	 DWORD PTR _x1$[ebp]
  00206	d8 08		 fmul	 DWORD PTR [eax]
  00208	d8 45 f8	 fadd	 DWORD PTR _a$[ebp]
  0020b	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 911  :       b -= (*pfSin) * y0;   /* b = Wr*RO+Wi*IE    */

  0020e	8b 4d c8	 mov	 ecx, DWORD PTR _pfSin$[ebp]
  00211	d9 45 fc	 fld	 DWORD PTR _y0$[ebp]
  00214	d8 09		 fmul	 DWORD PTR [ecx]
  00216	d8 6d e4	 fsubr	 DWORD PTR _b$[ebp]
  00219	d9 5d e4	 fstp	 DWORD PTR _b$[ebp]

; 912  : 
; 913  :       c = x0 - a;          /* output[k]      */

  0021c	d9 45 cc	 fld	 DWORD PTR _x0$[ebp]
  0021f	d8 65 f8	 fsub	 DWORD PTR _a$[ebp]
  00222	d9 5d d0	 fstp	 DWORD PTR _c$[ebp]

; 914  :       d = x0 + a;          /* output[N-k]    */

  00225	d9 45 cc	 fld	 DWORD PTR _x0$[ebp]
  00228	d8 45 f8	 fadd	 DWORD PTR _a$[ebp]
  0022b	d9 5d d4	 fstp	 DWORD PTR _d$[ebp]

; 915  :       a = y1 + b;          /* output[k+1]    */

  0022e	d9 45 f0	 fld	 DWORD PTR _y1$[ebp]
  00231	d8 45 e4	 fadd	 DWORD PTR _b$[ebp]
  00234	d9 5d f8	 fstp	 DWORD PTR _a$[ebp]

; 916  :       b = y1 - b;          /* -output[N-k+1] */

  00237	d9 45 f0	 fld	 DWORD PTR _y1$[ebp]
  0023a	d8 65 e4	 fsub	 DWORD PTR _b$[ebp]
  0023d	d9 5d e4	 fstp	 DWORD PTR _b$[ebp]

; 917  :     
; 918  :       pfInOut[k]           = c; 

  00240	8b 55 dc	 mov	 edx, DWORD PTR _k$[ebp]
  00243	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00246	8b 4d d0	 mov	 ecx, DWORD PTR _c$[ebp]
  00249	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 919  :       pfInOut[N - k]       = d;

  0024c	8b 55 e8	 mov	 edx, DWORD PTR _N$[ebp]
  0024f	2b 55 dc	 sub	 edx, DWORD PTR _k$[ebp]
  00252	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00255	8b 4d d4	 mov	 ecx, DWORD PTR _d$[ebp]
  00258	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 920  :       pfInOut[k + 1]       = a;

  0025b	8b 55 dc	 mov	 edx, DWORD PTR _k$[ebp]
  0025e	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00261	8b 4d f8	 mov	 ecx, DWORD PTR _a$[ebp]
  00264	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx

; 921  :       pfInOut[N - k + 1]   = -b;

  00268	d9 45 e4	 fld	 DWORD PTR _b$[ebp]
  0026b	d9 e0		 fchs
  0026d	8b 55 e8	 mov	 edx, DWORD PTR _N$[ebp]
  00270	2b 55 dc	 sub	 edx, DWORD PTR _k$[ebp]
  00273	8b 45 08	 mov	 eax, DWORD PTR _pfInOut$[ebp]
  00276	d9 5c 90 04	 fstp	 DWORD PTR [eax+edx*4+4]

; 922  :    }

  0027a	e9 d8 fe ff ff	 jmp	 $L1298
$L1275:

; 923  : }

  0027f	5e		 pop	 esi
  00280	8b e5		 mov	 esp, ebp
  00282	5d		 pop	 ebp
  00283	c2 08 00	 ret	 8
_InverseUnpack@8 ENDP
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT _BitRev@8
_TEXT	SEGMENT
_j$ = -20
_m$ = -16
_temp$ = -12
_i$ = -8
_n$ = -4
_pfInOut$ = 8
_N$ = 12
_BitRev@8 PROC NEAR					; COMDAT

; 964  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 965  :    int   i, j, n, m;
; 966  :    float temp;
; 967  : 
; 968  :    /* This algorithm is for in place manipulation */
; 969  :    
; 970  :    n = (N << 1);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _N$[ebp]
  0000a	d1 e0		 shl	 eax, 1
  0000c	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 971  :    j = 1;

  0000f	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _j$[ebp], 1

; 972  :    for (i = 1; i < n; i +=2)

  00016	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0001d	eb 09		 jmp	 SHORT $L1310
$L1311:
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00022	83 c1 02	 add	 ecx, 2
  00025	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1310:
  00028	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0002b	3b 55 fc	 cmp	 edx, DWORD PTR _n$[ebp]
  0002e	0f 8d 97 00 00
	00		 jge	 $L1304

; 973  :    {
; 974  :       if (j > i)

  00034	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  00037	3b 45 f8	 cmp	 eax, DWORD PTR _i$[ebp]
  0003a	7e 58		 jle	 SHORT $L1313

; 975  :       {
; 976  :          /* swap i and j (imaginary part) */
; 977  :          temp = pfInOut[j];

  0003c	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00042	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00045	89 45 f4	 mov	 DWORD PTR _temp$[ebp], eax

; 978  :          pfInOut[j] = pfInOut[i];

  00048	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00051	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  00054	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00057	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 979  :          pfInOut[i] = temp;

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0005d	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00060	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  00063	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 980  :          
; 981  :          /* swap (i - 1) and (j - 1) (real part) */
; 982  :          temp = pfInOut[j-1];

  00066	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  00069	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0006c	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00070	89 45 f4	 mov	 DWORD PTR _temp$[ebp], eax

; 983  :          pfInOut[j-1] = pfInOut[i-1];

  00073	8b 4d ec	 mov	 ecx, DWORD PTR _j$[ebp]
  00076	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  00079	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0007c	8b 75 08	 mov	 esi, DWORD PTR _pfInOut$[ebp]
  0007f	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  00083	89 44 8a fc	 mov	 DWORD PTR [edx+ecx*4-4], eax

; 984  :          pfInOut[i-1] = temp;

  00087	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0008a	8b 55 08	 mov	 edx, DWORD PTR _pfInOut$[ebp]
  0008d	8b 45 f4	 mov	 eax, DWORD PTR _temp$[ebp]
  00090	89 44 8a fc	 mov	 DWORD PTR [edx+ecx*4-4], eax
$L1313:

; 985  :       }
; 986  :       m = (n >> 1);

  00094	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00097	d1 f9		 sar	 ecx, 1
  00099	89 4d f0	 mov	 DWORD PTR _m$[ebp], ecx
$L1315:

; 987  :       while (m >= 2 && j > m)

  0009c	83 7d f0 02	 cmp	 DWORD PTR _m$[ebp], 2
  000a0	7c 1b		 jl	 SHORT $L1316
  000a2	8b 55 ec	 mov	 edx, DWORD PTR _j$[ebp]
  000a5	3b 55 f0	 cmp	 edx, DWORD PTR _m$[ebp]
  000a8	7e 13		 jle	 SHORT $L1316

; 988  :       {
; 989  :          j = j - m;

  000aa	8b 45 ec	 mov	 eax, DWORD PTR _j$[ebp]
  000ad	2b 45 f0	 sub	 eax, DWORD PTR _m$[ebp]
  000b0	89 45 ec	 mov	 DWORD PTR _j$[ebp], eax

; 990  :          m >>= 1;

  000b3	8b 4d f0	 mov	 ecx, DWORD PTR _m$[ebp]
  000b6	d1 f9		 sar	 ecx, 1
  000b8	89 4d f0	 mov	 DWORD PTR _m$[ebp], ecx

; 991  :       }

  000bb	eb df		 jmp	 SHORT $L1315
$L1316:

; 992  :       j = j + m;

  000bd	8b 55 ec	 mov	 edx, DWORD PTR _j$[ebp]
  000c0	03 55 f0	 add	 edx, DWORD PTR _m$[ebp]
  000c3	89 55 ec	 mov	 DWORD PTR _j$[ebp], edx

; 993  :    }

  000c6	e9 54 ff ff ff	 jmp	 $L1311
$L1304:

; 994  : }

  000cb	5e		 pop	 esi
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
_BitRev@8 ENDP
_TEXT	ENDS
END
