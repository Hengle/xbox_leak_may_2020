; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\corrpda.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EA@COEOEFPD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@BGNNAIBN@framelen?5?$DN?$DN?5FRAME_LEN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxCorrPDA@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxInitCorrPitchEst@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _VoxFreeCorrPitchEst@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _PvRefine@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
CONST	SEGMENT
_LpfCoefs2k DD	03e074442r			; 0.132096
	DD	03e285ca9r			; 0.164416
	DD	03e285ca9r			; 0.164416
	DD	03e074442r			; 0.132096
	DD	0bf8095f0r			; -1.00458
	DD	03f410040r			; 0.75391
	DD	0be200fa6r			; -0.15631
_HpfCoefs100 DD	03f658e07r			; 0.896698
	DD	0c0656977r			; -3.58456
	DD	040ac05f6r			; 5.37573
	DD	0c0656977r			; -3.58456
	DD	03f658e07r			; 0.896698
	DD	0c0729c03r			; -3.79077
	DD	040acb2car			; 5.39682
	DD	0c05adc69r			; -3.4197
	DD	03f50503dr			; 0.813724
CONST	ENDS
PUBLIC	_VoxCorrPDA@24
PUBLIC	??_C@_0EA@COEOEFPD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BG@BGNNAIBN@framelen?5?$DN?$DN?5FRAME_LEN?$AA@ ; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@43340000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f000000
PUBLIC	__real@40000000
EXTRN	_DotProd@12:NEAR
EXTRN	_VoxLPCAnaly4PDA@16:NEAR
EXTRN	_VoxCalcCrossCorrCost@16:NEAR
EXTRN	_VoxTrackPitch@8:NEAR
EXTRN	_calcCenterCorr@16:NEAR
EXTRN	_VoxNspIIRFlt@24:NEAR
EXTRN	_VoiceActivity@20:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_0EA@COEOEFPD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\corrpda.c
CONST	SEGMENT
??_C@_0EA@COEOEFPD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\corrpda.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BGNNAIBN@framelen?5?$DN?$DN?5FRAME_LEN?$AA@
CONST	SEGMENT
??_C@_0BG@BGNNAIBN@framelen?5?$DN?$DN?5FRAME_LEN?$AA@ DB 'framelen == FRA'
	DB	'ME_LEN', 00H				; `string'
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxCorrPDA@24
_TEXT	SEGMENT
_coarse_pitch$ = -48
_refine_pitch$ = -44
_maxCost$ = -40
_lowBandEng$ = -36
_ptmpSigBuf$ = -32
_corr_cost1$ = -28
_myCorrPDA_mblk$ = -24
_bias_floor$ = -20
_i$ = -16
_tmpSigBuf$ = -12
_CentCorrValue$ = -8
_pSigLPF$ = -4
_speechIn$ = 8
_framelen$ = 12
_pvCorrPDA_mblk$ = 16
_pda_delay_size$ = 20
_VAD$ = 24
_UV$ = 28
_VoxCorrPDA@24 PROC NEAR				; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 78   :   CorrPDA_mblk *myCorrPDA_mblk = (CorrPDA_mblk *)pvCorrPDA_mblk;

  00006	8b 45 10	 mov	 eax, DWORD PTR _pvCorrPDA_mblk$[ebp]
  00009	89 45 e8	 mov	 DWORD PTR _myCorrPDA_mblk$[ebp], eax

; 79   :   int i;
; 80   :   float *tmpSigBuf = speechIn;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _speechIn$[ebp]
  0000f	89 4d f4	 mov	 DWORD PTR _tmpSigBuf$[ebp], ecx

; 81   :   float *ptmpSigBuf = tmpSigBuf;    

  00012	8b 55 f4	 mov	 edx, DWORD PTR _tmpSigBuf$[ebp]
  00015	89 55 e0	 mov	 DWORD PTR _ptmpSigBuf$[ebp], edx

; 82   :   float *pSigLPF;
; 83   :   float *corr_cost1;
; 84   :   float bias_floor;
; 85   :   int coarse_pitch;
; 86   :   float refine_pitch;
; 87   :   float maxCost, lowBandEng;
; 88   :   float CentCorrValue;
; 89   : 
; 90   : 
; 91   :   assert(framelen == FRAME_LEN);

  00018	0f bf 45 0c	 movsx	 eax, WORD PTR _framelen$[ebp]
  0001c	3d b4 00 00 00	 cmp	 eax, 180		; 000000b4H
  00021	74 14		 je	 SHORT $L1665
  00023	6a 5b		 push	 91			; 0000005bH
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@COEOEFPD@c?3?2xbox?2private?2windows?2directx?2@
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@BGNNAIBN@framelen?5?$DN?$DN?5FRAME_LEN?$AA@
  0002f	e8 00 00 00 00	 call	 __assert
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1665:

; 92   : 
; 93   : #if USE_HPF  == 1
; 94   :   /*------------------------------------------------------------
; 95   :     Add a little offset to prevent underflow 
; 96   :     ------------------------------------------------------------*/
; 97   :   for (i = 0; i < framelen; i++)

  00037	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003e	eb 09		 jmp	 SHORT $L1508
$L1509:
  00040	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00043	83 c2 01	 add	 edx, 1
  00046	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L1508:
  00049	0f bf 45 0c	 movsx	 eax, WORD PTR _framelen$[ebp]
  0004d	39 45 f0	 cmp	 DWORD PTR _i$[ebp], eax
  00050	7d 1a		 jge	 SHORT $L1510

; 98   :     speechIn[i] += 0.1F;

  00052	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00055	8b 55 08	 mov	 edx, DWORD PTR _speechIn$[ebp]
  00058	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0005b	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3dcccccd
  00061	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _speechIn$[ebp]
  00067	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]
  0006a	eb d4		 jmp	 SHORT $L1509
$L1510:

; 99   : 
; 100  :   /*------------------------------------------------------------
; 101  :     (1) Preprocessing signal by using high-pass filter.
; 102  :     ------------------------------------------------------------*/
; 103  :   VoxNspIIRFlt(ptmpSigBuf, ptmpSigBuf, FRAME_LEN, myCorrPDA_mblk->hpfCoefs,
; 104  : 	       HPF_ORDER, myCorrPDA_mblk->hpf_mem);

  0006c	8b 55 e8	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0006f	8b 02		 mov	 eax, DWORD PTR [edx]
  00071	50		 push	 eax
  00072	6a 04		 push	 4
  00074	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00077	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0007a	52		 push	 edx
  0007b	68 b4 00 00 00	 push	 180			; 000000b4H
  00080	8b 45 e0	 mov	 eax, DWORD PTR _ptmpSigBuf$[ebp]
  00083	50		 push	 eax
  00084	8b 4d e0	 mov	 ecx, DWORD PTR _ptmpSigBuf$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _VoxNspIIRFlt@24

; 105  : #endif
; 106  : 
; 107  : 
; 108  :   /* Calculate lowBandEng; needed for VAD estimation.                         */
; 109  :   lowBandEng = DotProd(ptmpSigBuf, ptmpSigBuf, FRAME_LEN)/(float)FRAME_LEN;

  0008d	68 b4 00 00 00	 push	 180			; 000000b4H
  00092	8b 55 e0	 mov	 edx, DWORD PTR _ptmpSigBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 45 e0	 mov	 eax, DWORD PTR _ptmpSigBuf$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 _DotProd@12
  0009f	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@43340000
  000a5	d9 5d dc	 fstp	 DWORD PTR _lowBandEng$[ebp]

; 110  : 
; 111  :   /*------------------------------------------------------------
; 112  :     (2) Do LPC analysis and perceptually weight the high-pass 
; 113  :     filtered signal.
; 114  :     ------------------------------------------------------------*/
; 115  :   VoxLPCAnaly4PDA(STACK_S ptmpSigBuf, ptmpSigBuf, FRAME_LEN, myCorrPDA_mblk);

  000a8	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000ab	51		 push	 ecx
  000ac	68 b4 00 00 00	 push	 180			; 000000b4H
  000b1	8b 55 e0	 mov	 edx, DWORD PTR _ptmpSigBuf$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 e0	 mov	 eax, DWORD PTR _ptmpSigBuf$[ebp]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _VoxLPCAnaly4PDA@16

; 116  : 
; 117  : 
; 118  :   /*------------------------------------------------------------
; 119  :     (3) Low pass filter the perceptual weighting signal.
; 120  :     ------------------------------------------------------------*/
; 121  :   VoxNspIIRFlt(ptmpSigBuf, ptmpSigBuf, FRAME_LEN, myCorrPDA_mblk->lpfCoefs, 
; 122  : 	       LPF_ORDER, myCorrPDA_mblk->lpf_mem);

  000be	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000c1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c4	52		 push	 edx
  000c5	6a 03		 push	 3
  000c7	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000ca	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000cd	51		 push	 ecx
  000ce	68 b4 00 00 00	 push	 180			; 000000b4H
  000d3	8b 55 e0	 mov	 edx, DWORD PTR _ptmpSigBuf$[ebp]
  000d6	52		 push	 edx
  000d7	8b 45 e0	 mov	 eax, DWORD PTR _ptmpSigBuf$[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 _VoxNspIIRFlt@24

; 123  : 
; 124  : 
; 125  :   /*------------------------------------------------------------
; 126  :     (4) Calculate cross correlation and reture the cost function
; 127  :     of frame (1).
; 128  :     ------------------------------------------------------------*/
; 129  :   /* The signal of previous frame has been put to tmpBuf[0:89] and current 
; 130  :      frame signal is at tmpBuf[90:179].
; 131  :      So the decimated signal is put to [90:179]. */
; 132  :   pSigLPF = tmpSigBuf + FRAME_LEN-1;

  000e0	8b 4d f4	 mov	 ecx, DWORD PTR _tmpSigBuf$[ebp]
  000e3	81 c1 cc 02 00
	00		 add	 ecx, 716		; 000002ccH
  000e9	89 4d fc	 mov	 DWORD PTR _pSigLPF$[ebp], ecx

; 133  :   ptmpSigBuf = tmpSigBuf + FRAME_LEN-2;

  000ec	8b 55 f4	 mov	 edx, DWORD PTR _tmpSigBuf$[ebp]
  000ef	81 c2 c8 02 00
	00		 add	 edx, 712		; 000002c8H
  000f5	89 55 e0	 mov	 DWORD PTR _ptmpSigBuf$[ebp], edx

; 134  :   for (i = LFRAME_LEN; i > 0; i--) {

  000f8	c7 45 f0 5a 00
	00 00		 mov	 DWORD PTR _i$[ebp], 90	; 0000005aH
  000ff	eb 09		 jmp	 SHORT $L1512
$L1513:
  00101	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00104	83 e8 01	 sub	 eax, 1
  00107	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$L1512:
  0010a	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  0010e	7e 1e		 jle	 SHORT $L1514

; 135  :     *pSigLPF-- = *ptmpSigBuf;

  00110	8b 4d fc	 mov	 ecx, DWORD PTR _pSigLPF$[ebp]
  00113	8b 55 e0	 mov	 edx, DWORD PTR _ptmpSigBuf$[ebp]
  00116	8b 02		 mov	 eax, DWORD PTR [edx]
  00118	89 01		 mov	 DWORD PTR [ecx], eax
  0011a	8b 4d fc	 mov	 ecx, DWORD PTR _pSigLPF$[ebp]
  0011d	83 e9 04	 sub	 ecx, 4
  00120	89 4d fc	 mov	 DWORD PTR _pSigLPF$[ebp], ecx

; 136  :     ptmpSigBuf -= 2;

  00123	8b 55 e0	 mov	 edx, DWORD PTR _ptmpSigBuf$[ebp]
  00126	83 ea 08	 sub	 edx, 8
  00129	89 55 e0	 mov	 DWORD PTR _ptmpSigBuf$[ebp], edx

; 137  :   }

  0012c	eb d3		 jmp	 SHORT $L1513
$L1514:

; 138  : 
; 139  :   /* lpbuf has kept the previous 135 samples signal. 
; 140  :      The previous frame signal is put to tmpBuf[0:89].*/
; 141  :   pSigLPF = tmpSigBuf;

  0012e	8b 45 f4	 mov	 eax, DWORD PTR _tmpSigBuf$[ebp]
  00131	89 45 fc	 mov	 DWORD PTR _pSigLPF$[ebp], eax

; 142  :   memcpy(pSigLPF, &(myCorrPDA_mblk->lpfbuf[LFRAME_LEN_2]), sizeof(float)*LFRAME_LEN);

  00134	68 68 01 00 00	 push	 360			; 00000168H
  00139	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0013c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0013f	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  00145	52		 push	 edx
  00146	8b 45 fc	 mov	 eax, DWORD PTR _pSigLPF$[ebp]
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 _memcpy
  0014f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 143  : 
; 144  : 
; 145  : 
; 146  :   /* Since tmpBuf[0:89] is identical to lpbuf[45:134],
; 147  :      we borrow tmpBuf[0:89] for returned normalized costs. */
; 148  :   corr_cost1 = tmpSigBuf;

  00152	8b 4d f4	 mov	 ecx, DWORD PTR _tmpSigBuf$[ebp]
  00155	89 4d e4	 mov	 DWORD PTR _corr_cost1$[ebp], ecx

; 149  :   VoxCalcCrossCorrCost(STACK_S pSigLPF, corr_cost1, myCorrPDA_mblk, &bias_floor);

  00158	8d 55 ec	 lea	 edx, DWORD PTR _bias_floor$[ebp]
  0015b	52		 push	 edx
  0015c	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  0015f	50		 push	 eax
  00160	8b 4d e4	 mov	 ecx, DWORD PTR _corr_cost1$[ebp]
  00163	51		 push	 ecx
  00164	8b 55 fc	 mov	 edx, DWORD PTR _pSigLPF$[ebp]
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 _VoxCalcCrossCorrCost@16

; 150  :   
; 151  : 
; 152  :   /*------------------------------------------------------------
; 153  :     (5) Backward and forward tracking the cost function to 
; 154  :     get the coarse pitch value of frame (0).
; 155  :     ------------------------------------------------------------*/
; 156  :   coarse_pitch = VoxTrackPitch(STACK_S corr_cost1, myCorrPDA_mblk);

  0016d	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00170	50		 push	 eax
  00171	8b 4d e4	 mov	 ecx, DWORD PTR _corr_cost1$[ebp]
  00174	51		 push	 ecx
  00175	e8 00 00 00 00	 call	 _VoxTrackPitch@8
  0017a	0f bf d0	 movsx	 edx, ax
  0017d	89 55 d0	 mov	 DWORD PTR _coarse_pitch$[ebp], edx

; 157  : 
; 158  : 
; 159  :   /*------------------------------------------------------------
; 160  :     (6) centerize the pitch.
; 161  :     ------------------------------------------------------------*/
; 162  :   /* the previous frame: lpfbuf[0:44],
; 163  :      current frame: lpfbuf[45:134],
; 164  :      future frame: ptmpSigBuf[90:179] */
; 165  :   pSigLPF = &(tmpSigBuf[LFRAME_LEN]);

  00180	8b 45 f4	 mov	 eax, DWORD PTR _tmpSigBuf$[ebp]
  00183	05 68 01 00 00	 add	 eax, 360		; 00000168H
  00188	89 45 fc	 mov	 DWORD PTR _pSigLPF$[ebp], eax

; 166  :   refine_pitch = calcCenterCorr(STACK_S myCorrPDA_mblk,	pSigLPF, coarse_pitch, 
; 167  : 				&maxCost );

  0018b	8d 4d d8	 lea	 ecx, DWORD PTR _maxCost$[ebp]
  0018e	51		 push	 ecx
  0018f	8b 55 d0	 mov	 edx, DWORD PTR _coarse_pitch$[ebp]
  00192	52		 push	 edx
  00193	8b 45 fc	 mov	 eax, DWORD PTR _pSigLPF$[ebp]
  00196	50		 push	 eax
  00197	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0019a	51		 push	 ecx
  0019b	e8 00 00 00 00	 call	 _calcCenterCorr@16
  001a0	d9 5d d4	 fstp	 DWORD PTR _refine_pitch$[ebp]

; 168  : 
; 169  : 
; 170  :   /* update the costs value of current frame */
; 171  :   if (maxCost > myCorrPDA_mblk->cost_1)

  001a3	8b 55 e8	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001a6	d9 45 d8	 fld	 DWORD PTR _maxCost$[ebp]
  001a9	d8 5a 20	 fcomp	 DWORD PTR [edx+32]
  001ac	df e0		 fnstsw	 ax
  001ae	f6 c4 41	 test	 ah, 65			; 00000041H
  001b1	75 09		 jne	 SHORT $L1516

; 172  :     myCorrPDA_mblk->cost_1 = maxCost;

  001b3	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  001b6	8b 4d d8	 mov	 ecx, DWORD PTR _maxCost$[ebp]
  001b9	89 48 20	 mov	 DWORD PTR [eax+32], ecx
$L1516:

; 173  : 
; 174  :   /* check if maxCost is too small */
; 175  :   if (maxCost <= 0.01F) {

  001bc	d9 45 d8	 fld	 DWORD PTR _maxCost$[ebp]
  001bf	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3c23d70a
  001c5	df e0		 fnstsw	 ax
  001c7	f6 c4 41	 test	 ah, 65			; 00000041H
  001ca	7a 1f		 jp	 SHORT $L1517

; 176  :     myCorrPDA_mblk->cost_1 = INIT_COST;

  001cc	8b 55 e8	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001cf	c7 42 20 00 00
	80 bf		 mov	 DWORD PTR [edx+32], -1082130432 ; bf800000H

; 177  :     myCorrPDA_mblk->pitch_1 = myCorrPDA_mblk->pitch_2;

  001d6	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  001d9	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001dc	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001df	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 178  :     refine_pitch = (float)myCorrPDA_mblk->pitch_2;

  001e2	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  001e5	db 40 1c	 fild	 DWORD PTR [eax+28]
  001e8	d9 5d d4	 fstp	 DWORD PTR _refine_pitch$[ebp]
$L1517:

; 179  :   }
; 180  :    
; 181  :  
; 182  :   /* update the signal buffer */
; 183  :   memcpy(myCorrPDA_mblk->lpfbuf, &(myCorrPDA_mblk->lpfbuf[LFRAME_LEN]), LFRAME_LEN_2*sizeof(float));

  001eb	68 b4 00 00 00	 push	 180			; 000000b4H
  001f0	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001f3	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001f6	81 c2 68 01 00
	00		 add	 edx, 360		; 00000168H
  001fc	52		 push	 edx
  001fd	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00200	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 _memcpy
  00209	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  :   memcpy(&(myCorrPDA_mblk->lpfbuf[LFRAME_LEN_2]), pSigLPF, LFRAME_LEN*sizeof(float));

  0020c	68 68 01 00 00	 push	 360			; 00000168H
  00211	8b 55 fc	 mov	 edx, DWORD PTR _pSigLPF$[ebp]
  00214	52		 push	 edx
  00215	8b 45 e8	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00218	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0021b	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 _memcpy
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH

; 185  : 
; 186  : 
; 187  :   /* get the pitch delay size */
; 188  :   *pda_delay_size = (float)(FRAME_LEN+LFRAME_LEN);

  0022a	8b 55 14	 mov	 edx, DWORD PTR _pda_delay_size$[ebp]
  0022d	c7 02 00 00 87
	43		 mov	 DWORD PTR [edx], 1132920832 ; 43870000H

; 189  : 
; 190  :   /* Calculate Center Correlation Value for voiceActivity Function */
; 191  :   CentCorrValue=maxCost/myCorrPDA_mblk->biasTab[(int)(refine_pitch+0.5F)-LPITCH_MIN];

  00233	d9 45 d4	 fld	 DWORD PTR _refine_pitch$[ebp]
  00236	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f000000
  0023c	e8 00 00 00 00	 call	 __ftol2
  00241	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00244	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00247	d9 45 d8	 fld	 DWORD PTR _maxCost$[ebp]
  0024a	d8 74 82 ec	 fdiv	 DWORD PTR [edx+eax*4-20]
  0024e	d9 5d f8	 fstp	 DWORD PTR _CentCorrValue$[ebp]

; 192  : 
; 193  :   VoiceActivity(myCorrPDA_mblk->VADMemBlk, lowBandEng, CentCorrValue, VAD, UV);

  00251	8b 45 1c	 mov	 eax, DWORD PTR _UV$[ebp]
  00254	50		 push	 eax
  00255	8b 4d 18	 mov	 ecx, DWORD PTR _VAD$[ebp]
  00258	51		 push	 ecx
  00259	8b 55 f8	 mov	 edx, DWORD PTR _CentCorrValue$[ebp]
  0025c	52		 push	 edx
  0025d	8b 45 dc	 mov	 eax, DWORD PTR _lowBandEng$[ebp]
  00260	50		 push	 eax
  00261	8b 4d e8	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00264	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00267	52		 push	 edx
  00268	e8 00 00 00 00	 call	 _VoiceActivity@20

; 194  : 
; 195  :   return (2.0F*refine_pitch);

  0026d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40000000
  00273	d8 4d d4	 fmul	 DWORD PTR _refine_pitch$[ebp]

; 196  : }

  00276	8b e5		 mov	 esp, ebp
  00278	5d		 pop	 ebp
  00279	c2 18 00	 ret	 24			; 00000018H
_VoxCorrPDA@24 ENDP
_TEXT	ENDS
PUBLIC	_VoxInitCorrPitchEst@4
PUBLIC	__real@43b5cccd
PUBLIC	__real@3e1eb852
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3e800000
EXTRN	_hamming_half@8:NEAR
EXTRN	_hamming_right@8:NEAR
EXTRN	_initVAD@4:NEAR
EXTRN	_calloc:NEAR
EXTRN	_pow:NEAR
;	COMDAT __real@43b5cccd
CONST	SEGMENT
__real@43b5cccd DD 043b5cccdr			; 363.6
CONST	ENDS
;	COMDAT __real@3e1eb852
CONST	SEGMENT
__real@3e1eb852 DD 03e1eb852r			; 0.155
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxInitCorrPitchEst@4
_TEXT	SEGMENT
tv434 = -48
tv398 = -44
tv376 = -40
_delta$ = -32
_x1$ = -28
_bias0$ = -24
_myCorrPDA_mblk$ = -20
_pTabLength$ = -16
_pTabStart$ = -12
_i$ = -8
_pbias$ = -4
_hCorrPDA_mblk$ = 8
_VoxInitCorrPitchEst@4 PROC NEAR			; COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 225  :   CorrPDA_mblk *myCorrPDA_mblk;
; 226  :   float *pbias;
; 227  :   float bias0;
; 228  :   int i;
; 229  :   int *pTabStart, *pTabLength;
; 230  :   int delta;
; 231  :   float x1;
; 232  : 
; 233  :   /* initialize the structure */
; 234  :   if(VOX_MEM_INIT(myCorrPDA_mblk=(CorrPDA_mblk *)*hCorrPDA_mblk,1,
; 235  :      sizeof(CorrPDA_mblk)) != 0)

  00006	6a 54		 push	 84			; 00000054H
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 _calloc
  0000f	83 c4 08	 add	 esp, 8
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _hCorrPDA_mblk$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax
  00017	8b 55 08	 mov	 edx, DWORD PTR _hCorrPDA_mblk$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	89 45 ec	 mov	 DWORD PTR _myCorrPDA_mblk$[ebp], eax
  0001f	33 c9		 xor	 ecx, ecx
  00021	83 7d ec 00	 cmp	 DWORD PTR _myCorrPDA_mblk$[ebp], 0
  00025	0f 94 c1	 sete	 cl
  00028	85 c9		 test	 ecx, ecx
  0002a	74 09		 je	 SHORT $L1538

; 236  : 	  return 1;

  0002c	66 b8 01 00	 mov	 ax, 1
  00030	e9 d6 04 00 00	 jmp	 $L1527
$L1538:

; 237  : 
; 238  :   /*------------------------------------------------------------
; 239  :     initialize the inter-frame memory 
; 240  :     ------------------------------------------------------------*/
; 241  : #if USE_HPF == 1
; 242  :   if(VOX_MEM_INIT(myCorrPDA_mblk->hpf_mem, HPF_ORDER, sizeof(float))!=0) 

  00035	6a 04		 push	 4
  00037	6a 04		 push	 4
  00039	e8 00 00 00 00	 call	 _calloc
  0003e	83 c4 08	 add	 esp, 8
  00041	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax
  00046	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00049	33 c9		 xor	 ecx, ecx
  0004b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004e	0f 94 c1	 sete	 cl
  00051	85 c9		 test	 ecx, ecx
  00053	74 09		 je	 SHORT $L1540

; 243  :     return 1;

  00055	66 b8 01 00	 mov	 ax, 1
  00059	e9 ad 04 00 00	 jmp	 $L1527
$L1540:

; 244  : #endif
; 245  : 
; 246  :   if(VOX_MEM_INIT(myCorrPDA_mblk->lpf_mem, LPF_ORDER, sizeof(float))!=0) 

  0005e	6a 04		 push	 4
  00060	6a 03		 push	 3
  00062	e8 00 00 00 00	 call	 _calloc
  00067	83 c4 08	 add	 esp, 8
  0006a	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0006d	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00070	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00073	33 c9		 xor	 ecx, ecx
  00075	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00079	0f 94 c1	 sete	 cl
  0007c	85 c9		 test	 ecx, ecx
  0007e	74 09		 je	 SHORT $L1542

; 247  :     return 1;

  00080	66 b8 01 00	 mov	 ax, 1
  00084	e9 82 04 00 00	 jmp	 $L1527
$L1542:

; 248  :  
; 249  :   if(VOX_MEM_INIT(myCorrPDA_mblk->lpfbuf, (LFRAME_LEN+LFRAME_LEN_2), sizeof(float))!=0)

  00089	6a 04		 push	 4
  0008b	68 87 00 00 00	 push	 135			; 00000087H
  00090	e8 00 00 00 00	 call	 _calloc
  00095	83 c4 08	 add	 esp, 8
  00098	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0009b	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0009e	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000a1	33 c9		 xor	 ecx, ecx
  000a3	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000a7	0f 94 c1	 sete	 cl
  000aa	85 c9		 test	 ecx, ecx
  000ac	74 09		 je	 SHORT $L1544

; 250  :     return 1;

  000ae	66 b8 01 00	 mov	 ax, 1
  000b2	e9 54 04 00 00	 jmp	 $L1527
$L1544:

; 251  : 
; 252  :   if(VOX_MEM_INIT(myCorrPDA_mblk->costs0, (PITCH_CAND), sizeof(float))!=0)

  000b7	6a 04		 push	 4
  000b9	6a 56		 push	 86			; 00000056H
  000bb	e8 00 00 00 00	 call	 _calloc
  000c0	83 c4 08	 add	 esp, 8
  000c3	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000c6	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  000c9	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000cc	33 c9		 xor	 ecx, ecx
  000ce	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000d2	0f 94 c1	 sete	 cl
  000d5	85 c9		 test	 ecx, ecx
  000d7	74 09		 je	 SHORT $L1546

; 253  :     return 1;

  000d9	66 b8 01 00	 mov	 ax, 1
  000dd	e9 29 04 00 00	 jmp	 $L1527
$L1546:

; 254  : 
; 255  :   for (i = 0; i < PITCH_CAND; i++)

  000e2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e9	eb 09		 jmp	 SHORT $L1547
$L1548:
  000eb	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000ee	83 c2 01	 add	 edx, 1
  000f1	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1547:
  000f4	83 7d f8 56	 cmp	 DWORD PTR _i$[ebp], 86	; 00000056H
  000f8	7d 12		 jge	 SHORT $L1549

; 256  :     myCorrPDA_mblk->costs0[i] = INIT_COST;

  000fa	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000fd	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00100	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00103	c7 04 91 00 00
	80 bf		 mov	 DWORD PTR [ecx+edx*4], -1082130432 ; bf800000H
  0010a	eb df		 jmp	 SHORT $L1548
$L1549:

; 257  : 
; 258  :   if(VOX_MEM_INIT(myCorrPDA_mblk->Alsf0, PDA_LPC_ORDER, sizeof(float))!=0) 

  0010c	6a 04		 push	 4
  0010e	6a 0a		 push	 10			; 0000000aH
  00110	e8 00 00 00 00	 call	 _calloc
  00115	83 c4 08	 add	 esp, 8
  00118	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0011b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0011e	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00121	33 c0		 xor	 eax, eax
  00123	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00127	0f 94 c0	 sete	 al
  0012a	85 c0		 test	 eax, eax
  0012c	74 09		 je	 SHORT $L1551

; 259  :     return 1;

  0012e	66 b8 01 00	 mov	 ax, 1
  00132	e9 d4 03 00 00	 jmp	 $L1527
$L1551:

; 260  :   /* initialize Alsf0 */
; 261  :   for (i = 0, x1=0.0F; i < PDA_LPC_ORDER; i++) 

  00137	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0013e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _x1$[ebp], 0
  00145	eb 09		 jmp	 SHORT $L1552
$L1553:
  00147	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0014a	83 c1 01	 add	 ecx, 1
  0014d	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L1552:
  00150	83 7d f8 0a	 cmp	 DWORD PTR _i$[ebp], 10	; 0000000aH
  00154	7d 1d		 jge	 SHORT $L1554

; 262  :     myCorrPDA_mblk->Alsf0[i] = x1 = (float)(ZERO_LSF + x1);

  00156	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@43b5cccd
  0015c	d8 45 e4	 fadd	 DWORD PTR _x1$[ebp]
  0015f	d9 5d e4	 fstp	 DWORD PTR _x1$[ebp]
  00162	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00165	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00168	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0016b	8b 55 e4	 mov	 edx, DWORD PTR _x1$[ebp]
  0016e	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
  00171	eb d4		 jmp	 SHORT $L1553
$L1554:

; 263  :   
; 264  : 
; 265  :   if (VOX_MEM_INIT(myCorrPDA_mblk->percWeight_mem, PDA_LPC_ORDER, sizeof(float))!=0) 

  00173	6a 04		 push	 4
  00175	6a 0a		 push	 10			; 0000000aH
  00177	e8 00 00 00 00	 call	 _calloc
  0017c	83 c4 08	 add	 esp, 8
  0017f	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00182	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00185	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00188	33 c0		 xor	 eax, eax
  0018a	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0018e	0f 94 c0	 sete	 al
  00191	85 c0		 test	 eax, eax
  00193	74 09		 je	 SHORT $L1557

; 266  :     return 1;  

  00195	66 b8 01 00	 mov	 ax, 1
  00199	e9 6d 03 00 00	 jmp	 $L1527
$L1557:

; 267  : 
; 268  :   myCorrPDA_mblk->pitch_1 = INIT_PITCH;

  0019e	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001a1	c7 41 18 28 00
	00 00		 mov	 DWORD PTR [ecx+24], 40	; 00000028H

; 269  :   myCorrPDA_mblk->pitch_2 = INIT_PITCH;

  001a8	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001ab	c7 42 1c 28 00
	00 00		 mov	 DWORD PTR [edx+28], 40	; 00000028H

; 270  : 
; 271  :   myCorrPDA_mblk->cost_1 = INIT_COST;

  001b2	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  001b5	c7 40 20 00 00
	80 bf		 mov	 DWORD PTR [eax+32], -1082130432 ; bf800000H

; 272  :   myCorrPDA_mblk->cost_2 = INIT_COST;

  001bc	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001bf	c7 41 24 00 00
	80 bf		 mov	 DWORD PTR [ecx+36], -1082130432 ; bf800000H

; 273  : 
; 274  : 
; 275  :   /*------------------------------------------------------------
; 276  :     Tables:  pre-caculated for general application 
; 277  :     or load-in to ROM for DSP application 
; 278  :     ------------------------------------------------------------*/
; 279  :   myCorrPDA_mblk->lpfCoefs = (float *)LpfCoefs2k;

  001c6	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001c9	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], OFFSET FLAT:_LpfCoefs2k

; 280  : 
; 281  : #if USE_HPF == 1
; 282  :   myCorrPDA_mblk->hpfCoefs = (float *)HpfCoefs100;

  001d0	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  001d3	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], OFFSET FLAT:_HpfCoefs100

; 283  : #endif
; 284  : 
; 285  :   /* calculate the asymmetric Hamming window */
; 286  :   if (VOX_MEM_INIT(myCorrPDA_mblk->LpcWindow, FRAME_LEN, sizeof(float))!=0) 

  001da	6a 04		 push	 4
  001dc	68 b4 00 00 00	 push	 180			; 000000b4H
  001e1	e8 00 00 00 00	 call	 _calloc
  001e6	83 c4 08	 add	 esp, 8
  001e9	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001ec	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  001ef	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001f2	33 c0		 xor	 eax, eax
  001f4	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  001f8	0f 94 c0	 sete	 al
  001fb	85 c0		 test	 eax, eax
  001fd	74 09		 je	 SHORT $L1561

; 287  :     return 1;

  001ff	66 b8 01 00	 mov	 ax, 1
  00203	e9 03 03 00 00	 jmp	 $L1527
$L1561:

; 288  : 
; 289  :   hamming_half(myCorrPDA_mblk->LpcWindow, 2*LEFT_ASYM_WIN);

  00208	68 0e 01 00 00	 push	 270			; 0000010eH
  0020d	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00210	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00213	52		 push	 edx
  00214	e8 00 00 00 00	 call	 _hamming_half@8

; 290  :   hamming_right(myCorrPDA_mblk->LpcWindow+LEFT_ASYM_WIN, 2*RIGHT_ASYM_WIN);

  00219	6a 5a		 push	 90			; 0000005aH
  0021b	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  0021e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00221	81 c1 1c 02 00
	00		 add	 ecx, 540		; 0000021cH
  00227	51		 push	 ecx
  00228	e8 00 00 00 00	 call	 _hamming_right@8

; 291  : 
; 292  :   /* calculate the bias table */
; 293  :   if(VOX_MEM_INIT(myCorrPDA_mblk->biasTab,PITCH_CAND,sizeof(float))!=0) 

  0022d	6a 04		 push	 4
  0022f	6a 56		 push	 86			; 00000056H
  00231	e8 00 00 00 00	 call	 _calloc
  00236	83 c4 08	 add	 esp, 8
  00239	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0023c	89 42 34	 mov	 DWORD PTR [edx+52], eax
  0023f	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00242	33 c9		 xor	 ecx, ecx
  00244	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  00248	0f 94 c1	 sete	 cl
  0024b	85 c9		 test	 ecx, ecx
  0024d	74 09		 je	 SHORT $L1563

; 294  :      return 1;

  0024f	66 b8 01 00	 mov	 ax, 1
  00253	e9 b3 02 00 00	 jmp	 $L1527
$L1563:

; 295  : 
; 296  :   pbias = myCorrPDA_mblk->biasTab;

  00258	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0025b	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0025e	89 45 fc	 mov	 DWORD PTR _pbias$[ebp], eax

; 297  :   bias0 = (float)pow((double)LPITCH_MIN, (double)BIAS_C0);   /*   *pbias++ = 1.0 - (float)i * BIAS_LAG;  */

  00261	68 1c c7 d1 3f	 push	 1070712604		; 3fd1c71cH
  00266	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0026b	68 00 00 14 40	 push	 1075052544		; 40140000H
  00270	6a 00		 push	 0
  00272	e8 00 00 00 00	 call	 _pow
  00277	83 c4 10	 add	 esp, 16			; 00000010H
  0027a	d9 5d e8	 fstp	 DWORD PTR _bias0$[ebp]

; 298  :   *pbias++ = 1.0F;

  0027d	8b 4d fc	 mov	 ecx, DWORD PTR _pbias$[ebp]
  00280	c7 01 00 00 80
	3f		 mov	 DWORD PTR [ecx], 1065353216 ; 3f800000H
  00286	8b 55 fc	 mov	 edx, DWORD PTR _pbias$[ebp]
  00289	83 c2 04	 add	 edx, 4
  0028c	89 55 fc	 mov	 DWORD PTR _pbias$[ebp], edx

; 299  :   for (i = LPITCH_MIN+1; i <= LPITCH_MAX; i++)

  0028f	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR _i$[ebp], 6
  00296	eb 09		 jmp	 SHORT $L1567
$L1568:
  00298	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0029b	83 c0 01	 add	 eax, 1
  0029e	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L1567:
  002a1	83 7d f8 5a	 cmp	 DWORD PTR _i$[ebp], 90	; 0000005aH
  002a5	7f 34		 jg	 SHORT $L1569

; 300  :     *pbias++ = (float)(bias0/pow((double)i, (double)BIAS_C0));   /*   *pbias++ = 1.0 - (float)i * BIAS_LAG;  */

  002a7	d9 45 e8	 fld	 DWORD PTR _bias0$[ebp]
  002aa	dd 5d d8	 fstp	 QWORD PTR tv376[ebp]
  002ad	68 1c c7 d1 3f	 push	 1070712604		; 3fd1c71cH
  002b2	68 00 00 00 80	 push	 -2147483648		; 80000000H
  002b7	db 45 f8	 fild	 DWORD PTR _i$[ebp]
  002ba	83 ec 08	 sub	 esp, 8
  002bd	dd 1c 24	 fstp	 QWORD PTR [esp]
  002c0	e8 00 00 00 00	 call	 _pow
  002c5	83 c4 10	 add	 esp, 16			; 00000010H
  002c8	dc 7d d8	 fdivr	 QWORD PTR tv376[ebp]
  002cb	8b 4d fc	 mov	 ecx, DWORD PTR _pbias$[ebp]
  002ce	d9 19		 fstp	 DWORD PTR [ecx]
  002d0	8b 55 fc	 mov	 edx, DWORD PTR _pbias$[ebp]
  002d3	83 c2 04	 add	 edx, 4
  002d6	89 55 fc	 mov	 DWORD PTR _pbias$[ebp], edx
  002d9	eb bd		 jmp	 SHORT $L1568
$L1569:

; 301  : 
; 302  : 
; 303  :   /* calculate the tables for intra-frame tracking */
; 304  :   if(VOX_MEM_INIT(myCorrPDA_mblk->dIntraLagStart, PITCH_CAND, sizeof(int))!=0) 

  002db	6a 04		 push	 4
  002dd	6a 56		 push	 86			; 00000056H
  002df	e8 00 00 00 00	 call	 _calloc
  002e4	83 c4 08	 add	 esp, 8
  002e7	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  002ea	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  002ed	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  002f0	33 c0		 xor	 eax, eax
  002f2	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  002f6	0f 94 c0	 sete	 al
  002f9	85 c0		 test	 eax, eax
  002fb	74 09		 je	 SHORT $L1574

; 305  :      return 1;

  002fd	66 b8 01 00	 mov	 ax, 1
  00301	e9 05 02 00 00	 jmp	 $L1527
$L1574:

; 306  :   
; 307  :   if(VOX_MEM_INIT(myCorrPDA_mblk->dIntraLagLength, PITCH_CAND, sizeof(int))!=0) 

  00306	6a 04		 push	 4
  00308	6a 56		 push	 86			; 00000056H
  0030a	e8 00 00 00 00	 call	 _calloc
  0030f	83 c4 08	 add	 esp, 8
  00312	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00315	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  00318	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0031b	33 c0		 xor	 eax, eax
  0031d	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00321	0f 94 c0	 sete	 al
  00324	85 c0		 test	 eax, eax
  00326	74 09		 je	 SHORT $L1576

; 308  :      return 1;

  00328	66 b8 01 00	 mov	 ax, 1
  0032c	e9 da 01 00 00	 jmp	 $L1527
$L1576:

; 309  :   pTabStart =  myCorrPDA_mblk->dIntraLagStart;

  00331	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00334	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00337	89 55 f4	 mov	 DWORD PTR _pTabStart$[ebp], edx

; 310  :   pTabLength = myCorrPDA_mblk->dIntraLagLength;

  0033a	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  0033d	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00340	89 4d f0	 mov	 DWORD PTR _pTabLength$[ebp], ecx

; 311  : 
; 312  :   for (i = 0; i < PITCH_CAND; i++) {

  00343	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0034a	eb 09		 jmp	 SHORT $L1577
$L1578:
  0034c	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0034f	83 c2 01	 add	 edx, 1
  00352	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L1577:
  00355	83 7d f8 56	 cmp	 DWORD PTR _i$[ebp], 86	; 00000056H
  00359	0f 8d 86 00 00
	00		 jge	 $L1579

; 313  :     delta = (short)((float)(i+LPITCH_MIN)*INTRA_FRAME_TRACK_RATIO+0.5);

  0035f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00362	83 c0 05	 add	 eax, 5
  00365	89 45 d4	 mov	 DWORD PTR tv398[ebp], eax
  00368	db 45 d4	 fild	 DWORD PTR tv398[ebp]
  0036b	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e1eb852
  00371	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00377	e8 00 00 00 00	 call	 __ftol2
  0037c	0f bf c8	 movsx	 ecx, ax
  0037f	89 4d e0	 mov	 DWORD PTR _delta$[ebp], ecx

; 314  : 
; 315  :     *pTabStart = i-delta;

  00382	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00385	2b 55 e0	 sub	 edx, DWORD PTR _delta$[ebp]
  00388	8b 45 f4	 mov	 eax, DWORD PTR _pTabStart$[ebp]
  0038b	89 10		 mov	 DWORD PTR [eax], edx

; 316  :     if (*pTabStart < 0)

  0038d	8b 4d f4	 mov	 ecx, DWORD PTR _pTabStart$[ebp]
  00390	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00393	7d 09		 jge	 SHORT $L1582

; 317  :       *pTabStart = 0;

  00395	8b 55 f4	 mov	 edx, DWORD PTR _pTabStart$[ebp]
  00398	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L1582:

; 318  : 
; 319  :     *pTabLength = i+delta;

  0039e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  003a1	03 45 e0	 add	 eax, DWORD PTR _delta$[ebp]
  003a4	8b 4d f0	 mov	 ecx, DWORD PTR _pTabLength$[ebp]
  003a7	89 01		 mov	 DWORD PTR [ecx], eax

; 320  :     if (*pTabLength >= PITCH_CAND)

  003a9	8b 55 f0	 mov	 edx, DWORD PTR _pTabLength$[ebp]
  003ac	83 3a 56	 cmp	 DWORD PTR [edx], 86	; 00000056H
  003af	7c 09		 jl	 SHORT $L1583

; 321  :       *pTabLength = PITCH_CAND-1;

  003b1	8b 45 f0	 mov	 eax, DWORD PTR _pTabLength$[ebp]
  003b4	c7 00 55 00 00
	00		 mov	 DWORD PTR [eax], 85	; 00000055H
$L1583:

; 322  :     *pTabLength++ -= (*pTabStart++ - 1);

  003ba	8b 4d f4	 mov	 ecx, DWORD PTR _pTabStart$[ebp]
  003bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003bf	83 ea 01	 sub	 edx, 1
  003c2	8b 45 f0	 mov	 eax, DWORD PTR _pTabLength$[ebp]
  003c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c7	2b ca		 sub	 ecx, edx
  003c9	8b 55 f0	 mov	 edx, DWORD PTR _pTabLength$[ebp]
  003cc	89 0a		 mov	 DWORD PTR [edx], ecx
  003ce	8b 45 f4	 mov	 eax, DWORD PTR _pTabStart$[ebp]
  003d1	83 c0 04	 add	 eax, 4
  003d4	89 45 f4	 mov	 DWORD PTR _pTabStart$[ebp], eax
  003d7	8b 4d f0	 mov	 ecx, DWORD PTR _pTabLength$[ebp]
  003da	83 c1 04	 add	 ecx, 4
  003dd	89 4d f0	 mov	 DWORD PTR _pTabLength$[ebp], ecx

; 323  :   }

  003e0	e9 67 ff ff ff	 jmp	 $L1578
$L1579:

; 324  : 
; 325  : 
; 326  :   /* calculate the tables for inter-frame tracking */
; 327  :   if(VOX_MEM_INIT(myCorrPDA_mblk->dInterLagStart, PITCH_CAND, sizeof(int))!=0) 

  003e5	6a 04		 push	 4
  003e7	6a 56		 push	 86			; 00000056H
  003e9	e8 00 00 00 00	 call	 _calloc
  003ee	83 c4 08	 add	 esp, 8
  003f1	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  003f4	89 42 38	 mov	 DWORD PTR [edx+56], eax
  003f7	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  003fa	33 c9		 xor	 ecx, ecx
  003fc	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00400	0f 94 c1	 sete	 cl
  00403	85 c9		 test	 ecx, ecx
  00405	74 09		 je	 SHORT $L1585

; 328  :      return 1;

  00407	66 b8 01 00	 mov	 ax, 1
  0040b	e9 fb 00 00 00	 jmp	 $L1527
$L1585:

; 329  :   
; 330  :   if(VOX_MEM_INIT(myCorrPDA_mblk->dInterLagLength, PITCH_CAND, sizeof(int))!=0) 

  00410	6a 04		 push	 4
  00412	6a 56		 push	 86			; 00000056H
  00414	e8 00 00 00 00	 call	 _calloc
  00419	83 c4 08	 add	 esp, 8
  0041c	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0041f	89 42 3c	 mov	 DWORD PTR [edx+60], eax
  00422	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00425	33 c9		 xor	 ecx, ecx
  00427	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  0042b	0f 94 c1	 sete	 cl
  0042e	85 c9		 test	 ecx, ecx
  00430	74 09		 je	 SHORT $L1587

; 331  :      return 1;

  00432	66 b8 01 00	 mov	 ax, 1
  00436	e9 d0 00 00 00	 jmp	 $L1527
$L1587:

; 332  :   pTabStart = myCorrPDA_mblk->dInterLagStart;

  0043b	8b 55 ec	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0043e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00441	89 45 f4	 mov	 DWORD PTR _pTabStart$[ebp], eax

; 333  :   pTabLength = myCorrPDA_mblk->dInterLagLength;

  00444	8b 4d ec	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00447	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0044a	89 55 f0	 mov	 DWORD PTR _pTabLength$[ebp], edx

; 334  : 
; 335  :   for (i = 0; i < PITCH_CAND; i++) {

  0044d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00454	eb 09		 jmp	 SHORT $L1588
$L1589:
  00456	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00459	83 c0 01	 add	 eax, 1
  0045c	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L1588:
  0045f	83 7d f8 56	 cmp	 DWORD PTR _i$[ebp], 86	; 00000056H
  00463	0f 8d 86 00 00
	00		 jge	 $L1590

; 336  :     delta = (short)((float)(i+LPITCH_MIN)*INTER_FRAME_TRACK_RATIO+0.5);

  00469	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0046c	83 c1 05	 add	 ecx, 5
  0046f	89 4d d0	 mov	 DWORD PTR tv434[ebp], ecx
  00472	db 45 d0	 fild	 DWORD PTR tv434[ebp]
  00475	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e800000
  0047b	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00481	e8 00 00 00 00	 call	 __ftol2
  00486	0f bf d0	 movsx	 edx, ax
  00489	89 55 e0	 mov	 DWORD PTR _delta$[ebp], edx

; 337  : 
; 338  :     *pTabStart = i-delta;

  0048c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0048f	2b 45 e0	 sub	 eax, DWORD PTR _delta$[ebp]
  00492	8b 4d f4	 mov	 ecx, DWORD PTR _pTabStart$[ebp]
  00495	89 01		 mov	 DWORD PTR [ecx], eax

; 339  :     if (*pTabStart < 0)

  00497	8b 55 f4	 mov	 edx, DWORD PTR _pTabStart$[ebp]
  0049a	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0049d	7d 09		 jge	 SHORT $L1593

; 340  :       *pTabStart = 0;

  0049f	8b 45 f4	 mov	 eax, DWORD PTR _pTabStart$[ebp]
  004a2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L1593:

; 341  : 
; 342  :     *pTabLength = i+delta;

  004a8	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  004ab	03 4d e0	 add	 ecx, DWORD PTR _delta$[ebp]
  004ae	8b 55 f0	 mov	 edx, DWORD PTR _pTabLength$[ebp]
  004b1	89 0a		 mov	 DWORD PTR [edx], ecx

; 343  :     if (*pTabLength >= PITCH_CAND)

  004b3	8b 45 f0	 mov	 eax, DWORD PTR _pTabLength$[ebp]
  004b6	83 38 56	 cmp	 DWORD PTR [eax], 86	; 00000056H
  004b9	7c 09		 jl	 SHORT $L1594

; 344  :       *pTabLength = PITCH_CAND-1;

  004bb	8b 4d f0	 mov	 ecx, DWORD PTR _pTabLength$[ebp]
  004be	c7 01 55 00 00
	00		 mov	 DWORD PTR [ecx], 85	; 00000055H
$L1594:

; 345  :     *pTabLength++ -= (*pTabStart++ - 1);

  004c4	8b 55 f4	 mov	 edx, DWORD PTR _pTabStart$[ebp]
  004c7	8b 02		 mov	 eax, DWORD PTR [edx]
  004c9	83 e8 01	 sub	 eax, 1
  004cc	8b 4d f0	 mov	 ecx, DWORD PTR _pTabLength$[ebp]
  004cf	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d1	2b d0		 sub	 edx, eax
  004d3	8b 45 f0	 mov	 eax, DWORD PTR _pTabLength$[ebp]
  004d6	89 10		 mov	 DWORD PTR [eax], edx
  004d8	8b 4d f4	 mov	 ecx, DWORD PTR _pTabStart$[ebp]
  004db	83 c1 04	 add	 ecx, 4
  004de	89 4d f4	 mov	 DWORD PTR _pTabStart$[ebp], ecx
  004e1	8b 55 f0	 mov	 edx, DWORD PTR _pTabLength$[ebp]
  004e4	83 c2 04	 add	 edx, 4
  004e7	89 55 f0	 mov	 DWORD PTR _pTabLength$[ebp], edx

; 346  :   }

  004ea	e9 67 ff ff ff	 jmp	 $L1589
$L1590:

; 347  :   if(initVAD(&(myCorrPDA_mblk->VADMemBlk)))

  004ef	8b 45 ec	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  004f2	83 c0 50	 add	 eax, 80			; 00000050H
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 _initVAD@4
  004fb	0f b7 c8	 movzx	 ecx, ax
  004fe	85 c9		 test	 ecx, ecx
  00500	74 06		 je	 SHORT $L1595

; 348  :      return 1;

  00502	66 b8 01 00	 mov	 ax, 1
  00506	eb 03		 jmp	 SHORT $L1527
$L1595:

; 349  : 
; 350  :   return 0;

  00508	66 33 c0	 xor	 ax, ax
$L1527:

; 351  : }

  0050b	8b e5		 mov	 esp, ebp
  0050d	5d		 pop	 ebp
  0050e	c2 04 00	 ret	 4
_VoxInitCorrPitchEst@4 ENDP
_TEXT	ENDS
PUBLIC	_VoxFreeCorrPitchEst@4
EXTRN	_freeVAD@4:NEAR
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _VoxFreeCorrPitchEst@4
_TEXT	SEGMENT
_myCorrPDA_mblk$ = -4
_hCorrPDA_mblk$ = 8
_VoxFreeCorrPitchEst@4 PROC NEAR			; COMDAT

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 364  :   CorrPDA_mblk *myCorrPDA_mblk=(CorrPDA_mblk *)*hCorrPDA_mblk;

  00004	8b 45 08	 mov	 eax, DWORD PTR _hCorrPDA_mblk$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _myCorrPDA_mblk$[ebp], ecx

; 365  :   freeVAD(&(myCorrPDA_mblk->VADMemBlk));

  0000c	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0000f	83 c2 50	 add	 edx, 80			; 00000050H
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 _freeVAD@4

; 366  : 
; 367  :   if(*hCorrPDA_mblk) {

  00018	8b 45 08	 mov	 eax, DWORD PTR _hCorrPDA_mblk$[ebp]
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	0f 84 b4 01 00
	00		 je	 $L1601

; 368  : #if USE_HPF == 1
; 369  :     VOX_MEM_FREE(myCorrPDA_mblk->hpf_mem);

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00027	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0002a	74 17		 je	 SHORT $L1602
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0002f	8b 02		 mov	 eax, DWORD PTR [edx]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _free
  00037	83 c4 04	 add	 esp, 4
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0003d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L1602:

; 370  : #endif
; 371  : 
; 372  :     VOX_MEM_FREE(myCorrPDA_mblk->lpf_mem);

  00043	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00046	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0004a	74 19		 je	 SHORT $L1604
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  0004f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _free
  00058	83 c4 04	 add	 esp, 4
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0005e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L1604:

; 373  : 
; 374  :     VOX_MEM_FREE(myCorrPDA_mblk->lpfbuf);

  00065	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00068	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0006c	74 19		 je	 SHORT $L1606
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00071	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 _free
  0007a	83 c4 04	 add	 esp, 4
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00080	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$L1606:

; 375  : 
; 376  :     VOX_MEM_FREE(myCorrPDA_mblk->costs0);

  00087	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0008a	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0008e	74 19		 je	 SHORT $L1608
  00090	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00093	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _free
  0009c	83 c4 04	 add	 esp, 4
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000a2	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L1608:

; 377  : 
; 378  :     VOX_MEM_FREE(myCorrPDA_mblk->Alsf0);

  000a9	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000ac	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  000b0	74 19		 je	 SHORT $L1610
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000b5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 _free
  000be	83 c4 04	 add	 esp, 4
  000c1	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000c4	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
$L1610:

; 379  : 
; 380  :     VOX_MEM_FREE(myCorrPDA_mblk->percWeight_mem);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000ce	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  000d2	74 19		 je	 SHORT $L1612
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000d7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 _free
  000e0	83 c4 04	 add	 esp, 4
  000e3	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  000e6	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$L1612:

; 381  : 
; 382  :     VOX_MEM_FREE(myCorrPDA_mblk->LpcWindow);

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000f0	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  000f4	74 19		 je	 SHORT $L1614
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  000f9	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 _free
  00102	83 c4 04	 add	 esp, 4
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00108	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
$L1614:

; 383  :     
; 384  :     VOX_MEM_FREE(myCorrPDA_mblk->biasTab);

  0010f	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00112	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  00116	74 19		 je	 SHORT $L1616
  00118	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  0011b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0011e	51		 push	 ecx
  0011f	e8 00 00 00 00	 call	 _free
  00124	83 c4 04	 add	 esp, 4
  00127	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0012a	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
$L1616:

; 385  : 
; 386  :     VOX_MEM_FREE(myCorrPDA_mblk->dInterLagStart);

  00131	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00134	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00138	74 19		 je	 SHORT $L1618
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0013d	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 _free
  00146	83 c4 04	 add	 esp, 4
  00149	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  0014c	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
$L1618:

; 387  : 
; 388  :     VOX_MEM_FREE(myCorrPDA_mblk->dInterLagLength);

  00153	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00156	83 79 3c 00	 cmp	 DWORD PTR [ecx+60], 0
  0015a	74 19		 je	 SHORT $L1620
  0015c	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0015f	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 _free
  00168	83 c4 04	 add	 esp, 4
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  0016e	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
$L1620:

; 389  : 
; 390  :     VOX_MEM_FREE(myCorrPDA_mblk->dIntraLagStart);

  00175	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00178	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  0017c	74 19		 je	 SHORT $L1622
  0017e	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  00181	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 _free
  0018a	83 c4 04	 add	 esp, 4
  0018d	8b 55 fc	 mov	 edx, DWORD PTR _myCorrPDA_mblk$[ebp]
  00190	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0
$L1622:

; 391  : 
; 392  :     VOX_MEM_FREE(myCorrPDA_mblk->dIntraLagLength);

  00197	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  0019a	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  0019e	74 19		 je	 SHORT $L1624
  001a0	8b 4d fc	 mov	 ecx, DWORD PTR _myCorrPDA_mblk$[ebp]
  001a3	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  001a6	52		 push	 edx
  001a7	e8 00 00 00 00	 call	 _free
  001ac	83 c4 04	 add	 esp, 4
  001af	8b 45 fc	 mov	 eax, DWORD PTR _myCorrPDA_mblk$[ebp]
  001b2	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0
$L1624:

; 393  :   
; 394  :     VOX_MEM_FREE(*hCorrPDA_mblk);

  001b9	8b 4d 08	 mov	 ecx, DWORD PTR _hCorrPDA_mblk$[ebp]
  001bc	83 39 00	 cmp	 DWORD PTR [ecx], 0
  001bf	74 17		 je	 SHORT $L1601
  001c1	8b 55 08	 mov	 edx, DWORD PTR _hCorrPDA_mblk$[ebp]
  001c4	8b 02		 mov	 eax, DWORD PTR [edx]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 _free
  001cc	83 c4 04	 add	 esp, 4
  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _hCorrPDA_mblk$[ebp]
  001d2	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L1601:

; 395  :   }
; 396  : 
; 397  :   return 0;

  001d8	66 33 c0	 xor	 ax, ax

; 398  : }

  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 04 00	 ret	 4
_VoxFreeCorrPitchEst@4 ENDP
_TEXT	ENDS
PUBLIC	_PvRefine@20
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f19999a
PUBLIC	__real@3e23d70a
PUBLIC	__real@3ecccccd
EXTRN	_sqrt:NEAR
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _PvRefine@20
_TEXT	SEGMENT
_RefinedPv$ = -8
_CentCorrValue$ = -4
_Pv$ = 8
_Pv_1$ = 12
_Pitch$ = 16
_MaxCost$ = 20
_biasTab$ = 24
_PvRefine@20 PROC NEAR					; COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 427  :    float CentCorrValue;
; 428  :    float RefinedPv;
; 429  : 
; 430  :    CentCorrValue = MaxCost/biasTab[(int)(Pitch+0.5F)-LPITCH_MIN];

  00006	d9 45 10	 fld	 DWORD PTR _Pitch$[ebp]
  00009	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f000000
  0000f	e8 00 00 00 00	 call	 __ftol2
  00014	8b 4d 18	 mov	 ecx, DWORD PTR _biasTab$[ebp]
  00017	d9 45 14	 fld	 DWORD PTR _MaxCost$[ebp]
  0001a	d8 74 81 ec	 fdiv	 DWORD PTR [ecx+eax*4-20]
  0001e	d9 55 fc	 fst	 DWORD PTR _CentCorrValue$[ebp]

; 431  :    if (CentCorrValue < 0.0F)

  00021	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00027	df e0		 fnstsw	 ax
  00029	f6 c4 05	 test	 ah, 5
  0002c	7a 07		 jp	 SHORT $L1642

; 432  :       CentCorrValue = 0.0F;

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _CentCorrValue$[ebp], 0
$L1642:

; 433  : 
; 434  :    if (CentCorrValue > 1.0F)

  00035	d9 45 fc	 fld	 DWORD PTR _CentCorrValue$[ebp]
  00038	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  0003e	df e0		 fnstsw	 ax
  00040	f6 c4 41	 test	 ah, 65			; 00000041H
  00043	75 07		 jne	 SHORT $L1643

; 435  :       CentCorrValue = 1.0F;

  00045	c7 45 fc 00 00
	80 3f		 mov	 DWORD PTR _CentCorrValue$[ebp], 1065353216 ; 3f800000H
$L1643:

; 436  : 
; 437  : 
; 438  :    RefinedPv = Pv;

  0004c	8b 55 08	 mov	 edx, DWORD PTR _Pv$[ebp]
  0004f	89 55 f8	 mov	 DWORD PTR _RefinedPv$[ebp], edx

; 439  :    if ((CentCorrValue>MAGIC2)&&(Pv>MAGIC3))

  00052	d9 45 fc	 fld	 DWORD PTR _CentCorrValue$[ebp]
  00055	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f19999a
  0005b	df e0		 fnstsw	 ax
  0005d	f6 c4 41	 test	 ah, 65			; 00000041H
  00060	75 21		 jne	 SHORT $L1644
  00062	d9 45 08	 fld	 DWORD PTR _Pv$[ebp]
  00065	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3dcccccd
  0006b	df e0		 fnstsw	 ax
  0006d	f6 c4 41	 test	 ah, 65			; 00000041H
  00070	75 11		 jne	 SHORT $L1644

; 440  :    {
; 441  :       RefinedPv = (float) (Pv+CentCorrValue)* ((float) 0.5);

  00072	d9 45 08	 fld	 DWORD PTR _Pv$[ebp]
  00075	d8 45 fc	 fadd	 DWORD PTR _CentCorrValue$[ebp]
  00078	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  0007e	d9 5d f8	 fstp	 DWORD PTR _RefinedPv$[ebp]

; 442  :    }
; 443  :    else if ((Pv*CentCorrValue < MAGIC4)&&(CentCorrValue<MAGIC8))

  00081	eb 70		 jmp	 SHORT $L1647
$L1644:
  00083	d9 45 08	 fld	 DWORD PTR _Pv$[ebp]
  00086	d8 4d fc	 fmul	 DWORD PTR _CentCorrValue$[ebp]
  00089	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e23d70a
  0008f	df e0		 fnstsw	 ax
  00091	f6 c4 05	 test	 ah, 5
  00094	7a 29		 jp	 SHORT $L1648
  00096	d9 45 fc	 fld	 DWORD PTR _CentCorrValue$[ebp]
  00099	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f19999a
  0009f	df e0		 fnstsw	 ax
  000a1	f6 c4 05	 test	 ah, 5
  000a4	7a 19		 jp	 SHORT $L1648

; 444  :    {
; 445  :       if (Pv_1 < MAGIC5)

  000a6	d9 45 0c	 fld	 DWORD PTR _Pv_1$[ebp]
  000a9	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3ecccccd
  000af	df e0		 fnstsw	 ax
  000b1	f6 c4 05	 test	 ah, 5
  000b4	7a 07		 jp	 SHORT $L1649

; 446  :          RefinedPv =0;

  000b6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _RefinedPv$[ebp], 0
$L1649:

; 447  :    }
; 448  :    else if ((Pv > MAGIC6)&&(CentCorrValue>MAGIC7))

  000bd	eb 34		 jmp	 SHORT $L1647
$L1648:
  000bf	d9 45 08	 fld	 DWORD PTR _Pv$[ebp]
  000c2	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3ecccccd
  000c8	df e0		 fnstsw	 ax
  000ca	f6 c4 41	 test	 ah, 65			; 00000041H
  000cd	75 24		 jne	 SHORT $L1647
  000cf	d9 45 fc	 fld	 DWORD PTR _CentCorrValue$[ebp]
  000d2	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3ecccccd
  000d8	df e0		 fnstsw	 ax
  000da	f6 c4 41	 test	 ah, 65			; 00000041H
  000dd	75 14		 jne	 SHORT $L1647

; 449  :    {     
; 450  :       RefinedPv = (float) sqrt(Pv);

  000df	d9 45 08	 fld	 DWORD PTR _Pv$[ebp]
  000e2	83 ec 08	 sub	 esp, 8
  000e5	dd 1c 24	 fstp	 QWORD PTR [esp]
  000e8	e8 00 00 00 00	 call	 _sqrt
  000ed	83 c4 08	 add	 esp, 8
  000f0	d9 5d f8	 fstp	 DWORD PTR _RefinedPv$[ebp]
$L1647:

; 451  :    }
; 452  :    
; 453  :    return(RefinedPv);

  000f3	d9 45 f8	 fld	 DWORD PTR _RefinedPv$[ebp]

; 454  : 
; 455  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 14 00	 ret	 20			; 00000014H
_PvRefine@20 ENDP
_TEXT	ENDS
END
