; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\nspiir.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxNspIIRFlt@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxNspIIRFlt@24
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\nspiir.c
;	COMDAT _VoxNspIIRFlt@24
_TEXT	SEGMENT
_ordm2$498 = -64
_taps1$501 = -60
_tapsh2$503 = -56
_tapsh0$504 = -52
_dl$507 = -48
_inp1$500 = -44
_tapsh$506 = -40
_i$496 = -36
_ordm1$497 = -32
_inp$499 = -28
_tapsh1$502 = -24
_tapsh00$505 = -20
_ni$ = -16
_out$ = -12
_taps0$ = -8
_out1$ = -4
_inSamps$ = 8
_outSamps$ = 12
_numIters$ = 16
_taps$ = 20
_order$ = 24
_dlyl$ = 28
_VoxNspIIRFlt@24 PROC NEAR				; COMDAT

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi

; 52   : 	
; 53   :   int    ni; 
; 54   :   float  taps0;
; 55   :   float  out, out1;
; 56   : 
; 57   : 
; 58   :   {
; 59   : 	/* arbitrary filter 2-nd order unrolling algorithm */
; 60   :     int                i, ordm1, ordm2;
; 61   :     float              inp ,  inp1;
; 62   :     float              taps1, tapsh1, tapsh2, tapsh0 , tapsh00;
; 63   :     float              *tapsh;
; 64   :     float              dl;  
; 65   : 
; 66   :     if (order > 1 ) {    /*  filter order  > 0 */

  00007	83 7d 18 01	 cmp	 DWORD PTR _order$[ebp], 1
  0000b	0f 8e ff 03 00
	00		 jle	 $L508

; 67   :       taps0   = taps[0];

  00011	8b 45 14	 mov	 eax, DWORD PTR _taps$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	89 4d f8	 mov	 DWORD PTR _taps0$[ebp], ecx

; 68   :       taps1   = taps[1];

  00019	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  0001c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001f	89 45 c4	 mov	 DWORD PTR _taps1$501[ebp], eax

; 69   :       tapsh   = &taps[order];

  00022	8b 4d 18	 mov	 ecx, DWORD PTR _order$[ebp]
  00025	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  00028	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0002b	89 45 d8	 mov	 DWORD PTR _tapsh$506[ebp], eax

; 70   :       tapsh1  = taps[order-1];

  0002e	8b 4d 18	 mov	 ecx, DWORD PTR _order$[ebp]
  00031	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  00034	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00038	89 45 e8	 mov	 DWORD PTR _tapsh1$502[ebp], eax

; 71   :       tapsh2  = tapsh[order-1];

  0003b	8b 4d 18	 mov	 ecx, DWORD PTR _order$[ebp]
  0003e	8b 55 d8	 mov	 edx, DWORD PTR _tapsh$506[ebp]
  00041	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00045	89 45 c8	 mov	 DWORD PTR _tapsh2$503[ebp], eax

; 72   :       tapsh0  = taps[order];

  00048	8b 4d 18	 mov	 ecx, DWORD PTR _order$[ebp]
  0004b	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  0004e	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00051	89 45 cc	 mov	 DWORD PTR _tapsh0$504[ebp], eax

; 73   :       tapsh00 = taps[2*order];

  00054	8b 4d 18	 mov	 ecx, DWORD PTR _order$[ebp]
  00057	d1 e1		 shl	 ecx, 1
  00059	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  0005c	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0005f	89 45 ec	 mov	 DWORD PTR _tapsh00$505[ebp], eax

; 74   :       ordm1   = order - 1;

  00062	8b 4d 18	 mov	 ecx, DWORD PTR _order$[ebp]
  00065	83 e9 01	 sub	 ecx, 1
  00068	89 4d e0	 mov	 DWORD PTR _ordm1$497[ebp], ecx

; 75   :       ordm2   = order - 2;

  0006b	8b 55 18	 mov	 edx, DWORD PTR _order$[ebp]
  0006e	83 ea 02	 sub	 edx, 2
  00071	89 55 c0	 mov	 DWORD PTR _ordm2$498[ebp], edx

; 76   :       if ( numIters > 1  ) {

  00074	83 7d 10 01	 cmp	 DWORD PTR _numIters$[ebp], 1
  00078	0f 8e 13 03 00
	00		 jle	 $L509

; 77   :         if (numIters % 2) {   /* Sample number is odd */

  0007e	8b 45 10	 mov	 eax, DWORD PTR _numIters$[ebp]
  00081	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00086	79 05		 jns	 SHORT $L547
  00088	48		 dec	 eax
  00089	83 c8 fe	 or	 eax, -2			; fffffffeH
  0008c	40		 inc	 eax
$L547:
  0008d	85 c0		 test	 eax, eax
  0008f	0f 84 ca 01 00
	00		 je	 $L510

; 78   :           for (ni = 0; ni < numIters-1; ni += 2) {

  00095	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ni$[ebp], 0
  0009c	eb 09		 jmp	 SHORT $L511
$L512:
  0009e	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  000a1	83 c1 02	 add	 ecx, 2
  000a4	89 4d f0	 mov	 DWORD PTR _ni$[ebp], ecx
$L511:
  000a7	8b 55 10	 mov	 edx, DWORD PTR _numIters$[ebp]
  000aa	83 ea 01	 sub	 edx, 1
  000ad	39 55 f0	 cmp	 DWORD PTR _ni$[ebp], edx
  000b0	0f 8d 0c 01 00
	00		 jge	 $L513

; 79   :             inp  = inSamps[ni];

  000b6	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _inSamps$[ebp]
  000bc	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000bf	89 55 e4	 mov	 DWORD PTR _inp$499[ebp], edx

; 80   :             inp1 = inSamps[ni+1];

  000c2	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _inSamps$[ebp]
  000c8	8b 54 81 04	 mov	 edx, DWORD PTR [ecx+eax*4+4]
  000cc	89 55 d4	 mov	 DWORD PTR _inp1$500[ebp], edx

; 81   :             out  = taps0 * inp + dlyl[0];

  000cf	d9 45 f8	 fld	 DWORD PTR _taps0$[ebp]
  000d2	d8 4d e4	 fmul	 DWORD PTR _inp$499[ebp]
  000d5	8b 45 1c	 mov	 eax, DWORD PTR _dlyl$[ebp]
  000d8	d8 00		 fadd	 DWORD PTR [eax]
  000da	d9 5d f4	 fstp	 DWORD PTR _out$[ebp]

; 82   :             outSamps[ni] = out;

  000dd	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  000e0	8b 55 0c	 mov	 edx, DWORD PTR _outSamps$[ebp]
  000e3	8b 45 f4	 mov	 eax, DWORD PTR _out$[ebp]
  000e6	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 83   :             out1 = taps0 * inp1 + taps1 * inp - tapsh[1]*out + dlyl[1];

  000e9	d9 45 f8	 fld	 DWORD PTR _taps0$[ebp]
  000ec	d8 4d d4	 fmul	 DWORD PTR _inp1$500[ebp]
  000ef	d9 45 c4	 fld	 DWORD PTR _taps1$501[ebp]
  000f2	d8 4d e4	 fmul	 DWORD PTR _inp$499[ebp]
  000f5	de c1		 faddp	 ST(1), ST(0)
  000f7	8b 4d d8	 mov	 ecx, DWORD PTR _tapsh$506[ebp]
  000fa	d9 45 f4	 fld	 DWORD PTR _out$[ebp]
  000fd	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00100	de e9		 fsubp	 ST(1), ST(0)
  00102	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  00105	d8 42 04	 fadd	 DWORD PTR [edx+4]
  00108	d9 5d fc	 fstp	 DWORD PTR _out1$[ebp]

; 84   :             outSamps[ni+1]=out1;

  0010b	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  0010e	8b 4d 0c	 mov	 ecx, DWORD PTR _outSamps$[ebp]
  00111	8b 55 fc	 mov	 edx, DWORD PTR _out1$[ebp]
  00114	89 54 81 04	 mov	 DWORD PTR [ecx+eax*4+4], edx

; 85   :             for (i = 2; i < order; i++)

  00118	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _i$496[ebp], 2
  0011f	eb 09		 jmp	 SHORT $L514
$L515:
  00121	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  00124	83 c0 01	 add	 eax, 1
  00127	89 45 dc	 mov	 DWORD PTR _i$496[ebp], eax
$L514:
  0012a	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  0012d	3b 4d 18	 cmp	 ecx, DWORD PTR _order$[ebp]
  00130	7d 4d		 jge	 SHORT $L516

; 86   :               dlyl[i-2] = taps[i-1] * inp1 - tapsh[i-1] * out1
; 87   :                         + taps[i]   * inp  - tapsh[i]   * out  + dlyl[i];

  00132	8b 55 dc	 mov	 edx, DWORD PTR _i$496[ebp]
  00135	8b 45 14	 mov	 eax, DWORD PTR _taps$[ebp]
  00138	d9 45 d4	 fld	 DWORD PTR _inp1$500[ebp]
  0013b	d8 4c 90 fc	 fmul	 DWORD PTR [eax+edx*4-4]
  0013f	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  00142	8b 55 d8	 mov	 edx, DWORD PTR _tapsh$506[ebp]
  00145	d9 45 fc	 fld	 DWORD PTR _out1$[ebp]
  00148	d8 4c 8a fc	 fmul	 DWORD PTR [edx+ecx*4-4]
  0014c	de e9		 fsubp	 ST(1), ST(0)
  0014e	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  00151	8b 4d 14	 mov	 ecx, DWORD PTR _taps$[ebp]
  00154	d9 45 e4	 fld	 DWORD PTR _inp$499[ebp]
  00157	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0015a	de c1		 faddp	 ST(1), ST(0)
  0015c	8b 55 dc	 mov	 edx, DWORD PTR _i$496[ebp]
  0015f	8b 45 d8	 mov	 eax, DWORD PTR _tapsh$506[ebp]
  00162	d9 45 f4	 fld	 DWORD PTR _out$[ebp]
  00165	d8 0c 90	 fmul	 DWORD PTR [eax+edx*4]
  00168	de e9		 fsubp	 ST(1), ST(0)
  0016a	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  0016d	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  00170	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  00173	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  00176	8b 4d 1c	 mov	 ecx, DWORD PTR _dlyl$[ebp]
  00179	d9 5c 81 f8	 fstp	 DWORD PTR [ecx+eax*4-8]
  0017d	eb a2		 jmp	 SHORT $L515
$L516:

; 88   :             dlyl[ordm2] = tapsh1 * inp1 - tapsh2  * out1 + tapsh0 * inp
; 89   :                         - tapsh00 * out;

  0017f	d9 45 e8	 fld	 DWORD PTR _tapsh1$502[ebp]
  00182	d8 4d d4	 fmul	 DWORD PTR _inp1$500[ebp]
  00185	d9 45 c8	 fld	 DWORD PTR _tapsh2$503[ebp]
  00188	d8 4d fc	 fmul	 DWORD PTR _out1$[ebp]
  0018b	de e9		 fsubp	 ST(1), ST(0)
  0018d	d9 45 cc	 fld	 DWORD PTR _tapsh0$504[ebp]
  00190	d8 4d e4	 fmul	 DWORD PTR _inp$499[ebp]
  00193	de c1		 faddp	 ST(1), ST(0)
  00195	d9 45 ec	 fld	 DWORD PTR _tapsh00$505[ebp]
  00198	d8 4d f4	 fmul	 DWORD PTR _out$[ebp]
  0019b	de e9		 fsubp	 ST(1), ST(0)
  0019d	8b 55 c0	 mov	 edx, DWORD PTR _ordm2$498[ebp]
  001a0	8b 45 1c	 mov	 eax, DWORD PTR _dlyl$[ebp]
  001a3	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]

; 90   :             dlyl[ordm1] = tapsh0 * inp1 - tapsh00 * out1;

  001a6	d9 45 cc	 fld	 DWORD PTR _tapsh0$504[ebp]
  001a9	d8 4d d4	 fmul	 DWORD PTR _inp1$500[ebp]
  001ac	d9 45 ec	 fld	 DWORD PTR _tapsh00$505[ebp]
  001af	d8 4d fc	 fmul	 DWORD PTR _out1$[ebp]
  001b2	de e9		 fsubp	 ST(1), ST(0)
  001b4	8b 4d e0	 mov	 ecx, DWORD PTR _ordm1$497[ebp]
  001b7	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  001ba	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 91   :           } /* end ni */

  001bd	e9 dc fe ff ff	 jmp	 $L512
$L513:

; 92   :           outSamps[numIters-1] = taps0 * inSamps[numIters-1] + dlyl[0]; /* last sample */

  001c2	8b 45 10	 mov	 eax, DWORD PTR _numIters$[ebp]
  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _inSamps$[ebp]
  001c8	d9 45 f8	 fld	 DWORD PTR _taps0$[ebp]
  001cb	d8 4c 81 fc	 fmul	 DWORD PTR [ecx+eax*4-4]
  001cf	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  001d2	d8 02		 fadd	 DWORD PTR [edx]
  001d4	8b 45 10	 mov	 eax, DWORD PTR _numIters$[ebp]
  001d7	8b 4d 0c	 mov	 ecx, DWORD PTR _outSamps$[ebp]
  001da	d9 5c 81 fc	 fstp	 DWORD PTR [ecx+eax*4-4]

; 93   :           for (i = 1; i < order; i++)

  001de	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _i$496[ebp], 1
  001e5	eb 09		 jmp	 SHORT $L517
$L518:
  001e7	8b 55 dc	 mov	 edx, DWORD PTR _i$496[ebp]
  001ea	83 c2 01	 add	 edx, 1
  001ed	89 55 dc	 mov	 DWORD PTR _i$496[ebp], edx
$L517:
  001f0	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  001f3	3b 45 18	 cmp	 eax, DWORD PTR _order$[ebp]
  001f6	7d 3d		 jge	 SHORT $L519

; 94   :             dlyl[i-1] = taps[i] * inSamps[numIters-1]
; 95   :                       - tapsh[i] * outSamps[numIters-1] + dlyl[i];

  001f8	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  001fb	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  001fe	8b 45 10	 mov	 eax, DWORD PTR _numIters$[ebp]
  00201	8b 75 08	 mov	 esi, DWORD PTR _inSamps$[ebp]
  00204	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00207	d8 4c 86 fc	 fmul	 DWORD PTR [esi+eax*4-4]
  0020b	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  0020e	8b 55 d8	 mov	 edx, DWORD PTR _tapsh$506[ebp]
  00211	8b 45 10	 mov	 eax, DWORD PTR _numIters$[ebp]
  00214	8b 75 0c	 mov	 esi, DWORD PTR _outSamps$[ebp]
  00217	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  0021a	d8 4c 86 fc	 fmul	 DWORD PTR [esi+eax*4-4]
  0021e	de e9		 fsubp	 ST(1), ST(0)
  00220	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  00223	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  00226	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  00229	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  0022c	8b 4d 1c	 mov	 ecx, DWORD PTR _dlyl$[ebp]
  0022f	d9 5c 81 fc	 fstp	 DWORD PTR [ecx+eax*4-4]
  00233	eb b2		 jmp	 SHORT $L518
$L519:

; 96   :           dlyl[ordm1] = tapsh0 * inSamps[numIters-1]
; 97   :                      - tapsh00 * outSamps[numIters-1];

  00235	8b 55 10	 mov	 edx, DWORD PTR _numIters$[ebp]
  00238	8b 45 08	 mov	 eax, DWORD PTR _inSamps$[ebp]
  0023b	d9 45 cc	 fld	 DWORD PTR _tapsh0$504[ebp]
  0023e	d8 4c 90 fc	 fmul	 DWORD PTR [eax+edx*4-4]
  00242	8b 4d 10	 mov	 ecx, DWORD PTR _numIters$[ebp]
  00245	8b 55 0c	 mov	 edx, DWORD PTR _outSamps$[ebp]
  00248	d9 45 ec	 fld	 DWORD PTR _tapsh00$505[ebp]
  0024b	d8 4c 8a fc	 fmul	 DWORD PTR [edx+ecx*4-4]
  0024f	de e9		 fsubp	 ST(1), ST(0)
  00251	8b 45 e0	 mov	 eax, DWORD PTR _ordm1$497[ebp]
  00254	8b 4d 1c	 mov	 ecx, DWORD PTR _dlyl$[ebp]
  00257	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 98   :         } /* end  if odd */
; 99   :         else {              /* Sample number is even */

  0025a	e9 30 01 00 00	 jmp	 $L520
$L510:

; 100  :           for (ni = 0; ni < numIters; ni+=2) {

  0025f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ni$[ebp], 0
  00266	eb 09		 jmp	 SHORT $L521
$L522:
  00268	8b 55 f0	 mov	 edx, DWORD PTR _ni$[ebp]
  0026b	83 c2 02	 add	 edx, 2
  0026e	89 55 f0	 mov	 DWORD PTR _ni$[ebp], edx
$L521:
  00271	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00274	3b 45 10	 cmp	 eax, DWORD PTR _numIters$[ebp]
  00277	0f 8d 12 01 00
	00		 jge	 $L520

; 101  :             inp  = inSamps[ni];

  0027d	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  00280	8b 55 08	 mov	 edx, DWORD PTR _inSamps$[ebp]
  00283	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00286	89 45 e4	 mov	 DWORD PTR _inp$499[ebp], eax

; 102  :             inp1 = inSamps[ni+1];

  00289	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  0028c	8b 55 08	 mov	 edx, DWORD PTR _inSamps$[ebp]
  0028f	8b 44 8a 04	 mov	 eax, DWORD PTR [edx+ecx*4+4]
  00293	89 45 d4	 mov	 DWORD PTR _inp1$500[ebp], eax

; 103  :             out  = taps0 * inp + dlyl[0];

  00296	d9 45 f8	 fld	 DWORD PTR _taps0$[ebp]
  00299	d8 4d e4	 fmul	 DWORD PTR _inp$499[ebp]
  0029c	8b 4d 1c	 mov	 ecx, DWORD PTR _dlyl$[ebp]
  0029f	d8 01		 fadd	 DWORD PTR [ecx]
  002a1	d9 5d f4	 fstp	 DWORD PTR _out$[ebp]

; 104  :             out1 = taps0 * inp1 + taps1 * inp - tapsh[1] * out + dlyl[1];

  002a4	d9 45 f8	 fld	 DWORD PTR _taps0$[ebp]
  002a7	d8 4d d4	 fmul	 DWORD PTR _inp1$500[ebp]
  002aa	d9 45 c4	 fld	 DWORD PTR _taps1$501[ebp]
  002ad	d8 4d e4	 fmul	 DWORD PTR _inp$499[ebp]
  002b0	de c1		 faddp	 ST(1), ST(0)
  002b2	8b 55 d8	 mov	 edx, DWORD PTR _tapsh$506[ebp]
  002b5	d9 45 f4	 fld	 DWORD PTR _out$[ebp]
  002b8	d8 4a 04	 fmul	 DWORD PTR [edx+4]
  002bb	de e9		 fsubp	 ST(1), ST(0)
  002bd	8b 45 1c	 mov	 eax, DWORD PTR _dlyl$[ebp]
  002c0	d8 40 04	 fadd	 DWORD PTR [eax+4]
  002c3	d9 5d fc	 fstp	 DWORD PTR _out1$[ebp]

; 105  :             outSamps[ni]   = out;

  002c6	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  002c9	8b 55 0c	 mov	 edx, DWORD PTR _outSamps$[ebp]
  002cc	8b 45 f4	 mov	 eax, DWORD PTR _out$[ebp]
  002cf	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 106  :             outSamps[ni+1] = out1;

  002d2	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  002d5	8b 55 0c	 mov	 edx, DWORD PTR _outSamps$[ebp]
  002d8	8b 45 fc	 mov	 eax, DWORD PTR _out1$[ebp]
  002db	89 44 8a 04	 mov	 DWORD PTR [edx+ecx*4+4], eax

; 107  :             for (i = 2; i < order; i++){

  002df	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _i$496[ebp], 2
  002e6	eb 09		 jmp	 SHORT $L524
$L525:
  002e8	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  002eb	83 c1 01	 add	 ecx, 1
  002ee	89 4d dc	 mov	 DWORD PTR _i$496[ebp], ecx
$L524:
  002f1	8b 55 dc	 mov	 edx, DWORD PTR _i$496[ebp]
  002f4	3b 55 18	 cmp	 edx, DWORD PTR _order$[ebp]
  002f7	7d 53		 jge	 SHORT $L526

; 108  :               dl = taps[i-1] * inp1 - tapsh[i-1] * out1
; 109  :                  + taps[i]   * inp  - tapsh[i]   * out + dlyl[i];

  002f9	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  002fc	8b 4d 14	 mov	 ecx, DWORD PTR _taps$[ebp]
  002ff	d9 45 d4	 fld	 DWORD PTR _inp1$500[ebp]
  00302	d8 4c 81 fc	 fmul	 DWORD PTR [ecx+eax*4-4]
  00306	8b 55 dc	 mov	 edx, DWORD PTR _i$496[ebp]
  00309	8b 45 d8	 mov	 eax, DWORD PTR _tapsh$506[ebp]
  0030c	d9 45 fc	 fld	 DWORD PTR _out1$[ebp]
  0030f	d8 4c 90 fc	 fmul	 DWORD PTR [eax+edx*4-4]
  00313	de e9		 fsubp	 ST(1), ST(0)
  00315	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  00318	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  0031b	d9 45 e4	 fld	 DWORD PTR _inp$499[ebp]
  0031e	d8 0c 8a	 fmul	 DWORD PTR [edx+ecx*4]
  00321	de c1		 faddp	 ST(1), ST(0)
  00323	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  00326	8b 4d d8	 mov	 ecx, DWORD PTR _tapsh$506[ebp]
  00329	d9 45 f4	 fld	 DWORD PTR _out$[ebp]
  0032c	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0032f	de e9		 fsubp	 ST(1), ST(0)
  00331	8b 55 dc	 mov	 edx, DWORD PTR _i$496[ebp]
  00334	8b 45 1c	 mov	 eax, DWORD PTR _dlyl$[ebp]
  00337	d8 04 90	 fadd	 DWORD PTR [eax+edx*4]
  0033a	d9 5d d0	 fstp	 DWORD PTR _dl$507[ebp]

; 110  :               dlyl[i-2] = dl;

  0033d	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  00340	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  00343	8b 45 d0	 mov	 eax, DWORD PTR _dl$507[ebp]
  00346	89 44 8a f8	 mov	 DWORD PTR [edx+ecx*4-8], eax

; 111  :             }/* end i */

  0034a	eb 9c		 jmp	 SHORT $L525
$L526:

; 112  :             dlyl[ordm2] = tapsh1 * inp1 - tapsh2  * out1
; 113  :                         + tapsh0 * inp  - tapsh00 * out;

  0034c	d9 45 e8	 fld	 DWORD PTR _tapsh1$502[ebp]
  0034f	d8 4d d4	 fmul	 DWORD PTR _inp1$500[ebp]
  00352	d9 45 c8	 fld	 DWORD PTR _tapsh2$503[ebp]
  00355	d8 4d fc	 fmul	 DWORD PTR _out1$[ebp]
  00358	de e9		 fsubp	 ST(1), ST(0)
  0035a	d9 45 cc	 fld	 DWORD PTR _tapsh0$504[ebp]
  0035d	d8 4d e4	 fmul	 DWORD PTR _inp$499[ebp]
  00360	de c1		 faddp	 ST(1), ST(0)
  00362	d9 45 ec	 fld	 DWORD PTR _tapsh00$505[ebp]
  00365	d8 4d f4	 fmul	 DWORD PTR _out$[ebp]
  00368	de e9		 fsubp	 ST(1), ST(0)
  0036a	8b 4d c0	 mov	 ecx, DWORD PTR _ordm2$498[ebp]
  0036d	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  00370	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]

; 114  :             dlyl[ordm1] = tapsh0 * inp1 - tapsh00 * out1;

  00373	d9 45 cc	 fld	 DWORD PTR _tapsh0$504[ebp]
  00376	d8 4d d4	 fmul	 DWORD PTR _inp1$500[ebp]
  00379	d9 45 ec	 fld	 DWORD PTR _tapsh00$505[ebp]
  0037c	d8 4d fc	 fmul	 DWORD PTR _out1$[ebp]
  0037f	de e9		 fsubp	 ST(1), ST(0)
  00381	8b 45 e0	 mov	 eax, DWORD PTR _ordm1$497[ebp]
  00384	8b 4d 1c	 mov	 ecx, DWORD PTR _dlyl$[ebp]
  00387	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 115  :           } /* end ni */

  0038a	e9 d9 fe ff ff	 jmp	 $L522
$L520:

; 116  :         } /* end else even */ 
; 117  :       }
; 118  :       else  { /*  numIters = 1 */

  0038f	eb 7a		 jmp	 SHORT $L527
$L509:

; 119  :         outSamps[0] = taps0 * inSamps[0] + dlyl[0]; 

  00391	8b 55 08	 mov	 edx, DWORD PTR _inSamps$[ebp]
  00394	d9 45 f8	 fld	 DWORD PTR _taps0$[ebp]
  00397	d8 0a		 fmul	 DWORD PTR [edx]
  00399	8b 45 1c	 mov	 eax, DWORD PTR _dlyl$[ebp]
  0039c	d8 00		 fadd	 DWORD PTR [eax]
  0039e	8b 4d 0c	 mov	 ecx, DWORD PTR _outSamps$[ebp]
  003a1	d9 19		 fstp	 DWORD PTR [ecx]

; 120  :         for (i = 1; i < order; i++)

  003a3	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _i$496[ebp], 1
  003aa	eb 09		 jmp	 SHORT $L528
$L529:
  003ac	8b 55 dc	 mov	 edx, DWORD PTR _i$496[ebp]
  003af	83 c2 01	 add	 edx, 1
  003b2	89 55 dc	 mov	 DWORD PTR _i$496[ebp], edx
$L528:
  003b5	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  003b8	3b 45 18	 cmp	 eax, DWORD PTR _order$[ebp]
  003bb	7d 33		 jge	 SHORT $L530

; 121  :           dlyl[i-1] = taps[i] * inSamps[0]
; 122  :                     - tapsh[i] * outSamps[0] + dlyl[i];

  003bd	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  003c0	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  003c3	8b 45 08	 mov	 eax, DWORD PTR _inSamps$[ebp]
  003c6	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  003c9	d8 08		 fmul	 DWORD PTR [eax]
  003cb	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  003ce	8b 55 d8	 mov	 edx, DWORD PTR _tapsh$506[ebp]
  003d1	8b 45 0c	 mov	 eax, DWORD PTR _outSamps$[ebp]
  003d4	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  003d7	d8 08		 fmul	 DWORD PTR [eax]
  003d9	de e9		 fsubp	 ST(1), ST(0)
  003db	8b 4d dc	 mov	 ecx, DWORD PTR _i$496[ebp]
  003de	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  003e1	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  003e4	8b 45 dc	 mov	 eax, DWORD PTR _i$496[ebp]
  003e7	8b 4d 1c	 mov	 ecx, DWORD PTR _dlyl$[ebp]
  003ea	d9 5c 81 fc	 fstp	 DWORD PTR [ecx+eax*4-4]
  003ee	eb bc		 jmp	 SHORT $L529
$L530:

; 123  :         dlyl[ordm1] = tapsh0 * inSamps[0]
; 124  :                     - tapsh00 * outSamps[0];

  003f0	8b 55 08	 mov	 edx, DWORD PTR _inSamps$[ebp]
  003f3	d9 45 cc	 fld	 DWORD PTR _tapsh0$504[ebp]
  003f6	d8 0a		 fmul	 DWORD PTR [edx]
  003f8	8b 45 0c	 mov	 eax, DWORD PTR _outSamps$[ebp]
  003fb	d9 45 ec	 fld	 DWORD PTR _tapsh00$505[ebp]
  003fe	d8 08		 fmul	 DWORD PTR [eax]
  00400	de e9		 fsubp	 ST(1), ST(0)
  00402	8b 4d e0	 mov	 ecx, DWORD PTR _ordm1$497[ebp]
  00405	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  00408	d9 1c 8a	 fstp	 DWORD PTR [edx+ecx*4]
$L527:

; 125  :       }
; 126  :     } /* end if order > 1 */
; 127  : 
; 128  :     else {

  0040b	e9 98 00 00 00	 jmp	 $L491
$L508:

; 129  :       if (order) {

  00410	83 7d 18 00	 cmp	 DWORD PTR _order$[ebp], 0
  00414	74 5f		 je	 SHORT $L532

; 130  :         for (ni = 0; ni < numIters; ni++) {

  00416	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ni$[ebp], 0
  0041d	eb 09		 jmp	 SHORT $L533
$L534:
  0041f	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00422	83 c0 01	 add	 eax, 1
  00425	89 45 f0	 mov	 DWORD PTR _ni$[ebp], eax
$L533:
  00428	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  0042b	3b 4d 10	 cmp	 ecx, DWORD PTR _numIters$[ebp]
  0042e	7d 43		 jge	 SHORT $L535

; 131  :           outSamps[ni] = taps[0] * inSamps[ni] + dlyl[0];

  00430	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  00433	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00436	8b 4d 08	 mov	 ecx, DWORD PTR _inSamps$[ebp]
  00439	d9 02		 fld	 DWORD PTR [edx]
  0043b	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0043e	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  00441	d8 02		 fadd	 DWORD PTR [edx]
  00443	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00446	8b 4d 0c	 mov	 ecx, DWORD PTR _outSamps$[ebp]
  00449	d9 1c 81	 fstp	 DWORD PTR [ecx+eax*4]

; 132  :           dlyl[0] = taps[1] * inSamps[ni]
; 133  :                   - taps[2] * outSamps[ni];

  0044c	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  0044f	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00452	8b 4d 08	 mov	 ecx, DWORD PTR _inSamps$[ebp]
  00455	d9 42 04	 fld	 DWORD PTR [edx+4]
  00458	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0045b	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  0045e	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00461	8b 4d 0c	 mov	 ecx, DWORD PTR _outSamps$[ebp]
  00464	d9 42 08	 fld	 DWORD PTR [edx+8]
  00467	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0046a	de e9		 fsubp	 ST(1), ST(0)
  0046c	8b 55 1c	 mov	 edx, DWORD PTR _dlyl$[ebp]
  0046f	d9 1a		 fstp	 DWORD PTR [edx]

; 134  :         }

  00471	eb ac		 jmp	 SHORT $L534
$L535:

; 135  :       }
; 136  :       else {

  00473	eb 33		 jmp	 SHORT $L491
$L532:

; 137  :         for (ni = 0; ni < numIters; ni++)

  00475	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ni$[ebp], 0
  0047c	eb 09		 jmp	 SHORT $L537
$L538:
  0047e	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00481	83 c0 01	 add	 eax, 1
  00484	89 45 f0	 mov	 DWORD PTR _ni$[ebp], eax
$L537:
  00487	8b 4d f0	 mov	 ecx, DWORD PTR _ni$[ebp]
  0048a	3b 4d 10	 cmp	 ecx, DWORD PTR _numIters$[ebp]
  0048d	7d 19		 jge	 SHORT $L491

; 138  :         outSamps[ni] = taps[0] * inSamps[ni];

  0048f	8b 55 14	 mov	 edx, DWORD PTR _taps$[ebp]
  00492	8b 45 f0	 mov	 eax, DWORD PTR _ni$[ebp]
  00495	8b 4d 08	 mov	 ecx, DWORD PTR _inSamps$[ebp]
  00498	d9 02		 fld	 DWORD PTR [edx]
  0049a	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0049d	8b 55 f0	 mov	 edx, DWORD PTR _ni$[ebp]
  004a0	8b 45 0c	 mov	 eax, DWORD PTR _outSamps$[ebp]
  004a3	d9 1c 90	 fstp	 DWORD PTR [eax+edx*4]
  004a6	eb d6		 jmp	 SHORT $L538
$L491:

; 139  :       }
; 140  :     }
; 141  :   }
; 142  : }  /* end voxnspiirflt()  */

  004a8	5e		 pop	 esi
  004a9	8b e5		 mov	 esp, ebp
  004ab	5d		 pop	 ebp
  004ac	c2 18 00	 ret	 24			; 00000018H
_VoxNspIIRFlt@24 ENDP
_TEXT	ENDS
END
