; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\hwin.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@PFKLGOHJ@pfX?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LOICBODP@x?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPAFBFME@half_length?5?$DO?52?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _HammingWindowNormSC@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _HammingWindowNorm@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _HanningWindowNorm@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _WindowKernel@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@3eeb851f
PUBLIC	__real@3f0a3d71
PUBLIC	_HammingWindowNormSC@8
PUBLIC	_WindowKernel@16
PUBLIC	??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0M@PFKLGOHJ@pfX?5?$CB?$DN?5NULL?$AA@	; `string'
PUBLIC	??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@		; `string'
EXTRN	__fltused:NEAR
EXTRN	__assert:NEAR
;	COMDAT ??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\hwin.c
CONST	SEGMENT
??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dsound\codecs\voxware\hwin.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFKLGOHJ@pfX?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0M@PFKLGOHJ@pfX?5?$CB?$DN?5NULL?$AA@ DB 'pfX != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@ DB 'iLength > 0', 00H ; `string'
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3eeb851f
CONST	SEGMENT
__real@3eeb851f DD 03eeb851fr			; 0.46
CONST	ENDS
;	COMDAT __real@3f0a3d71
CONST	SEGMENT
__real@3f0a3d71 DD 03f0a3d71r			; 0.54
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _HammingWindowNormSC@8
_TEXT	SEGMENT
_fScale$ = -4
_pfX$ = 8
_iLength$ = 12
_HammingWindowNormSC@8 PROC NEAR			; COMDAT

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 80   :    float fScale;
; 81   : 
; 82   :    assert(pfX != NULL);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pfX$[ebp], 0
  00008	75 14		 jne	 SHORT $L1081
  0000a	6a 52		 push	 82			; 00000052H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@PFKLGOHJ@pfX?5?$CB?$DN?5NULL?$AA@
  00016	e8 00 00 00 00	 call	 __assert
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1081:

; 83   :    assert(iLength > 0);

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  00022	7f 14		 jg	 SHORT $L1082
  00024	6a 53		 push	 83			; 00000053H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
  00030	e8 00 00 00 00	 call	 __assert
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1082:

; 84   : 
; 85   :    fScale = 2.0F/(float) iLength;

  00038	db 45 0c	 fild	 DWORD PTR _iLength$[ebp]
  0003b	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@40000000
  00041	d9 5d fc	 fstp	 DWORD PTR _fScale$[ebp]

; 86   :    WindowKernel( pfX, iLength, 0.54F*fScale, 0.46F*fScale);

  00044	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3eeb851f
  0004a	d8 4d fc	 fmul	 DWORD PTR _fScale$[ebp]
  0004d	51		 push	 ecx
  0004e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00051	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f0a3d71
  00057	d8 4d fc	 fmul	 DWORD PTR _fScale$[ebp]
  0005a	51		 push	 ecx
  0005b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0005e	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  00061	52		 push	 edx
  00062	8b 45 08	 mov	 eax, DWORD PTR _pfX$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _WindowKernel@16

; 87   : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
_HammingWindowNormSC@8 ENDP
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	_HammingWindowNorm@8
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _HammingWindowNorm@8
_TEXT	SEGMENT
_fScale$ = -4
_pfX$ = 8
_iLength$ = 12
_HammingWindowNorm@8 PROC NEAR				; COMDAT

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 107  :    float fScale;
; 108  :  
; 109  :    assert(pfX != NULL);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pfX$[ebp], 0
  00008	75 14		 jne	 SHORT $L1093
  0000a	6a 6d		 push	 109			; 0000006dH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@PFKLGOHJ@pfX?5?$CB?$DN?5NULL?$AA@
  00016	e8 00 00 00 00	 call	 __assert
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1093:

; 110  :    assert(iLength > 0);

  0001e	83 7d 0c 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  00022	7f 14		 jg	 SHORT $L1094
  00024	6a 6e		 push	 110			; 0000006eH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
  00030	e8 00 00 00 00	 call	 __assert
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1094:

; 111  :  
; 112  :    fScale = 1.0F/(0.54F*iLength-0.46F);

  00038	db 45 0c	 fild	 DWORD PTR _iLength$[ebp]
  0003b	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f0a3d71
  00041	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3eeb851f
  00047	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  0004d	d9 5d fc	 fstp	 DWORD PTR _fScale$[ebp]

; 113  :    WindowKernel( pfX, iLength, 0.54F*fScale, 0.46F*fScale);

  00050	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3eeb851f
  00056	d8 4d fc	 fmul	 DWORD PTR _fScale$[ebp]
  00059	51		 push	 ecx
  0005a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0005d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f0a3d71
  00063	d8 4d fc	 fmul	 DWORD PTR _fScale$[ebp]
  00066	51		 push	 ecx
  00067	d9 1c 24	 fstp	 DWORD PTR [esp]
  0006a	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 08	 mov	 eax, DWORD PTR _pfX$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _WindowKernel@16

; 114  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
_HammingWindowNorm@8 ENDP
_TEXT	ENDS
PUBLIC	_HanningWindowNorm@8
; Function compile flags: /Odt
;	COMDAT _HanningWindowNorm@8
_TEXT	SEGMENT
_fScale$ = -4
_pfX$ = 8
_iLength$ = 12
_HanningWindowNorm@8 PROC NEAR				; COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 139  :    float fScale;
; 140  : 
; 141  :    assert(pfX != NULL);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pfX$[ebp], 0
  00008	75 17		 jne	 SHORT $L1100
  0000a	68 8d 00 00 00	 push	 141			; 0000008dH
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@PFKLGOHJ@pfX?5?$CB?$DN?5NULL?$AA@
  00019	e8 00 00 00 00	 call	 __assert
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1100:

; 142  :    assert(iLength > 0);

  00021	83 7d 0c 00	 cmp	 DWORD PTR _iLength$[ebp], 0
  00025	7f 17		 jg	 SHORT $L1101
  00027	68 8e 00 00 00	 push	 142			; 0000008eH
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@FOHMHBAL@iLength?5?$DO?50?$AA@
  00036	e8 00 00 00 00	 call	 __assert
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1101:

; 143  : 
; 144  :    fScale = 1.0F/(float) iLength;

  0003e	db 45 0c	 fild	 DWORD PTR _iLength$[ebp]
  00041	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  00047	d9 5d fc	 fstp	 DWORD PTR _fScale$[ebp]

; 145  :    WindowKernel( pfX, iLength, fScale, fScale);

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _fScale$[ebp]
  0004d	52		 push	 edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _fScale$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _iLength$[ebp]
  00055	51		 push	 ecx
  00056	8b 55 08	 mov	 edx, DWORD PTR _pfX$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 _WindowKernel@16

; 146  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 08 00	 ret	 8
_HanningWindowNorm@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_09LOICBODP@x?5?$CB?$DN?5NULL?$AA@		; `string'
PUBLIC	??_C@_0BA@DPAFBFME@half_length?5?$DO?52?$AA@	; `string'
PUBLIC	__real@40c90fdb
EXTRN	_cos:NEAR
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT ??_C@_09LOICBODP@x?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_09LOICBODP@x?5?$CB?$DN?5NULL?$AA@ DB 'x != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPAFBFME@half_length?5?$DO?52?$AA@
CONST	SEGMENT
??_C@_0BA@DPAFBFME@half_length?5?$DO?52?$AA@ DB 'half_length > 2', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _WindowKernel@16
_TEXT	SEGMENT
tv188 = -36
_r3$ = -32
_half_length$ = -28
_r2$ = -24
_diffCoef$ = -20
_i$ = -16
_r1$ = -12
_rwin$ = -8
_y$ = -4
_x$ = 8
_length$ = 12
_a$ = 16
_b$ = 20
_WindowKernel@16 PROC NEAR				; COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 189  :   int i;
; 190  :   float r2 = b;

  00006	8b 45 14	 mov	 eax, DWORD PTR _b$[ebp]
  00009	89 45 e8	 mov	 DWORD PTR _r2$[ebp], eax

; 191  :   float r3;
; 192  :   float r1;
; 193  :   float rwin;
; 194  :   float *y = &(x[length-1]);

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _length$[ebp]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00012	8d 44 8a fc	 lea	 eax, DWORD PTR [edx+ecx*4-4]
  00016	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 195  :   int half_length = length>>1;

  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _length$[ebp]
  0001c	d1 f9		 sar	 ecx, 1
  0001e	89 4d e4	 mov	 DWORD PTR _half_length$[ebp], ecx

; 196  :   float diffCoef = (float)cos(DB_PI/(float)(length-1));

  00021	8b 55 0c	 mov	 edx, DWORD PTR _length$[ebp]
  00024	83 ea 01	 sub	 edx, 1
  00027	89 55 dc	 mov	 DWORD PTR tv188[ebp], edx
  0002a	db 45 dc	 fild	 DWORD PTR tv188[ebp]
  0002d	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@40c90fdb
  00033	83 ec 08	 sub	 esp, 8
  00036	dd 1c 24	 fstp	 QWORD PTR [esp]
  00039	e8 00 00 00 00	 call	 _cos
  0003e	83 c4 08	 add	 esp, 8
  00041	d9 5d ec	 fstp	 DWORD PTR _diffCoef$[ebp]

; 197  : 
; 198  :   assert(x != NULL);

  00044	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00048	75 17		 jne	 SHORT $L1105
  0004a	68 c6 00 00 00	 push	 198			; 000000c6H
  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LOICBODP@x?5?$CB?$DN?5NULL?$AA@
  00059	e8 00 00 00 00	 call	 __assert
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1105:

; 199  : 
; 200  :   r3 = diffCoef * b;

  00061	d9 45 ec	 fld	 DWORD PTR _diffCoef$[ebp]
  00064	d8 4d 14	 fmul	 DWORD PTR _b$[ebp]
  00067	d9 5d e0	 fstp	 DWORD PTR _r3$[ebp]

; 201  :   diffCoef *= 2.0F;

  0006a	d9 45 ec	 fld	 DWORD PTR _diffCoef$[ebp]
  0006d	dc c0		 fadd	 ST(0), ST(0)
  0006f	d9 5d ec	 fstp	 DWORD PTR _diffCoef$[ebp]

; 202  : 
; 203  :   assert(half_length > 2);

  00072	83 7d e4 02	 cmp	 DWORD PTR _half_length$[ebp], 2
  00076	7f 17		 jg	 SHORT $L1106
  00078	68 cb 00 00 00	 push	 203			; 000000cbH
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@OHKFMML@c?3?2xbox?2private?2windows?2directx?2@
  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@DPAFBFME@half_length?5?$DO?52?$AA@
  00087	e8 00 00 00 00	 call	 __assert
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L1106:

; 204  :   
; 205  :   /* first windowing the first two points */
; 206  :   rwin = (a-r2); 

  0008f	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  00092	d8 65 e8	 fsub	 DWORD PTR _r2$[ebp]
  00095	d9 5d f8	 fstp	 DWORD PTR _rwin$[ebp]

; 207  :   *x++ *= rwin;    *y-- *= rwin;

  00098	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0009b	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  0009e	d8 0a		 fmul	 DWORD PTR [edx]
  000a0	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000a3	d9 18		 fstp	 DWORD PTR [eax]
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000a8	83 c1 04	 add	 ecx, 4
  000ab	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx
  000ae	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  000b1	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  000b4	d8 0a		 fmul	 DWORD PTR [edx]
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  000b9	d9 18		 fstp	 DWORD PTR [eax]
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  000be	83 e9 04	 sub	 ecx, 4
  000c1	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 208  : 
; 209  :   rwin = (a-r3);

  000c4	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  000c7	d8 65 e0	 fsub	 DWORD PTR _r3$[ebp]
  000ca	d9 5d f8	 fstp	 DWORD PTR _rwin$[ebp]

; 210  :   *x++ *= rwin;    *y-- *= rwin;

  000cd	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000d0	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  000d3	d8 0a		 fmul	 DWORD PTR [edx]
  000d5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  000d8	d9 18		 fstp	 DWORD PTR [eax]
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000dd	83 c1 04	 add	 ecx, 4
  000e0	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx
  000e3	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  000e6	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  000e9	d8 0a		 fmul	 DWORD PTR [edx]
  000eb	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  000ee	d9 18		 fstp	 DWORD PTR [eax]
  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  000f3	83 e9 04	 sub	 ecx, 4
  000f6	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 211  : 
; 212  :   /* then recursively calculate other points */
; 213  :   for (i = 2; i+2 < half_length; i+=3) {

  000f9	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  00100	eb 09		 jmp	 SHORT $L1060
$L1061:
  00102	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00105	83 c2 03	 add	 edx, 3
  00108	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L1060:
  0010b	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0010e	83 c0 02	 add	 eax, 2
  00111	3b 45 e4	 cmp	 eax, DWORD PTR _half_length$[ebp]
  00114	0f 8d d1 00 00
	00		 jge	 $L1062

; 214  :     r1 = diffCoef * r3;     /* diffCoef * y1              */

  0011a	d9 45 ec	 fld	 DWORD PTR _diffCoef$[ebp]
  0011d	d8 4d e0	 fmul	 DWORD PTR _r3$[ebp]
  00120	d9 55 f4	 fst	 DWORD PTR _r1$[ebp]

; 215  :     r1 -= r2;               /* y2 = diffCoef * y1 - y0    */

  00123	d8 65 e8	 fsub	 DWORD PTR _r2$[ebp]
  00126	d9 5d f4	 fstp	 DWORD PTR _r1$[ebp]

; 216  :     rwin = (a-r1);       /* outBuf = y2                */

  00129	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  0012c	d8 65 f4	 fsub	 DWORD PTR _r1$[ebp]
  0012f	d9 5d f8	 fstp	 DWORD PTR _rwin$[ebp]

; 217  :     *x++ *= rwin;  *y-- *= rwin;

  00132	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00135	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  00138	d8 09		 fmul	 DWORD PTR [ecx]
  0013a	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0013d	d9 1a		 fstp	 DWORD PTR [edx]
  0013f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00142	83 c0 04	 add	 eax, 4
  00145	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00148	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  0014b	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  0014e	d8 09		 fmul	 DWORD PTR [ecx]
  00150	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  00153	d9 1a		 fstp	 DWORD PTR [edx]
  00155	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  00158	83 e8 04	 sub	 eax, 4
  0015b	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 218  :  
; 219  :     r2 = diffCoef * r1;     /* diffCoef * y1              */

  0015e	d9 45 ec	 fld	 DWORD PTR _diffCoef$[ebp]
  00161	d8 4d f4	 fmul	 DWORD PTR _r1$[ebp]
  00164	d9 55 e8	 fst	 DWORD PTR _r2$[ebp]

; 220  :     r2 -= r3;               /* y2 = diffCoef * y1 - y0    */

  00167	d8 65 e0	 fsub	 DWORD PTR _r3$[ebp]
  0016a	d9 5d e8	 fstp	 DWORD PTR _r2$[ebp]

; 221  :     rwin = (a-r2);       /* outBuf = y2                */

  0016d	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  00170	d8 65 e8	 fsub	 DWORD PTR _r2$[ebp]
  00173	d9 5d f8	 fstp	 DWORD PTR _rwin$[ebp]

; 222  :     *x++ *= rwin;  *y-- *= rwin;

  00176	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00179	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  0017c	d8 09		 fmul	 DWORD PTR [ecx]
  0017e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00181	d9 1a		 fstp	 DWORD PTR [edx]
  00183	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00186	83 c0 04	 add	 eax, 4
  00189	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  0018c	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  0018f	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  00192	d8 09		 fmul	 DWORD PTR [ecx]
  00194	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  00197	d9 1a		 fstp	 DWORD PTR [edx]
  00199	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  0019c	83 e8 04	 sub	 eax, 4
  0019f	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 223  :  
; 224  :     r3 = diffCoef * r2;     /* diffCoef * y1              */

  001a2	d9 45 ec	 fld	 DWORD PTR _diffCoef$[ebp]
  001a5	d8 4d e8	 fmul	 DWORD PTR _r2$[ebp]
  001a8	d9 55 e0	 fst	 DWORD PTR _r3$[ebp]

; 225  :     r3 -= r1;               /* y2 = diffCoef * y1 - y0    */

  001ab	d8 65 f4	 fsub	 DWORD PTR _r1$[ebp]
  001ae	d9 5d e0	 fstp	 DWORD PTR _r3$[ebp]

; 226  :     rwin = (a-r3);       /* outBuf = y2                */

  001b1	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  001b4	d8 65 e0	 fsub	 DWORD PTR _r3$[ebp]
  001b7	d9 5d f8	 fstp	 DWORD PTR _rwin$[ebp]

; 227  :     *x++ *= rwin;  *y-- *= rwin;

  001ba	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001bd	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  001c0	d8 09		 fmul	 DWORD PTR [ecx]
  001c2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001c5	d9 1a		 fstp	 DWORD PTR [edx]
  001c7	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001ca	83 c0 04	 add	 eax, 4
  001cd	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  001d0	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  001d3	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  001d6	d8 09		 fmul	 DWORD PTR [ecx]
  001d8	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  001db	d9 1a		 fstp	 DWORD PTR [edx]
  001dd	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  001e0	83 e8 04	 sub	 eax, 4
  001e3	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax

; 228  :   }

  001e6	e9 17 ff ff ff	 jmp	 $L1061
$L1062:

; 229  : 
; 230  :   if (i < half_length) {

  001eb	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001ee	3b 4d e4	 cmp	 ecx, DWORD PTR _half_length$[ebp]
  001f1	0f 8d 99 00 00
	00		 jge	 $L1063

; 231  :     r1 = diffCoef * r3;     /* diffCoef * y1              */

  001f7	d9 45 ec	 fld	 DWORD PTR _diffCoef$[ebp]
  001fa	d8 4d e0	 fmul	 DWORD PTR _r3$[ebp]
  001fd	d9 55 f4	 fst	 DWORD PTR _r1$[ebp]

; 232  :     r1 -= r2;               /* y2 = diffCoef * y1 - y0    */

  00200	d8 65 e8	 fsub	 DWORD PTR _r2$[ebp]
  00203	d9 5d f4	 fstp	 DWORD PTR _r1$[ebp]

; 233  :     rwin = (a-r1);       /* outBuf = y2                */

  00206	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  00209	d8 65 f4	 fsub	 DWORD PTR _r1$[ebp]
  0020c	d9 5d f8	 fstp	 DWORD PTR _rwin$[ebp]

; 234  :     *x++ *= rwin;  *y-- *= rwin;

  0020f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00212	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  00215	d8 0a		 fmul	 DWORD PTR [edx]
  00217	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0021a	d9 18		 fstp	 DWORD PTR [eax]
  0021c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0021f	83 c1 04	 add	 ecx, 4
  00222	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx
  00225	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  00228	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  0022b	d8 0a		 fmul	 DWORD PTR [edx]
  0022d	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  00230	d9 18		 fstp	 DWORD PTR [eax]
  00232	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  00235	83 e9 04	 sub	 ecx, 4
  00238	89 4d fc	 mov	 DWORD PTR _y$[ebp], ecx

; 235  :     i++;

  0023b	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0023e	83 c2 01	 add	 edx, 1
  00241	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx

; 236  : 
; 237  :     if (i < half_length) {

  00244	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00247	3b 45 e4	 cmp	 eax, DWORD PTR _half_length$[ebp]
  0024a	7d 44		 jge	 SHORT $L1063

; 238  :       r2 = diffCoef * r1;     /* diffCoef * y1              */

  0024c	d9 45 ec	 fld	 DWORD PTR _diffCoef$[ebp]
  0024f	d8 4d f4	 fmul	 DWORD PTR _r1$[ebp]
  00252	d9 55 e8	 fst	 DWORD PTR _r2$[ebp]

; 239  :       r2 -= r3;               /* y2 = diffCoef * y1 - y0    */

  00255	d8 65 e0	 fsub	 DWORD PTR _r3$[ebp]
  00258	d9 5d e8	 fstp	 DWORD PTR _r2$[ebp]

; 240  :       rwin = (a-r2);       /* outBuf = y2                */

  0025b	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  0025e	d8 65 e8	 fsub	 DWORD PTR _r2$[ebp]
  00261	d9 5d f8	 fstp	 DWORD PTR _rwin$[ebp]

; 241  :       *x++ *= rwin;  *y-- *= rwin;

  00264	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00267	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  0026a	d8 09		 fmul	 DWORD PTR [ecx]
  0026c	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0026f	d9 1a		 fstp	 DWORD PTR [edx]
  00271	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00274	83 c0 04	 add	 eax, 4
  00277	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _y$[ebp]
  0027d	d9 45 f8	 fld	 DWORD PTR _rwin$[ebp]
  00280	d8 09		 fmul	 DWORD PTR [ecx]
  00282	8b 55 fc	 mov	 edx, DWORD PTR _y$[ebp]
  00285	d9 1a		 fstp	 DWORD PTR [edx]
  00287	8b 45 fc	 mov	 eax, DWORD PTR _y$[ebp]
  0028a	83 e8 04	 sub	 eax, 4
  0028d	89 45 fc	 mov	 DWORD PTR _y$[ebp], eax
$L1063:

; 242  :     }
; 243  :   }
; 244  : 
; 245  :   if (length & 1)

  00290	8b 4d 0c	 mov	 ecx, DWORD PTR _length$[ebp]
  00293	83 e1 01	 and	 ecx, 1
  00296	85 c9		 test	 ecx, ecx
  00298	74 19		 je	 SHORT $L1044

; 246  :     *x++ *= (a+b);

  0029a	d9 45 10	 fld	 DWORD PTR _a$[ebp]
  0029d	d8 45 14	 fadd	 DWORD PTR _b$[ebp]
  002a0	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  002a3	d8 0a		 fmul	 DWORD PTR [edx]
  002a5	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  002a8	d9 18		 fstp	 DWORD PTR [eax]
  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002ad	83 c1 04	 add	 ecx, 4
  002b0	89 4d 08	 mov	 DWORD PTR _x$[ebp], ecx
$L1044:

; 247  : }

  002b3	8b e5		 mov	 esp, ebp
  002b5	5d		 pop	 ebp
  002b6	c2 10 00	 ret	 16			; 00000010H
_WindowKernel@16 ENDP
_TEXT	ENDS
END
