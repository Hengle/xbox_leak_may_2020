; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\dft.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxDFT@24
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxDFT@24
EXTRN	_sinTBL_32:DWORD
EXTRN	_cosTBL_32:DWORD
EXTRN	_fRadiansToIndex:DWORD
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\dft.c
;	COMDAT _VoxDFT@24
_TEXT	SEGMENT
_j$ = -48
_pfx1$ = -44
_ftmp$ = -40
_fImag$ = -36
_iArg0$ = -32
_fReal$ = -28
_iArg$ = -24
_fCosArg$ = -20
_fSinArg$ = -16
_fArg0$ = -12
_i$ = -8
_pfx2$ = -4
_pfx$ = 8
_iLength$ = 12
_fOmega$ = 16
_iNFreq$ = 20
_pfXr$ = 24
_pfXi$ = 28
_VoxDFT@24 PROC NEAR					; COMDAT

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 81   :    int   i, j;
; 82   :    int   iArg0;
; 83   :    int   iArg;
; 84   :    float fArg0;
; 85   :    float fCosArg;
; 86   :    float fSinArg;
; 87   :    float fReal;
; 88   :    float fImag;
; 89   :    float *pfx1;
; 90   :    float *pfx2;
; 91   :    float ftmp;
; 92   : 
; 93   :    fArg0 = 0.0F;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _fArg0$[ebp], 0

; 94   :    for (i=iNFreq; i; i--) 

  0000d	8b 45 14	 mov	 eax, DWORD PTR _iNFreq$[ebp]
  00010	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
  00013	eb 09		 jmp	 SHORT $L632
$L633:
  00015	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00018	83 e9 01	 sub	 ecx, 1
  0001b	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L632:
  0001e	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  00022	0f 84 84 01 00
	00		 je	 $L619

; 95   :    {
; 96   :       /*-------------------------------------------
; 97   :         Set the data pointers to the center of the
; 98   :           analysis window.
; 99   :       -------------------------------------------*/
; 100  :       pfx1 = pfx2 = pfx + (iLength>>1);

  00028	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  0002b	d1 fa		 sar	 edx, 1
  0002d	8b 45 08	 mov	 eax, DWORD PTR _pfx$[ebp]
  00030	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00033	89 4d fc	 mov	 DWORD PTR _pfx2$[ebp], ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _pfx2$[ebp]
  00039	89 55 d4	 mov	 DWORD PTR _pfx1$[ebp], edx

; 101  : 
; 102  :       /*-------------------------------------------
; 103  :         Set the frequency
; 104  :       -------------------------------------------*/
; 105  :       fArg0 += fOmega;

  0003c	d9 45 f4	 fld	 DWORD PTR _fArg0$[ebp]
  0003f	d8 45 10	 fadd	 DWORD PTR _fOmega$[ebp]
  00042	d9 5d f4	 fstp	 DWORD PTR _fArg0$[ebp]

; 106  : 
; 107  :       /*-------------------------------------------
; 108  :         Quantize the frequency and set up indexing
; 109  :           constants.
; 110  :       -------------------------------------------*/
; 111  :       ftmp = fRadiansToIndex*fArg0;

  00045	d9 05 00 00 00
	00		 fld	 DWORD PTR _fRadiansToIndex
  0004b	d8 4d f4	 fmul	 DWORD PTR _fArg0$[ebp]
  0004e	d9 5d d8	 fstp	 DWORD PTR _ftmp$[ebp]

; 112  :       VoxROUND2pos(ftmp, iArg0);

  00051	d9 45 d8	 fld	 DWORD PTR _ftmp$[ebp]
  00054	db 5d e0	 fistp	 DWORD PTR _iArg0$[ebp]

; 113  :       iArg = iArg0 & TRIG_MASK;

  00057	8b 45 e0	 mov	 eax, DWORD PTR _iArg0$[ebp]
  0005a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0005f	89 45 e8	 mov	 DWORD PTR _iArg$[ebp], eax

; 114  : 
; 115  :       /*-------------------------------------------
; 116  :         Start with the point at the center of the
; 117  :           analysis window.
; 118  :       -------------------------------------------*/
; 119  :       fReal = *pfx1;           /* cos(0.0) = 1.0 */

  00062	8b 4d d4	 mov	 ecx, DWORD PTR _pfx1$[ebp]
  00065	8b 11		 mov	 edx, DWORD PTR [ecx]
  00067	89 55 e4	 mov	 DWORD PTR _fReal$[ebp], edx

; 120  :       fImag = 0.0F;            /* sin(0.0) = 0.0 */

  0006a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _fImag$[ebp], 0

; 121  : 
; 122  :       /*-------------------------------------------
; 123  :         Increment/decrement pointers
; 124  :       -------------------------------------------*/
; 125  :       pfx1++;

  00071	8b 45 d4	 mov	 eax, DWORD PTR _pfx1$[ebp]
  00074	83 c0 04	 add	 eax, 4
  00077	89 45 d4	 mov	 DWORD PTR _pfx1$[ebp], eax

; 126  :       pfx2--;

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _pfx2$[ebp]
  0007d	83 e9 04	 sub	 ecx, 4
  00080	89 4d fc	 mov	 DWORD PTR _pfx2$[ebp], ecx

; 127  : 
; 128  :       /*-------------------------------------------
; 129  :         Process most of the analysis window.
; 130  :       -------------------------------------------*/
; 131  :       for (j=(iLength>>1)-1; j; j--) 

  00083	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  00086	d1 fa		 sar	 edx, 1
  00088	83 ea 01	 sub	 edx, 1
  0008b	89 55 d0	 mov	 DWORD PTR _j$[ebp], edx
  0008e	eb 09		 jmp	 SHORT $L635
$L636:
  00090	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  00093	83 e8 01	 sub	 eax, 1
  00096	89 45 d0	 mov	 DWORD PTR _j$[ebp], eax
$L635:
  00099	83 7d d0 00	 cmp	 DWORD PTR _j$[ebp], 0
  0009d	0f 84 82 00 00
	00		 je	 $L637

; 132  :       {
; 133  :          fCosArg = cosTBL_32[iArg];        /* get cos(w)            */

  000a3	8b 4d e8	 mov	 ecx, DWORD PTR _iArg$[ebp]
  000a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _cosTBL_32
  000ac	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000af	89 45 ec	 mov	 DWORD PTR _fCosArg$[ebp], eax

; 134  :          fSinArg = sinTBL_32[iArg];        /* get sin(w)            */

  000b2	8b 4d e8	 mov	 ecx, DWORD PTR _iArg$[ebp]
  000b5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sinTBL_32
  000bb	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000be	89 45 f0	 mov	 DWORD PTR _fSinArg$[ebp], eax

; 135  :          fReal += *pfx1 * fCosArg;         /* cos(-w) = cos(w)      */

  000c1	8b 4d d4	 mov	 ecx, DWORD PTR _pfx1$[ebp]
  000c4	d9 45 ec	 fld	 DWORD PTR _fCosArg$[ebp]
  000c7	d8 09		 fmul	 DWORD PTR [ecx]
  000c9	d8 45 e4	 fadd	 DWORD PTR _fReal$[ebp]
  000cc	d9 5d e4	 fstp	 DWORD PTR _fReal$[ebp]

; 136  :          fReal += *pfx2 * fCosArg;

  000cf	8b 55 fc	 mov	 edx, DWORD PTR _pfx2$[ebp]
  000d2	d9 45 ec	 fld	 DWORD PTR _fCosArg$[ebp]
  000d5	d8 0a		 fmul	 DWORD PTR [edx]
  000d7	d8 45 e4	 fadd	 DWORD PTR _fReal$[ebp]
  000da	d9 5d e4	 fstp	 DWORD PTR _fReal$[ebp]

; 137  :          fImag -= *pfx1++ * fSinArg;       /* sin(-w) = -sin(-w)    */

  000dd	8b 45 d4	 mov	 eax, DWORD PTR _pfx1$[ebp]
  000e0	d9 45 f0	 fld	 DWORD PTR _fSinArg$[ebp]
  000e3	d8 08		 fmul	 DWORD PTR [eax]
  000e5	d8 6d dc	 fsubr	 DWORD PTR _fImag$[ebp]
  000e8	d9 5d dc	 fstp	 DWORD PTR _fImag$[ebp]
  000eb	8b 4d d4	 mov	 ecx, DWORD PTR _pfx1$[ebp]
  000ee	83 c1 04	 add	 ecx, 4
  000f1	89 4d d4	 mov	 DWORD PTR _pfx1$[ebp], ecx

; 138  :          fImag += *pfx2-- * fSinArg;

  000f4	8b 55 fc	 mov	 edx, DWORD PTR _pfx2$[ebp]
  000f7	d9 45 f0	 fld	 DWORD PTR _fSinArg$[ebp]
  000fa	d8 0a		 fmul	 DWORD PTR [edx]
  000fc	d8 45 dc	 fadd	 DWORD PTR _fImag$[ebp]
  000ff	d9 5d dc	 fstp	 DWORD PTR _fImag$[ebp]
  00102	8b 45 fc	 mov	 eax, DWORD PTR _pfx2$[ebp]
  00105	83 e8 04	 sub	 eax, 4
  00108	89 45 fc	 mov	 DWORD PTR _pfx2$[ebp], eax

; 139  :          iArg += iArg0;                    /* increment phase index */

  0010b	8b 4d e8	 mov	 ecx, DWORD PTR _iArg$[ebp]
  0010e	03 4d e0	 add	 ecx, DWORD PTR _iArg0$[ebp]
  00111	89 4d e8	 mov	 DWORD PTR _iArg$[ebp], ecx

; 140  :          iArg &= TRIG_MASK;                /* mask phase index      */

  00114	8b 55 e8	 mov	 edx, DWORD PTR _iArg$[ebp]
  00117	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0011d	89 55 e8	 mov	 DWORD PTR _iArg$[ebp], edx

; 141  :       }

  00120	e9 6b ff ff ff	 jmp	 $L636
$L637:

; 142  : 
; 143  :       /*-------------------------------------------
; 144  :         Add the first point in the of the analysis
; 145  :           window.
; 146  :       -------------------------------------------*/
; 147  :       fCosArg = cosTBL_32[iArg];

  00125	8b 45 e8	 mov	 eax, DWORD PTR _iArg$[ebp]
  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _cosTBL_32
  0012e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00131	89 55 ec	 mov	 DWORD PTR _fCosArg$[ebp], edx

; 148  :       fSinArg = sinTBL_32[iArg];

  00134	8b 45 e8	 mov	 eax, DWORD PTR _iArg$[ebp]
  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _sinTBL_32
  0013d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00140	89 55 f0	 mov	 DWORD PTR _fSinArg$[ebp], edx

; 149  :       fReal += *pfx2 * fCosArg;

  00143	8b 45 fc	 mov	 eax, DWORD PTR _pfx2$[ebp]
  00146	d9 45 ec	 fld	 DWORD PTR _fCosArg$[ebp]
  00149	d8 08		 fmul	 DWORD PTR [eax]
  0014b	d8 45 e4	 fadd	 DWORD PTR _fReal$[ebp]
  0014e	d9 5d e4	 fstp	 DWORD PTR _fReal$[ebp]

; 150  :       fImag += *pfx2 * fSinArg;

  00151	8b 4d fc	 mov	 ecx, DWORD PTR _pfx2$[ebp]
  00154	d9 45 f0	 fld	 DWORD PTR _fSinArg$[ebp]
  00157	d8 09		 fmul	 DWORD PTR [ecx]
  00159	d8 45 dc	 fadd	 DWORD PTR _fImag$[ebp]
  0015c	d9 5d dc	 fstp	 DWORD PTR _fImag$[ebp]

; 151  : 
; 152  :       /*-------------------------------------------
; 153  :         An odd length window has one more point
; 154  :           at the end.
; 155  :       -------------------------------------------*/
; 156  :       if (iLength&1) 

  0015f	8b 55 0c	 mov	 edx, DWORD PTR _iLength$[ebp]
  00162	83 e2 01	 and	 edx, 1
  00165	85 d2		 test	 edx, edx
  00167	74 1c		 je	 SHORT $L638

; 157  :       {
; 158  :          fReal += *pfx1 * fCosArg;

  00169	8b 45 d4	 mov	 eax, DWORD PTR _pfx1$[ebp]
  0016c	d9 45 ec	 fld	 DWORD PTR _fCosArg$[ebp]
  0016f	d8 08		 fmul	 DWORD PTR [eax]
  00171	d8 45 e4	 fadd	 DWORD PTR _fReal$[ebp]
  00174	d9 5d e4	 fstp	 DWORD PTR _fReal$[ebp]

; 159  :          fImag -= *pfx1 * fSinArg;

  00177	8b 4d d4	 mov	 ecx, DWORD PTR _pfx1$[ebp]
  0017a	d9 45 f0	 fld	 DWORD PTR _fSinArg$[ebp]
  0017d	d8 09		 fmul	 DWORD PTR [ecx]
  0017f	d8 6d dc	 fsubr	 DWORD PTR _fImag$[ebp]
  00182	d9 5d dc	 fstp	 DWORD PTR _fImag$[ebp]
$L638:

; 160  :       }
; 161  : 
; 162  :       /*-------------------------------------------
; 163  :         Store the spectral sample.
; 164  :       -------------------------------------------*/
; 165  :       *pfXr++ = fReal;

  00185	8b 55 18	 mov	 edx, DWORD PTR _pfXr$[ebp]
  00188	8b 45 e4	 mov	 eax, DWORD PTR _fReal$[ebp]
  0018b	89 02		 mov	 DWORD PTR [edx], eax
  0018d	8b 4d 18	 mov	 ecx, DWORD PTR _pfXr$[ebp]
  00190	83 c1 04	 add	 ecx, 4
  00193	89 4d 18	 mov	 DWORD PTR _pfXr$[ebp], ecx

; 166  :       *pfXi++ = fImag;

  00196	8b 55 1c	 mov	 edx, DWORD PTR _pfXi$[ebp]
  00199	8b 45 dc	 mov	 eax, DWORD PTR _fImag$[ebp]
  0019c	89 02		 mov	 DWORD PTR [edx], eax
  0019e	8b 4d 1c	 mov	 ecx, DWORD PTR _pfXi$[ebp]
  001a1	83 c1 04	 add	 ecx, 4
  001a4	89 4d 1c	 mov	 DWORD PTR _pfXi$[ebp], ecx

; 167  :    }

  001a7	e9 69 fe ff ff	 jmp	 $L633
$L619:

; 168  : 
; 169  : 
; 170  : }

  001ac	8b e5		 mov	 esp, ebp
  001ae	5d		 pop	 ebp
  001af	c2 18 00	 ret	 24			; 00000018H
_VoxDFT@24 ENDP
_TEXT	ENDS
END
