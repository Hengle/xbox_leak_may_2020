; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\vector.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _vecInit@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecFree@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecAddElementAt@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecAddElement@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecDelElement@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecRemoveAllElements@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecFindElementFrom@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecFindElement@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecGetNextElement@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecGetData@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecSetData@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecGetFirstElement@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _vecGetLastElement@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_vecInit@0
EXTRN	_calloc:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\vector.c
;	COMDAT _vecInit@0
_TEXT	SEGMENT
_pVector$ = -4
_vecInit@0 PROC NEAR					; COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 76   :    VECTOR *pVector=NULL;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVector$[ebp], 0

; 77   :    if(VOX_MEM_INIT(pVector,1,sizeof(VECTOR)))

  0000b	6a 08		 push	 8
  0000d	6a 01		 push	 1
  0000f	e8 00 00 00 00	 call	 _calloc
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 fc	 mov	 DWORD PTR _pVector$[ebp], eax
  0001a	83 7d fc 00	 cmp	 DWORD PTR _pVector$[ebp], 0
  0001e	75 04		 jne	 SHORT $L905

; 78   :      return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 16		 jmp	 SHORT $L901
$L905:

; 79   :    else 
; 80   :    {
; 81   :       pVector->pHead=NULL;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _pVector$[ebp]
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 82   :       pVector->pTail=NULL;

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  00030	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 83   :       return pVector;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _pVector$[ebp]
$L901:

; 84   :    } 
; 85   : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_vecInit@0 ENDP
_TEXT	ENDS
PUBLIC	_vecFree@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _vecFree@4
_TEXT	SEGMENT
_pvVector$ = 8
_vecFree@4 PROC NEAR					; COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  :    VOX_MEM_FREE(pvVector)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pvVector$[ebp], 0
  00007	74 13		 je	 SHORT $L912
  00009	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _free
  00012	83 c4 04	 add	 esp, 4
  00015	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pvVector$[ebp], 0
$L912:

; 104  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
_vecFree@4 ENDP
_TEXT	ENDS
PUBLIC	_vecAddElementAt@16
; Function compile flags: /Odt
;	COMDAT _vecAddElementAt@16
_TEXT	SEGMENT
tv67 = -20
_pPrevious$ = -16
_pInsert$ = -12
_pVectorElement$ = -8
_pVector$ = -4
_pvVector$ = 8
_pvElement$ = 12
_pMem$ = 16
_direction$ = 20
_vecAddElementAt@16 PROC NEAR				; COMDAT

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 138  :    VECTOR *pVector=(VECTOR *)pvVector;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pVector$[ebp], eax

; 139  :    VECTOR_ELEMENT *pVectorElement=(VECTOR_ELEMENT *)pvElement;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pvElement$[ebp]
  0000f	89 4d f8	 mov	 DWORD PTR _pVectorElement$[ebp], ecx

; 140  :    VECTOR_ELEMENT *pPrevious=NULL, *pInsert=NULL;

  00012	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pPrevious$[ebp], 0
  00019	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pInsert$[ebp], 0

; 141  : 
; 142  :    pPrevious=(direction==FORWARDS)?pVectorElement->pNext:pVectorElement->pLast;

  00020	83 7d 14 01	 cmp	 DWORD PTR _direction$[ebp], 1
  00024	75 0b		 jne	 SHORT $L1061
  00026	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00029	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002c	89 45 ec	 mov	 DWORD PTR tv67[ebp], eax
  0002f	eb 09		 jmp	 SHORT $L1062
$L1061:
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  00034	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00037	89 55 ec	 mov	 DWORD PTR tv67[ebp], edx
$L1062:
  0003a	8b 45 ec	 mov	 eax, DWORD PTR tv67[ebp]
  0003d	89 45 f0	 mov	 DWORD PTR _pPrevious$[ebp], eax

; 143  : 
; 144  :    if(VOX_MEM_INIT(pInsert, 1,sizeof(VECTOR_ELEMENT)))

  00040	6a 0c		 push	 12			; 0000000cH
  00042	6a 01		 push	 1
  00044	e8 00 00 00 00	 call	 _calloc
  00049	83 c4 08	 add	 esp, 8
  0004c	89 45 f4	 mov	 DWORD PTR _pInsert$[ebp], eax
  0004f	83 7d f4 00	 cmp	 DWORD PTR _pInsert$[ebp], 0
  00053	75 04		 jne	 SHORT $L933

; 145  :      return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	eb 6c		 jmp	 SHORT $L923
$L933:

; 146  :    else {
; 147  :       if(direction==FORWARDS) {

  00059	83 7d 14 01	 cmp	 DWORD PTR _direction$[ebp], 1
  0005d	75 1d		 jne	 SHORT $L936

; 148  :          pInsert->pNext=pPrevious;

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR _pInsert$[ebp]
  00062	8b 55 f0	 mov	 edx, DWORD PTR _pPrevious$[ebp]
  00065	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 149  :          pInsert->pLast=pVectorElement;

  00068	8b 45 f4	 mov	 eax, DWORD PTR _pInsert$[ebp]
  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  0006e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 150  :          pVectorElement->pNext=pInsert;

  00071	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00074	8b 45 f4	 mov	 eax, DWORD PTR _pInsert$[ebp]
  00077	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 151  :       } else {

  0007a	eb 1b		 jmp	 SHORT $L937
$L936:

; 152  :          pInsert->pNext=pVectorElement;

  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _pInsert$[ebp]
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00082	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 153  :          pInsert->pLast=pPrevious;

  00085	8b 45 f4	 mov	 eax, DWORD PTR _pInsert$[ebp]
  00088	8b 4d f0	 mov	 ecx, DWORD PTR _pPrevious$[ebp]
  0008b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 154  :          pVectorElement->pLast=pInsert;

  0008e	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00091	8b 45 f4	 mov	 eax, DWORD PTR _pInsert$[ebp]
  00094	89 42 08	 mov	 DWORD PTR [edx+8], eax
$L937:

; 155  :       }
; 156  : 
; 157  :       pInsert->pMem=pMem;

  00097	8b 4d f4	 mov	 ecx, DWORD PTR _pInsert$[ebp]
  0009a	8b 55 10	 mov	 edx, DWORD PTR _pMem$[ebp]
  0009d	89 11		 mov	 DWORD PTR [ecx], edx

; 158  : 
; 159  :       if(!(pInsert->pNext))

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _pInsert$[ebp]
  000a2	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000a6	75 09		 jne	 SHORT $L938

; 160  :          pVector->pTail=pInsert;

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  000ab	8b 55 f4	 mov	 edx, DWORD PTR _pInsert$[ebp]
  000ae	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$L938:

; 161  :       if(!(pInsert->pLast))

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _pInsert$[ebp]
  000b4	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000b8	75 08		 jne	 SHORT $L939

; 162  :          pVector->pHead=pInsert;

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  000bd	8b 55 f4	 mov	 edx, DWORD PTR _pInsert$[ebp]
  000c0	89 11		 mov	 DWORD PTR [ecx], edx
$L939:

; 163  : 
; 164  :       return pInsert; /* user should check for NULL; */

  000c2	8b 45 f4	 mov	 eax, DWORD PTR _pInsert$[ebp]
$L923:

; 165  :    }
; 166  : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 10 00	 ret	 16			; 00000010H
_vecAddElementAt@16 ENDP
_TEXT	ENDS
PUBLIC	_vecAddElement@12
; Function compile flags: /Odt
;	COMDAT _vecAddElement@12
_TEXT	SEGMENT
tv79 = -12
_pVectorElement$ = -8
_pVector$ = -4
_pvVector$ = 8
_pMem$ = 12
_direction$ = 16
_vecAddElement@12 PROC NEAR				; COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 200  :    VECTOR *pVector=(VECTOR *)pvVector;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pVector$[ebp], eax

; 201  :    VECTOR_ELEMENT *pVectorElement=NULL;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVectorElement$[ebp], 0

; 202  : 
; 203  :    if(!(pVector->pTail)) { 

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  00016	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0001a	75 50		 jne	 SHORT $L951

; 204  :       if(VOX_MEM_INIT(pVectorElement=pVector->pTail=pVector->pHead, 1,
; 205  :          sizeof(VECTOR_ELEMENT))) 

  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	6a 01		 push	 1
  00020	e8 00 00 00 00	 call	 _calloc
  00025	83 c4 08	 add	 esp, 8
  00028	8b 55 fc	 mov	 edx, DWORD PTR _pVector$[ebp]
  0002b	89 02		 mov	 DWORD PTR [edx], eax
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _pVector$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00038	8b 45 fc	 mov	 eax, DWORD PTR _pVector$[ebp]
  0003b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003e	89 4d f8	 mov	 DWORD PTR _pVectorElement$[ebp], ecx
  00041	83 7d f8 00	 cmp	 DWORD PTR _pVectorElement$[ebp], 0
  00045	75 04		 jne	 SHORT $L953

; 206  :          return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 4f		 jmp	 SHORT $L946
$L953:

; 207  :       else {
; 208  :          pVectorElement->pLast=NULL;

  0004b	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  0004e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 209  :          pVectorElement->pNext=NULL;

  00055	8b 45 f8	 mov	 eax, DWORD PTR _pVectorElement$[ebp]
  00058	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 210  :          pVectorElement->pMem=pMem;

  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  00062	8b 55 0c	 mov	 edx, DWORD PTR _pMem$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 211  :       
; 212  :          return (pVectorElement);

  00067	8b 45 f8	 mov	 eax, DWORD PTR _pVectorElement$[ebp]
  0006a	eb 2e		 jmp	 SHORT $L946
$L951:

; 213  :         }
; 214  :    } else
; 215  :       return(vecAddElementAt(pVector, (direction==FORWARDS)?pVector->pTail:pVector->pHead,
; 216  :          pMem, direction));

  0006c	83 7d 10 01	 cmp	 DWORD PTR _direction$[ebp], 1
  00070	75 0b		 jne	 SHORT $L1066
  00072	8b 45 fc	 mov	 eax, DWORD PTR _pVector$[ebp]
  00075	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00078	89 4d f4	 mov	 DWORD PTR tv79[ebp], ecx
  0007b	eb 08		 jmp	 SHORT $L1067
$L1066:
  0007d	8b 55 fc	 mov	 edx, DWORD PTR _pVector$[ebp]
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	89 45 f4	 mov	 DWORD PTR tv79[ebp], eax
$L1067:
  00085	8b 4d 10	 mov	 ecx, DWORD PTR _direction$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 0c	 mov	 edx, DWORD PTR _pMem$[ebp]
  0008c	52		 push	 edx
  0008d	8b 45 f4	 mov	 eax, DWORD PTR tv79[ebp]
  00090	50		 push	 eax
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 _vecAddElementAt@16
$L946:

; 217  : }

  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
_vecAddElement@12 ENDP
_TEXT	ENDS
PUBLIC	_vecDelElement@8
; Function compile flags: /Odt
;	COMDAT _vecDelElement@8
_TEXT	SEGMENT
_pVectorElement$ = -8
_pVector$ = -4
_pvVector$ = 8
_pvElement$ = 12
_vecDelElement@8 PROC NEAR				; COMDAT

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 249  :    VECTOR *pVector=(VECTOR *)pvVector;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pVector$[ebp], eax

; 250  :    VECTOR_ELEMENT *pVectorElement=(VECTOR_ELEMENT *)pvElement;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pvElement$[ebp]
  0000f	89 4d f8	 mov	 DWORD PTR _pVectorElement$[ebp], ecx

; 251  : 
; 252  :    if(pVectorElement->pLast) 

  00012	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00015	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00019	74 11		 je	 SHORT $L968

; 253  :       (pVectorElement->pLast)->pNext=pVectorElement->pNext;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _pVectorElement$[ebp]
  0001e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00021	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00024	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00027	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 254  :    else

  0002a	eb 0b		 jmp	 SHORT $L969
$L968:

; 255  :       pVector->pHead=pVectorElement->pNext;

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  0002f	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	89 01		 mov	 DWORD PTR [ecx], eax
$L969:

; 256  : 
; 257  :    if(pVectorElement->pNext)

  00037	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  0003a	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0003e	74 11		 je	 SHORT $L970

; 258  :       (pVectorElement->pNext)->pLast=pVectorElement->pLast;

  00040	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00043	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  00049	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 259  :    else

  0004f	eb 0c		 jmp	 SHORT $L971
$L970:

; 260  :       pVector->pTail=pVectorElement->pLast;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _pVector$[ebp]
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  00057	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005a	89 50 04	 mov	 DWORD PTR [eax+4], edx
$L971:

; 261  : 
; 262  :    pVectorElement->pMem=NULL;

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _pVectorElement$[ebp]
  00060	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 263  : 
; 264  :    VOX_MEM_FREE(pVectorElement);

  00066	83 7d f8 00	 cmp	 DWORD PTR _pVectorElement$[ebp], 0
  0006a	74 13		 je	 SHORT $L963
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _free
  00075	83 c4 04	 add	 esp, 4
  00078	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pVectorElement$[ebp], 0
$L963:

; 265  : 
; 266  :    return;
; 267  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
_vecDelElement@8 ENDP
_TEXT	ENDS
PUBLIC	_vecRemoveAllElements@4
; Function compile flags: /Odt
;	COMDAT _vecRemoveAllElements@4
_TEXT	SEGMENT
_pLastElement$ = -12
_pVectorElement$ = -8
_pVector$ = -4
_pvVector$ = 8
_vecRemoveAllElements@4 PROC NEAR			; COMDAT

; 297  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 298  :    VECTOR *pVector=(VECTOR *)pvVector;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pVector$[ebp], eax

; 299  :    VECTOR_ELEMENT *pVectorElement=pVector->pHead, *pLastElement=NULL;

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _pVector$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 55 f8	 mov	 DWORD PTR _pVectorElement$[ebp], edx
  00014	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pLastElement$[ebp], 0

; 300  : 
; 301  :    if(pVectorElement) 

  0001b	83 7d f8 00	 cmp	 DWORD PTR _pVectorElement$[ebp], 0
  0001f	74 37		 je	 SHORT $L977
$L984:

; 302  :       do {
; 303  :          pVectorElement->pMem=NULL;;

  00021	8b 45 f8	 mov	 eax, DWORD PTR _pVectorElement$[ebp]
  00024	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 304  :          pLastElement=pVectorElement;

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  0002d	89 4d f4	 mov	 DWORD PTR _pLastElement$[ebp], ecx

; 305  :          pVectorElement=pVectorElement->pNext;

  00030	8b 55 f8	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00033	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00036	89 45 f8	 mov	 DWORD PTR _pVectorElement$[ebp], eax

; 306  :          VOX_MEM_FREE(pLastElement);

  00039	83 7d f4 00	 cmp	 DWORD PTR _pLastElement$[ebp], 0
  0003d	74 13		 je	 SHORT $L985
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _pLastElement$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _free
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pLastElement$[ebp], 0
$L985:

; 307  :       } while(pVectorElement);

  00052	83 7d f8 00	 cmp	 DWORD PTR _pVectorElement$[ebp], 0
  00056	75 c9		 jne	 SHORT $L984
$L977:

; 308  : 
; 309  :    return;
; 310  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
_vecRemoveAllElements@4 ENDP
_TEXT	ENDS
PUBLIC	_vecFindElementFrom@12
; Function compile flags: /Odt
;	COMDAT _vecFindElementFrom@12
_TEXT	SEGMENT
tv69 = -8
_pVectorElement$ = -4
_pvElement$ = 8
_pMem$ = 12
_direction$ = 16
_vecFindElementFrom@12 PROC NEAR			; COMDAT

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 343  :    VECTOR_ELEMENT *pVectorElement=(VECTOR_ELEMENT *)pvElement;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvElement$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _pVectorElement$[ebp], eax
$L1000:

; 344  :    
; 345  :    while(pVectorElement->pMem!=pMem&&pVectorElement) 

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _pVectorElement$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	3b 55 0c	 cmp	 edx, DWORD PTR _pMem$[ebp]
  00014	74 28		 je	 SHORT $L1001
  00016	83 7d fc 00	 cmp	 DWORD PTR _pVectorElement$[ebp], 0
  0001a	74 22		 je	 SHORT $L1001

; 346  :       pVectorElement=(direction==FORWARDS)?pVectorElement->pNext:pVectorElement->pLast;

  0001c	83 7d 10 01	 cmp	 DWORD PTR _direction$[ebp], 1
  00020	75 0b		 jne	 SHORT $L1077
  00022	8b 45 fc	 mov	 eax, DWORD PTR _pVectorElement$[ebp]
  00025	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00028	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
  0002b	eb 09		 jmp	 SHORT $L1078
$L1077:
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _pVectorElement$[ebp]
  00030	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00033	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
$L1078:
  00036	8b 4d f8	 mov	 ecx, DWORD PTR tv69[ebp]
  00039	89 4d fc	 mov	 DWORD PTR _pVectorElement$[ebp], ecx
  0003c	eb ce		 jmp	 SHORT $L1000
$L1001:

; 347  : 
; 348  :    return pVectorElement;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _pVectorElement$[ebp]

; 349  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 0c 00	 ret	 12			; 0000000cH
_vecFindElementFrom@12 ENDP
_TEXT	ENDS
PUBLIC	_vecFindElement@12
; Function compile flags: /Odt
;	COMDAT _vecFindElement@12
_TEXT	SEGMENT
tv69 = -4
_pvVector$ = 8
_pMem$ = 12
_direction$ = 16
_vecFindElement@12 PROC NEAR				; COMDAT

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 382  :    return(vecFindElementFrom((direction==FORWARDS)?
; 383  :       ((VECTOR *)pvVector)->pHead:((VECTOR *)pvVector)->pTail, pMem, direction));

  00004	83 7d 10 01	 cmp	 DWORD PTR _direction$[ebp], 1
  00008	75 0a		 jne	 SHORT $L1082
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	89 4d fc	 mov	 DWORD PTR tv69[ebp], ecx
  00012	eb 09		 jmp	 SHORT $L1083
$L1082:
  00014	8b 55 08	 mov	 edx, DWORD PTR _pvVector$[ebp]
  00017	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001a	89 45 fc	 mov	 DWORD PTR tv69[ebp], eax
$L1083:
  0001d	8b 4d 10	 mov	 ecx, DWORD PTR _direction$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 0c	 mov	 edx, DWORD PTR _pMem$[ebp]
  00024	52		 push	 edx
  00025	8b 45 fc	 mov	 eax, DWORD PTR tv69[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _vecFindElementFrom@12

; 384  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
_vecFindElement@12 ENDP
_TEXT	ENDS
PUBLIC	_vecGetNextElement@8
; Function compile flags: /Odt
;	COMDAT _vecGetNextElement@8
_TEXT	SEGMENT
tv67 = -4
_pvElement$ = 8
_direction$ = 12
_vecGetNextElement@8 PROC NEAR				; COMDAT

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 415  :    return((direction==FORWARDS)?((VECTOR_ELEMENT *)pvElement)->pNext:
; 416  :       ((VECTOR_ELEMENT *)pvElement)->pLast);

  00004	83 7d 0c 01	 cmp	 DWORD PTR _direction$[ebp], 1
  00008	75 0b		 jne	 SHORT $L1087
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pvElement$[ebp]
  0000d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00010	89 4d fc	 mov	 DWORD PTR tv67[ebp], ecx
  00013	eb 09		 jmp	 SHORT $L1088
$L1087:
  00015	8b 55 08	 mov	 edx, DWORD PTR _pvElement$[ebp]
  00018	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001b	89 45 fc	 mov	 DWORD PTR tv67[ebp], eax
$L1088:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR tv67[ebp]

; 417  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
_vecGetNextElement@8 ENDP
_TEXT	ENDS
PUBLIC	_vecGetData@4
; Function compile flags: /Odt
;	COMDAT _vecGetData@4
_TEXT	SEGMENT
_pvElement$ = 8
_vecGetData@4 PROC NEAR					; COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 448  :    return(((VECTOR_ELEMENT *)pvElement)->pMem);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvElement$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 449  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
_vecGetData@4 ENDP
_TEXT	ENDS
PUBLIC	_vecSetData@8
; Function compile flags: /Odt
;	COMDAT _vecSetData@8
_TEXT	SEGMENT
_pvElement$ = 8
_pMem$ = 12
_vecSetData@8 PROC NEAR					; COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  :    ((VECTOR_ELEMENT *)pvElement)->pMem=pMem;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvElement$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _pMem$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 482  :    return;
; 483  : }

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
_vecSetData@8 ENDP
_TEXT	ENDS
PUBLIC	_vecGetFirstElement@4
; Function compile flags: /Odt
;	COMDAT _vecGetFirstElement@4
_TEXT	SEGMENT
_pvVector$ = 8
_vecGetFirstElement@4 PROC NEAR				; COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 514  :    return(((VECTOR *)pvVector)->pHead);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 515  : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
_vecGetFirstElement@4 ENDP
_TEXT	ENDS
PUBLIC	_vecGetLastElement@4
; Function compile flags: /Odt
;	COMDAT _vecGetLastElement@4
_TEXT	SEGMENT
_pvVector$ = 8
_vecGetLastElement@4 PROC NEAR				; COMDAT

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 546  :    return(((VECTOR *)pvVector)->pTail);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvVector$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 547  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
_vecGetLastElement@4 ENDP
_TEXT	ENDS
END
