; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\refinec0.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EB@IMBEDJCM@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@IMBLILMN@deltapitch?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoxRefineC0@28
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	_VoxRefineC0@28
PUBLIC	??_C@_0EB@IMBEDJCM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0P@IMBLILMN@deltapitch?5?$DO?50?$AA@	; `string'
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3f000000
PUBLIC	__real@00000000
PUBLIC	__real@3ec00000
PUBLIC	__real@3f400000
PUBLIC	__real@41000000
PUBLIC	__real@43200000
PUBLIC	__real@3e000000
PUBLIC	__real@3e800000
EXTRN	__assert:NEAR
EXTRN	_ScalarQuant@12:NEAR
EXTRN	_corrfunc@36:NEAR
EXTRN	_GetPitchTable@8:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3fe0000000000000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\refinec0.c
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0EB@IMBEDJCM@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EB@IMBEDJCM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\codecs\voxware\refinec0.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMBLILMN@deltapitch?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0P@IMBLILMN@deltapitch?5?$DO?50?$AA@ DB 'deltapitch > 0', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3ec00000
CONST	SEGMENT
__real@3ec00000 DD 03ec00000r			; 0.375
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@43200000
CONST	SEGMENT
__real@43200000 DD 043200000r			; 160
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoxRefineC0@28
_TEXT	SEGMENT
tv186 = -460
_j$ = -452
_deltapitch$ = -448
_PitchTable$ = -444
_iPeakFrq$ = -440
_fLoEdge$ = -36
_dpitch$ = -32
_fRefinedMax$ = -28
_fHiEdge$ = -24
_PitchTableSize$ = -20
_iPitchIndex$ = -16
_mult_v2$ = -12
_fFltEnergy$ = -8
_fRefinedPeriod$ = -4
_fCoarsePeriod$ = 8
_pfFltPwr$ = 12
_pfPeakFrq$ = 16
_iBpeaks$ = 20
_pfFltEnergy$ = 24
_pfRefinedPeriod$ = 28
_pfRefinedRho$ = 32
_VoxRefineC0@28 PROC NEAR				; COMDAT

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00009	56		 push	 esi

; 52   :   int j;
; 53   :   float  fLoEdge, fHiEdge;
; 54   :   float  fFltEnergy, fRefinedMax, fRefinedPeriod;
; 55   :   float  *PitchTable;
; 56   :   int  PitchTableSize;
; 57   :   unsigned int iPitchIndex;
; 58   :   float  deltapitch, dpitch;
; 59   :   unsigned long mult_v2;
; 60   : 
; 61   :     
; 62   :   STACK_INIT
; 63   :   unsigned long iPeakFrq[MAXHARM];
; 64   :   STACK_INIT_END
; 65   :   STACK_ATTACH (unsigned long *, iPeakFrq) 
; 66   : 
; 67   :   STACK_START
; 68   : 
; 69   :   mult_v2= (unsigned long) (1<<F0_SHIFT_11B);

  0000a	c7 45 f4 00 08
	00 00		 mov	 DWORD PTR _mult_v2$[ebp], 2048 ; 00000800H

; 70   :   
; 71   :   for (j = 0; j < iBpeaks; j++)

  00011	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  0001b	eb 0f		 jmp	 SHORT $L742
$L743:
  0001d	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 85 3c fe ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$L742:
  0002c	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00032	3b 4d 14	 cmp	 ecx, DWORD PTR _iBpeaks$[ebp]
  00035	7d 3f		 jge	 SHORT $L744

; 72   : 	iPeakFrq[j]=(unsigned long)(pfPeakFrq[j]*mult_v2+0.5);

  00037	8b 55 f4	 mov	 edx, DWORD PTR _mult_v2$[ebp]
  0003a	89 95 34 fe ff
	ff		 mov	 DWORD PTR tv186[ebp], edx
  00040	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv186[ebp+4], 0
  0004a	df ad 34 fe ff
	ff		 fild	 QWORD PTR tv186[ebp]
  00050	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00056	8b 4d 10	 mov	 ecx, DWORD PTR _pfPeakFrq$[ebp]
  00059	d8 0c 81	 fmul	 DWORD PTR [ecx+eax*4]
  0005c	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fe0000000000000
  00062	e8 00 00 00 00	 call	 __ftol2
  00067	8b 95 3c fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  0006d	89 84 95 48 fe
	ff ff		 mov	 DWORD PTR _iPeakFrq$[ebp+edx*4], eax
  00074	eb a7		 jmp	 SHORT $L743
$L744:

; 73   : 
; 74   :   /*** Get the pitch table ***/
; 75   :   GetPitchTable(&PitchTable, &PitchTableSize);

  00076	8d 45 ec	 lea	 eax, DWORD PTR _PitchTableSize$[ebp]
  00079	50		 push	 eax
  0007a	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _PitchTable$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _GetPitchTable@8

; 76   :  
; 77   :   /*** Locate the search range for the refined pitch ***/
; 78   : 
; 79   :   fRefinedPeriod = fCoarsePeriod;

  00086	8b 55 08	 mov	 edx, DWORD PTR _fCoarsePeriod$[ebp]
  00089	89 55 fc	 mov	 DWORD PTR _fRefinedPeriod$[ebp], edx

; 80   : 
; 81   :   /*search pitch index from the PitchFunction table*/
; 82   :   iPitchIndex = ScalarQuant( fRefinedPeriod, PitchTable, PitchTableSize );

  0008c	8b 45 ec	 mov	 eax, DWORD PTR _PitchTableSize$[ebp]
  0008f	50		 push	 eax
  00090	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _PitchTable$[ebp]
  00096	51		 push	 ecx
  00097	8b 55 fc	 mov	 edx, DWORD PTR _fRefinedPeriod$[ebp]
  0009a	52		 push	 edx
  0009b	e8 00 00 00 00	 call	 _ScalarQuant@12
  000a0	89 45 f0	 mov	 DWORD PTR _iPitchIndex$[ebp], eax

; 83   :    
; 84   :   /* Find the pitch difference */
; 85   :   if( iPitchIndex >=1) 

  000a3	83 7d f0 01	 cmp	 DWORD PTR _iPitchIndex$[ebp], 1
  000a7	72 52		 jb	 SHORT $L746

; 86   :     {
; 87   :       deltapitch = PitchTable[iPitchIndex]-PitchTable[iPitchIndex-1];

  000a9	8b 45 f0	 mov	 eax, DWORD PTR _iPitchIndex$[ebp]
  000ac	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _PitchTable$[ebp]
  000b2	8b 55 f0	 mov	 edx, DWORD PTR _iPitchIndex$[ebp]
  000b5	8b b5 44 fe ff
	ff		 mov	 esi, DWORD PTR _PitchTable$[ebp]
  000bb	d9 04 81	 fld	 DWORD PTR [ecx+eax*4]
  000be	d8 64 96 fc	 fsub	 DWORD PTR [esi+edx*4-4]
  000c2	d9 9d 40 fe ff
	ff		 fstp	 DWORD PTR _deltapitch$[ebp]

; 88   :       if (iPitchIndex < (unsigned int)(PitchTableSize -1)) 

  000c8	8b 45 ec	 mov	 eax, DWORD PTR _PitchTableSize$[ebp]
  000cb	83 e8 01	 sub	 eax, 1
  000ce	39 45 f0	 cmp	 DWORD PTR _iPitchIndex$[ebp], eax
  000d1	73 26		 jae	 SHORT $L748

; 89   : 	      deltapitch = 0.5F*(PitchTable[iPitchIndex+1]-PitchTable[iPitchIndex-1]);

  000d3	8b 4d f0	 mov	 ecx, DWORD PTR _iPitchIndex$[ebp]
  000d6	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR _PitchTable$[ebp]
  000dc	8b 45 f0	 mov	 eax, DWORD PTR _iPitchIndex$[ebp]
  000df	8b b5 44 fe ff
	ff		 mov	 esi, DWORD PTR _PitchTable$[ebp]
  000e5	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  000e9	d8 64 86 fc	 fsub	 DWORD PTR [esi+eax*4-4]
  000ed	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  000f3	d9 9d 40 fe ff
	ff		 fstp	 DWORD PTR _deltapitch$[ebp]
$L748:

; 90   :     }
; 91   :   else 

  000f9	eb 1f		 jmp	 SHORT $L749
$L746:

; 92   :     {
; 93   :       deltapitch = PitchTable[iPitchIndex+1]-PitchTable[iPitchIndex];

  000fb	8b 4d f0	 mov	 ecx, DWORD PTR _iPitchIndex$[ebp]
  000fe	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR _PitchTable$[ebp]
  00104	8b 45 f0	 mov	 eax, DWORD PTR _iPitchIndex$[ebp]
  00107	8b b5 44 fe ff
	ff		 mov	 esi, DWORD PTR _PitchTable$[ebp]
  0010d	d9 44 8a 04	 fld	 DWORD PTR [edx+ecx*4+4]
  00111	d8 24 86	 fsub	 DWORD PTR [esi+eax*4]
  00114	d9 9d 40 fe ff
	ff		 fstp	 DWORD PTR _deltapitch$[ebp]
$L749:

; 94   :     }
; 95   :   assert(deltapitch > 0);

  0011a	d9 85 40 fe ff
	ff		 fld	 DWORD PTR _deltapitch$[ebp]
  00120	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00126	df e0		 fnstsw	 ax
  00128	f6 c4 41	 test	 ah, 65			; 00000041H
  0012b	74 14		 je	 SHORT $L777
  0012d	6a 5f		 push	 95			; 0000005fH
  0012f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@IMBEDJCM@c?3?2xbox?2private?2windows?2directx?2@
  00134	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@IMBLILMN@deltapitch?5?$DO?50?$AA@
  00139	e8 00 00 00 00	 call	 __assert
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L777:

; 96   : 
; 97   :   /*** Compute the energy in the flattened peaks ***/
; 98   : 
; 99   :   fFltEnergy = 1.E-10F;

  00141	c7 45 f8 ff e6
	db 2e		 mov	 DWORD PTR _fFltEnergy$[ebp], 786163455 ; 2edbe6ffH

; 100  :   for (j = 0; j < iBpeaks; j++)

  00148	c7 85 3c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  00152	eb 0f		 jmp	 SHORT $L753
$L754:
  00154	8b 95 3c fe ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  0015a	83 c2 01	 add	 edx, 1
  0015d	89 95 3c fe ff
	ff		 mov	 DWORD PTR _j$[ebp], edx
$L753:
  00163	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  00169	3b 45 14	 cmp	 eax, DWORD PTR _iBpeaks$[ebp]
  0016c	7d 14		 jge	 SHORT $L755

; 101  :     fFltEnergy += pfFltPwr[j];

  0016e	8b 8d 3c fe ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00174	8b 55 0c	 mov	 edx, DWORD PTR _pfFltPwr$[ebp]
  00177	d9 45 f8	 fld	 DWORD PTR _fFltEnergy$[ebp]
  0017a	d8 04 8a	 fadd	 DWORD PTR [edx+ecx*4]
  0017d	d9 5d f8	 fstp	 DWORD PTR _fFltEnergy$[ebp]
  00180	eb d2		 jmp	 SHORT $L754
$L755:

; 102  : 
; 103  :   fRefinedMax = 0.0F;

  00182	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _fRefinedMax$[ebp], 0

; 104  : 
; 105  :    
; 106  :   /********************************************************************
; 107  :     Find the best pitch candidates from the range: P-0.75dP:P+0.75dP
; 108  :     *******************************************************************/
; 109  :   /* get pitch step-size */
; 110  :   dpitch =FRACTION1*deltapitch;

  00189	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3ec00000
  0018f	d8 8d 40 fe ff
	ff		 fmul	 DWORD PTR _deltapitch$[ebp]
  00195	d9 5d e0	 fstp	 DWORD PTR _dpitch$[ebp]

; 111  : 
; 112  :   /* find the pitch searching range */
; 113  :   fLoEdge = fRefinedPeriod - SRANGE1*deltapitch;

  00198	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f400000
  0019e	d8 8d 40 fe ff
	ff		 fmul	 DWORD PTR _deltapitch$[ebp]
  001a4	d8 6d fc	 fsubr	 DWORD PTR _fRefinedPeriod$[ebp]
  001a7	d9 55 dc	 fst	 DWORD PTR _fLoEdge$[ebp]

; 114  :   if (fLoEdge < (float) MIN_PITCH)

  001aa	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41000000
  001b0	df e0		 fnstsw	 ax
  001b2	f6 c4 05	 test	 ah, 5
  001b5	7a 07		 jp	 SHORT $L757

; 115  :     fLoEdge = (float) MIN_PITCH;

  001b7	c7 45 dc 00 00
	00 41		 mov	 DWORD PTR _fLoEdge$[ebp], 1090519040 ; 41000000H
$L757:

; 116  : 
; 117  :   fHiEdge = fRefinedPeriod + SRANGE1*deltapitch;

  001be	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f400000
  001c4	d8 8d 40 fe ff
	ff		 fmul	 DWORD PTR _deltapitch$[ebp]
  001ca	d8 45 fc	 fadd	 DWORD PTR _fRefinedPeriod$[ebp]
  001cd	d9 55 e8	 fst	 DWORD PTR _fHiEdge$[ebp]

; 118  :   if (fHiEdge > (float) MAX_PITCH)

  001d0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@43200000
  001d6	df e0		 fnstsw	 ax
  001d8	f6 c4 41	 test	 ah, 65			; 00000041H
  001db	75 07		 jne	 SHORT $L760

; 119  :     fHiEdge = (float) MAX_PITCH;

  001dd	c7 45 e8 00 00
	20 43		 mov	 DWORD PTR _fHiEdge$[ebp], 1126170624 ; 43200000H
$L760:

; 120  :   
; 121  :   /* calculate the correlation function and get the best candidate */
; 122  :   corrfunc( dpitch, fLoEdge, fHiEdge, &fRefinedMax, iBpeaks, pfFltPwr, fFltEnergy, 
; 123  : 	   iPeakFrq, &fRefinedPeriod);

  001e4	8d 45 fc	 lea	 eax, DWORD PTR _fRefinedPeriod$[ebp]
  001e7	50		 push	 eax
  001e8	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _iPeakFrq$[ebp]
  001ee	51		 push	 ecx
  001ef	8b 55 f8	 mov	 edx, DWORD PTR _fFltEnergy$[ebp]
  001f2	52		 push	 edx
  001f3	8b 45 0c	 mov	 eax, DWORD PTR _pfFltPwr$[ebp]
  001f6	50		 push	 eax
  001f7	8b 4d 14	 mov	 ecx, DWORD PTR _iBpeaks$[ebp]
  001fa	51		 push	 ecx
  001fb	8d 55 e4	 lea	 edx, DWORD PTR _fRefinedMax$[ebp]
  001fe	52		 push	 edx
  001ff	8b 45 e8	 mov	 eax, DWORD PTR _fHiEdge$[ebp]
  00202	50		 push	 eax
  00203	8b 4d dc	 mov	 ecx, DWORD PTR _fLoEdge$[ebp]
  00206	51		 push	 ecx
  00207	8b 55 e0	 mov	 edx, DWORD PTR _dpitch$[ebp]
  0020a	52		 push	 edx
  0020b	e8 00 00 00 00	 call	 _corrfunc@36

; 124  : 
; 125  :   /********************************************************************
; 126  :     Second run: test from fine resolution: P-0.25dP:P+0.25dP
; 127  :     *******************************************************************/
; 128  :   /* get pitch step-size */
; 129  :   dpitch =FRACTION2*deltapitch;

  00210	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3e000000
  00216	d8 8d 40 fe ff
	ff		 fmul	 DWORD PTR _deltapitch$[ebp]
  0021c	d9 5d e0	 fstp	 DWORD PTR _dpitch$[ebp]

; 130  : 
; 131  :   /* find the pitch searching range */
; 132  :   fLoEdge = fRefinedPeriod - SRANGE2*deltapitch;

  0021f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3e800000
  00225	d8 8d 40 fe ff
	ff		 fmul	 DWORD PTR _deltapitch$[ebp]
  0022b	d8 6d fc	 fsubr	 DWORD PTR _fRefinedPeriod$[ebp]
  0022e	d9 55 dc	 fst	 DWORD PTR _fLoEdge$[ebp]

; 133  :   if (fLoEdge < (float) MIN_PITCH)

  00231	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41000000
  00237	df e0		 fnstsw	 ax
  00239	f6 c4 05	 test	 ah, 5
  0023c	7a 07		 jp	 SHORT $L763

; 134  :     fLoEdge = (float) MIN_PITCH;

  0023e	c7 45 dc 00 00
	00 41		 mov	 DWORD PTR _fLoEdge$[ebp], 1090519040 ; 41000000H
$L763:

; 135  :   fHiEdge = fRefinedPeriod + SRANGE2*deltapitch;

  00245	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3e800000
  0024b	d8 8d 40 fe ff
	ff		 fmul	 DWORD PTR _deltapitch$[ebp]
  00251	d8 45 fc	 fadd	 DWORD PTR _fRefinedPeriod$[ebp]
  00254	d9 55 e8	 fst	 DWORD PTR _fHiEdge$[ebp]

; 136  :   if (fHiEdge > (float) MAX_PITCH)

  00257	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@43200000
  0025d	df e0		 fnstsw	 ax
  0025f	f6 c4 41	 test	 ah, 65			; 00000041H
  00262	75 07		 jne	 SHORT $L766

; 137  :     fHiEdge = (float) MAX_PITCH;

  00264	c7 45 e8 00 00
	20 43		 mov	 DWORD PTR _fHiEdge$[ebp], 1126170624 ; 43200000H
$L766:

; 138  :   
; 139  :   /* calculate the correlation function and get the best candidate */
; 140  :   corrfunc(dpitch, fLoEdge, fHiEdge, &fRefinedMax, iBpeaks, pfFltPwr, fFltEnergy, 
; 141  : 	   iPeakFrq, &fRefinedPeriod);

  0026b	8d 45 fc	 lea	 eax, DWORD PTR _fRefinedPeriod$[ebp]
  0026e	50		 push	 eax
  0026f	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR _iPeakFrq$[ebp]
  00275	51		 push	 ecx
  00276	8b 55 f8	 mov	 edx, DWORD PTR _fFltEnergy$[ebp]
  00279	52		 push	 edx
  0027a	8b 45 0c	 mov	 eax, DWORD PTR _pfFltPwr$[ebp]
  0027d	50		 push	 eax
  0027e	8b 4d 14	 mov	 ecx, DWORD PTR _iBpeaks$[ebp]
  00281	51		 push	 ecx
  00282	8d 55 e4	 lea	 edx, DWORD PTR _fRefinedMax$[ebp]
  00285	52		 push	 edx
  00286	8b 45 e8	 mov	 eax, DWORD PTR _fHiEdge$[ebp]
  00289	50		 push	 eax
  0028a	8b 4d dc	 mov	 ecx, DWORD PTR _fLoEdge$[ebp]
  0028d	51		 push	 ecx
  0028e	8b 55 e0	 mov	 edx, DWORD PTR _dpitch$[ebp]
  00291	52		 push	 edx
  00292	e8 00 00 00 00	 call	 _corrfunc@36

; 142  : 
; 143  :   /*** Compute the correlation coefficient and final refined pitch period ***/
; 144  :  *pfFltEnergy = fFltEnergy;

  00297	8b 45 18	 mov	 eax, DWORD PTR _pfFltEnergy$[ebp]
  0029a	8b 4d f8	 mov	 ecx, DWORD PTR _fFltEnergy$[ebp]
  0029d	89 08		 mov	 DWORD PTR [eax], ecx

; 145  : 
; 146  :  fRefinedMax = 0.5F * fRefinedMax;

  0029f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f000000
  002a5	d8 4d e4	 fmul	 DWORD PTR _fRefinedMax$[ebp]
  002a8	d9 55 e4	 fst	 DWORD PTR _fRefinedMax$[ebp]

; 147  : 
; 148  :  *pfRefinedRho = (fRefinedMax/fFltEnergy);

  002ab	d8 75 f8	 fdiv	 DWORD PTR _fFltEnergy$[ebp]
  002ae	8b 55 20	 mov	 edx, DWORD PTR _pfRefinedRho$[ebp]
  002b1	d9 1a		 fstp	 DWORD PTR [edx]

; 149  : 
; 150  :  *pfRefinedPeriod = fRefinedPeriod;

  002b3	8b 45 1c	 mov	 eax, DWORD PTR _pfRefinedPeriod$[ebp]
  002b6	8b 4d fc	 mov	 ecx, DWORD PTR _fRefinedPeriod$[ebp]
  002b9	89 08		 mov	 DWORD PTR [eax], ecx

; 151  :   
; 152  :  STACK_END
; 153  : 
; 154  :  return 0;

  002bb	66 33 c0	 xor	 ax, ax

; 155  :  
; 156  : } /*VoxRefineC0()*/

  002be	5e		 pop	 esi
  002bf	8b e5		 mov	 esp, ebp
  002c1	5d		 pop	 ebp
  002c2	c2 1c 00	 ret	 28			; 0000001cH
_VoxRefineC0@28 ENDP
_TEXT	ENDS
END
