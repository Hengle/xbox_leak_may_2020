; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\vad2.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _VoiceActivity@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _initVAD@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _freeVAD@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_XVoiceBuildNumberD
;	COMDAT _XVoiceBuildNumberD
XBLD$V	SEGMENT
_XVoiceBuildNumberD DW 05658H
	DW	0494fH
	DW	04543H
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	__real@41200000
PUBLIC	__real@3f333333
PUBLIC	__real@3de66667
PUBLIC	__real@3f000000
PUBLIC	__real@3f7ffff0
PUBLIC	__real@3f59999a
PUBLIC	__real@3e199998
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@41700000
PUBLIC	__real@420c0000
PUBLIC	__real@bfc00000
PUBLIC	__real@427a0000
PUBLIC	__real@3f0353f8
PUBLIC	_VoiceActivity@20
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	_log10:NEAR
;	COMDAT __real@41200000
; File c:\xbox\private\windows\directx\dsound\codecs\voxware\vad2.c
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3de66667
CONST	SEGMENT
__real@3de66667 DD 03de66667r			; 0.1125
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f7ffff0
CONST	SEGMENT
__real@3f7ffff0 DD 03f7ffff0r			; 0.999999
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3e199998
CONST	SEGMENT
__real@3e199998 DD 03e199998r			; 0.15
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@bfc00000
CONST	SEGMENT
__real@bfc00000 DD 0bfc00000r			; -1.5
CONST	ENDS
;	COMDAT __real@427a0000
CONST	SEGMENT
__real@427a0000 DD 0427a0000r			; 62.5
CONST	ENDS
;	COMDAT __real@3f0353f8
CONST	SEGMENT
__real@3f0353f8 DD 03f0353f8r			; 0.513
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _VoiceActivity@20
_TEXT	SEGMENT
tv199 = -28
_dBFutureFrameEnergy$ = -24
_VADThreshold$ = -20
_VADMemBlk$ = -16
_dBCurrentFrameEnergy$ = -12
_FrameVAD$ = -8
_sbnr$ = -4
_hVADMemBlk$ = 8
_FutureFrameEnergy$ = 12
_PitchCorr$ = 16
_VAD$ = 20
_BckgrndSpeech$ = 24
_VoiceActivity@20 PROC NEAR				; COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 171  :    VAD_MemBlk *VADMemBlk;
; 172  :    float       dBFutureFrameEnergy;
; 173  :    float       dBCurrentFrameEnergy;
; 174  :    float       VADThreshold;
; 175  :    float       sbnr;                   /* signal-to-background-noise ratio    */
; 176  :    short       FrameVAD;               /* Instantaneous VAD decision for frame*/
; 177  : 
; 178  :    /*------------------------------------------------
; 179  :      Initialize Variables
; 180  :      ------------------------------------------------*/
; 181  :    VADMemBlk                = (VAD_MemBlk *)hVADMemBlk;

  00006	8b 45 08	 mov	 eax, DWORD PTR _hVADMemBlk$[ebp]
  00009	89 45 f0	 mov	 DWORD PTR _VADMemBlk$[ebp], eax

; 182  :    dBCurrentFrameEnergy     = VADMemBlk->dBFrameEnergy;

  0000c	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	89 55 f4	 mov	 DWORD PTR _dBCurrentFrameEnergy$[ebp], edx

; 183  :    dBFutureFrameEnergy      = 10.0F*(float)log10(FutureFrameEnergy); /* try use RL later */

  00014	d9 45 0c	 fld	 DWORD PTR _FutureFrameEnergy$[ebp]
  00017	83 ec 08	 sub	 esp, 8
  0001a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001d	e8 00 00 00 00	 call	 _log10
  00022	83 c4 08	 add	 esp, 8
  00025	d9 55 e4	 fst	 DWORD PTR tv199[ebp]
  00028	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@41200000
  0002e	d9 5d e8	 fstp	 DWORD PTR _dBFutureFrameEnergy$[ebp]

; 184  :    VADMemBlk->dBFrameEnergy = dBFutureFrameEnergy;

  00031	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00034	8b 4d e8	 mov	 ecx, DWORD PTR _dBFutureFrameEnergy$[ebp]
  00037	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 
; 186  :    /*------------------------------------------------
; 187  :       Update Nominal Voiced Energy Estimate.  
; 188  :       ===============================================
; 189  :       
; 190  :       The energy estimate is only updated when the 
; 191  :       pitch correlation is greater than a threshold
; 192  :       indicating that the frame is most likely voiced.
; 193  : 
; 194  :       The estimate is first decreased slightly, and 
; 195  :       then compared to the current frame energy to 
; 196  :       see which is greater.
; 197  :      ------------------------------------------------*/
; 198  :    if (PitchCorr > VOICED_TH)

  00039	d9 45 10	 fld	 DWORD PTR _PitchCorr$[ebp]
  0003c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f333333
  00042	df e0		 fnstsw	 ax
  00044	f6 c4 41	 test	 ah, 65			; 00000041H
  00047	75 2b		 jne	 SHORT $L992

; 199  :    {
; 200  :       VADMemBlk->NominalVoiced -= VOICED_DEC;

  00049	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  0004c	d9 42 08	 fld	 DWORD PTR [edx+8]
  0004f	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3de66667
  00055	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00058	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 201  :       if (dBCurrentFrameEnergy > VADMemBlk->NominalVoiced)

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  0005e	d9 45 f4	 fld	 DWORD PTR _dBCurrentFrameEnergy$[ebp]
  00061	d8 59 08	 fcomp	 DWORD PTR [ecx+8]
  00064	df e0		 fnstsw	 ax
  00066	f6 c4 41	 test	 ah, 65			; 00000041H
  00069	75 09		 jne	 SHORT $L992

; 202  :          VADMemBlk->NominalVoiced = dBCurrentFrameEnergy;

  0006b	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  0006e	8b 45 f4	 mov	 eax, DWORD PTR _dBCurrentFrameEnergy$[ebp]
  00071	89 42 08	 mov	 DWORD PTR [edx+8], eax
$L992:

; 203  :    }
; 204  :    /*------------------------------------------------
; 205  :       Update Nominal Background Noise Energy Estimate.  
; 206  :       ===============================================
; 207  :       
; 208  :       The energy estimate is only updated when the 
; 209  :       pitch correlation is less than a threshold
; 210  :       indicating that the frame is most likely 
; 211  :       background noise or unvoiced.
; 212  : 
; 213  :       The estimate is first increased slightly, and 
; 214  :       then compared to the current frame energy to 
; 215  :       see which is less.
; 216  : 
; 217  :       Skip the first few frames for file robustness
; 218  :       and initial lookahead energy.
; 219  :      ------------------------------------------------*/
; 220  :    if (VADMemBlk->SkippedFrames > SKIP_FRAMES)

  00074	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  00077	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  0007b	83 fa 04	 cmp	 edx, 4
  0007e	7e 4b		 jle	 SHORT $L994

; 221  :    {
; 222  :       if (PitchCorr < BCKGRND_TH)

  00080	d9 45 10	 fld	 DWORD PTR _PitchCorr$[ebp]
  00083	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f000000
  00089	df e0		 fnstsw	 ax
  0008b	f6 c4 05	 test	 ah, 5
  0008e	7a 3b		 jp	 SHORT $L994

; 223  :       {
; 224  :          VADMemBlk->NominalBckGrnd += BCKGRND_INC;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00093	d9 40 0c	 fld	 DWORD PTR [eax+12]
  00096	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f7ffff0
  0009c	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  0009f	d9 59 0c	 fstp	 DWORD PTR [ecx+12]

; 225  :          if ((dBCurrentFrameEnergy < VADMemBlk->NominalBckGrnd)&&
; 226  :             (dBCurrentFrameEnergy > SILENCE_TH))

  000a2	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  000a5	d9 45 f4	 fld	 DWORD PTR _dBCurrentFrameEnergy$[ebp]
  000a8	d8 5a 0c	 fcomp	 DWORD PTR [edx+12]
  000ab	df e0		 fnstsw	 ax
  000ad	f6 c4 05	 test	 ah, 5
  000b0	7a 19		 jp	 SHORT $L994
  000b2	d9 45 f4	 fld	 DWORD PTR _dBCurrentFrameEnergy$[ebp]
  000b5	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  000bb	df e0		 fnstsw	 ax
  000bd	f6 c4 41	 test	 ah, 65			; 00000041H
  000c0	75 09		 jne	 SHORT $L994

; 227  :          {
; 228  :             VADMemBlk->NominalBckGrnd = dBCurrentFrameEnergy;

  000c2	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR _dBCurrentFrameEnergy$[ebp]
  000c8	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L994:

; 229  :          }
; 230  :       }
; 231  :    }
; 232  : 
; 233  :    /*-------------------------------------------------
; 234  :       Estimate the signal-to-background-noise energy
; 235  :       ratio.
; 236  :    ---------------------------------------------------*/
; 237  :    sbnr = VADMemBlk->sbnr*SBNR_UPDATE_RATE + 
; 238  :          (VADMemBlk->NominalVoiced - VADMemBlk->NominalBckGrnd)*
; 239  :          (1.0F-SBNR_UPDATE_RATE);

  000cb	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  000ce	d9 42 18	 fld	 DWORD PTR [edx+24]
  000d1	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f59999a
  000d7	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  000da	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  000dd	d9 40 08	 fld	 DWORD PTR [eax+8]
  000e0	d8 61 0c	 fsub	 DWORD PTR [ecx+12]
  000e3	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e199998
  000e9	de c1		 faddp	 ST(1), ST(0)
  000eb	d9 5d fc	 fstp	 DWORD PTR _sbnr$[ebp]

; 240  : 
; 241  : 
; 242  :    /*-------------------------------------------------
; 243  :       Calculate the VAD Energy Threshold in dB 
; 244  :       based on the estimated nominal voiced energy 
; 245  :       level and the estimated nominal background noise
; 246  :       energy level.
; 247  :    ---------------------------------------------------*/
; 248  :    if (VADMemBlk->PrevVAD==ACTIVE_SPEECH)

  000ee	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  000f1	0f bf 42 14	 movsx	 eax, WORD PTR [edx+20]
  000f5	83 f8 01	 cmp	 eax, 1
  000f8	75 14		 jne	 SHORT $L997

; 249  :       VADThreshold = (sbnr*(VAD_TH-VAD_ON_TRIGGER)) + VADMemBlk->NominalBckGrnd;

  000fa	d9 45 fc	 fld	 DWORD PTR _sbnr$[ebp]
  000fd	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e4ccccd
  00103	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  00106	d8 41 0c	 fadd	 DWORD PTR [ecx+12]
  00109	d9 5d ec	 fstp	 DWORD PTR _VADThreshold$[ebp]

; 250  :    else

  0010c	eb 12		 jmp	 SHORT $L998
$L997:

; 251  :       VADThreshold = (sbnr*(VAD_TH+VAD_OFF_TRIGGER))+ VADMemBlk->NominalBckGrnd;

  0010e	d9 45 fc	 fld	 DWORD PTR _sbnr$[ebp]
  00111	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3e99999a
  00117	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  0011a	d8 42 0c	 fadd	 DWORD PTR [edx+12]
  0011d	d9 5d ec	 fstp	 DWORD PTR _VADThreshold$[ebp]
$L998:

; 252  : 
; 253  : 
; 254  :    /*-------------------------------------------------
; 255  :       Maintain a Minimum SNR for VAD operation
; 256  :    ---------------------------------------------------*/
; 257  :    if (VADMemBlk->SkippedFrames > SKIP_FRAMES)

  00120	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00123	0f bf 48 04	 movsx	 ecx, WORD PTR [eax+4]
  00127	83 f9 04	 cmp	 ecx, 4
  0012a	7e 22		 jle	 SHORT $L999

; 258  :    {
; 259  :       if (sbnr < MIN_SNR_TH)

  0012c	d9 45 fc	 fld	 DWORD PTR _sbnr$[ebp]
  0012f	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41700000
  00135	df e0		 fnstsw	 ax
  00137	f6 c4 05	 test	 ah, 5
  0013a	7a 12		 jp	 SHORT $L999

; 260  :       {
; 261  :          VADMemBlk->NominalBckGrnd = VADMemBlk->NominalVoiced - MIN_SNR_TH;

  0013c	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  0013f	d9 42 08	 fld	 DWORD PTR [edx+8]
  00142	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@41700000
  00148	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  0014b	d9 58 0c	 fstp	 DWORD PTR [eax+12]
$L999:

; 262  :       }
; 263  :    }
; 264  : 
; 265  : 
; 266  :    /*--------------------------------------------------
; 267  :       Make VAD decision on current frame based on 
; 268  :       frame energy for current frame and future frame.
; 269  :    ----------------------------------------------------*/
; 270  :    if ((dBCurrentFrameEnergy > VADThreshold)||(dBFutureFrameEnergy > VADThreshold))

  0014e	d9 45 f4	 fld	 DWORD PTR _dBCurrentFrameEnergy$[ebp]
  00151	d8 5d ec	 fcomp	 DWORD PTR _VADThreshold$[ebp]
  00154	df e0		 fnstsw	 ax
  00156	f6 c4 41	 test	 ah, 65			; 00000041H
  00159	74 0d		 je	 SHORT $L1002
  0015b	d9 45 e8	 fld	 DWORD PTR _dBFutureFrameEnergy$[ebp]
  0015e	d8 5d ec	 fcomp	 DWORD PTR _VADThreshold$[ebp]
  00161	df e0		 fnstsw	 ax
  00163	f6 c4 41	 test	 ah, 65			; 00000041H
  00166	75 08		 jne	 SHORT $L1001
$L1002:

; 271  :    {
; 272  :       FrameVAD = ACTIVE_SPEECH;

  00168	66 c7 45 f8 01
	00		 mov	 WORD PTR _FrameVAD$[ebp], 1

; 273  :    }
; 274  :    else

  0016e	eb 06		 jmp	 SHORT $L1003
$L1001:

; 275  :    {
; 276  :       FrameVAD = !ACTIVE_SPEECH;

  00170	66 c7 45 f8 00
	00		 mov	 WORD PTR _FrameVAD$[ebp], 0
$L1003:

; 277  :    }
; 278  : 
; 279  :    *VAD = FrameVAD;

  00176	8b 4d 14	 mov	 ecx, DWORD PTR _VAD$[ebp]
  00179	66 8b 55 f8	 mov	 dx, WORD PTR _FrameVAD$[ebp]
  0017d	66 89 11	 mov	 WORD PTR [ecx], dx

; 280  :    if (FrameVAD!=ACTIVE_SPEECH)

  00180	0f bf 45 f8	 movsx	 eax, WORD PTR _FrameVAD$[ebp]
  00184	83 f8 01	 cmp	 eax, 1
  00187	0f 84 8d 00 00
	00		 je	 $L1004

; 281  :    {
; 282  :       if (VADMemBlk->PrevVAD==ACTIVE_SPEECH)

  0018d	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  00190	0f bf 51 14	 movsx	 edx, WORD PTR [ecx+20]
  00194	83 fa 01	 cmp	 edx, 1
  00197	75 51		 jne	 SHORT $L1005

; 283  :       {
; 284  :       /*---------------------------------------------------
; 285  :          Set the hangover for this frame based on the 
; 286  :          estimated signal-to-background-noise energy ratio.
; 287  :          Use a simple 1st order equation to map lower sbnr
; 288  :          with a greater hangover.
; 289  :       -----------------------------------------------------*/
; 290  :          if (sbnr <= SBNR_AT_MAX)

  00199	d9 45 fc	 fld	 DWORD PTR _sbnr$[ebp]
  0019c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41700000
  001a2	df e0		 fnstsw	 ax
  001a4	f6 c4 41	 test	 ah, 65			; 00000041H
  001a7	7a 0b		 jp	 SHORT $L1006

; 291  :             VADMemBlk->VADHangoverSoFar = MAX_HANGOVER;

  001a9	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  001ac	66 c7 40 10 28
	00		 mov	 WORD PTR [eax+16], 40	; 00000028H

; 292  :          else if (sbnr >= SBNR_AT_MIN)

  001b2	eb 36		 jmp	 SHORT $L1005
$L1006:
  001b4	d9 45 fc	 fld	 DWORD PTR _sbnr$[ebp]
  001b7	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@420c0000
  001bd	df e0		 fnstsw	 ax
  001bf	f6 c4 01	 test	 ah, 1
  001c2	75 0b		 jne	 SHORT $L1008

; 293  :             VADMemBlk->VADHangoverSoFar = MIN_HANGOVER;

  001c4	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  001c7	66 c7 41 10 0a
	00		 mov	 WORD PTR [ecx+16], 10	; 0000000aH

; 294  :          else

  001cd	eb 1b		 jmp	 SHORT $L1005
$L1008:

; 295  :             VADMemBlk->VADHangoverSoFar = (short)(SLOPE*sbnr+INTERCEPT);      

  001cf	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bfc00000
  001d5	d8 4d fc	 fmul	 DWORD PTR _sbnr$[ebp]
  001d8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@427a0000
  001de	e8 00 00 00 00	 call	 __ftol2
  001e3	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  001e6	66 89 42 10	 mov	 WORD PTR [edx+16], ax
$L1005:

; 296  :       }
; 297  :       VADMemBlk->VADHangoverSoFar--;

  001ea	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  001ed	66 8b 48 10	 mov	 cx, WORD PTR [eax+16]
  001f1	66 83 e9 01	 sub	 cx, 1
  001f5	8b 55 f0	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  001f8	66 89 4a 10	 mov	 WORD PTR [edx+16], cx

; 298  :       if (VADMemBlk->VADHangoverSoFar > 0)

  001fc	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  001ff	0f bf 48 10	 movsx	 ecx, WORD PTR [eax+16]
  00203	85 c9		 test	 ecx, ecx
  00205	7e 0a		 jle	 SHORT $L1013

; 299  :          *VAD = ACTIVE_SPEECH;

  00207	8b 55 14	 mov	 edx, DWORD PTR _VAD$[ebp]
  0020a	66 c7 02 01 00	 mov	 WORD PTR [edx], 1

; 300  :       else

  0020f	eb 09		 jmp	 SHORT $L1004
$L1013:

; 301  :          VADMemBlk->VADHangoverSoFar = 0;

  00211	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00214	66 c7 40 10 00
	00		 mov	 WORD PTR [eax+16], 0
$L1004:

; 302  :    }    
; 303  : 
; 304  :    /*------------------------------------------------------
; 305  :       Background Speech Signal Flag Logic
; 306  : 
; 307  :       The Background Speech Flag can be used by the codec 
; 308  :       to improve synthesis of harmonic like background noise.  
; 309  :       This could include babble or interfering talker.  Here,
; 310  :       we just basically look at the correlation and if it
; 311  :       is high, make the assumption that the background 
; 312  :       noise is some sort of voiced speech, which would 
; 313  :       sound better if synthesized with a non-zero Pv.
; 314  : 
; 315  :       This really should be part of Pv and should not be
; 316  :       here.
; 317  :    ---------------------------------------------------------*/
; 318  :    *BckgrndSpeech = FrameVAD;

  0021a	8b 4d 18	 mov	 ecx, DWORD PTR _BckgrndSpeech$[ebp]
  0021d	66 8b 55 f8	 mov	 dx, WORD PTR _FrameVAD$[ebp]
  00221	66 89 11	 mov	 WORD PTR [ecx], dx

; 319  :     if ((sbnr > VOICED_BCKGRND_THRES)&&(PitchCorr > VOICED_CORR_THRES))

  00224	d9 45 fc	 fld	 DWORD PTR _sbnr$[ebp]
  00227	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  0022d	df e0		 fnstsw	 ax
  0022f	f6 c4 41	 test	 ah, 65			; 00000041H
  00232	75 18		 jne	 SHORT $L1015
  00234	d9 45 10	 fld	 DWORD PTR _PitchCorr$[ebp]
  00237	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f0353f8
  0023d	df e0		 fnstsw	 ax
  0023f	f6 c4 41	 test	 ah, 65			; 00000041H
  00242	75 08		 jne	 SHORT $L1015

; 320  :       *BckgrndSpeech = ACTIVE_SPEECH;

  00244	8b 45 18	 mov	 eax, DWORD PTR _BckgrndSpeech$[ebp]
  00247	66 c7 00 01 00	 mov	 WORD PTR [eax], 1
$L1015:

; 321  : 
; 322  :    /* Some hangover for the decision */
; 323  :    if (*BckgrndSpeech == ACTIVE_SPEECH)

  0024c	8b 4d 18	 mov	 ecx, DWORD PTR _BckgrndSpeech$[ebp]
  0024f	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  00252	83 fa 01	 cmp	 edx, 1
  00255	75 0b		 jne	 SHORT $L1016

; 324  :    {
; 325  :       VADMemBlk->VBHangoverSoFar = 0;

  00257	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  0025a	66 c7 40 12 00
	00		 mov	 WORD PTR [eax+18], 0

; 326  :    }
; 327  :    else

  00260	eb 3b		 jmp	 SHORT $L1017
$L1016:

; 328  :    {
; 329  :       if (VADMemBlk->VBHangoverSoFar <= VOICED_BCKGRND_HANGOVER)

  00262	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  00265	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  00269	83 fa 04	 cmp	 edx, 4
  0026c	7f 08		 jg	 SHORT $L1018

; 330  :       {
; 331  :          *BckgrndSpeech = ACTIVE_SPEECH;

  0026e	8b 45 18	 mov	 eax, DWORD PTR _BckgrndSpeech$[ebp]
  00271	66 c7 00 01 00	 mov	 WORD PTR [eax], 1
$L1018:

; 332  :       }
; 333  : 
; 334  :       VADMemBlk->VBHangoverSoFar++;

  00276	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  00279	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  0027d	66 83 c2 01	 add	 dx, 1
  00281	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00284	66 89 50 12	 mov	 WORD PTR [eax+18], dx

; 335  :       if (VADMemBlk->VBHangoverSoFar > VOICED_BCKGRND_HANGOVER+1)

  00288	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  0028b	0f bf 51 12	 movsx	 edx, WORD PTR [ecx+18]
  0028f	83 fa 05	 cmp	 edx, 5
  00292	7e 09		 jle	 SHORT $L1017

; 336  :       {
; 337  :          VADMemBlk->VBHangoverSoFar = VOICED_BCKGRND_HANGOVER+1;

  00294	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00297	66 c7 40 12 05
	00		 mov	 WORD PTR [eax+18], 5
$L1017:

; 338  :       }
; 339  :    }
; 340  : 
; 341  :    VADMemBlk->SkippedFrames++;

  0029d	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  002a0	66 8b 51 04	 mov	 dx, WORD PTR [ecx+4]
  002a4	66 83 c2 01	 add	 dx, 1
  002a8	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  002ab	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 342  :    if (VADMemBlk->SkippedFrames > SKIP_FRAMES)

  002af	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  002b2	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  002b6	83 fa 04	 cmp	 edx, 4
  002b9	7e 09		 jle	 SHORT $L1020

; 343  :    {
; 344  :       VADMemBlk->SkippedFrames = SKIP_FRAMES+1;

  002bb	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  002be	66 c7 40 04 05
	00		 mov	 WORD PTR [eax+4], 5
$L1020:

; 345  :    }
; 346  : 
; 347  :    VADMemBlk->PrevVAD = FrameVAD;

  002c4	8b 4d f0	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  002c7	66 8b 55 f8	 mov	 dx, WORD PTR _FrameVAD$[ebp]
  002cb	66 89 51 14	 mov	 WORD PTR [ecx+20], dx

; 348  :    VADMemBlk->sbnr    = sbnr;

  002cf	8b 45 f0	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  002d2	8b 4d fc	 mov	 ecx, DWORD PTR _sbnr$[ebp]
  002d5	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 349  : 
; 350  : #if (WRITE_OUT==1)
; 351  : {
; 352  : static FILE *f1, *f2;
; 353  : static int init=0;
; 354  : short tempbuf[180];
; 355  : int i;
; 356  : 
; 357  :    if (init==0)
; 358  :    {
; 359  :       init=1;
; 360  :       f1 = fopen("VOICED_NEW.out", "w");
; 361  :       f2 = fopen("VAD_NEW.out", "w");
; 362  :    }
; 363  :    for (i=0;i<180;i++)
; 364  :       tempbuf[i] = *BckgrndSpeech;
; 365  : 
; 366  :    fwrite(tempbuf, sizeof(short), 180, f1);
; 367  : 
; 368  :    for (i=0;i<180;i++)
; 369  :       tempbuf[i] = *VAD;
; 370  : 
; 371  :    fwrite(tempbuf, sizeof(short), 180, f2);
; 372  : 
; 373  : }
; 374  : 
; 375  : #endif
; 376  : 
; 377  : }

  002d8	8b e5		 mov	 esp, ebp
  002da	5d		 pop	 ebp
  002db	c2 14 00	 ret	 20			; 00000014H
_VoiceActivity@20 ENDP
_TEXT	ENDS
PUBLIC	_initVAD@4
EXTRN	_calloc:NEAR
; Function compile flags: /Odt
;	COMDAT _initVAD@4
_TEXT	SEGMENT
_VADMemBlk$ = -4
_hVADMemBlk$ = 8
_initVAD@4 PROC NEAR					; COMDAT

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 407  :    VAD_MemBlk  *VADMemBlk;
; 408  : 
; 409  :    if (VOX_MEM_INIT(VADMemBlk = *hVADMemBlk, 1, sizeof(VAD_MemBlk)) != 0)

  00004	6a 1c		 push	 28			; 0000001cH
  00006	6a 01		 push	 1
  00008	e8 00 00 00 00	 call	 _calloc
  0000d	83 c4 08	 add	 esp, 8
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _hVADMemBlk$[ebp]
  00013	89 01		 mov	 DWORD PTR [ecx], eax
  00015	8b 55 08	 mov	 edx, DWORD PTR _hVADMemBlk$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	89 45 fc	 mov	 DWORD PTR _VADMemBlk$[ebp], eax
  0001d	33 c9		 xor	 ecx, ecx
  0001f	83 7d fc 00	 cmp	 DWORD PTR _VADMemBlk$[ebp], 0
  00023	0f 94 c1	 sete	 cl
  00026	85 c9		 test	 ecx, ecx
  00028	74 06		 je	 SHORT $L1026

; 410  :    {
; 411  :       return 1;

  0002a	66 b8 01 00	 mov	 ax, 1
  0002e	eb 4e		 jmp	 SHORT $L1023
$L1026:

; 412  :    }
; 413  :    VADMemBlk->NominalVoiced    = INIT_VOICED_ESTIMATE;

  00030	8b 55 fc	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  00033	c7 42 08 00 00
	8c 42		 mov	 DWORD PTR [edx+8], 1116471296 ; 428c0000H

; 414  :    VADMemBlk->NominalBckGrnd   = INIT_BCKGRND_ESTIMATE;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  0003d	c7 40 0c 00 00
	48 42		 mov	 DWORD PTR [eax+12], 1112014848 ; 42480000H

; 415  :    VADMemBlk->dBFrameEnergy    = INIT_BCKGRND_ESTIMATE;

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  00047	c7 01 00 00 48
	42		 mov	 DWORD PTR [ecx], 1112014848 ; 42480000H

; 416  :    VADMemBlk->SkippedFrames    = 0;

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  00050	66 c7 42 04 00
	00		 mov	 WORD PTR [edx+4], 0

; 417  :    VADMemBlk->VBHangoverSoFar  = 0;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00059	66 c7 40 12 00
	00		 mov	 WORD PTR [eax+18], 0

; 418  :    VADMemBlk->VADHangoverSoFar = 0;

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _VADMemBlk$[ebp]
  00062	66 c7 41 10 00
	00		 mov	 WORD PTR [ecx+16], 0

; 419  :    VADMemBlk->PrevVAD          = ACTIVE_SPEECH;

  00068	8b 55 fc	 mov	 edx, DWORD PTR _VADMemBlk$[ebp]
  0006b	66 c7 42 14 01
	00		 mov	 WORD PTR [edx+20], 1

; 420  :    VADMemBlk->sbnr             = INIT_VOICED_ESTIMATE-INIT_BCKGRND_ESTIMATE;

  00071	8b 45 fc	 mov	 eax, DWORD PTR _VADMemBlk$[ebp]
  00074	c7 40 18 00 00
	a0 41		 mov	 DWORD PTR [eax+24], 1101004800 ; 41a00000H

; 421  : 
; 422  :    return 0;

  0007b	66 33 c0	 xor	 ax, ax
$L1023:

; 423  : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
_initVAD@4 ENDP
_TEXT	ENDS
PUBLIC	_freeVAD@4
EXTRN	_free:NEAR
; Function compile flags: /Odt
;	COMDAT _freeVAD@4
_TEXT	SEGMENT
_hVADMemBlk$ = 8
_freeVAD@4 PROC NEAR					; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  :    VOX_MEM_FREE(*hVADMemBlk);

  00003	8b 45 08	 mov	 eax, DWORD PTR _hVADMemBlk$[ebp]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 17		 je	 SHORT $L1029
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _hVADMemBlk$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _free
  00016	83 c4 04	 add	 esp, 4
  00019	8b 45 08	 mov	 eax, DWORD PTR _hVADMemBlk$[ebp]
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L1029:

; 451  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
_freeVAD@4 ENDP
_TEXT	ENDS
END
