; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\format.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_04JNFLDEGE@pwfx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_05PJHAMANO@pDest?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07HPANBCJA@pSource?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07CNKCBOKB@TESTSND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@IBGDDAHG@FmtIsValid?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@NEGDFCOA@Unsupported?5format?5tag?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@KKKKMHLO@pSource?9?$DOnChannels?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@PIODLKGG@pSource?9?$DOwBitsPerSample?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@OLFDGMMG@pSource?9?$DOnBlockAlign?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MNFLEIKF@Format?5tag?5not?5PCM?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@LMINNPNJ@Invalid?5channel?5count?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PGNHDJHJ@Invalid?5sample?5bit?5resolution?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@JMHMKDN@Invalid?5sampling?5rate?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@CNMNFPGH@Bad?5block?5alignment?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@BHADMBB@pSource?9?$DOwfx?4nChannels?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@JGBOPGED@pSource?9?$DOwfx?4wBitsPerSample?5?$DM?$DN?50@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@OIKDEMKO@pSource?9?$DOwfx?4nBlockAlign?5?$DM?$DN?50xFF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@IAKEEFCK@Format?5tag?5not?5XBOX_ADPCM?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@NDFBNMGN@cbSize?5not?5?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@COGBELGK@Invalid?5samples?5per?5block?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@OGFJBCGA@Bad?5block?9alignment?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@GEHOBCDM@Unexpected?5subformat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@FCNDIHOL@Format?5tag?5not?5EXTENSIBLE?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@KKIDLDBA@wValidBitsPerSample?5must?5equal?5w@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@OINPDAHG@wReserved?5must?5be?50?5for?5SUBTYPE_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BCDFCNJM@Invalid?5sub?9format?5identifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JKCBDHDB@Invalid?5channel?5mask?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XAudioCreatePcmFormat@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XAudioCreateAdpcmFormat@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtCreateInternal@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtIsValid@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtPcmToInternal@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtIsValidPcm@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtAdpcmToInternal@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtIsValidAdpcm@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtExtensibleToInternal@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _FmtIsValidExtensible@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

DSOUND_RD	SEGMENT
?wSamplesPerBlock@?1??XAudioCreateAdpcmFormat@@9@9 DW 040H ; `XAudioCreateAdpcmFormat'::`2'::wSamplesPerBlock
	ORG $+2
?wBitsPerSample@?1??XAudioCreateAdpcmFormat@@9@9 DW 04H	; `XAudioCreateAdpcmFormat'::`2'::wBitsPerSample
	ORG $+2
?wBytesPerBlock@?1??XAudioCreateAdpcmFormat@@9@9 DW 024H ; `XAudioCreateAdpcmFormat'::`2'::wBytesPerBlock
?wBitsPerSample@?1??FmtAdpcmToInternal@@9@9 DB 04H	; `FmtAdpcmToInternal'::`2'::wBitsPerSample
	ORG $+1
?wSamplesPerBlock@?1??FmtIsValidAdpcm@@9@9 DW 040H	; `FmtIsValidAdpcm'::`2'::wSamplesPerBlock
	ORG $+2
?wBitsPerSample@?1??FmtIsValidAdpcm@@9@9 DW 04H		; `FmtIsValidAdpcm'::`2'::wBitsPerSample
	ORG $+2
?wBytesPerBlock@?1??FmtIsValidAdpcm@@9@9 DW 024H	; `FmtIsValidAdpcm'::`2'::wBytesPerBlock
DSOUND_RD	ENDS
PUBLIC	??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_04JNFLDEGE@pwfx?$AA@			; `string'
PUBLIC	_XAudioCreatePcmFormat@16
EXTRN	_DwDbgAssert:NEAR
;	COMDAT ??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\initlib\format.c
DSOUND_RD	SEGMENT
??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\format.c', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_04JNFLDEGE@pwfx?$AA@
DSOUND_RD	SEGMENT
??_C@_04JNFLDEGE@pwfx?$AA@ DB 'pwfx', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _XAudioCreatePcmFormat@16
DSOUND	SEGMENT
_nChannels$ = 8
_nSamplesPerSec$ = 12
_wBitsPerSample$ = 16
_pwfx$ = 20
_XAudioCreatePcmFormat@16 PROC NEAR			; COMDAT

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :     DPF_ENTER();
; 48   :     
; 49   :     ASSERT(pwfx);

  00003	6a 31		 push	 49			; 00000031H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNFLDEGE@pwfx?$AA@
  0000f	33 c0		 xor	 eax, eax
  00011	83 7d 14 00	 cmp	 DWORD PTR _pwfx$[ebp], 0
  00015	0f 94 c0	 sete	 al
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _DwDbgAssert
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 50   : 
; 51   :     pwfx->wFormatTag = WAVE_FORMAT_PCM;

  00021	8b 4d 14	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00024	66 c7 01 01 00	 mov	 WORD PTR [ecx], 1

; 52   :     pwfx->nChannels = nChannels;

  00029	8b 55 14	 mov	 edx, DWORD PTR _pwfx$[ebp]
  0002c	66 8b 45 08	 mov	 ax, WORD PTR _nChannels$[ebp]
  00030	66 89 42 02	 mov	 WORD PTR [edx+2], ax

; 53   :     pwfx->nSamplesPerSec = nSamplesPerSec;

  00034	8b 4d 14	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00037	8b 55 0c	 mov	 edx, DWORD PTR _nSamplesPerSec$[ebp]
  0003a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 54   :     pwfx->wBitsPerSample = wBitsPerSample;

  0003d	8b 45 14	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00040	66 8b 4d 10	 mov	 cx, WORD PTR _wBitsPerSample$[ebp]
  00044	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 55   :     pwfx->nBlockAlign = nChannels * wBitsPerSample / 8;

  00048	0f b7 45 08	 movzx	 eax, WORD PTR _nChannels$[ebp]
  0004c	0f b7 55 10	 movzx	 edx, WORD PTR _wBitsPerSample$[ebp]
  00050	0f af c2	 imul	 eax, edx
  00053	99		 cdq
  00054	83 e2 07	 and	 edx, 7
  00057	03 c2		 add	 eax, edx
  00059	c1 f8 03	 sar	 eax, 3
  0005c	8b 4d 14	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0005f	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 56   :     pwfx->nAvgBytesPerSec = nSamplesPerSec * pwfx->nBlockAlign;

  00063	8b 55 14	 mov	 edx, DWORD PTR _pwfx$[ebp]
  00066	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _nSamplesPerSec$[ebp]
  0006d	0f af c8	 imul	 ecx, eax
  00070	8b 55 14	 mov	 edx, DWORD PTR _pwfx$[ebp]
  00073	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 57   :     pwfx->cbSize = 0;

  00076	8b 45 14	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00079	66 c7 40 10 00
	00		 mov	 WORD PTR [eax+16], 0

; 58   : 
; 59   :     DPF_LEAVE_VOID();
; 60   : }

  0007f	5d		 pop	 ebp
  00080	c2 10 00	 ret	 16			; 00000010H
_XAudioCreatePcmFormat@16 ENDP
DSOUND	ENDS
PUBLIC	_XAudioCreateAdpcmFormat@12
; Function compile flags: /Odt
;	COMDAT _XAudioCreateAdpcmFormat@12
DSOUND	SEGMENT
_nChannels$ = 8
_nSamplesPerSec$ = 12
_pwfx$ = 16
_XAudioCreateAdpcmFormat@12 PROC NEAR			; COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :     static const WORD       wSamplesPerBlock    = 64;
; 92   :     static const WORD       wBitsPerSample      = 4;
; 93   :     static const WORD       wBytesPerBlock      = 36;
; 94   :     
; 95   :     DPF_ENTER();
; 96   :     
; 97   :     ASSERT(pwfx);

  00003	6a 61		 push	 97			; 00000061H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNFLDEGE@pwfx?$AA@
  0000f	33 c0		 xor	 eax, eax
  00011	83 7d 10 00	 cmp	 DWORD PTR _pwfx$[ebp], 0
  00015	0f 94 c0	 sete	 al
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _DwDbgAssert
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 98   : 
; 99   :     pwfx->wfx.wFormatTag = WAVE_FORMAT_XBOX_ADPCM;

  00021	8b 4d 10	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00024	66 c7 01 69 00	 mov	 WORD PTR [ecx], 105	; 00000069H

; 100  :     pwfx->wfx.nChannels = nChannels;

  00029	8b 55 10	 mov	 edx, DWORD PTR _pwfx$[ebp]
  0002c	66 8b 45 08	 mov	 ax, WORD PTR _nChannels$[ebp]
  00030	66 89 42 02	 mov	 WORD PTR [edx+2], ax

; 101  :     pwfx->wfx.nSamplesPerSec = nSamplesPerSec;

  00034	8b 4d 10	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00037	8b 55 0c	 mov	 edx, DWORD PTR _nSamplesPerSec$[ebp]
  0003a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 102  :     pwfx->wfx.wBitsPerSample = wBitsPerSample;

  0003d	8b 45 10	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00040	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?wBitsPerSample@?1??XAudioCreateAdpcmFormat@@9@9
  00047	66 89 48 0e	 mov	 WORD PTR [eax+14], cx

; 103  :     pwfx->wfx.nBlockAlign = nChannels * wBytesPerBlock;

  0004b	0f b7 55 08	 movzx	 edx, WORD PTR _nChannels$[ebp]
  0004f	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?wBytesPerBlock@?1??XAudioCreateAdpcmFormat@@9@9
  00056	0f af d0	 imul	 edx, eax
  00059	8b 4d 10	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0005c	66 89 51 0c	 mov	 WORD PTR [ecx+12], dx

; 104  :     pwfx->wfx.nAvgBytesPerSec = nSamplesPerSec / wSamplesPerBlock * wBytesPerBlock;

  00060	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?wSamplesPerBlock@?1??XAudioCreateAdpcmFormat@@9@9
  00067	8b 45 0c	 mov	 eax, DWORD PTR _nSamplesPerSec$[ebp]
  0006a	33 d2		 xor	 edx, edx
  0006c	f7 f1		 div	 ecx
  0006e	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?wBytesPerBlock@?1??XAudioCreateAdpcmFormat@@9@9
  00075	0f af c2	 imul	 eax, edx
  00078	8b 4d 10	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0007b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 105  :     pwfx->wfx.cbSize = sizeof(*pwfx) - sizeof(pwfx->wfx);

  0007e	8b 55 10	 mov	 edx, DWORD PTR _pwfx$[ebp]
  00081	66 c7 42 10 02
	00		 mov	 WORD PTR [edx+16], 2

; 106  :     pwfx->wSamplesPerBlock = wSamplesPerBlock;

  00087	8b 45 10	 mov	 eax, DWORD PTR _pwfx$[ebp]
  0008a	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ?wSamplesPerBlock@?1??XAudioCreateAdpcmFormat@@9@9
  00091	66 89 48 12	 mov	 WORD PTR [eax+18], cx

; 107  : 
; 108  :     DPF_LEAVE_VOID();
; 109  : }

  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
_XAudioCreateAdpcmFormat@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_05PJHAMANO@pDest?$AA@			; `string'
PUBLIC	??_C@_07HPANBCJA@pSource?$AA@			; `string'
PUBLIC	??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@	; `string'
PUBLIC	_FmtCreateInternal@8
PUBLIC	_FmtPcmToInternal@8
PUBLIC	_FmtAdpcmToInternal@8
PUBLIC	_FmtExtensibleToInternal@8
;	COMDAT ??_C@_05PJHAMANO@pDest?$AA@
DSOUND_RD	SEGMENT
??_C@_05PJHAMANO@pDest?$AA@ DB 'pDest', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_07HPANBCJA@pSource?$AA@
DSOUND_RD	SEGMENT
??_C@_07HPANBCJA@pSource?$AA@ DB 'pSource', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@ DB 'Unexpected format tag'
	DB	00H						; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtCreateInternal@8
DSOUND	SEGMENT
tv77 = -8
_dwChannelMask$ = -4
_pDest$ = 8
_pSource$ = 12
_FmtCreateInternal@8 PROC NEAR				; COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 139  :     DWORD                   dwChannelMask   = 0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwChannelMask$[ebp], 0

; 140  :     
; 141  :     DPF_ENTER();
; 142  : 
; 143  :     ASSERT(pDest);

  0000d	68 8f 00 00 00	 push	 143			; 0000008fH
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PJHAMANO@pDest?$AA@
  0001c	33 c0		 xor	 eax, eax
  0001e	83 7d 08 00	 cmp	 DWORD PTR _pDest$[ebp], 0
  00022	0f 94 c0	 sete	 al
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _DwDbgAssert
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 144  :     ASSERT(pSource);

  0002e	68 90 00 00 00	 push	 144			; 00000090H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HPANBCJA@pSource?$AA@
  0003d	33 c9		 xor	 ecx, ecx
  0003f	83 7d 0c 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00043	0f 94 c1	 sete	 cl
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 _DwDbgAssert
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 145  : 
; 146  :     switch(pSource->wFormatTag)
; 147  :     {

  0004f	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  00052	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00055	89 45 f8	 mov	 DWORD PTR tv77[ebp], eax
  00058	83 7d f8 01	 cmp	 DWORD PTR tv77[ebp], 1
  0005c	74 11		 je	 SHORT $L29015
  0005e	83 7d f8 69	 cmp	 DWORD PTR tv77[ebp], 105 ; 00000069H
  00062	74 1a		 je	 SHORT $L29016
  00064	81 7d f8 fe ff
	00 00		 cmp	 DWORD PTR tv77[ebp], 65534 ; 0000fffeH
  0006b	74 20		 je	 SHORT $L29018
  0006d	eb 30		 jmp	 SHORT $L29020
$L29015:

; 148  :         case WAVE_FORMAT_PCM:
; 149  :             FmtPcmToInternal(pDest, pSource);

  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 08	 mov	 edx, DWORD PTR _pDest$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _FmtPcmToInternal@8

; 150  :             break;

  0007c	eb 3a		 jmp	 SHORT $L29012
$L29016:

; 151  : 
; 152  :         case WAVE_FORMAT_XBOX_ADPCM:
; 153  :             FmtAdpcmToInternal(pDest, (LPCXBOXADPCMWAVEFORMAT)pSource);

  0007e	8b 45 0c	 mov	 eax, DWORD PTR _pSource$[ebp]
  00081	50		 push	 eax
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _pDest$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 _FmtAdpcmToInternal@8

; 154  :             break;

  0008b	eb 2b		 jmp	 SHORT $L29012
$L29018:

; 155  : 
; 156  : #ifndef MCPX_BOOT_LIB
; 157  : 
; 158  :         case WAVE_FORMAT_EXTENSIBLE:
; 159  :             dwChannelMask = FmtExtensibleToInternal(pDest, (LPCWAVEFORMATEXTENSIBLE)pSource);

  0008d	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  00090	52		 push	 edx
  00091	8b 45 08	 mov	 eax, DWORD PTR _pDest$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 _FmtExtensibleToInternal@8
  0009a	89 45 fc	 mov	 DWORD PTR _dwChannelMask$[ebp], eax

; 160  :             break;

  0009d	eb 19		 jmp	 SHORT $L29012
$L29020:

; 161  : 
; 162  : #endif // MCPX_BOOT_LIB
; 163  : 
; 164  :         default:
; 165  :             ASSERTMSG("Unexpected format tag");

  0009f	68 a5 00 00 00	 push	 165			; 000000a5H
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  000a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
  000ae	6a 01		 push	 1
  000b0	e8 00 00 00 00	 call	 _DwDbgAssert
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
$L29012:

; 166  :             break;
; 167  :     }
; 168  : 
; 169  :     DPF_LEAVE(dwChannelMask);
; 170  : 
; 171  :     return dwChannelMask;

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _dwChannelMask$[ebp]

; 172  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
_FmtCreateInternal@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_07CNKCBOKB@TESTSND?$AA@			; `string'
PUBLIC	??_C@_0L@IBGDDAHG@FmtIsValid?$AA@		; `string'
PUBLIC	??_C@_0BH@NEGDFCOA@Unsupported?5format?5tag?$AA@ ; `string'
PUBLIC	_FmtIsValid@4
PUBLIC	_FmtIsValidPcm@4
PUBLIC	_FmtIsValidAdpcm@4
PUBLIC	_FmtIsValidExtensible@4
EXTRN	_DwDbgSetContext:NEAR
EXTRN	_DwDbgPrint:NEAR
;	COMDAT ??_C@_07CNKCBOKB@TESTSND?$AA@
DSOUND_RD	SEGMENT
??_C@_07CNKCBOKB@TESTSND?$AA@ DB 'TESTSND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@IBGDDAHG@FmtIsValid?$AA@
DSOUND_RD	SEGMENT
??_C@_0L@IBGDDAHG@FmtIsValid?$AA@ DB 'FmtIsValid', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@NEGDFCOA@Unsupported?5format?5tag?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@NEGDFCOA@Unsupported?5format?5tag?$AA@ DB 'Unsupported format t'
	DB	'ag', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtIsValid@4
DSOUND	SEGMENT
tv71 = -8
_fSuccess$ = -4
_pwfx$ = 8
_FmtIsValid@4 PROC NEAR					; COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 199  :     BOOL                    fSuccess;
; 200  :     
; 201  :     DPF_ENTER();
; 202  : 
; 203  :     ASSERT(pwfx);

  00006	68 cb 00 00 00	 push	 203			; 000000cbH
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNFLDEGE@pwfx?$AA@
  00015	33 c0		 xor	 eax, eax
  00017	83 7d 08 00	 cmp	 DWORD PTR _pwfx$[ebp], 0
  0001b	0f 94 c0	 sete	 al
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 204  : 
; 205  :     switch(pwfx->wFormatTag)
; 206  :     {

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0002a	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0002d	89 55 f8	 mov	 DWORD PTR tv71[ebp], edx
  00030	83 7d f8 01	 cmp	 DWORD PTR tv71[ebp], 1
  00034	74 11		 je	 SHORT $L29030
  00036	83 7d f8 69	 cmp	 DWORD PTR tv71[ebp], 105 ; 00000069H
  0003a	74 19		 je	 SHORT $L29031
  0003c	81 7d f8 fe ff
	00 00		 cmp	 DWORD PTR tv71[ebp], 65534 ; 0000fffeH
  00043	74 1e		 je	 SHORT $L29033
  00045	eb 2a		 jmp	 SHORT $L29035
$L29030:

; 207  :         case WAVE_FORMAT_PCM:
; 208  :             fSuccess = FmtIsValidPcm(pwfx);

  00047	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _FmtIsValidPcm@4
  00050	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax

; 209  :             break;

  00053	eb 50		 jmp	 SHORT $L29027
$L29031:

; 210  : 
; 211  :         case WAVE_FORMAT_XBOX_ADPCM:
; 212  :             fSuccess = FmtIsValidAdpcm((LPCXBOXADPCMWAVEFORMAT)pwfx);

  00055	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 _FmtIsValidAdpcm@4
  0005e	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax

; 213  :             break;

  00061	eb 42		 jmp	 SHORT $L29027
$L29033:

; 214  : 
; 215  : #ifndef MCPX_BOOT_LIB
; 216  : 
; 217  :         case WAVE_FORMAT_EXTENSIBLE:
; 218  :             fSuccess = FmtIsValidExtensible((LPCWAVEFORMATEXTENSIBLE)pwfx);

  00063	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _FmtIsValidExtensible@4
  0006c	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax

; 219  :             break;

  0006f	eb 34		 jmp	 SHORT $L29027
$L29035:

; 220  : 
; 221  : #endif // MCPX_BOOT_LIB
; 222  : 
; 223  :         default:
; 224  :             DPF_ERROR("Unsupported format tag");

  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@IBGDDAHG@FmtIsValid?$AA@
  0007b	68 e0 00 00 00	 push	 224			; 000000e0H
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00085	6a 01		 push	 1
  00087	6a 09		 push	 9
  00089	e8 00 00 00 00	 call	 _DwDbgSetContext
  0008e	83 c4 18	 add	 esp, 24			; 00000018H
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@NEGDFCOA@Unsupported?5format?5tag?$AA@
  00096	e8 00 00 00 00	 call	 _DwDbgPrint
  0009b	83 c4 04	 add	 esp, 4

; 225  :             fSuccess = FALSE;

  0009e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L29027:

; 226  :             break;
; 227  :     }
; 228  : 
; 229  :     DPF_LEAVE(fSuccess);
; 230  : 
; 231  :     return fSuccess;

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _fSuccess$[ebp]

; 232  : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
_FmtIsValid@4 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BL@KKKKMHLO@pSource?9?$DOnChannels?5?$DM?$DN?50xFF?$AA@ ; `string'
PUBLIC	??_C@_0CA@PIODLKGG@pSource?9?$DOwBitsPerSample?5?$DM?$DN?50xFF?$AA@ ; `string'
PUBLIC	??_C@_0BN@OLFDGMMG@pSource?9?$DOnBlockAlign?5?$DM?$DN?50xFF?$AA@ ; `string'
;	COMDAT ??_C@_0BL@KKKKMHLO@pSource?9?$DOnChannels?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@KKKKMHLO@pSource?9?$DOnChannels?5?$DM?$DN?50xFF?$AA@ DB 'pSourc'
	DB	'e->nChannels <= 0xFF', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@PIODLKGG@pSource?9?$DOwBitsPerSample?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@PIODLKGG@pSource?9?$DOwBitsPerSample?5?$DM?$DN?50xFF?$AA@ DB 'p'
	DB	'Source->wBitsPerSample <= 0xFF', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@OLFDGMMG@pSource?9?$DOnBlockAlign?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@OLFDGMMG@pSource?9?$DOnBlockAlign?5?$DM?$DN?50xFF?$AA@ DB 'pSou'
	DB	'rce->nBlockAlign <= 0xFF', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtPcmToInternal@8
DSOUND	SEGMENT
_pDest$ = 8
_pSource$ = 12
_FmtPcmToInternal@8 PROC NEAR				; COMDAT

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     DPF_ENTER();
; 263  : 
; 264  :     ASSERT(pDest);

  00003	68 08 01 00 00	 push	 264			; 00000108H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PJHAMANO@pDest?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pDest$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _DwDbgAssert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 265  :     ASSERT(pSource);

  00024	68 09 01 00 00	 push	 265			; 00000109H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HPANBCJA@pSource?$AA@
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 0c 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _DwDbgAssert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 266  : 
; 267  :     ASSERT(pSource->nChannels <= 0xFF);

  00045	68 0b 01 00 00	 push	 267			; 0000010bH
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@KKKKMHLO@pSource?9?$DOnChannels?5?$DM?$DN?50xFF?$AA@
  00054	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  00057	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0005b	33 c9		 xor	 ecx, ecx
  0005d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00062	0f 9f c1	 setg	 cl
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _DwDbgAssert
  0006b	83 c4 10	 add	 esp, 16			; 00000010H

; 268  :     ASSERT(pSource->wBitsPerSample <= 0xFF);

  0006e	68 0c 01 00 00	 push	 268			; 0000010cH
  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@PIODLKGG@pSource?9?$DOwBitsPerSample?5?$DM?$DN?50xFF?$AA@
  0007d	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  00080	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  00084	33 c9		 xor	 ecx, ecx
  00086	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0008b	0f 9f c1	 setg	 cl
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _DwDbgAssert
  00094	83 c4 10	 add	 esp, 16			; 00000010H

; 269  :     ASSERT(pSource->nBlockAlign <= 0xFF);

  00097	68 0d 01 00 00	 push	 269			; 0000010dH
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@OLFDGMMG@pSource?9?$DOnBlockAlign?5?$DM?$DN?50xFF?$AA@
  000a6	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  000a9	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000ad	33 c9		 xor	 ecx, ecx
  000af	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000b4	0f 9f c1	 setg	 cl
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _DwDbgAssert
  000bd	83 c4 10	 add	 esp, 16			; 00000010H

; 270  : 
; 271  :     pDest->wFormatTag = WAVE_FORMAT_PCM;

  000c0	8b 55 08	 mov	 edx, DWORD PTR _pDest$[ebp]
  000c3	66 c7 02 01 00	 mov	 WORD PTR [edx], 1

; 272  :     pDest->nChannels = (BYTE)pSource->nChannels;

  000c8	8b 45 08	 mov	 eax, DWORD PTR _pDest$[ebp]
  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR _pSource$[ebp]
  000ce	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  000d1	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 273  :     pDest->wBitsPerSample = (BYTE)pSource->wBitsPerSample;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _pDest$[ebp]
  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR _pSource$[ebp]
  000da	8a 51 0e	 mov	 dl, BYTE PTR [ecx+14]
  000dd	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 274  :     pDest->nSamplesPerSec = pSource->nSamplesPerSec;

  000e0	8b 45 08	 mov	 eax, DWORD PTR _pDest$[ebp]
  000e3	8b 4d 0c	 mov	 ecx, DWORD PTR _pSource$[ebp]
  000e6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e9	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 275  :     pDest->nBlockAlign = (BYTE)pSource->nBlockAlign;

  000ec	8b 45 0c	 mov	 eax, DWORD PTR _pSource$[ebp]
  000ef	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  000f3	8b 55 08	 mov	 edx, DWORD PTR _pDest$[ebp]
  000f6	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 276  : 
; 277  :     DPF_LEAVE_VOID();
; 278  : }

  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
_FmtPcmToInternal@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@		; `string'
PUBLIC	??_C@_0BD@MNFLEIKF@Format?5tag?5not?5PCM?$AA@	; `string'
PUBLIC	??_C@_0BG@LMINNPNJ@Invalid?5channel?5count?$AA@	; `string'
PUBLIC	??_C@_0BO@PGNHDJHJ@Invalid?5sample?5bit?5resolution?$AA@ ; `string'
PUBLIC	??_C@_0BG@JMHMKDN@Invalid?5sampling?5rate?$AA@	; `string'
PUBLIC	??_C@_0BE@CNMNFPGH@Bad?5block?5alignment?$AA@	; `string'
;	COMDAT ??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@ DB 'FmtIsValidPcm', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MNFLEIKF@Format?5tag?5not?5PCM?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@MNFLEIKF@Format?5tag?5not?5PCM?$AA@ DB 'Format tag not PCM', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@LMINNPNJ@Invalid?5channel?5count?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@LMINNPNJ@Invalid?5channel?5count?$AA@ DB 'Invalid channel count'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PGNHDJHJ@Invalid?5sample?5bit?5resolution?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@PGNHDJHJ@Invalid?5sample?5bit?5resolution?$AA@ DB 'Invalid samp'
	DB	'le bit resolution', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@JMHMKDN@Invalid?5sampling?5rate?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@JMHMKDN@Invalid?5sampling?5rate?$AA@ DB 'Invalid sampling rate', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@CNMNFPGH@Bad?5block?5alignment?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@CNMNFPGH@Bad?5block?5alignment?$AA@ DB 'Bad block alignment', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtIsValidPcm@4
DSOUND	SEGMENT
_fValid$ = -4
_pwfx$ = 8
_FmtIsValidPcm@4 PROC NEAR				; COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 305  :     BOOL                    fValid  = TRUE;

  00004	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 1

; 306  : 
; 307  :     DPF_ENTER();
; 308  : 
; 309  :     ASSERT(pwfx);

  0000b	68 35 01 00 00	 push	 309			; 00000135H
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNFLDEGE@pwfx?$AA@
  0001a	33 c0		 xor	 eax, eax
  0001c	83 7d 08 00	 cmp	 DWORD PTR _pwfx$[ebp], 0
  00020	0f 94 c0	 sete	 al
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _DwDbgAssert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 310  : 
; 311  :     if(WAVE_FORMAT_PCM != pwfx->wFormatTag)

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0002f	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00032	83 fa 01	 cmp	 edx, 1
  00035	74 34		 je	 SHORT $L29054

; 312  :     {
; 313  :         DPF_ERROR("Format tag not PCM");

  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@
  00041	68 39 01 00 00	 push	 313			; 00000139H
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0004b	6a 01		 push	 1
  0004d	6a 09		 push	 9
  0004f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00054	83 c4 18	 add	 esp, 24			; 00000018H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MNFLEIKF@Format?5tag?5not?5PCM?$AA@
  0005c	e8 00 00 00 00	 call	 _DwDbgPrint
  00061	83 c4 04	 add	 esp, 4

; 314  :         fValid = FALSE;

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29054:

; 315  :     }
; 316  :     
; 317  :     if((1 != pwfx->nChannels) && (2 != pwfx->nChannels) && (4 != pwfx->nChannels) && (6 != pwfx->nChannels))

  0006b	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  0006e	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00072	83 f9 01	 cmp	 ecx, 1
  00075	74 58		 je	 SHORT $L29057
  00077	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  0007a	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0007e	83 f8 02	 cmp	 eax, 2
  00081	74 4c		 je	 SHORT $L29057
  00083	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00086	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  0008a	83 fa 04	 cmp	 edx, 4
  0008d	74 40		 je	 SHORT $L29057
  0008f	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00092	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00096	83 f9 06	 cmp	 ecx, 6
  00099	74 34		 je	 SHORT $L29057

; 318  :     {
; 319  :         DPF_ERROR("Invalid channel count");

  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@
  000a5	68 3f 01 00 00	 push	 319			; 0000013fH
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  000af	6a 01		 push	 1
  000b1	6a 09		 push	 9
  000b3	e8 00 00 00 00	 call	 _DwDbgSetContext
  000b8	83 c4 18	 add	 esp, 24			; 00000018H
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@LMINNPNJ@Invalid?5channel?5count?$AA@
  000c0	e8 00 00 00 00	 call	 _DwDbgPrint
  000c5	83 c4 04	 add	 esp, 4

; 320  :         fValid = FALSE;

  000c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29057:

; 321  :     }
; 322  : 
; 323  :     if((8 != pwfx->wBitsPerSample) && (16 != pwfx->wBitsPerSample))

  000cf	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  000d2	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  000d6	83 f8 08	 cmp	 eax, 8
  000d9	74 40		 je	 SHORT $L29059
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  000de	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  000e2	83 fa 10	 cmp	 edx, 16			; 00000010H
  000e5	74 34		 je	 SHORT $L29059

; 324  :     {
; 325  :         DPF_ERROR("Invalid sample bit resolution");

  000e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@
  000f1	68 45 01 00 00	 push	 325			; 00000145H
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  000fb	6a 01		 push	 1
  000fd	6a 09		 push	 9
  000ff	e8 00 00 00 00	 call	 _DwDbgSetContext
  00104	83 c4 18	 add	 esp, 24			; 00000018H
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@PGNHDJHJ@Invalid?5sample?5bit?5resolution?$AA@
  0010c	e8 00 00 00 00	 call	 _DwDbgPrint
  00111	83 c4 04	 add	 esp, 4

; 326  :         fValid = FALSE;

  00114	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29059:

; 327  :     }
; 328  : 
; 329  :     if((pwfx->nSamplesPerSec < DSBFREQUENCY_MIN) || (pwfx->nSamplesPerSec > DSBFREQUENCY_MAX))

  0011b	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  0011e	81 78 04 bc 00
	00 00		 cmp	 DWORD PTR [eax+4], 188	; 000000bcH
  00125	72 0c		 jb	 SHORT $L29062
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0012a	81 79 04 ef ed
	02 00		 cmp	 DWORD PTR [ecx+4], 191983 ; 0002edefH
  00131	76 34		 jbe	 SHORT $L29061
$L29062:

; 330  :     {
; 331  :         DPF_ERROR("Invalid sampling rate");

  00133	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00138	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@
  0013d	68 4b 01 00 00	 push	 331			; 0000014bH
  00142	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00147	6a 01		 push	 1
  00149	6a 09		 push	 9
  0014b	e8 00 00 00 00	 call	 _DwDbgSetContext
  00150	83 c4 18	 add	 esp, 24			; 00000018H
  00153	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JMHMKDN@Invalid?5sampling?5rate?$AA@
  00158	e8 00 00 00 00	 call	 _DwDbgPrint
  0015d	83 c4 04	 add	 esp, 4

; 332  :         fValid = FALSE;

  00160	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29061:

; 333  :     }
; 334  : 
; 335  :     if(pwfx->nChannels * pwfx->wBitsPerSample / 8 != pwfx->nBlockAlign)

  00167	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  0016a	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0016e	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00171	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  00175	0f af c2	 imul	 eax, edx
  00178	99		 cdq
  00179	83 e2 07	 and	 edx, 7
  0017c	03 c2		 add	 eax, edx
  0017e	c1 f8 03	 sar	 eax, 3
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00184	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00188	3b c2		 cmp	 eax, edx
  0018a	74 34		 je	 SHORT $L29064

; 336  :     {
; 337  :         DPF_ERROR("Bad block alignment");

  0018c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00191	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@KEOHNED@FmtIsValidPcm?$AA@
  00196	68 51 01 00 00	 push	 337			; 00000151H
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  001a0	6a 01		 push	 1
  001a2	6a 09		 push	 9
  001a4	e8 00 00 00 00	 call	 _DwDbgSetContext
  001a9	83 c4 18	 add	 esp, 24			; 00000018H
  001ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@CNMNFPGH@Bad?5block?5alignment?$AA@
  001b1	e8 00 00 00 00	 call	 _DwDbgPrint
  001b6	83 c4 04	 add	 esp, 4

; 338  :         fValid = FALSE;

  001b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29064:

; 339  :     }
; 340  : 
; 341  :     DPF_LEAVE(fValid);
; 342  : 
; 343  :     return fValid;

  001c0	8b 45 fc	 mov	 eax, DWORD PTR _fValid$[ebp]

; 344  : }

  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c2 04 00	 ret	 4
_FmtIsValidPcm@4 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BP@BHADMBB@pSource?9?$DOwfx?4nChannels?5?$DM?$DN?50xFF?$AA@ ; `string'
PUBLIC	??_C@_0CE@JGBOPGED@pSource?9?$DOwfx?4wBitsPerSample?5?$DM?$DN?50@ ; `string'
PUBLIC	??_C@_0CB@OIKDEMKO@pSource?9?$DOwfx?4nBlockAlign?5?$DM?$DN?50xFF@ ; `string'
;	COMDAT ??_C@_0BP@BHADMBB@pSource?9?$DOwfx?4nChannels?5?$DM?$DN?50xFF?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@BHADMBB@pSource?9?$DOwfx?4nChannels?5?$DM?$DN?50xFF?$AA@ DB 'pS'
	DB	'ource->wfx.nChannels <= 0xFF', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@JGBOPGED@pSource?9?$DOwfx?4wBitsPerSample?5?$DM?$DN?50@
DSOUND_RD	SEGMENT
??_C@_0CE@JGBOPGED@pSource?9?$DOwfx?4wBitsPerSample?5?$DM?$DN?50@ DB 'pSo'
	DB	'urce->wfx.wBitsPerSample <= 0xFF', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@OIKDEMKO@pSource?9?$DOwfx?4nBlockAlign?5?$DM?$DN?50xFF@
DSOUND_RD	SEGMENT
??_C@_0CB@OIKDEMKO@pSource?9?$DOwfx?4nBlockAlign?5?$DM?$DN?50xFF@ DB 'pSo'
	DB	'urce->wfx.nBlockAlign <= 0xFF', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtAdpcmToInternal@8
DSOUND	SEGMENT
_pDest$ = 8
_pSource$ = 12
_FmtAdpcmToInternal@8 PROC NEAR				; COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 374  :     static const BYTE       wBitsPerSample      = 4;
; 375  : 
; 376  :     DPF_ENTER();
; 377  : 
; 378  :     ASSERT(pDest);

  00003	68 7a 01 00 00	 push	 378			; 0000017aH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PJHAMANO@pDest?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pDest$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _DwDbgAssert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 379  :     ASSERT(pSource);

  00024	68 7b 01 00 00	 push	 379			; 0000017bH
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HPANBCJA@pSource?$AA@
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 0c 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _DwDbgAssert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 380  : 
; 381  :     ASSERT(pSource->wfx.nChannels <= 0xFF);

  00045	68 7d 01 00 00	 push	 381			; 0000017dH
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BHADMBB@pSource?9?$DOwfx?4nChannels?5?$DM?$DN?50xFF?$AA@
  00054	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  00057	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0005b	33 c9		 xor	 ecx, ecx
  0005d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00062	0f 9f c1	 setg	 cl
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _DwDbgAssert
  0006b	83 c4 10	 add	 esp, 16			; 00000010H

; 382  :     ASSERT(pSource->wfx.wBitsPerSample <= 0xFF);

  0006e	68 7e 01 00 00	 push	 382			; 0000017eH
  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@JGBOPGED@pSource?9?$DOwfx?4wBitsPerSample?5?$DM?$DN?50@
  0007d	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  00080	0f b7 42 0e	 movzx	 eax, WORD PTR [edx+14]
  00084	33 c9		 xor	 ecx, ecx
  00086	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0008b	0f 9f c1	 setg	 cl
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _DwDbgAssert
  00094	83 c4 10	 add	 esp, 16			; 00000010H

; 383  :     ASSERT(pSource->wfx.nBlockAlign <= 0xFF);

  00097	68 7f 01 00 00	 push	 383			; 0000017fH
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@OIKDEMKO@pSource?9?$DOwfx?4nBlockAlign?5?$DM?$DN?50xFF@
  000a6	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  000a9	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000ad	33 c9		 xor	 ecx, ecx
  000af	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000b4	0f 9f c1	 setg	 cl
  000b7	51		 push	 ecx
  000b8	e8 00 00 00 00	 call	 _DwDbgAssert
  000bd	83 c4 10	 add	 esp, 16			; 00000010H

; 384  : 
; 385  :     pDest->wFormatTag = WAVE_FORMAT_XBOX_ADPCM;

  000c0	8b 55 08	 mov	 edx, DWORD PTR _pDest$[ebp]
  000c3	66 c7 02 69 00	 mov	 WORD PTR [edx], 105	; 00000069H

; 386  :     pDest->nChannels = (BYTE)pSource->wfx.nChannels;

  000c8	8b 45 08	 mov	 eax, DWORD PTR _pDest$[ebp]
  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR _pSource$[ebp]
  000ce	8a 51 02	 mov	 dl, BYTE PTR [ecx+2]
  000d1	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 387  :     pDest->wBitsPerSample = (BYTE)wBitsPerSample;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _pDest$[ebp]
  000d7	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?wBitsPerSample@?1??FmtAdpcmToInternal@@9@9
  000dd	88 48 03	 mov	 BYTE PTR [eax+3], cl

; 388  :     pDest->nSamplesPerSec = pSource->wfx.nSamplesPerSec;

  000e0	8b 55 08	 mov	 edx, DWORD PTR _pDest$[ebp]
  000e3	8b 45 0c	 mov	 eax, DWORD PTR _pSource$[ebp]
  000e6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e9	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 389  :     pDest->nBlockAlign = (BYTE)pSource->wfx.nBlockAlign;

  000ec	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  000ef	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _pDest$[ebp]
  000f6	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 390  : 
; 391  :     DPF_LEAVE_VOID();
; 392  : }

  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
_FmtAdpcmToInternal@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@		; `string'
PUBLIC	??_C@_0BK@IAKEEFCK@Format?5tag?5not?5XBOX_ADPCM?$AA@ ; `string'
PUBLIC	??_C@_0P@NDFBNMGN@cbSize?5not?5?$CFlu?$AA@	; `string'
PUBLIC	??_C@_0BK@COGBELGK@Invalid?5samples?5per?5block?$AA@ ; `string'
PUBLIC	??_C@_0BE@OGFJBCGA@Bad?5block?9alignment?$AA@	; `string'
;	COMDAT ??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@ DB 'FmtIsValidAdpcm', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@IAKEEFCK@Format?5tag?5not?5XBOX_ADPCM?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@IAKEEFCK@Format?5tag?5not?5XBOX_ADPCM?$AA@ DB 'Format tag not X'
	DB	'BOX_ADPCM', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@NDFBNMGN@cbSize?5not?5?$CFlu?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@NDFBNMGN@cbSize?5not?5?$CFlu?$AA@ DB 'cbSize not %lu', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@COGBELGK@Invalid?5samples?5per?5block?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@COGBELGK@Invalid?5samples?5per?5block?$AA@ DB 'Invalid samples '
	DB	'per block', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@OGFJBCGA@Bad?5block?9alignment?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@OGFJBCGA@Bad?5block?9alignment?$AA@ DB 'Bad block-alignment', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtIsValidAdpcm@4
DSOUND	SEGMENT
_fValid$ = -4
_pwfx$ = 8
_FmtIsValidAdpcm@4 PROC NEAR				; COMDAT

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 419  :     static const WORD       wSamplesPerBlock    = 64;
; 420  :     static const WORD       wBitsPerSample      = 4;
; 421  :     static const WORD       wBytesPerBlock      = 36;
; 422  :     BOOL                    fValid              = TRUE;

  00004	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 1

; 423  : 
; 424  :     DPF_ENTER();
; 425  : 
; 426  :     ASSERT(pwfx);

  0000b	68 aa 01 00 00	 push	 426			; 000001aaH
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNFLDEGE@pwfx?$AA@
  0001a	33 c0		 xor	 eax, eax
  0001c	83 7d 08 00	 cmp	 DWORD PTR _pwfx$[ebp], 0
  00020	0f 94 c0	 sete	 al
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _DwDbgAssert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 427  : 
; 428  :     if(WAVE_FORMAT_XBOX_ADPCM != pwfx->wfx.wFormatTag)

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0002f	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00032	83 fa 69	 cmp	 edx, 105		; 00000069H
  00035	74 34		 je	 SHORT $L29089

; 429  :     {
; 430  :         DPF_ERROR("Format tag not XBOX_ADPCM");

  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
  00041	68 ae 01 00 00	 push	 430			; 000001aeH
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0004b	6a 01		 push	 1
  0004d	6a 09		 push	 9
  0004f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00054	83 c4 18	 add	 esp, 24			; 00000018H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@IAKEEFCK@Format?5tag?5not?5XBOX_ADPCM?$AA@
  0005c	e8 00 00 00 00	 call	 _DwDbgPrint
  00061	83 c4 04	 add	 esp, 4

; 431  :         fValid = FALSE;

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29089:

; 432  :     }
; 433  :     
; 434  :     if(sizeof(*pwfx) - sizeof(pwfx->wfx) != pwfx->wfx.cbSize)

  0006b	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  0006e	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  00072	83 f9 02	 cmp	 ecx, 2
  00075	74 36		 je	 SHORT $L29092

; 435  :     {
; 436  :         DPF_ERROR("cbSize not %lu", sizeof(*pwfx) - sizeof(pwfx->wfx));

  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
  00081	68 b4 01 00 00	 push	 436			; 000001b4H
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0008b	6a 01		 push	 1
  0008d	6a 09		 push	 9
  0008f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00094	83 c4 18	 add	 esp, 24			; 00000018H
  00097	6a 02		 push	 2
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@NDFBNMGN@cbSize?5not?5?$CFlu?$AA@
  0009e	e8 00 00 00 00	 call	 _DwDbgPrint
  000a3	83 c4 08	 add	 esp, 8

; 437  :         fValid = FALSE;

  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29092:

; 438  :     }
; 439  :     
; 440  :     if((pwfx->wfx.nChannels < 1) || (pwfx->wfx.nChannels > 2))

  000ad	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  000b0	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  000b4	83 f8 01	 cmp	 eax, 1
  000b7	7c 0c		 jl	 SHORT $L29095
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  000bc	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  000c0	83 fa 02	 cmp	 edx, 2
  000c3	7e 34		 jle	 SHORT $L29094
$L29095:

; 441  :     {
; 442  :         DPF_ERROR("Invalid channel count");

  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
  000cf	68 ba 01 00 00	 push	 442			; 000001baH
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  000d9	6a 01		 push	 1
  000db	6a 09		 push	 9
  000dd	e8 00 00 00 00	 call	 _DwDbgSetContext
  000e2	83 c4 18	 add	 esp, 24			; 00000018H
  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@LMINNPNJ@Invalid?5channel?5count?$AA@
  000ea	e8 00 00 00 00	 call	 _DwDbgPrint
  000ef	83 c4 04	 add	 esp, 4

; 443  :         fValid = FALSE;

  000f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29094:

; 444  :     }
; 445  : 
; 446  :     if((pwfx->wfx.nSamplesPerSec < DSBFREQUENCY_MIN) || (pwfx->wfx.nSamplesPerSec > DSBFREQUENCY_MAX))

  000f9	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  000fc	81 78 04 bc 00
	00 00		 cmp	 DWORD PTR [eax+4], 188	; 000000bcH
  00103	72 0c		 jb	 SHORT $L29097
  00105	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  00108	81 79 04 ef ed
	02 00		 cmp	 DWORD PTR [ecx+4], 191983 ; 0002edefH
  0010f	76 34		 jbe	 SHORT $L29096
$L29097:

; 447  :     {
; 448  :         DPF_ERROR("Invalid sampling rate");

  00111	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00116	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
  0011b	68 c0 01 00 00	 push	 448			; 000001c0H
  00120	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00125	6a 01		 push	 1
  00127	6a 09		 push	 9
  00129	e8 00 00 00 00	 call	 _DwDbgSetContext
  0012e	83 c4 18	 add	 esp, 24			; 00000018H
  00131	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JMHMKDN@Invalid?5sampling?5rate?$AA@
  00136	e8 00 00 00 00	 call	 _DwDbgPrint
  0013b	83 c4 04	 add	 esp, 4

; 449  :         fValid = FALSE;

  0013e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29096:

; 450  :     }
; 451  : 
; 452  :     if(wBitsPerSample != pwfx->wfx.wBitsPerSample)

  00145	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?wBitsPerSample@?1??FmtIsValidAdpcm@@9@9
  0014c	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  0014f	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  00153	3b d1		 cmp	 edx, ecx
  00155	74 34		 je	 SHORT $L29098

; 453  :     {
; 454  :         DPF_ERROR("Invalid sample bit resolution");

  00157	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0015c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
  00161	68 c6 01 00 00	 push	 454			; 000001c6H
  00166	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0016b	6a 01		 push	 1
  0016d	6a 09		 push	 9
  0016f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00174	83 c4 18	 add	 esp, 24			; 00000018H
  00177	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@PGNHDJHJ@Invalid?5sample?5bit?5resolution?$AA@
  0017c	e8 00 00 00 00	 call	 _DwDbgPrint
  00181	83 c4 04	 add	 esp, 4

; 455  :         fValid = FALSE;

  00184	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29098:

; 456  :     }
; 457  : 
; 458  :     if(wSamplesPerBlock != pwfx->wSamplesPerBlock)

  0018b	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?wSamplesPerBlock@?1??FmtIsValidAdpcm@@9@9
  00192	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00195	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00199	3b d1		 cmp	 edx, ecx
  0019b	74 34		 je	 SHORT $L29099

; 459  :     {
; 460  :         DPF_ERROR("Invalid samples per block");

  0019d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  001a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
  001a7	68 cc 01 00 00	 push	 460			; 000001ccH
  001ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  001b1	6a 01		 push	 1
  001b3	6a 09		 push	 9
  001b5	e8 00 00 00 00	 call	 _DwDbgSetContext
  001ba	83 c4 18	 add	 esp, 24			; 00000018H
  001bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@COGBELGK@Invalid?5samples?5per?5block?$AA@
  001c2	e8 00 00 00 00	 call	 _DwDbgPrint
  001c7	83 c4 04	 add	 esp, 4

; 461  :         fValid = FALSE;

  001ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29099:

; 462  :     }
; 463  : 
; 464  :     if(wBytesPerBlock * pwfx->wfx.nChannels != pwfx->wfx.nBlockAlign)

  001d1	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?wBytesPerBlock@?1??FmtIsValidAdpcm@@9@9
  001d8	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  001db	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  001df	0f af d1	 imul	 edx, ecx
  001e2	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  001e5	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  001e9	3b d1		 cmp	 edx, ecx
  001eb	74 34		 je	 SHORT $L29101

; 465  :     {
; 466  :         DPF_ERROR("Bad block-alignment");

  001ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  001f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@LHPLPJPG@FmtIsValidAdpcm?$AA@
  001f7	68 d2 01 00 00	 push	 466			; 000001d2H
  001fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00201	6a 01		 push	 1
  00203	6a 09		 push	 9
  00205	e8 00 00 00 00	 call	 _DwDbgSetContext
  0020a	83 c4 18	 add	 esp, 24			; 00000018H
  0020d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@OGFJBCGA@Bad?5block?9alignment?$AA@
  00212	e8 00 00 00 00	 call	 _DwDbgPrint
  00217	83 c4 04	 add	 esp, 4

; 467  :         fValid = FALSE;

  0021a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29101:

; 468  :     }
; 469  : 
; 470  :     DPF_LEAVE(fValid);
; 471  : 
; 472  :     return fValid;

  00221	8b 45 fc	 mov	 eax, DWORD PTR _fValid$[ebp]

; 473  : }

  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c2 04 00	 ret	 4
_FmtIsValidAdpcm@4 ENDP
DSOUND	ENDS
PUBLIC	_IsEqualGUID@8
PUBLIC	??_C@_0BF@GEHOBCDM@Unexpected?5subformat?$AA@	; `string'
EXTRN	_KSDATAFORMAT_SUBTYPE_PCM:BYTE
EXTRN	_KSDATAFORMAT_SUBTYPE_XBOX_ADPCM:BYTE
;	COMDAT ??_C@_0BF@GEHOBCDM@Unexpected?5subformat?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@GEHOBCDM@Unexpected?5subformat?$AA@ DB 'Unexpected subformat', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtExtensibleToInternal@8
DSOUND	SEGMENT
_pDest$ = 8
_pSource$ = 12
_FmtExtensibleToInternal@8 PROC NEAR			; COMDAT

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 505  :     DPF_ENTER();
; 506  : 
; 507  :     ASSERT(pDest);

  00003	68 fb 01 00 00	 push	 507			; 000001fbH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05PJHAMANO@pDest?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pDest$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _DwDbgAssert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 508  :     ASSERT(pSource);

  00024	68 fc 01 00 00	 push	 508			; 000001fcH
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HPANBCJA@pSource?$AA@
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 0c 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _DwDbgAssert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 509  : 
; 510  :     if(IsEqualGUID(&pSource->SubFormat, &KSDATAFORMAT_SUBTYPE_PCM))

  00045	68 00 00 00 00	 push	 OFFSET FLAT:_KSDATAFORMAT_SUBTYPE_PCM
  0004a	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  0004d	83 c2 18	 add	 edx, 24			; 00000018H
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 _IsEqualGUID@8
  00056	85 c0		 test	 eax, eax
  00058	74 0f		 je	 SHORT $L29108

; 511  :     {
; 512  :         FmtPcmToInternal(pDest, &pSource->Format);

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _pSource$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _pDest$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 _FmtPcmToInternal@8

; 513  :     }
; 514  :     else if(IsEqualGUID(&pSource->SubFormat, &KSDATAFORMAT_SUBTYPE_XBOX_ADPCM))

  00067	eb 3d		 jmp	 SHORT $L29109
$L29108:
  00069	68 00 00 00 00	 push	 OFFSET FLAT:_KSDATAFORMAT_SUBTYPE_XBOX_ADPCM
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  00071	83 c2 18	 add	 edx, 24			; 00000018H
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 _IsEqualGUID@8
  0007a	85 c0		 test	 eax, eax
  0007c	74 0f		 je	 SHORT $L29110

; 515  :     {
; 516  :         FmtAdpcmToInternal(pDest, (LPCXBOXADPCMWAVEFORMAT)&pSource->Format);

  0007e	8b 45 0c	 mov	 eax, DWORD PTR _pSource$[ebp]
  00081	50		 push	 eax
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _pDest$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 _FmtAdpcmToInternal@8

; 517  :     }
; 518  :     else

  0008b	eb 19		 jmp	 SHORT $L29109
$L29110:

; 519  :     {
; 520  :         ASSERTMSG("Unexpected subformat");

  0008d	68 08 02 00 00	 push	 520			; 00000208H
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@GEHOBCDM@Unexpected?5subformat?$AA@
  0009c	6a 01		 push	 1
  0009e	e8 00 00 00 00	 call	 _DwDbgAssert
  000a3	83 c4 10	 add	 esp, 16			; 00000010H
$L29109:

; 521  :     }
; 522  : 
; 523  :     DPF_LEAVE(pSource->dwChannelMask);
; 524  : 
; 525  :     return pSource->dwChannelMask;

  000a6	8b 55 0c	 mov	 edx, DWORD PTR _pSource$[ebp]
  000a9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]

; 526  : }

  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
_FmtExtensibleToInternal@8 ENDP
DSOUND	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8d 45 0c	 lea	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8d 4d 08	 lea	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@	; `string'
PUBLIC	??_C@_0BK@FCNDIHOL@Format?5tag?5not?5EXTENSIBLE?$AA@ ; `string'
PUBLIC	??_C@_0CO@KKIDLDBA@wValidBitsPerSample?5must?5equal?5w@ ; `string'
PUBLIC	??_C@_0CE@OINPDAHG@wReserved?5must?5be?50?5for?5SUBTYPE_@ ; `string'
PUBLIC	??_C@_0BO@BCDFCNJM@Invalid?5sub?9format?5identifier?$AA@ ; `string'
PUBLIC	??_C@_0BF@JKCBDHDB@Invalid?5channel?5mask?$AA@	; `string'
;	COMDAT ??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\format.c
DSOUND_RD	SEGMENT
??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@ DB 'FmtIsValidExtensible', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@FCNDIHOL@Format?5tag?5not?5EXTENSIBLE?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@FCNDIHOL@Format?5tag?5not?5EXTENSIBLE?$AA@ DB 'Format tag not E'
	DB	'XTENSIBLE', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@KKIDLDBA@wValidBitsPerSample?5must?5equal?5w@
DSOUND_RD	SEGMENT
??_C@_0CO@KKIDLDBA@wValidBitsPerSample?5must?5equal?5w@ DB 'wValidBitsPer'
	DB	'Sample must equal wBitsPerSample', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@OINPDAHG@wReserved?5must?5be?50?5for?5SUBTYPE_@
DSOUND_RD	SEGMENT
??_C@_0CE@OINPDAHG@wReserved?5must?5be?50?5for?5SUBTYPE_@ DB 'wReserved m'
	DB	'ust be 0 for SUBTYPE_PCM', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BCDFCNJM@Invalid?5sub?9format?5identifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@BCDFCNJM@Invalid?5sub?9format?5identifier?$AA@ DB 'Invalid sub-'
	DB	'format identifier', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JKCBDHDB@Invalid?5channel?5mask?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@JKCBDHDB@Invalid?5channel?5mask?$AA@ DB 'Invalid channel mask', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _FmtIsValidExtensible@4
DSOUND	SEGMENT
_fValid$ = -4
_pwfx$ = 8
_FmtIsValidExtensible@4 PROC NEAR			; COMDAT

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 557  :     BOOL                    fValid  = TRUE;

  00004	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 1

; 558  : 
; 559  :     DPF_ENTER();
; 560  : 
; 561  :     ASSERT(pwfx);

  0000b	68 31 02 00 00	 push	 561			; 00000231H
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNFLDEGE@pwfx?$AA@
  0001a	33 c0		 xor	 eax, eax
  0001c	83 7d 08 00	 cmp	 DWORD PTR _pwfx$[ebp], 0
  00020	0f 94 c0	 sete	 al
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _DwDbgAssert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 562  : 
; 563  :     if(WAVE_FORMAT_EXTENSIBLE != pwfx->Format.wFormatTag)

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0002f	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00032	81 fa fe ff 00
	00		 cmp	 edx, 65534		; 0000fffeH
  00038	74 34		 je	 SHORT $L29118

; 564  :     {
; 565  :         DPF_ERROR("Format tag not EXTENSIBLE");

  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
  00044	68 35 02 00 00	 push	 565			; 00000235H
  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0004e	6a 01		 push	 1
  00050	6a 09		 push	 9
  00052	e8 00 00 00 00	 call	 _DwDbgSetContext
  00057	83 c4 18	 add	 esp, 24			; 00000018H
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@FCNDIHOL@Format?5tag?5not?5EXTENSIBLE?$AA@
  0005f	e8 00 00 00 00	 call	 _DwDbgPrint
  00064	83 c4 04	 add	 esp, 4

; 566  :         fValid = FALSE;

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29118:

; 567  :     }
; 568  :     
; 569  :     if(sizeof(*pwfx) - sizeof(pwfx->Format) != pwfx->Format.cbSize)

  0006e	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00071	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  00075	83 f9 16	 cmp	 ecx, 22			; 00000016H
  00078	74 36		 je	 SHORT $L29121

; 570  :     {
; 571  :         DPF_ERROR("cbSize not %lu", sizeof(*pwfx) - sizeof(pwfx->Format));

  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
  00084	68 3b 02 00 00	 push	 571			; 0000023bH
  00089	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  0008e	6a 01		 push	 1
  00090	6a 09		 push	 9
  00092	e8 00 00 00 00	 call	 _DwDbgSetContext
  00097	83 c4 18	 add	 esp, 24			; 00000018H
  0009a	6a 16		 push	 22			; 00000016H
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@NDFBNMGN@cbSize?5not?5?$CFlu?$AA@
  000a1	e8 00 00 00 00	 call	 _DwDbgPrint
  000a6	83 c4 08	 add	 esp, 8

; 572  :         fValid = FALSE;

  000a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29121:

; 573  :     }
; 574  :     
; 575  :     if(IsEqualGUID(&pwfx->SubFormat, &KSDATAFORMAT_SUBTYPE_PCM))

  000b0	68 00 00 00 00	 push	 OFFSET FLAT:_KSDATAFORMAT_SUBTYPE_PCM
  000b5	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  000b8	83 c2 18	 add	 edx, 24			; 00000018H
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 _IsEqualGUID@8
  000c1	85 c0		 test	 eax, eax
  000c3	0f 84 9b 00 00
	00		 je	 $L29122

; 576  :     {
; 577  :         if(!FmtIsValidPcm(&pwfx->Format))

  000c9	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _FmtIsValidPcm@4
  000d2	85 c0		 test	 eax, eax
  000d4	75 07		 jne	 SHORT $L29123

; 578  :         {
; 579  :             fValid = FALSE;

  000d6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29123:

; 580  :         }
; 581  : 
; 582  :         if(pwfx->Samples.wValidBitsPerSample != pwfx->Format.wBitsPerSample)

  000dd	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  000e0	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  000e4	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  000e7	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  000eb	3b d1		 cmp	 edx, ecx
  000ed	74 34		 je	 SHORT $L29124

; 583  :         {
; 584  :             DPF_ERROR("wValidBitsPerSample must equal wBitsPerSample");

  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
  000f9	68 48 02 00 00	 push	 584			; 00000248H
  000fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00103	6a 01		 push	 1
  00105	6a 09		 push	 9
  00107	e8 00 00 00 00	 call	 _DwDbgSetContext
  0010c	83 c4 18	 add	 esp, 24			; 00000018H
  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@KKIDLDBA@wValidBitsPerSample?5must?5equal?5w@
  00114	e8 00 00 00 00	 call	 _DwDbgPrint
  00119	83 c4 04	 add	 esp, 4

; 585  :             fValid = FALSE;

  0011c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29124:

; 586  :         }
; 587  : 
; 588  :         if(pwfx->Samples.wReserved)

  00123	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  00126	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  0012a	85 c0		 test	 eax, eax
  0012c	74 34		 je	 SHORT $L29126

; 589  :         {
; 590  :             DPF_ERROR("wReserved must be 0 for SUBTYPE_PCM");

  0012e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00133	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
  00138	68 4e 02 00 00	 push	 590			; 0000024eH
  0013d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  00142	6a 01		 push	 1
  00144	6a 09		 push	 9
  00146	e8 00 00 00 00	 call	 _DwDbgSetContext
  0014b	83 c4 18	 add	 esp, 24			; 00000018H
  0014e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@OINPDAHG@wReserved?5must?5be?50?5for?5SUBTYPE_@
  00153	e8 00 00 00 00	 call	 _DwDbgPrint
  00158	83 c4 04	 add	 esp, 4

; 591  :             fValid = FALSE;

  0015b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29126:

; 592  :         }
; 593  :     }
; 594  :     else if(IsEqualGUID(&pwfx->SubFormat, &KSDATAFORMAT_SUBTYPE_XBOX_ADPCM))

  00162	eb 5f		 jmp	 SHORT $L29128
$L29122:
  00164	68 00 00 00 00	 push	 OFFSET FLAT:_KSDATAFORMAT_SUBTYPE_XBOX_ADPCM
  00169	8b 4d 08	 mov	 ecx, DWORD PTR _pwfx$[ebp]
  0016c	83 c1 18	 add	 ecx, 24			; 00000018H
  0016f	51		 push	 ecx
  00170	e8 00 00 00 00	 call	 _IsEqualGUID@8
  00175	85 c0		 test	 eax, eax
  00177	74 16		 je	 SHORT $L29129

; 595  :     {
; 596  :         if(!FmtIsValidAdpcm((LPCXBOXADPCMWAVEFORMAT)&pwfx->Format))

  00179	8b 55 08	 mov	 edx, DWORD PTR _pwfx$[ebp]
  0017c	52		 push	 edx
  0017d	e8 00 00 00 00	 call	 _FmtIsValidAdpcm@4
  00182	85 c0		 test	 eax, eax
  00184	75 07		 jne	 SHORT $L29131

; 597  :         {
; 598  :             fValid = FALSE;

  00186	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29131:

; 599  :         }
; 600  :     }
; 601  :     else

  0018d	eb 34		 jmp	 SHORT $L29128
$L29129:

; 602  :     {
; 603  :         DPF_ERROR("Invalid sub-format identifier");

  0018f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00194	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
  00199	68 5b 02 00 00	 push	 603			; 0000025bH
  0019e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  001a3	6a 01		 push	 1
  001a5	6a 09		 push	 9
  001a7	e8 00 00 00 00	 call	 _DwDbgSetContext
  001ac	83 c4 18	 add	 esp, 24			; 00000018H
  001af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@BCDFCNJM@Invalid?5sub?9format?5identifier?$AA@
  001b4	e8 00 00 00 00	 call	 _DwDbgPrint
  001b9	83 c4 04	 add	 esp, 4

; 604  :         fValid = FALSE;

  001bc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29128:

; 605  :     }
; 606  : 
; 607  :     if(pwfx->dwChannelMask & ~SPEAKER_MASK)

  001c3	8b 45 08	 mov	 eax, DWORD PTR _pwfx$[ebp]
  001c6	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001c9	83 e1 c0	 and	 ecx, -64		; ffffffc0H
  001cc	85 c9		 test	 ecx, ecx
  001ce	74 34		 je	 SHORT $L29134

; 608  :     {
; 609  :         DPF_ERROR("Invalid channel mask");

  001d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  001d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@NINDPABB@FmtIsValidExtensible?$AA@
  001da	68 61 02 00 00	 push	 609			; 00000261H
  001df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@KHJOBHCF@c?3?2xbox?2private?2windows?2directx?2@
  001e4	6a 01		 push	 1
  001e6	6a 09		 push	 9
  001e8	e8 00 00 00 00	 call	 _DwDbgSetContext
  001ed	83 c4 18	 add	 esp, 24			; 00000018H
  001f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JKCBDHDB@Invalid?5channel?5mask?$AA@
  001f5	e8 00 00 00 00	 call	 _DwDbgPrint
  001fa	83 c4 04	 add	 esp, 4

; 610  :         fValid = FALSE;

  001fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fValid$[ebp], 0
$L29134:

; 611  :     }
; 612  : 
; 613  :     DPF_LEAVE(fValid);
; 614  : 
; 615  :     return fValid;

  00204	8b 45 fc	 mov	 eax, DWORD PTR _fValid$[ebp]

; 616  : }

  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c2 04 00	 ret	 4
_FmtIsValidExtensible@4 ENDP
DSOUND	ENDS
END
