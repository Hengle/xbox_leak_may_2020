; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\mcpapu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT PARA USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@LNGLCLLL@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07CNKCBOKB@TESTSND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NAFPMNMN@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GKNCNMBD@CDirectSoundTest?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@KCMACBKL@CDirectSoundTest?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@MGBFHDDM@CMcpxAPUTest?3?3?$HOCMcpxAPUTest?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@MHKCIED@CMcpxAPUTest?3?3Initialize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@DPFJADHC@CMcpxAPUTest?3?3WaitForMagicWrite?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT ??_C@_0DE@KCBHIGPJ@NV_PAPU_FECTL_FEMETHMODE_TRAPPED@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@IBKJGPAK@CMcpxAPUTest?3?3HandleDeltaPanic?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@ENMNHFML@Delta?5panic?4?5?5You?8ll?5hear?5a?5glit@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@KKGDDECE@CMcpxAPUTest?3?3HandleSoftwareMeth@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT @InterlockedExchange@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CRefCountTest@@QAE@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCountTest@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCountTest@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundTestEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundTestLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetupDSPs@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDmaTest@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ApuInterruptServiceRoutine@CMcpxAPUTest@@CGEPAU_KINTERRUPT@@PAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ApuInterruptDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DeferredCommandDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ApuShutdownNotifier@CMcpxAPUTest@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?BlockIdleHandler@CMcpxAPUTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?UnblockIdleHandler@CMcpxAPUTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleApuInterruptDpc@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxAPUTest@@QAE@PAVCDirectSoundTestSettings@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxAPUTest@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxAPUTest@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxAPUTest@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Terminate@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceApuInterrupt@CMcpxAPUTest@@IAEHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceApuInterruptDpc@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceVoiceInterrupt@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetInterruptStatusCallback@CMcpxAPUTest@@CGEPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleFETrap@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleDeltaPanic@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleSoftwareMethod@CMcpxAPUTest@@IAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_ECMcpxAPUTest@@W7AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxAPUTest@@6BCMcpxCoreTest@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _TestSoundLibBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7CRefCountTest@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxAPUTest@@6BCRefCountTest@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, DSOUND_RW, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A	; CMcpxAPUTest::m_Interrupt
PUBLIC	?m_dwDeltaPanicCount@CMcpxAPUTest@@0KA		; CMcpxAPUTest::m_dwDeltaPanicCount
PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_g_fDirectSoundTestSimulateDeltaPanic
PUBLIC	_TestSoundLibBuildNumberD
DSOUND_URW	SEGMENT
?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A DB 070H DUP (?) ; CMcpxAPUTest::m_Interrupt
DSOUND_URW	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _TestSoundLibBuildNumberD
XBLD$V	SEGMENT
_TestSoundLibBuildNumberD DW 04554H
	DW	05453H
	DW	04e53H
	DW	04444H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RW	SEGMENT
_g_fDirectSoundTestSimulateDeltaPanic DD 00H
?m_dwDeltaPanicCount@CMcpxAPUTest@@0KA DD 00H		; CMcpxAPUTest::m_dwDeltaPanicCount
DSOUND_RW	ENDS
PUBLIC	??0CRefCountTest@@QAE@K@Z			; CRefCountTest::CRefCountTest
PUBLIC	?AddRef@CRefCountTest@@UAGKXZ			; CRefCountTest::AddRef
PUBLIC	?Release@CRefCountTest@@UAGKXZ			; CRefCountTest::Release
PUBLIC	??0CMcpxAPUTest@@QAE@PAVCDirectSoundTestSettings@@@Z ; CMcpxAPUTest::CMcpxAPUTest
PUBLIC	??_7CMcpxAPUTest@@6BCRefCountTest@@@		; CMcpxAPUTest::`vftable'
PUBLIC	??_7CMcpxAPUTest@@6BCMcpxCoreTest@@@		; CMcpxAPUTest::`vftable'
PUBLIC	??_GCMcpxAPUTest@@UAEPAXI@Z			; CMcpxAPUTest::`scalar deleting destructor'
PUBLIC	??_ECMcpxAPUTest@@W7AEPAXI@Z			; CMcpxAPUTest::`vector deleting destructor'
EXTRN	??0CMcpxBufferSgeHeapTest@@QAE@XZ:NEAR		; CMcpxBufferSgeHeapTest::CMcpxBufferSgeHeapTest
EXTRN	??_ECMcpxAPUTest@@UAEPAXI@Z:NEAR		; CMcpxAPUTest::`vector deleting destructor'
EXTRN	??0CMcpxCoreTest@@QAE@PAVCDirectSoundTestSettings@@@Z:NEAR ; CMcpxCoreTest::CMcpxCoreTest
;	COMDAT ??_7CMcpxAPUTest@@6BCRefCountTest@@@
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.cpp
CONST	SEGMENT
??_7CMcpxAPUTest@@6BCRefCountTest@@@ DD FLAT:??_ECMcpxAPUTest@@UAEPAXI@Z ; CMcpxAPUTest::`vftable'
	DD	FLAT:?AddRef@CRefCountTest@@UAGKXZ
	DD	FLAT:?Release@CRefCountTest@@UAGKXZ
CONST	ENDS
;	COMDAT ??_7CMcpxAPUTest@@6BCMcpxCoreTest@@@
CONST	SEGMENT
??_7CMcpxAPUTest@@6BCMcpxCoreTest@@@ DD FLAT:??_ECMcpxAPUTest@@W7AEPAXI@Z ; CMcpxAPUTest::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMcpxAPUTest@@QAE@PAVCDirectSoundTestSettings@@@Z
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
_pSettings$ = 8
??0CMcpxAPUTest@@QAE@PAVCDirectSoundTestSettings@@@Z PROC NEAR ; CMcpxAPUTest::CMcpxAPUTest, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	6a 01		 push	 1
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CRefCountTest@@QAE@K@Z ; CRefCountTest::CRefCountTest
  00014	8b 45 08	 mov	 eax, DWORD PTR _pSettings$[ebp]
  00017	50		 push	 eax
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	e8 00 00 00 00	 call	 ??0CMcpxCoreTest@@QAE@PAVCDirectSoundTestSettings@@@Z ; CMcpxCoreTest::CMcpxCoreTest
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CMcpxAPUTest@@6BCRefCountTest@@@
  0002c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CMcpxAPUTest@@6BCMcpxCoreTest@@@
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 64	 add	 ecx, 100		; 00000064H
  0003c	e8 00 00 00 00	 call	 ??0CMcpxBufferSgeHeapTest@@QAE@XZ ; CMcpxBufferSgeHeapTest::CMcpxBufferSgeHeapTest

; 51   :     DWORD                   i;
; 52   :     
; 53   :     DPF_ENTER();
; 54   :     
; 55   :     //
; 56   :     // Initialize defaults
; 57   :     //
; 58   :     
; 59   :     for(i = 0; i < NUMELMS(m_alstActiveVoices); i++)

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00048	eb 09		 jmp	 SHORT $L32060
$L32061:
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L32060:
  00053	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  00057	73 36		 jae	 SHORT $L32062

; 60   :     {
; 61   :         InitializeListHead(&m_alstActiveVoices[i]);

  00059	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8d 84 ca 8c 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+140]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00069	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	89 84 ca 90 00
	00 00		 mov	 DWORD PTR [edx+ecx*8+144], eax
  00073	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00076	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0007c	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  0007f	8b 94 d6 90 00
	00 00		 mov	 edx, DWORD PTR [esi+edx*8+144]
  00086	89 94 c1 8c 00
	00 00		 mov	 DWORD PTR [ecx+eax*8+140], edx

; 62   :     }

  0008d	eb bb		 jmp	 SHORT $L32061
$L32062:

; 63   : 
; 64   :     InitializeListHead(&m_lstPendingInactiveVoices);

  0008f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00092	05 a4 00 00 00	 add	 eax, 164		; 000000a4H
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
  000a0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  000ac	89 8a a4 00 00
	00		 mov	 DWORD PTR [edx+164], ecx

; 65   :     InitializeListHead(&m_lstDeferredCommandsHigh);

  000b2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	81 c2 ac 00 00
	00		 add	 edx, 172		; 000000acH
  000bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000be	89 90 b0 00 00
	00		 mov	 DWORD PTR [eax+176], edx
  000c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ca	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  000d0	89 81 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], eax

; 66   :     InitializeListHead(&m_lstDeferredCommandsLow);

  000d6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  000df	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	89 8a b8 00 00
	00		 mov	 DWORD PTR [edx+184], ecx
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  000f4	89 90 b4 00 00
	00		 mov	 DWORD PTR [eax+180], edx

; 67   : 
; 68   :     m_wFree2dVoiceCount = MCPX_HW_MAX_2D_VOICES;

  000fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	66 c7 40 58 c0
	00		 mov	 WORD PTR [eax+88], 192	; 000000c0H

; 69   :     m_wFree3dVoiceCount = MCPX_HW_MAX_3D_VOICES;

  00103	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00106	66 c7 41 5a 40
	00		 mov	 WORD PTR [ecx+90], 64	; 00000040H

; 70   : 
; 71   :     DPF_LEAVE_VOID();
; 72   : }

  0010c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	5e		 pop	 esi
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
??0CMcpxAPUTest@@QAE@PAVCDirectSoundTestSettings@@@Z ENDP ; CMcpxAPUTest::CMcpxAPUTest
DSOUND	ENDS
PUBLIC	??_7CRefCountTest@@6B@				; CRefCountTest::`vftable'
PUBLIC	??_GCRefCountTest@@UAEPAXI@Z			; CRefCountTest::`scalar deleting destructor'
EXTRN	??_ECRefCountTest@@UAEPAXI@Z:NEAR		; CRefCountTest::`vector deleting destructor'
;	COMDAT ??_7CRefCountTest@@6B@
; File c:\xbox\private\windows\directx\dsound\initlib\refcount.h
CONST	SEGMENT
??_7CRefCountTest@@6B@ DD FLAT:??_ECRefCountTest@@UAEPAXI@Z ; CRefCountTest::`vftable'
	DD	FLAT:?AddRef@CRefCountTest@@UAGKXZ
	DD	FLAT:?Release@CRefCountTest@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCountTest@@QAE@K@Z
DSOUND	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCountTest@@QAE@K@Z PROC NEAR			; CRefCountTest::CRefCountTest, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCountTest@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 36   : }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCountTest@@QAE@K@Z ENDP				; CRefCountTest::CRefCountTest
DSOUND	ENDS
PUBLIC	??1CRefCountTest@@UAE@XZ			; CRefCountTest::~CRefCountTest
; Function compile flags: /Odt
;	COMDAT ??_GCRefCountTest@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCountTest@@UAEPAXI@Z PROC NEAR			; CRefCountTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCountTest@@UAE@XZ ; CRefCountTest::~CRefCountTest
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L29812
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L29812:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCountTest@@UAEPAXI@Z ENDP			; CRefCountTest::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	_DirectSoundTestTrackingMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 180  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  :     DirectSoundTestTrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _DirectSoundTestTrackingMemFree@4

; 182  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
EXTRN	_DwDbgAssert:NEAR
;	COMDAT ??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\initlib\refcount.h
DSOUND_RD	SEGMENT
??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CRefCountTest@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CRefCountTest@@UAE@XZ PROC NEAR			; CRefCountTest::~CRefCountTest, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCountTest@@6B@

; 40   :     ASSERT(!m_dwRefCount);

  00010	6a 28		 push	 40			; 00000028H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 _DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 41   : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCountTest@@UAE@XZ ENDP				; CRefCountTest::~CRefCountTest
DSOUND	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCountTest@@UAGKXZ PROC NEAR			; CRefCountTest::AddRef, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   :     ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2d		 push	 45			; 0000002dH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 _DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 46   :     return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 47   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCountTest@@UAGKXZ ENDP			; CRefCountTest::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T32467 = -8
$T32466 = -4
_this$ = 8
?Release@CRefCountTest@@UAGKXZ PROC NEAR		; CRefCountTest::Release, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 51   :     ASSERT(m_dwRefCount);

  00006	6a 33		 push	 51			; 00000033H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 52   : 
; 53   :     if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L29829

; 54   :     {
; 55   :         if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L29829

; 56   :         {
; 57   :             delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T32467[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T32467[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T32466[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T32466[ebp], 0
  00058	74 11		 je	 SHORT $L32468
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T32466[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T32466[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L32469
$L32468:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L32469:

; 58   :             return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L29827
$L29829:

; 59   :         }
; 60   :     }
; 61   : 
; 62   :     return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L29827:

; 63   : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCountTest@@UAGKXZ ENDP			; CRefCountTest::Release
DSOUND	ENDS
PUBLIC	??1CMcpxAPUTest@@UAE@XZ				; CMcpxAPUTest::~CMcpxAPUTest
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxAPUTest@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxAPUTest@@UAEPAXI@Z PROC NEAR			; CMcpxAPUTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxAPUTest@@UAE@XZ	; CMcpxAPUTest::~CMcpxAPUTest
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L32066
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L32066:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxAPUTest@@UAEPAXI@Z ENDP			; CMcpxAPUTest::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??_C@_07CNKCBOKB@TESTSND?$AA@			; `string'
PUBLIC	?Terminate@CMcpxAPUTest@@IAEXXZ			; CMcpxAPUTest::Terminate
PUBLIC	??_C@_0BM@MGBFHDDM@CMcpxAPUTest?3?3?$HOCMcpxAPUTest?$AA@ ; `string'
PUBLIC	??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@	; `string'
EXTRN	__imp__HalRegisterShutdownNotification@8:NEAR
EXTRN	??1CMcpxBufferSgeHeapTest@@UAE@XZ:NEAR		; CMcpxBufferSgeHeapTest::~CMcpxBufferSgeHeapTest
EXTRN	??1CMcpxCoreTest@@UAE@XZ:NEAR			; CMcpxCoreTest::~CMcpxCoreTest
EXTRN	_DwDbgSetContext:NEAR
EXTRN	_DwDbgPrint:NEAR
EXTRN	__imp__KeRemoveQueueDpc@4:NEAR
EXTRN	__imp__KeDisconnectInterrupt@4:NEAR
EXTRN	__imp__KeCancelTimer@4:NEAR
;	COMDAT ??_C@_07CNKCBOKB@TESTSND?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.cpp
DSOUND_RD	SEGMENT
??_C@_07CNKCBOKB@TESTSND?$AA@ DB 'TESTSND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@MGBFHDDM@CMcpxAPUTest?3?3?$HOCMcpxAPUTest?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@MGBFHDDM@CMcpxAPUTest?3?3?$HOCMcpxAPUTest?$AA@ DB 'CMcpxAPUTest'
	DB	'::~CMcpxAPUTest', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\mcpapu.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@
DSOUND_RD	SEGMENT
??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@ DB 'APU going away...', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CMcpxAPUTest@@UAE@XZ
DSOUND	SEGMENT
tv68 = -8
_this$ = -4
??1CMcpxAPUTest@@UAE@XZ PROC NEAR			; CMcpxAPUTest::~CMcpxAPUTest, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxAPUTest@@6BCRefCountTest@@@
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:??_7CMcpxAPUTest@@6BCMcpxCoreTest@@@

; 98   :     DPF_ENTER();
; 99   : 
; 100  :     DPF_INFO("APU going away...");

  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MGBFHDDM@CMcpxAPUTest?3?3?$HOCMcpxAPUTest?$AA@
  00026	6a 64		 push	 100			; 00000064H
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  0002d	6a 04		 push	 4
  0002f	6a 09		 push	 9
  00031	e8 00 00 00 00	 call	 _DwDbgSetContext
  00036	83 c4 18	 add	 esp, 24			; 00000018H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@
  0003e	e8 00 00 00 00	 call	 _DwDbgPrint
  00043	83 c4 04	 add	 esp, 4

; 101  : 
; 102  :     //
; 103  :     // Shut down the APU
; 104  :     //
; 105  : 
; 106  :     Terminate();

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?Terminate@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::Terminate

; 107  : 
; 108  :     //
; 109  :     // Disconnect the interrupt handler
; 110  :     //
; 111  : 
; 112  :     if(m_Interrupt.ServiceRoutine)

  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A, 0
  00055	74 15		 je	 SHORT $L32074

; 113  :     {
; 114  :         KeDisconnectInterrupt(&m_Interrupt);

  00057	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A ; CMcpxAPUTest::m_Interrupt
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeDisconnectInterrupt@4

; 115  :         m_Interrupt.ServiceRoutine = NULL;

  00062	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A, 0
$L32074:

; 116  :     }
; 117  : 
; 118  :     //
; 119  :     // Cancel timers
; 120  :     //
; 121  : 
; 122  :     KeCancelTimer(&m_tmrDeferredCommandsHigh);

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  00075	52		 push	 edx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeCancelTimer@4

; 123  : 
; 124  :     //
; 125  :     // Clear any pending DPCs
; 126  :     //
; 127  : 
; 128  :     if(DpcObject == m_dpcInterrupt.Type)

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	0f bf 88 cc 00
	00 00		 movsx	 ecx, WORD PTR [eax+204]
  00086	83 f9 13	 cmp	 ecx, 19			; 00000013H
  00089	75 26		 jne	 SHORT $L32075

; 129  :     {
; 130  :         KeRemoveQueueDpc(&m_dpcInterrupt);

  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	81 c2 cc 00 00
	00		 add	 edx, 204		; 000000ccH
  00094	52		 push	 edx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRemoveQueueDpc@4

; 131  :         m_dpcInterrupt.Type = ~m_dpcInterrupt.Type;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	0f bf 88 cc 00
	00 00		 movsx	 ecx, WORD PTR [eax+204]
  000a5	f7 d1		 not	 ecx
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	66 89 8a cc 00
	00 00		 mov	 WORD PTR [edx+204], cx
$L32075:

; 132  :     }
; 133  : 
; 134  :     if(DpcObject == m_dpcDeferredCommandsHigh.Type)

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	0f bf 88 10 01
	00 00		 movsx	 ecx, WORD PTR [eax+272]
  000bb	83 f9 13	 cmp	 ecx, 19			; 00000013H
  000be	75 26		 jne	 SHORT $L32076

; 135  :     {
; 136  :         KeRemoveQueueDpc(&m_dpcDeferredCommandsHigh);

  000c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c3	81 c2 10 01 00
	00		 add	 edx, 272		; 00000110H
  000c9	52		 push	 edx
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRemoveQueueDpc@4

; 137  :         m_dpcDeferredCommandsHigh.Type = ~m_dpcInterrupt.Type;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	0f bf 88 cc 00
	00 00		 movsx	 ecx, WORD PTR [eax+204]
  000da	f7 d1		 not	 ecx
  000dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000df	66 89 8a 10 01
	00 00		 mov	 WORD PTR [edx+272], cx
$L32076:

; 138  :     }
; 139  : 
; 140  :     //
; 141  :     // Unregister the shutdown handler
; 142  :     //
; 143  : 
; 144  :     if(m_HalShutdownData.NotificationRoutine)

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	83 b8 2c 01 00
	00 00		 cmp	 DWORD PTR [eax+300], 0
  000f0	74 1f		 je	 SHORT $L32070

; 145  :     {
; 146  :         HalRegisterShutdownNotification(&m_HalShutdownData, FALSE);

  000f2	6a 00		 push	 0
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	81 c1 2c 01 00
	00		 add	 ecx, 300		; 0000012cH
  000fd	51		 push	 ecx
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HalRegisterShutdownNotification@8

; 147  :         m_HalShutdownData.NotificationRoutine = NULL;

  00104	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00107	c7 82 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+300], 0
$L32070:

; 148  :     }
; 149  : 
; 150  :     DPF_LEAVE_VOID();
; 151  : }

  00111	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	83 c1 64	 add	 ecx, 100		; 00000064H
  00117	e8 00 00 00 00	 call	 ??1CMcpxBufferSgeHeapTest@@UAE@XZ ; CMcpxBufferSgeHeapTest::~CMcpxBufferSgeHeapTest
  0011c	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00120	74 0b		 je	 SHORT $L32476
  00122	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00125	83 c0 08	 add	 eax, 8
  00128	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  0012b	eb 07		 jmp	 SHORT $L32477
$L32476:
  0012d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L32477:
  00134	8b 4d f8	 mov	 ecx, DWORD PTR tv68[ebp]
  00137	e8 00 00 00 00	 call	 ??1CMcpxCoreTest@@UAE@XZ ; CMcpxCoreTest::~CMcpxCoreTest
  0013c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	e8 00 00 00 00	 call	 ??1CRefCountTest@@UAE@XZ ; CRefCountTest::~CRefCountTest
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
??1CMcpxAPUTest@@UAE@XZ ENDP				; CMcpxAPUTest::~CMcpxAPUTest
DSOUND	ENDS
PUBLIC	?Initialize@CMcpxAPUTest@@QAEJXZ		; CMcpxAPUTest::Initialize
PUBLIC	?ApuInterruptServiceRoutine@CMcpxAPUTest@@CGEPAU_KINTERRUPT@@PAX@Z ; CMcpxAPUTest::ApuInterruptServiceRoutine
PUBLIC	?ApuInterruptDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z ; CMcpxAPUTest::ApuInterruptDpcRoutine
PUBLIC	?DeferredCommandDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z ; CMcpxAPUTest::DeferredCommandDpcRoutine
PUBLIC	?ApuShutdownNotifier@CMcpxAPUTest@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z ; CMcpxAPUTest::ApuShutdownNotifier
PUBLIC	??_C@_0BJ@MHKCIED@CMcpxAPUTest?3?3Initialize?$AA@ ; `string'
PUBLIC	??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@ ; `string'
EXTRN	__imp__HalGetInterruptVector@8:NEAR
EXTRN	?Initialize@CMcpxBufferSgeHeapTest@@QAEJG@Z:NEAR ; CMcpxBufferSgeHeapTest::Initialize
EXTRN	?Initialize@CMcpxCoreTest@@QAEJXZ:NEAR		; CMcpxCoreTest::Initialize
EXTRN	?SetInterruptState@CMcpxCoreTest@@IAEXH@Z:NEAR	; CMcpxCoreTest::SetInterruptState
EXTRN	__imp__KeInitializeDpc@12:NEAR
EXTRN	__imp__KeInitializeInterrupt@28:NEAR
EXTRN	__imp__KeConnectInterrupt@4:NEAR
EXTRN	__imp__KeInitializeTimerEx@8:NEAR
;	COMDAT ??_C@_0BJ@MHKCIED@CMcpxAPUTest?3?3Initialize?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@MHKCIED@CMcpxAPUTest?3?3Initialize?$AA@ DB 'CMcpxAPUTest::Initi'
	DB	'alize', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@ DB 'KeConnectInterrupt'
	DB	' failed', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxAPUTest@@QAEJXZ
DSOUND	SEGMENT
_this$ = -20
_hr$ = -16
_ulInterruptVector$ = -8
_irql$ = -1
?Initialize@CMcpxAPUTest@@QAEJXZ PROC NEAR		; CMcpxAPUTest::Initialize, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 178  :     ULONG                   ulInterruptVector;
; 179  :     KIRQL                   irql;
; 180  :     HRESULT                 hr;
; 181  :     DWORD                   i;
; 182  : 
; 183  :     //
; 184  :     // Initialize the APU core
; 185  :     //
; 186  : 
; 187  :     hr = CMcpxCoreTest::Initialize();

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 08	 add	 ecx, 8
  0000f	e8 00 00 00 00	 call	 ?Initialize@CMcpxCoreTest@@QAEJXZ ; CMcpxCoreTest::Initialize
  00014	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 188  : 
; 189  :     //
; 190  :     // Create the buffer SGE heap.  We're only managing 2047 markers because
; 191  :     // the 2048th is reserved for FXIN buffers.
; 192  :     //
; 193  : 
; 194  :     if(SUCCEEDED(hr))

  00017	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001b	7c 13		 jl	 SHORT $L32087

; 195  :     {
; 196  :         hr = m_SgeHeap.Initialize(MCPX_HW_MAX_BUFFER_PRDS - 1);

  0001d	68 ff 07 00 00	 push	 2047			; 000007ffH
  00022	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 c1 64	 add	 ecx, 100		; 00000064H
  00028	e8 00 00 00 00	 call	 ?Initialize@CMcpxBufferSgeHeapTest@@QAEJG@Z ; CMcpxBufferSgeHeapTest::Initialize
  0002d	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L32087:

; 197  :     }
; 198  : 
; 199  :     //
; 200  :     // Set up timers and DPCs
; 201  :     //
; 202  :     
; 203  : 	if(SUCCEEDED(hr))

  00030	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00034	7c 44		 jl	 SHORT $L32089

; 204  :     {
; 205  :         KeInitializeDpc(&m_dpcInterrupt, ApuInterruptDpcRoutine, this);

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:?ApuInterruptDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z ; CMcpxAPUTest::ApuInterruptDpcRoutine
  0003f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	81 c1 cc 00 00
	00		 add	 ecx, 204		; 000000ccH
  00048	51		 push	 ecx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeDpc@12

; 206  :         KeInitializeTimer(&m_tmrDeferredCommandsHigh);

  0004f	6a 00		 push	 0
  00051	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00054	81 c2 e8 00 00
	00		 add	 edx, 232		; 000000e8H
  0005a	52		 push	 edx
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeTimerEx@8

; 207  :         KeInitializeDpc(&m_dpcDeferredCommandsHigh, DeferredCommandDpcRoutine, this);

  00061	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00064	50		 push	 eax
  00065	68 00 00 00 00	 push	 OFFSET FLAT:?DeferredCommandDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z ; CMcpxAPUTest::DeferredCommandDpcRoutine
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  00073	51		 push	 ecx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeDpc@12
$L32089:

; 208  :     }
; 209  : 
; 210  : 	//
; 211  :     // Hook and enable interrupts
; 212  :     //
; 213  : 
; 214  :     if(SUCCEEDED(hr))

  0007a	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007e	7c 75		 jl	 SHORT $L32091

; 215  :     {
; 216  :         ulInterruptVector = HalGetInterruptVector(XPCICFG_APU_IRQ, &irql);

  00080	8d 55 ff	 lea	 edx, DWORD PTR _irql$[ebp]
  00083	52		 push	 edx
  00084	6a 05		 push	 5
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HalGetInterruptVector@8
  0008c	89 45 f8	 mov	 DWORD PTR _ulInterruptVector$[ebp], eax

; 217  : 
; 218  :         KeInitializeInterrupt(&m_Interrupt, ApuInterruptServiceRoutine, this, ulInterruptVector, irql, LevelSensitive, TRUE);

  0008f	6a 01		 push	 1
  00091	6a 00		 push	 0
  00093	8a 45 ff	 mov	 al, BYTE PTR _irql$[ebp]
  00096	50		 push	 eax
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _ulInterruptVector$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	52		 push	 edx
  0009f	68 00 00 00 00	 push	 OFFSET FLAT:?ApuInterruptServiceRoutine@CMcpxAPUTest@@CGEPAU_KINTERRUPT@@PAX@Z ; CMcpxAPUTest::ApuInterruptServiceRoutine
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A ; CMcpxAPUTest::m_Interrupt
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeInterrupt@28

; 219  : 
; 220  :         if(!KeConnectInterrupt(&m_Interrupt))

  000af	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A ; CMcpxAPUTest::m_Interrupt
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeConnectInterrupt@4
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	85 c0		 test	 eax, eax
  000bf	75 34		 jne	 SHORT $L32091

; 221  :         {
; 222  :             DPF_ERROR("KeConnectInterrupt failed");

  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MHKCIED@CMcpxAPUTest?3?3Initialize?$AA@
  000cb	68 de 00 00 00	 push	 222			; 000000deH
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  000d5	6a 01		 push	 1
  000d7	6a 09		 push	 9
  000d9	e8 00 00 00 00	 call	 _DwDbgSetContext
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@
  000e6	e8 00 00 00 00	 call	 _DwDbgPrint
  000eb	83 c4 04	 add	 esp, 4

; 223  :             hr = DSERR_GENERIC;

  000ee	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L32091:

; 224  :         }
; 225  :     }
; 226  : 
; 227  :     if(SUCCEEDED(hr))

  000f5	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f9	7c 0a		 jl	 SHORT $L32097

; 228  :     {
; 229  :         MCPX_REG_WRITE(NV_PAPU_ISTS, ~0UL);

  000fb	c7 05 00 10 80
	fe ff ff ff ff	 mov	 DWORD PTR ds:-25161728, -1
$L32097:

; 230  :     }
; 231  : 
; 232  :     if(SUCCEEDED(hr))

  00105	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00109	7c 0d		 jl	 SHORT $L32101

; 233  :     {
; 234  :         SetInterruptState(TRUE);

  0010b	6a 01		 push	 1
  0010d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	83 c1 08	 add	 ecx, 8
  00113	e8 00 00 00 00	 call	 ?SetInterruptState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetInterruptState
$L32101:

; 235  :     }
; 236  : 
; 237  :     //
; 238  :     // Register for HAL shutdown notification
; 239  :     //
; 240  : 
; 241  :     if(SUCCEEDED(hr))

  00118	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011c	7c 1f		 jl	 SHORT $L32103

; 242  :     {
; 243  :         m_HalShutdownData.NotificationRoutine = ApuShutdownNotifier;

  0011e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	c7 81 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+300], OFFSET FLAT:?ApuShutdownNotifier@CMcpxAPUTest@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z ; CMcpxAPUTest::ApuShutdownNotifier

; 244  : 
; 245  :         HalRegisterShutdownNotification(&m_HalShutdownData, TRUE);

  0012b	6a 01		 push	 1
  0012d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00130	81 c2 2c 01 00
	00		 add	 edx, 300		; 0000012cH
  00136	52		 push	 edx
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HalRegisterShutdownNotification@8
$L32103:

; 246  :     }
; 247  : 
; 248  :     DPF_LEAVE_HRESULT(hr);
; 249  : 
; 250  : 	return hr;

  0013d	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 251  : }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
?Initialize@CMcpxAPUTest@@QAEJXZ ENDP			; CMcpxAPUTest::Initialize
DSOUND	ENDS
PUBLIC	?ServiceApuInterrupt@CMcpxAPUTest@@IAEHXZ	; CMcpxAPUTest::ServiceApuInterrupt
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.h
;	COMDAT ?ApuInterruptServiceRoutine@CMcpxAPUTest@@CGEPAU_KINTERRUPT@@PAX@Z
DSOUND	SEGMENT
_pInterrupt$ = 8
_pvContext$ = 12
?ApuInterruptServiceRoutine@CMcpxAPUTest@@CGEPAU_KINTERRUPT@@PAX@Z PROC NEAR ; CMcpxAPUTest::ApuInterruptServiceRoutine, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     return (BOOLEAN)((CMcpxAPUTest *)pvContext)->ServiceApuInterrupt();

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pvContext$[ebp]
  00006	e8 00 00 00 00	 call	 ?ServiceApuInterrupt@CMcpxAPUTest@@IAEHXZ ; CMcpxAPUTest::ServiceApuInterrupt

; 217  : }

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?ApuInterruptServiceRoutine@CMcpxAPUTest@@CGEPAU_KINTERRUPT@@PAX@Z ENDP ; CMcpxAPUTest::ApuInterruptServiceRoutine
DSOUND	ENDS
PUBLIC	?ServiceApuInterruptDpc@CMcpxAPUTest@@IAEXXZ	; CMcpxAPUTest::ServiceApuInterruptDpc
; Function compile flags: /Odt
;	COMDAT ?ApuInterruptDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT
_pDpc$ = 8
_pvDeferredContext$ = 12
_pvSystemContext1$ = 16
_pvSystemContext2$ = 20
?ApuInterruptDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z PROC NEAR ; CMcpxAPUTest::ApuInterruptDpcRoutine, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 221  :     ((CMcpxAPUTest *)pvDeferredContext)->ServiceApuInterruptDpc();

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pvDeferredContext$[ebp]
  00006	e8 00 00 00 00	 call	 ?ServiceApuInterruptDpc@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::ServiceApuInterruptDpc

; 222  : }

  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?ApuInterruptDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z ENDP ; CMcpxAPUTest::ApuInterruptDpcRoutine
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?DeferredCommandDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT
_pdpc$ = 8
_pvDeferredContext$ = 12
_pvSystemContext1$ = 16
_pvSystemContext2$ = 20
?DeferredCommandDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z PROC NEAR ; CMcpxAPUTest::DeferredCommandDpcRoutine, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : }

  00003	5d		 pop	 ebp
  00004	c2 10 00	 ret	 16			; 00000010H
?DeferredCommandDpcRoutine@CMcpxAPUTest@@CGXPAU_KDPC@@PAX11@Z ENDP ; CMcpxAPUTest::DeferredCommandDpcRoutine
DSOUND	ENDS
EXTRN	_g_fDirectSoundTestInFinalRelease:DWORD
; Function compile flags: /Odt
;	COMDAT ?ApuShutdownNotifier@CMcpxAPUTest@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z
DSOUND	SEGMENT
_pHalShutdownData$ = 8
?ApuShutdownNotifier@CMcpxAPUTest@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z PROC NEAR ; CMcpxAPUTest::ApuShutdownNotifier, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 230  :     g_fDirectSoundTestInFinalRelease = TRUE;

  00003	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 1

; 231  :     
; 232  :     CONTAINING_RECORD(pHalShutdownData, CMcpxAPUTest, m_HalShutdownData)->Terminate();

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pHalShutdownData$[ebp]
  00010	81 e9 2c 01 00
	00		 sub	 ecx, 300		; 0000012cH
  00016	e8 00 00 00 00	 call	 ?Terminate@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::Terminate

; 233  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?ApuShutdownNotifier@CMcpxAPUTest@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z ENDP ; CMcpxAPUTest::ApuShutdownNotifier
DSOUND	ENDS
PUBLIC	??0CAutoIrql@@QAE@XZ				; CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@@QAE@XZ				; CAutoIrql::~CAutoIrql
PUBLIC	?BlockIdleHandler@CMcpxAPUTest@@QAEXXZ		; CMcpxAPUTest::BlockIdleHandler
PUBLIC	?UnblockIdleHandler@CMcpxAPUTest@@QAEXXZ	; CMcpxAPUTest::UnblockIdleHandler
EXTRN	?Reset@CMcpxCoreTest@@IAEXXZ:NEAR		; CMcpxCoreTest::Reset
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.cpp
;	COMDAT ?Terminate@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -20
___AutoIrql$ = -16
?Terminate@CMcpxAPUTest@@IAEXXZ PROC NEAR		; CMcpxAPUTest::Terminate, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 279  :     PLIST_ENTRY             pleEntry;
; 280  :     DWORD                   i;
; 281  :     
; 282  :     DPF_ENTER();
; 283  :     AutoIrql();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@@QAE@XZ	; CAutoIrql::CAutoIrql

; 284  : 
; 285  :     //
; 286  :     // Block the idle handler
; 287  :     //
; 288  : 
; 289  :     BlockIdleHandler();

  00011	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPUTest@@QAEXXZ ; CMcpxAPUTest::BlockIdleHandler

; 290  : 
; 291  :     //
; 292  :     // Unblock the idle handler
; 293  :     //
; 294  : 
; 295  :     UnblockIdleHandler();

  00019	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPUTest@@QAEXXZ ; CMcpxAPUTest::UnblockIdleHandler

; 296  : 
; 297  :     //
; 298  :     // Shut down the APU core
; 299  :     //
; 300  : 
; 301  :     Reset();

  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 08	 add	 ecx, 8
  00027	e8 00 00 00 00	 call	 ?Reset@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::Reset

; 302  : 
; 303  :     DPF_LEAVE_VOID();
; 304  : }

  0002c	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0002f	e8 00 00 00 00	 call	 ??1CAutoIrql@@QAE@XZ	; CAutoIrql::~CAutoIrql
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?Terminate@CMcpxAPUTest@@IAEXXZ ENDP			; CMcpxAPUTest::Terminate
DSOUND	ENDS
PUBLIC	??0CIrql@@QAE@XZ				; CIrql::CIrql
PUBLIC	?Raise@CIrql@@QAEXXZ				; CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\drvhlp.h
;	COMDAT ??0CAutoIrql@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoIrql@@QAE@XZ PROC NEAR				; CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@@QAE@XZ	; CIrql::CIrql

; 73   :     Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@@QAEXXZ	; CIrql::Raise

; 74   : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@@QAE@XZ ENDP				; CAutoIrql::CAutoIrql
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0CIrql@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@@QAE@XZ PROC NEAR				; CIrql::CIrql, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 40   : }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@@QAE@XZ ENDP					; CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@@QAEXXZ PROC NEAR				; CIrql::Raise, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L29688

; 45   :     {
; 46   :         m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L29688:

; 47   :     }
; 48   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@@QAEXXZ ENDP				; CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	?Lower@CIrql@@QAEXXZ				; CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\drvhlp.h
;	COMDAT ??1CAutoIrql@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoIrql@@QAE@XZ PROC NEAR				; CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   :     Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@@QAEXXZ	; CIrql::Lower

; 79   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@@QAE@XZ ENDP				; CAutoIrql::~CAutoIrql
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@@QAEXXZ PROC NEAR				; CIrql::Lower, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L29693

; 53   :     {
; 54   :         KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 55   :         m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L29693:

; 56   :     }
; 57   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@@QAEXXZ ENDP				; CIrql::Lower
DSOUND	ENDS
PUBLIC	??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.h
DSOUND_RD	SEGMENT
??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\mcpapu.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ DB 'KeG'
	DB	'etCurrentIrql() >= DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@ DB 'm_dwVoiceMapLo'
	DB	'ck < ~0UL', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?BlockIdleHandler@CMcpxAPUTest@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?BlockIdleHandler@CMcpxAPUTest@@QAEXXZ PROC NEAR	; CMcpxAPUTest::BlockIdleHandler, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 238  :     ASSERT(KeGetCurrentIrql() >= DISPATCH_LEVEL);

  00007	68 ee 00 00 00	 push	 238			; 000000eeH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  00016	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 f8 02	 cmp	 eax, 2
  00023	0f 9c c1	 setl	 cl
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _DwDbgAssert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 239  :     ASSERT(m_dwVoiceMapLock < ~0UL);

  0002f	68 ef 00 00 00	 push	 239			; 000000efH
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	83 ba 88 00 00
	00 ff		 cmp	 DWORD PTR [edx+136], -1
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _DwDbgAssert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 240  :     m_dwVoiceMapLock++;

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0005d	83 c2 01	 add	 edx, 1
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 241  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?BlockIdleHandler@CMcpxAPUTest@@QAEXXZ ENDP		; CMcpxAPUTest::BlockIdleHandler
DSOUND	ENDS
PUBLIC	??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@ ; `string'
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@ DB 'm_dwVoiceMapLoc'
	DB	'k >= 1', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?UnblockIdleHandler@CMcpxAPUTest@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?UnblockIdleHandler@CMcpxAPUTest@@QAEXXZ PROC NEAR	; CMcpxAPUTest::UnblockIdleHandler, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 245  :     ASSERT(KeGetCurrentIrql() >= DISPATCH_LEVEL);

  00007	68 f5 00 00 00	 push	 245			; 000000f5H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  00016	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 f8 02	 cmp	 eax, 2
  00023	0f 9c c1	 setl	 cl
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _DwDbgAssert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 246  :     ASSERT(m_dwVoiceMapLock >= 1);

  0002f	68 f6 00 00 00	 push	 246			; 000000f6H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	83 ba 88 00 00
	00 01		 cmp	 DWORD PTR [edx+136], 1
  00048	1b c0		 sbb	 eax, eax
  0004a	f7 d8		 neg	 eax
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _DwDbgAssert
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 247  :     m_dwVoiceMapLock--;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0005e	83 ea 01	 sub	 edx, 1
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx

; 248  : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?UnblockIdleHandler@CMcpxAPUTest@@QAEXXZ ENDP		; CMcpxAPUTest::UnblockIdleHandler
DSOUND	ENDS
PUBLIC	?HandleFETrap@CMcpxAPUTest@@IAEXXZ		; CMcpxAPUTest::HandleFETrap
PUBLIC	?ScheduleApuInterruptDpc@CMcpxAPUTest@@IAEXXZ	; CMcpxAPUTest::ScheduleApuInterruptDpc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.cpp
;	COMDAT ?ServiceApuInterrupt@CMcpxAPUTest@@IAEHXZ
DSOUND	SEGMENT
tv85 = -20
_this$ = -16
_rInterruptStatus$ = -12
_fServiced$ = -4
?ServiceApuInterrupt@CMcpxAPUTest@@IAEHXZ PROC NEAR	; CMcpxAPUTest::ServiceApuInterrupt, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 331  :     R_INTR                  rInterruptStatus;
; 332  :     BOOL                    fServiced;
; 333  : 
; 334  :     //
; 335  :     // Get the pending interrupt
; 336  :     //
; 337  :         
; 338  :     MCPX_REG_READ(NV_PAPU_ISTS, &rInterruptStatus.uValue);

  00009	a1 00 10 80 fe	 mov	 eax, DWORD PTR ds:-25161728
  0000e	89 45 f4	 mov	 DWORD PTR _rInterruptStatus$[ebp], eax

; 339  : 
; 340  :     if(fServiced = MAKEBOOL(rInterruptStatus.General))

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _rInterruptStatus$[ebp]
  00014	83 e1 01	 and	 ecx, 1
  00017	f7 d9		 neg	 ecx
  00019	1b c9		 sbb	 ecx, ecx
  0001b	f7 d9		 neg	 ecx
  0001d	89 4d fc	 mov	 DWORD PTR _fServiced$[ebp], ecx
  00020	83 7d fc 00	 cmp	 DWORD PTR _fServiced$[ebp], 0
  00024	0f 84 9c 00 00
	00		 je	 $L32118

; 341  :     {
; 342  :         //
; 343  :         // Clear the interrupt(s)
; 344  :         //
; 345  : 
; 346  :         MCPX_REG_WRITE(NV_PAPU_ISTS, rInterruptStatus.uValue);

  0002a	8b 55 f4	 mov	 edx, DWORD PTR _rInterruptStatus$[ebp]
  0002d	89 15 00 10 80
	fe		 mov	 DWORD PTR ds:-25161728, edx

; 347  : 
; 348  :         //
; 349  :         // Save the interrupt bits
; 350  :         //
; 351  : 
; 352  :         m_arInterruptStatus[0].uValue |= rInterruptStatus.uValue;

  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  0003c	0b 4d f4	 or	 ecx, DWORD PTR _rInterruptStatus$[ebp]
  0003f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00042	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx

; 353  : 
; 354  : #ifdef DEBUG
; 355  : 
; 356  :         m_arInterruptStatus[0].DeltaPanic |= INTERLOCKED_EXCHANGE(g_fDirectSoundTestSimulateDeltaPanic, 0);

  00048	33 d2		 xor	 edx, edx
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_g_fDirectSoundTestSimulateDeltaPanic
  0004f	e8 00 00 00 00	 call	 @InterlockedExchange@8
  00054	89 45 ec	 mov	 DWORD PTR tv85[ebp], eax
  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00060	c1 e9 03	 shr	 ecx, 3
  00063	83 e1 01	 and	 ecx, 1
  00066	0b 4d ec	 or	 ecx, DWORD PTR tv85[ebp]
  00069	83 e1 01	 and	 ecx, 1
  0006c	c1 e1 03	 shl	 ecx, 3
  0006f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 82 bc 00 00
	00		 mov	 eax, DWORD PTR [edx+188]
  00078	83 e0 f7	 and	 eax, -9			; fffffff7H
  0007b	0b c1		 or	 eax, ecx
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 357  : 
; 358  : #endif // DEBUG
; 359  : 
; 360  :         //
; 361  :         // Check for a trap caused by an error or an overridden hardware 
; 362  :         // method
; 363  :         //
; 364  :         
; 365  :         if(rInterruptStatus.FETrap)

  00086	8b 55 f4	 mov	 edx, DWORD PTR _rInterruptStatus$[ebp]
  00089	c1 ea 04	 shr	 edx, 4
  0008c	83 e2 01	 and	 edx, 1
  0008f	85 d2		 test	 edx, edx
  00091	74 08		 je	 SHORT $L32123

; 366  :         {
; 367  :             HandleFETrap();

  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?HandleFETrap@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::HandleFETrap
$L32123:

; 368  :         }
; 369  : 
; 370  :         //
; 371  :         // If we got a voice interrupt or a delta panic, schedule a DPC to 
; 372  :         // handle it
; 373  :         //
; 374  : 
; 375  :         if(rInterruptStatus.DeltaPanic || rInterruptStatus.FEVoice)

  0009b	8b 45 f4	 mov	 eax, DWORD PTR _rInterruptStatus$[ebp]
  0009e	c1 e8 03	 shr	 eax, 3
  000a1	83 e0 01	 and	 eax, 1
  000a4	85 c0		 test	 eax, eax
  000a6	75 0d		 jne	 SHORT $L32125
  000a8	8b 4d f4	 mov	 ecx, DWORD PTR _rInterruptStatus$[ebp]
  000ab	c1 e9 06	 shr	 ecx, 6
  000ae	83 e1 01	 and	 ecx, 1
  000b1	85 c9		 test	 ecx, ecx
  000b3	74 08		 je	 SHORT $L32124
$L32125:

; 376  :         {
; 377  :             ScheduleApuInterruptDpc();

  000b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?ScheduleApuInterruptDpc@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::ScheduleApuInterruptDpc
$L32124:

; 378  :         }
; 379  : 
; 380  :         //
; 381  :         // Read the interrupt mask one more time to make sure all registers are
; 382  :         // flushed properly
; 383  :         //
; 384  : 
; 385  :         MCPX_REG_READ(NV_PAPU_ISTS, &rInterruptStatus.uValue);

  000bd	8b 15 00 10 80
	fe		 mov	 edx, DWORD PTR ds:-25161728
  000c3	89 55 f4	 mov	 DWORD PTR _rInterruptStatus$[ebp], edx
$L32118:

; 386  :     }
; 387  :     
; 388  :     return fServiced;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _fServiced$[ebp]

; 389  : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
?ServiceApuInterrupt@CMcpxAPUTest@@IAEHXZ ENDP		; CMcpxAPUTest::ServiceApuInterrupt
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT @InterlockedExchange@8
DSOUND	SEGMENT
_Value$ = -8
_Target$ = -4
@InterlockedExchange@8 PROC NEAR			; COMDAT
; _Target$ = ecx
; _Value$ = edx

; 1299 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 55 f8	 mov	 DWORD PTR _Value$[ebp], edx
  00009	89 4d fc	 mov	 DWORD PTR _Target$[ebp], ecx

; 1300 :     __asm {
; 1301 :         mov     edx, Value

  0000c	8b 55 f8	 mov	 edx, DWORD PTR _Value$[ebp]

; 1302 :         mov     ecx, Target

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _Target$[ebp]

; 1303 :         mov     eax, [ecx]

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
$ie$10624:

; 1304 : ie:     cmpxchg [ecx], edx

  00014	0f b1 11	 cmpxchg DWORD PTR [ecx], edx

; 1305 :         jnz     short ie

  00017	75 fb		 jne	 SHORT $ie$10624

; 1306 :     }
; 1307 : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
@InterlockedExchange@8 ENDP
DSOUND	ENDS
EXTRN	__imp__KeInsertQueueDpc@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.h
;	COMDAT ?ScheduleApuInterruptDpc@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?ScheduleApuInterruptDpc@CMcpxAPUTest@@IAEXXZ PROC NEAR	; CMcpxAPUTest::ScheduleApuInterruptDpc, COMDAT
; _this$ = ecx

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 252  :     KeInsertQueueDpc(&m_dpcInterrupt, NULL, NULL);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	05 cc 00 00 00	 add	 eax, 204		; 000000ccH
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInsertQueueDpc@12

; 253  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?ScheduleApuInterruptDpc@CMcpxAPUTest@@IAEXXZ ENDP	; CMcpxAPUTest::ScheduleApuInterruptDpc
DSOUND	ENDS
PUBLIC	?WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ		; CMcpxAPUTest::WaitForMagicWrite
PUBLIC	??_C@_0CA@DPFJADHC@CMcpxAPUTest?3?3WaitForMagicWrite?$AA@ ; `string'
PUBLIC	??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@ ; `string'
EXTRN	__imp__KeStallExecutionProcessor@4:NEAR
EXTRN	?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A:BYTE ; CMcpxCoreTest::m_ctxMemory
EXTRN	?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z:NEAR	; CMcpxCoreTest::SetPrivLockState
;	COMDAT ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.cpp
DSOUND_RW	SEGMENT
?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA DD 00H ; `CMcpxAPUTest::WaitForMagicWrite'::`2'::dwMagicWriteValue
DSOUND_RW	ENDS
;	COMDAT ??_C@_0CA@DPFJADHC@CMcpxAPUTest?3?3WaitForMagicWrite?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@DPFJADHC@CMcpxAPUTest?3?3WaitForMagicWrite?$AA@ DB 'CMcpxAPUTes'
	DB	't::WaitForMagicWrite', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@ DB 'Magic write'
	DB	' not completing!', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -16
_dwTimeout$ = -12
_pdwMagicWrite$ = -8
?WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ PROC NEAR	; CMcpxAPUTest::WaitForMagicWrite, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 416  :     static DWORD            dwMagicWriteValue   = 0;
; 417  :     DWORD                   dwTimeout           = 100;

  00009	c7 45 f4 64 00
	00 00		 mov	 DWORD PTR _dwTimeout$[ebp], 100 ; 00000064H

; 418  :     volatile DWORD *        pdwMagicWrite;
; 419  :     DWORD                   i;
; 420  : 
; 421  :     dwMagicWriteValue++;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA
  00015	83 c0 01	 add	 eax, 1
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA, eax

; 422  : 
; 423  :     pdwMagicWrite = (volatile DWORD *)m_ctxMemory[MCPX_MEM_MAGICWRITE].VirtualAddress;

  0001d	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+32
  00023	89 4d f8	 mov	 DWORD PTR _pdwMagicWrite$[ebp], ecx

; 424  :     *pdwMagicWrite = ~dwMagicWriteValue;

  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA
  0002c	f7 d2		 not	 edx
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _pdwMagicWrite$[ebp]
  00031	89 10		 mov	 DWORD PTR [eax], edx

; 425  : 
; 426  :     SetPrivLockState(TRUE);

  00033	6a 01		 push	 1
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 08	 add	 ecx, 8
  0003b	e8 00 00 00 00	 call	 ?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetPrivLockState

; 427  : 
; 428  :     MCPX_REG_WRITE(NV_PAPU_FEMEMADDR, m_ctxMemory[MCPX_MEM_MAGICWRITE].PhysicalAddress);

  00040	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+36
  00046	89 0d 24 13 80
	fe		 mov	 DWORD PTR ds:-25160924, ecx

; 429  :     MCPX_REG_WRITE(NV_PAPU_FEMEMDATA, dwMagicWriteValue);

  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA
  00052	89 15 34 13 80
	fe		 mov	 DWORD PTR ds:-25160908, edx

; 430  : 
; 431  :     SetPrivLockState(FALSE);

  00058	6a 00		 push	 0
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 08	 add	 ecx, 8
  00060	e8 00 00 00 00	 call	 ?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetPrivLockState
$L32142:

; 432  : 
; 433  :     while(*pdwMagicWrite != dwMagicWriteValue)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _pdwMagicWrite$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ@4KA
  00070	74 49		 je	 SHORT $L32130

; 434  :     {
; 435  :         if(!dwTimeout--)

  00072	8b 55 f4	 mov	 edx, DWORD PTR _dwTimeout$[ebp]
  00075	8b 45 f4	 mov	 eax, DWORD PTR _dwTimeout$[ebp]
  00078	83 e8 01	 sub	 eax, 1
  0007b	89 45 f4	 mov	 DWORD PTR _dwTimeout$[ebp], eax
  0007e	85 d2		 test	 edx, edx
  00080	75 2f		 jne	 SHORT $L32144

; 436  :         {
; 437  :             DPF_ERROR("Magic write not completing!");

  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@DPFJADHC@CMcpxAPUTest?3?3WaitForMagicWrite?$AA@
  0008c	68 b5 01 00 00	 push	 437			; 000001b5H
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  00096	6a 01		 push	 1
  00098	6a 09		 push	 9
  0009a	e8 00 00 00 00	 call	 _DwDbgSetContext
  0009f	83 c4 18	 add	 esp, 24			; 00000018H
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@
  000a7	e8 00 00 00 00	 call	 _DwDbgPrint
  000ac	83 c4 04	 add	 esp, 4

; 438  :             break;

  000af	eb 0a		 jmp	 SHORT $L32130
$L32144:

; 439  :         }
; 440  : 
; 441  :         KeStallExecutionProcessor(1);

  000b1	6a 01		 push	 1
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeStallExecutionProcessor@4

; 442  :     }

  000b9	eb aa		 jmp	 SHORT $L32142
$L32130:

; 443  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ ENDP		; CMcpxAPUTest::WaitForMagicWrite
DSOUND	ENDS
PUBLIC	?ServiceVoiceInterrupt@CMcpxAPUTest@@IAEXXZ	; CMcpxAPUTest::ServiceVoiceInterrupt
PUBLIC	?HandleDeltaPanic@CMcpxAPUTest@@IAEXXZ		; CMcpxAPUTest::HandleDeltaPanic
PUBLIC	?GetInterruptStatusCallback@CMcpxAPUTest@@CGEPAX@Z ; CMcpxAPUTest::GetInterruptStatusCallback
EXTRN	__imp__KeSynchronizeExecution@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?ServiceApuInterruptDpc@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?ServiceApuInterruptDpc@CMcpxAPUTest@@IAEXXZ PROC NEAR	; CMcpxAPUTest::ServiceApuInterruptDpc, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$L32152:

; 470  :     //
; 471  :     // The DPC will parse the interrupt mask and do processing based on what
; 472  :     // event was signaled. In ISR-safe fashion, it will read the current 
; 473  :     // pending interrupt mask twice in the loop. This makes sure the dpc 
; 474  :     // leaves only when no more ISRs are pending.
; 475  :     //
; 476  : 
; 477  :     while(TRUE)

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	85 c0		 test	 eax, eax
  0000e	74 6b		 je	 SHORT $L32150

; 478  :     {
; 479  :         KeSynchronizeExecution(&m_Interrupt, GetInterruptStatusCallback, this);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	51		 push	 ecx
  00014	68 00 00 00 00	 push	 OFFSET FLAT:?GetInterruptStatusCallback@CMcpxAPUTest@@CGEPAX@Z ; CMcpxAPUTest::GetInterruptStatusCallback
  00019	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPUTest@@1U_KINTERRUPT@@A ; CMcpxAPUTest::m_Interrupt
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSynchronizeExecution@12

; 480  : 
; 481  :         if(!m_arInterruptStatus[1].General)

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 82 c4 00 00
	00		 mov	 eax, DWORD PTR [edx+196]
  0002d	83 e0 01	 and	 eax, 1
  00030	85 c0		 test	 eax, eax
  00032	75 02		 jne	 SHORT $L32154

; 482  :         {
; 483  :             break;

  00034	eb 45		 jmp	 SHORT $L32150
$L32154:

; 484  :         }
; 485  : 
; 486  : #ifndef MCPX_BOOT_LIB
; 487  : 
; 488  :         if(m_arInterruptStatus[1].DeltaPanic)

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  0003f	c1 ea 03	 shr	 edx, 3
  00042	83 e2 01	 and	 edx, 1
  00045	85 d2		 test	 edx, edx
  00047	74 08		 je	 SHORT $L32155

; 489  :         {
; 490  :             HandleDeltaPanic();

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?HandleDeltaPanic@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::HandleDeltaPanic
$L32155:

; 491  :         }
; 492  : 
; 493  : #endif // MCPX_BOOT_LIB
; 494  : 
; 495  :         if(m_arInterruptStatus[1].FEVoice)

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  0005a	c1 e9 06	 shr	 ecx, 6
  0005d	83 e1 01	 and	 ecx, 1
  00060	85 c9		 test	 ecx, ecx
  00062	74 08		 je	 SHORT $L32156

; 496  :         {
; 497  :             ServiceVoiceInterrupt();

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?ServiceVoiceInterrupt@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::ServiceVoiceInterrupt
$L32156:

; 498  :         }
; 499  : 
; 500  :         m_arInterruptStatus[1].uValue = 0;

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	c7 82 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+196], 0

; 501  :     } 

  00079	eb 8c		 jmp	 SHORT $L32152
$L32150:

; 502  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?ServiceApuInterruptDpc@CMcpxAPUTest@@IAEXXZ ENDP	; CMcpxAPUTest::ServiceApuInterruptDpc
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?ServiceVoiceInterrupt@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -12
?ServiceVoiceInterrupt@CMcpxAPUTest@@IAEXXZ PROC NEAR	; CMcpxAPUTest::ServiceVoiceInterrupt, COMDAT
; _this$ = ecx

; 528  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 529  :     PLIST_ENTRY             pleEntry;
; 530  :     DWORD                   dwVoiceList;
; 531  : 
; 532  :     //
; 533  :     // Wait for the magic write to complete so that all notifiers are 
; 534  :     // written
; 535  :     //
; 536  : 
; 537  :     WaitForMagicWrite();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?WaitForMagicWrite@CMcpxAPUTest@@IAEXXZ ; CMcpxAPUTest::WaitForMagicWrite

; 538  : 
; 539  :     //
; 540  :     // Block the idle handler in order to prevent the voice list from
; 541  :     // being modified.
; 542  :     //
; 543  : 
; 544  :     BlockIdleHandler();

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPUTest@@QAEXXZ ; CMcpxAPUTest::BlockIdleHandler

; 545  : 
; 546  :     //
; 547  :     // Unblock the idle handler
; 548  :     //
; 549  : 
; 550  :     UnblockIdleHandler();

  00019	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPUTest@@QAEXXZ ; CMcpxAPUTest::UnblockIdleHandler

; 551  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?ServiceVoiceInterrupt@CMcpxAPUTest@@IAEXXZ ENDP	; CMcpxAPUTest::ServiceVoiceInterrupt
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetInterruptStatusCallback@CMcpxAPUTest@@CGEPAX@Z
DSOUND	SEGMENT
_pThis$ = -4
_pvContext$ = 8
?GetInterruptStatusCallback@CMcpxAPUTest@@CGEPAX@Z PROC NEAR ; CMcpxAPUTest::GetInterruptStatusCallback, COMDAT

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 578  :     CMcpxAPUTest *              pThis   = (CMcpxAPUTest *)pvContext;

  00004	8b 45 08	 mov	 eax, DWORD PTR _pvContext$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _pThis$[ebp], eax

; 579  : 
; 580  :     pThis->m_arInterruptStatus[1].uValue |= INTERLOCKED_EXCHANGE(pThis->m_arInterruptStatus[0].uValue, 0);

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _pThis$[ebp]
  0000d	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00013	33 d2		 xor	 edx, edx
  00015	e8 00 00 00 00	 call	 @InterlockedExchange@8
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _pThis$[ebp]
  0001d	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  00023	0b d0		 or	 edx, eax
  00025	8b 45 fc	 mov	 eax, DWORD PTR _pThis$[ebp]
  00028	89 90 c4 00 00
	00		 mov	 DWORD PTR [eax+196], edx

; 581  : 
; 582  :     return TRUE;

  0002e	b0 01		 mov	 al, 1

; 583  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?GetInterruptStatusCallback@CMcpxAPUTest@@CGEPAX@Z ENDP	; CMcpxAPUTest::GetInterruptStatusCallback
DSOUND	ENDS
PUBLIC	?HandleSoftwareMethod@CMcpxAPUTest@@IAEXKK@Z	; CMcpxAPUTest::HandleSoftwareMethod
PUBLIC	??_C@_0DE@KCBHIGPJ@NV_PAPU_FECTL_FEMETHMODE_TRAPPED@ ; `string'
PUBLIC	??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@ ; `string'
PUBLIC	??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@ ; `string'
PUBLIC	??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@ ; `string'
PUBLIC	??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@ ; `string'
PUBLIC	??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@ ; `string'
PUBLIC	??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@ ; `string'
PUBLIC	??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@ ; `string'
PUBLIC	??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@ ; `string'
PUBLIC	??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@ ; `string'
PUBLIC	??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@ ; `string'
PUBLIC	??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@ ; `string'
EXTRN	?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z:NEAR ; CMcpxCoreTest::SetFrontEndState
;	COMDAT ??_C@_0DE@KCBHIGPJ@NV_PAPU_FECTL_FEMETHMODE_TRAPPED@
DSOUND_RD	SEGMENT
??_C@_0DE@KCBHIGPJ@NV_PAPU_FECTL_FEMETHMODE_TRAPPED@ DB 'NV_PAPU_FECTL_FE'
	DB	'METHMODE_TRAPPED == rFeControl.Mode', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@ DB 'CMcpxAPUTest::Ha'
	DB	'ndleFETrap', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@ DB 'NONE: m'
	DB	'ethod %x, param %x', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT
??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@ DB 'NOT_IMPL'
	DB	'EMENTED: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@
DSOUND_RD	SEGMENT
??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@ DB 'METHOD_U'
	DB	'NKNOWN: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT
??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@ DB 'BAD_'
	DB	'ARGUMENT: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT
??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@ DB 'CURRENT_'
	DB	'NOT_SET: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@
DSOUND_RD	SEGMENT
??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@ DB 'ANTECEDE'
	DB	'NT_NOT_SET: method %x, param %x', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT
??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@ DB 'BAD_DATA'
	DB	'_TYPE: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@
DSOUND_RD	SEGMENT
??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@ DB 'BAD_LIST'
	DB	'_POINTER: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@
DSOUND_RD	SEGMENT
??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@ DB 'CURRENT_V'
	DB	'OICE_NOT_3d: method %x, param %x', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT
??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@ DB 'CTXPA_I'
	DB	'NVALID: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT
??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@ DB '('
	DB	'unknown) %x: method %x, param %x', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?HandleFETrap@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT
tv78 = -20
_this$ = -16
_rFeControl$ = -12
_dwMethod$ = -8
_dwParam$ = -4
?HandleFETrap@CMcpxAPUTest@@IAEXXZ PROC NEAR		; CMcpxAPUTest::HandleFETrap, COMDAT
; _this$ = ecx

; 609  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 610  :     R_FE_CONTROL            rFeControl;
; 611  :     DWORD                   dwParam;
; 612  :     DWORD                   dwMethod;
; 613  : 
; 614  :     DPF_ENTER();
; 615  : 
; 616  :     //
; 617  :     // Whahoppen?
; 618  :     //
; 619  :     
; 620  :     MCPX_REG_READ(NV_PAPU_FECTL, &rFeControl.uValue);

  00009	a1 00 11 80 fe	 mov	 eax, DWORD PTR ds:-25161472
  0000e	89 45 f4	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 621  :     ASSERT(NV_PAPU_FECTL_FEMETHMODE_TRAPPED == rFeControl.Mode);

  00011	68 6d 02 00 00	 push	 621			; 0000026dH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@KCBHIGPJ@NV_PAPU_FECTL_FEMETHMODE_TRAPPED@
  00020	8b 4d f4	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  00023	c1 e9 05	 shr	 ecx, 5
  00026	83 e1 07	 and	 ecx, 7
  00029	33 d2		 xor	 edx, edx
  0002b	83 f9 07	 cmp	 ecx, 7
  0002e	0f 95 c2	 setne	 dl
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 _DwDbgAssert
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 622  : 
; 623  :     MCPX_REG_READ(NV_PAPU_FEDECMETH, &dwMethod);

  0003a	a1 00 13 80 fe	 mov	 eax, DWORD PTR ds:-25160960
  0003f	89 45 f8	 mov	 DWORD PTR _dwMethod$[ebp], eax

; 624  :     MCPX_REG_READ(NV_PAPU_FEDECPARAM, &dwParam);

  00042	8b 0d 04 13 80
	fe		 mov	 ecx, DWORD PTR ds:-25160956
  00048	89 4d fc	 mov	 DWORD PTR _dwParam$[ebp], ecx

; 625  : 
; 626  :     dwMethod = MCPX_GET_REG_VALUE(dwMethod, NV_PAPU_FEDECMETH_METH);

  0004b	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  0004e	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00054	89 55 f8	 mov	 DWORD PTR _dwMethod$[ebp], edx

; 627  :     dwParam = MCPX_GET_REG_VALUE(dwParam, NV_PAPU_FEDECPARAM_VALUE);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  0005a	89 45 fc	 mov	 DWORD PTR _dwParam$[ebp], eax

; 628  : 
; 629  :     switch(rFeControl.TrapReason)
; 630  :     {

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  00060	c1 e9 08	 shr	 ecx, 8
  00063	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00066	89 4d ec	 mov	 DWORD PTR tv78[ebp], ecx
  00069	83 7d ec 0f	 cmp	 DWORD PTR tv78[ebp], 15	; 0000000fH
  0006d	0f 87 5d 02 00
	00		 ja	 $L32207
  00073	8b 55 ec	 mov	 edx, DWORD PTR tv78[ebp]
  00076	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L32544[edx*4]
$L32185:

; 631  :         case NV_PAPU_FECTL_FETRAPREASON_NONE:
; 632  :             DPF_ERROR("NONE: method %x, param %x", dwMethod, dwParam);

  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  00087	68 78 02 00 00	 push	 632			; 00000278H
  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  00091	6a 01		 push	 1
  00093	6a 09		 push	 9
  00095	e8 00 00 00 00	 call	 _DwDbgSetContext
  0009a	83 c4 18	 add	 esp, 24			; 00000018H
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  000a4	51		 push	 ecx
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@
  000aa	e8 00 00 00 00	 call	 _DwDbgPrint
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 633  :             break;

  000b2	e9 58 02 00 00	 jmp	 $L32182
$L32188:

; 634  : 
; 635  :         case NV_PAPU_FECTL_FETRAPREASON_NOT_IMPLEMENTED:
; 636  :             DPF_ERROR("NOT_IMPLEMENTED: method %x, param %x", dwMethod, dwParam);

  000b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  000c1	68 7c 02 00 00	 push	 636			; 0000027cH
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  000cb	6a 01		 push	 1
  000cd	6a 09		 push	 9
  000cf	e8 00 00 00 00	 call	 _DwDbgSetContext
  000d4	83 c4 18	 add	 esp, 24			; 00000018H
  000d7	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  000da	52		 push	 edx
  000db	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  000de	50		 push	 eax
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@
  000e4	e8 00 00 00 00	 call	 _DwDbgPrint
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 637  :             break;

  000ec	e9 1e 02 00 00	 jmp	 $L32182
$L32190:

; 638  : 
; 639  :         case NV_PAPU_FECTL_FETRAPREASON_METHOD_UNKNOWN:
; 640  :             DPF_ERROR("METHOD_UNKNOWN: method %x, param %x", dwMethod, dwParam);

  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  000fb	68 80 02 00 00	 push	 640			; 00000280H
  00100	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  00105	6a 01		 push	 1
  00107	6a 09		 push	 9
  00109	e8 00 00 00 00	 call	 _DwDbgSetContext
  0010e	83 c4 18	 add	 esp, 24			; 00000018H
  00111	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  00114	51		 push	 ecx
  00115	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  00118	52		 push	 edx
  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@
  0011e	e8 00 00 00 00	 call	 _DwDbgPrint
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH

; 641  :             break;

  00126	e9 e4 01 00 00	 jmp	 $L32182
$L32192:

; 642  : 
; 643  :         case NV_PAPU_FECTL_FETRAPREASON_BAD_ARGUMENT:
; 644  :             DPF_ERROR("BAD_ARGUMENT: method %x, param %x", dwMethod, dwParam);

  0012b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00130	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  00135	68 84 02 00 00	 push	 644			; 00000284H
  0013a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  0013f	6a 01		 push	 1
  00141	6a 09		 push	 9
  00143	e8 00 00 00 00	 call	 _DwDbgSetContext
  00148	83 c4 18	 add	 esp, 24			; 00000018H
  0014b	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  0014e	50		 push	 eax
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  00152	51		 push	 ecx
  00153	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@
  00158	e8 00 00 00 00	 call	 _DwDbgPrint
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 645  :             break;

  00160	e9 aa 01 00 00	 jmp	 $L32182
$L32194:

; 646  : 
; 647  :         case NV_PAPU_FECTL_FETRAPREASON_CURRENT_NOT_SET:
; 648  :             DPF_ERROR("CURRENT_NOT_SET: method %x, param %x", dwMethod, dwParam);

  00165	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  0016f	68 88 02 00 00	 push	 648			; 00000288H
  00174	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  00179	6a 01		 push	 1
  0017b	6a 09		 push	 9
  0017d	e8 00 00 00 00	 call	 _DwDbgSetContext
  00182	83 c4 18	 add	 esp, 24			; 00000018H
  00185	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  00188	52		 push	 edx
  00189	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  0018c	50		 push	 eax
  0018d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@
  00192	e8 00 00 00 00	 call	 _DwDbgPrint
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH

; 649  :             break;

  0019a	e9 70 01 00 00	 jmp	 $L32182
$L32196:

; 650  : 
; 651  :         case NV_PAPU_FECTL_FETRAPREASON_ANTECEDENT_NOT_SET:
; 652  :             DPF_ERROR("ANTECEDENT_NOT_SET: method %x, param %x", dwMethod, dwParam);

  0019f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  001a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  001a9	68 8c 02 00 00	 push	 652			; 0000028cH
  001ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  001b3	6a 01		 push	 1
  001b5	6a 09		 push	 9
  001b7	e8 00 00 00 00	 call	 _DwDbgSetContext
  001bc	83 c4 18	 add	 esp, 24			; 00000018H
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  001c2	51		 push	 ecx
  001c3	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  001c6	52		 push	 edx
  001c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@
  001cc	e8 00 00 00 00	 call	 _DwDbgPrint
  001d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 653  :             break;

  001d4	e9 36 01 00 00	 jmp	 $L32182
$L32198:

; 654  : 
; 655  :         case NV_PAPU_FECTL_FETRAPREASON_BAD_DATA_TYPE:
; 656  :             DPF_ERROR("BAD_DATA_TYPE: method %x, param %x", dwMethod, dwParam);

  001d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  001de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  001e3	68 90 02 00 00	 push	 656			; 00000290H
  001e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  001ed	6a 01		 push	 1
  001ef	6a 09		 push	 9
  001f1	e8 00 00 00 00	 call	 _DwDbgSetContext
  001f6	83 c4 18	 add	 esp, 24			; 00000018H
  001f9	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  001fc	50		 push	 eax
  001fd	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  00200	51		 push	 ecx
  00201	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@
  00206	e8 00 00 00 00	 call	 _DwDbgPrint
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 657  :             break;

  0020e	e9 fc 00 00 00	 jmp	 $L32182
$L32200:

; 658  : 
; 659  :         case NV_PAPU_FECTL_FETRAPREASON_BAD_LIST_POINTER:
; 660  :             DPF_ERROR("BAD_LIST_POINTER: method %x, param %x", dwMethod, dwParam);

  00213	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00218	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  0021d	68 94 02 00 00	 push	 660			; 00000294H
  00222	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  00227	6a 01		 push	 1
  00229	6a 09		 push	 9
  0022b	e8 00 00 00 00	 call	 _DwDbgSetContext
  00230	83 c4 18	 add	 esp, 24			; 00000018H
  00233	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  00236	52		 push	 edx
  00237	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  0023a	50		 push	 eax
  0023b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@
  00240	e8 00 00 00 00	 call	 _DwDbgPrint
  00245	83 c4 0c	 add	 esp, 12			; 0000000cH

; 661  :             break;

  00248	e9 c2 00 00 00	 jmp	 $L32182
$L32202:

; 662  : 
; 663  :         case NV_PAPU_FECTL_FETRAPREASON_CURRENT_VOICE_NOT_3D:
; 664  :             DPF_ERROR("CURRENT_VOICE_NOT_3d: method %x, param %x", dwMethod, dwParam);

  0024d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00252	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  00257	68 98 02 00 00	 push	 664			; 00000298H
  0025c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  00261	6a 01		 push	 1
  00263	6a 09		 push	 9
  00265	e8 00 00 00 00	 call	 _DwDbgSetContext
  0026a	83 c4 18	 add	 esp, 24			; 00000018H
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  00270	51		 push	 ecx
  00271	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  00274	52		 push	 edx
  00275	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@
  0027a	e8 00 00 00 00	 call	 _DwDbgPrint
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 665  :             break;

  00282	e9 88 00 00 00	 jmp	 $L32182
$L32204:

; 666  : 
; 667  :         case NV_PAPU_FECTL_FETRAPREASON_CTXPA_INVALID:
; 668  :             DPF_ERROR("CTXPA_INVALID: method %x, param %x", dwMethod, dwParam);

  00287	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0028c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  00291	68 9c 02 00 00	 push	 668			; 0000029cH
  00296	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  0029b	6a 01		 push	 1
  0029d	6a 09		 push	 9
  0029f	e8 00 00 00 00	 call	 _DwDbgSetContext
  002a4	83 c4 18	 add	 esp, 24			; 00000018H
  002a7	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  002aa	50		 push	 eax
  002ab	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  002ae	51		 push	 ecx
  002af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@
  002b4	e8 00 00 00 00	 call	 _DwDbgPrint
  002b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 669  :             break;

  002bc	eb 51		 jmp	 SHORT $L32182
$L32206:

; 670  : 
; 671  :         case NV_PAPU_FECTL_FETRAPREASON_REQUESTED:
; 672  :             HandleSoftwareMethod(dwMethod, dwParam);

  002be	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  002c1	52		 push	 edx
  002c2	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  002c5	50		 push	 eax
  002c6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c9	e8 00 00 00 00	 call	 ?HandleSoftwareMethod@CMcpxAPUTest@@IAEXKK@Z ; CMcpxAPUTest::HandleSoftwareMethod

; 673  :             break;

  002ce	eb 3f		 jmp	 SHORT $L32182
$L32207:

; 674  :         
; 675  :         default:
; 676  :             DPF_ERROR("(unknown) %x: method %x, param %x", (DWORD)rFeControl.TrapReason, dwMethod, dwParam);

  002d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  002d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EPBNKEFB@CMcpxAPUTest?3?3HandleFETrap?$AA@
  002da	68 a4 02 00 00	 push	 676			; 000002a4H
  002df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  002e4	6a 01		 push	 1
  002e6	6a 09		 push	 9
  002e8	e8 00 00 00 00	 call	 _DwDbgSetContext
  002ed	83 c4 18	 add	 esp, 24			; 00000018H
  002f0	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  002f3	51		 push	 ecx
  002f4	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  002f7	52		 push	 edx
  002f8	8b 45 f4	 mov	 eax, DWORD PTR _rFeControl$[ebp]
  002fb	c1 e8 08	 shr	 eax, 8
  002fe	83 e0 0f	 and	 eax, 15			; 0000000fH
  00301	50		 push	 eax
  00302	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@
  00307	e8 00 00 00 00	 call	 _DwDbgPrint
  0030c	83 c4 10	 add	 esp, 16			; 00000010H
$L32182:

; 677  :             break;
; 678  :     }
; 679  : 
; 680  :     //
; 681  :     // Snap the FE out of trap mode
; 682  :     //
; 683  : 
; 684  :     SetFrontEndState(MCPX_FE_STATE_HALTED);

  0030f	6a 00		 push	 0
  00311	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00314	83 c1 08	 add	 ecx, 8
  00317	e8 00 00 00 00	 call	 ?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z ; CMcpxCoreTest::SetFrontEndState

; 685  :     SetFrontEndState(MCPX_FE_STATE_FREE_RUNNING);

  0031c	6a 01		 push	 1
  0031e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00321	83 c1 08	 add	 ecx, 8
  00324	e8 00 00 00 00	 call	 ?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z ; CMcpxCoreTest::SetFrontEndState

; 686  : 
; 687  :     DPF_LEAVE_VOID();
; 688  : }

  00329	8b e5		 mov	 esp, ebp
  0032b	5d		 pop	 ebp
  0032c	c3		 ret	 0
$L32544:
  0032d	00 00 00 00	 DD	 $L32185
  00331	00 00 00 00	 DD	 $L32188
  00335	00 00 00 00	 DD	 $L32190
  00339	00 00 00 00	 DD	 $L32192
  0033d	00 00 00 00	 DD	 $L32194
  00341	00 00 00 00	 DD	 $L32196
  00345	00 00 00 00	 DD	 $L32207
  00349	00 00 00 00	 DD	 $L32198
  0034d	00 00 00 00	 DD	 $L32200
  00351	00 00 00 00	 DD	 $L32202
  00355	00 00 00 00	 DD	 $L32204
  00359	00 00 00 00	 DD	 $L32207
  0035d	00 00 00 00	 DD	 $L32207
  00361	00 00 00 00	 DD	 $L32207
  00365	00 00 00 00	 DD	 $L32207
  00369	00 00 00 00	 DD	 $L32206
?HandleFETrap@CMcpxAPUTest@@IAEXXZ ENDP			; CMcpxAPUTest::HandleFETrap
DSOUND	ENDS
PUBLIC	??_C@_0BP@IBKJGPAK@CMcpxAPUTest?3?3HandleDeltaPanic?$AA@ ; `string'
PUBLIC	??_C@_0DN@ENMNHFML@Delta?5panic?4?5?5You?8ll?5hear?5a?5glit@ ; `string'
PUBLIC	?SetupDSPs@CMcpxCoreTest@@IAEXXZ		; CMcpxCoreTest::SetupDSPs
EXTRN	?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z:NEAR	; CMcpxCoreTest::IdleVoiceProcessor
EXTRN	?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ:NEAR	; CMcpxCoreTest::ResetGlobalCounters
EXTRN	?Run@CAc97Channel@@QAEXK@Z:NEAR			; CAc97Channel::Run
EXTRN	?Reset@CAc97Channel@@QAEXXZ:NEAR		; CAc97Channel::Reset
EXTRN	?RestoreCommandBlock@CMcpxGPDspManagerTest@@QAEXXZ:NEAR ; CMcpxGPDspManagerTest::RestoreCommandBlock
;	COMDAT ??_C@_0BP@IBKJGPAK@CMcpxAPUTest?3?3HandleDeltaPanic?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@IBKJGPAK@CMcpxAPUTest?3?3HandleDeltaPanic?$AA@ DB 'CMcpxAPUTest'
	DB	'::HandleDeltaPanic', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@ENMNHFML@Delta?5panic?4?5?5You?8ll?5hear?5a?5glit@
DSOUND_RD	SEGMENT
??_C@_0DN@ENMNHFML@Delta?5panic?4?5?5You?8ll?5hear?5a?5glit@ DB 'Delta pa'
	DB	'nic.  You''ll hear a glitch while the APU is reset...', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?HandleDeltaPanic@CMcpxAPUTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -12
_fIdle$ = -8
_pCmdBlock$ = -4
?HandleDeltaPanic@CMcpxAPUTest@@IAEXXZ PROC NEAR	; CMcpxAPUTest::HandleDeltaPanic, COMDAT
; _this$ = ecx

; 717  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 718  :     PHOST_TO_DSP_COMMANDBLOCK   pCmdBlock;
; 719  :     BOOL                        fIdle;
; 720  :     
; 721  :     DPF_ENTER();
; 722  : 
; 723  :     DPF_WARNING("Delta panic.  You'll hear a glitch while the APU is reset...");

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@IBKJGPAK@CMcpxAPUTest?3?3HandleDeltaPanic?$AA@
  00013	68 d3 02 00 00	 push	 723			; 000002d3H
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  0001d	6a 03		 push	 3
  0001f	6a 09		 push	 9
  00021	e8 00 00 00 00	 call	 _DwDbgSetContext
  00026	83 c4 18	 add	 esp, 24			; 00000018H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ENMNHFML@Delta?5panic?4?5?5You?8ll?5hear?5a?5glit@
  0002e	e8 00 00 00 00	 call	 _DwDbgPrint
  00033	83 c4 04	 add	 esp, 4

; 724  :     
; 725  :     m_dwDeltaPanicCount++;

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwDeltaPanicCount@CMcpxAPUTest@@0KA ; CMcpxAPUTest::m_dwDeltaPanicCount
  0003b	83 c0 01	 add	 eax, 1
  0003e	a3 00 00 00 00	 mov	 DWORD PTR ?m_dwDeltaPanicCount@CMcpxAPUTest@@0KA, eax ; CMcpxAPUTest::m_dwDeltaPanicCount

; 726  : 
; 727  :     //
; 728  :     // Idle the voice processor
; 729  :     //
; 730  : 
; 731  :     fIdle = IdleVoiceProcessor(TRUE);

  00043	6a 01		 push	 1
  00045	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 08	 add	 ecx, 8
  0004b	e8 00 00 00 00	 call	 ?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z ; CMcpxCoreTest::IdleVoiceProcessor
  00050	89 45 f8	 mov	 DWORD PTR _fIdle$[ebp], eax

; 732  : 
; 733  :     //
; 734  :     // Disable interrupts
; 735  :     //
; 736  : 
; 737  :     SetInterruptState(FALSE);

  00053	6a 00		 push	 0
  00055	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 08	 add	 ecx, 8
  0005b	e8 00 00 00 00	 call	 ?SetInterruptState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetInterruptState

; 738  : 
; 739  :     //
; 740  :     // Reset the ACI DMA
; 741  :     //
; 742  : 
; 743  :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_ANALOG]->Reset();

  00060	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00066	e8 00 00 00 00	 call	 ?Reset@CAc97Channel@@QAEXXZ ; CAc97Channel::Reset

; 744  :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->Reset();

  0006b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00071	e8 00 00 00 00	 call	 ?Reset@CAc97Channel@@QAEXXZ ; CAc97Channel::Reset

; 745  : 
; 746  :     //
; 747  :     // Reset the sample counters
; 748  :     //
; 749  : 
; 750  :     ResetGlobalCounters();

  00076	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	83 c1 08	 add	 ecx, 8
  0007c	e8 00 00 00 00	 call	 ?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::ResetGlobalCounters

; 751  : 
; 752  :     //
; 753  :     // Reset the GP command block
; 754  :     //
; 755  : 
; 756  :     pCmdBlock = (PHOST_TO_DSP_COMMANDBLOCK)((LPBYTE)m_ctxMemory[MCPX_MEM_GPSCRATCH].VirtualAddress + DSP_COMMANDBLOCK_SCRATCHOFFSET);

  00081	a1 c0 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+192
  00086	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  0008b	89 45 fc	 mov	 DWORD PTR _pCmdBlock$[ebp], eax

; 757  : 
; 758  :     pCmdBlock->dwCommandFlags = 0;

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _pCmdBlock$[ebp]
  00091	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 759  :     pCmdBlock->dwOffset = 0;

  00098	8b 55 fc	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  0009b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 760  : 
; 761  :     //
; 762  :     // Reset the DSPs
; 763  :     //
; 764  : 
; 765  :     MCPX_REG_WRITE(NV_PAPU_GPRST, 0);

  000a1	c7 05 fc ff 83
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24903684, 0

; 766  :     MCPX_REG_WRITE(NV_PAPU_EPRST, 0);

  000ab	c7 05 fc ff 85
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24772612, 0

; 767  : 
; 768  :     SetupDSPs();

  000b5	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	83 c1 08	 add	 ecx, 8
  000bb	e8 00 00 00 00	 call	 ?SetupDSPs@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupDSPs

; 769  : 
; 770  :     //
; 771  :     // Tell the GP to re-download it's program
; 772  :     //
; 773  : 
; 774  :     m_pGpDspManager->RestoreCommandBlock();

  000c0	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c6	e8 00 00 00 00	 call	 ?RestoreCommandBlock@CMcpxGPDspManagerTest@@QAEXXZ ; CMcpxGPDspManagerTest::RestoreCommandBlock

; 775  : 
; 776  :     pCmdBlock->dwCommandFlags = BIT_H2DCB_COMMAND_LOAD_XRAM_STATE | BIT_H2DCB_COMMAND_LOAD_CODE;

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _pCmdBlock$[ebp]
  000ce	c7 41 10 03 00
	00 00		 mov	 DWORD PTR [ecx+16], 3

; 777  : 
; 778  :     //
; 779  :     // Clear any remaining delta panic bits in the interrupt status
; 780  :     //
; 781  : 
; 782  :     m_arInterruptStatus[0].DeltaPanic = FALSE;

  000d5	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	8b 82 bc 00 00
	00		 mov	 eax, DWORD PTR [edx+188]
  000de	83 e0 f7	 and	 eax, -9			; fffffff7H
  000e1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax

; 783  :     m_arInterruptStatus[1].DeltaPanic = FALSE;

  000ea	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000ed	8b 82 c4 00 00
	00		 mov	 eax, DWORD PTR [edx+196]
  000f3	83 e0 f7	 and	 eax, -9			; fffffff7H
  000f6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	89 81 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], eax

; 784  : 
; 785  :     //
; 786  :     // Enable interrupts
; 787  :     //
; 788  : 
; 789  :     SetInterruptState(TRUE);

  000ff	6a 01		 push	 1
  00101	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	83 c1 08	 add	 ecx, 8
  00107	e8 00 00 00 00	 call	 ?SetInterruptState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetInterruptState

; 790  : 
; 791  :     //
; 792  :     // Start the ACI running again
; 793  :     //
; 794  : 
; 795  :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_ANALOG]->Run();

  0010c	6a ff		 push	 -1
  0010e	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00111	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00114	e8 00 00 00 00	 call	 ?Run@CAc97Channel@@QAEXK@Z ; CAc97Channel::Run

; 796  :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->Run();

  00119	6a ff		 push	 -1
  0011b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00121	e8 00 00 00 00	 call	 ?Run@CAc97Channel@@QAEXK@Z ; CAc97Channel::Run

; 797  : 
; 798  :     //
; 799  :     // Restore the VP state
; 800  :     //
; 801  : 
; 802  :     if(fIdle)

  00126	83 7d f8 00	 cmp	 DWORD PTR _fIdle$[ebp], 0
  0012a	74 0d		 je	 SHORT $L32213

; 803  :     {
; 804  :         IdleVoiceProcessor(FALSE);

  0012c	6a 00		 push	 0
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	83 c1 08	 add	 ecx, 8
  00134	e8 00 00 00 00	 call	 ?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z ; CMcpxCoreTest::IdleVoiceProcessor
$L32213:

; 805  :     }
; 806  : 
; 807  :     DPF_LEAVE_VOID();
; 808  : }

  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c3		 ret	 0
?HandleDeltaPanic@CMcpxAPUTest@@IAEXXZ ENDP		; CMcpxAPUTest::HandleDeltaPanic
DSOUND	ENDS
EXTRN	?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ:NEAR ; CMcpxCoreTest::SetupGlobalProcessor
EXTRN	?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ:NEAR ; CMcpxCoreTest::SetupEncodeProcessor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.h
;	COMDAT ?SetupDSPs@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?SetupDSPs@CMcpxCoreTest@@IAEXXZ PROC NEAR		; CMcpxCoreTest::SetupDSPs, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 343  :     SetupGlobalProcessor();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupGlobalProcessor

; 344  : 
; 345  : #ifndef MCPX_BOOT_LIB
; 346  : 
; 347  :     SetupEncodeProcessor();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupEncodeProcessor

; 348  :     KeStallExecutionProcessor(10 * 1000);

  00017	68 10 27 00 00	 push	 10000			; 00002710H
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeStallExecutionProcessor@4

; 349  : 
; 350  : #endif // MCPX_BOOT_LIB
; 351  : 
; 352  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?SetupDSPs@CMcpxCoreTest@@IAEXXZ ENDP			; CMcpxCoreTest::SetupDSPs
DSOUND	ENDS
PUBLIC	??_C@_0CD@KKGDDECE@CMcpxAPUTest?3?3HandleSoftwareMeth@ ; `string'
PUBLIC	??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@ ; `string'
;	COMDAT ??_C@_0CD@KKGDDECE@CMcpxAPUTest?3?3HandleSoftwareMeth@
; File c:\xbox\private\windows\directx\dsound\initlib\mcpapu.cpp
DSOUND_RD	SEGMENT
??_C@_0CD@KKGDDECE@CMcpxAPUTest?3?3HandleSoftwareMeth@ DB 'CMcpxAPUTest::'
	DB	'HandleSoftwareMethod', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@
DSOUND_RD	SEGMENT
??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@ DB 'Unexpec'
	DB	'ted software method:  %x %x', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?HandleSoftwareMethod@CMcpxAPUTest@@IAEXKK@Z
DSOUND	SEGMENT
tv64 = -8
_this$ = -4
_dwMethod$ = 8
_dwParam$ = 12
?HandleSoftwareMethod@CMcpxAPUTest@@IAEXKK@Z PROC NEAR	; CMcpxAPUTest::HandleSoftwareMethod, COMDAT
; _this$ = ecx

; 838  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 839  :     DPF_ENTER();
; 840  : 
; 841  :     switch(dwMethod)
; 842  :     {

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	81 7d f8 00 80
	00 00		 cmp	 DWORD PTR tv64[ebp], 32768 ; 00008000H
  00016	74 02		 je	 SHORT $L32234
  00018	eb 02		 jmp	 SHORT $L32235
$L32234:

; 843  :         case 0x8000:
; 844  :             
; 845  :             //
; 846  :             // SE2FE_IDLE_VOICE is undocumented since it's an internal method
; 847  :             //
; 848  : 
; 849  : 
; 850  :             break;

  0001a	eb 35		 jmp	 SHORT $L32229
$L32235:

; 851  : 
; 852  :         default:
; 853  :             
; 854  :             //
; 855  :             // Huh?
; 856  :             //
; 857  : 
; 858  :             DPF_ERROR("Unexpected software method:  %x %x", dwMethod, dwParam);

  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@KKGDDECE@CMcpxAPUTest?3?3HandleSoftwareMeth@
  00026	68 5a 03 00 00	 push	 858			; 0000035aH
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@FKFPPNME@c?3?2xbox?2private?2windows?2directx?2@
  00030	6a 01		 push	 1
  00032	6a 09		 push	 9
  00034	e8 00 00 00 00	 call	 _DwDbgSetContext
  00039	83 c4 18	 add	 esp, 24			; 00000018H
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  00043	52		 push	 edx
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@
  00049	e8 00 00 00 00	 call	 _DwDbgPrint
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L32229:

; 859  : 
; 860  :             break;
; 861  :     }
; 862  : 
; 863  :     DPF_LEAVE_VOID();
; 864  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
?HandleSoftwareMethod@CMcpxAPUTest@@IAEXKK@Z ENDP	; CMcpxAPUTest::HandleSoftwareMethod
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_ECMcpxAPUTest@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECMcpxAPUTest@@W7AEPAXI@Z PROC NEAR			; CMcpxAPUTest::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECMcpxAPUTest@@UAEPAXI@Z
??_ECMcpxAPUTest@@W7AEPAXI@Z ENDP			; CMcpxAPUTest::`vector deleting destructor'
_TEXT	ENDS
END
