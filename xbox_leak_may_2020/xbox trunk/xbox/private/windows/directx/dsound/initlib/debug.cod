; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\debug.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_04PFAOODAA@?$CFs?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07KAJBENLI@Error?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09CKCJCCOK@Warning?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09PBGLNJIN@TESTSND?3?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07BAMMBJFH@?0?5line?5?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_02NDKNKOCB@?3?6?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_URW	SEGMENT PARA USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _dstrcpy@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DwDbgPrintStaticV
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DwDbgPrintStatic
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DwDbgSetContext
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DwDbgPrint
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DwDbgAssert
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DwDbgBreak
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_g_DpfContext
PUBLIC	??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `string'
PUBLIC	_g_fDirectSoundBreakPoint
PUBLIC	_g_dwDirectSoundDebugLevel
PUBLIC	_g_dwDirectSoundDebugBreakLevel
DSOUND_URW	SEGMENT
_g_DpfContext DB 0300H DUP (?)
DSOUND_URW	ENDS
DSOUND_RW	SEGMENT
_g_dwDirectSoundDebugLevel DD 03H
_g_dwDirectSoundDebugBreakLevel DD 02H
_g_fDirectSoundBreakPoint DD 00H
DSOUND_RW	ENDS
;	COMDAT ??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
DSOUND_RD	SEGMENT
??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ DB '*'
	DB	'*************************************************************'
	DB	'****************', 00H			; `string'
DSOUND_RD	ENDS
DSOUND_RD	SEGMENT
?pszBanner@?1??DwDbgAssert@@9@9 DD FLAT:??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `DwDbgAssert'::`2'::pszBanner
DSOUND_RD	ENDS
PUBLIC	_dstrcpy@8
PUBLIC	??_C@_04PFAOODAA@?$CFs?3?5?$AA@			; `string'
PUBLIC	??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@	; `string'
PUBLIC	??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@		; `string'
PUBLIC	??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@		; `string'
PUBLIC	??_C@_07KAJBENLI@Error?3?5?$AA@			; `string'
PUBLIC	??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@	; `string'
PUBLIC	??_C@_09CKCJCCOK@Warning?3?5?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	_DwDbgPrintStaticV
PUBLIC	_DwDbgBreak
EXTRN	_GetCurrentThreadId@0:NEAR
EXTRN	_sprintf:NEAR
EXTRN	_vsprintf:NEAR
EXTRN	_OutputDebugStringA@4:NEAR
;	COMDAT ??_C@_04PFAOODAA@?$CFs?3?5?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\debug.c
DSOUND_RD	SEGMENT
??_C@_04PFAOODAA@?$CFs?3?5?$AA@ DB '%s: ', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@
DSOUND_RD	SEGMENT
??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@ DB '%hs(%lu): ', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@
DSOUND_RD	SEGMENT
??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@ DB '%hs: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@
DSOUND_RD	SEGMENT
??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@ DB '%.8lx: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_07KAJBENLI@Error?3?5?$AA@
DSOUND_RD	SEGMENT
??_C@_07KAJBENLI@Error?3?5?$AA@ DB 'Error: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@ DB 'Resource failure: ', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_09CKCJCCOK@Warning?3?5?$AA@
DSOUND_RD	SEGMENT
??_C@_09CKCJCCOK@Warning?3?5?$AA@ DB 'Warning: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
DSOUND_RD	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DwDbgPrintStaticV
DSOUND	SEGMENT
tv136 = -1036
_pszWorking$ = -1028
_szFinal$ = -1024
_dwFlags$ = 8
_dwLevel$ = 12
_pszFile$ = 16
_nLine$ = 20
_pszFunction$ = 24
_pszLibrary$ = 28
_pszFormat$ = 32
_va$ = 36
_DwDbgPrintStaticV PROC NEAR				; COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH

; 114  :     CHAR                    szFinal[0x400];
; 115  :     LPSTR                   pszWorking;
; 116  :     DWORD                   dwWritten;
; 117  : 
; 118  :     if(dwLevel <= g_dwDirectSoundDebugLevel)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwLevel$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwDirectSoundDebugLevel
  00012	0f 87 cf 01 00
	00		 ja	 $L29017

; 119  :     {
; 120  :         pszWorking = szFinal;

  00018	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _szFinal$[ebp]
  0001e	89 8d fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], ecx

; 121  : 
; 122  :         //
; 123  :         // Add the library name
; 124  :         //
; 125  : 
; 126  :         if((dwFlags & DPRINTF_LIBRARY) && pszLibrary && *pszLibrary)

  00024	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00027	83 e2 01	 and	 edx, 1
  0002a	85 d2		 test	 edx, edx
  0002c	74 36		 je	 SHORT $L29022
  0002e	83 7d 1c 00	 cmp	 DWORD PTR _pszLibrary$[ebp], 0
  00032	74 30		 je	 SHORT $L29022
  00034	8b 45 1c	 mov	 eax, DWORD PTR _pszLibrary$[ebp]
  00037	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 26		 je	 SHORT $L29022

; 127  :         {
; 128  :             pszWorking += sprintf(pszWorking, "%s: ", pszLibrary);

  0003e	8b 55 1c	 mov	 edx, DWORD PTR _pszLibrary$[ebp]
  00041	52		 push	 edx
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PFAOODAA@?$CFs?3?5?$AA@
  00047	8b 85 fc fb ff
	ff		 mov	 eax, DWORD PTR _pszWorking$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _sprintf
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH
  00056	8b 8d fc fb ff
	ff		 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  0005c	03 c8		 add	 ecx, eax
  0005e	89 8d fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], ecx
$L29022:

; 129  :         }
; 130  : 
; 131  :         //
; 132  :         // Add the source file and line number
; 133  :         //
; 134  : 
; 135  :         if((dwFlags & DPRINTF_FILELINE) && pszFile && *pszFile)

  00064	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00067	83 e2 02	 and	 edx, 2
  0006a	85 d2		 test	 edx, edx
  0006c	74 3a		 je	 SHORT $L29024
  0006e	83 7d 10 00	 cmp	 DWORD PTR _pszFile$[ebp], 0
  00072	74 34		 je	 SHORT $L29024
  00074	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00077	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0007a	85 c9		 test	 ecx, ecx
  0007c	74 2a		 je	 SHORT $L29024

; 136  :         {
; 137  :             pszWorking += sprintf(pszWorking, "%hs(%lu): ", pszFile, nLine);

  0007e	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  00081	52		 push	 edx
  00082	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@
  0008b	8b 8d fc fb ff
	ff		 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _sprintf
  00097	83 c4 10	 add	 esp, 16			; 00000010H
  0009a	8b 95 fc fb ff
	ff		 mov	 edx, DWORD PTR _pszWorking$[ebp]
  000a0	03 d0		 add	 edx, eax
  000a2	89 95 fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], edx
$L29024:

; 138  :         }
; 139  : 
; 140  :         //
; 141  :         // Add the function name
; 142  :         //
; 143  : 
; 144  :         if((dwFlags & DPRINTF_FUNCTIONNAME) && pszFunction && *pszFunction)

  000a8	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000ab	83 e0 08	 and	 eax, 8
  000ae	85 c0		 test	 eax, eax
  000b0	74 36		 je	 SHORT $L29026
  000b2	83 7d 18 00	 cmp	 DWORD PTR _pszFunction$[ebp], 0
  000b6	74 30		 je	 SHORT $L29026
  000b8	8b 4d 18	 mov	 ecx, DWORD PTR _pszFunction$[ebp]
  000bb	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000be	85 d2		 test	 edx, edx
  000c0	74 26		 je	 SHORT $L29026

; 145  :         {
; 146  :             pszWorking += sprintf(pszWorking, "%hs: ", pszFunction);

  000c2	8b 45 18	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@
  000cb	8b 8d fc fb ff
	ff		 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _sprintf
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	8b 95 fc fb ff
	ff		 mov	 edx, DWORD PTR _pszWorking$[ebp]
  000e0	03 d0		 add	 edx, eax
  000e2	89 95 fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], edx
$L29026:

; 147  :         }
; 148  : 
; 149  :         //
; 150  :         // Add process and thread id
; 151  :         //
; 152  : 
; 153  :         if(dwFlags & DPRINTF_PROCESSTHREADID)

  000e8	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000eb	83 e0 04	 and	 eax, 4
  000ee	85 c0		 test	 eax, eax
  000f0	74 28		 je	 SHORT $L29028

; 154  :         {
; 155  :             pszWorking += sprintf(pszWorking, "%.8lx: ", GetCurrentThreadId());

  000f2	e8 00 00 00 00	 call	 _GetCurrentThreadId@0
  000f7	50		 push	 eax
  000f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@
  000fd	8b 8d fc fb ff
	ff		 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 _sprintf
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010c	8b 95 fc fb ff
	ff		 mov	 edx, DWORD PTR _pszWorking$[ebp]
  00112	03 d0		 add	 edx, eax
  00114	89 95 fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], edx
$L29028:

; 156  :         }
; 157  : 
; 158  :         //
; 159  :         // Add the type of message it is (i.e. error or warning)
; 160  :         //
; 161  : 
; 162  :         switch(dwLevel)
; 163  :         {

  0011a	8b 45 0c	 mov	 eax, DWORD PTR _dwLevel$[ebp]
  0011d	89 85 f4 fb ff
	ff		 mov	 DWORD PTR tv136[ebp], eax
  00123	83 bd f4 fb ff
	ff 01		 cmp	 DWORD PTR tv136[ebp], 1
  0012a	74 14		 je	 SHORT $L29034
  0012c	83 bd f4 fb ff
	ff 02		 cmp	 DWORD PTR tv136[ebp], 2
  00133	74 24		 je	 SHORT $L29036
  00135	83 bd f4 fb ff
	ff 03		 cmp	 DWORD PTR tv136[ebp], 3
  0013c	74 34		 je	 SHORT $L29038
  0013e	eb 49		 jmp	 SHORT $L29031
$L29034:

; 164  :             case DPFLVL_ERROR:
; 165  :                 pszWorking = dstrcpy(pszWorking, "Error: ");

  00140	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KAJBENLI@Error?3?5?$AA@
  00145	8b 8d fc fb ff
	ff		 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 _dstrcpy@8
  00151	89 85 fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], eax

; 166  :                 break;

  00157	eb 30		 jmp	 SHORT $L29031
$L29036:

; 167  : 
; 168  :             case DPFLVL_RESOURCE:
; 169  :                 pszWorking = dstrcpy(pszWorking, "Resource failure: ");

  00159	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@
  0015e	8b 95 fc fb ff
	ff		 mov	 edx, DWORD PTR _pszWorking$[ebp]
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 _dstrcpy@8
  0016a	89 85 fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], eax

; 170  :                 break;

  00170	eb 17		 jmp	 SHORT $L29031
$L29038:

; 171  : 
; 172  :             case DPFLVL_WARNING:
; 173  :                 pszWorking = dstrcpy(pszWorking, "Warning: ");

  00172	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09CKCJCCOK@Warning?3?5?$AA@
  00177	8b 85 fc fb ff
	ff		 mov	 eax, DWORD PTR _pszWorking$[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _dstrcpy@8
  00183	89 85 fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], eax
$L29031:

; 174  :                 break;
; 175  :         }
; 176  : 
; 177  :         //
; 178  :         // Add the debug string
; 179  :         //
; 180  : 
; 181  :         pszWorking += vsprintf(pszWorking, pszFormat, va);

  00189	8b 4d 24	 mov	 ecx, DWORD PTR _va$[ebp]
  0018c	51		 push	 ecx
  0018d	8b 55 20	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  00190	52		 push	 edx
  00191	8b 85 fc fb ff
	ff		 mov	 eax, DWORD PTR _pszWorking$[ebp]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _vsprintf
  0019d	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a0	8b 8d fc fb ff
	ff		 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  001a6	03 c8		 add	 ecx, eax
  001a8	89 8d fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], ecx

; 182  : 
; 183  :         //
; 184  :         // Add a carriage-return since OutputDebugString doesn't
; 185  :         //
; 186  : 
; 187  :         pszWorking = dstrcpy(pszWorking, "\n");

  001ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  001b3	8b 95 fc fb ff
	ff		 mov	 edx, DWORD PTR _pszWorking$[ebp]
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 _dstrcpy@8
  001bf	89 85 fc fb ff
	ff		 mov	 DWORD PTR _pszWorking$[ebp], eax

; 188  : 
; 189  :         //
; 190  :         // Output to the debugger
; 191  :         //
; 192  : 
; 193  :         OutputDebugStringA(szFinal);

  001c5	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _szFinal$[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 194  : 
; 195  :         //
; 196  :         // Break into the debugger
; 197  :         //
; 198  : 
; 199  :         if(dwLevel && (dwLevel <= g_dwDirectSoundDebugBreakLevel))

  001d1	83 7d 0c 00	 cmp	 DWORD PTR _dwLevel$[ebp], 0
  001d5	74 10		 je	 SHORT $L29017
  001d7	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLevel$[ebp]
  001da	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_dwDirectSoundDebugBreakLevel
  001e0	77 05		 ja	 SHORT $L29017

; 200  :         {
; 201  :             DwDbgBreak();

  001e2	e8 00 00 00 00	 call	 _DwDbgBreak
$L29017:

; 202  :         }
; 203  :     }
; 204  : }

  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c3		 ret	 0
_DwDbgPrintStaticV ENDP
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT _dstrcpy@8
DSOUND	SEGMENT
_dst$ = 8
_src$ = 12
_dstrcpy@8 PROC NEAR					; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L28999:

; 70   :     while(*dst = *src)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00009	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000b	88 10		 mov	 BYTE PTR [eax], dl
  0000d	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00010	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00013	85 c9		 test	 ecx, ecx
  00015	74 14		 je	 SHORT $L29000

; 71   :     {
; 72   :         dst++;

  00017	8b 55 08	 mov	 edx, DWORD PTR _dst$[ebp]
  0001a	83 c2 01	 add	 edx, 1
  0001d	89 55 08	 mov	 DWORD PTR _dst$[ebp], edx

; 73   :         src++;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 0c	 mov	 DWORD PTR _src$[ebp], eax

; 74   :     }

  00029	eb d8		 jmp	 SHORT $L28999
$L29000:

; 75   :     
; 76   :     return dst;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]

; 77   : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
_dstrcpy@8 ENDP
DSOUND	ENDS
PUBLIC	_DwDbgPrintStatic
; Function compile flags: /Odt
;	COMDAT _DwDbgPrintStatic
DSOUND	SEGMENT
_va$ = -4
_dwFlags$ = 8
_dwLevel$ = 12
_pszFile$ = 16
_nLine$ = 20
_pszFunction$ = 24
_pszLibrary$ = 28
_pszFormat$ = 32
_DwDbgPrintStatic PROC NEAR				; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 241  :     va_list                 va;
; 242  : 
; 243  :     va_start(va, pszFormat);

  00004	8d 45 24	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00007	89 45 fc	 mov	 DWORD PTR _va$[ebp], eax

; 244  :     DwDbgPrintStaticV(dwFlags, dwLevel, pszFile, nLine, pszFunction, pszLibrary, pszFormat, va);

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _va$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 20	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  00011	52		 push	 edx
  00012	8b 45 1c	 mov	 eax, DWORD PTR _pszLibrary$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 18	 mov	 ecx, DWORD PTR _pszFunction$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLevel$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _DwDbgPrintStaticV
  0002f	83 c4 20	 add	 esp, 32			; 00000020H

; 245  :     va_end(va);

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 246  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_DwDbgPrintStatic ENDP
DSOUND	ENDS
PUBLIC	_DwDbgSetContext
; Function compile flags: /Odt
;	COMDAT _DwDbgSetContext
DSOUND	SEGMENT
_irql$ = -1
_dwFlags$ = 8
_dwLevel$ = 12
_pszFile$ = 16
_nLine$ = 20
_pszFunction$ = 24
_pszLibrary$ = 28
_DwDbgSetContext PROC NEAR				; COMDAT

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 279  :     const KIRQL             irql    = KeGetCurrentIrql();

  00004	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00009	88 45 ff	 mov	 BYTE PTR _irql$[ebp], al

; 280  : 
; 281  :     g_DpfContext[irql].dwFlags = dwFlags;

  0000c	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  00010	6b c0 18	 imul	 eax, 24			; 00000018H
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00016	89 88 00 00 00
	00		 mov	 DWORD PTR _g_DpfContext[eax], ecx

; 282  :     g_DpfContext[irql].dwLevel = dwLevel;

  0001c	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  00020	6b d2 18	 imul	 edx, 24			; 00000018H
  00023	8b 45 0c	 mov	 eax, DWORD PTR _dwLevel$[ebp]
  00026	89 82 04 00 00
	00		 mov	 DWORD PTR _g_DpfContext[edx+4], eax

; 283  :     g_DpfContext[irql].pszFile = pszFile;

  0002c	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  00030	6b c9 18	 imul	 ecx, 24			; 00000018H
  00033	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  00036	89 91 08 00 00
	00		 mov	 DWORD PTR _g_DpfContext[ecx+8], edx

; 284  :     g_DpfContext[irql].nLine = nLine;

  0003c	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  00040	6b c0 18	 imul	 eax, 24			; 00000018H
  00043	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00046	89 88 0c 00 00
	00		 mov	 DWORD PTR _g_DpfContext[eax+12], ecx

; 285  :     g_DpfContext[irql].pszFunction = pszFunction;

  0004c	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  00050	6b d2 18	 imul	 edx, 24			; 00000018H
  00053	8b 45 18	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  00056	89 82 10 00 00
	00		 mov	 DWORD PTR _g_DpfContext[edx+16], eax

; 286  :     g_DpfContext[irql].pszLibrary = pszLibrary;

  0005c	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  00060	6b c9 18	 imul	 ecx, 24			; 00000018H
  00063	8b 55 1c	 mov	 edx, DWORD PTR _pszLibrary$[ebp]
  00066	89 91 14 00 00
	00		 mov	 DWORD PTR _g_DpfContext[ecx+20], edx

; 287  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_DwDbgSetContext ENDP
DSOUND	ENDS
PUBLIC	_DwDbgPrint
; Function compile flags: /Odt
;	COMDAT _DwDbgPrint
DSOUND	SEGMENT
_va$ = -8
_irql$ = -1
_pszFormat$ = 8
_DwDbgPrint PROC NEAR					; COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 313  :     const KIRQL             irql    = KeGetCurrentIrql();

  00006	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000b	88 45 ff	 mov	 BYTE PTR _irql$[ebp], al

; 314  :     va_list                 va;
; 315  : 
; 316  :     va_start(va, pszFormat);

  0000e	8d 45 0c	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00011	89 45 f8	 mov	 DWORD PTR _va$[ebp], eax

; 317  :     DwDbgPrintStaticV(g_DpfContext[irql].dwFlags, g_DpfContext[irql].dwLevel, g_DpfContext[irql].pszFile, g_DpfContext[irql].nLine, g_DpfContext[irql].pszFunction, g_DpfContext[irql].pszLibrary, pszFormat, va);

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _va$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 08	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  0001b	52		 push	 edx
  0001c	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  00020	6b c0 18	 imul	 eax, 24			; 00000018H
  00023	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _g_DpfContext[eax+20]
  00029	51		 push	 ecx
  0002a	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  0002e	6b d2 18	 imul	 edx, 24			; 00000018H
  00031	8b 82 10 00 00
	00		 mov	 eax, DWORD PTR _g_DpfContext[edx+16]
  00037	50		 push	 eax
  00038	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  0003c	6b c9 18	 imul	 ecx, 24			; 00000018H
  0003f	8b 91 0c 00 00
	00		 mov	 edx, DWORD PTR _g_DpfContext[ecx+12]
  00045	52		 push	 edx
  00046	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  0004a	6b c0 18	 imul	 eax, 24			; 00000018H
  0004d	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR _g_DpfContext[eax+8]
  00053	51		 push	 ecx
  00054	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  00058	6b d2 18	 imul	 edx, 24			; 00000018H
  0005b	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _g_DpfContext[edx+4]
  00061	50		 push	 eax
  00062	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  00066	6b c9 18	 imul	 ecx, 24			; 00000018H
  00069	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _g_DpfContext[ecx]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 _DwDbgPrintStaticV
  00075	83 c4 20	 add	 esp, 32			; 00000020H

; 318  :     va_end(va);

  00078	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 319  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_DwDbgPrint ENDP
DSOUND	ENDS
PUBLIC	??_C@_09PBGLNJIN@TESTSND?3?5?$AA@		; `string'
PUBLIC	??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@	; `string'
PUBLIC	??_C@_07BAMMBJFH@?0?5line?5?$AA@		; `string'
PUBLIC	??_C@_02NDKNKOCB@?3?6?$AA@			; `string'
PUBLIC	_DwDbgAssert
EXTRN	__itoa:NEAR
EXTRN	_strlen:NEAR
;	COMDAT ??_C@_09PBGLNJIN@TESTSND?3?5?$AA@
DSOUND_RD	SEGMENT
??_C@_09PBGLNJIN@TESTSND?3?5?$AA@ DB 'TESTSND: ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@ DB 'Assertion failed in ', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_07BAMMBJFH@?0?5line?5?$AA@
DSOUND_RD	SEGMENT
??_C@_07BAMMBJFH@?0?5line?5?$AA@ DB ', line ', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_02NDKNKOCB@?3?6?$AA@
DSOUND_RD	SEGMENT
??_C@_02NDKNKOCB@?3?6?$AA@ DB ':', 0aH, 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DwDbgAssert
DSOUND	SEGMENT
_szMessage$ = -1032
_pszMessage$ = -4
_fAssert$ = 8
_pszExpression$ = 12
_pszFile$ = 16
_nLine$ = 20
_DwDbgAssert PROC NEAR					; COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H

; 349  :     static const LPCSTR     pszBanner           = "******************************************************************************";
; 350  :     CHAR                    szMessage[0x400];
; 351  :     LPSTR                   pszMessage;
; 352  : 
; 353  :     if(fAssert)

  00009	83 7d 08 00	 cmp	 DWORD PTR _fAssert$[ebp], 0
  0000d	0f 84 fc 00 00
	00		 je	 $L29093

; 354  :     {
; 355  :         pszMessage = szMessage;

  00013	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 356  : 
; 357  :         pszMessage = dstrcpy(pszMessage, pszBanner);

  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszBanner@?1??DwDbgAssert@@9@9
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 _dstrcpy@8
  0002c	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 358  :         pszMessage = dstrcpy(pszMessage, "\n");

  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00034	8b 45 fc	 mov	 eax, DWORD PTR _pszMessage$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _dstrcpy@8
  0003d	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 359  :     
; 360  : #ifdef DPF_LIBRARY
; 361  : 
; 362  :         pszMessage = dstrcpy(pszMessage, DPF_LIBRARY ": ");

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09PBGLNJIN@TESTSND?3?5?$AA@
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 _dstrcpy@8
  0004e	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 363  : 
; 364  : #endif // DPF_LIBRARY
; 365  :     
; 366  :         pszMessage = dstrcpy(pszMessage, "Assertion failed in ");

  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@
  00056	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 _dstrcpy@8
  0005f	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 367  :         pszMessage = dstrcpy(pszMessage, pszFile);

  00062	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00065	50		 push	 eax
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _dstrcpy@8
  0006f	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 368  :         pszMessage = dstrcpy(pszMessage, ", line ");

  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BAMMBJFH@?0?5line?5?$AA@
  00077	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 _dstrcpy@8
  00080	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 369  :     
; 370  :         _itoa(nLine, pszMessage, 10);

  00083	6a 0a		 push	 10			; 0000000aH
  00085	8b 45 fc	 mov	 eax, DWORD PTR _pszMessage$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 __itoa
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH

; 371  :         pszMessage += strlen(pszMessage);

  00095	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 _strlen
  0009e	83 c4 04	 add	 esp, 4
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  000a4	03 c8		 add	 ecx, eax
  000a6	89 4d fc	 mov	 DWORD PTR _pszMessage$[ebp], ecx

; 372  : 
; 373  :         pszMessage = dstrcpy(pszMessage, ":\n");

  000a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02NDKNKOCB@?3?6?$AA@
  000ae	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 _dstrcpy@8
  000b7	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 374  :         pszMessage = dstrcpy(pszMessage, pszExpression);

  000ba	8b 45 0c	 mov	 eax, DWORD PTR _pszExpression$[ebp]
  000bd	50		 push	 eax
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 _dstrcpy@8
  000c7	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 375  :         pszMessage = dstrcpy(pszMessage, "\n");

  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000cf	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _dstrcpy@8
  000d8	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 376  :         pszMessage = dstrcpy(pszMessage, pszBanner);

  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszBanner@?1??DwDbgAssert@@9@9
  000e0	50		 push	 eax
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 _dstrcpy@8
  000ea	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 377  :         pszMessage = dstrcpy(pszMessage, "\n");

  000ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000f2	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 _dstrcpy@8
  000fb	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 378  : 
; 379  :         OutputDebugStringA(szMessage);

  000fe	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 380  :         DwDbgBreak();

  0010a	e8 00 00 00 00	 call	 _DwDbgBreak
$L29093:

; 381  :     }
; 382  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
_DwDbgAssert ENDP
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT _DwDbgBreak
DSOUND	SEGMENT
_DwDbgBreak PROC NEAR					; COMDAT

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 406  :     //
; 407  :     // Break in the debugger
; 408  :     //
; 409  :     
; 410  :     __asm int 3;

  00003	cc		 int	 3

; 411  : 
; 412  :     //
; 413  :     // If we're at DISPATCH_LEVEL or higher, the VC debugger won't catch
; 414  :     // the break.
; 415  :     //
; 416  :     
; 417  :     if(KeGetCurrentIrql() >= DISPATCH_LEVEL)

  00004	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00009	0f b6 c0	 movzx	 eax, al
  0000c	83 f8 02	 cmp	 eax, 2
  0000f	7c 0a		 jl	 SHORT $L29105

; 418  :     {
; 419  :         g_fDirectSoundBreakPoint = TRUE;

  00011	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fDirectSoundBreakPoint, 1
$L29105:

; 420  :     }
; 421  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
_DwDbgBreak ENDP
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
END
