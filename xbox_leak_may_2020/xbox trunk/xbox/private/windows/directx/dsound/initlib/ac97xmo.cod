; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\ac97xmo.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@LNGLCLLL@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07CNKCBOKB@TESTSND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NAFPMNMN@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GKNCNMBD@CDirectSoundTest?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@KCMACBKL@CDirectSoundTest?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JCFGJJGP@m_dwGlobalRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@HMBCAGAN@?$CBm_pDevice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@GJIBIBNP@CAc97Device?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09LDANIPIA@m_pDevice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@POLJCOGF@Invalid?5channel?5type?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@OLKKOBLG@CAc97MediaObject?3?3Initialize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@LBECNKHM@Channel?5already?5open?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@OHLIACNC@AC97PACKET?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@INLCJDIG@CAc97MediaObject?3?3GetInfo?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@KFMMHEBM@XMO?5info?5buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@OLMCMPIH@CAc97MediaObject?3?3Flush?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@GCMBOPM@CAc97MediaObject?3?3GetStatus?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@CELPIAIP@Input?5buffers?5are?5restricted?5to?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KBHECPDM@AC97?5streams?5are?5input?5only?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IOLACHLJ@No?5free?5packets?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@NNABOLMD@Accepted?5packet?5?$CFx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FJ@GFMILJKF@Packet?5data?5submitted?5to?5the?5AC9@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@IJBFJHGE@XMO_STATUSF_ACCEPT_INPUT_DATA?5?$DN?$DN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@DFBLBMLH@CAc97MediaObject?3?3CompletePacket@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JFOADINC@Completing?5packet?5?$CFx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@DINKHGHB@?$CBIsListEmpty?$CI?$CGm_lstFree?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@PNBENIHJ@Invalid?5channel?5mode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@IDLDEKPC@The?5analog?5channel?5can?5only?5outp@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@JDGBLHGP@Encoded?5output?5not?5enabled?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@MPOOJCFL@CAc97MediaObject?3?3GetCurrentPosi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@BBIHEMKC@Failed?5to?5supply?5a?5position?5buff@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CRefCountTest@@QAE@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCountTest@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCountTest@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CAc97Channel@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AttachPacket@CAc97Channel@@QAEXPBXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundTestEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundTestLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDmaTest@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CAc97MediaObject@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CAc97MediaObject@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Discontinuity@CAc97MediaObject@@UAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InterruptCallback@CAc97MediaObject@@CGXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Ac97CreateMediaObject@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAc97MediaObject@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCAc97MediaObject@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0XAc97MediaObject@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAc97MediaObject@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCAc97Device@@QAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CAc97MediaObject@@UAGJKP6GXPAX0K@Z0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetInfo@CAc97MediaObject@@UAGJPAU_XMEDIAINFO@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Flush@CAc97MediaObject@@UAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CAc97MediaObject@@UAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Process@CAc97MediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CompletePendingPackets@CAc97MediaObject@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CompletePacket@CAc97MediaObject@@IAEXPAUAC97PACKET@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMode@CAc97MediaObject@@UAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetCurrentPosition@CAc97MediaObject@@UAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0?$CValidObject@$0EBEDDJDH@@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@@YGPAVCAc97MediaObject@@PAV1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_ECAc97MediaObject@@W7AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CAc97MediaObject@@WM@AGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CAc97MediaObject@@WM@AGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7XAc97MediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7XMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAc97MediaObject@@6BXAc97MediaObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _TestSoundLibBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7CRefCountTest@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7CAc97MediaObject@@6B?$CValidObject@$0EBEDDJDH@@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CAc97MediaObject@@6BCRefCountTest@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?m_dwGlobalRefCount@CAc97MediaObject@@1KA	; CAc97MediaObject::m_dwGlobalRefCount
PUBLIC	?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A	; CAc97MediaObject::m_pDevice
PUBLIC	_TestSoundLibBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _TestSoundLibBuildNumberD
XBLD$V	SEGMENT
_TestSoundLibBuildNumberD DW 04554H
	DW	05453H
	DW	04e53H
	DW	04444H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RW	SEGMENT
?m_dwGlobalRefCount@CAc97MediaObject@@1KA DD 00H	; CAc97MediaObject::m_dwGlobalRefCount
?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A DD 00H	; CAc97MediaObject::m_pDevice
DSOUND_RW	ENDS
PUBLIC	_Ac97CreateMediaObject@16
PUBLIC	??0CAc97MediaObject@@QAE@XZ			; CAc97MediaObject::CAc97MediaObject
PUBLIC	??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@		; `string'
PUBLIC	?__AddRef@@YGPAVCAc97MediaObject@@PAV1@@Z	; __AddRef
PUBLIC	??0CAutoLockTest@@QAE@XZ			; CAutoLockTest::CAutoLockTest
PUBLIC	??1CAutoLockTest@@QAE@XZ			; CAutoLockTest::~CAutoLockTest
;	COMDAT ??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
DSOUND_RD	SEGMENT
??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@ DB 'CAc97MediaObject', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\ac97xmo.cpp', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _Ac97CreateMediaObject@16
DSOUND	SEGMENT
tv75 = -24
$T32716 = -20
$T32713 = -16
_hr$ = -12
_pMediaObject$ = -8
___AutoLockTest$ = -4
_dwChannel$ = 8
_pfnCallback$ = 12
_pvCallbackContext$ = 16
_ppMediaObject$ = 20
_Ac97CreateMediaObject@16 PROC NEAR			; COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 137  :     CAc97MediaObject *          pMediaObject    = NULL;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0

; 138  :     HRESULT                     hr;
; 139  :     
; 140  :     DPF_ENTER();
; 141  :     ENTER_EXTERNAL_FUNCTION();

  0000d	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest

; 142  : 
; 143  :     //
; 144  :     // Create the AC97 media object
; 145  :     //
; 146  : 
; 147  :     hr = HRFROMP(pMediaObject = NEW(CAc97MediaObject));

  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@
  0001a	68 93 00 00 00	 push	 147			; 00000093H
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00024	6a 38		 push	 56			; 00000038H
  00026	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 45 f0	 mov	 DWORD PTR $T32713[ebp], eax
  00031	83 7d f0 00	 cmp	 DWORD PTR $T32713[ebp], 0
  00035	74 0d		 je	 SHORT $L32714
  00037	8b 4d f0	 mov	 ecx, DWORD PTR $T32713[ebp]
  0003a	e8 00 00 00 00	 call	 ??0CAc97MediaObject@@QAE@XZ ; CAc97MediaObject::CAc97MediaObject
  0003f	89 45 e8	 mov	 DWORD PTR tv75[ebp], eax
  00042	eb 07		 jmp	 SHORT $L32715
$L32714:
  00044	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$L32715:
  0004b	8b 45 e8	 mov	 eax, DWORD PTR tv75[ebp]
  0004e	89 45 f8	 mov	 DWORD PTR _pMediaObject$[ebp], eax
  00051	33 c9		 xor	 ecx, ecx
  00053	83 7d f8 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00057	0f 95 c1	 setne	 cl
  0005a	49		 dec	 ecx
  0005b	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00061	89 4d f4	 mov	 DWORD PTR _hr$[ebp], ecx

; 148  :    
; 149  :     if(SUCCEEDED(hr))

  00064	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00068	7c 1b		 jl	 SHORT $L32193

; 150  :     {
; 151  :         hr = pMediaObject->Initialize(dwChannel, pfnCallback, pvCallbackContext);

  0006a	8b 55 10	 mov	 edx, DWORD PTR _pvCallbackContext$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _pfnCallback$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _dwChannel$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 f8	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00079	8b 02		 mov	 eax, DWORD PTR [edx]
  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  0007e	51		 push	 ecx
  0007f	ff 50 24	 call	 DWORD PTR [eax+36]
  00082	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L32193:

; 152  :     }
; 153  : 
; 154  :     if(SUCCEEDED(hr))

  00085	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	7c 0e		 jl	 SHORT $L32195

; 155  :     {
; 156  :         *ppMediaObject = ADDREF(pMediaObject);

  0008b	8b 55 f8	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ?__AddRef@@YGPAVCAc97MediaObject@@PAV1@@Z ; __AddRef
  00094	8b 4d 14	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  00097	89 01		 mov	 DWORD PTR [ecx], eax
$L32195:

; 157  :     }
; 158  : 
; 159  :     RELEASE(pMediaObject);

  00099	83 7d f8 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  0009d	74 13		 je	 SHORT $L32200
  0009f	8b 55 f8	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  000a7	51		 push	 ecx
  000a8	ff 50 04	 call	 DWORD PTR [eax+4]
  000ab	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L32200:

; 160  : 
; 161  :     DPF_LEAVE_HRESULT(hr);
; 162  : 
; 163  :     return hr;

  000b2	8b 55 f4	 mov	 edx, DWORD PTR _hr$[ebp]
  000b5	89 55 ec	 mov	 DWORD PTR $T32716[ebp], edx
  000b8	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  000bb	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  000c0	8b 45 ec	 mov	 eax, DWORD PTR $T32716[ebp]

; 164  : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 10 00	 ret	 16			; 00000010H
_Ac97CreateMediaObject@16 ENDP
DSOUND	ENDS
EXTRN	_DirectSoundTestTrackingMemAlloc@24:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :     return DirectSoundTestTrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _DirectSoundTestTrackingMemAlloc@24

; 170  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
DSOUND	ENDS
PUBLIC	?DirectSoundTestEnterCriticalSection@@YGHXZ	; DirectSoundTestEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\dsapi.h
;	COMDAT ??0CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoLockTest@@QAE@XZ PROC NEAR			; CAutoLockTest::CAutoLockTest, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 138  :     m_fLocked = (BOOLEAN)DirectSoundTestEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?DirectSoundTestEnterCriticalSection@@YGHXZ ; DirectSoundTestEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 139  : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLockTest@@QAE@XZ ENDP				; CAutoLockTest::CAutoLockTest
DSOUND	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_DirectSoundTestCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?DirectSoundTestEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT
?DirectSoundTestEnterCriticalSection@@YGHXZ PROC NEAR	; DirectSoundTestEnterCriticalSection, COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L30586

; 29   :     {
; 30   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L30585
$L30586:

; 31   :     }
; 32   : 
; 33   :     EnterCriticalSection(&g_DirectSoundTestCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_DirectSoundTestCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 34   : 
; 35   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L30585:

; 36   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?DirectSoundTestEnterCriticalSection@@YGHXZ ENDP	; DirectSoundTestEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	?DirectSoundTestLeaveCriticalSection@@YGXXZ	; DirectSoundTestLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\dsapi.h
;	COMDAT ??1CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoLockTest@@QAE@XZ PROC NEAR			; CAutoLockTest::~CAutoLockTest, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  :     if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L30668

; 144  :     {
; 145  :         DirectSoundTestLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?DirectSoundTestLeaveCriticalSection@@YGXXZ ; DirectSoundTestLeaveCriticalSection
$L30668:

; 146  :     }
; 147  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLockTest@@QAE@XZ ENDP				; CAutoLockTest::~CAutoLockTest
DSOUND	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?DirectSoundTestLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT
?DirectSoundTestLeaveCriticalSection@@YGXXZ PROC NEAR	; DirectSoundTestLeaveCriticalSection, COMDAT

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   :     LeaveCriticalSection(&g_DirectSoundTestCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_DirectSoundTestCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 41   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?DirectSoundTestLeaveCriticalSection@@YGXXZ ENDP	; DirectSoundTestLeaveCriticalSection
DSOUND	ENDS
PUBLIC	??0CRefCountTest@@QAE@K@Z			; CRefCountTest::CRefCountTest
PUBLIC	??0?$CValidObject@$0EBEDDJDH@@@QAE@XZ		; CValidObject<1094924599>::CValidObject<1094924599>
PUBLIC	?Initialize@CAc97MediaObject@@UAGJKP6GXPAX0K@Z0@Z ; CAc97MediaObject::Initialize
PUBLIC	?AddRef@CAc97MediaObject@@UAGKXZ		; CAc97MediaObject::AddRef
PUBLIC	?Release@CAc97MediaObject@@UAGKXZ		; CAc97MediaObject::Release
PUBLIC	?GetInfo@CAc97MediaObject@@UAGJPAU_XMEDIAINFO@@@Z ; CAc97MediaObject::GetInfo
PUBLIC	?GetStatus@CAc97MediaObject@@UAGJPAK@Z		; CAc97MediaObject::GetStatus
PUBLIC	??0XAc97MediaObject@@QAE@XZ			; XAc97MediaObject::XAc97MediaObject
PUBLIC	?Process@CAc97MediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z ; CAc97MediaObject::Process
PUBLIC	?Discontinuity@CAc97MediaObject@@UAGJXZ		; CAc97MediaObject::Discontinuity
PUBLIC	?Flush@CAc97MediaObject@@UAGJXZ			; CAc97MediaObject::Flush
PUBLIC	?SetMode@CAc97MediaObject@@UAGJK@Z		; CAc97MediaObject::SetMode
PUBLIC	?GetCurrentPosition@CAc97MediaObject@@UAGJPAK@Z	; CAc97MediaObject::GetCurrentPosition
PUBLIC	??_7CAc97MediaObject@@6BXAc97MediaObject@@@	; CAc97MediaObject::`vftable'
PUBLIC	??_7CAc97MediaObject@@6B?$CValidObject@$0EBEDDJDH@@@@ ; CAc97MediaObject::`vftable'
PUBLIC	??_7CAc97MediaObject@@6BCRefCountTest@@@	; CAc97MediaObject::`vftable'
PUBLIC	??_GCAc97MediaObject@@UAEPAXI@Z			; CAc97MediaObject::`scalar deleting destructor'
PUBLIC	??_ECAc97MediaObject@@W7AEPAXI@Z		; CAc97MediaObject::`vector deleting destructor'
PUBLIC	?AddRef@CAc97MediaObject@@WM@AGKXZ		; CAc97MediaObject::AddRef
PUBLIC	?Release@CAc97MediaObject@@WM@AGKXZ		; CAc97MediaObject::Release
EXTRN	??_ECAc97MediaObject@@UAEPAXI@Z:NEAR		; CAc97MediaObject::`vector deleting destructor'
;	COMDAT ??_7CAc97MediaObject@@6BXAc97MediaObject@@@
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
CONST	SEGMENT
??_7CAc97MediaObject@@6BXAc97MediaObject@@@ DD FLAT:?AddRef@CAc97MediaObject@@UAGKXZ ; CAc97MediaObject::`vftable'
	DD	FLAT:?Release@CAc97MediaObject@@UAGKXZ
	DD	FLAT:?GetInfo@CAc97MediaObject@@UAGJPAU_XMEDIAINFO@@@Z
	DD	FLAT:?GetStatus@CAc97MediaObject@@UAGJPAK@Z
	DD	FLAT:?Process@CAc97MediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
	DD	FLAT:?Discontinuity@CAc97MediaObject@@UAGJXZ
	DD	FLAT:?Flush@CAc97MediaObject@@UAGJXZ
	DD	FLAT:?SetMode@CAc97MediaObject@@UAGJK@Z
	DD	FLAT:?GetCurrentPosition@CAc97MediaObject@@UAGJPAK@Z
	DD	FLAT:?Initialize@CAc97MediaObject@@UAGJKP6GXPAX0K@Z0@Z
CONST	ENDS
;	COMDAT ??_7CAc97MediaObject@@6B?$CValidObject@$0EBEDDJDH@@@@
CONST	SEGMENT
??_7CAc97MediaObject@@6B?$CValidObject@$0EBEDDJDH@@@@ DD FLAT:??_ECAc97MediaObject@@UAEPAXI@Z ; CAc97MediaObject::`vftable'
CONST	ENDS
;	COMDAT ??_7CAc97MediaObject@@6BCRefCountTest@@@
CONST	SEGMENT
??_7CAc97MediaObject@@6BCRefCountTest@@@ DD FLAT:??_ECAc97MediaObject@@W7AEPAXI@Z ; CAc97MediaObject::`vftable'
	DD	FLAT:?AddRef@CAc97MediaObject@@WM@AGKXZ
	DD	FLAT:?Release@CAc97MediaObject@@WM@AGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CAc97MediaObject@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAc97MediaObject@@QAE@XZ PROC NEAR			; CAc97MediaObject::CAc97MediaObject, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XAc97MediaObject@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0?$CValidObject@$0EBEDDJDH@@@QAE@XZ ; CValidObject<1094924599>::CValidObject<1094924599>
  0001a	6a 01		 push	 1
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00022	e8 00 00 00 00	 call	 ??0CRefCountTest@@QAE@K@Z ; CRefCountTest::CRefCountTest
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CAc97MediaObject@@6BXAc97MediaObject@@@
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET FLAT:??_7CAc97MediaObject@@6B?$CValidObject@$0EBEDDJDH@@@@
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], OFFSET FLAT:??_7CAc97MediaObject@@6BCRefCountTest@@@

; 193  :     DPF_ENTER();
; 194  : 
; 195  :     InitializeListHead(&m_lstPending);

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 c0 18	 add	 eax, 24			; 00000018H
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00059	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 196  :     InitializeListHead(&m_lstFree);

  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	83 c2 20	 add	 edx, 32			; 00000020H
  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00071	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 197  : 
; 198  :     DPF_LEAVE_VOID();
; 199  : }

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??0CAc97MediaObject@@QAE@XZ ENDP			; CAc97MediaObject::CAc97MediaObject
DSOUND	ENDS
PUBLIC	?AddRef@CRefCountTest@@UAGKXZ			; CRefCountTest::AddRef
PUBLIC	?Release@CRefCountTest@@UAGKXZ			; CRefCountTest::Release
PUBLIC	??_7CRefCountTest@@6B@				; CRefCountTest::`vftable'
PUBLIC	??_GCRefCountTest@@UAEPAXI@Z			; CRefCountTest::`scalar deleting destructor'
EXTRN	??_ECRefCountTest@@UAEPAXI@Z:NEAR		; CRefCountTest::`vector deleting destructor'
;	COMDAT ??_7CRefCountTest@@6B@
; File c:\xbox\private\windows\directx\dsound\initlib\refcount.h
CONST	SEGMENT
??_7CRefCountTest@@6B@ DD FLAT:??_ECRefCountTest@@UAEPAXI@Z ; CRefCountTest::`vftable'
	DD	FLAT:?AddRef@CRefCountTest@@UAGKXZ
	DD	FLAT:?Release@CRefCountTest@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCountTest@@QAE@K@Z
DSOUND	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCountTest@@QAE@K@Z PROC NEAR			; CRefCountTest::CRefCountTest, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCountTest@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 36   : }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCountTest@@QAE@K@Z ENDP				; CRefCountTest::CRefCountTest
DSOUND	ENDS
PUBLIC	??1CRefCountTest@@UAE@XZ			; CRefCountTest::~CRefCountTest
; Function compile flags: /Odt
;	COMDAT ??_GCRefCountTest@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCountTest@@UAEPAXI@Z PROC NEAR			; CRefCountTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCountTest@@UAE@XZ ; CRefCountTest::~CRefCountTest
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L29812
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L29812:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCountTest@@UAEPAXI@Z ENDP			; CRefCountTest::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	_DirectSoundTestTrackingMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 180  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  :     DirectSoundTestTrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _DirectSoundTestTrackingMemFree@4

; 182  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
EXTRN	_DwDbgAssert:NEAR
;	COMDAT ??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\initlib\refcount.h
DSOUND_RD	SEGMENT
??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CRefCountTest@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CRefCountTest@@UAE@XZ PROC NEAR			; CRefCountTest::~CRefCountTest, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCountTest@@6B@

; 40   :     ASSERT(!m_dwRefCount);

  00010	6a 28		 push	 40			; 00000028H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 _DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 41   : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCountTest@@UAE@XZ ENDP				; CRefCountTest::~CRefCountTest
DSOUND	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCountTest@@UAGKXZ PROC NEAR			; CRefCountTest::AddRef, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   :     ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2d		 push	 45			; 0000002dH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 _DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 46   :     return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 47   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCountTest@@UAGKXZ ENDP			; CRefCountTest::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T32757 = -8
$T32756 = -4
_this$ = 8
?Release@CRefCountTest@@UAGKXZ PROC NEAR		; CRefCountTest::Release, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 51   :     ASSERT(m_dwRefCount);

  00006	6a 33		 push	 51			; 00000033H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 52   : 
; 53   :     if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L29829

; 54   :     {
; 55   :         if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L29829

; 56   :         {
; 57   :             delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T32757[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T32757[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T32756[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T32756[ebp], 0
  00058	74 11		 je	 SHORT $L32758
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T32756[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T32756[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L32759
$L32758:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L32759:

; 58   :             return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L29827
$L29829:

; 59   :         }
; 60   :     }
; 61   : 
; 62   :     return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L29827:

; 63   : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCountTest@@UAGKXZ ENDP			; CRefCountTest::Release
DSOUND	ENDS
PUBLIC	??_C@_07CNKCBOKB@TESTSND?$AA@			; `string'
PUBLIC	??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@ ; `string'
PUBLIC	?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject
PUBLIC	??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@ ; `string'
EXTRN	_DwDbgSetContext:NEAR
EXTRN	_DwDbgPrint:NEAR
EXTRN	_g_fDirectSoundTestInFinalRelease:DWORD
;	COMDAT ??_C@_07CNKCBOKB@TESTSND?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
DSOUND_RD	SEGMENT
??_C@_07CNKCBOKB@TESTSND?$AA@ DB 'TESTSND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT
??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@ DB 'DirectSound'
	DB	' is in the final stages of shutting down.  No more API calls '
	DB	'are allowed.', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@ DB 'CAc97MediaObject::'
	DB	'AddRef', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CAc97MediaObject@@UAGKXZ
DSOUND	SEGMENT
$T32764 = -12
$T32763 = -8
___AutoLockTest$ = -4
_this$ = 8
?AddRef@CAc97MediaObject@@UAGKXZ PROC NEAR		; CAc97MediaObject::AddRef, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 86   :     _ENTER_EXTERNAL_METHOD("CAc97MediaObject::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  00015	74 3b		 je	 SHORT $L32153
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0001c	6a 00		 push	 0
  0001e	6a 56		 push	 86			; 00000056H
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00025	6a 03		 push	 3
  00027	6a 09		 push	 9
  00029	e8 00 00 00 00	 call	 _DwDbgSetContext
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00036	e8 00 00 00 00	 call	 _DwDbgPrint
  0003b	83 c4 04	 add	 esp, 4
  0003e	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T32763[ebp], -2147467259 ; 80004005H
  00045	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00048	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  0004d	8b 45 f8	 mov	 eax, DWORD PTR $T32763[ebp]
  00050	eb 31		 jmp	 SHORT $L32151
$L32153:
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
  00057	6a 56		 push	 86			; 00000056H
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 04	 add	 ecx, 4
  00064	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 87   :     return CRefCountTest::AddRef();

  00069	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?AddRef@CRefCountTest@@UAGKXZ ; CRefCountTest::AddRef
  00075	89 45 f4	 mov	 DWORD PTR $T32764[ebp], eax
  00078	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0007b	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00080	8b 45 f4	 mov	 eax, DWORD PTR $T32764[ebp]
$L32151:

; 88   : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?AddRef@CAc97MediaObject@@UAGKXZ ENDP			; CAc97MediaObject::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@ ; `string'
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@ DB 'CAc97MediaObject:'
	DB	':Release', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CAc97MediaObject@@UAGKXZ
DSOUND	SEGMENT
$T32769 = -12
$T32768 = -8
___AutoLockTest$ = -4
_this$ = 8
?Release@CAc97MediaObject@@UAGKXZ PROC NEAR		; CAc97MediaObject::Release, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 92   :     _ENTER_EXTERNAL_METHOD("CAc97MediaObject::Release");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  00015	74 3b		 je	 SHORT $L32164
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0001c	6a 00		 push	 0
  0001e	6a 5c		 push	 92			; 0000005cH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00025	6a 03		 push	 3
  00027	6a 09		 push	 9
  00029	e8 00 00 00 00	 call	 _DwDbgSetContext
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00036	e8 00 00 00 00	 call	 _DwDbgPrint
  0003b	83 c4 04	 add	 esp, 4
  0003e	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T32768[ebp], -2147467259 ; 80004005H
  00045	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00048	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  0004d	8b 45 f8	 mov	 eax, DWORD PTR $T32768[ebp]
  00050	eb 31		 jmp	 SHORT $L32162
$L32164:
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
  00057	6a 5c		 push	 92			; 0000005cH
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 04	 add	 ecx, 4
  00064	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 93   :     return CRefCountTest::Release();

  00069	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?Release@CRefCountTest@@UAGKXZ ; CRefCountTest::Release
  00075	89 45 f4	 mov	 DWORD PTR $T32769[ebp], eax
  00078	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0007b	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00080	8b 45 f4	 mov	 eax, DWORD PTR $T32769[ebp]
$L32162:

; 94   : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
?Release@CAc97MediaObject@@UAGKXZ ENDP			; CAc97MediaObject::Release
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Discontinuity@CAc97MediaObject@@UAGJXZ
DSOUND	SEGMENT
_this$ = 8
?Discontinuity@CAc97MediaObject@@UAGJXZ PROC NEAR	; CAc97MediaObject::Discontinuity, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   :     return DS_OK;

  00003	33 c0		 xor	 eax, eax

; 99   : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
?Discontinuity@CAc97MediaObject@@UAGJXZ ENDP		; CAc97MediaObject::Discontinuity
DSOUND	ENDS
PUBLIC	??1CAc97MediaObject@@UAE@XZ			; CAc97MediaObject::~CAc97MediaObject
; Function compile flags: /Odt
;	COMDAT ??_GCAc97MediaObject@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCAc97MediaObject@@UAEPAXI@Z PROC NEAR		; CAc97MediaObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CAc97MediaObject@@UAE@XZ ; CAc97MediaObject::~CAc97MediaObject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0f		 je	 SHORT $L32209
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 e9 04	 sub	 ecx, 4
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$L32209:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 e8 04	 sub	 eax, 4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCAc97MediaObject@@UAEPAXI@Z ENDP			; CAc97MediaObject::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??0XMediaObject@@QAE@XZ				; XMediaObject::XMediaObject
; Function compile flags: /Odt
;	COMDAT ??0XAc97MediaObject@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0XAc97MediaObject@@QAE@XZ PROC NEAR			; XAc97MediaObject::XAc97MediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XMediaObject@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0XAc97MediaObject@@QAE@XZ ENDP			; XAc97MediaObject::XAc97MediaObject
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0XMediaObject@@QAE@XZ PROC NEAR			; XMediaObject::XMediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XMediaObject@@QAE@XZ ENDP				; XMediaObject::XMediaObject
DSOUND	ENDS
PUBLIC	??1?$CValidObject@$0EBEDDJDH@@@UAE@XZ		; CValidObject<1094924599>::~CValidObject<1094924599>
PUBLIC	??_C@_0BD@JCFGJJGP@m_dwGlobalRefCount?$AA@	; `string'
PUBLIC	??_GCAc97Device@@QAEPAXI@Z			; CAc97Device::`scalar deleting destructor'
PUBLIC	?Release@CAc97Channel@@QAEXXZ			; CAc97Channel::Release
;	COMDAT ??_C@_0BD@JCFGJJGP@m_dwGlobalRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@JCFGJJGP@m_dwGlobalRefCount?$AA@ DB 'm_dwGlobalRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CAc97MediaObject@@UAE@XZ
DSOUND	SEGMENT
tv73 = -24
tv79 = -20
tv148 = -16
_this$ = -12
$T32790 = -8
$T32789 = -4
??1CAc97MediaObject@@UAE@XZ PROC NEAR			; CAc97MediaObject::~CAc97MediaObject, COMDAT
; _this$ = ecx

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], OFFSET FLAT:??_7CAc97MediaObject@@6BXAc97MediaObject@@@
  00013	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CAc97MediaObject@@6B?$CValidObject@$0EBEDDJDH@@@@
  0001c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CAc97MediaObject@@6BCRefCountTest@@@

; 225  :     DPF_ENTER();
; 226  : 
; 227  :     //
; 228  :     // Flush any remaining packets
; 229  :     //
; 230  : 
; 231  :     Flush();

  00026	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 e8 04	 sub	 eax, 4
  0002c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00032	50		 push	 eax
  00033	ff 52 18	 call	 DWORD PTR [edx+24]

; 232  : 
; 233  :     //
; 234  :     // Free the channel
; 235  :     //
; 236  : 
; 237  :     RELEASE(m_pChannel);

  00036	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0003d	74 15		 je	 SHORT $L32218
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00045	e8 00 00 00 00	 call	 ?Release@CAc97Channel@@QAEXXZ ; CAc97Channel::Release
  0004a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
$L32218:

; 238  : 
; 239  :     //
; 240  :     // Free resources
; 241  :     //
; 242  : 
; 243  :     MEMFREE(m_paPackets);

  00054	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00057	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0005b	74 16		 je	 SHORT $L32219
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 _DirectSoundTestTrackingMemFree@4
  00069	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$L32219:

; 244  : 
; 245  :     //
; 246  :     // Release the shared stuff
; 247  :     //
; 248  : 
; 249  :     ASSERT(m_dwGlobalRefCount);

  00073	68 f9 00 00 00	 push	 249			; 000000f9H
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@JCFGJJGP@m_dwGlobalRefCount?$AA@
  00082	33 c9		 xor	 ecx, ecx
  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_dwGlobalRefCount@CAc97MediaObject@@1KA, 0 ; CAc97MediaObject::m_dwGlobalRefCount
  0008b	0f 94 c1	 sete	 cl
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 _DwDbgAssert
  00094	83 c4 10	 add	 esp, 16			; 00000010H

; 250  :     
; 251  :     if(!--m_dwGlobalRefCount)

  00097	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_dwGlobalRefCount@CAc97MediaObject@@1KA ; CAc97MediaObject::m_dwGlobalRefCount
  0009d	83 ea 01	 sub	 edx, 1
  000a0	89 15 00 00 00
	00		 mov	 DWORD PTR ?m_dwGlobalRefCount@CAc97MediaObject@@1KA, edx ; CAc97MediaObject::m_dwGlobalRefCount
  000a6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_dwGlobalRefCount@CAc97MediaObject@@1KA, 0 ; CAc97MediaObject::m_dwGlobalRefCount
  000ad	75 3d		 jne	 SHORT $L32217

; 252  :     {
; 253  :         DELETE(m_pDevice);

  000af	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A, 0 ; CAc97MediaObject::m_pDevice
  000b6	74 34		 je	 SHORT $L32217
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A ; CAc97MediaObject::m_pDevice
  000bd	89 45 f8	 mov	 DWORD PTR $T32790[ebp], eax
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR $T32790[ebp]
  000c3	89 4d fc	 mov	 DWORD PTR $T32789[ebp], ecx
  000c6	83 7d fc 00	 cmp	 DWORD PTR $T32789[ebp], 0
  000ca	74 0f		 je	 SHORT $L32791
  000cc	6a 01		 push	 1
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR $T32789[ebp]
  000d1	e8 00 00 00 00	 call	 ??_GCAc97Device@@QAEPAXI@Z
  000d6	89 45 f0	 mov	 DWORD PTR tv148[ebp], eax
  000d9	eb 07		 jmp	 SHORT $L32792
$L32791:
  000db	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv148[ebp], 0
$L32792:
  000e2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A, 0 ; CAc97MediaObject::m_pDevice
$L32217:

; 254  :     }
; 255  : 
; 256  :     DPF_LEAVE_VOID();
; 257  : }

  000ec	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	83 ea 04	 sub	 edx, 4
  000f2	85 d2		 test	 edx, edx
  000f4	74 0b		 je	 SHORT $L32787
  000f6	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	83 c0 08	 add	 eax, 8
  000fc	89 45 ec	 mov	 DWORD PTR tv79[ebp], eax
  000ff	eb 07		 jmp	 SHORT $L32788
$L32787:
  00101	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$L32788:
  00108	8b 4d ec	 mov	 ecx, DWORD PTR tv79[ebp]
  0010b	e8 00 00 00 00	 call	 ??1CRefCountTest@@UAE@XZ ; CRefCountTest::~CRefCountTest
  00110	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	83 e9 04	 sub	 ecx, 4
  00116	85 c9		 test	 ecx, ecx
  00118	74 08		 je	 SHORT $L32785
  0011a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0011d	89 55 e8	 mov	 DWORD PTR tv73[ebp], edx
  00120	eb 07		 jmp	 SHORT $L32786
$L32785:
  00122	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L32786:
  00129	8b 4d e8	 mov	 ecx, DWORD PTR tv73[ebp]
  0012c	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EBEDDJDH@@@UAE@XZ ; CValidObject<1094924599>::~CValidObject<1094924599>
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
??1CAc97MediaObject@@UAE@XZ ENDP			; CAc97MediaObject::~CAc97MediaObject
DSOUND	ENDS
PUBLIC	?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z ; CAc97Device::ReleaseChannel
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\ac97.h
;	COMDAT ?Release@CAc97Channel@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Release@CAc97Channel@@QAEXXZ PROC NEAR			; CAc97Channel::Release, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 414  :     m_pDevice->ReleaseChannel(this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00011	e8 00 00 00 00	 call	 ?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z ; CAc97Device::ReleaseChannel

; 415  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Release@CAc97Channel@@QAEXXZ ENDP			; CAc97Channel::Release
DSOUND	ENDS
EXTRN	?ReleaseChannel@CAc97Device@@QAEXW4AC97CHANNELTYPE@@@Z:NEAR ; CAc97Device::ReleaseChannel
; Function compile flags: /Odt
;	COMDAT ?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z
DSOUND	SEGMENT
_this$ = -4
_pChannel$ = 8
?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z PROC NEAR ; CAc97Device::ReleaseChannel, COMDAT
; _this$ = ecx

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 409  :     ReleaseChannel(pChannel->m_nChannelType);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pChannel$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?ReleaseChannel@CAc97Device@@QAEXW4AC97CHANNELTYPE@@@Z ; CAc97Device::ReleaseChannel

; 410  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z ENDP ; CAc97Device::ReleaseChannel
DSOUND	ENDS
EXTRN	??1CAc97Device@@QAE@XZ:NEAR			; CAc97Device::~CAc97Device
; Function compile flags: /Odt
;	COMDAT ??_GCAc97Device@@QAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCAc97Device@@QAEPAXI@Z PROC NEAR			; CAc97Device::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CAc97Device@@QAE@XZ	; CAc97Device::~CAc97Device
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L32228
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L32228:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCAc97Device@@QAEPAXI@Z ENDP				; CAc97Device::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	?InterruptCallback@CAc97MediaObject@@CGXPAX@Z	; CAc97MediaObject::InterruptCallback
PUBLIC	??_C@_0L@HMBCAGAN@?$CBm_pDevice?$AA@		; `string'
PUBLIC	??_C@_0M@GJIBIBNP@CAc97Device?$AA@		; `string'
PUBLIC	??_C@_09LDANIPIA@m_pDevice?$AA@			; `string'
PUBLIC	??_C@_0BF@POLJCOGF@Invalid?5channel?5type?$AA@	; `string'
PUBLIC	??_C@_0BN@OLKKOBLG@CAc97MediaObject?3?3Initialize?$AA@ ; `string'
PUBLIC	??_C@_0BF@LBECNKHM@Channel?5already?5open?$AA@	; `string'
PUBLIC	??_C@_0L@OHLIACNC@AC97PACKET?$AA@		; `string'
PUBLIC	?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z	; InsertTailListUninit
EXTRN	??0CAc97Device@@QAE@XZ:NEAR			; CAc97Device::CAc97Device
EXTRN	?Initialize@CAc97Device@@QAEJK@Z:NEAR		; CAc97Device::Initialize
EXTRN	?CreateChannel@CAc97Device@@QAEJW4AC97CHANNELTYPE@@PAPAVCAc97Channel@@@Z:NEAR ; CAc97Device::CreateChannel
EXTRN	?Initialize@CAc97Channel@@QAEJKP6GXPAX@Z0@Z:NEAR ; CAc97Channel::Initialize
;	COMDAT ??_C@_0L@HMBCAGAN@?$CBm_pDevice?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
DSOUND_RD	SEGMENT
??_C@_0L@HMBCAGAN@?$CBm_pDevice?$AA@ DB '!m_pDevice', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@GJIBIBNP@CAc97Device?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@GJIBIBNP@CAc97Device?$AA@ DB 'CAc97Device', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_09LDANIPIA@m_pDevice?$AA@
DSOUND_RD	SEGMENT
??_C@_09LDANIPIA@m_pDevice?$AA@ DB 'm_pDevice', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@POLJCOGF@Invalid?5channel?5type?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@POLJCOGF@Invalid?5channel?5type?$AA@ DB 'Invalid channel type', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@OLKKOBLG@CAc97MediaObject?3?3Initialize?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@OLKKOBLG@CAc97MediaObject?3?3Initialize?$AA@ DB 'CAc97MediaObje'
	DB	'ct::Initialize', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@LBECNKHM@Channel?5already?5open?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@LBECNKHM@Channel?5already?5open?$AA@ DB 'Channel already open', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@OHLIACNC@AC97PACKET?$AA@
DSOUND_RD	SEGMENT
??_C@_0L@OHLIACNC@AC97PACKET?$AA@ DB 'AC97PACKET', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CAc97MediaObject@@UAGJKP6GXPAX0K@Z0@Z
DSOUND	SEGMENT
tv128 = -24
tv82 = -20
$T32805 = -16
_hr$ = -12
_nChannelType$ = -8
_i$ = -4
_this$ = 8
_dwChannel$ = 12
_pfnCallback$ = 16
_pvCallbackContext$ = 20
?Initialize@CAc97MediaObject@@UAGJKP6GXPAX0K@Z0@Z PROC NEAR ; CAc97MediaObject::Initialize, COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 286  :     HRESULT                     hr              = DS_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 287  :     AC97CHANNELTYPE             nChannelType;
; 288  :     DWORD                       i;
; 289  :     
; 290  :     DPF_ENTER();
; 291  : 
; 292  :     m_pfnCallback = pfnCallback;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 4d 10	 mov	 ecx, DWORD PTR _pfnCallback$[ebp]
  00013	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 293  :     m_pvCallbackContext = pvCallbackContext;

  00016	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 14	 mov	 eax, DWORD PTR _pvCallbackContext$[ebp]
  0001c	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 294  : 
; 295  :     //
; 296  :     // Set up data shared between all instances of the AC97 XMO
; 297  :     //
; 298  : 
; 299  :     if(!m_dwGlobalRefCount++)

  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwGlobalRefCount@CAc97MediaObject@@1KA ; CAc97MediaObject::m_dwGlobalRefCount
  00025	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_dwGlobalRefCount@CAc97MediaObject@@1KA ; CAc97MediaObject::m_dwGlobalRefCount
  0002b	83 c2 01	 add	 edx, 1
  0002e	89 15 00 00 00
	00		 mov	 DWORD PTR ?m_dwGlobalRefCount@CAc97MediaObject@@1KA, edx ; CAc97MediaObject::m_dwGlobalRefCount
  00034	85 c9		 test	 ecx, ecx
  00036	0f 85 91 00 00
	00		 jne	 $L32239

; 300  :     {
; 301  :         ASSERT(!m_pDevice);

  0003c	68 2d 01 00 00	 push	 301			; 0000012dH
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HMBCAGAN@?$CBm_pDevice?$AA@
  0004b	33 c0		 xor	 eax, eax
  0004d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A, 0 ; CAc97MediaObject::m_pDevice
  00054	0f 95 c0	 setne	 al
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _DwDbgAssert
  0005d	83 c4 10	 add	 esp, 16			; 00000010H

; 302  : 
; 303  :         hr = HRFROMP(m_pDevice = NEW(CAc97Device));

  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@GJIBIBNP@CAc97Device?$AA@
  00065	68 2f 01 00 00	 push	 303			; 0000012fH
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0006f	6a 3c		 push	 60			; 0000003cH
  00071	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00076	83 c4 10	 add	 esp, 16			; 00000010H
  00079	89 45 f0	 mov	 DWORD PTR $T32805[ebp], eax
  0007c	83 7d f0 00	 cmp	 DWORD PTR $T32805[ebp], 0
  00080	74 0d		 je	 SHORT $L32806
  00082	8b 4d f0	 mov	 ecx, DWORD PTR $T32805[ebp]
  00085	e8 00 00 00 00	 call	 ??0CAc97Device@@QAE@XZ	; CAc97Device::CAc97Device
  0008a	89 45 ec	 mov	 DWORD PTR tv82[ebp], eax
  0008d	eb 07		 jmp	 SHORT $L32807
$L32806:
  0008f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L32807:
  00096	8b 4d ec	 mov	 ecx, DWORD PTR tv82[ebp]
  00099	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A, ecx ; CAc97MediaObject::m_pDevice
  0009f	33 d2		 xor	 edx, edx
  000a1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A, 0 ; CAc97MediaObject::m_pDevice
  000a8	0f 95 c2	 setne	 dl
  000ab	4a		 dec	 edx
  000ac	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  000b2	89 55 f4	 mov	 DWORD PTR _hr$[ebp], edx

; 304  : 
; 305  :         if(SUCCEEDED(hr))

  000b5	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b9	7c 10		 jl	 SHORT $L32247

; 306  :         {
; 307  :             hr = m_pDevice->Initialize();

  000bb	6a 00		 push	 0
  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A ; CAc97MediaObject::m_pDevice
  000c3	e8 00 00 00 00	 call	 ?Initialize@CAc97Device@@QAEJK@Z ; CAc97Device::Initialize
  000c8	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L32247:

; 308  :         }
; 309  :     }
; 310  :     else

  000cb	eb 24		 jmp	 SHORT $L32248
$L32239:

; 311  :     {
; 312  :         ASSERT(m_pDevice);

  000cd	68 38 01 00 00	 push	 312			; 00000138H
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LDANIPIA@m_pDevice?$AA@
  000dc	33 c0		 xor	 eax, eax
  000de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A, 0 ; CAc97MediaObject::m_pDevice
  000e5	0f 94 c0	 sete	 al
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 _DwDbgAssert
  000ee	83 c4 10	 add	 esp, 16			; 00000010H
$L32248:

; 313  :     }
; 314  : 
; 315  :     //
; 316  :     // Create the audio channel
; 317  :     //
; 318  : 
; 319  :     if(SUCCEEDED(hr))

  000f1	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f5	7c 3f		 jl	 SHORT $L32251

; 320  :     {
; 321  :         switch(dwChannel)
; 322  :         {

  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _dwChannel$[ebp]
  000fa	89 4d e8	 mov	 DWORD PTR tv128[ebp], ecx
  000fd	83 7d e8 00	 cmp	 DWORD PTR tv128[ebp], 0
  00101	74 08		 je	 SHORT $L32256
  00103	83 7d e8 01	 cmp	 DWORD PTR tv128[ebp], 1
  00107	74 0b		 je	 SHORT $L32257
  00109	eb 12		 jmp	 SHORT $L32258
$L32256:

; 323  :             case DSAC97_CHANNEL_ANALOG:
; 324  :                 nChannelType = AC97_CHANNELTYPE_ANALOG;

  0010b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nChannelType$[ebp], 0

; 325  :                 break;

  00112	eb 22		 jmp	 SHORT $L32251
$L32257:

; 326  : 
; 327  :             case DSAC97_CHANNEL_DIGITAL:
; 328  :                 nChannelType = AC97_CHANNELTYPE_DIGITAL;

  00114	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _nChannelType$[ebp], 1

; 329  :                 break;

  0011b	eb 19		 jmp	 SHORT $L32251
$L32258:

; 330  : 
; 331  :             default:
; 332  :                 ASSERTMSG("Invalid channel type");

  0011d	68 4c 01 00 00	 push	 332			; 0000014cH
  00122	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@POLJCOGF@Invalid?5channel?5type?$AA@
  0012c	6a 01		 push	 1
  0012e	e8 00 00 00 00	 call	 _DwDbgAssert
  00133	83 c4 10	 add	 esp, 16			; 00000010H
$L32251:

; 333  :                 break;
; 334  :         }
; 335  :     }
; 336  : 
; 337  :     if(SUCCEEDED(hr))

  00136	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0013a	7c 42		 jl	 SHORT $L32261

; 338  :     {
; 339  :         if(m_pDevice->m_apChannels[nChannelType])

  0013c	8b 55 f8	 mov	 edx, DWORD PTR _nChannelType$[ebp]
  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A ; CAc97MediaObject::m_pDevice
  00144	83 3c 90 00	 cmp	 DWORD PTR [eax+edx*4], 0
  00148	74 34		 je	 SHORT $L32261

; 340  :         {
; 341  :             DPF_ERROR("Channel already open");

  0014a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0014f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@OLKKOBLG@CAc97MediaObject?3?3Initialize?$AA@
  00154	68 55 01 00 00	 push	 341			; 00000155H
  00159	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0015e	6a 01		 push	 1
  00160	6a 09		 push	 9
  00162	e8 00 00 00 00	 call	 _DwDbgSetContext
  00167	83 c4 18	 add	 esp, 24			; 00000018H
  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@LBECNKHM@Channel?5already?5open?$AA@
  0016f	e8 00 00 00 00	 call	 _DwDbgPrint
  00174	83 c4 04	 add	 esp, 4

; 342  :             hr = DSERR_INVALIDCALL;

  00177	c7 45 f4 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L32261:

; 343  :         }
; 344  :     }
; 345  : 
; 346  :     if(SUCCEEDED(hr))

  0017e	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00182	7c 19		 jl	 SHORT $L32270

; 347  :     {
; 348  :         hr = m_pDevice->CreateChannel(nChannelType, &m_pChannel);

  00184	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	83 c1 14	 add	 ecx, 20			; 00000014H
  0018a	51		 push	 ecx
  0018b	8b 55 f8	 mov	 edx, DWORD PTR _nChannelType$[ebp]
  0018e	52		 push	 edx
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pDevice@CAc97MediaObject@@1PAVCAc97Device@@A ; CAc97MediaObject::m_pDevice
  00195	e8 00 00 00 00	 call	 ?CreateChannel@CAc97Device@@QAEJW4AC97CHANNELTYPE@@PAPAVCAc97Channel@@@Z ; CAc97Device::CreateChannel
  0019a	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L32270:

; 349  :     }
; 350  : 
; 351  :     if(SUCCEEDED(hr))

  0019d	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001a1	7c 19		 jl	 SHORT $L32272

; 352  :     {
; 353  :         hr = m_pChannel->Initialize(AC97CHANNEL_OBJECTF_STREAM, InterruptCallback, this);

  001a3	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001a6	50		 push	 eax
  001a7	68 00 00 00 00	 push	 OFFSET FLAT:?InterruptCallback@CAc97MediaObject@@CGXPAX@Z ; CAc97MediaObject::InterruptCallback
  001ac	6a 01		 push	 1
  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001b1	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  001b4	e8 00 00 00 00	 call	 ?Initialize@CAc97Channel@@QAEJKP6GXPAX@Z0@Z ; CAc97Channel::Initialize
  001b9	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L32272:

; 354  :     }
; 355  : 
; 356  :     //
; 357  :     // Allocate packet data
; 358  :     //
; 359  : 
; 360  :     if(SUCCEEDED(hr))

  001bc	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c0	7c 3c		 jl	 SHORT $L32274

; 361  :     {
; 362  :         hr = HRFROMP(m_paPackets = MEMALLOC(AC97PACKET, DSAC97_MAX_ATTACHED_PACKETS));

  001c2	6a 01		 push	 1
  001c4	68 e0 03 00 00	 push	 992			; 000003e0H
  001c9	68 44 53 64 61	 push	 1633964868		; 61645344H
  001ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@OHLIACNC@AC97PACKET?$AA@
  001d3	68 6a 01 00 00	 push	 362			; 0000016aH
  001d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  001dd	e8 00 00 00 00	 call	 _DirectSoundTestTrackingMemAlloc@24
  001e2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001e5	89 42 30	 mov	 DWORD PTR [edx+48], eax
  001e8	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001eb	33 c9		 xor	 ecx, ecx
  001ed	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  001f1	0f 95 c1	 setne	 cl
  001f4	49		 dec	 ecx
  001f5	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  001fb	89 4d f4	 mov	 DWORD PTR _hr$[ebp], ecx
$L32274:

; 363  :     }
; 364  : 
; 365  :     if(SUCCEEDED(hr))

  001fe	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00202	7c 33		 jl	 SHORT $L32281

; 366  :     {
; 367  :         for(i = 0; i < DSAC97_MAX_ATTACHED_PACKETS; i++)

  00204	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0020b	eb 09		 jmp	 SHORT $L32282
$L32283:
  0020d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00210	83 c2 01	 add	 edx, 1
  00213	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L32282:
  00216	83 7d fc 1f	 cmp	 DWORD PTR _i$[ebp], 31	; 0000001fH
  0021a	73 1b		 jae	 SHORT $L32281

; 368  :         {
; 369  :             InsertTailListUninit(&m_lstFree, &m_paPackets[i].leListEntry);

  0021c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0021f	c1 e0 05	 shl	 eax, 5
  00222	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00225	03 41 30	 add	 eax, DWORD PTR [ecx+48]
  00228	50		 push	 eax
  00229	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0022c	83 c2 20	 add	 edx, 32			; 00000020H
  0022f	52		 push	 edx
  00230	e8 00 00 00 00	 call	 ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailListUninit

; 370  :         }

  00235	eb d6		 jmp	 SHORT $L32283
$L32281:

; 371  :     }
; 372  : 
; 373  :     //
; 374  :     // Set the initial status
; 375  :     //
; 376  : 
; 377  :     if(SUCCEEDED(hr))

  00237	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0023b	7c 0a		 jl	 SHORT $L32286

; 378  :     {
; 379  :         m_dwStatus = XMO_STATUSF_ACCEPT_INPUT_DATA;

  0023d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00240	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [eax+52], 1
$L32286:

; 380  :     }
; 381  : 
; 382  :     DPF_LEAVE_HRESULT(hr);
; 383  : 
; 384  :     return hr;

  00247	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 385  : }

  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c2 10 00	 ret	 16			; 00000010H
?Initialize@CAc97MediaObject@@UAGJKP6GXPAX0K@Z0@Z ENDP	; CAc97MediaObject::Initialize
DSOUND	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\initlib\ntlist.h
DSOUND_RD	SEGMENT
??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailListUninit, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 72		 push	 114			; 00000072H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 115  : 
; 116  :     Entry->Flink = ListHead;

  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00018	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0001b	89 11		 mov	 DWORD PTR [ecx], edx

; 117  :     Entry->Blink = ListHead->Blink;

  0001d	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 118  :     
; 119  :     Entry->Flink->Blink = Entry;

  00029	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00031	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 120  :     Entry->Blink->Flink = Entry;

  00034	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0003d	89 11		 mov	 DWORD PTR [ecx], edx

; 121  : 
; 122  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  0003f	6a 7a		 push	 122			; 0000007aH
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
  00046	6a 01		 push	 1
  00048	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 123  : }    

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; InsertTailListUninit
DSOUND	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L29503

; 35   :     {
; 36   :         DwDbgAssert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 _DwDbgAssert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 37   :     }
; 38   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L29502
$L29503:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L29507
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L29506
$L29507:

; 39   :     {
; 40   :         DwDbgAssert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 _DwDbgAssert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 41   :     }
; 42   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L29502
$L29506:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L29511
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L29510
$L29511:

; 43   :     {
; 44   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L29513
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L29512
$L29513:

; 45   :         {
; 46   :             DwDbgAssert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 _DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L29512:

; 47   :         }
; 48   :     }
; 49   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L29502
$L29510:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L29516

; 50   :     {
; 51   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L29517

; 52   :         {
; 53   :             DwDbgAssert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 _DwDbgAssert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L29517:

; 54   :         }
; 55   :     }
; 56   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L29502
$L29516:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L29502

; 57   :     {
; 58   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L29502

; 59   :         {
; 60   :             DwDbgAssert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 _DwDbgAssert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L29502:

; 61   :         }
; 62   :     }
; 63   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
DSOUND	ENDS
PUBLIC	?CompletePendingPackets@CAc97MediaObject@@IAEXXZ ; CAc97MediaObject::CompletePendingPackets
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
;	COMDAT ?InterruptCallback@CAc97MediaObject@@CGXPAX@Z
DSOUND	SEGMENT
_pvContext$ = 8
?InterruptCallback@CAc97MediaObject@@CGXPAX@Z PROC NEAR	; CAc97MediaObject::InterruptCallback, COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  :     ((CAc97MediaObject *)pvContext)->CompletePendingPackets();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pvContext$[ebp]
  00006	e8 00 00 00 00	 call	 ?CompletePendingPackets@CAc97MediaObject@@IAEXXZ ; CAc97MediaObject::CompletePendingPackets

; 104  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?InterruptCallback@CAc97MediaObject@@CGXPAX@Z ENDP	; CAc97MediaObject::InterruptCallback
DSOUND	ENDS
PUBLIC	??_C@_0BK@INLCJDIG@CAc97MediaObject?3?3GetInfo?$AA@ ; `string'
PUBLIC	??_C@_0BN@KFMMHEBM@XMO?5info?5buffer?5not?5supplied?$AA@ ; `string'
EXTRN	?m_wfxFormat@CAc97Device@@2UtWAVEFORMATEX@@B:BYTE ; CAc97Device::m_wfxFormat
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0BK@INLCJDIG@CAc97MediaObject?3?3GetInfo?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@INLCJDIG@CAc97MediaObject?3?3GetInfo?$AA@ DB 'CAc97MediaObject:'
	DB	':GetInfo', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@KFMMHEBM@XMO?5info?5buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@KFMMHEBM@XMO?5info?5buffer?5not?5supplied?$AA@ DB 'XMO info buf'
	DB	'fer not supplied', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetInfo@CAc97MediaObject@@UAGJPAU_XMEDIAINFO@@@Z
DSOUND	SEGMENT
$T32821 = -12
$T32820 = -8
___AutoLockTest$ = -4
_this$ = 8
_pInfo$ = 12
?GetInfo@CAc97MediaObject@@UAGJPAU_XMEDIAINFO@@@Z PROC NEAR ; CAc97MediaObject::GetInfo, COMDAT

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 412  :     DPF_ENTER();
; 413  :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  00015	74 44		 je	 SHORT $L32292
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@INLCJDIG@CAc97MediaObject?3?3GetInfo?$AA@
  00021	68 9d 01 00 00	 push	 413			; 0000019dH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 _DwDbgPrint
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T32820[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T32820[ebp]
  00056	e9 85 00 00 00	 jmp	 $L32290
$L32292:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@INLCJDIG@CAc97MediaObject?3?3GetInfo?$AA@
  00060	68 9d 01 00 00	 push	 413			; 0000019dH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 04	 add	 ecx, 4
  00070	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 414  : 
; 415  : #ifdef VALIDATE_PARAMETERS
; 416  : 
; 417  :     if(!pInfo)

  00075	83 7d 0c 00	 cmp	 DWORD PTR _pInfo$[ebp], 0
  00079	75 2d		 jne	 SHORT $L32296

; 418  :     {
; 419  :         DPF_ERROR("XMO info buffer not supplied");

  0007b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@INLCJDIG@CAc97MediaObject?3?3GetInfo?$AA@
  00085	68 a3 01 00 00	 push	 419			; 000001a3H
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0008f	6a 01		 push	 1
  00091	6a 09		 push	 9
  00093	e8 00 00 00 00	 call	 _DwDbgSetContext
  00098	83 c4 18	 add	 esp, 24			; 00000018H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@KFMMHEBM@XMO?5info?5buffer?5not?5supplied?$AA@
  000a0	e8 00 00 00 00	 call	 _DwDbgPrint
  000a5	83 c4 04	 add	 esp, 4
$L32296:

; 420  :     }
; 421  : 
; 422  : #endif // VALIDATE_PARAMETERS
; 423  : 
; 424  :     ZeroMemory(pInfo, sizeof(*pInfo));

  000a8	6a 10		 push	 16			; 00000010H
  000aa	6a 00		 push	 0
  000ac	8b 45 0c	 mov	 eax, DWORD PTR _pInfo$[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _memset
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 425  : 
; 426  :     //
; 427  :     // Flags are easy
; 428  :     //
; 429  :     
; 430  :     pInfo->dwFlags = XMO_STREAMF_FIXED_SAMPLE_SIZE | XMO_STREAMF_INPUT_ASYNC;

  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  000bb	c7 01 05 00 00
	00		 mov	 DWORD PTR [ecx], 5

; 431  : 
; 432  :     //
; 433  :     // Input size is just sample-aligment, since that's the smallest amount of
; 434  :     // data we require to process.
; 435  :     //
; 436  : 
; 437  :     pInfo->dwInputSize = m_pDevice->m_wfxFormat.nBlockAlign;

  000c1	0f b7 15 0c 00
	00 00		 movzx	 edx, WORD PTR ?m_wfxFormat@CAc97Device@@2UtWAVEFORMATEX@@B+12
  000c8	8b 45 0c	 mov	 eax, DWORD PTR _pInfo$[ebp]
  000cb	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 438  : 
; 439  :     DPF_LEAVE_HRESULT(DS_OK);
; 440  : 
; 441  :     return DS_OK;

  000ce	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T32821[ebp], 0
  000d5	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  000d8	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  000dd	8b 45 f4	 mov	 eax, DWORD PTR $T32821[ebp]
$L32290:

; 442  : }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
?GetInfo@CAc97MediaObject@@UAGJPAU_XMEDIAINFO@@@Z ENDP	; CAc97MediaObject::GetInfo
DSOUND	ENDS
PUBLIC	?CompletePacket@CAc97MediaObject@@IAEXPAUAC97PACKET@@K@Z ; CAc97MediaObject::CompletePacket
PUBLIC	??_C@_0BI@OLMCMPIH@CAc97MediaObject?3?3Flush?$AA@ ; `string'
PUBLIC	?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z	; MoveEntryTailList
EXTRN	?Flush@CAc97Channel@@QAEXH@Z:NEAR		; CAc97Channel::Flush
;	COMDAT ??_C@_0BI@OLMCMPIH@CAc97MediaObject?3?3Flush?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@OLMCMPIH@CAc97MediaObject?3?3Flush?$AA@ DB 'CAc97MediaObject::F'
	DB	'lush', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Flush@CAc97MediaObject@@UAGJXZ
DSOUND	SEGMENT
$T32826 = -16
$T32825 = -12
_plePacket$ = -8
___AutoLockTest$ = -4
_this$ = 8
?Flush@CAc97MediaObject@@UAGJXZ PROC NEAR		; CAc97MediaObject::Flush, COMDAT

; 468  : {                                           

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 469  :     PLIST_ENTRY             plePacket;
; 470  :     
; 471  :     DPF_ENTER();
; 472  :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  00015	74 41		 je	 SHORT $L32306
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@OLMCMPIH@CAc97MediaObject?3?3Flush?$AA@
  00021	68 d8 01 00 00	 push	 472			; 000001d8H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 _DwDbgPrint
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T32825[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T32825[ebp]
  00056	eb 79		 jmp	 SHORT $L32303
$L32306:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@OLMCMPIH@CAc97MediaObject?3?3Flush?$AA@
  0005d	68 d8 01 00 00	 push	 472			; 000001d8H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 04	 add	 ecx, 4
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 473  : 
; 474  :     //
; 475  :     // Reset the channel
; 476  :     //
; 477  :     
; 478  :     if(m_pChannel)

  00072	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00079	74 0d		 je	 SHORT $L32312

; 479  :     {
; 480  :         m_pChannel->Flush();

  0007b	6a 01		 push	 1
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00083	e8 00 00 00 00	 call	 ?Flush@CAc97Channel@@QAEXH@Z ; CAc97Channel::Flush
$L32312:

; 481  :     }
; 482  : 
; 483  :     //
; 484  :     // Reset our internal packet list
; 485  :     //
; 486  : 
; 487  :     while((plePacket = m_lstPending.Flink) != &m_lstPending)

  00088	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0008e	89 45 f8	 mov	 DWORD PTR _plePacket$[ebp], eax
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	83 c1 18	 add	 ecx, 24			; 00000018H
  00097	39 4d f8	 cmp	 DWORD PTR _plePacket$[ebp], ecx
  0009a	74 23		 je	 SHORT $L32313

; 488  :     {
; 489  :         MoveEntryTailList(&m_lstFree, plePacket);

  0009c	8b 55 f8	 mov	 edx, DWORD PTR _plePacket$[ebp]
  0009f	52		 push	 edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	83 c0 20	 add	 eax, 32			; 00000020H
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveEntryTailList

; 490  :         
; 491  :         CompletePacket(CONTAINING_RECORD(plePacket, AC97PACKET, leListEntry), XMEDIAPACKET_STATUS_FLUSHED);

  000ac	68 04 40 00 80	 push	 -2147467260		; 80004004H
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _plePacket$[ebp]
  000b4	51		 push	 ecx
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?CompletePacket@CAc97MediaObject@@IAEXPAUAC97PACKET@@K@Z ; CAc97MediaObject::CompletePacket

; 492  :     }

  000bd	eb c9		 jmp	 SHORT $L32312
$L32313:

; 493  : 
; 494  :     DPF_LEAVE_HRESULT(DS_OK);
; 495  : 
; 496  :     return DS_OK;

  000bf	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T32826[ebp], 0
  000c6	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  000c9	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  000ce	8b 45 f0	 mov	 eax, DWORD PTR $T32826[ebp]
$L32303:

; 497  : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
?Flush@CAc97MediaObject@@UAGJXZ ENDP			; CAc97MediaObject::Flush
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\ntlist.h
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z PROC NEAR ; MoveEntryTailList, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 e9 00 00 00	 push	 233			; 000000e9H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 234  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00018	68 ea 00 00 00	 push	 234			; 000000eaH
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 00		 push	 0
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 235  : 
; 236  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 237  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 238  : 
; 239  :     Entry->Flink = ListHead;

  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0004e	89 11		 mov	 DWORD PTR [ecx], edx

; 240  :     Entry->Blink = ListHead->Blink;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00056	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00059	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 241  : 
; 242  :     Entry->Flink->Blink = Entry;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00064	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 243  :     Entry->Blink->Flink = Entry;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00070	89 11		 mov	 DWORD PTR [ecx], edx

; 244  : 
; 245  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00072	68 f5 00 00 00	 push	 245			; 000000f5H
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
  0007c	6a 01		 push	 1
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 246  : 
; 247  :     return Entry;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]

; 248  : }

  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ENDP	; MoveEntryTailList
DSOUND	ENDS
PUBLIC	??_C@_0BM@GCMBOPM@CAc97MediaObject?3?3GetStatus?$AA@ ; `string'
PUBLIC	??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@ ; `string'
;	COMDAT ??_C@_0BM@GCMBOPM@CAc97MediaObject?3?3GetStatus?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
DSOUND_RD	SEGMENT
??_C@_0BM@GCMBOPM@CAc97MediaObject?3?3GetStatus?$AA@ DB 'CAc97MediaObject'
	DB	'::GetStatus', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@ DB 'Status buffer n'
	DB	'ot supplied', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetStatus@CAc97MediaObject@@UAGJPAK@Z
DSOUND	SEGMENT
$T32834 = -12
$T32833 = -8
___AutoLockTest$ = -4
_this$ = 8
_pdwStatus$ = 12
?GetStatus@CAc97MediaObject@@UAGJPAK@Z PROC NEAR	; CAc97MediaObject::GetStatus, COMDAT

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 524  :     DPF_ENTER();
; 525  :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  00015	74 41		 je	 SHORT $L32326
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GCMBOPM@CAc97MediaObject?3?3GetStatus?$AA@
  00021	68 0d 02 00 00	 push	 525			; 0000020dH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 _DwDbgPrint
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T32833[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T32833[ebp]
  00056	eb 6a		 jmp	 SHORT $L32324
$L32326:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GCMBOPM@CAc97MediaObject?3?3GetStatus?$AA@
  0005d	68 0d 02 00 00	 push	 525			; 0000020dH
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 04	 add	 ecx, 4
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 526  : 
; 527  : #ifdef VALIDATE_PARAMETERS
; 528  : 
; 529  :     if(!pdwStatus)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _pdwStatus$[ebp], 0
  00076	75 2d		 jne	 SHORT $L32330

; 530  :     {
; 531  :         DPF_ERROR("Status buffer not supplied");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GCMBOPM@CAc97MediaObject?3?3GetStatus?$AA@
  00082	68 13 02 00 00	 push	 531			; 00000213H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 _DwDbgSetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@
  0009d	e8 00 00 00 00	 call	 _DwDbgPrint
  000a2	83 c4 04	 add	 esp, 4
$L32330:

; 532  :     }
; 533  : 
; 534  : #endif // VALIDATE_PARAMETERS
; 535  : 
; 536  :     *pdwStatus = m_dwStatus;

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000ae	89 10		 mov	 DWORD PTR [eax], edx

; 537  : 
; 538  :     DPF_LEAVE_HRESULT(DS_OK);
; 539  : 
; 540  :     return DS_OK;

  000b0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T32834[ebp], 0
  000b7	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  000ba	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  000bf	8b 45 f4	 mov	 eax, DWORD PTR $T32834[ebp]
$L32324:

; 541  : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
?GetStatus@CAc97MediaObject@@UAGJPAK@Z ENDP		; CAc97MediaObject::GetStatus
DSOUND	ENDS
PUBLIC	?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z	; XMOAcceptPacket
PUBLIC	??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@	; `string'
PUBLIC	??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@ ; `string'
PUBLIC	??_C@_0DF@CELPIAIP@Input?5buffers?5are?5restricted?5to?5@ ; `string'
PUBLIC	??_C@_0BM@KBHECPDM@AC97?5streams?5are?5input?5only?$AA@ ; `string'
PUBLIC	??_C@_0BA@IOLACHLJ@No?5free?5packets?$AA@	; `string'
PUBLIC	??_C@_0BD@NNABOLMD@Accepted?5packet?5?$CFx?$AA@	; `string'
PUBLIC	??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@ ; `string'
PUBLIC	??_C@_0FJ@GFMILJKF@Packet?5data?5submitted?5to?5the?5AC9@ ; `string'
PUBLIC	??_C@_0CM@IJBFJHGE@XMO_STATUSF_ACCEPT_INPUT_DATA?5?$DN?$DN@ ; `string'
PUBLIC	?AttachPacket@CAc97Channel@@QAEXPBXK@Z		; CAc97Channel::AttachPacket
PUBLIC	?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z	; MoveHeadTailList
PUBLIC	??0CIrql@@QAE@XZ				; CIrql::CIrql
PUBLIC	?Raise@CIrql@@QAEXXZ				; CIrql::Raise
PUBLIC	?Lower@CIrql@@QAEXXZ				; CIrql::Lower
EXTRN	?Run@CAc97Channel@@QAEXK@Z:NEAR			; CAc97Channel::Run
EXTRN	?Discontinuity@CAc97Channel@@QAEXXZ:NEAR	; CAc97Channel::Discontinuity
EXTRN	__imp__MmLockUnlockBufferPages@12:NEAR
EXTRN	__imp__MmGetPhysicalAddress@4:NEAR
;	COMDAT ??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@ DB 'CAc97MediaObject:'
	DB	':Process', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@ DB 'No input buffer s'
	DB	'upplied', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@ DB 'No input da'
	DB	'ta buffer supplied', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@ DB 'No input buffer size', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@
DSOUND_RD	SEGMENT
??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@ DB 'Input buffe'
	DB	'r size not block-aligned', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@CELPIAIP@Input?5buffers?5are?5restricted?5to?5@
DSOUND_RD	SEGMENT
??_C@_0DF@CELPIAIP@Input?5buffers?5are?5restricted?5to?5@ DB 'Input buffe'
	DB	'rs are restricted to 131068 bytes or less', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KBHECPDM@AC97?5streams?5are?5input?5only?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@KBHECPDM@AC97?5streams?5are?5input?5only?$AA@ DB 'AC97 streams '
	DB	'are input only', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IOLACHLJ@No?5free?5packets?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@IOLACHLJ@No?5free?5packets?$AA@ DB 'No free packets', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@NNABOLMD@Accepted?5packet?5?$CFx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@NNABOLMD@Accepted?5packet?5?$CFx?$AA@ DB 'Accepted packet %x', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@
DSOUND_RD	SEGMENT
??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@ DB '!('
	DB	'dwPhysicalAddress & (PAGE_SIZE - 1))', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FJ@GFMILJKF@Packet?5data?5submitted?5to?5the?5AC9@
DSOUND_RD	SEGMENT
??_C@_0FJ@GFMILJKF@Packet?5data?5submitted?5to?5the?5AC9@ DB 'Packet data'
	DB	' submitted to the AC97 XMO must be physically contiguous.  Us'
	DB	'e XPhysicalAlloc', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@IJBFJHGE@XMO_STATUSF_ACCEPT_INPUT_DATA?5?$DN?$DN@
DSOUND_RD	SEGMENT
??_C@_0CM@IJBFJHGE@XMO_STATUSF_ACCEPT_INPUT_DATA?5?$DN?$DN@ DB 'XMO_STATU'
	DB	'SF_ACCEPT_INPUT_DATA == m_dwStatus', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Process@CAc97MediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z
DSOUND	SEGMENT
$T32839 = -44
$T32838 = -40
_pPacket$ = -36
_hr$ = -32
_dwContiguousLength$ = -28
_plePacket$ = -24
_dwPhysicalAddress$ = -20
___AutoLockTest$ = -16
_irql$ = -12
_dwBasePhysicalAddress$ = -4
_this$ = 8
_pxmbSource$ = 12
_pxmbDest$ = 16
?Process@CAc97MediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z PROC NEAR ; CAc97MediaObject::Process, COMDAT

; 569  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 570  :     HRESULT                 hr                      = DS_OK;

  00008	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 571  :     PLIST_ENTRY             plePacket;
; 572  :     LPAC97PACKET            pPacket;
; 573  :     CIrql                   irql;

  0000f	8d 4d f4	 lea	 ecx, DWORD PTR _irql$[ebp]
  00012	e8 00 00 00 00	 call	 ??0CIrql@@QAE@XZ	; CIrql::CIrql

; 574  : 
; 575  : #ifdef VALIDATE_PARAMETERS
; 576  : 
; 577  :     DWORD                   dwBasePhysicalAddress;
; 578  :     DWORD                   dwContiguousLength;
; 579  :     DWORD                   dwPhysicalAddress;
; 580  : 
; 581  : #endif // VALIDATE_PARAMETERS
; 582  : 
; 583  :     DPF_ENTER();
; 584  :     ENTER_EXTERNAL_METHOD();

  00017	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  00026	74 44		 je	 SHORT $L32348
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00032	68 48 02 00 00	 push	 584			; 00000248H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0003c	6a 03		 push	 3
  0003e	6a 09		 push	 9
  00040	e8 00 00 00 00	 call	 _DwDbgSetContext
  00045	83 c4 18	 add	 esp, 24			; 00000018H
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0004d	e8 00 00 00 00	 call	 _DwDbgPrint
  00052	83 c4 04	 add	 esp, 4
  00055	c7 45 d8 05 40
	00 80		 mov	 DWORD PTR $T32838[ebp], -2147467259 ; 80004005H
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0005f	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00064	8b 45 d8	 mov	 eax, DWORD PTR $T32838[ebp]
  00067	e9 91 03 00 00	 jmp	 $L32338
$L32348:
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00071	68 48 02 00 00	 push	 584			; 00000248H
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 c1 04	 add	 ecx, 4
  00081	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 585  : 
; 586  : #ifdef VALIDATE_PARAMETERS
; 587  : 
; 588  :     if(!pxmbSource)

  00086	83 7d 0c 00	 cmp	 DWORD PTR _pxmbSource$[ebp], 0
  0008a	75 2d		 jne	 SHORT $L32352

; 589  :     {
; 590  :         DPF_ERROR("No input buffer supplied");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00096	68 4e 02 00 00	 push	 590			; 0000024eH
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  000a0	6a 01		 push	 1
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 _DwDbgSetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@
  000b1	e8 00 00 00 00	 call	 _DwDbgPrint
  000b6	83 c4 04	 add	 esp, 4
$L32352:

; 591  :     }
; 592  : 
; 593  :     if(!pxmbSource->pvBuffer)

  000b9	8b 45 0c	 mov	 eax, DWORD PTR _pxmbSource$[ebp]
  000bc	83 38 00	 cmp	 DWORD PTR [eax], 0
  000bf	75 2d		 jne	 SHORT $L32354

; 594  :     {
; 595  :         DPF_ERROR("No input data buffer supplied");

  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  000cb	68 53 02 00 00	 push	 595			; 00000253H
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  000d5	6a 01		 push	 1
  000d7	6a 09		 push	 9
  000d9	e8 00 00 00 00	 call	 _DwDbgSetContext
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@
  000e6	e8 00 00 00 00	 call	 _DwDbgPrint
  000eb	83 c4 04	 add	 esp, 4
$L32354:

; 596  :     }
; 597  : 
; 598  :     if(!pxmbSource->dwMaxSize)

  000ee	8b 4d 0c	 mov	 ecx, DWORD PTR _pxmbSource$[ebp]
  000f1	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  000f5	75 2d		 jne	 SHORT $L32356

; 599  :     {
; 600  :         DPF_ERROR("No input buffer size");

  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00101	68 58 02 00 00	 push	 600			; 00000258H
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0010b	6a 01		 push	 1
  0010d	6a 09		 push	 9
  0010f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00114	83 c4 18	 add	 esp, 24			; 00000018H
  00117	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@
  0011c	e8 00 00 00 00	 call	 _DwDbgPrint
  00121	83 c4 04	 add	 esp, 4
$L32356:

; 601  :     }
; 602  : 
; 603  :     if(pxmbSource->dwMaxSize % m_pDevice->m_wfxFormat.nBlockAlign)

  00124	0f b7 0d 0c 00
	00 00		 movzx	 ecx, WORD PTR ?m_wfxFormat@CAc97Device@@2UtWAVEFORMATEX@@B+12
  0012b	8b 55 0c	 mov	 edx, DWORD PTR _pxmbSource$[ebp]
  0012e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00131	33 d2		 xor	 edx, edx
  00133	f7 f1		 div	 ecx
  00135	85 d2		 test	 edx, edx
  00137	74 2d		 je	 SHORT $L32358

; 604  :     {
; 605  :         DPF_ERROR("Input buffer size not block-aligned");

  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00143	68 5d 02 00 00	 push	 605			; 0000025dH
  00148	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0014d	6a 01		 push	 1
  0014f	6a 09		 push	 9
  00151	e8 00 00 00 00	 call	 _DwDbgSetContext
  00156	83 c4 18	 add	 esp, 24			; 00000018H
  00159	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@
  0015e	e8 00 00 00 00	 call	 _DwDbgPrint
  00163	83 c4 04	 add	 esp, 4
$L32358:

; 606  :     }
; 607  : 
; 608  :     if(pxmbSource->dwMaxSize > 131068)

  00166	8b 45 0c	 mov	 eax, DWORD PTR _pxmbSource$[ebp]
  00169	81 78 04 fc ff
	01 00		 cmp	 DWORD PTR [eax+4], 131068 ; 0001fffcH
  00170	76 2d		 jbe	 SHORT $L32360

; 609  :     {
; 610  :         DPF_ERROR("Input buffers are restricted to 131068 bytes or less");

  00172	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00177	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  0017c	68 62 02 00 00	 push	 610			; 00000262H
  00181	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00186	6a 01		 push	 1
  00188	6a 09		 push	 9
  0018a	e8 00 00 00 00	 call	 _DwDbgSetContext
  0018f	83 c4 18	 add	 esp, 24			; 00000018H
  00192	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@CELPIAIP@Input?5buffers?5are?5restricted?5to?5@
  00197	e8 00 00 00 00	 call	 _DwDbgPrint
  0019c	83 c4 04	 add	 esp, 4
$L32360:

; 611  :     }
; 612  : 
; 613  :     if(pxmbDest)

  0019f	83 7d 10 00	 cmp	 DWORD PTR _pxmbDest$[ebp], 0
  001a3	74 2d		 je	 SHORT $L32362

; 614  :     {
; 615  :         DPF_ERROR("AC97 streams are input only");

  001a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  001aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  001af	68 67 02 00 00	 push	 615			; 00000267H
  001b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  001b9	6a 01		 push	 1
  001bb	6a 09		 push	 9
  001bd	e8 00 00 00 00	 call	 _DwDbgSetContext
  001c2	83 c4 18	 add	 esp, 24			; 00000018H
  001c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KBHECPDM@AC97?5streams?5are?5input?5only?$AA@
  001ca	e8 00 00 00 00	 call	 _DwDbgPrint
  001cf	83 c4 04	 add	 esp, 4
$L32362:

; 616  :     }
; 617  : 
; 618  : #endif // VALIDATE_PARAMETERS
; 619  : 
; 620  :     //
; 621  :     // Get a packet from the free list and add it to the pending list
; 622  :     //
; 623  : 
; 624  :     irql.Raise();

  001d2	8d 4d f4	 lea	 ecx, DWORD PTR _irql$[ebp]
  001d5	e8 00 00 00 00	 call	 ?Raise@CIrql@@QAEXXZ	; CIrql::Raise

; 625  :     
; 626  :     if((plePacket = MoveHeadTailList(&m_lstPending, &m_lstFree)) == &m_lstFree)

  001da	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	83 c1 20	 add	 ecx, 32			; 00000020H
  001e0	51		 push	 ecx
  001e1	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001e4	83 c2 18	 add	 edx, 24			; 00000018H
  001e7	52		 push	 edx
  001e8	e8 00 00 00 00	 call	 ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveHeadTailList
  001ed	89 45 e8	 mov	 DWORD PTR _plePacket$[ebp], eax
  001f0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001f3	83 c0 20	 add	 eax, 32			; 00000020H
  001f6	39 45 e8	 cmp	 DWORD PTR _plePacket$[ebp], eax
  001f9	75 34		 jne	 SHORT $L32364

; 627  :     {
; 628  :         DPF_ERROR("No free packets");

  001fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00200	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00205	68 74 02 00 00	 push	 628			; 00000274H
  0020a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0020f	6a 01		 push	 1
  00211	6a 09		 push	 9
  00213	e8 00 00 00 00	 call	 _DwDbgSetContext
  00218	83 c4 18	 add	 esp, 24			; 00000018H
  0021b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IOLACHLJ@No?5free?5packets?$AA@
  00220	e8 00 00 00 00	 call	 _DwDbgPrint
  00225	83 c4 04	 add	 esp, 4

; 629  :         hr = DSERR_INVALIDCALL;

  00228	c7 45 e0 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L32364:

; 630  :     }
; 631  : 
; 632  :     //
; 633  :     // Initialize the packet data and add it to the pending list
; 634  :     //
; 635  : 
; 636  :     if(SUCCEEDED(hr))

  0022f	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00233	7c 53		 jl	 SHORT $L32371

; 637  :     {
; 638  :         pPacket = CONTAINING_RECORD(plePacket, AC97PACKET, leListEntry);

  00235	8b 4d e8	 mov	 ecx, DWORD PTR _plePacket$[ebp]
  00238	89 4d dc	 mov	 DWORD PTR _pPacket$[ebp], ecx

; 639  :         
; 640  :         pPacket->xmp = *pxmbSource;

  0023b	8b 75 0c	 mov	 esi, DWORD PTR _pxmbSource$[ebp]
  0023e	8b 7d dc	 mov	 edi, DWORD PTR _pPacket$[ebp]
  00241	83 c7 08	 add	 edi, 8
  00244	b9 06 00 00 00	 mov	 ecx, 6
  00249	f3 a5		 rep movsd

; 641  : 
; 642  :         XMOAcceptPacket(&pPacket->xmp);

  0024b	8b 55 dc	 mov	 edx, DWORD PTR _pPacket$[ebp]
  0024e	83 c2 08	 add	 edx, 8
  00251	52		 push	 edx
  00252	e8 00 00 00 00	 call	 ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z ; XMOAcceptPacket

; 643  : 
; 644  :         DPF_BLAB("Accepted packet %x", pPacket);

  00257	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0025c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00261	68 84 02 00 00	 push	 644			; 00000284H
  00266	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0026b	6a 05		 push	 5
  0026d	6a 09		 push	 9
  0026f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00274	83 c4 18	 add	 esp, 24			; 00000018H
  00277	8b 45 dc	 mov	 eax, DWORD PTR _pPacket$[ebp]
  0027a	50		 push	 eax
  0027b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@NNABOLMD@Accepted?5packet?5?$CFx?$AA@
  00280	e8 00 00 00 00	 call	 _DwDbgPrint
  00285	83 c4 08	 add	 esp, 8
$L32371:

; 645  :     }
; 646  : 
; 647  :     irql.Lower();

  00288	8d 4d f4	 lea	 ecx, DWORD PTR _irql$[ebp]
  0028b	e8 00 00 00 00	 call	 ?Lower@CIrql@@QAEXXZ	; CIrql::Lower

; 648  : 
; 649  :     //
; 650  :     // Lock packet data
; 651  :     //
; 652  : 
; 653  :     if(SUCCEEDED(hr))

  00290	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00294	0f 8c cd 00 00
	00		 jl	 $L32378

; 654  :     {
; 655  :         MmLockUnlockBufferPages(pPacket->xmp.pvBuffer, pPacket->xmp.dwMaxSize, FALSE);

  0029a	6a 00		 push	 0
  0029c	8b 4d dc	 mov	 ecx, DWORD PTR _pPacket$[ebp]
  0029f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002a2	52		 push	 edx
  002a3	8b 45 dc	 mov	 eax, DWORD PTR _pPacket$[ebp]
  002a6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002a9	51		 push	 ecx
  002aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12

; 656  : 
; 657  : #ifdef VALIDATE_PARAMETERS
; 658  : 
; 659  :         dwBasePhysicalAddress = MmGetPhysicalAddress(pxmbSource->pvBuffer);

  002b0	8b 55 0c	 mov	 edx, DWORD PTR _pxmbSource$[ebp]
  002b3	8b 02		 mov	 eax, DWORD PTR [edx]
  002b5	50		 push	 eax
  002b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  002bc	89 45 fc	 mov	 DWORD PTR _dwBasePhysicalAddress$[ebp], eax

; 660  :         dwContiguousLength = PAGE_SIZE - BYTE_OFFSET(pxmbSource->pvBuffer); 

  002bf	8b 4d 0c	 mov	 ecx, DWORD PTR _pxmbSource$[ebp]
  002c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c4	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  002ca	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  002cf	2b c2		 sub	 eax, edx
  002d1	89 45 e4	 mov	 DWORD PTR _dwContiguousLength$[ebp], eax
$L32382:

; 661  : 
; 662  :         while(dwContiguousLength < pxmbSource->dwMaxSize)

  002d4	8b 4d 0c	 mov	 ecx, DWORD PTR _pxmbSource$[ebp]
  002d7	8b 55 e4	 mov	 edx, DWORD PTR _dwContiguousLength$[ebp]
  002da	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  002dd	0f 83 84 00 00
	00		 jae	 $L32378

; 663  :         {
; 664  :             dwPhysicalAddress = MmGetPhysicalAddress((LPBYTE)pxmbSource->pvBuffer + dwContiguousLength);

  002e3	8b 45 0c	 mov	 eax, DWORD PTR _pxmbSource$[ebp]
  002e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e8	03 4d e4	 add	 ecx, DWORD PTR _dwContiguousLength$[ebp]
  002eb	51		 push	 ecx
  002ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  002f2	89 45 ec	 mov	 DWORD PTR _dwPhysicalAddress$[ebp], eax

; 665  :             ASSERT(!(dwPhysicalAddress & (PAGE_SIZE - 1)));

  002f5	68 99 02 00 00	 push	 665			; 00000299H
  002fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  002ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@
  00304	8b 55 ec	 mov	 edx, DWORD PTR _dwPhysicalAddress$[ebp]
  00307	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0030d	f7 da		 neg	 edx
  0030f	1b d2		 sbb	 edx, edx
  00311	f7 da		 neg	 edx
  00313	52		 push	 edx
  00314	e8 00 00 00 00	 call	 _DwDbgAssert
  00319	83 c4 10	 add	 esp, 16			; 00000010H

; 666  : 
; 667  :             if(dwBasePhysicalAddress + dwContiguousLength != dwPhysicalAddress)

  0031c	8b 45 fc	 mov	 eax, DWORD PTR _dwBasePhysicalAddress$[ebp]
  0031f	03 45 e4	 add	 eax, DWORD PTR _dwContiguousLength$[ebp]
  00322	3b 45 ec	 cmp	 eax, DWORD PTR _dwPhysicalAddress$[ebp]
  00325	74 2f		 je	 SHORT $L32386

; 668  :             {
; 669  :                 DPF_ERROR("Packet data submitted to the AC97 XMO must be physically contiguous.  Use XPhysicalAlloc");

  00327	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0032c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JAEOHHMO@CAc97MediaObject?3?3Process?$AA@
  00331	68 9d 02 00 00	 push	 669			; 0000029dH
  00336	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0033b	6a 01		 push	 1
  0033d	6a 09		 push	 9
  0033f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00344	83 c4 18	 add	 esp, 24			; 00000018H
  00347	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FJ@GFMILJKF@Packet?5data?5submitted?5to?5the?5AC9@
  0034c	e8 00 00 00 00	 call	 _DwDbgPrint
  00351	83 c4 04	 add	 esp, 4

; 670  :                 break;

  00354	eb 11		 jmp	 SHORT $L32378
$L32386:

; 671  :             }
; 672  : 
; 673  :             dwContiguousLength += PAGE_SIZE;

  00356	8b 4d e4	 mov	 ecx, DWORD PTR _dwContiguousLength$[ebp]
  00359	81 c1 00 10 00
	00		 add	 ecx, 4096		; 00001000H
  0035f	89 4d e4	 mov	 DWORD PTR _dwContiguousLength$[ebp], ecx

; 674  :         }

  00362	e9 6d ff ff ff	 jmp	 $L32382
$L32378:

; 675  : 
; 676  : #endif // VALIDATE_PARAMETERS
; 677  : 
; 678  :     }
; 679  : 
; 680  :     //
; 681  :     // Send the packet to the channel
; 682  :     //
; 683  : 
; 684  :     if(SUCCEEDED(hr))

  00367	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0036b	7c 19		 jl	 SHORT $L32389

; 685  :     {
; 686  :         m_pChannel->AttachPacket(pPacket->xmp.pvBuffer, pPacket->xmp.dwMaxSize);

  0036d	8b 55 dc	 mov	 edx, DWORD PTR _pPacket$[ebp]
  00370	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00373	50		 push	 eax
  00374	8b 4d dc	 mov	 ecx, DWORD PTR _pPacket$[ebp]
  00377	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0037a	52		 push	 edx
  0037b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0037e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00381	e8 00 00 00 00	 call	 ?AttachPacket@CAc97Channel@@QAEXPBXK@Z ; CAc97Channel::AttachPacket
$L32389:

; 687  :     }
; 688  : 
; 689  :     //
; 690  :     // Signal a discontinuity to the channel.  This will prevent the channel
; 691  :     // from playing crap if the stream starves.  It's really low overhead to
; 692  :     // do this, so better safe than sorry.  As a side effect of this, the
; 693  :     // AC97 channel will never complain about being starved.  Oh well.
; 694  :     //
; 695  : 
; 696  :     if(SUCCEEDED(hr))

  00386	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0038a	7c 0b		 jl	 SHORT $L32391

; 697  :     {
; 698  :         m_pChannel->Discontinuity();

  0038c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0038f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00392	e8 00 00 00 00	 call	 ?Discontinuity@CAc97Channel@@QAEXXZ ; CAc97Channel::Discontinuity
$L32391:

; 699  :     }
; 700  : 
; 701  :     //
; 702  :     // Start the channel running
; 703  :     //
; 704  : 
; 705  :     if(SUCCEEDED(hr))

  00397	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0039b	7c 0d		 jl	 SHORT $L32393

; 706  :     {
; 707  :         m_pChannel->Run();

  0039d	6a ff		 push	 -1
  0039f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  003a2	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  003a5	e8 00 00 00 00	 call	 ?Run@CAc97Channel@@QAEXK@Z ; CAc97Channel::Run
$L32393:

; 708  :     }
; 709  : 
; 710  :     //
; 711  :     // Update the status
; 712  :     //
; 713  : 
; 714  :     if(SUCCEEDED(hr) && IsListEmpty(&m_lstFree))

  003aa	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  003ae	7c 3c		 jl	 SHORT $L32395
  003b0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  003b3	83 c0 20	 add	 eax, 32			; 00000020H
  003b6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003b9	39 41 20	 cmp	 DWORD PTR [ecx+32], eax
  003bc	75 2e		 jne	 SHORT $L32395

; 715  :     {
; 716  :         ASSERT(XMO_STATUSF_ACCEPT_INPUT_DATA == m_dwStatus);

  003be	68 cc 02 00 00	 push	 716			; 000002ccH
  003c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  003c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@IJBFJHGE@XMO_STATUSF_ACCEPT_INPUT_DATA?5?$DN?$DN@
  003cd	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  003d0	33 c0		 xor	 eax, eax
  003d2	83 7a 34 01	 cmp	 DWORD PTR [edx+52], 1
  003d6	0f 95 c0	 setne	 al
  003d9	50		 push	 eax
  003da	e8 00 00 00 00	 call	 _DwDbgAssert
  003df	83 c4 10	 add	 esp, 16			; 00000010H

; 717  : 
; 718  :         m_dwStatus = 0;

  003e2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003e5	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
$L32395:

; 719  :     }
; 720  : 
; 721  :     DPF_LEAVE_HRESULT(hr);
; 722  : 
; 723  :     return hr;

  003ec	8b 55 e0	 mov	 edx, DWORD PTR _hr$[ebp]
  003ef	89 55 d4	 mov	 DWORD PTR $T32839[ebp], edx
  003f2	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  003f5	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  003fa	8b 45 d4	 mov	 eax, DWORD PTR $T32839[ebp]
$L32338:

; 724  : }

  003fd	5f		 pop	 edi
  003fe	5e		 pop	 esi
  003ff	8b e5		 mov	 esp, ebp
  00401	5d		 pop	 ebp
  00402	c2 0c 00	 ret	 12			; 0000000cH
?Process@CAc97MediaObject@@UAGJPBU_XMEDIAPACKET@@0@Z ENDP ; CAc97MediaObject::Process
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
DSOUND	ENDS
;	COMDAT ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT
_pxmp$ = 8
?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z PROC NEAR	; XMOAcceptPacket, COMDAT

; 1440 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1441 :     if(pxmp->pdwCompletedSize)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00006	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000a	74 0c		 je	 SHORT $L28000

; 1442 :     {
; 1443 :         *pxmp->pdwCompletedSize = 0;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L28000:

; 1444 :     }
; 1445 : 
; 1446 :     if(pxmp->pdwStatus)

  00018	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  0001b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001f	74 0c		 je	 SHORT $L27999

; 1447 :     {
; 1448 :         *pxmp->pdwStatus = XMEDIAPACKET_STATUS_PENDING;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  00024	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00027	c7 02 0a 00 00
	80		 mov	 DWORD PTR [edx], -2147483638 ; 8000000aH
$L27999:

; 1449 :     }
; 1450 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z ENDP		; XMOAcceptPacket
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\ntlist.h
DSOUND	ENDS
;	COMDAT ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT
_Entry$ = -4
_DestListHead$ = 8
_SourceListHead$ = 12
?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z PROC NEAR	; MoveHeadTailList, COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 252  :     PLIST_ENTRY             Entry;
; 253  :     
; 254  :     AssertValidEntryList(SourceListHead, ASSERT_VALID_ONLY);

  00004	68 fe 00 00 00	 push	 254			; 000000feH
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
  0000e	6a 00		 push	 0
  00010	8b 45 0c	 mov	 eax, DWORD PTR _SourceListHead$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 255  : 
; 256  :     if((Entry = SourceListHead->Flink) != SourceListHead)

  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _SourceListHead$[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	89 55 fc	 mov	 DWORD PTR _Entry$[ebp], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _Entry$[ebp]
  00024	3b 45 0c	 cmp	 eax, DWORD PTR _SourceListHead$[ebp]
  00027	74 0d		 je	 SHORT $L29553

; 257  :     {
; 258  :         MoveEntryTailList(DestListHead, Entry);

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 08	 mov	 edx, DWORD PTR _DestListHead$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveEntryTailList
$L29553:

; 259  :     }
; 260  :     
; 261  :     return Entry;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _Entry$[ebp]

; 262  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ENDP	; MoveHeadTailList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\drvhlp.h
DSOUND	ENDS
;	COMDAT ??0CIrql@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@@QAE@XZ PROC NEAR				; CIrql::CIrql, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 40   : }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@@QAE@XZ ENDP					; CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@@QAEXXZ PROC NEAR				; CIrql::Raise, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L29688

; 45   :     {
; 46   :         m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L29688:

; 47   :     }
; 48   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@@QAEXXZ ENDP				; CIrql::Raise
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@@QAEXXZ PROC NEAR				; CIrql::Lower, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L29693

; 53   :     {
; 54   :         KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 55   :         m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L29693:

; 56   :     }
; 57   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@@QAEXXZ ENDP				; CIrql::Lower
DSOUND	ENDS
EXTRN	?AttachPacket@CAc97Channel@@QAEXKK@Z:NEAR	; CAc97Channel::AttachPacket
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\ac97.h
;	COMDAT ?AttachPacket@CAc97Channel@@QAEXPBXK@Z
DSOUND	SEGMENT
_this$ = -4
_pvBufferData$ = 8
_dwBufferSize$ = 12
?AttachPacket@CAc97Channel@@QAEXPBXK@Z PROC NEAR	; CAc97Channel::AttachPacket, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 419  :     AttachPacket(MmGetPhysicalAddress((LPVOID)pvBufferData), dwBufferSize);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  00015	50		 push	 eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?AttachPacket@CAc97Channel@@QAEXKK@Z ; CAc97Channel::AttachPacket

; 420  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?AttachPacket@CAc97Channel@@QAEXPBXK@Z ENDP		; CAc97Channel::AttachPacket
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
DSOUND	ENDS
;	COMDAT ?CompletePendingPackets@CAc97MediaObject@@IAEXXZ
DSOUND	SEGMENT
_this$ = -20
_pPacket$ = -16
_plePacket$ = -12
_irql$ = -8
?CompletePendingPackets@CAc97MediaObject@@IAEXXZ PROC NEAR ; CAc97MediaObject::CompletePendingPackets, COMDAT
; _this$ = ecx

; 750  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 751  :     PLIST_ENTRY             plePacket;
; 752  :     LPAC97PACKET            pPacket;
; 753  :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@@QAE@XZ	; CIrql::CIrql

; 754  :     
; 755  :     DPF_ENTER();
; 756  : 
; 757  :     //
; 758  :     // Complete the first packet in the list
; 759  :     //
; 760  : 
; 761  :     irql.Raise();

  00011	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00014	e8 00 00 00 00	 call	 ?Raise@CIrql@@QAEXXZ	; CIrql::Raise

; 762  : 
; 763  :     if((plePacket = MoveHeadTailList(&m_lstFree, &m_lstPending)) != &m_lstPending)

  00019	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 c0 18	 add	 eax, 24			; 00000018H
  0001f	50		 push	 eax
  00020	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 20	 add	 ecx, 32			; 00000020H
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveHeadTailList
  0002c	89 45 f4	 mov	 DWORD PTR _plePacket$[ebp], eax
  0002f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00032	83 c2 18	 add	 edx, 24			; 00000018H
  00035	39 55 f4	 cmp	 DWORD PTR _plePacket$[ebp], edx
  00038	74 08		 je	 SHORT $L32405

; 764  :     {
; 765  :         pPacket = CONTAINING_RECORD(plePacket, AC97PACKET, leListEntry);

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _plePacket$[ebp]
  0003d	89 45 f0	 mov	 DWORD PTR _pPacket$[ebp], eax

; 766  :     }
; 767  :     else

  00040	eb 07		 jmp	 SHORT $L32410
$L32405:

; 768  :     {
; 769  :         pPacket = NULL;

  00042	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pPacket$[ebp], 0
$L32410:

; 770  :     }
; 771  : 
; 772  :     irql.Lower();

  00049	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0004c	e8 00 00 00 00	 call	 ?Lower@CIrql@@QAEXXZ	; CIrql::Lower

; 773  : 
; 774  :     if(pPacket)

  00051	83 7d f0 00	 cmp	 DWORD PTR _pPacket$[ebp], 0
  00055	74 0e		 je	 SHORT $L32401

; 775  :     {
; 776  :         CompletePacket(pPacket, XMEDIAPACKET_STATUS_SUCCESS);

  00057	6a 00		 push	 0
  00059	8b 4d f0	 mov	 ecx, DWORD PTR _pPacket$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?CompletePacket@CAc97MediaObject@@IAEXPAUAC97PACKET@@K@Z ; CAc97MediaObject::CompletePacket
$L32401:

; 777  :     }
; 778  : 
; 779  :     DPF_LEAVE_VOID();
; 780  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?CompletePendingPackets@CAc97MediaObject@@IAEXXZ ENDP	; CAc97MediaObject::CompletePendingPackets
DSOUND	ENDS
PUBLIC	?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z ; XMOCompletePacket
PUBLIC	??_C@_0CB@DFBLBMLH@CAc97MediaObject?3?3CompletePacket@ ; `string'
PUBLIC	??_C@_0BF@JFOADINC@Completing?5packet?5?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DINKHGHB@?$CBIsListEmpty?$CI?$CGm_lstFree?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0CB@DFBLBMLH@CAc97MediaObject?3?3CompletePacket@
DSOUND_RD	SEGMENT
??_C@_0CB@DFBLBMLH@CAc97MediaObject?3?3CompletePacket@ DB 'CAc97MediaObje'
	DB	'ct::CompletePacket', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JFOADINC@Completing?5packet?5?$CFx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@JFOADINC@Completing?5packet?5?$CFx?$AA@ DB 'Completing packet %'
	DB	'x', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@DINKHGHB@?$CBIsListEmpty?$CI?$CGm_lstFree?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@DINKHGHB@?$CBIsListEmpty?$CI?$CGm_lstFree?$CJ?$AA@ DB '!IsListE'
	DB	'mpty(&m_lstFree)', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CompletePacket@CAc97MediaObject@@IAEXPAUAC97PACKET@@K@Z
DSOUND	SEGMENT
_this$ = -4
_pPacket$ = 8
_dwStatus$ = 12
?CompletePacket@CAc97MediaObject@@IAEXPAUAC97PACKET@@K@Z PROC NEAR ; CAc97MediaObject::CompletePacket, COMDAT
; _this$ = ecx

; 808  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :     DPF_ENTER();
; 810  : 
; 811  :     DPF_BLAB("Completing packet %x", pPacket);

  00007	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@DFBLBMLH@CAc97MediaObject?3?3CompletePacket@
  00011	68 2b 03 00 00	 push	 811			; 0000032bH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0001b	6a 05		 push	 5
  0001d	6a 09		 push	 9
  0001f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00024	83 c4 18	 add	 esp, 24			; 00000018H
  00027	8b 45 08	 mov	 eax, DWORD PTR _pPacket$[ebp]
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JFOADINC@Completing?5packet?5?$CFx?$AA@
  00030	e8 00 00 00 00	 call	 _DwDbgPrint
  00035	83 c4 08	 add	 esp, 8

; 812  : 
; 813  :     //
; 814  :     // Unlock packet data
; 815  :     //
; 816  : 
; 817  :     MmLockUnlockBufferPages(pPacket->xmp.pvBuffer, pPacket->xmp.dwMaxSize, TRUE);

  00038	6a 01		 push	 1
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _pPacket$[ebp]
  0003d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _pPacket$[ebp]
  00044	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00047	51		 push	 ecx
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12

; 818  : 
; 819  :     //
; 820  :     // Update the status to reflect the fact that we have at least one
; 821  :     // free packet.
; 822  :     //
; 823  : 
; 824  :     ASSERT(!IsListEmpty(&m_lstFree));

  0004e	68 38 03 00 00	 push	 824			; 00000338H
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DINKHGHB@?$CBIsListEmpty?$CI?$CGm_lstFree?$CJ?$AA@
  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 c2 20	 add	 edx, 32			; 00000020H
  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	33 c9		 xor	 ecx, ecx
  00068	39 50 20	 cmp	 DWORD PTR [eax+32], edx
  0006b	0f 94 c1	 sete	 cl
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _DwDbgAssert
  00074	83 c4 10	 add	 esp, 16			; 00000010H

; 825  :     
; 826  :     m_dwStatus = XMO_STATUSF_ACCEPT_INPUT_DATA;

  00077	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	c7 42 34 01 00
	00 00		 mov	 DWORD PTR [edx+52], 1

; 827  : 
; 828  :     //
; 829  :     // Finalize completion
; 830  :     //
; 831  : 
; 832  :     XMOCompletePacket(&pPacket->xmp, pPacket->xmp.dwMaxSize, m_pfnCallback, m_pvCallbackContext, dwStatus);

  00081	8b 45 0c	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0008b	52		 push	 edx
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00092	51		 push	 ecx
  00093	8b 55 08	 mov	 edx, DWORD PTR _pPacket$[ebp]
  00096	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _pPacket$[ebp]
  0009d	83 c1 08	 add	 ecx, 8
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z ; XMOCompletePacket

; 833  : 
; 834  :     DPF_LEAVE_VOID();
; 835  : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?CompletePacket@CAc97MediaObject@@IAEXPAUAC97PACKET@@K@Z ENDP ; CAc97MediaObject::CompletePacket
DSOUND	ENDS
EXTRN	__imp__NtSetEvent@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z
DSOUND	SEGMENT
_pxmp$ = 8
_dwCompletedSize$ = 12
_pfnCallback$ = 16
_pvStreamContext$ = 20
_dwStatus$ = 24
?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z PROC NEAR ; XMOCompletePacket, COMDAT

; 1457 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1458 :     if(pxmp->pdwCompletedSize)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00006	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000a	74 0b		 je	 SHORT $L28011

; 1459 :     {
; 1460 :         *pxmp->pdwCompletedSize = dwCompletedSize;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwCompletedSize$[ebp]
  00015	89 02		 mov	 DWORD PTR [edx], eax
$L28011:

; 1461 :     }
; 1462 : 
; 1463 :     if(pxmp->pdwStatus)

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0001a	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0001e	74 0b		 je	 SHORT $L28012

; 1464 :     {
; 1465 :         *pxmp->pdwStatus = dwStatus;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pxmp$[ebp]
  00023	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00026	8b 4d 18	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
$L28012:

; 1466 :     }
; 1467 : 
; 1468 :     if(pfnCallback)

  0002b	83 7d 10 00	 cmp	 DWORD PTR _pfnCallback$[ebp], 0
  0002f	74 14		 je	 SHORT $L28013

; 1469 :     {
; 1470 :         pfnCallback(pvStreamContext, pxmp->pContext, dwStatus);

  00031	8b 55 18	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  00034	52		 push	 edx
  00035	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00038	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003b	51		 push	 ecx
  0003c	8b 55 14	 mov	 edx, DWORD PTR _pvStreamContext$[ebp]
  0003f	52		 push	 edx
  00040	ff 55 10	 call	 DWORD PTR _pfnCallback$[ebp]

; 1471 :     }
; 1472 :     else if(pxmp->hCompletionEvent)

  00043	eb 18		 jmp	 SHORT $L28010
$L28013:
  00045	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00048	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004c	74 0f		 je	 SHORT $L28010

; 1473 :     {
; 1474 : 
; 1475 : #ifdef _NTEXAPI_
; 1476 : 
; 1477 :         NtSetEvent(pxmp->hCompletionEvent, NULL);

  0004e	6a 00		 push	 0
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  00053	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtSetEvent@8
$L28010:

; 1478 : 
; 1479 : #else // _NTEXAPI_
; 1480 : 
; 1481 :         SetEvent(pxmp->hCompletionEvent);
; 1482 : 
; 1483 : #endif // _NTEXAPI_
; 1484 : 
; 1485 :     }
; 1486 : }

  0005d	5d		 pop	 ebp
  0005e	c2 14 00	 ret	 20			; 00000014H
?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z ENDP ; XMOCompletePacket
DSOUND	ENDS
PUBLIC	??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@ ; `string'
PUBLIC	??_C@_0BF@PNBENIHJ@Invalid?5channel?5mode?$AA@	; `string'
PUBLIC	??_C@_0CM@IDLDEKPC@The?5analog?5channel?5can?5only?5outp@ ; `string'
PUBLIC	??_C@_0BL@JDGBLHGP@Encoded?5output?5not?5enabled?$AA@ ; `string'
EXTRN	_XGetAudioFlags@0:NEAR
EXTRN	?SetMode@CAc97Channel@@QAEXK@Z:NEAR		; CAc97Channel::SetMode
;	COMDAT ??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\ac97xmo.cpp
DSOUND_RD	SEGMENT
??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@ DB 'CAc97MediaObject:'
	DB	':SetMode', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@PNBENIHJ@Invalid?5channel?5mode?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@PNBENIHJ@Invalid?5channel?5mode?$AA@ DB 'Invalid channel mode', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@IDLDEKPC@The?5analog?5channel?5can?5only?5outp@
DSOUND_RD	SEGMENT
??_C@_0CM@IDLDEKPC@The?5analog?5channel?5can?5only?5outp@ DB 'The analog '
	DB	'channel can only output PCM data', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@JDGBLHGP@Encoded?5output?5not?5enabled?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@JDGBLHGP@Encoded?5output?5not?5enabled?$AA@ DB 'Encoded output '
	DB	'not enabled', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMode@CAc97MediaObject@@UAGJK@Z
DSOUND	SEGMENT
$T32871 = -20
$T32870 = -16
_dwSpeakerConfig$ = -12
_hr$ = -8
___AutoLockTest$ = -4
_this$ = 8
_dwMode$ = 12
?SetMode@CAc97MediaObject@@UAGJK@Z PROC NEAR		; CAc97MediaObject::SetMode, COMDAT

; 861  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 862  :     HRESULT                 hr              = DS_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 863  :     DWORD                   dwSpeakerConfig;
; 864  :     
; 865  :     DPF_ENTER();
; 866  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  0001c	74 44		 je	 SHORT $L32429
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@
  00028	68 62 03 00 00	 push	 866			; 00000362H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 _DwDbgSetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 _DwDbgPrint
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T32870[ebp], -2147467259 ; 80004005H
  00052	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  0005a	8b 45 f0	 mov	 eax, DWORD PTR $T32870[ebp]
  0005d	e9 12 01 00 00	 jmp	 $L32424
$L32429:
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@
  00067	68 62 03 00 00	 push	 866			; 00000362H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	83 c1 04	 add	 ecx, 4
  00077	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 867  : 
; 868  : #ifdef VALIDATE_PARAMETERS
; 869  : 
; 870  :     if((DSAC97_MODE_PCM != dwMode) && (DSAC97_MODE_ENCODED != dwMode))

  0007c	81 7d 0c 00 00
	00 02		 cmp	 DWORD PTR _dwMode$[ebp], 33554432 ; 02000000H
  00083	74 36		 je	 SHORT $L32433
  00085	81 7d 0c 02 00
	00 02		 cmp	 DWORD PTR _dwMode$[ebp], 33554434 ; 02000002H
  0008c	74 2d		 je	 SHORT $L32433

; 871  :     {
; 872  :         DPF_ERROR("Invalid channel mode");

  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@
  00098	68 68 03 00 00	 push	 872			; 00000368H
  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  000a2	6a 01		 push	 1
  000a4	6a 09		 push	 9
  000a6	e8 00 00 00 00	 call	 _DwDbgSetContext
  000ab	83 c4 18	 add	 esp, 24			; 00000018H
  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@PNBENIHJ@Invalid?5channel?5mode?$AA@
  000b3	e8 00 00 00 00	 call	 _DwDbgPrint
  000b8	83 c4 04	 add	 esp, 4
$L32433:

; 873  :     }
; 874  : 
; 875  :     if((AC97_CHANNELTYPE_ANALOG == m_pChannel->m_nChannelType) && (DSAC97_MODE_ENCODED == dwMode))

  000bb	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000be	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000c1	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000c4	75 36		 jne	 SHORT $L32435
  000c6	81 7d 0c 02 00
	00 02		 cmp	 DWORD PTR _dwMode$[ebp], 33554434 ; 02000002H
  000cd	75 2d		 jne	 SHORT $L32435

; 876  :     {
; 877  :         DPF_ERROR("The analog channel can only output PCM data");

  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@
  000d9	68 6d 03 00 00	 push	 877			; 0000036dH
  000de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  000e3	6a 01		 push	 1
  000e5	6a 09		 push	 9
  000e7	e8 00 00 00 00	 call	 _DwDbgSetContext
  000ec	83 c4 18	 add	 esp, 24			; 00000018H
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@IDLDEKPC@The?5analog?5channel?5can?5only?5outp@
  000f4	e8 00 00 00 00	 call	 _DwDbgPrint
  000f9	83 c4 04	 add	 esp, 4
$L32435:

; 878  :     }
; 879  : 
; 880  : #endif // VALIDATE_PARAMETERS
; 881  : 
; 882  :     if(DSAC97_MODE_PCM != dwMode)

  000fc	81 7d 0c 00 00
	00 02		 cmp	 DWORD PTR _dwMode$[ebp], 33554432 ; 02000000H
  00103	74 49		 je	 SHORT $L32437

; 883  :     {
; 884  :         dwSpeakerConfig = XAudioGetSpeakerConfig();

  00105	e8 00 00 00 00	 call	 _XGetAudioFlags@0
  0010a	89 45 f4	 mov	 DWORD PTR _dwSpeakerConfig$[ebp], eax

; 885  : 
; 886  :         if(!(dwSpeakerConfig & DSSPEAKER_ENCODED_VALID))

  0010d	8b 55 f4	 mov	 edx, DWORD PTR _dwSpeakerConfig$[ebp]
  00110	81 e2 00 00 03
	00		 and	 edx, 196608		; 00030000H
  00116	85 d2		 test	 edx, edx
  00118	75 34		 jne	 SHORT $L32437

; 887  :         {
; 888  :             DPF_ERROR("Encoded output not enabled");

  0011a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0011f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MBBEFBBG@CAc97MediaObject?3?3SetMode?$AA@
  00124	68 78 03 00 00	 push	 888			; 00000378H
  00129	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0012e	6a 01		 push	 1
  00130	6a 09		 push	 9
  00132	e8 00 00 00 00	 call	 _DwDbgSetContext
  00137	83 c4 18	 add	 esp, 24			; 00000018H
  0013a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JDGBLHGP@Encoded?5output?5not?5enabled?$AA@
  0013f	e8 00 00 00 00	 call	 _DwDbgPrint
  00144	83 c4 04	 add	 esp, 4

; 889  :             hr = DSERR_INVALIDCALL;

  00147	c7 45 f8 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L32437:

; 890  :         }
; 891  :     }
; 892  :     
; 893  :     if(SUCCEEDED(hr))

  0014e	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00152	7c 0f		 jl	 SHORT $L32445

; 894  :     {
; 895  :         m_pChannel->SetMode(dwMode);

  00154	8b 45 0c	 mov	 eax, DWORD PTR _dwMode$[ebp]
  00157	50		 push	 eax
  00158	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0015b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0015e	e8 00 00 00 00	 call	 ?SetMode@CAc97Channel@@QAEXK@Z ; CAc97Channel::SetMode
$L32445:

; 896  :     }
; 897  : 
; 898  :     DPF_LEAVE_HRESULT(hr);
; 899  : 
; 900  :     return hr;

  00163	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  00166	89 55 ec	 mov	 DWORD PTR $T32871[ebp], edx
  00169	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0016c	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00171	8b 45 ec	 mov	 eax, DWORD PTR $T32871[ebp]
$L32424:

; 901  : }

  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 08 00	 ret	 8
?SetMode@CAc97MediaObject@@UAGJK@Z ENDP			; CAc97MediaObject::SetMode
DSOUND	ENDS
PUBLIC	??_C@_0CF@MPOOJCFL@CAc97MediaObject?3?3GetCurrentPosi@ ; `string'
PUBLIC	??_C@_0CD@BBIHEMKC@Failed?5to?5supply?5a?5position?5buff@ ; `string'
EXTRN	?GetPosition@CAc97Channel@@QAEKXZ:NEAR		; CAc97Channel::GetPosition
;	COMDAT ??_C@_0CF@MPOOJCFL@CAc97MediaObject?3?3GetCurrentPosi@
DSOUND_RD	SEGMENT
??_C@_0CF@MPOOJCFL@CAc97MediaObject?3?3GetCurrentPosi@ DB 'CAc97MediaObje'
	DB	'ct::GetCurrentPosition', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@BBIHEMKC@Failed?5to?5supply?5a?5position?5buff@
DSOUND_RD	SEGMENT
??_C@_0CD@BBIHEMKC@Failed?5to?5supply?5a?5position?5buff@ DB 'Failed to s'
	DB	'upply a position buffer', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetCurrentPosition@CAc97MediaObject@@UAGJPAK@Z
DSOUND	SEGMENT
$T32876 = -12
$T32875 = -8
___AutoLockTest$ = -4
_this$ = 8
_pdwPosition$ = 12
?GetCurrentPosition@CAc97MediaObject@@UAGJPAK@Z PROC NEAR ; CAc97MediaObject::GetCurrentPosition, COMDAT

; 927  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 928  :     DPF_ENTER();
; 929  :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLockTest@@QAE@XZ ; CAutoLockTest::CAutoLockTest
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundTestInFinalRelease, 0
  00015	74 41		 je	 SHORT $L32452
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@MPOOJCFL@CAc97MediaObject?3?3GetCurrentPosi@
  00021	68 a1 03 00 00	 push	 929			; 000003a1H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 _DwDbgSetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 _DwDbgPrint
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T32875[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T32875[ebp]
  00056	eb 6f		 jmp	 SHORT $L32450
$L32452:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@MPOOJCFL@CAc97MediaObject?3?3GetCurrentPosi@
  0005d	68 a1 03 00 00	 push	 929			; 000003a1H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 04	 add	 ecx, 4
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ; CValidObject<1094924599>::__AssertValidObject

; 930  : 
; 931  : #ifdef VALIDATE_PARAMETERS
; 932  : 
; 933  :     if(!pdwPosition)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _pdwPosition$[ebp], 0
  00076	75 2d		 jne	 SHORT $L32456

; 934  :     {
; 935  :         DPF_ERROR("Failed to supply a position buffer");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@MPOOJCFL@CAc97MediaObject?3?3GetCurrentPosi@
  00082	68 a7 03 00 00	 push	 935			; 000003a7H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@HEJOANOJ@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 _DwDbgSetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@BBIHEMKC@Failed?5to?5supply?5a?5position?5buff@
  0009d	e8 00 00 00 00	 call	 _DwDbgPrint
  000a2	83 c4 04	 add	 esp, 4
$L32456:

; 936  :     }
; 937  : 
; 938  : #endif // VALIDATE_PARAMETERS
; 939  : 
; 940  :     *pdwPosition = m_pChannel->GetPosition();

  000a5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ab	e8 00 00 00 00	 call	 ?GetPosition@CAc97Channel@@QAEKXZ ; CAc97Channel::GetPosition
  000b0	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwPosition$[ebp]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax

; 941  : 
; 942  :     DPF_LEAVE_HRESULT(DS_OK);
; 943  : 
; 944  :     return DS_OK;

  000b5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T32876[ebp], 0
  000bc	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLockTest$[ebp]
  000bf	e8 00 00 00 00	 call	 ??1CAutoLockTest@@QAE@XZ ; CAutoLockTest::~CAutoLockTest
  000c4	8b 45 f4	 mov	 eax, DWORD PTR $T32876[ebp]
$L32450:

; 945  : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
?GetCurrentPosition@CAc97MediaObject@@UAGJPAK@Z ENDP	; CAc97MediaObject::GetCurrentPosition
DSOUND	ENDS
PUBLIC	??_7?$CValidObject@$0EBEDDJDH@@@6B@		; CValidObject<1094924599>::`vftable'
PUBLIC	??_G?$CValidObject@$0EBEDDJDH@@@UAEPAXI@Z	; CValidObject<1094924599>::`scalar deleting destructor'
EXTRN	??_E?$CValidObject@$0EBEDDJDH@@@UAEPAXI@Z:NEAR	; CValidObject<1094924599>::`vector deleting destructor'
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@@6B@
; File c:\xbox\private\windows\directx\dsound\initlib\dsapi.h
CONST	SEGMENT
??_7?$CValidObject@$0EBEDDJDH@@@6B@ DD FLAT:??_E?$CValidObject@$0EBEDDJDH@@@UAEPAXI@Z ; CValidObject<1094924599>::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0?$CValidObject@$0EBEDDJDH@@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0?$CValidObject@$0EBEDDJDH@@@QAE@XZ PROC NEAR		; CValidObject<1094924599>::CValidObject<1094924599>, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EBEDDJDH@@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 37 39
	43 41		 mov	 DWORD PTR [ecx+4], 1094924599 ; 41433937H

; 89   : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$CValidObject@$0EBEDDJDH@@@QAE@XZ ENDP		; CValidObject<1094924599>::CValidObject<1094924599>
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1?$CValidObject@$0EBEDDJDH@@@UAE@XZ PROC NEAR		; CValidObject<1094924599>::~CValidObject<1094924599>, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EBEDDJDH@@@6B@

; 93   : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1?$CValidObject@$0EBEDDJDH@@@UAE@XZ ENDP		; CValidObject<1094924599>::~CValidObject<1094924599>
DSOUND	ENDS
PUBLIC	??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@ ; `string'
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@ DB 'NU'
	DB	'LL "this" pointer (%x)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT
??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@ DB 'I'
	DB	'nvalid "this" pointer (%x != %x)', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z
DSOUND	SEGMENT
_this$ = -4
_pszFile$ = 8
_dwLine$ = 12
_pszFunction$ = 16
?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z PROC NEAR ; CValidObject<1094924599>::__AssertValidObject, COMDAT
; _this$ = ecx

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 97   :     if(!this)

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 30		 jne	 SHORT $L32489

; 98   :     {
; 99   :         DwDbgSetContext(DPRINTF_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  00012	8b 45 10	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLine$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0001d	52		 push	 edx
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 _DwDbgSetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H

; 100  :         DwDbgPrint("NULL \"this\" pointer (%x)", this);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
  00033	e8 00 00 00 00	 call	 _DwDbgPrint
  00038	83 c4 08	 add	 esp, 8

; 101  :     }
; 102  :     else if(m_dwSignature != dwSignature)

  0003b	eb 42		 jmp	 SHORT $L32488
$L32489:
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 79 04 37 39
	43 41		 cmp	 DWORD PTR [ecx+4], 1094924599 ; 41433937H
  00047	74 36		 je	 SHORT $L32488

; 103  :     {
; 104  :         DwDbgSetContext(DPRINTF_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07CNKCBOKB@TESTSND?$AA@
  0004e	8b 55 10	 mov	 edx, DWORD PTR _pszFunction$[ebp]
  00051	52		 push	 edx
  00052	8b 45 0c	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00059	51		 push	 ecx
  0005a	6a 01		 push	 1
  0005c	6a 09		 push	 9
  0005e	e8 00 00 00 00	 call	 _DwDbgSetContext
  00063	83 c4 18	 add	 esp, 24			; 00000018H

; 105  :         DwDbgPrint("Invalid \"this\" pointer (%x != %x)", m_dwSignature, dwSignature);

  00066	68 37 39 43 41	 push	 1094924599		; 41433937H
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
  00077	e8 00 00 00 00	 call	 _DwDbgPrint
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L32488:

; 106  :     }
; 107  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@@QAEXPBDK0@Z ENDP ; CValidObject<1094924599>::__AssertValidObject
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\refcount.h
DSOUND	ENDS
;	COMDAT ?__AddRef@@YGPAVCAc97MediaObject@@PAV1@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@@YGPAVCAc97MediaObject@@PAV1@@Z PROC NEAR	; __AddRef, COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :     if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0b		 je	 SHORT $L32493

; 68   :     {
; 69   :         p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 11		 call	 DWORD PTR [ecx]
$L32493:

; 70   :     }
; 71   : 
; 72   :     return p;

  00014	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 73   : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?__AddRef@@YGPAVCAc97MediaObject@@PAV1@@Z ENDP		; __AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$CValidObject@$0EBEDDJDH@@@UAEPAXI@Z PROC NEAR	; CValidObject<1094924599>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EBEDDJDH@@@UAE@XZ ; CValidObject<1094924599>::~CValidObject<1094924599>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L32501
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L32501:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CValidObject@$0EBEDDJDH@@@UAEPAXI@Z ENDP		; CValidObject<1094924599>::`scalar deleting destructor'
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_ECAc97MediaObject@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECAc97MediaObject@@W7AEPAXI@Z PROC NEAR		; CAc97MediaObject::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECAc97MediaObject@@UAEPAXI@Z
??_ECAc97MediaObject@@W7AEPAXI@Z ENDP			; CAc97MediaObject::`vector deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CAc97MediaObject@@WM@AGKXZ
DSOUND	SEGMENT
?AddRef@CAc97MediaObject@@WM@AGKXZ PROC NEAR		; CAc97MediaObject::AddRef, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CAc97MediaObject@@UAGKXZ ; CAc97MediaObject::AddRef
?AddRef@CAc97MediaObject@@WM@AGKXZ ENDP			; CAc97MediaObject::AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Release@CAc97MediaObject@@WM@AGKXZ
DSOUND	SEGMENT
?Release@CAc97MediaObject@@WM@AGKXZ PROC NEAR		; CAc97MediaObject::Release, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?Release@CAc97MediaObject@@UAGKXZ ; CAc97MediaObject::Release
?Release@CAc97MediaObject@@WM@AGKXZ ENDP		; CAc97MediaObject::Release
DSOUND	ENDS
END
