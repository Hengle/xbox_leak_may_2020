; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\mcpxcore.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT PARA USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@GIDDCAOM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@BHCCMBKD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@LNGLCLLL@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07CNKCBOKB@TESTSND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NAFPMNMN@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GKNCNMBD@CDirectSoundTest?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@KCMACBKL@CDirectSoundTest?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@JEPBENHJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@KBCOEPGO@?$CB?$CIm_adwGPOutputBufferSizes?$FLi?$FN?5?$CF?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@FALOOAAF@?$CB?$CIm_adwEPOutputBufferSizes?$FLi?$FN?5?$CF?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@FHFPAOJG@CMcpxSlopMemoryHeapTest?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@KCCGGAEN@?$CI8?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@JKHGMFJD@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@NPIDPDEA@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@HJHFIAGH@?$CB?$CIdwTotalSgeCount?5?$CG?50xFFFF0000?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@CFBPDMGJ@CMcpxGPDspManagerTest?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@LICNKCLH@Failed?5to?5alloc?5DSP?5and?5scratch?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@PBCDKMKO@CMcpxEPDspManagerTest?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@DCFHDMOM@Failed?5to?5alloc?5Dsp?5and?5scratch?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@OCPBFOOA@Invalid?5FE?5state?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@EKGFJNO@Invalid?5SE?5state?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@CBDMAJHB@?$CBpContext?9?$DOVirtualAddress?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@OPIFOBLC@?$CBpContext?9?$DOPhysicalAddress?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@JHHBFHG@pContext?9?$DOSize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@GEEDHOHN@dwAlignment?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@DPMEBCA@?$CB?$CIpContext?9?$DOPhysicalAddress?5?$CG?5?$CId@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCountTest@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCountTest@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCountTest@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@@QAEXPAVCAc97Channel@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundTestEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundTestLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLockTest@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetupDSPs@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxNotifierTest@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifierTest@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CMcpxNotifierTest@@QAEHK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDmaTest@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxCoreTest@@QAE@PAVCDirectSoundTestSettings@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxCoreTest@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxCoreTest@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxGPDspManagerTest@@QAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxEPDspManagerTest@@QAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxCoreTest@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetupFrontEndProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AllocateApuMemory@CMcpxCoreTest@@IAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetupVoiceProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetupAc97@CMcpxCoreTest@@IAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetInterruptState@CMcpxCoreTest@@IAEXH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetPhysicalMemoryProperties@CMcpxCoreTest@@SGKPAXKPAK1@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapTransfer@CMcpxCoreTest@@SGKPAPAXPAK1@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AllocateContext@CMcpxCoreTest@@SGJPAUMCPX_ALLOC_CONTEXT@@KK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@@YGPAVCDirectSoundTestSettings@@PAV1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@@YGPAVCMcpxSlopMemoryHeapTest@@PAV1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7CMcpxCoreTest@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _TestSoundLibBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7CRefCountTest@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?$S1@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4IA
DSOUND_URW	SEGMENT PARA USE32 PUBLIC ''
DSOUND_URW	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?m_adwGPOutputBufferSizes@CMcpxCoreTest@@2QBKB	; CMcpxCoreTest::m_adwGPOutputBufferSizes
PUBLIC	?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB	; CMcpxCoreTest::m_adwEPOutputBufferSizes
PUBLIC	?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A ; CMcpxCoreTest::m_ctxMemory
PUBLIC	_TestSoundLibBuildNumberD
DSOUND_URW	SEGMENT
?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A DB 0100H DUP (?) ; CMcpxCoreTest::m_ctxMemory
DSOUND_URW	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _TestSoundLibBuildNumberD
XBLD$V	SEGMENT
_TestSoundLibBuildNumberD DW 04554H
	DW	05453H
	DW	04e53H
	DW	04444H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RD	SEGMENT
?m_adwGPOutputBufferSizes@CMcpxCoreTest@@2QBKB DD 02000H ; CMcpxCoreTest::m_adwGPOutputBufferSizes
?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB DD 02000H ; CMcpxCoreTest::m_adwEPOutputBufferSizes
	DD	04000H
DSOUND_RD	ENDS
PUBLIC	?__AddRef@@YGPAVCDirectSoundTestSettings@@PAV1@@Z ; __AddRef
PUBLIC	??0CMcpxCoreTest@@QAE@PAVCDirectSoundTestSettings@@@Z ; CMcpxCoreTest::CMcpxCoreTest
PUBLIC	??_7CMcpxCoreTest@@6B@				; CMcpxCoreTest::`vftable'
PUBLIC	??_GCMcpxCoreTest@@UAEPAXI@Z			; CMcpxCoreTest::`scalar deleting destructor'
EXTRN	??0CAc97Device@@QAE@XZ:NEAR			; CAc97Device::CAc97Device
EXTRN	??_ECMcpxCoreTest@@UAEPAXI@Z:NEAR		; CMcpxCoreTest::`vector deleting destructor'
;	COMDAT ??_7CMcpxCoreTest@@6B@
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.cpp
CONST	SEGMENT
??_7CMcpxCoreTest@@6B@ DD FLAT:??_ECMcpxCoreTest@@UAEPAXI@Z ; CMcpxCoreTest::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMcpxCoreTest@@QAE@PAVCDirectSoundTestSettings@@@Z
DSOUND	SEGMENT
_this$ = -4
_pSettings$ = 8
??0CMcpxCoreTest@@QAE@PAVCDirectSoundTestSettings@@@Z PROC NEAR ; CMcpxCoreTest::CMcpxCoreTest, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxCoreTest@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 14	 add	 ecx, 20			; 00000014H
  00016	e8 00 00 00 00	 call	 ??0CAc97Device@@QAE@XZ	; CAc97Device::CAc97Device

; 52   :     DPF_ENTER();
; 53   : 
; 54   :     m_pSettings = ADDREF(pSettings);

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pSettings$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?__AddRef@@YGPAVCDirectSoundTestSettings@@PAV1@@Z ; __AddRef
  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 55   : 
; 56   :     DPF_LEAVE_VOID();
; 57   : }

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0CMcpxCoreTest@@QAE@PAVCDirectSoundTestSettings@@@Z ENDP ; CMcpxCoreTest::CMcpxCoreTest
DSOUND	ENDS
PUBLIC	??1CMcpxCoreTest@@UAE@XZ			; CMcpxCoreTest::~CMcpxCoreTest
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxCoreTest@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxCoreTest@@UAEPAXI@Z PROC NEAR			; CMcpxCoreTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxCoreTest@@UAE@XZ ; CMcpxCoreTest::~CMcpxCoreTest
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L32065
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L32065:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxCoreTest@@UAEPAXI@Z ENDP			; CMcpxCoreTest::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	_DirectSoundTestTrackingMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 180  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  :     DirectSoundTestTrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _DirectSoundTestTrackingMemFree@4

; 182  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	??_GCMcpxEPDspManagerTest@@QAEPAXI@Z		; CMcpxEPDspManagerTest::`scalar deleting destructor'
PUBLIC	??_GCMcpxGPDspManagerTest@@QAEPAXI@Z		; CMcpxGPDspManagerTest::`scalar deleting destructor'
EXTRN	??1CAc97Device@@QAE@XZ:NEAR			; CAc97Device::~CAc97Device
EXTRN	_DirectSoundTestTrackingPhysicalFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.cpp
;	COMDAT ??1CMcpxCoreTest@@UAE@XZ
DSOUND	SEGMENT
tv84 = -32
tv75 = -28
_this$ = -24
$T32854 = -20
$T32853 = -16
$T32850 = -12
$T32849 = -8
_i$ = -4
??1CMcpxCoreTest@@UAE@XZ PROC NEAR			; CMcpxCoreTest::~CMcpxCoreTest, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxCoreTest@@6B@

; 83   :     DWORD                   i;
; 84   : 
; 85   :     DPF_ENTER();
; 86   : 
; 87   : #ifdef MCPX_BOOT_LIB
; 88   : 
; 89   :     Reset();
; 90   : 
; 91   : #else // MCPX_BOOT_LIB
; 92   : 
; 93   :     //
; 94   :     // We're assuming the derived object already called Reset
; 95   :     //
; 96   : 
; 97   : #endif // MCPX_BOOT_LIB
; 98   : 
; 99   :     //
; 100  :     // Free the DSP managers
; 101  :     //
; 102  : 
; 103  :     DELETE(m_pGpDspManager);

  00012	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00019	74 35		 je	 SHORT $L32071
  0001b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00021	89 45 f4	 mov	 DWORD PTR $T32850[ebp], eax
  00024	8b 4d f4	 mov	 ecx, DWORD PTR $T32850[ebp]
  00027	89 4d f8	 mov	 DWORD PTR $T32849[ebp], ecx
  0002a	83 7d f8 00	 cmp	 DWORD PTR $T32849[ebp], 0
  0002e	74 0f		 je	 SHORT $L32851
  00030	6a 01		 push	 1
  00032	8b 4d f8	 mov	 ecx, DWORD PTR $T32849[ebp]
  00035	e8 00 00 00 00	 call	 ??_GCMcpxGPDspManagerTest@@QAEPAXI@Z
  0003a	89 45 e4	 mov	 DWORD PTR tv75[ebp], eax
  0003d	eb 07		 jmp	 SHORT $L32852
$L32851:
  0003f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$L32852:
  00046	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00049	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
$L32071:

; 104  : 
; 105  : #ifndef MCPX_BOOT_LIB
; 106  : 
; 107  :     DELETE(m_pEpDspManager);

  00050	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00057	74 35		 je	 SHORT $L32074
  00059	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005f	89 55 ec	 mov	 DWORD PTR $T32854[ebp], edx
  00062	8b 45 ec	 mov	 eax, DWORD PTR $T32854[ebp]
  00065	89 45 f0	 mov	 DWORD PTR $T32853[ebp], eax
  00068	83 7d f0 00	 cmp	 DWORD PTR $T32853[ebp], 0
  0006c	74 0f		 je	 SHORT $L32855
  0006e	6a 01		 push	 1
  00070	8b 4d f0	 mov	 ecx, DWORD PTR $T32853[ebp]
  00073	e8 00 00 00 00	 call	 ??_GCMcpxEPDspManagerTest@@QAEPAXI@Z
  00078	89 45 e0	 mov	 DWORD PTR tv84[ebp], eax
  0007b	eb 07		 jmp	 SHORT $L32856
$L32855:
  0007d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L32856:
  00084	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L32074:

; 108  : 
; 109  : #endif // MCPX_BOOT_LIB
; 110  : 
; 111  :     //
; 112  :     // Free APU memory
; 113  :     //
; 114  : 
; 115  :     for(i = 0; i < MCPX_MEM_COUNT; i++)

  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00095	eb 09		 jmp	 SHORT $L32077
$L32078:
  00097	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009a	83 c2 01	 add	 edx, 1
  0009d	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L32077:
  000a0	83 7d fc 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  000a4	73 77		 jae	 SHORT $L32079

; 116  :     {
; 117  : 
; 118  : #ifdef ENABLE_SLOP_MEMORY_RECOVERY
; 119  : 
; 120  :         if(m_ctxMemory[i].fOwned)

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a9	c1 e0 04	 shl	 eax, 4
  000ac	83 b8 0c 00 00
	00 00		 cmp	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[eax+12], 0
  000b3	74 33		 je	 SHORT $L32080

; 121  : 
; 122  : #endif // ENABLE_SLOP_MEMORY_RECOVERY
; 123  : 
; 124  :         {
; 125  :             PHYSFREE(m_ctxMemory[i].VirtualAddress);

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000b8	c1 e1 04	 shl	 ecx, 4
  000bb	83 b9 00 00 00
	00 00		 cmp	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[ecx], 0
  000c2	74 22		 je	 SHORT $L32081
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000c7	c1 e2 04	 shl	 edx, 4
  000ca	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[edx]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 _DirectSoundTestTrackingPhysicalFree@4
  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000d9	c1 e1 04	 shl	 ecx, 4
  000dc	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[ecx], 0
$L32081:

; 126  :         }
; 127  : 
; 128  : #ifdef ENABLE_SLOP_MEMORY_RECOVERY
; 129  : 
; 130  :         else

  000e6	eb 10		 jmp	 SHORT $L32082
$L32080:

; 131  :         {
; 132  :             m_ctxMemory[i].VirtualAddress = NULL;

  000e8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000eb	c1 e2 04	 shl	 edx, 4
  000ee	c7 82 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[edx], 0
$L32082:

; 133  :         }
; 134  : 
; 135  : #endif // ENABLE_SLOP_MEMORY_RECOVERY
; 136  : 
; 137  :         m_ctxMemory[i].PhysicalAddress = 0;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000fb	c1 e0 04	 shl	 eax, 4
  000fe	c7 80 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[eax+4], 0

; 138  :         m_ctxMemory[i].Size = 0;

  00108	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0010b	c1 e1 04	 shl	 ecx, 4
  0010e	c7 81 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[ecx+8], 0

; 139  :     }

  00118	e9 7a ff ff ff	 jmp	 $L32078
$L32079:

; 140  : 
; 141  :     //
; 142  :     // Release object references
; 143  :     //
; 144  : 
; 145  :     RELEASE(m_pSettings);

  0011d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00120	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00124	74 1c		 je	 SHORT $L32083
  00126	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00129	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0012f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00132	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00134	50		 push	 eax
  00135	ff 51 08	 call	 DWORD PTR [ecx+8]
  00138	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0013b	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L32083:

; 146  : 
; 147  : #ifdef ENABLE_SLOP_MEMORY_RECOVERY
; 148  : 
; 149  :     RELEASE(m_pSlopMemoryHeap);

  00142	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00145	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00149	74 1c		 je	 SHORT $L32069
  0014b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00151	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00154	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00157	8b 12		 mov	 edx, DWORD PTR [edx]
  00159	51		 push	 ecx
  0015a	ff 52 08	 call	 DWORD PTR [edx+8]
  0015d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00160	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$L32069:

; 150  : 
; 151  : #endif // ENABLE_SLOP_MEMORY_RECOVERY
; 152  : 
; 153  :     DPF_LEAVE_VOID();
; 154  : }

  00167	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	83 c1 14	 add	 ecx, 20			; 00000014H
  0016d	e8 00 00 00 00	 call	 ??1CAc97Device@@QAE@XZ	; CAc97Device::~CAc97Device
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
??1CMcpxCoreTest@@UAE@XZ ENDP				; CMcpxCoreTest::~CMcpxCoreTest
DSOUND	ENDS
EXTRN	??1CMcpxGPDspManagerTest@@QAE@XZ:NEAR		; CMcpxGPDspManagerTest::~CMcpxGPDspManagerTest
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxGPDspManagerTest@@QAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxGPDspManagerTest@@QAEPAXI@Z PROC NEAR		; CMcpxGPDspManagerTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxGPDspManagerTest@@QAE@XZ ; CMcpxGPDspManagerTest::~CMcpxGPDspManagerTest
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L32089
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L32089:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxGPDspManagerTest@@QAEPAXI@Z ENDP		; CMcpxGPDspManagerTest::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	??1CMcpxEPDspManagerTest@@QAE@XZ:NEAR		; CMcpxEPDspManagerTest::~CMcpxEPDspManagerTest
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxEPDspManagerTest@@QAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxEPDspManagerTest@@QAEPAXI@Z PROC NEAR		; CMcpxEPDspManagerTest::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxEPDspManagerTest@@QAE@XZ ; CMcpxEPDspManagerTest::~CMcpxEPDspManagerTest
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L32092
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L32092:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxEPDspManagerTest@@QAEPAXI@Z ENDP		; CMcpxEPDspManagerTest::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	?Initialize@CMcpxCoreTest@@QAEJXZ		; CMcpxCoreTest::Initialize
PUBLIC	?Reset@CMcpxCoreTest@@IAEXXZ			; CMcpxCoreTest::Reset
PUBLIC	?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z ; CMcpxCoreTest::SetSetupEngineState
PUBLIC	?AllocateApuMemory@CMcpxCoreTest@@IAEJXZ	; CMcpxCoreTest::AllocateApuMemory
PUBLIC	?SetupFrontEndProcessor@CMcpxCoreTest@@IAEXXZ	; CMcpxCoreTest::SetupFrontEndProcessor
PUBLIC	?SetupVoiceProcessor@CMcpxCoreTest@@IAEXXZ	; CMcpxCoreTest::SetupVoiceProcessor
PUBLIC	?SetupDSPs@CMcpxCoreTest@@IAEXXZ		; CMcpxCoreTest::SetupDSPs
PUBLIC	?SetupAc97@CMcpxCoreTest@@IAEJXZ		; CMcpxCoreTest::SetupAc97
EXTRN	?Run@CAc97Channel@@QAEXK@Z:NEAR			; CAc97Channel::Run
; Function compile flags: /Odt
;	COMDAT ?Initialize@CMcpxCoreTest@@QAEJXZ
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
?Initialize@CMcpxCoreTest@@QAEJXZ PROC NEAR		; CMcpxCoreTest::Initialize, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 181  :     HRESULT                 hr;
; 182  : 
; 183  :     DPF_ENTER();
; 184  : 
; 185  :     //
; 186  :     // Make sure we're in a known good state
; 187  :     //
; 188  :     
; 189  :     Reset();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?Reset@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::Reset

; 190  : 
; 191  :     //
; 192  :     // Allocate memory
; 193  :     //
; 194  : 
; 195  :     hr = AllocateApuMemory();

  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?AllocateApuMemory@CMcpxCoreTest@@IAEJXZ ; CMcpxCoreTest::AllocateApuMemory
  00019	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 196  : 
; 197  :     //
; 198  :     // Set up the front-end and voice processor
; 199  :     //
; 200  : 
; 201  :     if(SUCCEEDED(hr))

  0001c	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00020	7c 10		 jl	 SHORT $L32099

; 202  :     {
; 203  :         SetupFrontEndProcessor();

  00022	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?SetupFrontEndProcessor@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupFrontEndProcessor

; 204  :         SetupVoiceProcessor();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetupVoiceProcessor@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupVoiceProcessor
$L32099:

; 205  :     }
; 206  : 
; 207  :     //
; 208  :     // Set up the AC97
; 209  :     //
; 210  : 
; 211  :     if(SUCCEEDED(hr))

  00032	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00036	7c 0b		 jl	 SHORT $L32101

; 212  :     {
; 213  :         hr = SetupAc97();

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?SetupAc97@CMcpxCoreTest@@IAEJXZ ; CMcpxCoreTest::SetupAc97
  00040	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L32101:

; 214  :     }
; 215  : 
; 216  :     //
; 217  :     // Set up the DSPs
; 218  :     //
; 219  : 
; 220  :     if(SUCCEEDED(hr)) 

  00043	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00047	7c 08		 jl	 SHORT $L32103

; 221  :     {
; 222  :         SetupDSPs();

  00049	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?SetupDSPs@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupDSPs
$L32103:

; 223  :     }    
; 224  : 
; 225  :     //
; 226  :     // Set up the APU/ACI link
; 227  :     //
; 228  : 
; 229  :     if(SUCCEEDED(hr))

  00051	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00055	7c 0a		 jl	 SHORT $L32105

; 230  :     {
; 231  :         SetSetupEngineState(MCPX_SE_STATE_AC_SYNC);

  00057	6a 01		 push	 1
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z ; CMcpxCoreTest::SetSetupEngineState
$L32105:

; 232  :     }
; 233  : 
; 234  :     //
; 235  :     // Start the ACI channels running
; 236  :     //
; 237  : 
; 238  :     if(SUCCEEDED(hr))

  00061	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00065	7c 1a		 jl	 SHORT $L32107

; 239  :     {       
; 240  :         m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->Run();

  00067	6a ff		 push	 -1
  00069	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006f	e8 00 00 00 00	 call	 ?Run@CAc97Channel@@QAEXK@Z ; CAc97Channel::Run

; 241  :         m_Ac97.m_apChannels[AC97_CHANNELTYPE_ANALOG]->Run();

  00074	6a ff		 push	 -1
  00076	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0007c	e8 00 00 00 00	 call	 ?Run@CAc97Channel@@QAEXK@Z ; CAc97Channel::Run
$L32107:

; 242  :     }
; 243  : 
; 244  :     DPF_LEAVE_HRESULT(hr);
; 245  : 
; 246  : 	return hr;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 247  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?Initialize@CMcpxCoreTest@@QAEJXZ ENDP			; CMcpxCoreTest::Initialize
DSOUND	ENDS
PUBLIC	?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ	; CMcpxCoreTest::SetupGlobalProcessor
PUBLIC	?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ	; CMcpxCoreTest::SetupEncodeProcessor
EXTRN	__imp__KeStallExecutionProcessor@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.h
;	COMDAT ?SetupDSPs@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?SetupDSPs@CMcpxCoreTest@@IAEXXZ PROC NEAR		; CMcpxCoreTest::SetupDSPs, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 343  :     SetupGlobalProcessor();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupGlobalProcessor

; 344  : 
; 345  : #ifndef MCPX_BOOT_LIB
; 346  : 
; 347  :     SetupEncodeProcessor();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::SetupEncodeProcessor

; 348  :     KeStallExecutionProcessor(10 * 1000);

  00017	68 10 27 00 00	 push	 10000			; 00002710H
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeStallExecutionProcessor@4

; 349  : 
; 350  : #endif // MCPX_BOOT_LIB
; 351  : 
; 352  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?SetupDSPs@CMcpxCoreTest@@IAEXXZ ENDP			; CMcpxCoreTest::SetupDSPs
DSOUND	ENDS
PUBLIC	?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z	; CMcpxCoreTest::IdleVoiceProcessor
PUBLIC	?SetInterruptState@CMcpxCoreTest@@IAEXH@Z	; CMcpxCoreTest::SetInterruptState
PUBLIC	?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z	; CMcpxCoreTest::SetPrivLockState
PUBLIC	?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z ; CMcpxCoreTest::SetFrontEndState
EXTRN	?Terminate@CAc97Device@@QAEXXZ:NEAR		; CAc97Device::Terminate
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.cpp
;	COMDAT ?Reset@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Reset@CMcpxCoreTest@@IAEXXZ PROC NEAR			; CMcpxCoreTest::Reset, COMDAT
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 274  :     DPF_ENTER();
; 275  : 
; 276  :     //
; 277  :     // Shut down the AC'97
; 278  :     //
; 279  : 
; 280  :     m_Ac97.Terminate();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ?Terminate@CAc97Device@@QAEXXZ ; CAc97Device::Terminate

; 281  : 
; 282  :     //
; 283  :     // Shut down the APU components
; 284  :     //
; 285  : 
; 286  :     IdleVoiceProcessor(TRUE);

  00012	6a 01		 push	 1
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z ; CMcpxCoreTest::IdleVoiceProcessor

; 287  :     SetInterruptState(FALSE);

  0001c	6a 00		 push	 0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?SetInterruptState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetInterruptState

; 288  :     SetPrivLockState(TRUE);

  00026	6a 01		 push	 1
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetPrivLockState

; 289  :     SetFrontEndState(MCPX_FE_STATE_HALTED);

  00030	6a 00		 push	 0
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z ; CMcpxCoreTest::SetFrontEndState

; 290  :     SetSetupEngineState(MCPX_SE_STATE_OFF);

  0003a	6a 00		 push	 0
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z ; CMcpxCoreTest::SetSetupEngineState

; 291  : 
; 292  :     MCPX_REG_WRITE(NV_PAPU_TVL2D, 0xFFFF);

  00044	c7 05 54 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157548, 65535 ; 0000ffffH

; 293  :     MCPX_REG_WRITE(NV_PAPU_TVL3D, 0xFFFF);

  0004e	c7 05 60 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157536, 65535 ; 0000ffffH

; 294  :     MCPX_REG_WRITE(NV_PAPU_TVLMP, 0xFFFF);

  00058	c7 05 6c 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157524, 65535 ; 0000ffffH

; 295  : 
; 296  :     MCPX_REG_WRITE(NV_PAPU_CVL2D, 0xFFFF);

  00062	c7 05 58 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157544, 65535 ; 0000ffffH

; 297  :     MCPX_REG_WRITE(NV_PAPU_CVL3D, 0xFFFF);

  0006c	c7 05 64 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157532, 65535 ; 0000ffffH

; 298  :     MCPX_REG_WRITE(NV_PAPU_CVLMP, 0xFFFF);

  00076	c7 05 70 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157520, 65535 ; 0000ffffH

; 299  : 
; 300  :     MCPX_REG_WRITE(NV_PAPU_NVL2D, 0xFFFF);

  00080	c7 05 5c 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157540, 65535 ; 0000ffffH

; 301  :     MCPX_REG_WRITE(NV_PAPU_NVL3D, 0xFFFF);

  0008a	c7 05 68 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157528, 65535 ; 0000ffffH

; 302  :     MCPX_REG_WRITE(NV_PAPU_NVLMP, 0xFFFF);

  00094	c7 05 74 20 80
	fe ff ff 00 00	 mov	 DWORD PTR ds:-25157516, 65535 ; 0000ffffH

; 303  : 
; 304  :     MCPX_REG_WRITE(NV_PAPU_GPRST, 0);

  0009e	c7 05 fc ff 83
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24903684, 0

; 305  :     MCPX_REG_WRITE(NV_PAPU_EPRST, 1);

  000a8	c7 05 fc ff 85
	fe 01 00 00 00	 mov	 DWORD PTR ds:-24772612, 1

; 306  : 
; 307  :     DPF_LEAVE_VOID();
; 308  : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
?Reset@CMcpxCoreTest@@IAEXXZ ENDP			; CMcpxCoreTest::Reset
DSOUND	ENDS
PUBLIC	?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ	; CMcpxCoreTest::ResetGlobalCounters
; Function compile flags: /Odt
;	COMDAT ?SetupFrontEndProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -40
_rFeControl$ = -36
_rInterruptMask$ = -32
_dwForce$ = -24
_dwIgnore$ = -16
_rSeControl$ = -4
?SetupFrontEndProcessor@CMcpxCoreTest@@IAEXXZ PROC NEAR	; CMcpxCoreTest::SetupFrontEndProcessor, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 335  :     DWORD                   dwForce[2]      = { 0, 0 };

  00009	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwForce$[ebp], 0
  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwForce$[ebp+4], 0

; 336  :     DWORD                   dwIgnore[2]     = { 0, 0 };

  00017	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwIgnore$[ebp], 0
  0001e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwIgnore$[ebp+4], 0

; 337  :     R_INTR                  rInterruptMask;
; 338  :     R_FE_CONTROL            rFeControl;
; 339  :     R_SE_CONTROL            rSeControl;
; 340  :     DWORD                   i;
; 341  : 
; 342  :     DPF_ENTER();
; 343  : 
; 344  :     //
; 345  :     // Setup interrupt masks
; 346  :     //
; 347  : 
; 348  :     rInterruptMask.uValue = 0;

  00025	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _rInterruptMask$[ebp], 0

; 349  :     rInterruptMask.General = NV_PAPU_IEN_GINTEN_DISABLED;

  0002c	8b 45 e0	 mov	 eax, DWORD PTR _rInterruptMask$[ebp]
  0002f	83 e0 fe	 and	 eax, -2			; fffffffeH
  00032	89 45 e0	 mov	 DWORD PTR _rInterruptMask$[ebp], eax

; 350  :     rInterruptMask.DeltaWarning = NV_PAPU_IEN_DWINTEN_ENABLED;

  00035	8b 4d e0	 mov	 ecx, DWORD PTR _rInterruptMask$[ebp]
  00038	83 c9 02	 or	 ecx, 2
  0003b	89 4d e0	 mov	 DWORD PTR _rInterruptMask$[ebp], ecx

; 351  :     rInterruptMask.DeltaPanic = NV_PAPU_IEN_DPINTEN_ENABLED;

  0003e	8b 55 e0	 mov	 edx, DWORD PTR _rInterruptMask$[ebp]
  00041	83 ca 08	 or	 edx, 8
  00044	89 55 e0	 mov	 DWORD PTR _rInterruptMask$[ebp], edx

; 352  :     rInterruptMask.FETrap = NV_PAPU_IEN_FETINTEN_ENABLED;

  00047	8b 45 e0	 mov	 eax, DWORD PTR _rInterruptMask$[ebp]
  0004a	83 c8 10	 or	 eax, 16			; 00000010H
  0004d	89 45 e0	 mov	 DWORD PTR _rInterruptMask$[ebp], eax

; 353  :     rInterruptMask.FENotify = NV_PAPU_IEN_FENINTEN_ENABLED;

  00050	8b 4d e0	 mov	 ecx, DWORD PTR _rInterruptMask$[ebp]
  00053	83 c9 20	 or	 ecx, 32			; 00000020H
  00056	89 4d e0	 mov	 DWORD PTR _rInterruptMask$[ebp], ecx

; 354  :     rInterruptMask.FEVoice = NV_PAPU_IEN_FEVINTEN_ENABLED;

  00059	8b 55 e0	 mov	 edx, DWORD PTR _rInterruptMask$[ebp]
  0005c	83 ca 40	 or	 edx, 64			; 00000040H
  0005f	89 55 e0	 mov	 DWORD PTR _rInterruptMask$[ebp], edx

; 355  :     rInterruptMask.FEMethodOverFlow = NV_PAPU_IEN_FEOINTEN_ENABLED;

  00062	8b 45 e0	 mov	 eax, DWORD PTR _rInterruptMask$[ebp]
  00065	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  0006a	89 45 e0	 mov	 DWORD PTR _rInterruptMask$[ebp], eax

; 356  :     rInterruptMask.GPMailbox = NV_PAPU_IEN_GPMINTEN_DISABLED;

  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _rInterruptMask$[ebp]
  00070	81 e1 ff fe ff
	ff		 and	 ecx, -257		; fffffeffH
  00076	89 4d e0	 mov	 DWORD PTR _rInterruptMask$[ebp], ecx

; 357  :     rInterruptMask.GPNotify = NV_PAPU_IEN_GPNINTEN_ENABLED;

  00079	8b 55 e0	 mov	 edx, DWORD PTR _rInterruptMask$[ebp]
  0007c	81 ca 00 02 00
	00		 or	 edx, 512		; 00000200H
  00082	89 55 e0	 mov	 DWORD PTR _rInterruptMask$[ebp], edx

; 358  :     rInterruptMask.EPMailbox = NV_PAPU_IEN_EPMINTEN_DISABLED;

  00085	8b 45 e0	 mov	 eax, DWORD PTR _rInterruptMask$[ebp]
  00088	25 ff fb ff ff	 and	 eax, -1025		; fffffbffH
  0008d	89 45 e0	 mov	 DWORD PTR _rInterruptMask$[ebp], eax

; 359  :     rInterruptMask.EPNotify = NV_PAPU_IEN_EPNINTEN_ENABLED;

  00090	8b 4d e0	 mov	 ecx, DWORD PTR _rInterruptMask$[ebp]
  00093	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00099	89 4d e0	 mov	 DWORD PTR _rInterruptMask$[ebp], ecx

; 360  : 
; 361  :     MCPX_REG_WRITE(NV_PAPU_IEN, rInterruptMask.uValue);

  0009c	8b 55 e0	 mov	 edx, DWORD PTR _rInterruptMask$[ebp]
  0009f	89 15 04 10 80
	fe		 mov	 DWORD PTR ds:-25161724, edx

; 362  : 
; 363  :     //
; 364  :     // Set default FE control bits
; 365  :     //
; 366  : 
; 367  :     rFeControl.uValue = 0;

  000a5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _rFeControl$[ebp], 0

; 368  :     rFeControl.TrapOnNotifier = NV_PAPU_FECTL_FENINT_ENABLED;

  000ac	8b 45 dc	 mov	 eax, DWORD PTR _rFeControl$[ebp]
  000af	83 c8 08	 or	 eax, 8
  000b2	89 45 dc	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 369  :     rFeControl.Mode = NV_PAPU_FECTL_FEMETHMODE_HALTED;

  000b5	8b 4d dc	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  000b8	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH
  000be	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
  000c4	89 4d dc	 mov	 DWORD PTR _rFeControl$[ebp], ecx

; 370  :     rFeControl.EnableLock = NV_PAPU_FECTL_FEMETH_PRIVLOCK_NOT_DISABLED;

  000c7	8b 55 dc	 mov	 edx, DWORD PTR _rFeControl$[ebp]
  000ca	81 e2 ff df ff
	ff		 and	 edx, -8193		; ffffdfffH
  000d0	89 55 dc	 mov	 DWORD PTR _rFeControl$[ebp], edx

; 371  : 
; 372  :     MCPX_REG_WRITE(NV_PAPU_FECTL, rFeControl.uValue);

  000d3	8b 45 dc	 mov	 eax, DWORD PTR _rFeControl$[ebp]
  000d6	a3 00 11 80 fe	 mov	 DWORD PTR ds:-25161472, eax

; 373  : 
; 374  :     //
; 375  :     // Set default SE control bits
; 376  :     //
; 377  :     
; 378  :     rSeControl.uValue = 0;

  000db	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rSeControl$[ebp], 0

; 379  :     rSeControl.GSCUpdate = NV_PAPU_SECTL_XCNTMODE_OFF;

  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _rSeControl$[ebp]
  000e5	83 e1 e7	 and	 ecx, -25		; ffffffe7H
  000e8	89 4d fc	 mov	 DWORD PTR _rSeControl$[ebp], ecx

; 380  : 
; 381  :     MCPX_REG_WRITE(NV_PAPU_SECTL, rSeControl.uValue);

  000eb	8b 55 fc	 mov	 edx, DWORD PTR _rSeControl$[ebp]
  000ee	89 15 00 20 80
	fe		 mov	 DWORD PTR ds:-25157632, edx

; 382  : 
; 383  :     //
; 384  :     // We're overriding the internal SE2FE_IDLE_MESSAGE because a couple
; 385  :     // of things don't work the way they should.  First, the hardware has
; 386  :     // a race condition that can cause voice list corruption if a VoiceOn
; 387  :     // method is received with an antecedent voice that has already gone
; 388  :     // idle.  Second, VoiceRelease causes a PERSIST voice to be removed
; 389  :     // from the processing list when the envelope completes.  By overriding
; 390  :     // SE2FE_IDLE_VOICE in software, we can address both of these issues
; 391  :     //
; 392  : 
; 393  :     dwForce[1] |= MCPX_MAKE_REG_VALUE(1, NV_PAPU_FETFORCE1_SE2FE_IDLE_VOICE);

  000f4	8b 45 ec	 mov	 eax, DWORD PTR _dwForce$[ebp+4]
  000f7	0d 00 80 00 00	 or	 eax, 32768		; 00008000H
  000fc	89 45 ec	 mov	 DWORD PTR _dwForce$[ebp+4], eax

; 394  : 
; 395  :     MCPX_REG_WRITE(NV_PAPU_FETFORCE0, dwForce[0]);

  000ff	8b 4d e8	 mov	 ecx, DWORD PTR _dwForce$[ebp]
  00102	89 0d 00 15 80
	fe		 mov	 DWORD PTR ds:-25160448, ecx

; 396  :     MCPX_REG_WRITE(NV_PAPU_FETFORCE1, dwForce[1]);

  00108	8b 55 ec	 mov	 edx, DWORD PTR _dwForce$[ebp+4]
  0010b	89 15 04 15 80
	fe		 mov	 DWORD PTR ds:-25160444, edx

; 397  : 
; 398  :     //
; 399  :     // SET_VOICE_TAR_Hrtf has a bug in it that prevents us from setting 
; 400  :     // a NULL HRTF filter handle (0xFFFF).  This is strictly a parameter
; 401  :     // validation bug since NULL is a valid value.
; 402  :     //
; 403  :     // VoiceOn will cause a BAD_LIST_POINTER trap if the VP isn't idle
; 404  :     // and we use the INHERIT list type.  We're working around this in
; 405  :     // CMcpxVoiceClient::ActivateVoice.
; 406  :     //
; 407  : 
; 408  :     dwIgnore[0] |= MCPX_MAKE_REG_VALUE(1, NV_PAPU_FETIGNORE0_SET_VOICE_TAR_HRTF);

  00111	8b 45 f0	 mov	 eax, DWORD PTR _dwIgnore$[ebp]
  00114	0d 00 00 80 00	 or	 eax, 8388608		; 00800000H
  00119	89 45 f0	 mov	 DWORD PTR _dwIgnore$[ebp], eax

; 409  :     dwIgnore[0] |= MCPX_MAKE_REG_VALUE(1, NV_PAPU_FETIGNORE0_VOICE_ON);

  0011c	8b 4d f0	 mov	 ecx, DWORD PTR _dwIgnore$[ebp]
  0011f	83 c9 40	 or	 ecx, 64			; 00000040H
  00122	89 4d f0	 mov	 DWORD PTR _dwIgnore$[ebp], ecx

; 410  : 
; 411  :     MCPX_REG_WRITE(NV_PAPU_FETIGNORE0, dwIgnore[0]);

  00125	8b 55 f0	 mov	 edx, DWORD PTR _dwIgnore$[ebp]
  00128	89 15 08 15 80
	fe		 mov	 DWORD PTR ds:-25160440, edx

; 412  :     MCPX_REG_WRITE(NV_PAPU_FETIGNORE1, dwIgnore[1]);

  0012e	8b 45 f4	 mov	 eax, DWORD PTR _dwIgnore$[ebp+4]
  00131	a3 0c 15 80 fe	 mov	 DWORD PTR ds:-25160436, eax

; 413  : 
; 414  :     //
; 415  :     // Initialize global counts so we can track how far ahead the output 
; 416  :     // counter stays from the input
; 417  :     //
; 418  : 
; 419  :     ResetGlobalCounters();

  00136	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	e8 00 00 00 00	 call	 ?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ ; CMcpxCoreTest::ResetGlobalCounters

; 420  :     
; 421  :     //
; 422  :     // Set up boundaries
; 423  :     //
; 424  : 
; 425  :     MCPX_REG_WRITE(NV_PAPU_FEMAXV, MCPX_HW_MAX_VOICES - 1);

  0013e	c7 05 04 11 80
	fe ff 00 00 00	 mov	 DWORD PTR ds:-25161468, 255 ; 000000ffH

; 426  : 	MCPX_REG_WRITE(NV_PAPU_FEMAXTV, MCPX_HW_MAX_3D_VOICES - 1);

  00148	c7 05 08 11 80
	fe 3f 00 00 00	 mov	 DWORD PTR ds:-25161464, 63 ; 0000003fH

; 427  : 	MCPX_REG_WRITE(NV_PAPU_FEMAXHT, MCPX_HW_MAX_3D_VOICES * MCPX_HW_3DFILTERS_PER_VOICE - 1);

  00152	c7 05 1c 11 80
	fe 7f 00 00 00	 mov	 DWORD PTR ds:-25161444, 127 ; 0000007fH

; 428  : 	MCPX_REG_WRITE(NV_PAPU_FEMAXSESSL, MCPX_HW_MAX_SSL_PRDS - 1);

  0015c	c7 05 24 11 80
	fe ff 1f 00 00	 mov	 DWORD PTR ds:-25161436, 8191 ; 00001fffH

; 429  : 	MCPX_REG_WRITE(NV_PAPU_FEMAXSESGE, MCPX_HW_MAX_BUFFER_PRDS - 1);

  00166	c7 05 38 11 80
	fe ff 07 00 00	 mov	 DWORD PTR ds:-25161416, 2047 ; 000007ffH

; 430  : 	MCPX_REG_WRITE(NV_PAPU_FEMAXMB, MCPX_HW_MAX_SUBMIX_BINS);

  00170	c7 05 58 11 80
	fe 20 00 00 00	 mov	 DWORD PTR ds:-25161384, 32 ; 00000020H

; 431  : 
; 432  :     MCPX_REG_WRITE(NV_PAPU_FESESSLCTXPA, 0);

  0017a	c7 05 2c 11 80
	fe 00 00 00 00	 mov	 DWORD PTR ds:-25161428, 0

; 433  :     MCPX_REG_WRITE(NV_PAPU_FESESSLMAXOFF, MCPX_MAX_VALID_ADDRESS);

  00184	c7 05 30 11 80
	fe 00 00 00 08	 mov	 DWORD PTR ds:-25161424, 134217728 ; 08000000H

; 434  : 
; 435  :     MCPX_REG_WRITE(NV_PAPU_FESESGECTXPA, 0);

  0018e	c7 05 40 11 80
	fe 00 00 00 00	 mov	 DWORD PTR ds:-25161408, 0

; 436  :     MCPX_REG_WRITE(NV_PAPU_FESESGEMAXOFF, MCPX_MAX_VALID_ADDRESS);

  00198	c7 05 44 11 80
	fe 00 00 00 08	 mov	 DWORD PTR ds:-25161404, 134217728 ; 08000000H

; 437  : 
; 438  :     MCPX_REG_WRITE(NV_PAPU_FEGPSGECTXPA, 0);

  001a2	c7 05 50 11 80
	fe 00 00 00 00	 mov	 DWORD PTR ds:-25161392, 0

; 439  :     MCPX_REG_WRITE(NV_PAPU_FEGPSGEMAXOFF, MCPX_MAX_VALID_ADDRESS);

  001ac	c7 05 54 11 80
	fe 00 00 00 08	 mov	 DWORD PTR ds:-25161388, 134217728 ; 08000000H

; 440  : 
; 441  :     //
; 442  :     // Unlock the front end and setup engine
; 443  :     //
; 444  : 
; 445  :     SetPrivLockState(FALSE);

  001b6	6a 00		 push	 0
  001b8	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	e8 00 00 00 00	 call	 ?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z ; CMcpxCoreTest::SetPrivLockState

; 446  :     SetFrontEndState(MCPX_FE_STATE_FREE_RUNNING);

  001c0	6a 01		 push	 1
  001c2	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	e8 00 00 00 00	 call	 ?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z ; CMcpxCoreTest::SetFrontEndState

; 447  :     SetFrontEndState(MCPX_FE_STATE_ISO);

  001ca	6a 02		 push	 2
  001cc	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001cf	e8 00 00 00 00	 call	 ?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z ; CMcpxCoreTest::SetFrontEndState

; 448  :     SetSetupEngineState(MCPX_SE_STATE_ISO);

  001d4	6a 04		 push	 4
  001d6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d9	e8 00 00 00 00	 call	 ?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z ; CMcpxCoreTest::SetSetupEngineState

; 449  : 
; 450  :     DPF_LEAVE_VOID();
; 451  : }

  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c3		 ret	 0
?SetupFrontEndProcessor@CMcpxCoreTest@@IAEXXZ ENDP	; CMcpxCoreTest::SetupFrontEndProcessor
DSOUND	ENDS
PUBLIC	??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CL@KBCOEPGO@?$CB?$CIm_adwGPOutputBufferSizes?$FLi?$FN?5?$CF?5@ ; `string'
PUBLIC	??_C@_0CL@FALOOAAF@?$CB?$CIm_adwEPOutputBufferSizes?$FLi?$FN?5?$CF?5@ ; `string'
PUBLIC	?__AddRef@@YGPAVCMcpxSlopMemoryHeapTest@@PAV1@@Z ; __AddRef
PUBLIC	??_C@_0BI@FHFPAOJG@CMcpxSlopMemoryHeapTest?$AA@	; `string'
PUBLIC	?AllocateContext@CMcpxCoreTest@@SGJPAUMCPX_ALLOC_CONTEXT@@KK@Z ; CMcpxCoreTest::AllocateContext
EXTRN	?AC3GetTotalScratchSize@CMcpxEPDspManagerTest@@SGKXZ:NEAR ; CMcpxEPDspManagerTest::AC3GetTotalScratchSize
EXTRN	??0CMcpxSlopMemoryHeapTest@@QAE@XZ:NEAR		; CMcpxSlopMemoryHeapTest::CMcpxSlopMemoryHeapTest
EXTRN	?AddRun@CMcpxSlopMemoryHeapTest@@QAEHPAXKK@Z:NEAR ; CMcpxSlopMemoryHeapTest::AddRun
EXTRN	?g_pDirectSoundTestSlopMemoryHeap@@3PAVCMcpxSlopMemoryHeapTest@@A:DWORD ; g_pDirectSoundTestSlopMemoryHeap
EXTRN	_DwDbgAssert:NEAR
;	COMDAT ??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\mcpxcore.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@KBCOEPGO@?$CB?$CIm_adwGPOutputBufferSizes?$FLi?$FN?5?$CF?5@
DSOUND_RD	SEGMENT
??_C@_0CL@KBCOEPGO@?$CB?$CIm_adwGPOutputBufferSizes?$FLi?$FN?5?$CF?5@ DB '!'
	DB	'(m_adwGPOutputBufferSizes[i] % PAGE_SIZE)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@FALOOAAF@?$CB?$CIm_adwEPOutputBufferSizes?$FLi?$FN?5?$CF?5@
DSOUND_RD	SEGMENT
??_C@_0CL@FALOOAAF@?$CB?$CIm_adwEPOutputBufferSizes?$FLi?$FN?5?$CF?5@ DB '!'
	DB	'(m_adwEPOutputBufferSizes[i] % PAGE_SIZE)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@FHFPAOJG@CMcpxSlopMemoryHeapTest?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@FHFPAOJG@CMcpxSlopMemoryHeapTest?$AA@ DB 'CMcpxSlopMemoryHeapTe'
	DB	'st', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AllocateApuMemory@CMcpxCoreTest@@IAEJXZ
DSOUND	SEGMENT
tv252 = -152
_this$ = -148
$T32878 = -144
_hr$ = -140
_Alloc$ = -136
_i$ = -4
?AllocateApuMemory@CMcpxCoreTest@@IAEJXZ PROC NEAR	; CMcpxCoreTest::AllocateApuMemory, COMDAT
; _this$ = ecx

; 477  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 478  :     BEGIN_DEFINE_STRUCT()
; 479  :         DWORD               Size;
; 480  :         DWORD               Alignment;
; 481  :     END_DEFINE_STRUCT(MCPX_ALLOC_CTX);
; 482  : 
; 483  :     HRESULT                 hr                      = DS_OK;

  0000f	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _hr$[ebp], 0

; 484  :     MCPX_ALLOC_CTX          Alloc[MCPX_MEM_COUNT];
; 485  :     DWORD                   i;
; 486  : 
; 487  :     DPF_ENTER();
; 488  : 
; 489  :     //
; 490  :     // Calculate allocation sizes and alignment.  We piggy-back the SGE heap
; 491  :     // run markers on the magic write buffer since the magic write only needs
; 492  :     // a single DWORD.  When we're building the boot sound, we allocate memory
; 493  :     // for the I3DL2 reverb in the GP scratch.
; 494  :     //
; 495  :     // WARNING: to use some of the slop memory allocated due to alignement
; 496  :     // restrictions, we're piggybacking some data structures on these
; 497  :     // buffers.  Use extreme care when changing any of these sizes.
; 498  :     //
; 499  : 
; 500  :     for(i = 0, Alloc[MCPX_MEM_GPOUTPUT].Size = 0; i < NUMELMS(m_adwGPOutputBufferSizes); i++)

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _Alloc$[ebp], 0
  0002a	eb 09		 jmp	 SHORT $L32207
$L32208:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002f	83 c0 01	 add	 eax, 1
  00032	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L32207:
  00035	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  00039	73 49		 jae	 SHORT $L32209

; 501  :     {
; 502  :         ASSERT(!(m_adwGPOutputBufferSizes[i] % PAGE_SIZE));

  0003b	68 f6 01 00 00	 push	 502			; 000001f6H
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@KBCOEPGO@?$CB?$CIm_adwGPOutputBufferSizes?$FLi?$FN?5?$CF?5@
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004d	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?m_adwGPOutputBufferSizes@CMcpxCoreTest@@2QBKB[ecx*4]
  00054	33 d2		 xor	 edx, edx
  00056	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0005b	f7 f1		 div	 ecx
  0005d	f7 da		 neg	 edx
  0005f	1b d2		 sbb	 edx, edx
  00061	f7 da		 neg	 edx
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 _DwDbgAssert
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 503  :         Alloc[MCPX_MEM_GPOUTPUT].Size += m_adwGPOutputBufferSizes[i];

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0006f	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _Alloc$[ebp]
  00075	03 04 95 00 00
	00 00		 add	 eax, DWORD PTR ?m_adwGPOutputBufferSizes@CMcpxCoreTest@@2QBKB[edx*4]
  0007c	89 85 78 ff ff
	ff		 mov	 DWORD PTR _Alloc$[ebp], eax

; 504  :     }

  00082	eb a8		 jmp	 SHORT $L32208
$L32209:

; 505  : 
; 506  :     Alloc[MCPX_MEM_GPOUTPUT].Alignment = PAGE_SIZE;

  00084	c7 85 7c ff ff
	ff 00 10 00 00	 mov	 DWORD PTR _Alloc$[ebp+4], 4096 ; 00001000H

; 507  : 
; 508  :     for(i = 0, Alloc[MCPX_MEM_EPOUTPUT].Size = 0; i < NUMELMS(m_adwEPOutputBufferSizes); i++)

  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00095	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _Alloc$[ebp+8], 0
  0009c	eb 09		 jmp	 SHORT $L32212
$L32213:
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000a1	83 c1 01	 add	 ecx, 1
  000a4	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L32212:
  000a7	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  000ab	73 43		 jae	 SHORT $L32214

; 509  :     {
; 510  :         ASSERT(!(m_adwEPOutputBufferSizes[i] % PAGE_SIZE));

  000ad	68 fe 01 00 00	 push	 510			; 000001feH
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@FALOOAAF@?$CB?$CIm_adwEPOutputBufferSizes?$FLi?$FN?5?$CF?5@
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000bf	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB[edx*4]
  000c6	33 d2		 xor	 edx, edx
  000c8	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000cd	f7 f1		 div	 ecx
  000cf	f7 da		 neg	 edx
  000d1	1b d2		 sbb	 edx, edx
  000d3	f7 da		 neg	 edx
  000d5	52		 push	 edx
  000d6	e8 00 00 00 00	 call	 _DwDbgAssert
  000db	83 c4 10	 add	 esp, 16			; 00000010H

; 511  :         Alloc[MCPX_MEM_EPOUTPUT].Size += m_adwEPOutputBufferSizes[i];

  000de	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000e1	8b 45 80	 mov	 eax, DWORD PTR _Alloc$[ebp+8]
  000e4	03 04 95 00 00
	00 00		 add	 eax, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB[edx*4]
  000eb	89 45 80	 mov	 DWORD PTR _Alloc$[ebp+8], eax

; 512  :     }

  000ee	eb ae		 jmp	 SHORT $L32213
$L32214:

; 513  : 
; 514  :     Alloc[MCPX_MEM_EPOUTPUT].Alignment = PAGE_SIZE;

  000f0	c7 45 84 00 10
	00 00		 mov	 DWORD PTR _Alloc$[ebp+12], 4096 ; 00001000H

; 515  : 
; 516  :     Alloc[MCPX_MEM_MAGICWRITE].Size = sizeof(DWORD);

  000f7	c7 45 88 04 00
	00 00		 mov	 DWORD PTR _Alloc$[ebp+16], 4

; 517  :     Alloc[MCPX_MEM_MAGICWRITE].Alignment = PAGE_SIZE;

  000fe	c7 45 8c 00 10
	00 00		 mov	 DWORD PTR _Alloc$[ebp+20], 4096 ; 00001000H

; 518  : 
; 519  :     Alloc[MCPX_MEM_VOICE].Size = MCPX_HW_MAX_VOICES * NV_PAVS_SIZE;

  00105	c7 45 90 00 80
	00 00		 mov	 DWORD PTR _Alloc$[ebp+24], 32768 ; 00008000H

; 520  :     Alloc[MCPX_MEM_VOICE].Alignment = 0x8000;

  0010c	c7 45 94 00 80
	00 00		 mov	 DWORD PTR _Alloc$[ebp+28], 32768 ; 00008000H

; 521  : 
; 522  :     Alloc[MCPX_MEM_NOTIFIERS].Size = sizeof(MCPX_HW_NOTIFICATION) * MCPX_HW_MAX_NOTIFIERS;

  00113	c7 45 98 20 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+32], 16416 ; 00004020H

; 523  :     Alloc[MCPX_MEM_NOTIFIERS].Alignment = 0x4000;

  0011a	c7 45 9c 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+36], 16384 ; 00004000H

; 524  : 
; 525  :     Alloc[MCPX_MEM_INPUTSGE].Size = MCPX_HW_MAX_BUFFER_PRDS * NV_PSGE_SIZE;

  00121	c7 45 a0 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+40], 16384 ; 00004000H

; 526  :     Alloc[MCPX_MEM_INPUTSGE].Alignment = 0x4000;

  00128	c7 45 a4 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+44], 16384 ; 00004000H

; 527  : 
; 528  :     Alloc[MCPX_MEM_INPUTPRD].Size = MCPX_HW_MAX_SSL_PRDS * NV_PSGE_SIZE;

  0012f	c7 45 a8 00 00
	01 00		 mov	 DWORD PTR _Alloc$[ebp+48], 65536 ; 00010000H

; 529  :     Alloc[MCPX_MEM_INPUTPRD].Alignment = 0x4000;

  00136	c7 45 ac 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+52], 16384 ; 00004000H

; 530  : 
; 531  :     Alloc[MCPX_MEM_HRTFTARGET].Size = MCPX_HW_MAX_3D_VOICES * MCPX_HW_3DFILTERS_PER_VOICE * NV_PAHRTFT_SIZE;

  0013d	c7 45 b0 00 20
	00 00		 mov	 DWORD PTR _Alloc$[ebp+56], 8192 ; 00002000H

; 532  :     Alloc[MCPX_MEM_HRTFTARGET].Alignment = 0x4000;

  00144	c7 45 b4 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+60], 16384 ; 00004000H

; 533  : 
; 534  :     Alloc[MCPX_MEM_HRTFCURRENT].Size = MCPX_HW_MAX_3D_VOICES * NV_PAHRTFC_SIZE;

  0014b	c7 45 b8 00 20
	00 00		 mov	 DWORD PTR _Alloc$[ebp+64], 8192 ; 00002000H

; 535  :     Alloc[MCPX_MEM_HRTFCURRENT].Alignment = 0x4000;

  00152	c7 45 bc 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+68], 16384 ; 00004000H

; 536  : 
; 537  :     Alloc[MCPX_MEM_GPOUTPUTSGE].Size = Alloc[MCPX_MEM_GPOUTPUT].Size / PAGE_SIZE * NV_PSGE_SIZE;

  00159	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _Alloc$[ebp]
  0015f	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00162	c1 e1 03	 shl	 ecx, 3
  00165	89 4d c0	 mov	 DWORD PTR _Alloc$[ebp+72], ecx

; 538  :     Alloc[MCPX_MEM_GPOUTPUTSGE].Alignment = 0x4000;

  00168	c7 45 c4 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+76], 16384 ; 00004000H

; 539  : 
; 540  :     Alloc[MCPX_MEM_EPOUTPUTSGE].Size = Alloc[MCPX_MEM_EPOUTPUT].Size / PAGE_SIZE * NV_PSGE_SIZE;

  0016f	8b 55 80	 mov	 edx, DWORD PTR _Alloc$[ebp+8]
  00172	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  00175	c1 e2 03	 shl	 edx, 3
  00178	89 55 c8	 mov	 DWORD PTR _Alloc$[ebp+80], edx

; 541  :     Alloc[MCPX_MEM_EPOUTPUTSGE].Alignment = 0x4000;

  0017b	c7 45 cc 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+84], 16384 ; 00004000H

; 542  : 
; 543  :     Alloc[MCPX_MEM_GPMULTIPASS].Size = MCPX_HW_MULTIPASS_NUM_PAGES * PAGE_SIZE;

  00182	c7 45 d0 00 10
	00 00		 mov	 DWORD PTR _Alloc$[ebp+88], 4096 ; 00001000H

; 544  :     Alloc[MCPX_MEM_GPMULTIPASS].Alignment = 0x4000;

  00189	c7 45 d4 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+92], 16384 ; 00004000H

; 545  : 
; 546  :     Alloc[MCPX_MEM_GPSCRATCH].Size = ((MCPX_HW_MULTIPASS_NUM_PAGES + MCPX_HW_AC3_NUM_INPUT_PAGES) * PAGE_SIZE) + MCPX_GLOBAL_PROC_SCRATCH_SIZE;

  00190	c7 45 d8 00 c0
	00 00		 mov	 DWORD PTR _Alloc$[ebp+96], 49152 ; 0000c000H

; 547  :     Alloc[MCPX_MEM_GPSCRATCH].Alignment = 0x4000;

  00197	c7 45 dc 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+100], 16384 ; 00004000H

; 548  : 
; 549  : #ifdef MCPX_BOOT_LIB
; 550  :          
; 551  :     Alloc[MCPX_MEM_GPSCRATCH].Size += 0x600000;
; 552  : 
; 553  : #endif // MCPX_BOOT_LIB
; 554  : 
; 555  :     Alloc[MCPX_MEM_GPSCRATCHSGE].Size = (MCPX_HW_MAX_FX_SCRATCH_PAGES + (Alloc[MCPX_MEM_GPSCRATCH].Size / PAGE_SIZE)) * NV_PSGE_SIZE;

  0019e	8b 45 d8	 mov	 eax, DWORD PTR _Alloc$[ebp+96]
  001a1	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  001a4	8d 0c c5 00 10
	00 00		 lea	 ecx, DWORD PTR [eax*8+4096]
  001ab	89 4d e0	 mov	 DWORD PTR _Alloc$[ebp+104], ecx

; 556  :     Alloc[MCPX_MEM_GPSCRATCHSGE].Alignment = 0x4000;

  001ae	c7 45 e4 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+108], 16384 ; 00004000H

; 557  : 
; 558  :     Alloc[MCPX_MEM_EPSCRATCH].Size = ((CMcpxEPDspManagerTest::AC3GetTotalScratchSize() / PAGE_SIZE) + 1 + MCPX_HW_AC3_NUM_INPUT_PAGES) * PAGE_SIZE;

  001b5	e8 00 00 00 00	 call	 ?AC3GetTotalScratchSize@CMcpxEPDspManagerTest@@SGKXZ ; CMcpxEPDspManagerTest::AC3GetTotalScratchSize
  001ba	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  001bd	83 c0 04	 add	 eax, 4
  001c0	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  001c3	89 45 e8	 mov	 DWORD PTR _Alloc$[ebp+112], eax

; 559  :     Alloc[MCPX_MEM_EPSCRATCH].Alignment = 0x4000;

  001c6	c7 45 ec 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+116], 16384 ; 00004000H

; 560  : 
; 561  :     Alloc[MCPX_MEM_EPSCRATCHSGE].Size = Alloc[MCPX_MEM_EPSCRATCH].Size / PAGE_SIZE * NV_PSGE_SIZE;

  001cd	8b 55 e8	 mov	 edx, DWORD PTR _Alloc$[ebp+112]
  001d0	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  001d3	c1 e2 03	 shl	 edx, 3
  001d6	89 55 f0	 mov	 DWORD PTR _Alloc$[ebp+120], edx

; 562  :     Alloc[MCPX_MEM_EPSCRATCHSGE].Alignment = 0x4000;

  001d9	c7 45 f4 00 40
	00 00		 mov	 DWORD PTR _Alloc$[ebp+124], 16384 ; 00004000H

; 563  : 
; 564  : #ifdef ENABLE_SLOP_MEMORY_RECOVERY
; 565  : 
; 566  :     //
; 567  :     // Allocate the heap to track unused physical memory so we can reuse it
; 568  :     // later
; 569  :     //
; 570  : 
; 571  :     if(g_pDirectSoundTestSlopMemoryHeap)

  001e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pDirectSoundTestSlopMemoryHeap@@3PAVCMcpxSlopMemoryHeapTest@@A, 0 ; g_pDirectSoundTestSlopMemoryHeap
  001e7	74 16		 je	 SHORT $L32221

; 572  :     {
; 573  :         m_pSlopMemoryHeap = ADDREF(g_pDirectSoundTestSlopMemoryHeap);

  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pDirectSoundTestSlopMemoryHeap@@3PAVCMcpxSlopMemoryHeapTest@@A ; g_pDirectSoundTestSlopMemoryHeap
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?__AddRef@@YGPAVCMcpxSlopMemoryHeapTest@@PAV1@@Z ; __AddRef
  001f4	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001fa	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 574  :     }
; 575  :     else

  001fd	eb 6d		 jmp	 SHORT $L32226
$L32221:

; 576  :     {
; 577  :         hr = HRFROMP(m_pSlopMemoryHeap = NEW(CMcpxSlopMemoryHeapTest));

  001ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@FHFPAOJG@CMcpxSlopMemoryHeapTest?$AA@
  00204	68 41 02 00 00	 push	 577			; 00000241H
  00209	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0020e	6a 1c		 push	 28			; 0000001cH
  00210	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00215	83 c4 10	 add	 esp, 16			; 00000010H
  00218	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T32878[ebp], eax
  0021e	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR $T32878[ebp], 0
  00225	74 13		 je	 SHORT $L32879
  00227	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T32878[ebp]
  0022d	e8 00 00 00 00	 call	 ??0CMcpxSlopMemoryHeapTest@@QAE@XZ ; CMcpxSlopMemoryHeapTest::CMcpxSlopMemoryHeapTest
  00232	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv252[ebp], eax
  00238	eb 0a		 jmp	 SHORT $L32880
$L32879:
  0023a	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv252[ebp], 0
$L32880:
  00244	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0024a	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv252[ebp]
  00250	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00253	33 c9		 xor	 ecx, ecx
  00255	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR tv252[ebp], 0
  0025c	0f 95 c1	 setne	 cl
  0025f	49		 dec	 ecx
  00260	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00266	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], ecx
$L32226:

; 578  :     }
; 579  : 
; 580  : #endif // ENABLE_SLOP_MEMORY_RECOVERY
; 581  : 
; 582  :     //
; 583  :     // Allocate APU memory
; 584  :     //
; 585  : 
; 586  :     for(i = 0; (i < NUMELMS(Alloc)) && SUCCEEDED(hr); i++)

  0026c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00273	eb 09		 jmp	 SHORT $L32233
$L32234:
  00275	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00278	83 c2 01	 add	 edx, 1
  0027b	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L32233:
  0027e	83 7d fc 10	 cmp	 DWORD PTR _i$[ebp], 16	; 00000010H
  00282	0f 83 a7 00 00
	00		 jae	 $L32235
  00288	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0028f	0f 8c 9a 00 00
	00		 jl	 $L32235

; 587  :     {
; 588  :         m_ctxMemory[i].Size = Alloc[i].Size;

  00295	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00298	c1 e0 04	 shl	 eax, 4
  0029b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0029e	8b 94 cd 78 ff
	ff ff		 mov	 edx, DWORD PTR _Alloc$[ebp+ecx*8]
  002a5	89 90 08 00 00
	00		 mov	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[eax+8], edx

; 589  :         
; 590  :         hr = AllocateContext(&m_ctxMemory[i], Alloc[i].Alignment, PAGE_READWRITE);

  002ab	6a 04		 push	 4
  002ad	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002b0	8b 8c c5 7c ff
	ff ff		 mov	 ecx, DWORD PTR _Alloc$[ebp+eax*8+4]
  002b7	51		 push	 ecx
  002b8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002bb	c1 e2 04	 shl	 edx, 4
  002be	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A ; CMcpxCoreTest::m_ctxMemory
  002c4	52		 push	 edx
  002c5	e8 00 00 00 00	 call	 ?AllocateContext@CMcpxCoreTest@@SGJPAUMCPX_ALLOC_CONTEXT@@KK@Z ; CMcpxCoreTest::AllocateContext
  002ca	89 85 74 ff ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 591  : 
; 592  : #ifdef ENABLE_SLOP_MEMORY_RECOVERY
; 593  : 
; 594  :         if(SUCCEEDED(hr))

  002d0	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  002d7	7c 51		 jl	 SHORT $L32237

; 595  :         {
; 596  :             m_ctxMemory[i].fOwned = !m_pSlopMemoryHeap->AddRun(m_ctxMemory[i].VirtualAddress, BLOCKALIGNPAD(m_ctxMemory[i].Size, PAGE_SIZE), m_ctxMemory[i].Size);

  002d9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  002dc	c1 e0 04	 shl	 eax, 4
  002df	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[eax+8]
  002e5	51		 push	 ecx
  002e6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002e9	c1 e2 04	 shl	 edx, 4
  002ec	8b 82 08 00 00
	00		 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[edx+8]
  002f2	05 ff 0f 00 00	 add	 eax, 4095		; 00000fffH
  002f7	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  002fa	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  002fd	50		 push	 eax
  002fe	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00301	c1 e1 04	 shl	 ecx, 4
  00304	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[ecx]
  0030a	52		 push	 edx
  0030b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00311	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00314	e8 00 00 00 00	 call	 ?AddRun@CMcpxSlopMemoryHeapTest@@QAEHPAXKK@Z ; CMcpxSlopMemoryHeapTest::AddRun
  00319	f7 d8		 neg	 eax
  0031b	1b c0		 sbb	 eax, eax
  0031d	40		 inc	 eax
  0031e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00321	c1 e1 04	 shl	 ecx, 4
  00324	89 81 0c 00 00
	00		 mov	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A[ecx+12], eax
$L32237:

; 597  :         }
; 598  : 
; 599  : #endif // ENABLE_SLOP_MEMORY_RECOVERY
; 600  : 
; 601  :     }

  0032a	e9 46 ff ff ff	 jmp	 $L32234
$L32235:

; 602  : 
; 603  :     DPF_LEAVE_HRESULT(hr);
; 604  : 
; 605  :     return hr;

  0032f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 606  : }

  00335	8b e5		 mov	 esp, ebp
  00337	5d		 pop	 ebp
  00338	c3		 ret	 0
?AllocateApuMemory@CMcpxCoreTest@@IAEJXZ ENDP		; CMcpxCoreTest::AllocateApuMemory
DSOUND	ENDS
EXTRN	_DirectSoundTestTrackingMemAlloc@24:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :     return DirectSoundTestTrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _DirectSoundTestTrackingMemAlloc@24

; 170  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
DSOUND	ENDS
PUBLIC	??_C@_0BO@KCCGGAEN@?$CI8?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ ; `string'
EXTRN	_DirectSoundRequiredMixBins_3D:QWORD
;	COMDAT ??_C@_0BO@KCCGGAEN@?$CI8?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.cpp
DSOUND_RD	SEGMENT
??_C@_0BO@KCCGGAEN@?$CI8?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ DB '('
	DB	'8) <= PIO_METHOD_QUEUE_CLEAR', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetupVoiceProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -12
_dwHrtfMixBins$ = -8
_i$ = -4
?SetupVoiceProcessor@CMcpxCoreTest@@IAEXXZ PROC NEAR	; CMcpxCoreTest::SetupVoiceProcessor, COMDAT
; _this$ = ecx

; 632  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 633  :     DWORD                   dwHrtfMixBins;
; 634  :     DWORD                   i;
; 635  : 
; 636  :     DPF_ENTER();
; 637  :     MCPX_CHECK_VOICE_FIFO_INIT(8);

  00009	68 7d 02 00 00	 push	 637			; 0000027dH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@KCCGGAEN@?$CI8?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  00018	6a 00		 push	 0
  0001a	e8 00 00 00 00	 call	 _DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H
$L32246:
  00022	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00027	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  0002d	c1 e9 02	 shr	 ecx, 2
  00030	83 f9 08	 cmp	 ecx, 8
  00033	73 02		 jae	 SHORT $L32247
  00035	eb eb		 jmp	 SHORT $L32246
$L32247:

; 638  : 
; 639  :     //
; 640  :     // Set up the HW voice data structures to point to themselves
; 641  :     //
; 642  : 
; 643  :     for(i = 0; i < MCPX_HW_MAX_VOICES; i++) 

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003e	eb 09		 jmp	 SHORT $L32250
$L32251:
  00040	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00043	83 c2 01	 add	 edx, 1
  00046	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L32250:
  00049	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00050	73 1a		 jae	 SHORT $L32252

; 644  :     {
; 645  :         MCPX_VOICE_STRUCT_WRITE(i, NV_PAVS_VOICE_TAR_PITCH_LINK, MCPX_MAKE_REG_VALUE(i, NV_PAVS_VOICE_TAR_PITCH_LINK_NEXT_VOICE_HANDLE));

  00052	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00055	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005d	c1 e1 07	 shl	 ecx, 7
  00060	8b 15 30 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  00066	89 44 0a 7c	 mov	 DWORD PTR [edx+ecx+124], eax

; 646  :     }

  0006a	eb d4		 jmp	 SHORT $L32251
$L32252:

; 647  : 
; 648  :     //
; 649  :     // Program the DMA PRD/SGE lists base addresses
; 650  :     //
; 651  : 
; 652  :     MCPX_REG_WRITE(NV_PAPU_VPVADDR, m_ctxMemory[MCPX_MEM_VOICE].PhysicalAddress);

  0006c	a1 34 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+52
  00071	a3 2c 20 80 fe	 mov	 DWORD PTR ds:-25157588, eax

; 653  :     MCPX_REG_WRITE(NV_PAPU_VPHTADDR, m_ctxMemory[MCPX_MEM_HRTFTARGET].PhysicalAddress);

  00076	8b 0d 74 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+116
  0007c	89 0d 38 20 80
	fe		 mov	 DWORD PTR ds:-25157576, ecx

; 654  :     MCPX_REG_WRITE(NV_PAPU_VPHCADDR, m_ctxMemory[MCPX_MEM_HRTFCURRENT].PhysicalAddress);

  00082	8b 15 84 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+132
  00088	89 15 3c 20 80
	fe		 mov	 DWORD PTR ds:-25157572, edx

; 655  :     MCPX_REG_WRITE(NV_PAPU_VPSGEADDR, m_ctxMemory[MCPX_MEM_INPUTSGE].PhysicalAddress);

  0008e	a1 54 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+84
  00093	a3 30 20 80 fe	 mov	 DWORD PTR ds:-25157584, eax

; 656  :     MCPX_REG_WRITE(NV_PAPU_VPSSLADDR, m_ctxMemory[MCPX_MEM_INPUTPRD].PhysicalAddress);

  00098	8b 0d 64 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+100
  0009e	89 0d 34 20 80
	fe		 mov	 DWORD PTR ds:-25157580, ecx

; 657  :     MCPX_REG_WRITE(NV_PAPU_FENADDR, m_ctxMemory[MCPX_MEM_NOTIFIERS].PhysicalAddress);

  000a4	8b 15 44 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+68
  000aa	89 15 5c 11 80
	fe		 mov	 DWORD PTR ds:-25161380, edx

; 658  : 
; 659  :     //
; 660  :     // Initialize all the global tracking parameters
; 661  :     //
; 662  : 
; 663  :     MCPX_VOICE_WRITE(SetPitchTracking, MCPX_HW_DEFAULT_TRACKING);

  000b0	b8 a4 02 00 00	 mov	 eax, 676		; 000002a4H
  000b5	c7 80 00 00 82
	fe ff 0f 00 00	 mov	 DWORD PTR [eax-25034752], 4095 ; 00000fffH

; 664  :     MCPX_VOICE_WRITE(SetFilterTracking, MCPX_HW_DEFAULT_TRACKING);

  000bf	b9 b0 02 00 00	 mov	 ecx, 688		; 000002b0H
  000c4	c7 81 00 00 82
	fe ff 0f 00 00	 mov	 DWORD PTR [ecx-25034752], 4095 ; 00000fffH

; 665  :     MCPX_VOICE_WRITE(SetVolumeTracking, MCPX_HW_DEFAULT_TRACKING);

  000ce	ba a0 02 00 00	 mov	 edx, 672		; 000002a0H
  000d3	c7 82 00 00 82
	fe ff 0f 00 00	 mov	 DWORD PTR [edx-25034752], 4095 ; 00000fffH

; 666  :     MCPX_VOICE_WRITE(SetHRTFTracking, MCPX_HW_DEFAULT_TRACKING);

  000dd	b8 a8 02 00 00	 mov	 eax, 680		; 000002a8H
  000e2	c7 80 00 00 82
	fe ff 0f 00 00	 mov	 DWORD PTR [eax-25034752], 4095 ; 00000fffH

; 667  :     MCPX_VOICE_WRITE(SetITDTracking, MCPX_HW_DEFAULT_TRACKING);

  000ec	b9 ac 02 00 00	 mov	 ecx, 684		; 000002acH
  000f1	c7 81 00 00 82
	fe ff 0f 00 00	 mov	 DWORD PTR [ecx-25034752], 4095 ; 00000fffH

; 668  : 
; 669  :     //
; 670  :     // Map the GP multipass page into the reserved SGE
; 671  :     //
; 672  : 
; 673  :     MCPX_VOICE_WRITE(SetCurrentInBufSGE, MCPX_HW_MAX_BUFFER_PRDS - 1);

  000fb	ba 04 08 00 00	 mov	 edx, 2052		; 00000804H
  00100	c7 82 00 00 82
	fe ff 07 00 00	 mov	 DWORD PTR [edx-25034752], 2047 ; 000007ffH

; 674  :     MCPX_VOICE_WRITE(SetCurrentInBufSGEOffset, m_ctxMemory[MCPX_MEM_GPMULTIPASS].PhysicalAddress);

  0010a	b8 08 08 00 00	 mov	 eax, 2056		; 00000808H
  0010f	8b 0d b4 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+180
  00115	89 88 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], ecx

; 675  : 
; 676  :     //
; 677  :     // Set 3D mixbins
; 678  :     //
; 679  : 
; 680  :     dwHrtfMixBins = MCPX_MAKE_REG_VALUE(DirectSoundRequiredMixBins_3D.lpMixBinVolumePairs[0].dwMixBin, NV1BA0_PIO_SET_HRTF_SUBMIXES_BIN0);

  0011b	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _DirectSoundRequiredMixBins_3D+4
  00121	8b 02		 mov	 eax, DWORD PTR [edx]
  00123	83 e0 1f	 and	 eax, 31			; 0000001fH
  00126	89 45 f8	 mov	 DWORD PTR _dwHrtfMixBins$[ebp], eax

; 681  :     dwHrtfMixBins |= MCPX_MAKE_REG_VALUE(DirectSoundRequiredMixBins_3D.lpMixBinVolumePairs[1].dwMixBin, NV1BA0_PIO_SET_HRTF_SUBMIXES_BIN1);

  00129	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _DirectSoundRequiredMixBins_3D+4
  0012f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00132	83 e2 1f	 and	 edx, 31			; 0000001fH
  00135	c1 e2 08	 shl	 edx, 8
  00138	8b 45 f8	 mov	 eax, DWORD PTR _dwHrtfMixBins$[ebp]
  0013b	0b c2		 or	 eax, edx
  0013d	89 45 f8	 mov	 DWORD PTR _dwHrtfMixBins$[ebp], eax

; 682  :     dwHrtfMixBins |= MCPX_MAKE_REG_VALUE(DirectSoundRequiredMixBins_3D.lpMixBinVolumePairs[2].dwMixBin, NV1BA0_PIO_SET_HRTF_SUBMIXES_BIN2);

  00140	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _DirectSoundRequiredMixBins_3D+4
  00146	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00149	83 e2 1f	 and	 edx, 31			; 0000001fH
  0014c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0014f	8b 45 f8	 mov	 eax, DWORD PTR _dwHrtfMixBins$[ebp]
  00152	0b c2		 or	 eax, edx
  00154	89 45 f8	 mov	 DWORD PTR _dwHrtfMixBins$[ebp], eax

; 683  :     dwHrtfMixBins |= MCPX_MAKE_REG_VALUE(DirectSoundRequiredMixBins_3D.lpMixBinVolumePairs[3].dwMixBin, NV1BA0_PIO_SET_HRTF_SUBMIXES_BIN3);

  00157	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _DirectSoundRequiredMixBins_3D+4
  0015d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00160	83 e2 1f	 and	 edx, 31			; 0000001fH
  00163	c1 e2 18	 shl	 edx, 24			; 00000018H
  00166	8b 45 f8	 mov	 eax, DWORD PTR _dwHrtfMixBins$[ebp]
  00169	0b c2		 or	 eax, edx
  0016b	89 45 f8	 mov	 DWORD PTR _dwHrtfMixBins$[ebp], eax

; 684  : 
; 685  :     MCPX_VOICE_WRITE(SetHRTFSubmixes, dwHrtfMixBins);

  0016e	b9 c0 02 00 00	 mov	 ecx, 704		; 000002c0H
  00173	8b 55 f8	 mov	 edx, DWORD PTR _dwHrtfMixBins$[ebp]
  00176	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 686  : 
; 687  :     DPF_LEAVE_VOID();
; 688  : }

  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
?SetupVoiceProcessor@CMcpxCoreTest@@IAEXXZ ENDP		; CMcpxCoreTest::SetupVoiceProcessor
DSOUND	ENDS
PUBLIC	??_C@_0DO@JKHGMFJD@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@ ; `string'
PUBLIC	??_C@_0DD@NPIDPDEA@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@ ; `string'
PUBLIC	??_C@_0CA@HJHFIAGH@?$CB?$CIdwTotalSgeCount?5?$CG?50xFFFF0000?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ ; `string'
PUBLIC	??_C@_0BG@CFBPDMGJ@CMcpxGPDspManagerTest?$AA@	; `string'
PUBLIC	??_C@_0CI@LICNKCLH@Failed?5to?5alloc?5DSP?5and?5scratch?5@ ; `string'
EXTRN	??0CMcpxGPDspManagerTest@@QAE@XZ:NEAR		; CMcpxGPDspManagerTest::CMcpxGPDspManagerTest
EXTRN	?Initialize@CMcpxGPDspManagerTest@@QAEXXZ:NEAR	; CMcpxGPDspManagerTest::Initialize
;	COMDAT ??_C@_0DO@JKHGMFJD@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@
DSOUND_RD	SEGMENT
??_C@_0DO@JKHGMFJD@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@ DB '!(m_'
	DB	'ctxMemory[MCPX_MEM_GPOUTPUT].PhysicalAddress % PAGE_SIZE)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@NPIDPDEA@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@
DSOUND_RD	SEGMENT
??_C@_0DD@NPIDPDEA@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@ DB '!(m_'
	DB	'ctxMemory[MCPX_MEM_GPOUTPUT].Size % PAGE_SIZE)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@HJHFIAGH@?$CB?$CIdwTotalSgeCount?5?$CG?50xFFFF0000?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@HJHFIAGH@?$CB?$CIdwTotalSgeCount?5?$CG?50xFFFF0000?$CJ?$AA@ DB '!'
	DB	'(dwTotalSgeCount & 0xFFFF0000)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ DB '('
	DB	'2) <= PIO_METHOD_QUEUE_CLEAR', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@CFBPDMGJ@CMcpxGPDspManagerTest?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@CFBPDMGJ@CMcpxGPDspManagerTest?$AA@ DB 'CMcpxGPDspManagerTest', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@LICNKCLH@Failed?5to?5alloc?5DSP?5and?5scratch?5@
DSOUND_RD	SEGMENT
??_C@_0CI@LICNKCLH@Failed?5to?5alloc?5DSP?5and?5scratch?5@ DB 'Failed to '
	DB	'alloc DSP and scratch classes', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
tv198 = -72
_this$ = -68
$T32890 = -64
_rControl$ = -60
_z$ = -56
_dwAddress$ = -52
_rReset$ = -48
_dwSgeOffset$ = -44
_dwPos$ = -40
_pPrd$ = -36
_dwTotalSgeCount$ = -12
_i$ = -4
?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ PROC NEAR	; CMcpxCoreTest::SetupGlobalProcessor, COMDAT
; _this$ = ecx

; 714  : {                               

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 715  :     DWORD                   adwSgeCounts[MCPX_GPOUTPUT_COUNT];
; 716  :     DWORD                   dwTotalSgeCount;
; 717  :     DWORD                   dwSgeOffset;
; 718  :     DWORD                   dwAddress;
; 719  :     R_GP_RESET              rReset;
; 720  :     R_GPDMA_CONFIG          rGpDmaConfig;
; 721  :     R_GP_CONTROL            rControl;
; 722  :     DSP_CONTROL             DspControl;
; 723  :     DWORD                   dwPos;
; 724  :     DWORD                   i, z;
; 725  :     MCP1_PRD *              pPrd;
; 726  : 
; 727  :     DPF_ENTER();
; 728  :     
; 729  :     //
; 730  :     // Output buffer SGE table base address for output buffers and input buffers
; 731  :     //
; 732  : 
; 733  :     MCPX_REG_WRITE(NV_PAPU_GPFADDR, m_ctxMemory[MCPX_MEM_GPOUTPUTSGE].PhysicalAddress);

  00009	a1 94 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+148
  0000e	a3 44 20 80 fe	 mov	 DWORD PTR ds:-25157564, eax

; 734  : 
; 735  :     //
; 736  :     // Initialize the get/put pointers
; 737  :     //
; 738  : 
; 739  :     MCPX_REG_WRITE(NV_PAPU_GPGET, 0);

  00013	c7 05 00 ff 83
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24903936, 0

; 740  :     MCPX_REG_WRITE(NV_PAPU_GPPUT, 0);

  0001d	c7 05 04 ff 83
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24903932, 0

; 741  : 
; 742  :     //
; 743  :     // Tell the hw how big the output SGE array needs to be
; 744  :     //
; 745  : 
; 746  :     ASSERT(!(m_ctxMemory[MCPX_MEM_GPOUTPUT].PhysicalAddress % PAGE_SIZE));

  00027	68 ea 02 00 00	 push	 746			; 000002eaH
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@JKHGMFJD@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@
  00036	a1 04 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+4
  0003b	33 d2		 xor	 edx, edx
  0003d	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00042	f7 f1		 div	 ecx
  00044	f7 da		 neg	 edx
  00046	1b d2		 sbb	 edx, edx
  00048	f7 da		 neg	 edx
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 _DwDbgAssert
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 747  :     ASSERT(!(m_ctxMemory[MCPX_MEM_GPOUTPUT].Size % PAGE_SIZE));

  00053	68 eb 02 00 00	 push	 747			; 000002ebH
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@NPIDPDEA@?$CB?$CIm_ctxMemory?$FLMCPX_MEM_GPOUTPUT?$FN@
  00062	a1 08 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+8
  00067	33 d2		 xor	 edx, edx
  00069	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0006e	f7 f1		 div	 ecx
  00070	f7 da		 neg	 edx
  00072	1b d2		 sbb	 edx, edx
  00074	f7 da		 neg	 edx
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 _DwDbgAssert
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 748  : 
; 749  :     dwTotalSgeCount = m_ctxMemory[MCPX_MEM_GPOUTPUT].Size / PAGE_SIZE;

  0007f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+8
  00085	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  00088	89 55 f4	 mov	 DWORD PTR _dwTotalSgeCount$[ebp], edx

; 750  : 
; 751  :     ASSERT(!(dwTotalSgeCount & 0xFFFF0000));

  0008b	68 ef 02 00 00	 push	 751			; 000002efH
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@HJHFIAGH@?$CB?$CIdwTotalSgeCount?5?$CG?50xFFFF0000?$CJ?$AA@
  0009a	8b 45 f4	 mov	 eax, DWORD PTR _dwTotalSgeCount$[ebp]
  0009d	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  000a2	f7 d8		 neg	 eax
  000a4	1b c0		 sbb	 eax, eax
  000a6	f7 d8		 neg	 eax
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _DwDbgAssert
  000ae	83 c4 10	 add	 esp, 16			; 00000010H

; 752  : 
; 753  : 	MCPX_REG_WRITE(NV_PAPU_GPFMAXSGE, dwTotalSgeCount - 1);

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR _dwTotalSgeCount$[ebp]
  000b4	83 e9 01	 sub	 ecx, 1
  000b7	89 0d d8 20 80
	fe		 mov	 DWORD PTR ds:-25157416, ecx

; 754  : 	MCPX_REG_WRITE(NV_PAPU_FEMAXGPSGE, dwTotalSgeCount - 1);

  000bd	8b 55 f4	 mov	 edx, DWORD PTR _dwTotalSgeCount$[ebp]
  000c0	83 ea 01	 sub	 edx, 1
  000c3	89 15 48 11 80
	fe		 mov	 DWORD PTR ds:-25161400, edx

; 755  : 
; 756  :     MCPX_REG_WRITE(NV_PAPU_GPOFBASE0, 0);

  000c9	c7 05 24 30 80
	fe 00 00 00 00	 mov	 DWORD PTR ds:-25153500, 0

; 757  :     MCPX_REG_WRITE(NV_PAPU_GPOFEND0,  m_adwGPOutputBufferSizes[0]);

  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_adwGPOutputBufferSizes@CMcpxCoreTest@@2QBKB ; CMcpxCoreTest::m_adwGPOutputBufferSizes
  000d8	a3 28 30 80 fe	 mov	 DWORD PTR ds:-25153496, eax

; 758  : 
; 759  :     //
; 760  :     // Set up the output SGEs
; 761  :     //
; 762  : 
; 763  :     pPrd = (MCP1_PRD *)m_ctxMemory[MCPX_MEM_GPOUTPUTSGE].VirtualAddress;

  000dd	8b 0d 90 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+144
  000e3	89 4d dc	 mov	 DWORD PTR _pPrd$[ebp], ecx

; 764  : 
; 765  :     for(i = 0, dwSgeOffset = 0; i < MCPX_GPOUTPUT_COUNT; i++)

  000e6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ed	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dwSgeOffset$[ebp], 0
  000f4	eb 09		 jmp	 SHORT $L32324
$L32325:
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000f9	83 c2 01	 add	 edx, 1
  000fc	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L32324:
  000ff	83 7d fc 01	 cmp	 DWORD PTR _i$[ebp], 1
  00103	0f 83 3b 01 00
	00		 jae	 $L32326

; 766  :     {
; 767  :         for(z = 0; z < m_adwGPOutputBufferSizes[i] / PAGE_SIZE; z++)

  00109	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00110	eb 09		 jmp	 SHORT $L32327
$L32328:
  00112	8b 45 c8	 mov	 eax, DWORD PTR _z$[ebp]
  00115	83 c0 01	 add	 eax, 1
  00118	89 45 c8	 mov	 DWORD PTR _z$[ebp], eax
$L32327:
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0011e	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?m_adwGPOutputBufferSizes@CMcpxCoreTest@@2QBKB[ecx*4]
  00125	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  00128	39 55 c8	 cmp	 DWORD PTR _z$[ebp], edx
  0012b	0f 83 a5 00 00
	00		 jae	 $L32329

; 768  :         {
; 769  :             dwAddress = m_ctxMemory[MCPX_MEM_GPOUTPUT].PhysicalAddress + ((dwSgeOffset + z) * PAGE_SIZE);

  00131	8b 45 d4	 mov	 eax, DWORD PTR _dwSgeOffset$[ebp]
  00134	03 45 c8	 add	 eax, DWORD PTR _z$[ebp]
  00137	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0013a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+4
  00140	03 c8		 add	 ecx, eax
  00142	89 4d cc	 mov	 DWORD PTR _dwAddress$[ebp], ecx

; 770  :             
; 771  :             MCPX_CHECK_VOICE_FIFO_INIT(2);

  00145	68 03 03 00 00	 push	 771			; 00000303H
  0014a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0014f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  00154	6a 00		 push	 0
  00156	e8 00 00 00 00	 call	 _DwDbgAssert
  0015b	83 c4 10	 add	 esp, 16			; 00000010H
$L32332:
  0015e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00163	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  00169	c1 e8 02	 shr	 eax, 2
  0016c	83 f8 02	 cmp	 eax, 2
  0016f	73 02		 jae	 SHORT $L32333
  00171	eb eb		 jmp	 SHORT $L32332
$L32333:

; 772  :             MCPX_VOICE_WRITE(SetCurrentOutBufSGE, dwSgeOffset + z);

  00173	8b 4d d4	 mov	 ecx, DWORD PTR _dwSgeOffset$[ebp]
  00176	03 4d c8	 add	 ecx, DWORD PTR _z$[ebp]
  00179	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  0017e	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 773  :             MCPX_VOICE_WRITE(SetOutBufSGEOffset, dwAddress);

  00184	b8 08 18 00 00	 mov	 eax, 6152		; 00001808H
  00189	8b 4d cc	 mov	 ecx, DWORD PTR _dwAddress$[ebp]
  0018c	89 88 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], ecx

; 774  : 
; 775  :             pPrd[dwSgeOffset + z].uAddr = dwAddress;

  00192	8b 55 d4	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  00195	03 55 c8	 add	 edx, DWORD PTR _z$[ebp]
  00198	8b 45 dc	 mov	 eax, DWORD PTR _pPrd$[ebp]
  0019b	8b 4d cc	 mov	 ecx, DWORD PTR _dwAddress$[ebp]
  0019e	89 0c d0	 mov	 DWORD PTR [eax+edx*8], ecx

; 776  :             pPrd[dwSgeOffset + z].Control.uValue = 0;

  001a1	8b 55 d4	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  001a4	03 55 c8	 add	 edx, DWORD PTR _z$[ebp]
  001a7	8b 45 dc	 mov	 eax, DWORD PTR _pPrd$[ebp]
  001aa	c7 44 d0 04 00
	00 00 00	 mov	 DWORD PTR [eax+edx*8+4], 0

; 777  :             pPrd[dwSgeOffset + z].Control.Owner = NV_PSSL_PRD_CONTROL_OWN_HW;

  001b2	8b 4d d4	 mov	 ecx, DWORD PTR _dwSgeOffset$[ebp]
  001b5	03 4d c8	 add	 ecx, DWORD PTR _z$[ebp]
  001b8	8b 55 dc	 mov	 edx, DWORD PTR _pPrd$[ebp]
  001bb	8b 44 ca 04	 mov	 eax, DWORD PTR [edx+ecx*8+4]
  001bf	25 ff ff ff fe	 and	 eax, -16777217		; feffffffH
  001c4	8b 4d d4	 mov	 ecx, DWORD PTR _dwSgeOffset$[ebp]
  001c7	03 4d c8	 add	 ecx, DWORD PTR _z$[ebp]
  001ca	8b 55 dc	 mov	 edx, DWORD PTR _pPrd$[ebp]
  001cd	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 778  : 
; 779  :         }

  001d1	e9 3c ff ff ff	 jmp	 $L32328
$L32329:

; 780  :         
; 781  :         MCPX_CHECK_VOICE_FIFO_INIT(2);

  001d6	68 0d 03 00 00	 push	 781			; 0000030dH
  001db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  001e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  001e5	6a 00		 push	 0
  001e7	e8 00 00 00 00	 call	 _DwDbgAssert
  001ec	83 c4 10	 add	 esp, 16			; 00000010H
$L32341:
  001ef	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001f4	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  001fa	c1 e9 02	 shr	 ecx, 2
  001fd	83 f9 02	 cmp	 ecx, 2
  00200	73 02		 jae	 SHORT $L32342
  00202	eb eb		 jmp	 SHORT $L32341
$L32342:

; 782  :         MCPX_VOICE_WRITE(SetOutBuf[i].BA, dwSgeOffset * PAGE_SIZE);

  00204	8b 55 d4	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  00207	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  0020a	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  0020f	05 00 00 82 fe	 add	 eax, -25034752		; fe820000H
  00214	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00217	89 14 c8	 mov	 DWORD PTR [eax+ecx*8], edx

; 783  :         MCPX_VOICE_WRITE(SetOutBuf[i].Len, m_adwGPOutputBufferSizes[i]);

  0021a	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  0021f	81 c2 00 00 82
	fe		 add	 edx, -25034752		; fe820000H
  00225	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00228	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0022b	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?m_adwGPOutputBufferSizes@CMcpxCoreTest@@2QBKB[ecx*4]
  00232	89 4c c2 04	 mov	 DWORD PTR [edx+eax*8+4], ecx

; 784  : 
; 785  :         dwSgeOffset += z;

  00236	8b 55 d4	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  00239	03 55 c8	 add	 edx, DWORD PTR _z$[ebp]
  0023c	89 55 d4	 mov	 DWORD PTR _dwSgeOffset$[ebp], edx

; 786  :     }

  0023f	e9 b2 fe ff ff	 jmp	 $L32325
$L32326:

; 787  : 
; 788  :     //
; 789  :     // Allocate the scratch space management code and GP DSP code management
; 790  :     //
; 791  : 
; 792  :     if(!m_pGpDspManager)

  00244	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00247	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0024b	75 69		 jne	 SHORT $L32349

; 793  :     {
; 794  :         if(!(m_pGpDspManager = NEW(CMcpxGPDspManagerTest)))

  0024d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@CFBPDMGJ@CMcpxGPDspManagerTest?$AA@
  00252	68 1a 03 00 00	 push	 794			; 0000031aH
  00257	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0025c	6a 3c		 push	 60			; 0000003cH
  0025e	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00263	83 c4 10	 add	 esp, 16			; 00000010H
  00266	89 45 c0	 mov	 DWORD PTR $T32890[ebp], eax
  00269	83 7d c0 00	 cmp	 DWORD PTR $T32890[ebp], 0
  0026d	74 0d		 je	 SHORT $L32891
  0026f	8b 4d c0	 mov	 ecx, DWORD PTR $T32890[ebp]
  00272	e8 00 00 00 00	 call	 ??0CMcpxGPDspManagerTest@@QAE@XZ ; CMcpxGPDspManagerTest::CMcpxGPDspManagerTest
  00277	89 45 b8	 mov	 DWORD PTR tv198[ebp], eax
  0027a	eb 07		 jmp	 SHORT $L32892
$L32891:
  0027c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv198[ebp], 0
$L32892:
  00283	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00286	8b 55 b8	 mov	 edx, DWORD PTR tv198[ebp]
  00289	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0028c	83 7d b8 00	 cmp	 DWORD PTR tv198[ebp], 0
  00290	75 19		 jne	 SHORT $L32352

; 795  :         {
; 796  :             ASSERTMSG("Failed to alloc DSP and scratch classes");

  00292	68 1c 03 00 00	 push	 796			; 0000031cH
  00297	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0029c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@LICNKCLH@Failed?5to?5alloc?5DSP?5and?5scratch?5@
  002a1	6a 01		 push	 1
  002a3	e8 00 00 00 00	 call	 _DwDbgAssert
  002a8	83 c4 10	 add	 esp, 16			; 00000010H
$L32352:

; 797  :         }
; 798  : 
; 799  :         m_pGpDspManager->Initialize();

  002ab	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  002ae	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002b1	e8 00 00 00 00	 call	 ?Initialize@CMcpxGPDspManagerTest@@QAEXXZ ; CMcpxGPDspManagerTest::Initialize
$L32349:

; 800  :     }
; 801  : 
; 802  :     //
; 803  :     // Take the GP peripherals out of reset, leave DSP core in reset state
; 804  :     //
; 805  : 
; 806  :     rReset.uValue = 0;

  002b6	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _rReset$[ebp], 0

; 807  :     rReset.Global = NV_PAPU_GPRST_GPRST_DISABLED;

  002bd	8b 4d d0	 mov	 ecx, DWORD PTR _rReset$[ebp]
  002c0	83 c9 01	 or	 ecx, 1
  002c3	89 4d d0	 mov	 DWORD PTR _rReset$[ebp], ecx

; 808  :     rReset.DSP = NV_PAPU_GPRST_GPDSPRST_ENABLED;

  002c6	8b 55 d0	 mov	 edx, DWORD PTR _rReset$[ebp]
  002c9	83 e2 fd	 and	 edx, -3			; fffffffdH
  002cc	89 55 d0	 mov	 DWORD PTR _rReset$[ebp], edx

; 809  :     rReset.NMI = NV_PAPU_GPRST_GPNMI_DISABLED;

  002cf	8b 45 d0	 mov	 eax, DWORD PTR _rReset$[ebp]
  002d2	83 e0 fb	 and	 eax, -5			; fffffffbH
  002d5	89 45 d0	 mov	 DWORD PTR _rReset$[ebp], eax

; 810  :     rReset.Abort = NV_PAPU_GPRST_GPABORT_DISABLED;

  002d8	8b 4d d0	 mov	 ecx, DWORD PTR _rReset$[ebp]
  002db	83 e1 f7	 and	 ecx, -9			; fffffff7H
  002de	89 4d d0	 mov	 DWORD PTR _rReset$[ebp], ecx

; 811  : 
; 812  :     MCPX_REG_WRITE(NV_PAPU_GPRST, rReset.uValue);

  002e1	8b 55 d0	 mov	 edx, DWORD PTR _rReset$[ebp]
  002e4	89 15 fc ff 83
	fe		 mov	 DWORD PTR ds:-24903684, edx

; 813  : 
; 814  :     //
; 815  :     // Enable the GP
; 816  :     //
; 817  : 
; 818  :     rControl.Idle = NV_PAPU_GPIDRDY_GPSETIDLE_SET;

  002ea	8b 45 c4	 mov	 eax, DWORD PTR _rControl$[ebp]
  002ed	83 c8 01	 or	 eax, 1
  002f0	89 45 c4	 mov	 DWORD PTR _rControl$[ebp], eax

; 819  :     rControl.IntrNotify = NV_PAPU_GPIDRDY_GPSETNINT_NOT_SET;

  002f3	8b 4d c4	 mov	 ecx, DWORD PTR _rControl$[ebp]
  002f6	83 e1 f7	 and	 ecx, -9			; fffffff7H
  002f9	89 4d c4	 mov	 DWORD PTR _rControl$[ebp], ecx

; 820  : 
; 821  :     MCPX_REG_WRITE(NV_PAPU_GPIDRDY, rControl.uValue);

  002fc	8b 55 c4	 mov	 edx, DWORD PTR _rControl$[ebp]
  002ff	89 15 10 ff 83
	fe		 mov	 DWORD PTR ds:-24903920, edx

; 822  : 
; 823  :     //
; 824  :     // Clear the interrupt status
; 825  :     //
; 826  : 
; 827  :     MCPX_REG_WRITE(NV_PAPU_GPISTS, 0xFF);

  00305	c7 05 14 ff 83
	fe ff 00 00 00	 mov	 DWORD PTR ds:-24903916, 255 ; 000000ffH

; 828  : 
; 829  :     //
; 830  :     // Reset the FIFO positions
; 831  :     //
; 832  : 
; 833  :     MCPX_REG_READ(NV_PAPU_GPOFBASE0, &dwPos);

  0030f	a1 24 30 80 fe	 mov	 eax, DWORD PTR ds:-25153500
  00314	89 45 d8	 mov	 DWORD PTR _dwPos$[ebp], eax

; 834  :     MCPX_REG_WRITE(NV_PAPU_GPOFCUR0, dwPos);

  00317	8b 4d d8	 mov	 ecx, DWORD PTR _dwPos$[ebp]
  0031a	89 0d 2c 30 80
	fe		 mov	 DWORD PTR ds:-25153492, ecx

; 835  : 
; 836  :     MCPX_REG_READ(NV_PAPU_GPOFBASE1, &dwPos);

  00320	8b 15 34 30 80
	fe		 mov	 edx, DWORD PTR ds:-25153484
  00326	89 55 d8	 mov	 DWORD PTR _dwPos$[ebp], edx

; 837  :     MCPX_REG_WRITE(NV_PAPU_GPOFCUR1, dwPos);

  00329	8b 45 d8	 mov	 eax, DWORD PTR _dwPos$[ebp]
  0032c	a3 3c 30 80 fe	 mov	 DWORD PTR ds:-25153476, eax

; 838  : 
; 839  :     MCPX_REG_READ(NV_PAPU_GPOFBASE2, &dwPos);

  00331	8b 0d 44 30 80
	fe		 mov	 ecx, DWORD PTR ds:-25153468
  00337	89 4d d8	 mov	 DWORD PTR _dwPos$[ebp], ecx

; 840  :     MCPX_REG_WRITE(NV_PAPU_GPOFCUR2, dwPos);

  0033a	8b 55 d8	 mov	 edx, DWORD PTR _dwPos$[ebp]
  0033d	89 15 4c 30 80
	fe		 mov	 DWORD PTR ds:-25153460, edx

; 841  : 
; 842  :     MCPX_REG_READ(NV_PAPU_GPOFBASE3, &dwPos);

  00343	a1 54 30 80 fe	 mov	 eax, DWORD PTR ds:-25153452
  00348	89 45 d8	 mov	 DWORD PTR _dwPos$[ebp], eax

; 843  :     MCPX_REG_WRITE(NV_PAPU_GPOFCUR3, dwPos);

  0034b	8b 4d d8	 mov	 ecx, DWORD PTR _dwPos$[ebp]
  0034e	89 0d 5c 30 80
	fe		 mov	 DWORD PTR ds:-25153444, ecx

; 844  : 
; 845  :     //
; 846  :     // Now take DSP core out of reset as well
; 847  :     //
; 848  : 
; 849  :     rReset.DSP = NV_PAPU_GPRST_GPDSPRST_DISABLED;

  00354	8b 55 d0	 mov	 edx, DWORD PTR _rReset$[ebp]
  00357	83 ca 02	 or	 edx, 2
  0035a	89 55 d0	 mov	 DWORD PTR _rReset$[ebp], edx

; 850  : 
; 851  :     MCPX_REG_WRITE(NV_PAPU_GPRST, rReset.uValue);

  0035d	8b 45 d0	 mov	 eax, DWORD PTR _rReset$[ebp]
  00360	a3 fc ff 83 fe	 mov	 DWORD PTR ds:-24903684, eax

; 852  : 
; 853  :     DPF_LEAVE_VOID();
; 854  : }

  00365	8b e5		 mov	 esp, ebp
  00367	5d		 pop	 ebp
  00368	c3		 ret	 0
?SetupGlobalProcessor@CMcpxCoreTest@@IAEXXZ ENDP	; CMcpxCoreTest::SetupGlobalProcessor
DSOUND	ENDS
PUBLIC	??_C@_0BG@PBCDKMKO@CMcpxEPDspManagerTest?$AA@	; `string'
PUBLIC	??_C@_0CI@DCFHDMOM@Failed?5to?5alloc?5Dsp?5and?5scratch?5@ ; `string'
EXTRN	??0CMcpxEPDspManagerTest@@QAE@XZ:NEAR		; CMcpxEPDspManagerTest::CMcpxEPDspManagerTest
EXTRN	?Initialize@CMcpxEPDspManagerTest@@QAEXPAVCMcpxGPDspManagerTest@@@Z:NEAR ; CMcpxEPDspManagerTest::Initialize
EXTRN	?AC3SetAnalogOutput@CMcpxEPDspManagerTest@@QAEXKK@Z:NEAR ; CMcpxEPDspManagerTest::AC3SetAnalogOutput
EXTRN	?AC3SetDigitalOutput@CMcpxEPDspManagerTest@@QAEXKK@Z:NEAR ; CMcpxEPDspManagerTest::AC3SetDigitalOutput
EXTRN	?GetDolbyConfigTable@CMcpxEPDspManagerTest@@QAEPAUDOLBY_CONFIG_TABLE@@XZ:NEAR ; CMcpxEPDspManagerTest::GetDolbyConfigTable
EXTRN	?SetMultipassBuffer@CMcpxGPDspManagerTest@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z:NEAR ; CMcpxGPDspManagerTest::SetMultipassBuffer
;	COMDAT ??_C@_0BG@PBCDKMKO@CMcpxEPDspManagerTest?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@PBCDKMKO@CMcpxEPDspManagerTest?$AA@ DB 'CMcpxEPDspManagerTest', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@DCFHDMOM@Failed?5to?5alloc?5Dsp?5and?5scratch?5@
DSOUND_RD	SEGMENT
??_C@_0CI@DCFHDMOM@Failed?5to?5alloc?5Dsp?5and?5scratch?5@ DB 'Failed to '
	DB	'alloc Dsp and scratch classes', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
tv82 = -56
_this$ = -52
$T32896 = -48
_pTable$ = -44
_rControl$ = -40
_z$ = -36
_dwAddress$ = -32
_rReset$ = -28
_dwSgeOffset$ = -24
_pPrd$ = -20
_dwTotalSgeCount$ = -16
_i$ = -8
_fInitial$ = -4
?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ PROC NEAR	; CMcpxCoreTest::SetupEncodeProcessor, COMDAT
; _this$ = ecx

; 882  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 883  :     DWORD                   dwTotalSgeCount;
; 884  :     DWORD                   dwSgeOffset;
; 885  :     DWORD                   dwAddress;
; 886  :     R_GP_RESET              rReset;
; 887  :     R_GP_CONTROL            rControl;
; 888  :     MCP1_PRD *              pPrd;
; 889  :     R_GPDMA_CONFIG          rConfig;
; 890  :     DOLBY_CONFIG_TABLE *    pTable;
; 891  :     BOOL                    fInitial;
; 892  :     DWORD                   i, z;
; 893  : 
; 894  :     DPF_ENTER();
; 895  : 
; 896  :     //
; 897  :     // take EP out of reset, but leave DSP core in reset
; 898  :     //
; 899  : 
; 900  :     rReset.uValue = 0;

  00009	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _rReset$[ebp], 0

; 901  :     rReset.Global = NV_PAPU_EPRST_EPRST_DISABLED;

  00010	8b 45 e4	 mov	 eax, DWORD PTR _rReset$[ebp]
  00013	83 c8 01	 or	 eax, 1
  00016	89 45 e4	 mov	 DWORD PTR _rReset$[ebp], eax

; 902  :     rReset.DSP = NV_PAPU_EPRST_EPDSPRST_ENABLED;

  00019	8b 4d e4	 mov	 ecx, DWORD PTR _rReset$[ebp]
  0001c	83 e1 fd	 and	 ecx, -3			; fffffffdH
  0001f	89 4d e4	 mov	 DWORD PTR _rReset$[ebp], ecx

; 903  :     rReset.NMI = NV_PAPU_EPRST_EPNMI_DISABLED;

  00022	8b 55 e4	 mov	 edx, DWORD PTR _rReset$[ebp]
  00025	83 e2 fb	 and	 edx, -5			; fffffffbH
  00028	89 55 e4	 mov	 DWORD PTR _rReset$[ebp], edx

; 904  :     rReset.Abort = NV_PAPU_EPRST_EPABORT_DISABLED;

  0002b	8b 45 e4	 mov	 eax, DWORD PTR _rReset$[ebp]
  0002e	83 e0 f7	 and	 eax, -9			; fffffff7H
  00031	89 45 e4	 mov	 DWORD PTR _rReset$[ebp], eax

; 905  : 
; 906  :     MCPX_REG_WRITE(NV_PAPU_EPRST, rReset.uValue);

  00034	8b 4d e4	 mov	 ecx, DWORD PTR _rReset$[ebp]
  00037	89 0d fc ff 85
	fe		 mov	 DWORD PTR ds:-24772612, ecx

; 907  : 
; 908  :     //
; 909  :     // setup the scratch space management and dsp download 
; 910  :     //
; 911  : 
; 912  :     if(fInitial = !m_pEpDspManager)

  0003d	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00040	33 c0		 xor	 eax, eax
  00042	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00046	0f 94 c0	 sete	 al
  00049	89 45 fc	 mov	 DWORD PTR _fInitial$[ebp], eax
  0004c	83 7d fc 00	 cmp	 DWORD PTR _fInitial$[ebp], 0
  00050	74 70		 je	 SHORT $L32392

; 913  :     {
; 914  :         if(!(m_pEpDspManager = NEW(CMcpxEPDspManagerTest))) 

  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@PBCDKMKO@CMcpxEPDspManagerTest?$AA@
  00057	68 92 03 00 00	 push	 914			; 00000392H
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00061	6a 0c		 push	 12			; 0000000cH
  00063	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	89 45 d0	 mov	 DWORD PTR $T32896[ebp], eax
  0006e	83 7d d0 00	 cmp	 DWORD PTR $T32896[ebp], 0
  00072	74 0d		 je	 SHORT $L32897
  00074	8b 4d d0	 mov	 ecx, DWORD PTR $T32896[ebp]
  00077	e8 00 00 00 00	 call	 ??0CMcpxEPDspManagerTest@@QAE@XZ ; CMcpxEPDspManagerTest::CMcpxEPDspManagerTest
  0007c	89 45 c8	 mov	 DWORD PTR tv82[ebp], eax
  0007f	eb 07		 jmp	 SHORT $L32898
$L32897:
  00081	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$L32898:
  00088	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	8b 55 c8	 mov	 edx, DWORD PTR tv82[ebp]
  0008e	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  00091	83 7d c8 00	 cmp	 DWORD PTR tv82[ebp], 0
  00095	75 19		 jne	 SHORT $L32395

; 915  :         {
; 916  :             ASSERTMSG("Failed to alloc Dsp and scratch classes");

  00097	68 94 03 00 00	 push	 916			; 00000394H
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@DCFHDMOM@Failed?5to?5alloc?5Dsp?5and?5scratch?5@
  000a6	6a 01		 push	 1
  000a8	e8 00 00 00 00	 call	 _DwDbgAssert
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
$L32395:

; 917  :         }
; 918  : 
; 919  :         m_pEpDspManager->Initialize(m_pGpDspManager);

  000b0	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b6	51		 push	 ecx
  000b7	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  000bd	e8 00 00 00 00	 call	 ?Initialize@CMcpxEPDspManagerTest@@QAEXPAVCMcpxGPDspManagerTest@@@Z ; CMcpxEPDspManagerTest::Initialize
$L32392:

; 920  :     }
; 921  :     
; 922  :     //
; 923  :     // Output buffer SGE table base address for output buffers
; 924  :     //
; 925  : 
; 926  :     MCPX_REG_WRITE(NV_PAPU_EPFADDR, m_ctxMemory[MCPX_MEM_EPOUTPUTSGE].PhysicalAddress);

  000c2	a1 a4 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+164
  000c7	a3 4c 20 80 fe	 mov	 DWORD PTR ds:-25157556, eax

; 927  : 
; 928  :     //
; 929  :     // Initialize the get/put pointers
; 930  :     //
; 931  : 
; 932  :     MCPX_REG_WRITE(NV_PAPU_EPGET, 0);

  000cc	c7 05 00 ff 85
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24772864, 0

; 933  :     MCPX_REG_WRITE(NV_PAPU_EPPUT, 0);

  000d6	c7 05 04 ff 85
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24772860, 0

; 934  : 
; 935  :     //
; 936  :     // Tell the hw how big the output SGE array needs to be
; 937  :     //
; 938  : 
; 939  :     dwTotalSgeCount = m_ctxMemory[MCPX_MEM_EPOUTPUT].Size / PAGE_SIZE;

  000e0	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+24
  000e6	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  000e9	89 4d f0	 mov	 DWORD PTR _dwTotalSgeCount$[ebp], ecx

; 940  : 
; 941  :     ASSERT(!(dwTotalSgeCount & 0xFFFF0000));

  000ec	68 ad 03 00 00	 push	 941			; 000003adH
  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@HJHFIAGH@?$CB?$CIdwTotalSgeCount?5?$CG?50xFFFF0000?$CJ?$AA@
  000fb	8b 55 f0	 mov	 edx, DWORD PTR _dwTotalSgeCount$[ebp]
  000fe	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  00104	f7 da		 neg	 edx
  00106	1b d2		 sbb	 edx, edx
  00108	f7 da		 neg	 edx
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 _DwDbgAssert
  00110	83 c4 10	 add	 esp, 16			; 00000010H

; 942  : 	MCPX_REG_WRITE(NV_PAPU_EPFMAXSGE, dwTotalSgeCount - 1);

  00113	8b 45 f0	 mov	 eax, DWORD PTR _dwTotalSgeCount$[ebp]
  00116	83 e8 01	 sub	 eax, 1
  00119	a3 e0 20 80 fe	 mov	 DWORD PTR ds:-25157408, eax

; 943  : 
; 944  :     //
; 945  :     // Set up the actual PRDs (aka SGEs) in the hardware-owned PRD table
; 946  :     //
; 947  : 
; 948  :     pPrd = (MCP1_PRD *)m_ctxMemory[MCPX_MEM_EPOUTPUTSGE].VirtualAddress;

  0011e	8b 0d a0 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+160
  00124	89 4d ec	 mov	 DWORD PTR _pPrd$[ebp], ecx

; 949  : 
; 950  :     for(i = 0, dwSgeOffset = 0; i < MCPX_EPOUTPUT_COUNT; i++)

  00127	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0012e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwSgeOffset$[ebp], 0
  00135	eb 09		 jmp	 SHORT $L32407
$L32408:
  00137	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0013a	83 c2 01	 add	 edx, 1
  0013d	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L32407:
  00140	83 7d f8 02	 cmp	 DWORD PTR _i$[ebp], 2
  00144	0f 83 b5 00 00
	00		 jae	 $L32409

; 951  :     {
; 952  :         for(z = 0; z < m_adwEPOutputBufferSizes[i] / PAGE_SIZE; z++)

  0014a	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00151	eb 09		 jmp	 SHORT $L32410
$L32411:
  00153	8b 45 dc	 mov	 eax, DWORD PTR _z$[ebp]
  00156	83 c0 01	 add	 eax, 1
  00159	89 45 dc	 mov	 DWORD PTR _z$[ebp], eax
$L32410:
  0015c	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0015f	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB[ecx*4]
  00166	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  00169	39 55 dc	 cmp	 DWORD PTR _z$[ebp], edx
  0016c	73 55		 jae	 SHORT $L32412

; 953  :         {
; 954  :             dwAddress = m_ctxMemory[MCPX_MEM_EPOUTPUT].PhysicalAddress + ((dwSgeOffset + z) * PAGE_SIZE);

  0016e	8b 45 e8	 mov	 eax, DWORD PTR _dwSgeOffset$[ebp]
  00171	03 45 dc	 add	 eax, DWORD PTR _z$[ebp]
  00174	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  00177	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+20
  0017d	03 c8		 add	 ecx, eax
  0017f	89 4d e0	 mov	 DWORD PTR _dwAddress$[ebp], ecx

; 955  :             
; 956  :             pPrd[dwSgeOffset + z].uAddr = dwAddress;

  00182	8b 55 e8	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  00185	03 55 dc	 add	 edx, DWORD PTR _z$[ebp]
  00188	8b 45 ec	 mov	 eax, DWORD PTR _pPrd$[ebp]
  0018b	8b 4d e0	 mov	 ecx, DWORD PTR _dwAddress$[ebp]
  0018e	89 0c d0	 mov	 DWORD PTR [eax+edx*8], ecx

; 957  :             pPrd[dwSgeOffset + z].Control.uValue = 0;

  00191	8b 55 e8	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  00194	03 55 dc	 add	 edx, DWORD PTR _z$[ebp]
  00197	8b 45 ec	 mov	 eax, DWORD PTR _pPrd$[ebp]
  0019a	c7 44 d0 04 00
	00 00 00	 mov	 DWORD PTR [eax+edx*8+4], 0

; 958  :             pPrd[dwSgeOffset + z].Control.Owner = NV_PSSL_PRD_CONTROL_OWN_HW;

  001a2	8b 4d e8	 mov	 ecx, DWORD PTR _dwSgeOffset$[ebp]
  001a5	03 4d dc	 add	 ecx, DWORD PTR _z$[ebp]
  001a8	8b 55 ec	 mov	 edx, DWORD PTR _pPrd$[ebp]
  001ab	8b 44 ca 04	 mov	 eax, DWORD PTR [edx+ecx*8+4]
  001af	25 ff ff ff fe	 and	 eax, -16777217		; feffffffH
  001b4	8b 4d e8	 mov	 ecx, DWORD PTR _dwSgeOffset$[ebp]
  001b7	03 4d dc	 add	 ecx, DWORD PTR _z$[ebp]
  001ba	8b 55 ec	 mov	 edx, DWORD PTR _pPrd$[ebp]
  001bd	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 959  :         }

  001c1	eb 90		 jmp	 SHORT $L32411
$L32412:

; 960  :         
; 961  :         MCPX_REG_WRITE(NV_PAPU_EPOFBASE0 + (0x10 * i), dwSgeOffset * PAGE_SIZE);

  001c3	8b 45 e8	 mov	 eax, DWORD PTR _dwSgeOffset$[ebp]
  001c6	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  001c9	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001cc	c1 e1 04	 shl	 ecx, 4
  001cf	89 81 24 40 80
	fe		 mov	 DWORD PTR [ecx-25149404], eax

; 962  :         MCPX_REG_WRITE(NV_PAPU_EPOFEND0 + (0x10 * i), dwSgeOffset * PAGE_SIZE + m_adwEPOutputBufferSizes[i]); 

  001d5	8b 55 e8	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  001d8	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  001db	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001de	03 14 85 00 00
	00 00		 add	 edx, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB[eax*4]
  001e5	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001e8	c1 e1 04	 shl	 ecx, 4
  001eb	89 91 28 40 80
	fe		 mov	 DWORD PTR [ecx-25149400], edx

; 963  : 
; 964  :         dwSgeOffset += z;

  001f1	8b 55 e8	 mov	 edx, DWORD PTR _dwSgeOffset$[ebp]
  001f4	03 55 dc	 add	 edx, DWORD PTR _z$[ebp]
  001f7	89 55 e8	 mov	 DWORD PTR _dwSgeOffset$[ebp], edx

; 965  :     }

  001fa	e9 38 ff ff ff	 jmp	 $L32408
$L32409:

; 966  : 
; 967  :     if(fInitial)

  001ff	83 7d fc 00	 cmp	 DWORD PTR _fInitial$[ebp], 0
  00203	0f 84 ac 00 00
	00		 je	 $L32417

; 968  :     {
; 969  :         //
; 970  :         // update the DSP dolby code loader table with the output buffer offsets
; 971  :         //
; 972  : 
; 973  :         m_pEpDspManager->AC3SetAnalogOutput(MCPX_EPOUTPUT_AC97_ANALOG, m_adwEPOutputBufferSizes[MCPX_EPOUTPUT_AC97_ANALOG]);

  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB
  0020e	50		 push	 eax
  0020f	6a 00		 push	 0
  00211	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00214	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00217	e8 00 00 00 00	 call	 ?AC3SetAnalogOutput@CMcpxEPDspManagerTest@@QAEXKK@Z ; CMcpxEPDspManagerTest::AC3SetAnalogOutput

; 974  : 
; 975  :         //
; 976  :         // Now the digital fifo. Its base offset is right after the analog FIFO
; 977  :         // update the loader table
; 978  :         //
; 979  : 
; 980  :         m_pEpDspManager->AC3SetDigitalOutput(MCPX_EPOUTPUT_AC97_DIGITAL, m_adwEPOutputBufferSizes[MCPX_EPOUTPUT_AC97_DIGITAL]);

  0021c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB+4
  00222	52		 push	 edx
  00223	6a 01		 push	 1
  00225	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00228	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0022b	e8 00 00 00 00	 call	 ?AC3SetDigitalOutput@CMcpxEPDspManagerTest@@QAEXKK@Z ; CMcpxEPDspManagerTest::AC3SetDigitalOutput

; 981  : 
; 982  :         //
; 983  :         // add the pages used for multipass buffer output from the GP, into the GP scratch
; 984  :         // we do this here since the EpDspManager->Initialize() needs to run first and add 
; 985  :         // its AC3 pages at the end of scratch first. It needs to happen in this order
; 986  :         //
; 987  : 
; 988  :         m_pGpDspManager->SetMultipassBuffer(&m_ctxMemory[MCPX_MEM_GPMULTIPASS], MCPX_HW_MULTIPASS_NUM_PAGES);   

  00230	6a 01		 push	 1
  00232	68 b0 00 00 00	 push	 OFFSET FLAT:?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+176
  00237	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0023a	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0023d	e8 00 00 00 00	 call	 ?SetMultipassBuffer@CMcpxGPDspManagerTest@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z ; CMcpxGPDspManagerTest::SetMultipassBuffer

; 989  : 
; 990  :         //
; 991  :         // based on the speaker config, setup the dolby DSP code to do the right thing
; 992  :         //
; 993  : 
; 994  :         if(!DSSPEAKER_IS_SURROUND(m_pSettings->m_dwSpeakerConfig))

  00242	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00245	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00248	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0024b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00251	83 f9 02	 cmp	 ecx, 2
  00254	74 5f		 je	 SHORT $L32417
  00256	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00259	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0025c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0025f	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00265	85 c9		 test	 ecx, ecx
  00267	75 4c		 jne	 SHORT $L32417

; 995  :         {
; 996  :             pTable = m_pEpDspManager->GetDolbyConfigTable();

  00269	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0026c	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0026f	e8 00 00 00 00	 call	 ?GetDolbyConfigTable@CMcpxEPDspManagerTest@@QAEPAUDOLBY_CONFIG_TABLE@@XZ ; CMcpxEPDspManagerTest::GetDolbyConfigTable
  00274	89 45 d4	 mov	 DWORD PTR _pTable$[ebp], eax

; 997  : 
; 998  :             pTable->do_surround_encode = FALSE;

  00277	8b 45 d4	 mov	 eax, DWORD PTR _pTable$[ebp]
  0027a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 999  :             pTable->do_game_encode = FALSE;

  00281	8b 4d d4	 mov	 ecx, DWORD PTR _pTable$[ebp]
  00284	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1000 : 
; 1001 :             if(DSSPEAKER_BASIC(m_pSettings->m_dwSpeakerConfig) == DSSPEAKER_MONO) 

  0028b	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0028e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00291	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00294	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0029a	83 f9 01	 cmp	 ecx, 1
  0029d	75 0c		 jne	 SHORT $L32421

; 1002 :             {
; 1003 :                 pTable->do_downmix_encode = 1;

  0029f	8b 55 d4	 mov	 edx, DWORD PTR _pTable$[ebp]
  002a2	c7 42 0c 01 00
	00 00		 mov	 DWORD PTR [edx+12], 1

; 1004 :             } 
; 1005 :             else 

  002a9	eb 0a		 jmp	 SHORT $L32417
$L32421:

; 1006 :             {
; 1007 :                 pTable->do_downmix_encode = 2;

  002ab	8b 45 d4	 mov	 eax, DWORD PTR _pTable$[ebp]
  002ae	c7 40 0c 02 00
	00 00		 mov	 DWORD PTR [eax+12], 2
$L32417:

; 1008 :             }
; 1009 :         }
; 1010 :     }
; 1011 : 
; 1012 :     //
; 1013 :     // setup cfg reg
; 1014 :     //
; 1015 : 
; 1016 :     MCPX_REG_WRITE(NV_PAPU_EPDCFG, 0);

  002b5	c7 05 5c ff 85
	fe 00 00 00 00	 mov	 DWORD PTR ds:-24772772, 0

; 1017 : 
; 1018 :     //
; 1019 :     // setup RDY reg
; 1020 :     //
; 1021 : 
; 1022 :     rControl.uValue = 0;

  002bf	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _rControl$[ebp], 0

; 1023 :     rControl.Idle = NV_PAPU_EPIDRDY_EPSETIDLE_SET;

  002c6	8b 4d d8	 mov	 ecx, DWORD PTR _rControl$[ebp]
  002c9	83 c9 01	 or	 ecx, 1
  002cc	89 4d d8	 mov	 DWORD PTR _rControl$[ebp], ecx

; 1024 :     rControl.IntrNotify = NV_PAPU_EPIDRDY_EPSETNINT_NOT_SET;

  002cf	8b 55 d8	 mov	 edx, DWORD PTR _rControl$[ebp]
  002d2	83 e2 f7	 and	 edx, -9			; fffffff7H
  002d5	89 55 d8	 mov	 DWORD PTR _rControl$[ebp], edx

; 1025 : 
; 1026 :     MCPX_REG_WRITE(NV_PAPU_EPIDRDY, rControl.uValue);

  002d8	8b 45 d8	 mov	 eax, DWORD PTR _rControl$[ebp]
  002db	a3 10 ff 85 fe	 mov	 DWORD PTR ds:-24772848, eax

; 1027 :     
; 1028 :     //
; 1029 :     // clear the EPISTS bit
; 1030 :     //
; 1031 : 
; 1032 :     MCPX_REG_WRITE(NV_PAPU_EPISTS, 0xFFFFFFFF);

  002e0	c7 05 14 ff 85
	fe ff ff ff ff	 mov	 DWORD PTR ds:-24772844, -1

; 1033 : 
; 1034 :     //
; 1035 :     // turn EP dsp core on..
; 1036 :     // BUGBUG nvidia writes a 0x1 as the last thing to turn on the EP (??)
; 1037 :     //
; 1038 : 
; 1039 :     rReset.DSP = NV_PAPU_EPRST_EPDSPRST_DISABLED;

  002ea	8b 4d e4	 mov	 ecx, DWORD PTR _rReset$[ebp]
  002ed	83 c9 02	 or	 ecx, 2
  002f0	89 4d e4	 mov	 DWORD PTR _rReset$[ebp], ecx

; 1040 :     MCPX_REG_WRITE(NV_PAPU_EPRST,rReset.uValue);

  002f3	8b 55 e4	 mov	 edx, DWORD PTR _rReset$[ebp]
  002f6	89 15 fc ff 85
	fe		 mov	 DWORD PTR ds:-24772612, edx

; 1041 : 
; 1042 :     DPF_LEAVE_VOID();
; 1043 : }

  002fc	8b e5		 mov	 esp, ebp
  002fe	5d		 pop	 ebp
  002ff	c3		 ret	 0
?SetupEncodeProcessor@CMcpxCoreTest@@IAEXXZ ENDP	; CMcpxCoreTest::SetupEncodeProcessor
DSOUND	ENDS
EXTRN	?Initialize@CAc97Device@@QAEJK@Z:NEAR		; CAc97Device::Initialize
EXTRN	?CreateChannel@CAc97Device@@QAEJW4AC97CHANNELTYPE@@PAPAVCAc97Channel@@@Z:NEAR ; CAc97Device::CreateChannel
EXTRN	?Initialize@CAc97Channel@@QAEJKP6GXPAX@Z0@Z:NEAR ; CAc97Channel::Initialize
EXTRN	?AttachPacket@CAc97Channel@@QAEXKK@Z:NEAR	; CAc97Channel::AttachPacket
EXTRN	?SetMode@CAc97Channel@@QAEXK@Z:NEAR		; CAc97Channel::SetMode
; Function compile flags: /Odt
;	COMDAT ?SetupAc97@CMcpxCoreTest@@IAEJXZ
DSOUND	SEGMENT
_this$ = -20
_hr$ = -16
_dwBufferAddress$ = -12
_adwBufferSizes$ = -4
?SetupAc97@CMcpxCoreTest@@IAEJXZ PROC NEAR		; CMcpxCoreTest::SetupAc97, COMDAT
; _this$ = ecx

; 1071 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1072 :     HRESULT                 hr              = DS_OK;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1073 :     DWORD                   dwBufferAddress;
; 1074 :     LPCDWORD                adwBufferSizes;
; 1075 :     DWORD                   i;
; 1076 : 
; 1077 :     DPF_ENTER();
; 1078 : 
; 1079 : #ifndef MCPX_BOOT_LIB
; 1080 : 
; 1081 :     dwBufferAddress = m_ctxMemory[MCPX_MEM_EPOUTPUT].PhysicalAddress;

  00010	a1 14 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+20
  00015	89 45 f4	 mov	 DWORD PTR _dwBufferAddress$[ebp], eax

; 1082 :     adwBufferSizes = m_adwEPOutputBufferSizes;

  00018	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _adwBufferSizes$[ebp], OFFSET FLAT:?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB ; CMcpxCoreTest::m_adwEPOutputBufferSizes

; 1083 : 
; 1084 : #else
; 1085 : 
; 1086 :     dwBufferAddress = m_ctxMemory[MCPX_MEM_GPOUTPUT].PhysicalAddress;
; 1087 :     adwBufferSizes = m_adwGPOutputBufferSizes;
; 1088 : 
; 1089 : #endif // MCPX_BOOT_LIB
; 1090 : 
; 1091 :     //
; 1092 :     // Initialize the AC97
; 1093 :     //
; 1094 : 
; 1095 :     hr = m_Ac97.Initialize(AC97_OBJECTF_DIRECTISR);

  0001f	6a 01		 push	 1
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 14	 add	 ecx, 20			; 00000014H
  00027	e8 00 00 00 00	 call	 ?Initialize@CAc97Device@@QAEJK@Z ; CAc97Device::Initialize
  0002c	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 1096 : 
; 1097 :     //
; 1098 :     // Create AC97 output channels.  If Dolby Digital isn't turned on in the
; 1099 :     // speaker config, both the analog and digital channels will read from
; 1100 :     // the analog buffer.
; 1101 :     //
; 1102 : 
; 1103 :     if(SUCCEEDED(hr))

  0002f	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00033	7c 12		 jl	 SHORT $L32441

; 1104 :     {
; 1105 :         hr = m_Ac97.CreateChannel(AC97_CHANNELTYPE_ANALOG);

  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 14	 add	 ecx, 20			; 00000014H
  0003f	e8 00 00 00 00	 call	 ?CreateChannel@CAc97Device@@QAEJW4AC97CHANNELTYPE@@PAPAVCAc97Channel@@@Z ; CAc97Device::CreateChannel
  00044	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L32441:

; 1106 :     }
; 1107 : 
; 1108 :     if(SUCCEEDED(hr))

  00047	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 14		 jl	 SHORT $L32443

; 1109 :     {
; 1110 :         hr = m_Ac97.m_apChannels[AC97_CHANNELTYPE_ANALOG]->Initialize();

  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00059	e8 00 00 00 00	 call	 ?Initialize@CAc97Channel@@QAEJKP6GXPAX@Z0@Z ; CAc97Channel::Initialize
  0005e	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L32443:

; 1111 :     }
; 1112 : 
; 1113 :     if(SUCCEEDED(hr))

  00061	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00065	7c 15		 jl	 SHORT $L32445

; 1114 :     {
; 1115 :         m_Ac97.m_apChannels[AC97_CHANNELTYPE_ANALOG]->AttachPacket(dwBufferAddress, adwBufferSizes[AC97_CHANNELTYPE_ANALOG]);

  00067	8b 55 fc	 mov	 edx, DWORD PTR _adwBufferSizes$[ebp]
  0006a	8b 02		 mov	 eax, DWORD PTR [edx]
  0006c	50		 push	 eax
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR _dwBufferAddress$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00074	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00077	e8 00 00 00 00	 call	 ?AttachPacket@CAc97Channel@@QAEXKK@Z ; CAc97Channel::AttachPacket
$L32445:

; 1116 :     }
; 1117 : 
; 1118 :     if(SUCCEEDED(hr))

  0007c	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00080	7c 12		 jl	 SHORT $L32447

; 1119 :     {
; 1120 :         hr = m_Ac97.CreateChannel(AC97_CHANNELTYPE_DIGITAL);

  00082	6a 00		 push	 0
  00084	6a 01		 push	 1
  00086	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	83 c1 14	 add	 ecx, 20			; 00000014H
  0008c	e8 00 00 00 00	 call	 ?CreateChannel@CAc97Device@@QAEJW4AC97CHANNELTYPE@@PAPAVCAc97Channel@@@Z ; CAc97Device::CreateChannel
  00091	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L32447:

; 1121 :     }
; 1122 : 
; 1123 :     if(SUCCEEDED(hr))

  00094	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00098	7c 14		 jl	 SHORT $L32449

; 1124 :     {
; 1125 :         hr = m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->Initialize();

  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	6a 00		 push	 0
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a6	e8 00 00 00 00	 call	 ?Initialize@CAc97Channel@@QAEJKP6GXPAX@Z0@Z ; CAc97Channel::Initialize
  000ab	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L32449:

; 1126 :     }
; 1127 : 
; 1128 :     if(SUCCEEDED(hr))

  000ae	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b2	7c 64		 jl	 SHORT $L32451

; 1129 :     {
; 1130 : 
; 1131 : #ifndef MCPX_BOOT_LIB
; 1132 : 
; 1133 :         if(DSSPEAKER_IS_AC3(m_pSettings->m_dwSpeakerConfig))

  000b4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ba	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000bd	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  000c2	85 c0		 test	 eax, eax
  000c4	74 2d		 je	 SHORT $L32452

; 1134 :         {
; 1135 :             m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->AttachPacket(dwBufferAddress + adwBufferSizes[AC97_CHANNELTYPE_ANALOG], adwBufferSizes[AC97_CHANNELTYPE_DIGITAL]);

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _adwBufferSizes$[ebp]
  000c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cc	52		 push	 edx
  000cd	8b 45 fc	 mov	 eax, DWORD PTR _adwBufferSizes$[ebp]
  000d0	8b 4d f4	 mov	 ecx, DWORD PTR _dwBufferAddress$[ebp]
  000d3	03 08		 add	 ecx, DWORD PTR [eax]
  000d5	51		 push	 ecx
  000d6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  000dc	e8 00 00 00 00	 call	 ?AttachPacket@CAc97Channel@@QAEXKK@Z ; CAc97Channel::AttachPacket

; 1136 :             m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->SetMode(DSAC97_MODE_ENCODED);

  000e1	68 02 00 00 02	 push	 33554434		; 02000002H
  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ec	e8 00 00 00 00	 call	 ?SetMode@CAc97Channel@@QAEXK@Z ; CAc97Channel::SetMode

; 1137 :         }
; 1138 :         else

  000f1	eb 25		 jmp	 SHORT $L32451
$L32452:

; 1139 : 
; 1140 : #endif // MCPX_BOOT_LIB
; 1141 : 
; 1142 :         {
; 1143 :             m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->AttachPacket(dwBufferAddress, adwBufferSizes[AC97_CHANNELTYPE_ANALOG]);

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _adwBufferSizes$[ebp]
  000f6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f8	52		 push	 edx
  000f9	8b 45 f4	 mov	 eax, DWORD PTR _dwBufferAddress$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00103	e8 00 00 00 00	 call	 ?AttachPacket@CAc97Channel@@QAEXKK@Z ; CAc97Channel::AttachPacket

; 1144 :             m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->SetMode(DSAC97_MODE_PCM);

  00108	68 00 00 00 02	 push	 33554432		; 02000000H
  0010d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00110	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00113	e8 00 00 00 00	 call	 ?SetMode@CAc97Channel@@QAEXK@Z ; CAc97Channel::SetMode
$L32451:

; 1145 :         }
; 1146 :     }
; 1147 : 
; 1148 :     DPF_LEAVE_HRESULT(hr);
; 1149 : 
; 1150 : 	return hr;

  00118	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 1151 : }

  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?SetupAc97@CMcpxCoreTest@@IAEJXZ ENDP			; CMcpxCoreTest::SetupAc97
DSOUND	ENDS
PUBLIC	??0CAutoIrql@@QAE@XZ				; CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@@QAE@XZ				; CAutoIrql::~CAutoIrql
; Function compile flags: /Odt
;	COMDAT ?SetInterruptState@CMcpxCoreTest@@IAEXH@Z
DSOUND	SEGMENT
_this$ = -20
___AutoIrql$ = -16
_rInterruptMask$ = -8
_fEnabled$ = 8
?SetInterruptState@CMcpxCoreTest@@IAEXH@Z PROC NEAR	; CMcpxCoreTest::SetInterruptState, COMDAT
; _this$ = ecx

; 1177 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1178 :     R_INTR                  rInterruptMask;
; 1179 : 
; 1180 :     DPF_ENTER();
; 1181 :     AutoIrql();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@@QAE@XZ	; CAutoIrql::CAutoIrql

; 1182 : 
; 1183 :     MCPX_REG_READ(NV_PAPU_IEN, &rInterruptMask.uValue);

  00011	a1 04 10 80 fe	 mov	 eax, DWORD PTR ds:-25161724
  00016	89 45 f8	 mov	 DWORD PTR _rInterruptMask$[ebp], eax

; 1184 : 
; 1185 :     rInterruptMask.General = fEnabled ? NV_PAPU_IEN_GINTEN_ENABLED : NV_PAPU_IEN_GINTEN_DISABLED;

  00019	33 c9		 xor	 ecx, ecx
  0001b	83 7d 08 00	 cmp	 DWORD PTR _fEnabled$[ebp], 0
  0001f	0f 95 c1	 setne	 cl
  00022	83 e1 01	 and	 ecx, 1
  00025	8b 55 f8	 mov	 edx, DWORD PTR _rInterruptMask$[ebp]
  00028	83 e2 fe	 and	 edx, -2			; fffffffeH
  0002b	0b d1		 or	 edx, ecx
  0002d	89 55 f8	 mov	 DWORD PTR _rInterruptMask$[ebp], edx

; 1186 : 
; 1187 :     MCPX_REG_WRITE(NV_PAPU_IEN, rInterruptMask.uValue);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _rInterruptMask$[ebp]
  00033	a3 04 10 80 fe	 mov	 DWORD PTR ds:-25161724, eax

; 1188 : 
; 1189 :     // DPF_BLAB("Interrupts %s", fEnabled ? "enabled" : "disabled");
; 1190 : 
; 1191 :     DPF_LEAVE_VOID();
; 1192 : }

  00038	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0003b	e8 00 00 00 00	 call	 ??1CAutoIrql@@QAE@XZ	; CAutoIrql::~CAutoIrql
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?SetInterruptState@CMcpxCoreTest@@IAEXH@Z ENDP		; CMcpxCoreTest::SetInterruptState
DSOUND	ENDS
PUBLIC	??0CIrql@@QAE@XZ				; CIrql::CIrql
PUBLIC	?Raise@CIrql@@QAEXXZ				; CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\drvhlp.h
;	COMDAT ??0CAutoIrql@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoIrql@@QAE@XZ PROC NEAR				; CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@@QAE@XZ	; CIrql::CIrql

; 73   :     Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@@QAEXXZ	; CIrql::Raise

; 74   : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@@QAE@XZ ENDP				; CAutoIrql::CAutoIrql
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0CIrql@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@@QAE@XZ PROC NEAR				; CIrql::CIrql, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 40   : }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@@QAE@XZ ENDP					; CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@@QAEXXZ PROC NEAR				; CIrql::Raise, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L29688

; 45   :     {
; 46   :         m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L29688:

; 47   :     }
; 48   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@@QAEXXZ ENDP				; CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	?Lower@CIrql@@QAEXXZ				; CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\drvhlp.h
;	COMDAT ??1CAutoIrql@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoIrql@@QAE@XZ PROC NEAR				; CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   :     Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@@QAEXXZ	; CIrql::Lower

; 79   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@@QAE@XZ ENDP				; CAutoIrql::~CAutoIrql
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@@QAEXXZ PROC NEAR				; CIrql::Lower, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L29693

; 53   :     {
; 54   :         KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 55   :         m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L29693:

; 56   :     }
; 57   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@@QAEXXZ ENDP				; CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.cpp
DSOUND	ENDS
;	COMDAT ?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z
DSOUND	SEGMENT
_this$ = -16
___AutoIrql$ = -12
_dwPrivLock$ = -4
_fLocked$ = 8
?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z PROC NEAR	; CMcpxCoreTest::SetPrivLockState, COMDAT
; _this$ = ecx

; 1218 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1219 :     DWORD                   dwPrivLock;
; 1220 : 
; 1221 :     DPF_ENTER();
; 1222 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@@QAE@XZ	; CAutoIrql::CAutoIrql

; 1223 : 
; 1224 :     MCPX_REG_READ(NV_PAPU_FEPRIVLOCK, &dwPrivLock);

  00011	a1 10 15 80 fe	 mov	 eax, DWORD PTR ds:-25160432
  00016	89 45 fc	 mov	 DWORD PTR _dwPrivLock$[ebp], eax

; 1225 : 
; 1226 :     dwPrivLock = MCPX_SET_REG_VALUE(dwPrivLock, fLocked ? NV_PAPU_FEPRIVLOCK_VALUE_LOCKED : NV_PAPU_FEPRIVLOCK_VALUE_UNLOCKED, NV_PAPU_FEPRIVLOCK_VALUE);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _dwPrivLock$[ebp]
  0001c	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0001f	33 d2		 xor	 edx, edx
  00021	83 7d 08 00	 cmp	 DWORD PTR _fLocked$[ebp], 0
  00025	0f 95 c2	 setne	 dl
  00028	83 e2 01	 and	 edx, 1
  0002b	0b ca		 or	 ecx, edx
  0002d	89 4d fc	 mov	 DWORD PTR _dwPrivLock$[ebp], ecx

; 1227 : 
; 1228 :     MCPX_REG_WRITE(NV_PAPU_FEPRIVLOCK, dwPrivLock);

  00030	8b 45 fc	 mov	 eax, DWORD PTR _dwPrivLock$[ebp]
  00033	a3 10 15 80 fe	 mov	 DWORD PTR ds:-25160432, eax

; 1229 : 
; 1230 :     // DPF_BLAB("Priv lock %s", fLocked ? "locked" : "unlocked");
; 1231 : 
; 1232 :     DPF_LEAVE_VOID();
; 1233 : }

  00038	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0003b	e8 00 00 00 00	 call	 ??1CAutoIrql@@QAE@XZ	; CAutoIrql::~CAutoIrql
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?SetPrivLockState@CMcpxCoreTest@@IAEXH@Z ENDP		; CMcpxCoreTest::SetPrivLockState
DSOUND	ENDS
PUBLIC	??_C@_0BB@OCPBFOOA@Invalid?5FE?5state?$AA@	; `string'
;	COMDAT ??_C@_0BB@OCPBFOOA@Invalid?5FE?5state?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@OCPBFOOA@Invalid?5FE?5state?$AA@ DB 'Invalid FE state', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z
DSOUND	SEGMENT
tv68 = -20
_this$ = -16
___AutoIrql$ = -12
_rFeControl$ = -4
_nState$ = 8
?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z PROC NEAR ; CMcpxCoreTest::SetFrontEndState, COMDAT
; _this$ = ecx

; 1259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1260 :     R_FE_CONTROL            rFeControl;
; 1261 : 
; 1262 :     DPF_ENTER();
; 1263 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@@QAE@XZ	; CAutoIrql::CAutoIrql

; 1264 : 
; 1265 :     MCPX_REG_READ(NV_PAPU_FECTL, &rFeControl.uValue);

  00011	a1 00 11 80 fe	 mov	 eax, DWORD PTR ds:-25161472
  00016	89 45 fc	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 1266 : 
; 1267 :     switch(nState) 
; 1268 :     {

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _nState$[ebp]
  0001c	89 4d ec	 mov	 DWORD PTR tv68[ebp], ecx
  0001f	83 7d ec 03	 cmp	 DWORD PTR tv68[ebp], 3
  00023	77 7b		 ja	 SHORT $L32488
  00025	8b 55 ec	 mov	 edx, DWORD PTR tv68[ebp]
  00028	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L32929[edx*4]
$L32484:

; 1269 :         case MCPX_FE_STATE_HALTED:
; 1270 :             // DPF_BLAB("FE state set to HALTED");
; 1271 :             
; 1272 :             rFeControl.Mode = NV_PAPU_FECTL_FEMETHMODE_HALTED;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _rFeControl$[ebp]
  00032	25 1f ff ff ff	 and	 eax, -225		; ffffff1fH
  00037	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  0003c	89 45 fc	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 1273 : 
; 1274 :             break;

  0003f	eb 78		 jmp	 SHORT $L32481
$L32485:

; 1275 : 
; 1276 :         case MCPX_FE_STATE_FREE_RUNNING:
; 1277 :             // DPF_BLAB("FE state set to FREE_RUNNING");
; 1278 :             
; 1279 :             rFeControl.Mode = NV_PAPU_FECTL_FEMETHMODE_FREE_RUNNING;

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  00044	81 e1 1f ff ff
	ff		 and	 ecx, -225		; ffffff1fH
  0004a	89 4d fc	 mov	 DWORD PTR _rFeControl$[ebp], ecx

; 1280 : 
; 1281 :             break;

  0004d	eb 6a		 jmp	 SHORT $L32481
$L32486:

; 1282 : 
; 1283 :         case MCPX_FE_STATE_ISO:
; 1284 :             // DPF_BLAB("FE state set to ISO");
; 1285 :             
; 1286 :             rFeControl.WriteISO = NV_PAPU_FECTL_FEMWTYP_ISO;

  0004f	8b 55 fc	 mov	 edx, DWORD PTR _rFeControl$[ebp]
  00052	83 ca 04	 or	 edx, 4
  00055	89 55 fc	 mov	 DWORD PTR _rFeControl$[ebp], edx

; 1287 :             rFeControl.ReadISO = NV_PAPU_FECTL_FEMRTYP_ISO;

  00058	8b 45 fc	 mov	 eax, DWORD PTR _rFeControl$[ebp]
  0005b	83 c8 02	 or	 eax, 2
  0005e	89 45 fc	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 1288 :             rFeControl.NotifyISO = NV_PAPU_FECTL_FENTYP_ISO;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  00064	83 c9 01	 or	 ecx, 1
  00067	89 4d fc	 mov	 DWORD PTR _rFeControl$[ebp], ecx

; 1289 :             rFeControl.PIOClass = NV_PAPU_FECTL_FEPIOCLASS_ISO;

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _rFeControl$[ebp]
  0006d	81 ca 00 10 00
	00		 or	 edx, 4096		; 00001000H
  00073	89 55 fc	 mov	 DWORD PTR _rFeControl$[ebp], edx

; 1290 : 
; 1291 :             break;

  00076	eb 41		 jmp	 SHORT $L32481
$L32487:

; 1292 : 
; 1293 :         case MCPX_FE_STATE_NON_ISO:
; 1294 :             // DPF_BLAB("FE state set to NON_ISO");
; 1295 :             
; 1296 :             rFeControl.WriteISO = NV_PAPU_FECTL_FEMWTYP_NON_ISO;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _rFeControl$[ebp]
  0007b	83 e0 fb	 and	 eax, -5			; fffffffbH
  0007e	89 45 fc	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 1297 :             rFeControl.ReadISO = NV_PAPU_FECTL_FEMRTYP_NON_ISO;

  00081	8b 4d fc	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  00084	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00087	89 4d fc	 mov	 DWORD PTR _rFeControl$[ebp], ecx

; 1298 :             rFeControl.NotifyISO = NV_PAPU_FECTL_FENTYP_NON_ISO;

  0008a	8b 55 fc	 mov	 edx, DWORD PTR _rFeControl$[ebp]
  0008d	83 e2 fe	 and	 edx, -2			; fffffffeH
  00090	89 55 fc	 mov	 DWORD PTR _rFeControl$[ebp], edx

; 1299 :             rFeControl.PIOClass = NV_PAPU_FECTL_FEPIOCLASS_NON_ISO;

  00093	8b 45 fc	 mov	 eax, DWORD PTR _rFeControl$[ebp]
  00096	25 ff ef ff ff	 and	 eax, -4097		; ffffefffH
  0009b	89 45 fc	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 1300 : 
; 1301 :             break;

  0009e	eb 19		 jmp	 SHORT $L32481
$L32488:

; 1302 : 
; 1303 :         default:
; 1304 :             ASSERTMSG("Invalid FE state");

  000a0	68 18 05 00 00	 push	 1304			; 00000518H
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@OCPBFOOA@Invalid?5FE?5state?$AA@
  000af	6a 01		 push	 1
  000b1	e8 00 00 00 00	 call	 _DwDbgAssert
  000b6	83 c4 10	 add	 esp, 16			; 00000010H
$L32481:

; 1305 : 
; 1306 :             break;
; 1307 :     }
; 1308 : 
; 1309 :     MCPX_REG_WRITE(NV_PAPU_FECTL, rFeControl.uValue);

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  000bc	89 0d 00 11 80
	fe		 mov	 DWORD PTR ds:-25161472, ecx

; 1310 : 
; 1311 :     DPF_LEAVE_VOID();
; 1312 : }

  000c2	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  000c5	e8 00 00 00 00	 call	 ??1CAutoIrql@@QAE@XZ	; CAutoIrql::~CAutoIrql
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
$L32929:
  000d0	00 00 00 00	 DD	 $L32484
  000d4	00 00 00 00	 DD	 $L32485
  000d8	00 00 00 00	 DD	 $L32486
  000dc	00 00 00 00	 DD	 $L32487
?SetFrontEndState@CMcpxCoreTest@@IAEXW4MCPX_FE_STATE@@@Z ENDP ; CMcpxCoreTest::SetFrontEndState
DSOUND	ENDS
PUBLIC	??_C@_0BB@EKGFJNO@Invalid?5SE?5state?$AA@	; `string'
;	COMDAT ??_C@_0BB@EKGFJNO@Invalid?5SE?5state?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@EKGFJNO@Invalid?5SE?5state?$AA@ DB 'Invalid SE state', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z
DSOUND	SEGMENT
tv68 = -20
_this$ = -16
___AutoIrql$ = -12
_rSeControl$ = -4
_nState$ = 8
?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z PROC NEAR ; CMcpxCoreTest::SetSetupEngineState, COMDAT
; _this$ = ecx

; 1338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1339 :     R_SE_CONTROL            rSeControl;
; 1340 : 
; 1341 :     DPF_ENTER();
; 1342 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@@QAE@XZ	; CAutoIrql::CAutoIrql

; 1343 : 
; 1344 :     MCPX_REG_READ(NV_PAPU_SECTL, &rSeControl.uValue);

  00011	a1 00 20 80 fe	 mov	 eax, DWORD PTR ds:-25157632
  00016	89 45 fc	 mov	 DWORD PTR _rSeControl$[ebp], eax

; 1345 : 
; 1346 :     switch(nState)
; 1347 :     {

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _nState$[ebp]
  0001c	89 4d ec	 mov	 DWORD PTR tv68[ebp], ecx
  0001f	83 7d ec 05	 cmp	 DWORD PTR tv68[ebp], 5
  00023	77 76		 ja	 SHORT $L32509
  00025	8b 55 ec	 mov	 edx, DWORD PTR tv68[ebp]
  00028	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L32933[edx*4]
$L32503:

; 1348 :         case MCPX_SE_STATE_OFF:
; 1349 :             // DPF_BLAB("SE state set to OFF");
; 1350 :             
; 1351 :             rSeControl.GSCUpdate = NV_PAPU_SECTL_XCNTMODE_OFF;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _rSeControl$[ebp]
  00032	83 e0 e7	 and	 eax, -25		; ffffffe7H
  00035	89 45 fc	 mov	 DWORD PTR _rSeControl$[ebp], eax

; 1352 : 
; 1353 :             break;

  00038	eb 7a		 jmp	 SHORT $L32500
$L32504:

; 1354 : 
; 1355 :         case MCPX_SE_STATE_AC_SYNC:
; 1356 :             // DPF_BLAB("SE state set to AC_SYNC");
; 1357 :             
; 1358 :             rSeControl.GSCUpdate = NV_PAPU_SECTL_XCNTMODE_AC_SYNC;

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _rSeControl$[ebp]
  0003d	83 e1 e7	 and	 ecx, -25		; ffffffe7H
  00040	83 c9 08	 or	 ecx, 8
  00043	89 4d fc	 mov	 DWORD PTR _rSeControl$[ebp], ecx

; 1359 : 
; 1360 :             break;

  00046	eb 6c		 jmp	 SHORT $L32500
$L32505:

; 1361 : 
; 1362 :         case MCPX_SE_STATE_SW:
; 1363 :             // DPF_BLAB("SE state set to SW");
; 1364 :             
; 1365 :             rSeControl.GSCUpdate = NV_PAPU_SECTL_XCNTMODE_SW;

  00048	8b 55 fc	 mov	 edx, DWORD PTR _rSeControl$[ebp]
  0004b	83 e2 e7	 and	 edx, -25		; ffffffe7H
  0004e	83 ca 10	 or	 edx, 16			; 00000010H
  00051	89 55 fc	 mov	 DWORD PTR _rSeControl$[ebp], edx

; 1366 : 
; 1367 :             break;

  00054	eb 5e		 jmp	 SHORT $L32500
$L32506:

; 1368 : 
; 1369 :         case MCPX_SE_STATE_FREE_RUNNING:
; 1370 :             // DPF_BLAB("SE state set to FREE_RUNNING");
; 1371 :             
; 1372 :             rSeControl.GSCUpdate = NV_PAPU_SECTL_XCNTMODE_FREE_RUNNING;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _rSeControl$[ebp]
  00059	83 c8 18	 or	 eax, 24			; 00000018H
  0005c	89 45 fc	 mov	 DWORD PTR _rSeControl$[ebp], eax

; 1373 : 
; 1374 :             break;

  0005f	eb 53		 jmp	 SHORT $L32500
$L32507:

; 1375 : 
; 1376 :         case MCPX_SE_STATE_ISO:
; 1377 :             // DPF_BLAB("SE state set to ISO");
; 1378 :             
; 1379 :             rSeControl.SampleReadISO = NV_PAPU_SECTL_SESRTYP_ISO;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _rSeControl$[ebp]
  00064	83 c9 04	 or	 ecx, 4
  00067	89 4d fc	 mov	 DWORD PTR _rSeControl$[ebp], ecx

; 1380 :             rSeControl.WriteISO = NV_PAPU_SECTL_SEPWTYP_ISO;

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _rSeControl$[ebp]
  0006d	83 ca 02	 or	 edx, 2
  00070	89 55 fc	 mov	 DWORD PTR _rSeControl$[ebp], edx

; 1381 :             rSeControl.ReadISO = NV_PAPU_SECTL_SEPRTYP_ISO;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _rSeControl$[ebp]
  00076	83 c8 01	 or	 eax, 1
  00079	89 45 fc	 mov	 DWORD PTR _rSeControl$[ebp], eax

; 1382 : 
; 1383 :             break;

  0007c	eb 36		 jmp	 SHORT $L32500
$L32508:

; 1384 : 
; 1385 :         case MCPX_SE_STATE_NON_ISO:
; 1386 :             // DPF_BLAB("SE state set to NON_ISO");
; 1387 :             
; 1388 :             rSeControl.SampleReadISO = NV_PAPU_SECTL_SESRTYP_NON_ISO;

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _rSeControl$[ebp]
  00081	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00084	89 4d fc	 mov	 DWORD PTR _rSeControl$[ebp], ecx

; 1389 :             rSeControl.WriteISO = NV_PAPU_SECTL_SEPWTYP_NON_ISO;

  00087	8b 55 fc	 mov	 edx, DWORD PTR _rSeControl$[ebp]
  0008a	83 e2 fd	 and	 edx, -3			; fffffffdH
  0008d	89 55 fc	 mov	 DWORD PTR _rSeControl$[ebp], edx

; 1390 :             rSeControl.ReadISO = NV_PAPU_SECTL_SEPRTYP_NON_ISO;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _rSeControl$[ebp]
  00093	83 e0 fe	 and	 eax, -2			; fffffffeH
  00096	89 45 fc	 mov	 DWORD PTR _rSeControl$[ebp], eax

; 1391 : 
; 1392 :             break;

  00099	eb 19		 jmp	 SHORT $L32500
$L32509:

; 1393 : 
; 1394 :         default:
; 1395 :             ASSERTMSG("Invalid SE state");

  0009b	68 73 05 00 00	 push	 1395			; 00000573H
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EKGFJNO@Invalid?5SE?5state?$AA@
  000aa	6a 01		 push	 1
  000ac	e8 00 00 00 00	 call	 _DwDbgAssert
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
$L32500:

; 1396 : 
; 1397 :             break;
; 1398 :     }
; 1399 : 
; 1400 :     MCPX_REG_WRITE(NV_PAPU_SECTL, rSeControl.uValue);

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _rSeControl$[ebp]
  000b7	89 0d 00 20 80
	fe		 mov	 DWORD PTR ds:-25157632, ecx

; 1401 : 
; 1402 :     DPF_LEAVE_VOID();
; 1403 : }

  000bd	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  000c0	e8 00 00 00 00	 call	 ??1CAutoIrql@@QAE@XZ	; CAutoIrql::~CAutoIrql
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 04 00	 ret	 4
$L32933:
  000cb	00 00 00 00	 DD	 $L32503
  000cf	00 00 00 00	 DD	 $L32504
  000d3	00 00 00 00	 DD	 $L32505
  000d7	00 00 00 00	 DD	 $L32506
  000db	00 00 00 00	 DD	 $L32507
  000df	00 00 00 00	 DD	 $L32508
?SetSetupEngineState@CMcpxCoreTest@@IAEXW4MCPX_SE_STATE@@@Z ENDP ; CMcpxCoreTest::SetSetupEngineState
DSOUND	ENDS
PUBLIC	?GetPhysicalMemoryProperties@CMcpxCoreTest@@SGKPAXKPAK1@Z ; CMcpxCoreTest::GetPhysicalMemoryProperties
PUBLIC	??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@ ; `string'
EXTRN	__imp__MmGetPhysicalAddress@4:NEAR
;	COMDAT ??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@
DSOUND_RD	SEGMENT
??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@ DB '!('
	DB	'dwPhysicalAddress & (PAGE_SIZE - 1))', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetPhysicalMemoryProperties@CMcpxCoreTest@@SGKPAXKPAK1@Z
DSOUND	SEGMENT
tv85 = -20
_dwContiguousLength$ = -16
_dwPhysicalAddress$ = -12
_dwBasePhysicalAddress$ = -8
_dwBasePageOffset$ = -4
_pvBuffer$ = 8
_dwBufferSize$ = 12
_pdwPageOffset$ = 16
_pdwContiguousLength$ = 20
?GetPhysicalMemoryProperties@CMcpxCoreTest@@SGKPAXKPAK1@Z PROC NEAR ; CMcpxCoreTest::GetPhysicalMemoryProperties, COMDAT

; 1437 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1438 :     DWORD                   dwBasePhysicalAddress;
; 1439 :     DWORD                   dwBasePageOffset;
; 1440 :     DWORD                   dwContiguousLength;
; 1441 :     DWORD                   dwPhysicalAddress;
; 1442 : 
; 1443 :     DPF_ENTER();
; 1444 : 
; 1445 :     //
; 1446 :     // Get the base physical address
; 1447 :     //
; 1448 : 
; 1449 :     dwBasePhysicalAddress = MmGetPhysicalAddress(pvBuffer);

  00006	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  00010	89 45 f8	 mov	 DWORD PTR _dwBasePhysicalAddress$[ebp], eax

; 1450 : 
; 1451 :     //
; 1452 :     // Get the base page offset
; 1453 :     //
; 1454 : 
; 1455 :     dwBasePageOffset = BYTE_OFFSET(pvBuffer);

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  00016	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  0001c	89 4d fc	 mov	 DWORD PTR _dwBasePageOffset$[ebp], ecx

; 1456 : 
; 1457 :     if(pdwPageOffset)

  0001f	83 7d 10 00	 cmp	 DWORD PTR _pdwPageOffset$[ebp], 0
  00023	74 08		 je	 SHORT $L32525

; 1458 :     {
; 1459 :         *pdwPageOffset = dwBasePageOffset;

  00025	8b 55 10	 mov	 edx, DWORD PTR _pdwPageOffset$[ebp]
  00028	8b 45 fc	 mov	 eax, DWORD PTR _dwBasePageOffset$[ebp]
  0002b	89 02		 mov	 DWORD PTR [edx], eax
$L32525:

; 1460 :     }
; 1461 : 
; 1462 :     //
; 1463 :     // Find the count of contiguous bytes in the remaining pages
; 1464 :     //
; 1465 : 
; 1466 :     if(pdwContiguousLength)

  0002d	83 7d 14 00	 cmp	 DWORD PTR _pdwContiguousLength$[ebp], 0
  00031	0f 84 82 00 00
	00		 je	 $L32526

; 1467 :     {
; 1468 :         dwContiguousLength = PAGE_SIZE - dwBasePageOffset; 

  00037	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0003c	2b 4d fc	 sub	 ecx, DWORD PTR _dwBasePageOffset$[ebp]
  0003f	89 4d f0	 mov	 DWORD PTR _dwContiguousLength$[ebp], ecx
$L32528:

; 1469 : 
; 1470 :         while(dwContiguousLength < dwBufferSize)

  00042	8b 55 f0	 mov	 edx, DWORD PTR _dwContiguousLength$[ebp]
  00045	3b 55 0c	 cmp	 edx, DWORD PTR _dwBufferSize$[ebp]
  00048	73 51		 jae	 SHORT $L32529

; 1471 :         {
; 1472 :             dwPhysicalAddress = MmGetPhysicalAddress((LPBYTE)pvBuffer + dwContiguousLength);

  0004a	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0004d	03 45 f0	 add	 eax, DWORD PTR _dwContiguousLength$[ebp]
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  00057	89 45 f4	 mov	 DWORD PTR _dwPhysicalAddress$[ebp], eax

; 1473 :             ASSERT(!(dwPhysicalAddress & (PAGE_SIZE - 1)));

  0005a	68 c1 05 00 00	 push	 1473			; 000005c1H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LIAEJNAM@?$CB?$CIdwPhysicalAddress?5?$CG?5?$CIPAGE_SIZE@
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _dwPhysicalAddress$[ebp]
  0006c	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00072	f7 d9		 neg	 ecx
  00074	1b c9		 sbb	 ecx, ecx
  00076	f7 d9		 neg	 ecx
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 _DwDbgAssert
  0007e	83 c4 10	 add	 esp, 16			; 00000010H

; 1474 : 
; 1475 :             if(dwBasePhysicalAddress + dwContiguousLength != dwPhysicalAddress)

  00081	8b 55 f8	 mov	 edx, DWORD PTR _dwBasePhysicalAddress$[ebp]
  00084	03 55 f0	 add	 edx, DWORD PTR _dwContiguousLength$[ebp]
  00087	3b 55 f4	 cmp	 edx, DWORD PTR _dwPhysicalAddress$[ebp]
  0008a	74 02		 je	 SHORT $L32532

; 1476 :             {
; 1477 :                 break;

  0008c	eb 0d		 jmp	 SHORT $L32529
$L32532:

; 1478 :             }
; 1479 : 
; 1480 :             dwContiguousLength += PAGE_SIZE;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _dwContiguousLength$[ebp]
  00091	05 00 10 00 00	 add	 eax, 4096		; 00001000H
  00096	89 45 f0	 mov	 DWORD PTR _dwContiguousLength$[ebp], eax

; 1481 :         }

  00099	eb a7		 jmp	 SHORT $L32528
$L32529:

; 1482 : 
; 1483 :         *pdwContiguousLength = min(dwContiguousLength, dwBufferSize);

  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _dwContiguousLength$[ebp]
  0009e	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwBufferSize$[ebp]
  000a1	73 08		 jae	 SHORT $L32937
  000a3	8b 55 f0	 mov	 edx, DWORD PTR _dwContiguousLength$[ebp]
  000a6	89 55 ec	 mov	 DWORD PTR tv85[ebp], edx
  000a9	eb 06		 jmp	 SHORT $L32938
$L32937:
  000ab	8b 45 0c	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  000ae	89 45 ec	 mov	 DWORD PTR tv85[ebp], eax
$L32938:
  000b1	8b 4d 14	 mov	 ecx, DWORD PTR _pdwContiguousLength$[ebp]
  000b4	8b 55 ec	 mov	 edx, DWORD PTR tv85[ebp]
  000b7	89 11		 mov	 DWORD PTR [ecx], edx
$L32526:

; 1484 :     }
; 1485 : 
; 1486 :     DPF_LEAVE(dwBasePhysicalAddress);
; 1487 : 
; 1488 :     return dwBasePhysicalAddress;

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _dwBasePhysicalAddress$[ebp]

; 1489 : }

  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 10 00	 ret	 16			; 00000010H
?GetPhysicalMemoryProperties@CMcpxCoreTest@@SGKPAXKPAK1@Z ENDP ; CMcpxCoreTest::GetPhysicalMemoryProperties
DSOUND	ENDS
PUBLIC	?MapTransfer@CMcpxCoreTest@@SGKPAPAXPAK1@Z	; CMcpxCoreTest::MapTransfer
; Function compile flags: /Odt
;	COMDAT ?MapTransfer@CMcpxCoreTest@@SGKPAPAXPAK1@Z
DSOUND	SEGMENT
tv72 = -16
_dwPhysicalAddress$ = -12
_dwBytesMapped$ = -8
_dwPageOffset$ = -4
_ppvBuffer$ = 8
_pdwBufferSize$ = 12
_pdwBytesMapped$ = 16
?MapTransfer@CMcpxCoreTest@@SGKPAPAXPAK1@Z PROC NEAR	; CMcpxCoreTest::MapTransfer, COMDAT

; 1519 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1520 :     DWORD                   dwPhysicalAddress;
; 1521 :     DWORD                   dwPageOffset;
; 1522 :     DWORD                   dwBytesMapped;
; 1523 : 
; 1524 :     DPF_ENTER();
; 1525 : 
; 1526 :     dwPhysicalAddress = GetPhysicalMemoryProperties(*ppvBuffer, *pdwBufferSize, &dwPageOffset, NULL);

  00006	6a 00		 push	 0
  00008	8d 45 fc	 lea	 eax, DWORD PTR _dwPageOffset$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwBufferSize$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR _ppvBuffer$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ?GetPhysicalMemoryProperties@CMcpxCoreTest@@SGKPAXKPAK1@Z ; CMcpxCoreTest::GetPhysicalMemoryProperties
  0001d	89 45 f4	 mov	 DWORD PTR _dwPhysicalAddress$[ebp], eax

; 1527 : 
; 1528 :     dwBytesMapped = min(PAGE_SIZE - dwPageOffset, *pdwBufferSize);

  00020	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00025	2b 55 fc	 sub	 edx, DWORD PTR _dwPageOffset$[ebp]
  00028	8b 45 0c	 mov	 eax, DWORD PTR _pdwBufferSize$[ebp]
  0002b	3b 10		 cmp	 edx, DWORD PTR [eax]
  0002d	73 0d		 jae	 SHORT $L32942
  0002f	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00034	2b 4d fc	 sub	 ecx, DWORD PTR _dwPageOffset$[ebp]
  00037	89 4d f0	 mov	 DWORD PTR tv72[ebp], ecx
  0003a	eb 08		 jmp	 SHORT $L32943
$L32942:
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _pdwBufferSize$[ebp]
  0003f	8b 02		 mov	 eax, DWORD PTR [edx]
  00041	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
$L32943:
  00044	8b 4d f0	 mov	 ecx, DWORD PTR tv72[ebp]
  00047	89 4d f8	 mov	 DWORD PTR _dwBytesMapped$[ebp], ecx

; 1529 : 
; 1530 :     *ppvBuffer = (LPBYTE)*ppvBuffer + dwBytesMapped;

  0004a	8b 55 08	 mov	 edx, DWORD PTR _ppvBuffer$[ebp]
  0004d	8b 02		 mov	 eax, DWORD PTR [edx]
  0004f	03 45 f8	 add	 eax, DWORD PTR _dwBytesMapped$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _ppvBuffer$[ebp]
  00055	89 01		 mov	 DWORD PTR [ecx], eax

; 1531 :     *pdwBufferSize -= dwBytesMapped;

  00057	8b 55 0c	 mov	 edx, DWORD PTR _pdwBufferSize$[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	2b 45 f8	 sub	 eax, DWORD PTR _dwBytesMapped$[ebp]
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwBufferSize$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax

; 1532 : 
; 1533 :     if(pdwBytesMapped)

  00064	83 7d 10 00	 cmp	 DWORD PTR _pdwBytesMapped$[ebp], 0
  00068	74 08		 je	 SHORT $L32542

; 1534 :     {
; 1535 :         *pdwBytesMapped = dwBytesMapped;

  0006a	8b 55 10	 mov	 edx, DWORD PTR _pdwBytesMapped$[ebp]
  0006d	8b 45 f8	 mov	 eax, DWORD PTR _dwBytesMapped$[ebp]
  00070	89 02		 mov	 DWORD PTR [edx], eax
$L32542:

; 1536 :     }
; 1537 : 
; 1538 :     DPF_LEAVE(dwPhysicalAddress);
; 1539 : 
; 1540 :     return dwPhysicalAddress;

  00072	8b 45 f4	 mov	 eax, DWORD PTR _dwPhysicalAddress$[ebp]

; 1541 : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
?MapTransfer@CMcpxCoreTest@@SGKPAPAXPAK1@Z ENDP		; CMcpxCoreTest::MapTransfer
DSOUND	ENDS
PUBLIC	??_C@_0BK@CBDMAJHB@?$CBpContext?9?$DOVirtualAddress?$AA@ ; `string'
PUBLIC	??_C@_0BL@OPIFOBLC@?$CBpContext?9?$DOPhysicalAddress?$AA@ ; `string'
PUBLIC	??_C@_0P@JHHBFHG@pContext?9?$DOSize?$AA@	; `string'
PUBLIC	??_C@_0M@GEEDHOHN@dwAlignment?$AA@		; `string'
PUBLIC	??_C@_04ELFAHOMP@BYTE?$AA@			; `string'
PUBLIC	??_C@_0DB@DPMEBCA@?$CB?$CIpContext?9?$DOPhysicalAddress?5?$CG?5?$CId@ ; `string'
EXTRN	_DirectSoundTestTrackingPhysicalAlloc@28:NEAR
;	COMDAT ??_C@_0BK@CBDMAJHB@?$CBpContext?9?$DOVirtualAddress?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@CBDMAJHB@?$CBpContext?9?$DOVirtualAddress?$AA@ DB '!pContext->V'
	DB	'irtualAddress', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@OPIFOBLC@?$CBpContext?9?$DOPhysicalAddress?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@OPIFOBLC@?$CBpContext?9?$DOPhysicalAddress?$AA@ DB '!pContext->'
	DB	'PhysicalAddress', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@JHHBFHG@pContext?9?$DOSize?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@JHHBFHG@pContext?9?$DOSize?$AA@ DB 'pContext->Size', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@GEEDHOHN@dwAlignment?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@GEEDHOHN@dwAlignment?$AA@ DB 'dwAlignment', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
DSOUND_RD	SEGMENT
??_C@_04ELFAHOMP@BYTE?$AA@ DB 'BYTE', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@DPMEBCA@?$CB?$CIpContext?9?$DOPhysicalAddress?5?$CG?5?$CId@
DSOUND_RD	SEGMENT
??_C@_0DB@DPMEBCA@?$CB?$CIpContext?9?$DOPhysicalAddress?5?$CG?5?$CId@ DB '!'
	DB	'(pContext->PhysicalAddress & (dwAlignment - 1))', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AllocateContext@CMcpxCoreTest@@SGJPAUMCPX_ALLOC_CONTEXT@@KK@Z
DSOUND	SEGMENT
_hr$ = -4
_pContext$ = 8
_dwAlignment$ = 12
_dwFlags$ = 16
?AllocateContext@CMcpxCoreTest@@SGJPAUMCPX_ALLOC_CONTEXT@@KK@Z PROC NEAR ; CMcpxCoreTest::AllocateContext, COMDAT

; 1572 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1573 :     HRESULT                 hr;
; 1574 :     
; 1575 :     DPF_ENTER();
; 1576 : 
; 1577 :     ASSERT(!pContext->VirtualAddress);

  00004	68 29 06 00 00	 push	 1577			; 00000629H
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@CBDMAJHB@?$CBpContext?9?$DOVirtualAddress?$AA@
  00013	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00016	33 c9		 xor	 ecx, ecx
  00018	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001b	0f 95 c1	 setne	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1578 :     ASSERT(!pContext->PhysicalAddress);

  00027	68 2a 06 00 00	 push	 1578			; 0000062aH
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OPIFOBLC@?$CBpContext?9?$DOPhysicalAddress?$AA@
  00036	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  00039	33 c0		 xor	 eax, eax
  0003b	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0003f	0f 95 c0	 setne	 al
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _DwDbgAssert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 1579 :     ASSERT(pContext->Size);

  0004b	68 2b 06 00 00	 push	 1579			; 0000062bH
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@JHHBFHG@pContext?9?$DOSize?$AA@
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0005d	33 d2		 xor	 edx, edx
  0005f	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00063	0f 94 c2	 sete	 dl
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _DwDbgAssert
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 1580 :     ASSERT(dwAlignment);

  0006f	68 2c 06 00 00	 push	 1580			; 0000062cH
  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@GEEDHOHN@dwAlignment?$AA@
  0007e	33 c0		 xor	 eax, eax
  00080	83 7d 0c 00	 cmp	 DWORD PTR _dwAlignment$[ebp], 0
  00084	0f 94 c0	 sete	 al
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _DwDbgAssert
  0008d	83 c4 10	 add	 esp, 16			; 00000010H

; 1581 : 
; 1582 :     if(SUCCEEDED(hr = HRFROMP(pContext->VirtualAddress = PHYSALLOC(BYTE, pContext->Size, dwAlignment, dwFlags))))

  00090	6a 01		 push	 1
  00092	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00095	51		 push	 ecx
  00096	8b 55 0c	 mov	 edx, DWORD PTR _dwAlignment$[ebp]
  00099	52		 push	 edx
  0009a	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0009d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a0	51		 push	 ecx
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ELFAHOMP@BYTE?$AA@
  000a6	68 2e 06 00 00	 push	 1582			; 0000062eH
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  000b0	e8 00 00 00 00	 call	 _DirectSoundTestTrackingPhysicalAlloc@28
  000b5	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  000b8	89 02		 mov	 DWORD PTR [edx], eax
  000ba	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  000bd	33 c9		 xor	 ecx, ecx
  000bf	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c2	0f 95 c1	 setne	 cl
  000c5	49		 dec	 ecx
  000c6	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  000cc	89 4d fc	 mov	 DWORD PTR _hr$[ebp], ecx
  000cf	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d3	7c 3e		 jl	 SHORT $L32558

; 1583 :     {
; 1584 :         pContext->PhysicalAddress = MmGetPhysicalAddress(pContext->VirtualAddress);

  000d5	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	50		 push	 eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  000e4	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1585 :         ASSERT(!(pContext->PhysicalAddress & (dwAlignment - 1)));

  000e7	68 31 06 00 00	 push	 1585			; 00000631H
  000ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@DPMEBCA@?$CB?$CIpContext?9?$DOPhysicalAddress?5?$CG?5?$CId@
  000f6	8b 55 0c	 mov	 edx, DWORD PTR _dwAlignment$[ebp]
  000f9	83 ea 01	 sub	 edx, 1
  000fc	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  000ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00102	23 ca		 and	 ecx, edx
  00104	f7 d9		 neg	 ecx
  00106	1b c9		 sbb	 ecx, ecx
  00108	f7 d9		 neg	 ecx
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 _DwDbgAssert
  00110	83 c4 10	 add	 esp, 16			; 00000010H
$L32558:

; 1586 :     }
; 1587 : 
; 1588 :     DPF_LEAVE_HRESULT(hr);
; 1589 : 
; 1590 :     return hr;

  00113	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1591 : }

  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c2 0c 00	 ret	 12			; 0000000cH
?AllocateContext@CMcpxCoreTest@@SGJPAUMCPX_ALLOC_CONTEXT@@KK@Z ENDP ; CMcpxCoreTest::AllocateContext
DSOUND	ENDS
;	COMDAT ?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB
DSOUND_RD	SEGMENT
?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB DD 01H DUP (?) ; `CMcpxCoreTest::ResetGlobalCounters'::`2'::dwDelta
DSOUND_RD	ENDS
;	COMDAT ?$S1@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4IA
DSOUND_URW	SEGMENT
?$S1@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4IA DD 01H DUP (?) ; `CMcpxCoreTest::ResetGlobalCounters'::`2'::$S1
; Function compile flags: /Odt
DSOUND_URW	ENDS
;	COMDAT ?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ PROC NEAR	; CMcpxCoreTest::ResetGlobalCounters, COMDAT
; _this$ = ecx

; 1617 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1618 :     static const DWORD      dwDelta = m_adwEPOutputBufferSizes[MCPX_EPOUTPUT_AC97_ANALOG] / 4;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S1@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4IA
  0000c	83 e0 01	 and	 eax, 1
  0000f	85 c0		 test	 eax, eax
  00011	75 1e		 jne	 SHORT $L32569
  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$S1@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4IA
  00019	83 c9 01	 or	 ecx, 1
  0001c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?$S1@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4IA, ecx
  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB
  00028	c1 ea 02	 shr	 edx, 2
  0002b	89 15 00 00 00
	00		 mov	 DWORD PTR ?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB, edx
$L32569:

; 1619 : 
; 1620 :     DPF_ENTER();
; 1621 : 
; 1622 :     MCPX_REG_WRITE(NV_PAPU_IGSCNT, dwDelta); 

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB
  00036	a3 08 20 80 fe	 mov	 DWORD PTR ds:-25157624, eax

; 1623 :     MCPX_REG_WRITE(NV_PAPU_XGSCNT, 0);

  0003b	c7 05 0c 20 80
	fe 00 00 00 00	 mov	 DWORD PTR ds:-25157620, 0

; 1624 :     MCPX_REG_WRITE(NV_PAPU_DGSCNT, dwDelta);

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB
  0004b	89 0d 10 20 80
	fe		 mov	 DWORD PTR ds:-25157616, ecx

; 1625 :     MCPX_REG_WRITE(NV_PAPU_WGSCNT, dwDelta / 2);

  00051	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB
  00057	d1 ea		 shr	 edx, 1
  00059	89 15 14 20 80
	fe		 mov	 DWORD PTR ds:-25157612, edx

; 1626 :     MCPX_REG_WRITE(NV_PAPU_RGSCNT, dwDelta - 1);

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dwDelta@?1??ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ@4KB
  00064	83 e8 01	 sub	 eax, 1
  00067	a3 18 20 80 fe	 mov	 DWORD PTR ds:-25157608, eax

; 1627 :     MCPX_REG_WRITE(NV_PAPU_PGSCNT, 0);

  0006c	c7 05 1c 20 80
	fe 00 00 00 00	 mov	 DWORD PTR ds:-25157604, 0

; 1628 : 
; 1629 :     MCPX_REG_WRITE(NV_PAPU_EGSCNT, 6 * MCPX_HW_EP_STEP_SIZE);

  00076	c7 05 20 20 80
	fe 00 06 00 00	 mov	 DWORD PTR ds:-25157600, 1536 ; 00000600H

; 1630 :     MCPX_REG_WRITE(NV_PAPU_DEGSCNT, MCPX_HW_EP_STEP_SIZE);

  00080	c7 05 24 20 80
	fe 00 01 00 00	 mov	 DWORD PTR ds:-25157596, 256 ; 00000100H

; 1631 :     MCPX_REG_WRITE(NV_PAPU_ECNTSTP, MCPX_HW_EP_STEP_SIZE);

  0008a	c7 05 28 20 80
	fe 00 01 00 00	 mov	 DWORD PTR ds:-25157592, 256 ; 00000100H

; 1632 : 
; 1633 :     MCPX_REG_WRITE(NV_PAPU_EPOFCUR0, 1536);

  00094	c7 05 2c 40 80
	fe 00 06 00 00	 mov	 DWORD PTR ds:-25149396, 1536 ; 00000600H

; 1634 :     MCPX_REG_WRITE(NV_PAPU_EPOFCUR1, m_adwEPOutputBufferSizes[MCPX_EPOUTPUT_AC97_ANALOG] + 6144);

  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_adwEPOutputBufferSizes@CMcpxCoreTest@@2QBKB
  000a4	81 c1 00 18 00
	00		 add	 ecx, 6144		; 00001800H
  000aa	89 0d 3c 40 80
	fe		 mov	 DWORD PTR ds:-25149380, ecx

; 1635 : 
; 1636 :     DPF_LEAVE_VOID();
; 1637 : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
?ResetGlobalCounters@CMcpxCoreTest@@IAEXXZ ENDP		; CMcpxCoreTest::ResetGlobalCounters
DSOUND	ENDS
PUBLIC	??0CMcpxNotifierTest@@QAE@XZ			; CMcpxNotifierTest::CMcpxNotifierTest
PUBLIC	?Initialize@CMcpxNotifierTest@@QAEXKK@Z		; CMcpxNotifierTest::Initialize
PUBLIC	?GetStatus@CMcpxNotifierTest@@QAEHK@Z		; CMcpxNotifierTest::GetStatus
PUBLIC	?Reset@CMcpxNotifierTest@@QAEXXZ		; CMcpxNotifierTest::Reset
PUBLIC	??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ ; `string'
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ DB 'Ke'
	DB	'GetCurrentIrql() == DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ DB '('
	DB	'1) <= PIO_METHOD_QUEUE_CLEAR', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z
DSOUND	SEGMENT
_this$ = -36
$T32953 = -32
___AutoIrql$ = -28
_dwTimeout$ = -20
_rFeControl$ = -16
_Notifier$ = -12
_rSeControl$ = -4
_fIdle$ = 8
?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z PROC NEAR	; CMcpxCoreTest::IdleVoiceProcessor, COMDAT
; _this$ = ecx

; 1663 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 1664 :     DWORD                   dwTimeout   = MCPX_HW_FRAME_LENGTH_US;

  00009	c7 45 ec 9b 02
	00 00		 mov	 DWORD PTR _dwTimeout$[ebp], 667 ; 0000029bH

; 1665 :     R_FE_CONTROL            rFeControl;
; 1666 :     R_SE_CONTROL            rSeControl;
; 1667 :     CMcpxNotifierTest       Notifier;

  00010	8d 4d f4	 lea	 ecx, DWORD PTR _Notifier$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CMcpxNotifierTest@@QAE@XZ ; CMcpxNotifierTest::CMcpxNotifierTest

; 1668 : 
; 1669 :     DPF_ENTER();
; 1670 :     AutoIrql();

  00018	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0001b	e8 00 00 00 00	 call	 ??0CAutoIrql@@QAE@XZ	; CAutoIrql::CAutoIrql

; 1671 : 
; 1672 :     if(fIdle)

  00020	83 7d 08 00	 cmp	 DWORD PTR _fIdle$[ebp], 0
  00024	0f 84 0a 01 00
	00		 je	 $L32601

; 1673 :     {
; 1674 :         //
; 1675 :         // Check the current FE and SE states.  If they're not running, we
; 1676 :         // don't need to idle the VP.
; 1677 :         //
; 1678 : 
; 1679 :         fIdle = FALSE;

  0002a	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _fIdle$[ebp], 0

; 1680 :         
; 1681 :         MCPX_REG_READ(NV_PAPU_FECTL, &rFeControl.uValue);

  00031	a1 00 11 80 fe	 mov	 eax, DWORD PTR ds:-25161472
  00036	89 45 f0	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 1682 :         
; 1683 :         if(NV_PAPU_FECTL_FEMETHMODE_FREE_RUNNING == rFeControl.Mode)

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  0003c	c1 e9 05	 shr	 ecx, 5
  0003f	83 e1 07	 and	 ecx, 7
  00042	85 c9		 test	 ecx, ecx
  00044	0f 85 e8 00 00
	00		 jne	 $L32603

; 1684 :         {
; 1685 :             MCPX_REG_READ(NV_PAPU_SECTL, &rSeControl.uValue)

  0004a	8b 15 00 20 80
	fe		 mov	 edx, DWORD PTR ds:-25157632
  00050	89 55 fc	 mov	 DWORD PTR _rSeControl$[ebp], edx

; 1686 :     
; 1687 :             if(NV_PAPU_SECTL_XCNTMODE_OFF != rSeControl.GSCUpdate)

  00053	8b 45 fc	 mov	 eax, DWORD PTR _rSeControl$[ebp]
  00056	c1 e8 03	 shr	 eax, 3
  00059	83 e0 03	 and	 eax, 3
  0005c	85 c0		 test	 eax, eax
  0005e	0f 84 ce 00 00
	00		 je	 $L32603

; 1688 :             {
; 1689 :                 fIdle = TRUE;

  00064	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _fIdle$[ebp], 1

; 1690 :     
; 1691 :                 //
; 1692 :                 // Turn off the VP
; 1693 :                 //
; 1694 :     
; 1695 :                 MCPX_CHECK_VOICE_FIFO(1);

  0006b	68 9f 06 00 00	 push	 1695			; 0000069fH
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0007a	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0007f	0f b6 c8	 movzx	 ecx, al
  00082	33 d2		 xor	 edx, edx
  00084	83 f9 02	 cmp	 ecx, 2
  00087	0f 95 c2	 setne	 dl
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 _DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
  00093	68 9f 06 00 00	 push	 1695			; 0000069fH
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  000a2	6a 00		 push	 0
  000a4	e8 00 00 00 00	 call	 _DwDbgAssert
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
$L32609:
  000ac	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b1	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  000b7	c1 e9 02	 shr	 ecx, 2
  000ba	83 f9 01	 cmp	 ecx, 1
  000bd	73 02		 jae	 SHORT $L32610
  000bf	eb eb		 jmp	 SHORT $L32609
$L32610:

; 1696 :                 MCPX_VOICE_WRITE(SetProcessorMode, NV1BA0_PIO_SET_MODE_PARAMETER_OFF);

  000c1	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  000c6	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 1697 : 
; 1698 :                 //
; 1699 :                 // Wait for the VP to tell us it's idle
; 1700 :                 //
; 1701 : 
; 1702 :                 if(m_ctxMemory[MCPX_MEM_NOTIFIERS].VirtualAddress)

  000d0	83 3d 40 00 00
	00 00		 cmp	 DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+64, 0
  000d7	74 4f		 je	 SHORT $L32615

; 1703 :                 {
; 1704 :                     Notifier.Initialize(0, 1);

  000d9	6a 01		 push	 1
  000db	6a 00		 push	 0
  000dd	8d 4d f4	 lea	 ecx, DWORD PTR _Notifier$[ebp]
  000e0	e8 00 00 00 00	 call	 ?Initialize@CMcpxNotifierTest@@QAEXKK@Z ; CMcpxNotifierTest::Initialize

; 1705 :     
; 1706 :                     MCPX_VOICE_WRITE(Synchronize, NV1BA0_PIO_SYNCHRONIZE_PARAMETER_WAIT_FOR_IDLE_WRITE_PE_NOTIFY);

  000e5	b8 04 01 00 00	 mov	 eax, 260		; 00000104H
  000ea	c7 80 00 00 82
	fe 02 00 00 00	 mov	 DWORD PTR [eax-25034752], 2
$L32619:

; 1707 : 
; 1708 :                     while(!Notifier.GetStatus(0))

  000f4	6a 00		 push	 0
  000f6	8d 4d f4	 lea	 ecx, DWORD PTR _Notifier$[ebp]
  000f9	e8 00 00 00 00	 call	 ?GetStatus@CMcpxNotifierTest@@QAEHK@Z ; CMcpxNotifierTest::GetStatus
  000fe	85 c0		 test	 eax, eax
  00100	75 1c		 jne	 SHORT $L32620

; 1709 :                     {
; 1710 :                         KeStallExecutionProcessor(1);

  00102	6a 01		 push	 1
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeStallExecutionProcessor@4

; 1711 : 
; 1712 :                         if(!dwTimeout--)

  0010a	8b 4d ec	 mov	 ecx, DWORD PTR _dwTimeout$[ebp]
  0010d	8b 55 ec	 mov	 edx, DWORD PTR _dwTimeout$[ebp]
  00110	83 ea 01	 sub	 edx, 1
  00113	89 55 ec	 mov	 DWORD PTR _dwTimeout$[ebp], edx
  00116	85 c9		 test	 ecx, ecx
  00118	75 02		 jne	 SHORT $L32621

; 1713 :                         {
; 1714 :                             break;

  0011a	eb 02		 jmp	 SHORT $L32620
$L32621:

; 1715 :                         }
; 1716 :                     }

  0011c	eb d6		 jmp	 SHORT $L32619
$L32620:

; 1717 : 
; 1718 :                     Notifier.Reset();

  0011e	8d 4d f4	 lea	 ecx, DWORD PTR _Notifier$[ebp]
  00121	e8 00 00 00 00	 call	 ?Reset@CMcpxNotifierTest@@QAEXXZ ; CMcpxNotifierTest::Reset

; 1719 :                 }
; 1720 :                 else

  00126	eb 0a		 jmp	 SHORT $L32603
$L32615:

; 1721 :                 {
; 1722 :                     KeStallExecutionProcessor(dwTimeout);

  00128	8b 45 ec	 mov	 eax, DWORD PTR _dwTimeout$[ebp]
  0012b	50		 push	 eax
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeStallExecutionProcessor@4
$L32603:

; 1723 :                 }
; 1724 :             }
; 1725 :         }
; 1726 :     }
; 1727 :     else

  00132	eb 65		 jmp	 SHORT $L32623
$L32601:

; 1728 :     {
; 1729 :         //
; 1730 :         // Turn the VP back on
; 1731 :         //
; 1732 :         
; 1733 :         MCPX_CHECK_VOICE_FIFO(1);

  00134	68 c5 06 00 00	 push	 1733			; 000006c5H
  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00143	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00148	0f b6 c8	 movzx	 ecx, al
  0014b	33 d2		 xor	 edx, edx
  0014d	83 f9 02	 cmp	 ecx, 2
  00150	0f 95 c2	 setne	 dl
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 _DwDbgAssert
  00159	83 c4 10	 add	 esp, 16			; 00000010H
  0015c	68 c5 06 00 00	 push	 1733			; 000006c5H
  00161	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@EDHKMHGC@c?3?2xbox?2private?2windows?2directx?2@
  00166	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  0016b	6a 00		 push	 0
  0016d	e8 00 00 00 00	 call	 _DwDbgAssert
  00172	83 c4 10	 add	 esp, 16			; 00000010H
$L32625:
  00175	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0017a	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  00180	c1 e9 02	 shr	 ecx, 2
  00183	83 f9 01	 cmp	 ecx, 1
  00186	73 02		 jae	 SHORT $L32626
  00188	eb eb		 jmp	 SHORT $L32625
$L32626:

; 1734 :         MCPX_VOICE_WRITE(SetProcessorMode, NV1BA0_PIO_SET_MODE_PARAMETER_RUN);

  0018a	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  0018f	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1
$L32623:

; 1735 :     }        
; 1736 : 
; 1737 :     DPF_LEAVE(fIdle);
; 1738 : 
; 1739 :     return fIdle;

  00199	8b 45 08	 mov	 eax, DWORD PTR _fIdle$[ebp]
  0019c	89 45 e0	 mov	 DWORD PTR $T32953[ebp], eax
  0019f	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  001a2	e8 00 00 00 00	 call	 ??1CAutoIrql@@QAE@XZ	; CAutoIrql::~CAutoIrql
  001a7	8b 45 e0	 mov	 eax, DWORD PTR $T32953[ebp]

; 1740 : }

  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 04 00	 ret	 4
?IdleVoiceProcessor@CMcpxCoreTest@@QAEHH@Z ENDP		; CMcpxCoreTest::IdleVoiceProcessor
DSOUND	ENDS
PUBLIC	?Free@CMcpxNotifierTest@@QAEXXZ			; CMcpxNotifierTest::Free
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\mcpxcore.h
;	COMDAT ??0CMcpxNotifierTest@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CMcpxNotifierTest@@QAE@XZ PROC NEAR			; CMcpxNotifierTest::CMcpxNotifierTest, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  :     Free();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Free@CMcpxNotifierTest@@QAEXXZ ; CMcpxNotifierTest::Free

; 381  : }

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CMcpxNotifierTest@@QAE@XZ ENDP			; CMcpxNotifierTest::CMcpxNotifierTest
DSOUND	ENDS
PUBLIC	??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@		; `string'
PUBLIC	??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@	; `string'
;	COMDAT ??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\initlib\mcpxcore.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@ DB '!m_paNotifier', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@ DB '!m_dwNotifierCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxNotifierTest@@QAEXKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwBaseNotifierIndex$ = 8
_dwNotifierCount$ = 12
?Initialize@CMcpxNotifierTest@@QAEXKK@Z PROC NEAR	; CMcpxNotifierTest::Initialize, COMDAT
; _this$ = ecx

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :     ASSERT(!m_paNotifier);

  00007	68 81 01 00 00	 push	 385			; 00000181H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	0f 95 c1	 setne	 cl
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 _DwDbgAssert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 386  :     ASSERT(!m_dwNotifierCount);

  0002a	68 82 01 00 00	 push	 386			; 00000182H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	33 c0		 xor	 eax, eax
  0003e	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00042	0f 95 c0	 setne	 al
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _DwDbgAssert
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 387  : 
; 388  :     m_paNotifier = (PMCPX_HW_NOTIFICATION)CMcpxCoreTest::m_ctxMemory[MCPX_MEM_NOTIFIERS].VirtualAddress + dwBaseNotifierIndex;

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _dwBaseNotifierIndex$[ebp]
  00051	c1 e1 04	 shl	 ecx, 4
  00054	8b 15 40 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCoreTest@@2PAUMCPX_ALLOC_CONTEXT@@A+64
  0005a	03 d1		 add	 edx, ecx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	89 10		 mov	 DWORD PTR [eax], edx

; 389  :     m_dwNotifierCount = dwNotifierCount;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 55 0c	 mov	 edx, DWORD PTR _dwNotifierCount$[ebp]
  00067	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 390  : 
; 391  :     Reset();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?Reset@CMcpxNotifierTest@@QAEXXZ ; CMcpxNotifierTest::Reset

; 392  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?Initialize@CMcpxNotifierTest@@QAEXKK@Z ENDP		; CMcpxNotifierTest::Initialize
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Free@CMcpxNotifierTest@@QAEXXZ PROC NEAR		; CMcpxNotifierTest::Free, COMDAT
; _this$ = ecx

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 396  :     m_paNotifier = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 397  :     m_dwNotifierCount = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 398  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?Free@CMcpxNotifierTest@@QAEXXZ ENDP			; CMcpxNotifierTest::Free
DSOUND	ENDS
PUBLIC	??_C@_0N@BMLCBDGO@m_paNotifier?$AA@		; `string'
PUBLIC	??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ ; `string'
PUBLIC	??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@ ; `string'
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@BMLCBDGO@m_paNotifier?$AA@ DB 'm_paNotifier', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT
??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ DB 'dwNotifierI'
	DB	'ndex < m_dwNotifierCount', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@ DB 'Unexpected notif'
	DB	'ier status', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetStatus@CMcpxNotifierTest@@QAEHK@Z
DSOUND	SEGMENT
tv81 = -8
_this$ = -4
_dwNotifierIndex$ = 8
?GetStatus@CMcpxNotifierTest@@QAEHK@Z PROC NEAR		; CMcpxNotifierTest::GetStatus, COMDAT
; _this$ = ecx

; 401  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 402  :     ASSERT(m_paNotifier);

  00009	68 92 01 00 00	 push	 402			; 00000192H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	0f 94 c1	 sete	 cl
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 _DwDbgAssert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 403  :     ASSERT(dwNotifierIndex < m_dwNotifierCount);

  0002c	68 93 01 00 00	 push	 403			; 00000193H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00041	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00044	1b c9		 sbb	 ecx, ecx
  00046	41		 inc	 ecx
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 _DwDbgAssert
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 404  :     
; 405  :     switch(m_paNotifier[dwNotifierIndex].Status)
; 406  :     {

  00050	8b 55 08	 mov	 edx, DWORD PTR _dwNotifierIndex$[ebp]
  00053	c1 e2 04	 shl	 edx, 4
  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8a 54 11 0f	 mov	 dl, BYTE PTR [ecx+edx+15]
  0005f	88 55 f8	 mov	 BYTE PTR tv81[ebp], dl
  00062	80 7d f8 01	 cmp	 BYTE PTR tv81[ebp], 1
  00066	74 08		 je	 SHORT $L31494
  00068	80 7d f8 80	 cmp	 BYTE PTR tv81[ebp], 128	; 00000080H
  0006c	74 09		 je	 SHORT $L31495
  0006e	eb 0b		 jmp	 SHORT $L31496
$L31494:

; 407  :         case NV1BA0_NOTIFICATION_STATUS_DONE_SUCCESS:
; 408  :             return TRUE;

  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	eb 1f		 jmp	 SHORT $L31487
$L31495:

; 409  : 
; 410  :         case NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS:
; 411  :             return FALSE;

  00077	33 c0		 xor	 eax, eax
  00079	eb 1b		 jmp	 SHORT $L31487
$L31496:

; 412  : 
; 413  :         default:
; 414  :             ASSERTMSG("Unexpected notifier status");

  0007b	68 9e 01 00 00	 push	 414			; 0000019eH
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
  0008a	6a 01		 push	 1
  0008c	e8 00 00 00 00	 call	 _DwDbgAssert
  00091	83 c4 10	 add	 esp, 16			; 00000010H

; 415  :             return FALSE;

  00094	33 c0		 xor	 eax, eax
$L31487:

; 416  :     }
; 417  : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?GetStatus@CMcpxNotifierTest@@QAEHK@Z ENDP		; CMcpxNotifierTest::GetStatus
DSOUND	ENDS
PUBLIC	??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@	; `string'
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@ DB 'm_dwNotifierCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Reset@CMcpxNotifierTest@@QAEXXZ
DSOUND	SEGMENT
_this$ = -8
_dwNotifierIndex$ = -4
?Reset@CMcpxNotifierTest@@QAEXXZ PROC NEAR		; CMcpxNotifierTest::Reset, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 429  :     DWORD                   dwNotifierIndex;
; 430  :     
; 431  :     ASSERT(m_paNotifier);

  00009	68 af 01 00 00	 push	 431			; 000001afH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	0f 94 c1	 sete	 cl
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 _DwDbgAssert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 432  :     ASSERT(m_dwNotifierCount);

  0002c	68 b0 01 00 00	 push	 432			; 000001b0H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@PBGBJGJP@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	33 c0		 xor	 eax, eax
  00040	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00044	0f 94 c0	 sete	 al
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _DwDbgAssert
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 433  : 
; 434  :     for(dwNotifierIndex = 0; dwNotifierIndex < m_dwNotifierCount; dwNotifierIndex++)

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwNotifierIndex$[ebp], 0
  00057	eb 09		 jmp	 SHORT $L31509
$L31510:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _dwNotifierIndex$[ebp]
  0005c	83 c1 01	 add	 ecx, 1
  0005f	89 4d fc	 mov	 DWORD PTR _dwNotifierIndex$[ebp], ecx
$L31509:
  00062	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 45 fc	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00068	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0006b	73 12		 jae	 SHORT $L31506

; 435  :     {
; 436  :         m_paNotifier[dwNotifierIndex].Status = NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS;

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _dwNotifierIndex$[ebp]
  00070	c1 e1 04	 shl	 ecx, 4
  00073	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00076	8b 02		 mov	 eax, DWORD PTR [edx]
  00078	c6 44 08 0f 80	 mov	 BYTE PTR [eax+ecx+15], 128 ; 00000080H

; 437  :     }

  0007d	eb da		 jmp	 SHORT $L31510
$L31506:

; 438  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?Reset@CMcpxNotifierTest@@QAEXXZ ENDP			; CMcpxNotifierTest::Reset
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\initlib\refcount.h
DSOUND	ENDS
;	COMDAT ?__AddRef@@YGPAVCDirectSoundTestSettings@@PAV1@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@@YGPAVCDirectSoundTestSettings@@PAV1@@Z PROC NEAR ; __AddRef, COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :     if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L32648

; 68   :     {
; 69   :         p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L32648:

; 70   :     }
; 71   : 
; 72   :     return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 73   : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@@YGPAVCDirectSoundTestSettings@@PAV1@@Z ENDP	; __AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@@YGPAVCMcpxSlopMemoryHeapTest@@PAV1@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@@YGPAVCMcpxSlopMemoryHeapTest@@PAV1@@Z PROC NEAR ; __AddRef, COMDAT

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :     if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L32650

; 68   :     {
; 69   :         p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L32650:

; 70   :     }
; 71   : 
; 72   :     return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 73   : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@@YGPAVCMcpxSlopMemoryHeapTest@@PAV1@@Z ENDP	; __AddRef
DSOUND	ENDS
END
