; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\dspdma.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LMNGCKLN@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@LFHMKIKD@dwCount?5?$DM?$DN?5m_dwReservedPages?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@FGMABEIG@Effects?5Image?5scratch?5space?5usag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxDspScratchDma@DirectSound@@QAE@H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxDspScratchDma@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxDspScratchDma@DirectSound@@QAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AdjustFxScratch@CMcpxDspScratchDma@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	??0CMcpxDspScratchDma@DirectSound@@QAE@H@Z	; DirectSound::CMcpxDspScratchDma::CMcpxDspScratchDma
EXTRN	_memset:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dspdma.cpp
;	COMDAT ??0CMcpxDspScratchDma@DirectSound@@QAE@H@Z
DSOUND	SEGMENT
_this$ = -4
_fGpScratch$ = 8
??0CMcpxDspScratchDma@DirectSound@@QAE@H@Z PROC NEAR	; DirectSound::CMcpxDspScratchDma::CMcpxDspScratchDma, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 17   :     m_dwMaxPages = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 18   :     m_fGpScratch = fGpScratch;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _fGpScratch$[ebp]
  00016	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 19   :     memset(&m_ctxFxScratch,0,sizeof(m_ctxFxScratch));

  00019	6a 10		 push	 16			; 00000010H
  0001b	6a 00		 push	 0
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 14	 add	 eax, 20			; 00000014H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _memset
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 20   : 
; 21   : }

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??0CMcpxDspScratchDma@DirectSound@@QAE@H@Z ENDP		; DirectSound::CMcpxDspScratchDma::CMcpxDspScratchDma
DSOUND	ENDS
PUBLIC	??1CMcpxDspScratchDma@DirectSound@@QAE@XZ	; DirectSound::CMcpxDspScratchDma::~CMcpxDspScratchDma
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
EXTRN	__imp__MmLockUnlockBufferPages@12:NEAR
; Function compile flags: /Odt
;	COMDAT ??1CMcpxDspScratchDma@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CMcpxDspScratchDma@DirectSound@@QAE@XZ PROC NEAR	; DirectSound::CMcpxDspScratchDma::~CMcpxDspScratchDma, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 25   :     if (m_ctxFxScratch.VirtualAddress && m_ctxFxScratch.Size) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0000e	74 3e		 je	 SHORT $L35557
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00017	74 35		 je	 SHORT $L35557

; 26   : 
; 27   :         MmLockUnlockBufferPages(m_ctxFxScratch.VirtualAddress,m_ctxFxScratch.Size,TRUE);

  00019	6a 01		 push	 1
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00021	50		 push	 eax
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00028	52		 push	 edx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12

; 28   :         POOLFREE(m_ctxFxScratch.VirtualAddress);

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00036	74 16		 je	 SHORT $L35557
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$L35557:

; 29   : 
; 30   :     }
; 31   : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??1CMcpxDspScratchDma@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxDspScratchDma::~CMcpxDspScratchDma
DSOUND	ENDS
PUBLIC	?Initialize@CMcpxDspScratchDma@DirectSound@@QAEXK@Z ; DirectSound::CMcpxDspScratchDma::Initialize
EXTRN	?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A:BYTE ; DirectSound::CMcpxCore::m_ctxMemory
EXTRN	?MapTransfer@CMcpxCore@DirectSound@@SGKPAPAXPAK1@Z:NEAR ; DirectSound::CMcpxCore::MapTransfer
; Function compile flags: /Odt
;	COMDAT ?Initialize@CMcpxDspScratchDma@DirectSound@@QAEXK@Z
DSOUND	SEGMENT
tv66 = -32
_this$ = -28
_i$35571 = -24
_bytesRemaining$ = -20
_pPrd$ = -16
_index$ = -12
_bytesMapped$ = -8
_currentVa$ = -4
_dwReservedPages$ = 8
?Initialize@CMcpxDspScratchDma@DirectSound@@QAEXK@Z PROC NEAR ; DirectSound::CMcpxDspScratchDma::Initialize, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 36   : 
; 37   :     ULONG index = (m_fGpScratch == TRUE) ? (index = MCPX_MEM_GPSCRATCH) : (MCPX_MEM_EPSCRATCH);

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 01	 cmp	 DWORD PTR [eax+8], 1
  00010	75 0f		 jne	 SHORT $L35943
  00012	c7 45 f4 0c 00
	00 00		 mov	 DWORD PTR _index$[ebp], 12 ; 0000000cH
  00019	8b 4d f4	 mov	 ecx, DWORD PTR _index$[ebp]
  0001c	89 4d e0	 mov	 DWORD PTR tv66[ebp], ecx
  0001f	eb 07		 jmp	 SHORT $L35944
$L35943:
  00021	c7 45 e0 0e 00
	00 00		 mov	 DWORD PTR tv66[ebp], 14	; 0000000eH
$L35944:
  00028	8b 55 e0	 mov	 edx, DWORD PTR tv66[ebp]
  0002b	89 55 f4	 mov	 DWORD PTR _index$[ebp], edx

; 38   : 
; 39   :     //
; 40   :     // keep a pointer to the proper alloc contexts
; 41   :     //
; 42   : 
; 43   :     m_pDmaBufferContext = &CMcpxCore::m_ctxMemory[index];

  0002e	8b 45 f4	 mov	 eax, DWORD PTR _index$[ebp]
  00031	c1 e0 04	 shl	 eax, 4
  00034	05 00 00 00 00	 add	 eax, OFFSET FLAT:?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A ; DirectSound::CMcpxCore::m_ctxMemory
  00039	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 44   :     m_pSgeTableContext = &CMcpxCore::m_ctxMemory[index+1];

  0003f	8b 55 f4	 mov	 edx, DWORD PTR _index$[ebp]
  00042	83 c2 01	 add	 edx, 1
  00045	c1 e2 04	 shl	 edx, 4
  00048	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A ; DirectSound::CMcpxCore::m_ctxMemory
  0004e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00051	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 45   : 
; 46   :     //
; 47   :     // the caller passes us an array of ALLOC_CONTEXTs
; 48   :     // first one is the allocation for the scratch memory itself
; 49   :     // the second is the allocation for the SGE table describing the scratch space
; 50   :     //
; 51   : 
; 52   : 	m_dwMaxPages = (USHORT) (m_pSgeTableContext->Size / NV_PSGE_SIZE);

  00054	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005d	c1 e8 03	 shr	 eax, 3
  00060	0f b7 c8	 movzx	 ecx, ax
  00063	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00066	89 0a		 mov	 DWORD PTR [edx], ecx

; 53   :     m_dwReservedPages = dwReservedPages;

  00068	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _dwReservedPages$[ebp]
  0006e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 54   : 
; 55   :     //
; 56   :     // initialize the hw SGE table and our internal page table to point to 
; 57   :     // DMA allocated memory
; 58   :     //
; 59   : 
; 60   :     MCP1_PRD *pPrd = (MCP1_PRD *)m_pSgeTableContext->VirtualAddress;

  00071	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00074	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	89 4d f0	 mov	 DWORD PTR _pPrd$[ebp], ecx

; 61   : 
; 62   :     ULONG bytesRemaining = m_pDmaBufferContext->Size;

  0007c	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0007f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00082	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00085	89 4d ec	 mov	 DWORD PTR _bytesRemaining$[ebp], ecx

; 63   :     ULONG bytesMapped = 0;

  00088	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bytesMapped$[ebp], 0

; 64   :     PVOID currentVa = m_pDmaBufferContext->VirtualAddress;

  0008f	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	89 4d fc	 mov	 DWORD PTR _currentVa$[ebp], ecx

; 65   : 
; 66   :     //
; 67   :     // note that all pages are 4k aligned and since the dma buffer is 4k length
; 68   :     // aligned, all sizes are 4k as well..
; 69   :     //
; 70   : 
; 71   :     for (ULONG i = 0; i < m_dwMaxPages-dwReservedPages; i++)

  0009a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$35571[ebp], 0
  000a1	eb 09		 jmp	 SHORT $L35572
$L35573:
  000a3	8b 55 e8	 mov	 edx, DWORD PTR _i$35571[ebp]
  000a6	83 c2 01	 add	 edx, 1
  000a9	89 55 e8	 mov	 DWORD PTR _i$35571[ebp], edx
$L35572:
  000ac	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000af	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b1	2b 4d 08	 sub	 ecx, DWORD PTR _dwReservedPages$[ebp]
  000b4	39 4d e8	 cmp	 DWORD PTR _i$35571[ebp], ecx
  000b7	73 43		 jae	 SHORT $L35574

; 72   :     {
; 73   :         pPrd[i].uAddr = CMcpxCore::MapTransfer(&currentVa,
; 74   :                                                &bytesRemaining,
; 75   :                                                &bytesMapped);

  000b9	8d 55 f8	 lea	 edx, DWORD PTR _bytesMapped$[ebp]
  000bc	52		 push	 edx
  000bd	8d 45 ec	 lea	 eax, DWORD PTR _bytesRemaining$[ebp]
  000c0	50		 push	 eax
  000c1	8d 4d fc	 lea	 ecx, DWORD PTR _currentVa$[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?MapTransfer@CMcpxCore@DirectSound@@SGKPAPAXPAK1@Z ; DirectSound::CMcpxCore::MapTransfer
  000ca	8b 55 e8	 mov	 edx, DWORD PTR _i$35571[ebp]
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR _pPrd$[ebp]
  000d0	89 04 d1	 mov	 DWORD PTR [ecx+edx*8], eax

; 76   : 
; 77   :         pPrd[i].Control.uValue = 0;

  000d3	8b 55 e8	 mov	 edx, DWORD PTR _i$35571[ebp]
  000d6	8b 45 f0	 mov	 eax, DWORD PTR _pPrd$[ebp]
  000d9	c7 44 d0 04 00
	00 00 00	 mov	 DWORD PTR [eax+edx*8+4], 0

; 78   :         pPrd[i].Control.Owner = NV_PSSL_PRD_CONTROL_OWN_HW;       

  000e1	8b 4d e8	 mov	 ecx, DWORD PTR _i$35571[ebp]
  000e4	8b 55 f0	 mov	 edx, DWORD PTR _pPrd$[ebp]
  000e7	8b 44 ca 04	 mov	 eax, DWORD PTR [edx+ecx*8+4]
  000eb	25 ff ff ff fe	 and	 eax, -16777217		; feffffffH
  000f0	8b 4d e8	 mov	 ecx, DWORD PTR _i$35571[ebp]
  000f3	8b 55 f0	 mov	 edx, DWORD PTR _pPrd$[ebp]
  000f6	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 79   : 
; 80   :     }

  000fa	eb a7		 jmp	 SHORT $L35573
$L35574:

; 81   : 
; 82   :     //
; 83   :     // Set base address for GP/EP scratch
; 84   :     //
; 85   : 
; 86   :     //
; 87   :     // tell the hw that all pages are valid , except the reserved ones
; 88   :     //
; 89   :     
; 90   :     if (m_fGpScratch) {

  000fc	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00103	74 20		 je	 SHORT $L35575

; 91   : 
; 92   :         MCPX_REG_WRITE(NV_PAPU_GPSADDR, m_pSgeTableContext->PhysicalAddress);    

  00105	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0010b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010e	a3 40 20 80 fe	 mov	 DWORD PTR ds:-25157568, eax

; 93   :         MCPX_REG_WRITE(NV_PAPU_GPSMAXSGE, m_dwMaxPages-m_dwReservedPages);

  00113	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00119	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011b	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  0011e	a3 d4 20 80 fe	 mov	 DWORD PTR ds:-25157420, eax

; 94   : 
; 95   :     } else {

  00123	eb 19		 jmp	 SHORT $L35563
$L35575:

; 96   : 
; 97   :         MCPX_REG_WRITE(NV_PAPU_EPSADDR, m_pSgeTableContext->PhysicalAddress);    

  00125	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0012b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0012e	a3 48 20 80 fe	 mov	 DWORD PTR ds:-25157560, eax

; 98   :         MCPX_REG_WRITE(NV_PAPU_EPSMAXSGE, m_dwMaxPages);

  00133	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	8b 11		 mov	 edx, DWORD PTR [ecx]
  00138	89 15 dc 20 80
	fe		 mov	 DWORD PTR ds:-25157412, edx
$L35563:

; 99   :     }
; 100  : 
; 101  :     return;
; 102  : }

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 04 00	 ret	 4
?Initialize@CMcpxDspScratchDma@DirectSound@@QAEXK@Z ENDP ; DirectSound::CMcpxDspScratchDma::Initialize
DSOUND	ENDS
PUBLIC	?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z ; DirectSound::CMcpxDspScratchDma::AddPages
PUBLIC	??_C@_0DJ@LMNGCKLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BN@LFHMKIKD@dwCount?5?$DM?$DN?5m_dwReservedPages?$AA@ ; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DJ@LMNGCKLN@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DJ@LMNGCKLN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\dspdma.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@LFHMKIKD@dwCount?5?$DM?$DN?5m_dwReservedPages?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@LFHMKIKD@dwCount?5?$DM?$DN?5m_dwReservedPages?$AA@ DB 'dwCount '
	DB	'<= m_dwReservedPages', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z
DSOUND	SEGMENT
_this$ = -16
_dwPageIndex$ = -12
_pPrd$ = -8
_i$ = -4
_pContextArray$ = 8
_dwCount$ = 12
_pOffset$ = 16
?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z PROC NEAR ; DirectSound::CMcpxDspScratchDma::AddPages, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 111  :     DWORD dwPageIndex = m_dwMaxPages - m_dwReservedPages;

  0000a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00015	89 55 f4	 mov	 DWORD PTR _dwPageIndex$[ebp], edx

; 112  :     ULONG i;
; 113  : 
; 114  :     ASSERT(dwCount <= m_dwReservedPages);

  00018	6a 72		 push	 114			; 00000072H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LMNGCKLN@c?3?2xbox?2private?2windows?2directx?2@
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@LFHMKIKD@dwCount?5?$DM?$DN?5m_dwReservedPages?$AA@
  00024	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCount$[ebp]
  0002a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0002d	1b d2		 sbb	 edx, edx
  0002f	f7 da		 neg	 edx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 115  : 
; 116  :     m_dwReservedPages -= dwCount;

  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00040	2b 4d 0c	 sub	 ecx, DWORD PTR _dwCount$[ebp]
  00043	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00046	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 117  : 
; 118  :     MCP1_PRD *pPrd = (MCP1_PRD *)CMcpxCore::m_ctxMemory[MCPX_MEM_GPSCRATCHSGE].VirtualAddress;

  00049	a1 d0 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+208
  0004e	89 45 f8	 mov	 DWORD PTR _pPrd$[ebp], eax

; 119  : 
; 120  :     for (i=0;i<dwCount;i++) {

  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00058	eb 09		 jmp	 SHORT $L35597
$L35598:
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005d	83 c1 01	 add	 ecx, 1
  00060	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35597:
  00063	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00066	3b 55 0c	 cmp	 edx, DWORD PTR _dwCount$[ebp]
  00069	73 4c		 jae	 SHORT $L35599

; 121  : 
; 122  :         //
; 123  :         // update the hw SGE table
; 124  :         //
; 125  : 
; 126  :         pPrd[dwPageIndex+i].uAddr = pContextArray[i].PhysicalAddress;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0006e	c1 e0 04	 shl	 eax, 4
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _dwPageIndex$[ebp]
  00074	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  00077	8b 55 f8	 mov	 edx, DWORD PTR _pPrd$[ebp]
  0007a	8b 75 08	 mov	 esi, DWORD PTR _pContextArray$[ebp]
  0007d	8b 44 06 04	 mov	 eax, DWORD PTR [esi+eax+4]
  00081	89 04 ca	 mov	 DWORD PTR [edx+ecx*8], eax

; 127  : 
; 128  :         pPrd[dwPageIndex+i].Control.uValue = 0;

  00084	8b 4d f4	 mov	 ecx, DWORD PTR _dwPageIndex$[ebp]
  00087	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  0008a	8b 55 f8	 mov	 edx, DWORD PTR _pPrd$[ebp]
  0008d	c7 44 ca 04 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*8+4], 0

; 129  :         pPrd[dwPageIndex+i].Control.Owner = NV_PSSL_PRD_CONTROL_OWN_HW;       

  00095	8b 45 f4	 mov	 eax, DWORD PTR _dwPageIndex$[ebp]
  00098	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _pPrd$[ebp]
  0009e	8b 54 c1 04	 mov	 edx, DWORD PTR [ecx+eax*8+4]
  000a2	81 e2 ff ff ff
	fe		 and	 edx, -16777217		; feffffffH
  000a8	8b 45 f4	 mov	 eax, DWORD PTR _dwPageIndex$[ebp]
  000ab	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR _pPrd$[ebp]
  000b1	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 130  : 
; 131  :     }

  000b5	eb a3		 jmp	 SHORT $L35598
$L35599:

; 132  : 
; 133  :     //
; 134  :     // tell the hw that all pages are valid , including the reserved ones
; 135  :     //
; 136  :     
; 137  :     MCPX_REG_WRITE(NV_PAPU_GPSMAXSGE, m_dwMaxPages-m_dwReservedPages);

  000b7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000bf	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  000c2	89 0d d4 20 80
	fe		 mov	 DWORD PTR ds:-25157420, ecx

; 138  : 
; 139  :     //
; 140  :     // give them the linear offset into our DMA buffer window
; 141  :     //
; 142  : 
; 143  :     *pOffset = dwPageIndex*PAGE_SIZE;

  000c8	8b 55 f4	 mov	 edx, DWORD PTR _dwPageIndex$[ebp]
  000cb	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  000ce	8b 45 10	 mov	 eax, DWORD PTR _pOffset$[ebp]
  000d1	89 10		 mov	 DWORD PTR [eax], edx

; 144  :     return;
; 145  : 
; 146  : }

  000d3	5e		 pop	 esi
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 0c 00	 ret	 12			; 0000000cH
?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z ENDP ; DirectSound::CMcpxDspScratchDma::AddPages
DSOUND	ENDS
PUBLIC	?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z ; DirectSound::CMcpxDspScratchDma::Copy
EXTRN	_memcpy:NEAR
; Function compile flags: /Odt
;	COMDAT ?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z
DSOUND	SEGMENT
_this$ = -8
_pDest$ = -4
_uLinOffset$ = 8
_pSource$ = 12
_uSize$ = 16
?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z PROC NEAR ; DirectSound::CMcpxDspScratchDma::Copy, COMDAT
; _this$ = ecx

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 152  :     //
; 153  :     // scratch mem is contigious
; 154  :     //
; 155  : 
; 156  :     PUCHAR pDest = (PUCHAR)m_pDmaBufferContext->VirtualAddress+uLinOffset;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	03 55 08	 add	 edx, DWORD PTR _uLinOffset$[ebp]
  00014	89 55 fc	 mov	 DWORD PTR _pDest$[ebp], edx

; 157  :     memcpy(pDest, pSource, uSize);

  00017	8b 45 10	 mov	 eax, DWORD PTR _uSize$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _pDest$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 _memcpy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 158  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z ENDP	; DirectSound::CMcpxDspScratchDma::Copy
DSOUND	ENDS
PUBLIC	?AdjustFxScratch@CMcpxDspScratchDma@DirectSound@@QAEJK@Z ; DirectSound::CMcpxDspScratchDma::AdjustFxScratch
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0DI@FGMABEIG@Effects?5Image?5scratch?5space?5usag@ ; `string'
PUBLIC	??_C@_04ELFAHOMP@BYTE?$AA@			; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolAlloc
EXTRN	__imp__MmGetPhysicalAddress@4:NEAR
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@FGMABEIG@Effects?5Image?5scratch?5space?5usag@
DSOUND_RD	SEGMENT
??_C@_0DI@FGMABEIG@Effects?5Image?5scratch?5space?5usag@ DB 'Effects Imag'
	DB	'e scratch space usage exceed max (%d) pages', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
DSOUND_RD	SEGMENT
??_C@_04ELFAHOMP@BYTE?$AA@ DB 'BYTE', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AdjustFxScratch@CMcpxDspScratchDma@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -40
_dwPageIndex$ = -36
_pPrd$ = -32
_ctx$ = -24
_i$ = -8
_dwCount$ = -4
_dwSize$ = 8
?AdjustFxScratch@CMcpxDspScratchDma@DirectSound@@QAEJK@Z PROC NEAR ; DirectSound::CMcpxDspScratchDma::AdjustFxScratch, COMDAT
; _this$ = ecx

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 163  : 
; 164  :     MCPX_ALLOC_CONTEXT ctx;
; 165  :     ULONG offset,i;
; 166  :     DWORD dwPageIndex = m_dwMaxPages-m_dwReservedPages;

  00009	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00014	89 55 dc	 mov	 DWORD PTR _dwPageIndex$[ebp], edx

; 167  :     MCP1_PRD *pPrd = (MCP1_PRD *)CMcpxCore::m_ctxMemory[MCPX_MEM_GPSCRATCHSGE].VirtualAddress;

  00017	a1 d0 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+208
  0001c	89 45 e0	 mov	 DWORD PTR _pPrd$[ebp], eax

; 168  :     DWORD dwCount = dwSize/PAGE_SIZE;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  00022	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00025	89 4d fc	 mov	 DWORD PTR _dwCount$[ebp], ecx

; 169  : 
; 170  :     if (dwCount > m_dwReservedPages) {

  00028	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _dwCount$[ebp]
  0002e	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00031	76 39		 jbe	 SHORT $L35621

; 171  : 
; 172  :         DPF_ERROR("Effects Image scratch space usage exceed max (%d) pages",
; 173  :                   MCPX_HW_MAX_FX_SCRATCH_PAGES);

  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00038	6a 00		 push	 0
  0003a	68 ac 00 00 00	 push	 172			; 000000acH
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LMNGCKLN@c?3?2xbox?2private?2windows?2directx?2@
  00044	6a 01		 push	 1
  00046	6a 09		 push	 9
  00048	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	68 00 02 00 00	 push	 512			; 00000200H
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@FGMABEIG@Effects?5Image?5scratch?5space?5usag@
  0005a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0005f	83 c4 08	 add	 esp, 8

; 174  : 
; 175  :         return DSERR_OUTOFMEMORY;

  00062	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00067	e9 34 01 00 00	 jmp	 $L35613
$L35621:

; 176  :     }
; 177  : 
; 178  :     ctx.Size = 0;

  0006c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _ctx$[ebp+8], 0

; 179  : 
; 180  :     if (m_ctxFxScratch.Size < dwSize) {

  00073	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00079	3b 55 08	 cmp	 edx, DWORD PTR _dwSize$[ebp]
  0007c	73 6e		 jae	 SHORT $L35624

; 181  : 
; 182  :         //
; 183  :         // there is already scratch allocated for FX delay lines
; 184  :         // If its larger than what we need dont do anything.
; 185  :         // if its less, free whats there and replace it with a new allocation
; 186  :         //
; 187  :     
; 188  :         memcpy(&ctx,&m_ctxFxScratch,sizeof(m_ctxFxScratch));        

  0007e	6a 10		 push	 16			; 00000010H
  00080	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	83 c0 14	 add	 eax, 20			; 00000014H
  00086	50		 push	 eax
  00087	8d 4d e8	 lea	 ecx, DWORD PTR _ctx$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 _memcpy
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : 
; 190  :         //
; 191  :         // allocate a new one
; 192  :         //
; 193  : 
; 194  :         m_ctxFxScratch.Size = dwSize;

  00093	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00096	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00099	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 195  :         m_ctxFxScratch.VirtualAddress = POOLALLOC(BYTE, m_ctxFxScratch.Size);

  0009c	6a 01		 push	 1
  0009e	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000a4	52		 push	 edx
  000a5	68 44 53 64 61	 push	 1633964868		; 61645344H
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ELFAHOMP@BYTE?$AA@
  000af	68 c3 00 00 00	 push	 195			; 000000c3H
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LMNGCKLN@c?3?2xbox?2private?2windows?2directx?2@
  000b9	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc
  000be	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 196  :         if (m_ctxFxScratch.VirtualAddress == NULL) {

  000c4	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  000cb	75 0a		 jne	 SHORT $L35628

; 197  : 
; 198  :             return E_OUTOFMEMORY;

  000cd	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000d2	e9 c9 00 00 00	 jmp	 $L35613
$L35628:

; 199  : 
; 200  :         }
; 201  : 
; 202  :         MmLockUnlockBufferPages(m_ctxFxScratch.VirtualAddress,dwSize,FALSE);

  000d7	6a 00		 push	 0
  000d9	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  000dc	50		 push	 eax
  000dd	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000e3	52		 push	 edx
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12

; 203  : 
; 204  :     } else {

  000ea	eb 07		 jmp	 SHORT $L35630
$L35624:

; 205  : 
; 206  :         return DS_OK;

  000ec	33 c0		 xor	 eax, eax
  000ee	e9 ad 00 00 00	 jmp	 $L35613
$L35630:

; 207  :     }
; 208  : 
; 209  : 
; 210  :     for (i=0;i<dwCount;i++) {

  000f3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000fa	eb 09		 jmp	 SHORT $L35632
$L35633:
  000fc	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ff	83 c0 01	 add	 eax, 1
  00102	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L35632:
  00105	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00108	3b 4d fc	 cmp	 ecx, DWORD PTR _dwCount$[ebp]
  0010b	73 52		 jae	 SHORT $L35634

; 211  : 
; 212  :         //
; 213  :         // update the hw SGE table
; 214  :         //
; 215  : 
; 216  :         pPrd[dwPageIndex+i].uAddr = MmGetPhysicalAddress(i*PAGE_SIZE+(PUCHAR)m_ctxFxScratch.VirtualAddress);

  0010d	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00110	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  00113	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00116	03 50 14	 add	 edx, DWORD PTR [eax+20]
  00119	52		 push	 edx
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  00120	8b 4d dc	 mov	 ecx, DWORD PTR _dwPageIndex$[ebp]
  00123	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  00126	8b 55 e0	 mov	 edx, DWORD PTR _pPrd$[ebp]
  00129	89 04 ca	 mov	 DWORD PTR [edx+ecx*8], eax

; 217  :         pPrd[dwPageIndex+i].Control.uValue = 0;

  0012c	8b 45 dc	 mov	 eax, DWORD PTR _dwPageIndex$[ebp]
  0012f	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00132	8b 4d e0	 mov	 ecx, DWORD PTR _pPrd$[ebp]
  00135	c7 44 c1 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+4], 0

; 218  :         pPrd[dwPageIndex+i].Control.Owner = NV_PSSL_PRD_CONTROL_OWN_HW;       

  0013d	8b 55 dc	 mov	 edx, DWORD PTR _dwPageIndex$[ebp]
  00140	03 55 f8	 add	 edx, DWORD PTR _i$[ebp]
  00143	8b 45 e0	 mov	 eax, DWORD PTR _pPrd$[ebp]
  00146	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  0014a	81 e1 ff ff ff
	fe		 and	 ecx, -16777217		; feffffffH
  00150	8b 55 dc	 mov	 edx, DWORD PTR _dwPageIndex$[ebp]
  00153	03 55 f8	 add	 edx, DWORD PTR _i$[ebp]
  00156	8b 45 e0	 mov	 eax, DWORD PTR _pPrd$[ebp]
  00159	89 4c d0 04	 mov	 DWORD PTR [eax+edx*8+4], ecx

; 219  : 
; 220  :     }

  0015d	eb 9d		 jmp	 SHORT $L35633
$L35634:

; 221  : 
; 222  :     //
; 223  :     // tell the hw, more pages are now valid...
; 224  :     //
; 225  : 
; 226  :     MCPX_REG_WRITE(NV_PAPU_GPSMAXSGE, m_dwMaxPages-m_dwReservedPages+dwCount);

  0015f	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00165	8b 01		 mov	 eax, DWORD PTR [ecx]
  00167	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  0016a	03 45 fc	 add	 eax, DWORD PTR _dwCount$[ebp]
  0016d	a3 d4 20 80 fe	 mov	 DWORD PTR ds:-25157420, eax

; 227  : 
; 228  :     //
; 229  :     // free old allocation
; 230  :     //
; 231  : 
; 232  :     if (ctx.Size) {

  00172	83 7d f0 00	 cmp	 DWORD PTR _ctx$[ebp+8], 0
  00176	74 26		 je	 SHORT $L35638

; 233  : 
; 234  :         MmLockUnlockBufferPages(ctx.VirtualAddress,ctx.Size,TRUE);

  00178	6a 01		 push	 1
  0017a	8b 4d f0	 mov	 ecx, DWORD PTR _ctx$[ebp+8]
  0017d	51		 push	 ecx
  0017e	8b 55 e8	 mov	 edx, DWORD PTR _ctx$[ebp]
  00181	52		 push	 edx
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12

; 235  :         POOLFREE(ctx.VirtualAddress);

  00188	83 7d e8 00	 cmp	 DWORD PTR _ctx$[ebp], 0
  0018c	74 10		 je	 SHORT $L35638
  0018e	8b 45 e8	 mov	 eax, DWORD PTR _ctx$[ebp]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  00197	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ctx$[ebp], 0
$L35638:

; 236  : 
; 237  :     }
; 238  : 
; 239  :     return DS_OK;

  0019e	33 c0		 xor	 eax, eax
$L35613:

; 240  : }

  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c2 04 00	 ret	 4
?AdjustFxScratch@CMcpxDspScratchDma@DirectSound@@QAEJK@Z ENDP ; DirectSound::CMcpxDspScratchDma::AdjustFxScratch
DSOUND	ENDS
END
