; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\mcpapu.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT PARA USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@OMKADFKC@CMcpxAPU?3?3?$HOCMcpxAPU?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@GDNDBHHM@CMcpxAPU?3?3Initialize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@HHBHIAJK@pVoice?9?$DOm_bVoiceCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@BOLDMOGN@pVoice?9?$DOm_bVoiceCount?5?$DM?$DN?5NUMELMS@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@HIAGCDHF@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@HIHKABCJ@nVoice?5?$DM?$DN?5nLastVoice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@PEENENCH@CMcpxAPU?3?3AllocateVoices?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@GGKNANOG@Voice?5client?5?$CFx?5allocated?5hardwa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@JAONEOME@Not?5enough?5free?5hardware?5voices?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LGMBAGNB@dwVoiceIndex?5?$DM?5MCPX_HW_MAX_VOICE@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@HCECNGCF@m_apVoiceMap?$FLdwVoiceIndex?$FN?5?$DN?$DN?5pV@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@JBACMFJI@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IKCMHJAD@CMcpxAPU?3?3WaitForMagicWrite?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT ??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@KOPCCDJ@CMcpxAPU?3?3HandleSoftwareMethod?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@NMDAKMOM@Voice?5not?5in?5software?5active?5lis@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07KNJIFJBG@pClient?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EMMMFGK@CMcpxAPU?3?3HandleIdleVoice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EE@LLFIMMID@Internal?5hardware?5error?5?9?9?5inval@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@DKGCGKPN@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@IJPABDMJ@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@DNFHHLKL@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFPGBNNK@?$CBpCmd?9?$DOrtTimestamp?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@NIALBJMK@IsListEmpty?$CI?$CGlstCommands?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT @InterlockedExchange@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ApuInterruptServiceRoutine@CMcpxAPU@DirectSound@@CGEPAU_KINTERRUPT@@PAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ApuInterruptDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DeferredCommandDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ApuShutdownNotifier@CMcpxAPU@DirectSound@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxAPU@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxAPU@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxAPU@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Terminate@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AllocateVoices@CMcpxAPU@DirectSound@@QAEJPAVCMcpxVoiceClient@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FreeVoices@CMcpxAPU@DirectSound@@QAEXPAVCMcpxVoiceClient@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceApuInterrupt@CMcpxAPU@DirectSound@@IAEHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceVoiceInterrupt@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetInterruptStatusCallback@CMcpxAPU@DirectSound@@CGEPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleFETrap@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleDeltaWarning@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleDeltaPanic@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleSoftwareMethod@CMcpxAPU@DirectSound@@IAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HandleIdleVoice@CMcpxAPU@DirectSound@@IAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleDeferredCommandLow@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveDeferredCommandLow@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceDeferredCommandsHigh@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceDeferredCommandsLow@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetHrtfHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetSpeakerConfig@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_ECMcpxAPU@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwParamOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT ?dwStateOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxAPU@DirectSound@@6BCMcpxCore@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxAPU@DirectSound@@6BCRefCount@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, DSOUND_RW, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A ; DirectSound::CMcpxAPU::m_Interrupt
PUBLIC	?m_dwDeltaPanicCount@CMcpxAPU@DirectSound@@0KA	; DirectSound::CMcpxAPU::m_dwDeltaPanicCount
PUBLIC	?m_dwDeltaWarningCount@CMcpxAPU@DirectSound@@0KA ; DirectSound::CMcpxAPU::m_dwDeltaWarningCount
PUBLIC	?m_fSimulateDeltaPanic@CMcpxAPU@DirectSound@@0HA ; DirectSound::CMcpxAPU::m_fSimulateDeltaPanic
PUBLIC	?m_fSimulateDeltaWarning@CMcpxAPU@DirectSound@@0HA ; DirectSound::CMcpxAPU::m_fSimulateDeltaWarning
PUBLIC	_DSoundBuildNumberD
DSOUND_URW	SEGMENT
?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A DB 070H DUP (?) ; DirectSound::CMcpxAPU::m_Interrupt
DSOUND_URW	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RW	SEGMENT
?m_dwDeltaWarningCount@CMcpxAPU@DirectSound@@0KA DD 00H	; DirectSound::CMcpxAPU::m_dwDeltaWarningCount
?m_dwDeltaPanicCount@CMcpxAPU@DirectSound@@0KA DD 00H	; DirectSound::CMcpxAPU::m_dwDeltaPanicCount
?m_fSimulateDeltaPanic@CMcpxAPU@DirectSound@@0HA DD 00H	; DirectSound::CMcpxAPU::m_fSimulateDeltaPanic
?m_fSimulateDeltaWarning@CMcpxAPU@DirectSound@@0HA DD 00H ; DirectSound::CMcpxAPU::m_fSimulateDeltaWarning
DSOUND_RW	ENDS
PUBLIC	??_ECMcpxAPU@DirectSound@@W7AEPAXI@Z		; DirectSound::CMcpxAPU::`vector deleting destructor'
PUBLIC	??0CRefCount@DirectSound@@QAE@K@Z		; DirectSound::CRefCount::CRefCount
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
PUBLIC	??0CMcpxAPU@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z ; DirectSound::CMcpxAPU::CMcpxAPU
PUBLIC	??_7CMcpxAPU@DirectSound@@6BCRefCount@1@@	; DirectSound::CMcpxAPU::`vftable'
PUBLIC	??_7CMcpxAPU@DirectSound@@6BCMcpxCore@1@@	; DirectSound::CMcpxAPU::`vftable'
PUBLIC	??_GCMcpxAPU@DirectSound@@UAEPAXI@Z		; DirectSound::CMcpxAPU::`scalar deleting destructor'
EXTRN	_g_dwDirectSoundFree2dVoices:DWORD
EXTRN	_g_dwDirectSoundFree3dVoices:DWORD
EXTRN	??0CMcpxCore@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z:NEAR ; DirectSound::CMcpxCore::CMcpxCore
EXTRN	??0CMcpxBufferSgeHeap@DirectSound@@QAE@XZ:NEAR	; DirectSound::CMcpxBufferSgeHeap::CMcpxBufferSgeHeap
EXTRN	??0CHrtfListener@DirectSound@@QAE@ABU_DS3DLISTENER@@@Z:NEAR ; DirectSound::CHrtfListener::CHrtfListener
EXTRN	??0CI3dl2Listener@DirectSound@@QAE@ABU_DSI3DL2LISTENER@@@Z:NEAR ; DirectSound::CI3dl2Listener::CI3dl2Listener
EXTRN	??_ECMcpxAPU@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CMcpxAPU::`vector deleting destructor'
;	COMDAT ??_7CMcpxAPU@DirectSound@@6BCRefCount@1@@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
CONST	SEGMENT
??_7CMcpxAPU@DirectSound@@6BCRefCount@1@@ DD FLAT:??_ECMcpxAPU@DirectSound@@UAEPAXI@Z ; DirectSound::CMcpxAPU::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
CONST	ENDS
;	COMDAT ??_7CMcpxAPU@DirectSound@@6BCMcpxCore@1@@
CONST	SEGMENT
??_7CMcpxAPU@DirectSound@@6BCMcpxCore@1@@ DD FLAT:??_ECMcpxAPU@DirectSound@@W7AEPAXI@Z ; DirectSound::CMcpxAPU::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMcpxAPU@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
_pSettings$ = 8
??0CMcpxAPU@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z PROC NEAR ; DirectSound::CMcpxAPU::CMcpxAPU, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	6a 01		 push	 1
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00014	8b 45 08	 mov	 eax, DWORD PTR _pSettings$[ebp]
  00017	50		 push	 eax
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	e8 00 00 00 00	 call	 ??0CMcpxCore@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z ; DirectSound::CMcpxCore::CMcpxCore
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _pSettings$[ebp]
  00026	83 c1 34	 add	 ecx, 52			; 00000034H
  00029	51		 push	 ecx
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 58	 add	 ecx, 88			; 00000058H
  00030	e8 00 00 00 00	 call	 ??0CHrtfListener@DirectSound@@QAE@ABU_DS3DLISTENER@@@Z ; DirectSound::CHrtfListener::CHrtfListener
  00035	8b 55 08	 mov	 edx, DWORD PTR _pSettings$[ebp]
  00038	83 c2 74	 add	 edx, 116		; 00000074H
  0003b	52		 push	 edx
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00045	e8 00 00 00 00	 call	 ??0CI3dl2Listener@DirectSound@@QAE@ABU_DSI3DL2LISTENER@@@Z ; DirectSound::CI3dl2Listener::CI3dl2Listener
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxAPU@DirectSound@@6BCRefCount@1@@
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:??_7CMcpxAPU@DirectSound@@6BCMcpxCore@1@@
  0005d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00060	c7 82 f8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+760], OFFSET FLAT:_g_dwDirectSoundFree2dVoices
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	c7 80 fc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+764], OFFSET FLAT:_g_dwDirectSoundFree3dVoices
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	81 c1 08 03 00
	00		 add	 ecx, 776		; 00000308H
  00080	e8 00 00 00 00	 call	 ??0CMcpxBufferSgeHeap@DirectSound@@QAE@XZ ; DirectSound::CMcpxBufferSgeHeap::CMcpxBufferSgeHeap

; 63   :     DWORD                   i;
; 64   :     
; 65   :     DPF_ENTER();
; 66   :     
; 67   :     //
; 68   :     // Initialize defaults
; 69   :     //
; 70   :     
; 71   :     for(i = 0; i < NUMELMS(m_alstActiveVoices); i++)

  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0008c	eb 09		 jmp	 SHORT $L35556
$L35557:
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00091	83 c1 01	 add	 ecx, 1
  00094	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35556:
  00097	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  0009b	73 36		 jae	 SHORT $L35558

; 72   :     {
; 73   :         InitializeListHead(&m_alstActiveVoices[i]);

  0009d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8d 8c d0 30 07
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+1840]
  000aa	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ad	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	89 8c d0 34 07
	00 00		 mov	 DWORD PTR [eax+edx*8+1844], ecx
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000ba	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c0	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  000c3	8b 84 c6 34 07
	00 00		 mov	 eax, DWORD PTR [esi+eax*8+1844]
  000ca	89 84 ca 30 07
	00 00		 mov	 DWORD PTR [edx+ecx*8+1840], eax

; 74   :     }

  000d1	eb bb		 jmp	 SHORT $L35557
$L35558:

; 75   : 
; 76   :     InitializeListHead(&m_lstPendingInactiveVoices);

  000d3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	81 c1 48 07 00
	00		 add	 ecx, 1864		; 00000748H
  000dc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000df	89 8a 4c 07 00
	00		 mov	 DWORD PTR [edx+1868], ecx
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	8b 91 4c 07 00
	00		 mov	 edx, DWORD PTR [ecx+1868]
  000f1	89 90 48 07 00
	00		 mov	 DWORD PTR [eax+1864], edx

; 77   :     InitializeListHead(&m_lstDeferredCommandsHigh);

  000f7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000fa	05 50 07 00 00	 add	 eax, 1872		; 00000750H
  000ff	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	89 81 54 07 00
	00		 mov	 DWORD PTR [ecx+1876], eax
  00108	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	8b 88 54 07 00
	00		 mov	 ecx, DWORD PTR [eax+1876]
  00114	89 8a 50 07 00
	00		 mov	 DWORD PTR [edx+1872], ecx

; 78   :     InitializeListHead(&m_lstDeferredCommandsLow);

  0011a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0011d	81 c2 58 07 00
	00		 add	 edx, 1880		; 00000758H
  00123	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00126	89 90 5c 07 00
	00		 mov	 DWORD PTR [eax+1884], edx
  0012c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00132	8b 82 5c 07 00
	00		 mov	 eax, DWORD PTR [edx+1884]
  00138	89 81 58 07 00
	00		 mov	 DWORD PTR [ecx+1880], eax

; 79   : 
; 80   :     m_dwFree2dVoiceCount = MCPX_HW_MAX_2D_VOICES;

  0013e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	8b 91 f8 02 00
	00		 mov	 edx, DWORD PTR [ecx+760]
  00147	c7 02 c0 00 00
	00		 mov	 DWORD PTR [edx], 192	; 000000c0H

; 81   :     m_dwFree3dVoiceCount = MCPX_HW_MAX_3D_VOICES;

  0014d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00150	8b 88 fc 02 00
	00		 mov	 ecx, DWORD PTR [eax+764]
  00156	c7 01 40 00 00
	00		 mov	 DWORD PTR [ecx], 64	; 00000040H

; 82   : 
; 83   :     DPF_LEAVE_VOID();
; 84   : }

  0015c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	5e		 pop	 esi
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 04 00	 ret	 4
??0CMcpxAPU@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z ENDP ; DirectSound::CMcpxAPU::CMcpxAPU
DSOUND	ENDS
PUBLIC	??_7CRefCount@DirectSound@@6B@			; DirectSound::CRefCount::`vftable'
PUBLIC	??_GCRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
CONST	SEGMENT
??_7CRefCount@DirectSound@@6B@ DD FLAT:??_ECRefCount@DirectSound@@UAEPAXI@Z ; DirectSound::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@DirectSound@@QAE@K@Z PROC NEAR		; DirectSound::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 38   :     }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@DirectSound@@QAE@K@Z ENDP			; DirectSound::CRefCount::CRefCount
DSOUND	ENDS
PUBLIC	??1CRefCount@DirectSound@@UAE@XZ		; DirectSound::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@DirectSound@@UAEPAXI@Z PROC NEAR		; DirectSound::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L30389
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L30389:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CRefCount::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND_RD	SEGMENT
??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CRefCount@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@

; 42   :         ASSERT(!m_dwRefCount);

  00010	6a 2a		 push	 42			; 0000002aH
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 43   :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@DirectSound@@UAE@XZ ENDP			; DirectSound::CRefCount::~CRefCount
DSOUND	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T36449 = -8
$T36448 = -4
_this$ = 8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L30406

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L30406

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T36449[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T36449[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T36448[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T36448[ebp], 0
  00058	74 11		 je	 SHORT $L36450
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T36448[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T36448[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L36451
$L36450:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L36451:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L30404
$L30406:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L30404:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
DSOUND	ENDS
PUBLIC	??1CMcpxAPU@DirectSound@@UAE@XZ			; DirectSound::CMcpxAPU::~CMcpxAPU
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxAPU@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxAPU@DirectSound@@UAEPAXI@Z PROC NEAR		; DirectSound::CMcpxAPU::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxAPU@DirectSound@@UAE@XZ ; DirectSound::CMcpxAPU::~CMcpxAPU
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35562
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35562:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxAPU@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CMcpxAPU::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0BE@OMKADFKC@CMcpxAPU?3?3?$HOCMcpxAPU?$AA@ ; `string'
PUBLIC	??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@	; `string'
PUBLIC	?Terminate@CMcpxAPU@DirectSound@@IAEXXZ		; DirectSound::CMcpxAPU::Terminate
EXTRN	__imp__HalRegisterShutdownNotification@8:NEAR
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	??1CMcpxCore@DirectSound@@UAE@XZ:NEAR		; DirectSound::CMcpxCore::~CMcpxCore
EXTRN	??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ:NEAR	; DirectSound::CMcpxBufferSgeHeap::~CMcpxBufferSgeHeap
EXTRN	??1CHrtfListener@DirectSound@@QAE@XZ:NEAR	; DirectSound::CHrtfListener::~CHrtfListener
EXTRN	__imp__KeRemoveQueueDpc@4:NEAR
EXTRN	__imp__KeDisconnectInterrupt@4:NEAR
EXTRN	__imp__KeCancelTimer@4:NEAR
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@OMKADFKC@CMcpxAPU?3?3?$HOCMcpxAPU?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@OMKADFKC@CMcpxAPU?3?3?$HOCMcpxAPU?$AA@ DB 'CMcpxAPU::~CMcpxAPU', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpapu.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@
DSOUND_RD	SEGMENT
??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@ DB 'APU going away...', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CMcpxAPU@DirectSound@@UAE@XZ
DSOUND	SEGMENT
tv68 = -12
tv72 = -8
_this$ = -4
??1CMcpxAPU@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CMcpxAPU::~CMcpxAPU, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxAPU@DirectSound@@6BCRefCount@1@@
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:??_7CMcpxAPU@DirectSound@@6BCMcpxCore@1@@

; 110  :     DPF_ENTER();
; 111  : 
; 112  :     DPF_INFO("APU going away...");

  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@OMKADFKC@CMcpxAPU?3?3?$HOCMcpxAPU?$AA@
  00026	6a 70		 push	 112			; 00000070H
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0002d	6a 04		 push	 4
  0002f	6a 09		 push	 9
  00031	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00036	83 c4 18	 add	 esp, 24			; 00000018H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@DENHND@APU?5going?5away?4?4?4?$AA@
  0003e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00043	83 c4 04	 add	 esp, 4

; 113  : 
; 114  :     //
; 115  :     // Shut down the APU
; 116  :     //
; 117  : 
; 118  :     Terminate();

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?Terminate@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::Terminate

; 119  : 
; 120  :     //
; 121  :     // Disconnect the interrupt handler
; 122  :     //
; 123  : 
; 124  :     if(m_Interrupt.ServiceRoutine)

  0004e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A, 0
  00055	74 15		 je	 SHORT $L35570

; 125  :     {
; 126  :         KeDisconnectInterrupt(&m_Interrupt);

  00057	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A ; DirectSound::CMcpxAPU::m_Interrupt
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeDisconnectInterrupt@4

; 127  :         m_Interrupt.ServiceRoutine = NULL;

  00062	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A, 0
$L35570:

; 128  :     }
; 129  : 
; 130  :     //
; 131  :     // Cancel timers
; 132  :     //
; 133  : 
; 134  :     KeCancelTimer(&m_tmrDeferredCommandsHigh);

  0006c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	81 c2 90 07 00
	00		 add	 edx, 1936		; 00000790H
  00075	52		 push	 edx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeCancelTimer@4

; 135  : 
; 136  :     //
; 137  :     // Clear any pending DPCs
; 138  :     //
; 139  : 
; 140  :     if(DpcObject == m_dpcInterrupt.Type)

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	0f bf 88 70 07
	00 00		 movsx	 ecx, WORD PTR [eax+1904]
  00086	83 f9 13	 cmp	 ecx, 19			; 00000013H
  00089	75 26		 jne	 SHORT $L35571

; 141  :     {
; 142  :         KeRemoveQueueDpc(&m_dpcInterrupt);

  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	81 c2 70 07 00
	00		 add	 edx, 1904		; 00000770H
  00094	52		 push	 edx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRemoveQueueDpc@4

; 143  :         m_dpcInterrupt.Type = ~m_dpcInterrupt.Type;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	0f bf 88 70 07
	00 00		 movsx	 ecx, WORD PTR [eax+1904]
  000a5	f7 d1		 not	 ecx
  000a7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	66 89 8a 70 07
	00 00		 mov	 WORD PTR [edx+1904], cx
$L35571:

; 144  :     }
; 145  : 
; 146  :     if(DpcObject == m_dpcDeferredCommandsHigh.Type)

  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	0f bf 88 b8 07
	00 00		 movsx	 ecx, WORD PTR [eax+1976]
  000bb	83 f9 13	 cmp	 ecx, 19			; 00000013H
  000be	75 26		 jne	 SHORT $L35572

; 147  :     {
; 148  :         KeRemoveQueueDpc(&m_dpcDeferredCommandsHigh);

  000c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c3	81 c2 b8 07 00
	00		 add	 edx, 1976		; 000007b8H
  000c9	52		 push	 edx
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRemoveQueueDpc@4

; 149  :         m_dpcDeferredCommandsHigh.Type = ~m_dpcInterrupt.Type;

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	0f bf 88 70 07
	00 00		 movsx	 ecx, WORD PTR [eax+1904]
  000da	f7 d1		 not	 ecx
  000dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000df	66 89 8a b8 07
	00 00		 mov	 WORD PTR [edx+1976], cx
$L35572:

; 150  :     }
; 151  : 
; 152  :     //
; 153  :     // Unregister the shutdown handler
; 154  :     //
; 155  : 
; 156  :     if(m_HalShutdownData.NotificationRoutine)

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	83 b8 d4 07 00
	00 00		 cmp	 DWORD PTR [eax+2004], 0
  000f0	74 1f		 je	 SHORT $L35573

; 157  :     {
; 158  :         HalRegisterShutdownNotification(&m_HalShutdownData, FALSE);

  000f2	6a 00		 push	 0
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	81 c1 d4 07 00
	00		 add	 ecx, 2004		; 000007d4H
  000fd	51		 push	 ecx
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HalRegisterShutdownNotification@8

; 159  :         m_HalShutdownData.NotificationRoutine = NULL;

  00104	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00107	c7 82 d4 07 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2004], 0
$L35573:

; 160  :     }
; 161  : 
; 162  :     m_dwFree2dVoiceCount = 0;

  00111	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00114	8b 88 f8 02 00
	00		 mov	 ecx, DWORD PTR [eax+760]
  0011a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 163  :     m_dwFree3dVoiceCount = 0;

  00120	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00123	8b 82 fc 02 00
	00		 mov	 eax, DWORD PTR [edx+764]
  00129	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 164  : 
; 165  :     DPF_LEAVE_VOID();
; 166  : }

  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	81 c1 08 03 00
	00		 add	 ecx, 776		; 00000308H
  00138	e8 00 00 00 00	 call	 ??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ ; DirectSound::CMcpxBufferSgeHeap::~CMcpxBufferSgeHeap
  0013d	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00141	74 0b		 je	 SHORT $L36460
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	83 c1 58	 add	 ecx, 88			; 00000058H
  00149	89 4d f8	 mov	 DWORD PTR tv72[ebp], ecx
  0014c	eb 07		 jmp	 SHORT $L36461
$L36460:
  0014e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L36461:
  00155	8b 4d f8	 mov	 ecx, DWORD PTR tv72[ebp]
  00158	e8 00 00 00 00	 call	 ??1CHrtfListener@DirectSound@@QAE@XZ ; DirectSound::CHrtfListener::~CHrtfListener
  0015d	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00161	74 0b		 je	 SHORT $L36458
  00163	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00166	83 c2 08	 add	 edx, 8
  00169	89 55 f4	 mov	 DWORD PTR tv68[ebp], edx
  0016c	eb 07		 jmp	 SHORT $L36459
$L36458:
  0016e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L36459:
  00175	8b 4d f4	 mov	 ecx, DWORD PTR tv68[ebp]
  00178	e8 00 00 00 00	 call	 ??1CMcpxCore@DirectSound@@UAE@XZ ; DirectSound::CMcpxCore::~CMcpxCore
  0017d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
??1CMcpxAPU@DirectSound@@UAE@XZ ENDP			; DirectSound::CMcpxAPU::~CMcpxAPU
DSOUND	ENDS
PUBLIC	??_C@_0BF@GDNDBHHM@CMcpxAPU?3?3Initialize?$AA@	; `string'
PUBLIC	??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@ ; `string'
PUBLIC	?Initialize@CMcpxAPU@DirectSound@@QAEJXZ	; DirectSound::CMcpxAPU::Initialize
PUBLIC	?SetHrtfHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z	; DirectSound::CMcpxAPU::SetHrtfHeadroom
PUBLIC	?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z ; DirectSound::CMcpxAPU::SetMixBinHeadroom
PUBLIC	?ApuInterruptServiceRoutine@CMcpxAPU@DirectSound@@CGEPAU_KINTERRUPT@@PAX@Z ; DirectSound::CMcpxAPU::ApuInterruptServiceRoutine
PUBLIC	?ApuInterruptDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z ; DirectSound::CMcpxAPU::ApuInterruptDpcRoutine
PUBLIC	?DeferredCommandDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z ; DirectSound::CMcpxAPU::DeferredCommandDpcRoutine
PUBLIC	?ApuShutdownNotifier@CMcpxAPU@DirectSound@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z ; DirectSound::CMcpxAPU::ApuShutdownNotifier
EXTRN	__imp__HalGetInterruptVector@8:NEAR
EXTRN	?Initialize@CMcpxCore@DirectSound@@QAEJXZ:NEAR	; DirectSound::CMcpxCore::Initialize
EXTRN	?SetInterruptState@CMcpxCore@DirectSound@@IAEXH@Z:NEAR ; DirectSound::CMcpxCore::SetInterruptState
EXTRN	?Initialize@CMcpxBufferSgeHeap@DirectSound@@QAEJG@Z:NEAR ; DirectSound::CMcpxBufferSgeHeap::Initialize
EXTRN	__imp__KeInitializeDpc@12:NEAR
EXTRN	__imp__KeInitializeInterrupt@28:NEAR
EXTRN	__imp__KeConnectInterrupt@4:NEAR
EXTRN	__imp__KeInitializeTimerEx@8:NEAR
;	COMDAT ??_C@_0BF@GDNDBHHM@CMcpxAPU?3?3Initialize?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@GDNDBHHM@CMcpxAPU?3?3Initialize?$AA@ DB 'CMcpxAPU::Initialize', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@ DB 'KeConnectInterrupt'
	DB	' failed', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT
tv176 = -21
_this$ = -20
_hr$ = -16
_i$ = -12
_ulInterruptVector$ = -8
_irql$ = -1
?Initialize@CMcpxAPU@DirectSound@@QAEJXZ PROC NEAR	; DirectSound::CMcpxAPU::Initialize, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 193  :     ULONG                   ulInterruptVector;
; 194  :     KIRQL                   irql;
; 195  :     HRESULT                 hr;
; 196  :     DWORD                   i;
; 197  : 
; 198  :     //
; 199  :     // Initialize the APU core
; 200  :     //
; 201  : 
; 202  :     hr = CMcpxCore::Initialize();

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 08	 add	 ecx, 8
  0000f	e8 00 00 00 00	 call	 ?Initialize@CMcpxCore@DirectSound@@QAEJXZ ; DirectSound::CMcpxCore::Initialize
  00014	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 203  : 
; 204  :     //
; 205  :     // Create the buffer SGE heap.  We're only managing 2047 markers because
; 206  :     // the 2048th is reserved for FXIN buffers.
; 207  :     //
; 208  : 
; 209  :     if(SUCCEEDED(hr))

  00017	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001b	7c 16		 jl	 SHORT $L35583

; 210  :     {
; 211  :         hr = m_SgeHeap.Initialize(MCPX_HW_MAX_BUFFER_PRDS - 1);

  0001d	68 ff 07 00 00	 push	 2047			; 000007ffH
  00022	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	81 c1 08 03 00
	00		 add	 ecx, 776		; 00000308H
  0002b	e8 00 00 00 00	 call	 ?Initialize@CMcpxBufferSgeHeap@DirectSound@@QAEJG@Z ; DirectSound::CMcpxBufferSgeHeap::Initialize
  00030	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L35583:

; 212  :     }
; 213  : 
; 214  :     //
; 215  :     // Set up timers and DPCs
; 216  :     //
; 217  :     
; 218  : 	if(SUCCEEDED(hr))

  00033	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00037	7c 44		 jl	 SHORT $L35585

; 219  :     {
; 220  :         KeInitializeDpc(&m_dpcInterrupt, ApuInterruptDpcRoutine, this);

  00039	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?ApuInterruptDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z ; DirectSound::CMcpxAPU::ApuInterruptDpcRoutine
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 70 07 00
	00		 add	 ecx, 1904		; 00000770H
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeDpc@12

; 221  :         KeInitializeTimer(&m_tmrDeferredCommandsHigh);

  00052	6a 00		 push	 0
  00054	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00057	81 c2 90 07 00
	00		 add	 edx, 1936		; 00000790H
  0005d	52		 push	 edx
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeTimerEx@8

; 222  :         KeInitializeDpc(&m_dpcDeferredCommandsHigh, DeferredCommandDpcRoutine, this);

  00064	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET FLAT:?DeferredCommandDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z ; DirectSound::CMcpxAPU::DeferredCommandDpcRoutine
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 b8 07 00
	00		 add	 ecx, 1976		; 000007b8H
  00076	51		 push	 ecx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeDpc@12
$L35585:

; 223  :     }
; 224  : 
; 225  : 	//
; 226  :     // Hook and enable interrupts
; 227  :     //
; 228  : 
; 229  :     if(SUCCEEDED(hr))

  0007d	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00081	7c 75		 jl	 SHORT $L35587

; 230  :     {
; 231  :         ulInterruptVector = HalGetInterruptVector(XPCICFG_APU_IRQ, &irql);

  00083	8d 55 ff	 lea	 edx, DWORD PTR _irql$[ebp]
  00086	52		 push	 edx
  00087	6a 05		 push	 5
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HalGetInterruptVector@8
  0008f	89 45 f8	 mov	 DWORD PTR _ulInterruptVector$[ebp], eax

; 232  : 
; 233  :         KeInitializeInterrupt(&m_Interrupt, ApuInterruptServiceRoutine, this, ulInterruptVector, irql, LevelSensitive, TRUE);

  00092	6a 01		 push	 1
  00094	6a 00		 push	 0
  00096	8a 45 ff	 mov	 al, BYTE PTR _irql$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _ulInterruptVector$[ebp]
  0009d	51		 push	 ecx
  0009e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	52		 push	 edx
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:?ApuInterruptServiceRoutine@CMcpxAPU@DirectSound@@CGEPAU_KINTERRUPT@@PAX@Z ; DirectSound::CMcpxAPU::ApuInterruptServiceRoutine
  000a7	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A ; DirectSound::CMcpxAPU::m_Interrupt
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeInterrupt@28

; 234  : 
; 235  :         if(!KeConnectInterrupt(&m_Interrupt))

  000b2	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A ; DirectSound::CMcpxAPU::m_Interrupt
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeConnectInterrupt@4
  000bd	0f b6 c0	 movzx	 eax, al
  000c0	85 c0		 test	 eax, eax
  000c2	75 34		 jne	 SHORT $L35587

; 236  :         {
; 237  :             DPF_ERROR("KeConnectInterrupt failed");

  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@GDNDBHHM@CMcpxAPU?3?3Initialize?$AA@
  000ce	68 ed 00 00 00	 push	 237			; 000000edH
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  000d8	6a 01		 push	 1
  000da	6a 09		 push	 9
  000dc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e1	83 c4 18	 add	 esp, 24			; 00000018H
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@EBFOGEEA@KeConnectInterrupt?5failed?$AA@
  000e9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ee	83 c4 04	 add	 esp, 4

; 238  :             hr = DSERR_GENERIC;

  000f1	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L35587:

; 239  :         }
; 240  :     }
; 241  : 
; 242  :     if(SUCCEEDED(hr))

  000f8	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000fc	7c 0a		 jl	 SHORT $L35593

; 243  :     {
; 244  :         MCPX_REG_WRITE(NV_PAPU_ISTS, ~0UL);

  000fe	c7 05 00 10 80
	fe ff ff ff ff	 mov	 DWORD PTR ds:-25161728, -1
$L35593:

; 245  :     }
; 246  : 
; 247  :     if(SUCCEEDED(hr))

  00108	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010c	7c 0d		 jl	 SHORT $L35597

; 248  :     {
; 249  :         SetInterruptState(TRUE);

  0010e	6a 01		 push	 1
  00110	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	83 c1 08	 add	 ecx, 8
  00116	e8 00 00 00 00	 call	 ?SetInterruptState@CMcpxCore@DirectSound@@IAEXH@Z ; DirectSound::CMcpxCore::SetInterruptState
$L35597:

; 250  :     }
; 251  : 
; 252  :     //
; 253  :     // Register for HAL shutdown notification
; 254  :     //
; 255  : 
; 256  :     if(SUCCEEDED(hr))

  0011b	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011f	7c 1f		 jl	 SHORT $L35599

; 257  :     {
; 258  :         m_HalShutdownData.NotificationRoutine = ApuShutdownNotifier;

  00121	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	c7 81 d4 07 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+2004], OFFSET FLAT:?ApuShutdownNotifier@CMcpxAPU@DirectSound@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z ; DirectSound::CMcpxAPU::ApuShutdownNotifier

; 259  : 
; 260  :         HalRegisterShutdownNotification(&m_HalShutdownData, TRUE);

  0012e	6a 01		 push	 1
  00130	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00133	81 c2 d4 07 00
	00		 add	 edx, 2004		; 000007d4H
  00139	52		 push	 edx
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__HalRegisterShutdownNotification@8
$L35599:

; 261  :     }
; 262  : 
; 263  :     //
; 264  :     // Set default headroom values
; 265  :     //
; 266  : 
; 267  :     if(SUCCEEDED(hr))

  00140	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00144	7c 0d		 jl	 SHORT $L35601

; 268  :     {
; 269  :         hr = SetHrtfHeadroom(0);

  00146	6a 00		 push	 0
  00148	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	e8 00 00 00 00	 call	 ?SetHrtfHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z ; DirectSound::CMcpxAPU::SetHrtfHeadroom
  00150	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
$L35601:

; 270  :     }
; 271  : 
; 272  :     for(i = 0; (i < NUMELMS(m_pSettings->m_abMixBinHeadroom)) && SUCCEEDED(hr); i++)

  00153	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0015a	eb 09		 jmp	 SHORT $L35603
$L35604:
  0015c	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0015f	83 c0 01	 add	 eax, 1
  00162	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L35603:
  00165	83 7d f4 20	 cmp	 DWORD PTR _i$[ebp], 32	; 00000020H
  00169	73 17		 jae	 SHORT $L35605
  0016b	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0016f	7c 11		 jl	 SHORT $L35605

; 273  :     {
; 274  :         hr = SetMixBinHeadroom(i);

  00171	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00174	51		 push	 ecx
  00175	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00178	e8 00 00 00 00	 call	 ?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z ; DirectSound::CMcpxAPU::SetMixBinHeadroom
  0017d	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 275  :     }

  00180	eb da		 jmp	 SHORT $L35604
$L35605:

; 276  : 
; 277  : #ifndef MCPX_BOOT_LIB
; 278  : 
; 279  :     //
; 280  :     // Set up the HRTF listener
; 281  :     //
; 282  : 
; 283  :     if(SUCCEEDED(hr))

  00182	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00186	7c 5c		 jl	 SHORT $L35607

; 284  :     {
; 285  :         if(DSSPEAKER_IS_HEADPHONES(m_pSettings->m_dwSpeakerConfig))

  00188	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0018b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0018e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00191	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  00197	85 c9		 test	 ecx, ecx
  00199	74 0c		 je	 SHORT $L35608

; 286  :         {
; 287  :             m_fSurround = FALSE;

  0019b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0019e	c6 82 d0 00 00
	00 00		 mov	 BYTE PTR [edx+208], 0

; 288  :         }
; 289  :         else

  001a5	eb 3d		 jmp	 SHORT $L35607
$L35608:

; 290  :         {
; 291  :             m_fSurround = DSSPEAKER_IS_SURROUND(m_pSettings->m_dwSpeakerConfig);

  001a7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001aa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001ad	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001b0	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  001b6	83 fa 02	 cmp	 edx, 2
  001b9	74 19		 je	 SHORT $L36465
  001bb	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001be	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001c1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001c4	81 e2 00 00 01
	00		 and	 edx, 65536		; 00010000H
  001ca	85 d2		 test	 edx, edx
  001cc	75 06		 jne	 SHORT $L36465
  001ce	c6 45 eb 00	 mov	 BYTE PTR tv176[ebp], 0
  001d2	eb 04		 jmp	 SHORT $L36466
$L36465:
  001d4	c6 45 eb 01	 mov	 BYTE PTR tv176[ebp], 1
$L36466:
  001d8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001db	8a 4d eb	 mov	 cl, BYTE PTR tv176[ebp]
  001de	88 88 d0 00 00
	00		 mov	 BYTE PTR [eax+208], cl
$L35607:

; 292  :         }
; 293  :     }
; 294  : 
; 295  : #endif // MCPX_BOOT_LIB
; 296  : 
; 297  :     DPF_LEAVE_HRESULT(hr);
; 298  : 
; 299  : 	return hr;

  001e4	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 300  : }

  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c3		 ret	 0
?Initialize@CMcpxAPU@DirectSound@@QAEJXZ ENDP		; DirectSound::CMcpxAPU::Initialize
DSOUND	ENDS
PUBLIC	?ServiceApuInterrupt@CMcpxAPU@DirectSound@@IAEHXZ ; DirectSound::CMcpxAPU::ServiceApuInterrupt
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
;	COMDAT ?ApuInterruptServiceRoutine@CMcpxAPU@DirectSound@@CGEPAU_KINTERRUPT@@PAX@Z
DSOUND	SEGMENT
_pInterrupt$ = 8
_pvContext$ = 12
?ApuInterruptServiceRoutine@CMcpxAPU@DirectSound@@CGEPAU_KINTERRUPT@@PAX@Z PROC NEAR ; DirectSound::CMcpxAPU::ApuInterruptServiceRoutine, COMDAT

; 237  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  :         return (BOOLEAN)((CMcpxAPU *)pvContext)->ServiceApuInterrupt();

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pvContext$[ebp]
  00006	e8 00 00 00 00	 call	 ?ServiceApuInterrupt@CMcpxAPU@DirectSound@@IAEHXZ ; DirectSound::CMcpxAPU::ServiceApuInterrupt

; 239  :     }

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?ApuInterruptServiceRoutine@CMcpxAPU@DirectSound@@CGEPAU_KINTERRUPT@@PAX@Z ENDP ; DirectSound::CMcpxAPU::ApuInterruptServiceRoutine
DSOUND	ENDS
PUBLIC	?ServiceApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceApuInterruptDpc
; Function compile flags: /Odt
;	COMDAT ?ApuInterruptDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT
_pDpc$ = 8
_pvDeferredContext$ = 12
_pvSystemContext1$ = 16
_pvSystemContext2$ = 20
?ApuInterruptDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z PROC NEAR ; DirectSound::CMcpxAPU::ApuInterruptDpcRoutine, COMDAT

; 242  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  :         ((CMcpxAPU *)pvDeferredContext)->ServiceApuInterruptDpc();

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pvDeferredContext$[ebp]
  00006	e8 00 00 00 00	 call	 ?ServiceApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceApuInterruptDpc

; 244  :     }

  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?ApuInterruptDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z ENDP ; DirectSound::CMcpxAPU::ApuInterruptDpcRoutine
DSOUND	ENDS
PUBLIC	?ServiceDeferredCommandsHigh@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceDeferredCommandsHigh
; Function compile flags: /Odt
;	COMDAT ?DeferredCommandDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z
DSOUND	SEGMENT
_pdpc$ = 8
_pvDeferredContext$ = 12
_pvSystemContext1$ = 16
_pvSystemContext2$ = 20
?DeferredCommandDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z PROC NEAR ; DirectSound::CMcpxAPU::DeferredCommandDpcRoutine, COMDAT

; 247  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 248  :         ((CMcpxAPU *)pvDeferredContext)->ServiceDeferredCommandsHigh();

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pvDeferredContext$[ebp]
  00006	e8 00 00 00 00	 call	 ?ServiceDeferredCommandsHigh@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceDeferredCommandsHigh

; 249  :     }

  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?DeferredCommandDpcRoutine@CMcpxAPU@DirectSound@@CGXPAU_KDPC@@PAX11@Z ENDP ; DirectSound::CMcpxAPU::DeferredCommandDpcRoutine
DSOUND	ENDS
EXTRN	_g_fDirectSoundInFinalRelease:DWORD
; Function compile flags: /Odt
;	COMDAT ?ApuShutdownNotifier@CMcpxAPU@DirectSound@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z
DSOUND	SEGMENT
_pHalShutdownData$ = 8
?ApuShutdownNotifier@CMcpxAPU@DirectSound@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z PROC NEAR ; DirectSound::CMcpxAPU::ApuShutdownNotifier, COMDAT

; 252  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  :         g_fDirectSoundInFinalRelease = TRUE;

  00003	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fDirectSoundInFinalRelease, 1

; 254  :     
; 255  :         CONTAINING_RECORD(pHalShutdownData, CMcpxAPU, m_HalShutdownData)->Terminate();

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pHalShutdownData$[ebp]
  00010	81 e9 d4 07 00
	00		 sub	 ecx, 2004		; 000007d4H
  00016	e8 00 00 00 00	 call	 ?Terminate@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::Terminate

; 256  :     }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?ApuShutdownNotifier@CMcpxAPU@DirectSound@@CGXPAU_HAL_SHUTDOWN_REGISTRATION@@@Z ENDP ; DirectSound::CMcpxAPU::ApuShutdownNotifier
DSOUND	ENDS
PUBLIC	??0CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::~CAutoIrql
PUBLIC	?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ	; DirectSound::CMcpxAPU::BlockIdleHandler
PUBLIC	?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler
EXTRN	?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z:NEAR ; DirectSound::CMcpxVoiceClient::DeactivateVoice
EXTRN	?Reset@CMcpxCore@DirectSound@@IAEXXZ:NEAR	; DirectSound::CMcpxCore::Reset
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
;	COMDAT ?Terminate@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -24
_pVoice$ = -20
___AutoIrql$ = -16
_pleEntry$ = -8
_i$ = -4
?Terminate@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR	; DirectSound::CMcpxAPU::Terminate, COMDAT
; _this$ = ecx

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 328  :     PLIST_ENTRY             pleEntry;
; 329  :     CMcpxVoiceClient *      pVoice;
; 330  :     DWORD                   i;
; 331  :     
; 332  :     DPF_ENTER();
; 333  :     AutoIrql();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 334  : 
; 335  :     //
; 336  :     // Block the idle handler
; 337  :     //
; 338  : 
; 339  :     BlockIdleHandler();

  00011	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::BlockIdleHandler

; 340  : 
; 341  :     //
; 342  :     // Deactivate all voices
; 343  :     //
; 344  : 
; 345  :     for(i = 0; i < NUMELMS(m_alstActiveVoices); i++)

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $L35619
$L35620:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35619:
  0002b	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  0002f	73 43		 jae	 SHORT $L35621

; 346  :     {
; 347  :         for(pleEntry = m_alstActiveVoices[i].Flink; pleEntry != &m_alstActiveVoices[i]; pleEntry = pleEntry->Flink)

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00034	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 84 ca 30 07
	00 00		 mov	 eax, DWORD PTR [edx+ecx*8+1840]
  0003e	89 45 f8	 mov	 DWORD PTR _pleEntry$[ebp], eax
  00041	eb 08		 jmp	 SHORT $L35622
$L35623:
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	89 55 f8	 mov	 DWORD PTR _pleEntry$[ebp], edx
$L35622:
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8d 94 c1 30 07
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+1840]
  00058	39 55 f8	 cmp	 DWORD PTR _pleEntry$[ebp], edx
  0005b	74 15		 je	 SHORT $L35624

; 348  :         {
; 349  :             pVoice = CONTAINING_RECORD(pleEntry, CMcpxVoiceClient, m_leActiveVoice);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00060	83 e8 4c	 sub	 eax, 76			; 0000004cH
  00063	89 45 ec	 mov	 DWORD PTR _pVoice$[ebp], eax

; 350  : 
; 351  :             pVoice->DeactivateVoice();

  00066	6a 00		 push	 0
  00068	8b 4d ec	 mov	 ecx, DWORD PTR _pVoice$[ebp]
  0006b	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice

; 352  :         }

  00070	eb d1		 jmp	 SHORT $L35623
$L35624:

; 353  :     }

  00072	eb ae		 jmp	 SHORT $L35620
$L35621:

; 354  : 
; 355  :     //
; 356  :     // Unblock the idle handler
; 357  :     //
; 358  : 
; 359  :     UnblockIdleHandler();

  00074	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler

; 360  : 
; 361  :     //
; 362  :     // Shut down the APU core
; 363  :     //
; 364  : 
; 365  :     Reset();

  0007c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 08	 add	 ecx, 8
  00082	e8 00 00 00 00	 call	 ?Reset@CMcpxCore@DirectSound@@IAEXXZ ; DirectSound::CMcpxCore::Reset

; 366  : 
; 367  :     DPF_LEAVE_VOID();
; 368  : }

  00087	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0008a	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?Terminate@CMcpxAPU@DirectSound@@IAEXXZ ENDP		; DirectSound::CMcpxAPU::Terminate
DSOUND	ENDS
PUBLIC	??0CIrql@DirectSound@@QAE@XZ			; DirectSound::CIrql::CIrql
PUBLIC	?Raise@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 77   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 78   :         Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 79   :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@DirectSound@@QAE@XZ PROC NEAR			; DirectSound::CIrql::CIrql, COMDAT
; _this$ = ecx

; 40   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   :         m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 42   :     }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Raise, COMDAT
; _this$ = ecx

; 45   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   :         if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L30264

; 47   :         {
; 48   :             m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L30264:

; 49   :         }
; 50   :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	?Lower@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 82   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   :         Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 84   :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::~CAutoIrql
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Lower, COMDAT
; _this$ = ecx

; 53   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :         if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L30269

; 55   :         {
; 56   :             KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 57   :             m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L30269:

; 58   :         }
; 59   :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Lower
DSOUND	ENDS
PUBLIC	??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
DSOUND_RD	SEGMENT
??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dsound\dsound\mcpapu.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ DB 'KeG'
	DB	'etCurrentIrql() >= DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@ DB 'm_dwVoiceMapLo'
	DB	'ck < ~0UL', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::BlockIdleHandler, COMDAT
; _this$ = ecx

; 264  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 265  :         ASSERT(KeGetCurrentIrql() >= DISPATCH_LEVEL);

  00007	68 09 01 00 00	 push	 265			; 00000109H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  00016	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 f8 02	 cmp	 eax, 2
  00023	0f 9c c1	 setl	 cl
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 266  :         ASSERT(m_dwVoiceMapLock < ~0UL);

  0002f	68 0a 01 00 00	 push	 266			; 0000010aH
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	83 ba 2c 03 00
	00 ff		 cmp	 DWORD PTR [edx+812], -1
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 267  :         m_dwVoiceMapLock++;

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 91 2c 03 00
	00		 mov	 edx, DWORD PTR [ecx+812]
  0005d	83 c2 01	 add	 edx, 1
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	89 90 2c 03 00
	00		 mov	 DWORD PTR [eax+812], edx

; 268  :     }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ENDP	; DirectSound::CMcpxAPU::BlockIdleHandler
DSOUND	ENDS
PUBLIC	??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@ ; `string'
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@ DB 'm_dwVoiceMapLoc'
	DB	'k >= 1', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::UnblockIdleHandler, COMDAT
; _this$ = ecx

; 271  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         ASSERT(KeGetCurrentIrql() >= DISPATCH_LEVEL);

  00007	68 10 01 00 00	 push	 272			; 00000110H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  00016	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 f8 02	 cmp	 eax, 2
  00023	0f 9c c1	 setl	 cl
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 273  :         ASSERT(m_dwVoiceMapLock >= 1);

  0002f	68 11 01 00 00	 push	 273			; 00000111H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	83 ba 2c 03 00
	00 01		 cmp	 DWORD PTR [edx+812], 1
  00048	1b c0		 sbb	 eax, eax
  0004a	f7 d8		 neg	 eax
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 274  :         m_dwVoiceMapLock--;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 91 2c 03 00
	00		 mov	 edx, DWORD PTR [ecx+812]
  0005e	83 ea 01	 sub	 edx, 1
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	89 90 2c 03 00
	00		 mov	 DWORD PTR [eax+812], edx

; 275  :     }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ENDP	; DirectSound::CMcpxAPU::UnblockIdleHandler
DSOUND	ENDS
PUBLIC	??_C@_0BG@HHBHIAJK@pVoice?9?$DOm_bVoiceCount?$AA@ ; `string'
PUBLIC	??_C@_0DF@BOLDMOGN@pVoice?9?$DOm_bVoiceCount?5?$DM?$DN?5NUMELMS@ ; `string'
PUBLIC	?AllocateVoices@CMcpxAPU@DirectSound@@QAEJPAVCMcpxVoiceClient@2@@Z ; DirectSound::CMcpxAPU::AllocateVoices
PUBLIC	??_C@_0DN@HIAGCDHF@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@ ; `string'
PUBLIC	??_C@_0BF@HIHKABCJ@nVoice?5?$DM?$DN?5nLastVoice?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PEENENCH@CMcpxAPU?3?3AllocateVoices?$AA@ ; `string'
PUBLIC	??_C@_0CM@GGKNANOG@Voice?5client?5?$CFx?5allocated?5hardwa@ ; `string'
PUBLIC	??_C@_0CA@JAONEOME@Not?5enough?5free?5hardware?5voices?$AA@ ; `string'
;	COMDAT ??_C@_0BG@HHBHIAJK@pVoice?9?$DOm_bVoiceCount?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
DSOUND_RD	SEGMENT
??_C@_0BG@HHBHIAJK@pVoice?9?$DOm_bVoiceCount?$AA@ DB 'pVoice->m_bVoiceCou'
	DB	'nt', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@BOLDMOGN@pVoice?9?$DOm_bVoiceCount?5?$DM?$DN?5NUMELMS@
DSOUND_RD	SEGMENT
??_C@_0DF@BOLDMOGN@pVoice?9?$DOm_bVoiceCount?5?$DM?$DN?5NUMELMS@ DB 'pVoi'
	DB	'ce->m_bVoiceCount <= NUMELMS(pVoice->m_ahVoices)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@HIAGCDHF@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@
DSOUND_RD	SEGMENT
??_C@_0DN@HIAGCDHF@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@ DB 'MCPX_VOI'
	DB	'CE_HANDLE_INVALID == pVoice->m_ahVoices[bVoiceIndex]', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@HIHKABCJ@nVoice?5?$DM?$DN?5nLastVoice?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@HIHKABCJ@nVoice?5?$DM?$DN?5nLastVoice?$AA@ DB 'nVoice <= nLastV'
	DB	'oice', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@PEENENCH@CMcpxAPU?3?3AllocateVoices?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@PEENENCH@CMcpxAPU?3?3AllocateVoices?$AA@ DB 'CMcpxAPU::Allocate'
	DB	'Voices', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@GGKNANOG@Voice?5client?5?$CFx?5allocated?5hardwa@
DSOUND_RD	SEGMENT
??_C@_0CM@GGKNANOG@Voice?5client?5?$CFx?5allocated?5hardwa@ DB 'Voice cli'
	DB	'ent %x allocated hardware voice %x', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@JAONEOME@Not?5enough?5free?5hardware?5voices?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@JAONEOME@Not?5enough?5free?5hardware?5voices?$AA@ DB 'Not enoug'
	DB	'h free hardware voices', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AllocateVoices@CMcpxAPU@DirectSound@@QAEJPAVCMcpxVoiceClient@2@@Z
DSOUND	SEGMENT
_this$ = -40
$T36509 = -36
_pdwFreeVoiceCount$ = -32
___AutoIrql$ = -28
_bVoiceIndex$ = -17
_hr$ = -16
_nFirstVoice$ = -12
_nLastVoice$ = -8
_nVoice$ = -4
_pVoice$ = 8
?AllocateVoices@CMcpxAPU@DirectSound@@QAEJPAVCMcpxVoiceClient@2@@Z PROC NEAR ; DirectSound::CMcpxAPU::AllocateVoices, COMDAT
; _this$ = ecx

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 395  :     LPDWORD                 pdwFreeVoiceCount;
; 396  :     MCPX_VOICE_HANDLE       nFirstVoice;
; 397  :     MCPX_VOICE_HANDLE       nLastVoice;
; 398  :     MCPX_VOICE_HANDLE       nVoice;
; 399  :     BYTE                    bVoiceIndex;
; 400  :     HRESULT                 hr;
; 401  : 
; 402  :     DPF_ENTER();
; 403  :     AutoIrql();

  00009	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 404  : 
; 405  : #ifdef DEBUG
; 406  : 
; 407  :     ASSERT(pVoice->m_bVoiceCount);

  00011	68 97 01 00 00	 push	 407			; 00000197H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@HHBHIAJK@pVoice?9?$DOm_bVoiceCount?$AA@
  00020	8b 45 08	 mov	 eax, DWORD PTR _pVoice$[ebp]
  00023	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00027	f7 d9		 neg	 ecx
  00029	1b c9		 sbb	 ecx, ecx
  0002b	41		 inc	 ecx
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 408  :     ASSERT(pVoice->m_bVoiceCount <= NUMELMS(pVoice->m_ahVoices));

  00035	68 98 01 00 00	 push	 408			; 00000198H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BOLDMOGN@pVoice?9?$DOm_bVoiceCount?5?$DM?$DN?5NUMELMS@
  00044	8b 55 08	 mov	 edx, DWORD PTR _pVoice$[ebp]
  00047	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0004b	b9 03 00 00 00	 mov	 ecx, 3
  00050	3b c8		 cmp	 ecx, eax
  00052	1b d2		 sbb	 edx, edx
  00054	f7 da		 neg	 edx
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0005c	83 c4 10	 add	 esp, 16			; 00000010H

; 409  : 
; 410  :     for(bVoiceIndex = 0; bVoiceIndex < NUMELMS(pVoice->m_ahVoices); bVoiceIndex++)

  0005f	c6 45 ef 00	 mov	 BYTE PTR _bVoiceIndex$[ebp], 0
  00063	eb 08		 jmp	 SHORT $L35642
$L35643:
  00065	8a 45 ef	 mov	 al, BYTE PTR _bVoiceIndex$[ebp]
  00068	04 01		 add	 al, 1
  0006a	88 45 ef	 mov	 BYTE PTR _bVoiceIndex$[ebp], al
$L35642:
  0006d	0f b6 4d ef	 movzx	 ecx, BYTE PTR _bVoiceIndex$[ebp]
  00071	83 f9 03	 cmp	 ecx, 3
  00074	73 31		 jae	 SHORT $L35644

; 411  :     {
; 412  :         ASSERT(MCPX_VOICE_HANDLE_INVALID == pVoice->m_ahVoices[bVoiceIndex]);

  00076	68 9c 01 00 00	 push	 412			; 0000019cH
  0007b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@HIAGCDHF@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@
  00085	0f b6 55 ef	 movzx	 edx, BYTE PTR _bVoiceIndex$[ebp]
  00089	8b 45 08	 mov	 eax, DWORD PTR _pVoice$[ebp]
  0008c	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  00091	33 d2		 xor	 edx, edx
  00093	81 f9 ff ff 00
	00		 cmp	 ecx, 65535		; 0000ffffH
  00099	0f 95 c2	 setne	 dl
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a2	83 c4 10	 add	 esp, 16			; 00000010H

; 413  :     }

  000a5	eb be		 jmp	 SHORT $L35643
$L35644:

; 414  : 
; 415  : #endif // DEBUG
; 416  : 
; 417  :     //
; 418  :     // Block the idle handler in order to lock the voice map
; 419  :     //
; 420  : 
; 421  :     BlockIdleHandler();

  000a7	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::BlockIdleHandler

; 422  : 
; 423  :     //
; 424  :     // Allocate voices
; 425  :     //
; 426  :     
; 427  :     if(pVoice->m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  000af	8b 45 08	 mov	 eax, DWORD PTR _pVoice$[ebp]
  000b2	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000b5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b8	83 e2 10	 and	 edx, 16			; 00000010H
  000bb	85 d2		 test	 edx, edx
  000bd	74 1a		 je	 SHORT $L35647

; 428  :     {
; 429  :         pdwFreeVoiceCount = &m_dwFree3dVoiceCount;

  000bf	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 88 fc 02 00
	00		 mov	 ecx, DWORD PTR [eax+764]
  000c8	89 4d e0	 mov	 DWORD PTR _pdwFreeVoiceCount$[ebp], ecx

; 430  :         nFirstVoice = MCPX_HW_FIRST_3D_VOICE;

  000cb	66 c7 45 f4 00
	00		 mov	 WORD PTR _nFirstVoice$[ebp], 0

; 431  :         nLastVoice = MCPX_HW_FIRST_3D_VOICE + MCPX_HW_MAX_3D_VOICES - 1;

  000d1	66 c7 45 f8 3f
	00		 mov	 WORD PTR _nLastVoice$[ebp], 63 ; 0000003fH

; 432  :     }
; 433  :     else

  000d7	eb 18		 jmp	 SHORT $L35648
$L35647:

; 434  :     {
; 435  :         pdwFreeVoiceCount = &m_dwFree2dVoiceCount;

  000d9	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	8b 82 f8 02 00
	00		 mov	 eax, DWORD PTR [edx+760]
  000e2	89 45 e0	 mov	 DWORD PTR _pdwFreeVoiceCount$[ebp], eax

; 436  :         nFirstVoice = MCPX_HW_FIRST_2D_VOICE;

  000e5	66 c7 45 f4 40
	00		 mov	 WORD PTR _nFirstVoice$[ebp], 64 ; 00000040H

; 437  :         nLastVoice = MCPX_HW_FIRST_2D_VOICE + MCPX_HW_MAX_2D_VOICES - 1;

  000eb	66 c7 45 f8 ff
	00		 mov	 WORD PTR _nLastVoice$[ebp], 255 ; 000000ffH
$L35648:

; 438  :     }
; 439  : 
; 440  :     if(pVoice->m_bVoiceCount <= *pdwFreeVoiceCount)

  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _pVoice$[ebp]
  000f4	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  000f8	8b 45 e0	 mov	 eax, DWORD PTR _pdwFreeVoiceCount$[ebp]
  000fb	3b 10		 cmp	 edx, DWORD PTR [eax]
  000fd	0f 87 e4 00 00
	00		 ja	 $L35649

; 441  :     {
; 442  :         *pdwFreeVoiceCount -= pVoice->m_bVoiceCount;

  00103	8b 4d 08	 mov	 ecx, DWORD PTR _pVoice$[ebp]
  00106	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  0010a	8b 45 e0	 mov	 eax, DWORD PTR _pdwFreeVoiceCount$[ebp]
  0010d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010f	2b ca		 sub	 ecx, edx
  00111	8b 55 e0	 mov	 edx, DWORD PTR _pdwFreeVoiceCount$[ebp]
  00114	89 0a		 mov	 DWORD PTR [edx], ecx

; 443  :         
; 444  :         bVoiceIndex = 0;

  00116	c6 45 ef 00	 mov	 BYTE PTR _bVoiceIndex$[ebp], 0

; 445  :         nVoice = nFirstVoice;

  0011a	66 8b 45 f4	 mov	 ax, WORD PTR _nFirstVoice$[ebp]
  0011e	66 89 45 fc	 mov	 WORD PTR _nVoice$[ebp], ax
$L35651:

; 446  : 
; 447  :         while(bVoiceIndex < pVoice->m_bVoiceCount)

  00122	0f b6 4d ef	 movzx	 ecx, BYTE PTR _bVoiceIndex$[ebp]
  00126	8b 55 08	 mov	 edx, DWORD PTR _pVoice$[ebp]
  00129	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0012d	3b c8		 cmp	 ecx, eax
  0012f	0f 8d a9 00 00
	00		 jge	 $L35652

; 448  :         {
; 449  :             ASSERT(nVoice <= nLastVoice);

  00135	68 c1 01 00 00	 push	 449			; 000001c1H
  0013a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0013f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HIHKABCJ@nVoice?5?$DM?$DN?5nLastVoice?$AA@
  00144	0f b7 4d fc	 movzx	 ecx, WORD PTR _nVoice$[ebp]
  00148	0f b7 55 f8	 movzx	 edx, WORD PTR _nLastVoice$[ebp]
  0014c	33 c0		 xor	 eax, eax
  0014e	3b ca		 cmp	 ecx, edx
  00150	0f 9f c0	 setg	 al
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00159	83 c4 10	 add	 esp, 16			; 00000010H

; 450  : 
; 451  :             if(!m_apVoiceMap[nVoice])

  0015c	0f b7 4d fc	 movzx	 ecx, WORD PTR _nVoice$[ebp]
  00160	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00163	83 bc 8a 30 03
	00 00 00	 cmp	 DWORD PTR [edx+ecx*4+816], 0
  0016b	75 60		 jne	 SHORT $L35654

; 452  :             {
; 453  :                 DPF_INFO("Voice client %x allocated hardware voice %x", pVoice, nVoice);

  0016d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00172	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@PEENENCH@CMcpxAPU?3?3AllocateVoices?$AA@
  00177	68 c5 01 00 00	 push	 453			; 000001c5H
  0017c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00181	6a 04		 push	 4
  00183	6a 09		 push	 9
  00185	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0018a	83 c4 18	 add	 esp, 24			; 00000018H
  0018d	0f b7 45 fc	 movzx	 eax, WORD PTR _nVoice$[ebp]
  00191	50		 push	 eax
  00192	8b 4d 08	 mov	 ecx, DWORD PTR _pVoice$[ebp]
  00195	51		 push	 ecx
  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@GGKNANOG@Voice?5client?5?$CFx?5allocated?5hardwa@
  0019b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 454  : 
; 455  :                 pVoice->m_ahVoices[bVoiceIndex] = nVoice;

  001a3	0f b6 55 ef	 movzx	 edx, BYTE PTR _bVoiceIndex$[ebp]
  001a7	8b 45 08	 mov	 eax, DWORD PTR _pVoice$[ebp]
  001aa	66 8b 4d fc	 mov	 cx, WORD PTR _nVoice$[ebp]
  001ae	66 89 4c 50 0c	 mov	 WORD PTR [eax+edx*2+12], cx

; 456  :                 m_apVoiceMap[nVoice] = pVoice;

  001b3	0f b7 55 fc	 movzx	 edx, WORD PTR _nVoice$[ebp]
  001b7	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  001ba	8b 4d 08	 mov	 ecx, DWORD PTR _pVoice$[ebp]
  001bd	89 8c 90 30 03
	00 00		 mov	 DWORD PTR [eax+edx*4+816], ecx

; 457  : 
; 458  :                 bVoiceIndex++;

  001c4	8a 55 ef	 mov	 dl, BYTE PTR _bVoiceIndex$[ebp]
  001c7	80 c2 01	 add	 dl, 1
  001ca	88 55 ef	 mov	 BYTE PTR _bVoiceIndex$[ebp], dl
$L35654:

; 459  :             }
; 460  : 
; 461  :             nVoice++;

  001cd	66 8b 45 fc	 mov	 ax, WORD PTR _nVoice$[ebp]
  001d1	66 05 01 00	 add	 ax, 1
  001d5	66 89 45 fc	 mov	 WORD PTR _nVoice$[ebp], ax

; 462  :         }

  001d9	e9 44 ff ff ff	 jmp	 $L35651
$L35652:

; 463  : 
; 464  :         hr = DS_OK;

  001de	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 465  :     }
; 466  :     else

  001e5	eb 34		 jmp	 SHORT $L35658
$L35649:

; 467  :     {
; 468  :         DPF_ERROR("Not enough free hardware voices");

  001e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@PEENENCH@CMcpxAPU?3?3AllocateVoices?$AA@
  001f1	68 d4 01 00 00	 push	 468			; 000001d4H
  001f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  001fb	6a 01		 push	 1
  001fd	6a 09		 push	 9
  001ff	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00204	83 c4 18	 add	 esp, 24			; 00000018H
  00207	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@JAONEOME@Not?5enough?5free?5hardware?5voices?$AA@
  0020c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00211	83 c4 04	 add	 esp, 4

; 469  :         hr = DSERR_INVALIDCALL;

  00214	c7 45 f0 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L35658:

; 470  :     }
; 471  : 
; 472  :     //
; 473  :     // Unlock the voice map
; 474  :     //
; 475  : 
; 476  :     UnblockIdleHandler();

  0021b	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021e	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler

; 477  : 
; 478  :     DPF_LEAVE_HRESULT(hr);
; 479  : 
; 480  :     return hr;

  00223	8b 4d f0	 mov	 ecx, DWORD PTR _hr$[ebp]
  00226	89 4d dc	 mov	 DWORD PTR $T36509[ebp], ecx
  00229	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0022c	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00231	8b 45 dc	 mov	 eax, DWORD PTR $T36509[ebp]

; 481  : }

  00234	8b e5		 mov	 esp, ebp
  00236	5d		 pop	 ebp
  00237	c2 04 00	 ret	 4
?AllocateVoices@CMcpxAPU@DirectSound@@QAEJPAVCMcpxVoiceClient@2@@Z ENDP ; DirectSound::CMcpxAPU::AllocateVoices
DSOUND	ENDS
PUBLIC	?FreeVoices@CMcpxAPU@DirectSound@@QAEXPAVCMcpxVoiceClient@2@@Z ; DirectSound::CMcpxAPU::FreeVoices
PUBLIC	??_C@_0CC@LGMBAGNB@dwVoiceIndex?5?$DM?5MCPX_HW_MAX_VOICE@ ; `string'
PUBLIC	??_C@_0CF@HCECNGCF@m_apVoiceMap?$FLdwVoiceIndex?$FN?5?$DN?$DN?5pV@ ; `string'
PUBLIC	??_C@_0DD@JBACMFJI@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@ ; `string'
;	COMDAT ??_C@_0CC@LGMBAGNB@dwVoiceIndex?5?$DM?5MCPX_HW_MAX_VOICE@
DSOUND_RD	SEGMENT
??_C@_0CC@LGMBAGNB@dwVoiceIndex?5?$DM?5MCPX_HW_MAX_VOICE@ DB 'dwVoiceInde'
	DB	'x < MCPX_HW_MAX_VOICES', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@HCECNGCF@m_apVoiceMap?$FLdwVoiceIndex?$FN?5?$DN?$DN?5pV@
DSOUND_RD	SEGMENT
??_C@_0CF@HCECNGCF@m_apVoiceMap?$FLdwVoiceIndex?$FN?5?$DN?$DN?5pV@ DB 'm_'
	DB	'apVoiceMap[dwVoiceIndex] == pVoice', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@JBACMFJI@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@
DSOUND_RD	SEGMENT
??_C@_0DD@JBACMFJI@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@ DB 'MCPX_VOI'
	DB	'CE_HANDLE_INVALID == pVoice->m_ahVoices[i]', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?FreeVoices@CMcpxAPU@DirectSound@@QAEXPAVCMcpxVoiceClient@2@@Z
DSOUND	SEGMENT
_this$ = -20
___AutoIrql$ = -16
_dwVoiceIndex$ = -8
_i$ = -4
_pVoice$ = 8
?FreeVoices@CMcpxAPU@DirectSound@@QAEXPAVCMcpxVoiceClient@2@@Z PROC NEAR ; DirectSound::CMcpxAPU::FreeVoices, COMDAT
; _this$ = ecx

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 508  :     DWORD                   dwVoiceIndex;
; 509  :     WORD                    i;
; 510  : 
; 511  :     DPF_ENTER();
; 512  :     AutoIrql();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 513  : 
; 514  :     //
; 515  :     // Block the idle handler in order to lock the voice map
; 516  :     //
; 517  : 
; 518  :     BlockIdleHandler();

  00011	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::BlockIdleHandler

; 519  : 
; 520  :     //
; 521  :     // Remove each voice from the map and the voice client's array
; 522  :     //
; 523  : 
; 524  :     for(i = 0; i < pVoice->m_bVoiceCount; i++)

  00019	66 c7 45 fc 00
	00		 mov	 WORD PTR _i$[ebp], 0
  0001f	eb 0c		 jmp	 SHORT $L35672
$L35673:
  00021	66 8b 45 fc	 mov	 ax, WORD PTR _i$[ebp]
  00025	66 05 01 00	 add	 ax, 1
  00029	66 89 45 fc	 mov	 WORD PTR _i$[ebp], ax
$L35672:
  0002d	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  00031	8b 55 08	 mov	 edx, DWORD PTR _pVoice$[ebp]
  00034	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00038	3b c8		 cmp	 ecx, eax
  0003a	0f 8d bc 00 00
	00		 jge	 $L35674

; 525  :     {
; 526  :         dwVoiceIndex = (DWORD)pVoice->m_ahVoices[i];

  00040	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  00044	8b 55 08	 mov	 edx, DWORD PTR _pVoice$[ebp]
  00047	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  0004c	89 45 f8	 mov	 DWORD PTR _dwVoiceIndex$[ebp], eax

; 527  :         pVoice->m_ahVoices[i] = MCPX_VOICE_HANDLE_INVALID;

  0004f	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  00053	8b 55 08	 mov	 edx, DWORD PTR _pVoice$[ebp]
  00056	66 c7 44 4a 0c
	ff ff		 mov	 WORD PTR [edx+ecx*2+12], 65535 ; 0000ffffH

; 528  :         
; 529  :         ASSERT(dwVoiceIndex < MCPX_HW_MAX_VOICES);

  0005d	68 11 02 00 00	 push	 529			; 00000211H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LGMBAGNB@dwVoiceIndex?5?$DM?5MCPX_HW_MAX_VOICE@
  0006c	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _dwVoiceIndex$[ebp], 256 ; 00000100H
  00073	1b c0		 sbb	 eax, eax
  00075	40		 inc	 eax
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 530  :         ASSERT(m_apVoiceMap[dwVoiceIndex] == pVoice);

  0007f	68 12 02 00 00	 push	 530			; 00000212H
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00089	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@HCECNGCF@m_apVoiceMap?$FLdwVoiceIndex?$FN?5?$DN?$DN?5pV@
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  00091	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00094	8b 84 8a 30 03
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+816]
  0009b	33 c9		 xor	 ecx, ecx
  0009d	3b 45 08	 cmp	 eax, DWORD PTR _pVoice$[ebp]
  000a0	0f 95 c1	 setne	 cl
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a9	83 c4 10	 add	 esp, 16			; 00000010H

; 531  : 
; 532  :         m_apVoiceMap[dwVoiceIndex] = NULL;

  000ac	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  000af	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	c7 84 90 30 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx*4+816], 0

; 533  : 
; 534  :         if(MCPX_IS_3D_VOICE(dwVoiceIndex))

  000bd	83 7d f8 40	 cmp	 DWORD PTR _dwVoiceIndex$[ebp], 64 ; 00000040H
  000c1	73 1b		 jae	 SHORT $L35680

; 535  :         {
; 536  :             m_dwFree3dVoiceCount++;

  000c3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	8b 91 fc 02 00
	00		 mov	 edx, DWORD PTR [ecx+764]
  000cc	8b 02		 mov	 eax, DWORD PTR [edx]
  000ce	83 c0 01	 add	 eax, 1
  000d1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	8b 91 fc 02 00
	00		 mov	 edx, DWORD PTR [ecx+764]
  000da	89 02		 mov	 DWORD PTR [edx], eax

; 537  :         }
; 538  :         else

  000dc	eb 19		 jmp	 SHORT $L35681
$L35680:

; 539  :         {
; 540  :             m_dwFree2dVoiceCount++;

  000de	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 88 f8 02 00
	00		 mov	 ecx, DWORD PTR [eax+760]
  000e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e9	83 c2 01	 add	 edx, 1
  000ec	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	8b 88 f8 02 00
	00		 mov	 ecx, DWORD PTR [eax+760]
  000f5	89 11		 mov	 DWORD PTR [ecx], edx
$L35681:

; 541  :         }
; 542  :     }

  000f7	e9 25 ff ff ff	 jmp	 $L35673
$L35674:

; 543  : 
; 544  : #ifdef DEBUG
; 545  : 
; 546  :     for(i = 0; i < NUMELMS(pVoice->m_ahVoices); i++)

  000fc	66 c7 45 fc 00
	00		 mov	 WORD PTR _i$[ebp], 0
  00102	eb 0c		 jmp	 SHORT $L35682
$L35683:
  00104	66 8b 55 fc	 mov	 dx, WORD PTR _i$[ebp]
  00108	66 83 c2 01	 add	 dx, 1
  0010c	66 89 55 fc	 mov	 WORD PTR _i$[ebp], dx
$L35682:
  00110	0f b7 45 fc	 movzx	 eax, WORD PTR _i$[ebp]
  00114	83 f8 03	 cmp	 eax, 3
  00117	73 30		 jae	 SHORT $L35684

; 547  :     {
; 548  :         ASSERT(MCPX_VOICE_HANDLE_INVALID == pVoice->m_ahVoices[i]);

  00119	68 24 02 00 00	 push	 548			; 00000224H
  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00123	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@JBACMFJI@MCPX_VOICE_HANDLE_INVALID?5?$DN?$DN?5pVo@
  00128	0f b7 4d fc	 movzx	 ecx, WORD PTR _i$[ebp]
  0012c	8b 55 08	 mov	 edx, DWORD PTR _pVoice$[ebp]
  0012f	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00134	33 c9		 xor	 ecx, ecx
  00136	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0013b	0f 95 c1	 setne	 cl
  0013e	51		 push	 ecx
  0013f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00144	83 c4 10	 add	 esp, 16			; 00000010H

; 549  :     }

  00147	eb bb		 jmp	 SHORT $L35683
$L35684:

; 550  : 
; 551  : #endif // DEBUG
; 552  : 
; 553  :     //
; 554  :     // Unlock the voice map
; 555  :     //
; 556  : 
; 557  :     UnblockIdleHandler();

  00149	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler

; 558  : 
; 559  :     DPF_LEAVE_VOID();
; 560  : }

  00151	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00154	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 04 00	 ret	 4
?FreeVoices@CMcpxAPU@DirectSound@@QAEXPAVCMcpxVoiceClient@2@@Z ENDP ; DirectSound::CMcpxAPU::FreeVoices
DSOUND	ENDS
PUBLIC	?HandleFETrap@CMcpxAPU@DirectSound@@IAEXXZ	; DirectSound::CMcpxAPU::HandleFETrap
PUBLIC	?HandleDeltaPanic@CMcpxAPU@DirectSound@@IAEXXZ	; DirectSound::CMcpxAPU::HandleDeltaPanic
PUBLIC	?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc
; Function compile flags: /Odt
;	COMDAT ?ServiceApuInterrupt@CMcpxAPU@DirectSound@@IAEHXZ
DSOUND	SEGMENT
tv87 = -24
tv76 = -20
_this$ = -16
_rInterruptStatus$ = -12
_fServiced$ = -4
?ServiceApuInterrupt@CMcpxAPU@DirectSound@@IAEHXZ PROC NEAR ; DirectSound::CMcpxAPU::ServiceApuInterrupt, COMDAT
; _this$ = ecx

; 586  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 587  :     R_INTR                  rInterruptStatus;
; 588  :     BOOL                    fServiced;
; 589  : 
; 590  :     //
; 591  :     // Get the pending interrupt
; 592  :     //
; 593  :     
; 594  :     MCPX_REG_READ(NV_PAPU_ISTS, &rInterruptStatus.uValue);

  00009	a1 00 10 80 fe	 mov	 eax, DWORD PTR ds:-25161728
  0000e	89 45 f4	 mov	 DWORD PTR _rInterruptStatus$[ebp], eax

; 595  : 
; 596  :     if(fServiced = MAKEBOOL(rInterruptStatus.General))

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _rInterruptStatus$[ebp]
  00014	83 e1 01	 and	 ecx, 1
  00017	f7 d9		 neg	 ecx
  00019	1b c9		 sbb	 ecx, ecx
  0001b	f7 d9		 neg	 ecx
  0001d	89 4d fc	 mov	 DWORD PTR _fServiced$[ebp], ecx
  00020	83 7d fc 00	 cmp	 DWORD PTR _fServiced$[ebp], 0
  00024	0f 84 bc 00 00
	00		 je	 $L35694

; 597  :     {
; 598  :         //
; 599  :         // Clear the interrupt(s)
; 600  :         //
; 601  : 
; 602  :         MCPX_REG_WRITE(NV_PAPU_ISTS, rInterruptStatus.uValue);

  0002a	8b 55 f4	 mov	 edx, DWORD PTR _rInterruptStatus$[ebp]
  0002d	89 15 00 10 80
	fe		 mov	 DWORD PTR ds:-25161728, edx

; 603  : 
; 604  :         //
; 605  :         // Save the interrupt bits
; 606  :         //
; 607  : 
; 608  : #ifdef DEBUG
; 609  : 
; 610  :         rInterruptStatus.DeltaPanic |= INTERLOCKED_EXCHANGE(m_fSimulateDeltaPanic, 0);

  00033	33 d2		 xor	 edx, edx
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_fSimulateDeltaPanic@CMcpxAPU@DirectSound@@0HA ; DirectSound::CMcpxAPU::m_fSimulateDeltaPanic
  0003a	e8 00 00 00 00	 call	 @InterlockedExchange@8
  0003f	89 45 ec	 mov	 DWORD PTR tv76[ebp], eax
  00042	8b 45 f4	 mov	 eax, DWORD PTR _rInterruptStatus$[ebp]
  00045	c1 e8 03	 shr	 eax, 3
  00048	83 e0 01	 and	 eax, 1
  0004b	0b 45 ec	 or	 eax, DWORD PTR tv76[ebp]
  0004e	83 e0 01	 and	 eax, 1
  00051	c1 e0 03	 shl	 eax, 3
  00054	8b 4d f4	 mov	 ecx, DWORD PTR _rInterruptStatus$[ebp]
  00057	83 e1 f7	 and	 ecx, -9			; fffffff7H
  0005a	0b c8		 or	 ecx, eax
  0005c	89 4d f4	 mov	 DWORD PTR _rInterruptStatus$[ebp], ecx

; 611  :         rInterruptStatus.DeltaWarning |= INTERLOCKED_EXCHANGE(m_fSimulateDeltaWarning, 0);

  0005f	33 d2		 xor	 edx, edx
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?m_fSimulateDeltaWarning@CMcpxAPU@DirectSound@@0HA ; DirectSound::CMcpxAPU::m_fSimulateDeltaWarning
  00066	e8 00 00 00 00	 call	 @InterlockedExchange@8
  0006b	89 45 e8	 mov	 DWORD PTR tv87[ebp], eax
  0006e	8b 55 f4	 mov	 edx, DWORD PTR _rInterruptStatus$[ebp]
  00071	d1 ea		 shr	 edx, 1
  00073	83 e2 01	 and	 edx, 1
  00076	0b 55 e8	 or	 edx, DWORD PTR tv87[ebp]
  00079	83 e2 01	 and	 edx, 1
  0007c	d1 e2		 shl	 edx, 1
  0007e	8b 45 f4	 mov	 eax, DWORD PTR _rInterruptStatus$[ebp]
  00081	83 e0 fd	 and	 eax, -3			; fffffffdH
  00084	0b c2		 or	 eax, edx
  00086	89 45 f4	 mov	 DWORD PTR _rInterruptStatus$[ebp], eax

; 612  : 
; 613  : #endif // DEBUG
; 614  : 
; 615  :         m_arInterruptStatus[0].uValue |= rInterruptStatus.uValue;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	8b 91 60 07 00
	00		 mov	 edx, DWORD PTR [ecx+1888]
  00092	0b 55 f4	 or	 edx, DWORD PTR _rInterruptStatus$[ebp]
  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00098	89 90 60 07 00
	00		 mov	 DWORD PTR [eax+1888], edx

; 616  : 
; 617  :         //
; 618  :         // Check for a trap caused by an error or an overridden hardware 
; 619  :         // method
; 620  :         //
; 621  :     
; 622  :         if(rInterruptStatus.FETrap)

  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _rInterruptStatus$[ebp]
  000a1	c1 e9 04	 shr	 ecx, 4
  000a4	83 e1 01	 and	 ecx, 1
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 08		 je	 SHORT $L35701

; 623  :         {
; 624  :             HandleFETrap();

  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?HandleFETrap@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::HandleFETrap
$L35701:

; 625  :         }
; 626  : 
; 627  : #ifdef MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 628  : 
; 629  : #ifndef MCPX_BOOT_LIB
; 630  : 
; 631  :         //
; 632  :         // If we got a delta panic, handle it here
; 633  :         //
; 634  : 
; 635  :         if(rInterruptStatus.DeltaPanic)

  000b3	8b 55 f4	 mov	 edx, DWORD PTR _rInterruptStatus$[ebp]
  000b6	c1 ea 03	 shr	 edx, 3
  000b9	83 e2 01	 and	 edx, 1
  000bc	85 d2		 test	 edx, edx
  000be	74 08		 je	 SHORT $L35702

; 636  :         {
; 637  :             HandleDeltaPanic();

  000c0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?HandleDeltaPanic@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::HandleDeltaPanic
$L35702:

; 638  :         }
; 639  : 
; 640  : #ifdef MCPX_ENABLE_DELTA_WARNINGS
; 641  : 
; 642  :         else if(rInterruptStatus.DeltaWarning)
; 643  :         {
; 644  :             HandleDeltaWarning();
; 645  :         }
; 646  : 
; 647  : #endif // MCPX_ENABLE_DELTA_WARNINGS
; 648  : 
; 649  : #endif // MCPX_BOOT_LIB
; 650  : 
; 651  :         //
; 652  :         // If we got a voice interrupt, schedule a DPC to handle it
; 653  :         //
; 654  : 
; 655  :         if(rInterruptStatus.FEVoice)

  000c8	8b 45 f4	 mov	 eax, DWORD PTR _rInterruptStatus$[ebp]
  000cb	c1 e8 06	 shr	 eax, 6
  000ce	83 e0 01	 and	 eax, 1
  000d1	85 c0		 test	 eax, eax
  000d3	74 08		 je	 SHORT $L35703

; 656  :         {
; 657  :             ScheduleApuInterruptDpc();

  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	e8 00 00 00 00	 call	 ?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc
$L35703:

; 658  :         }
; 659  : 
; 660  : #else // MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 661  : 
; 662  :         //
; 663  :         // If we got a voice interrupt or a delta panic, schedule a DPC to 
; 664  :         // handle it
; 665  :         //
; 666  : 
; 667  :         if(rInterruptStatus.DeltaPanic || rInterruptStatus.DeltaWarning || rInterruptStatus.FEVoice)
; 668  :         {
; 669  :             ScheduleApuInterruptDpc();
; 670  :         }
; 671  : 
; 672  : #endif // MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 673  : 
; 674  :         //
; 675  :         // Read the interrupt status again to make sure everything's flushed
; 676  :         //
; 677  : 
; 678  :         MCPX_REG_READ(NV_PAPU_ISTS, &rInterruptStatus.uValue);

  000dd	8b 0d 00 10 80
	fe		 mov	 ecx, DWORD PTR ds:-25161728
  000e3	89 4d f4	 mov	 DWORD PTR _rInterruptStatus$[ebp], ecx
$L35694:

; 679  :     }
; 680  :     
; 681  :     return fServiced;

  000e6	8b 45 fc	 mov	 eax, DWORD PTR _fServiced$[ebp]

; 682  : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
?ServiceApuInterrupt@CMcpxAPU@DirectSound@@IAEHXZ ENDP	; DirectSound::CMcpxAPU::ServiceApuInterrupt
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT @InterlockedExchange@8
DSOUND	SEGMENT
_Value$ = -8
_Target$ = -4
@InterlockedExchange@8 PROC NEAR			; COMDAT
; _Target$ = ecx
; _Value$ = edx

; 1299 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 55 f8	 mov	 DWORD PTR _Value$[ebp], edx
  00009	89 4d fc	 mov	 DWORD PTR _Target$[ebp], ecx

; 1300 :     __asm {
; 1301 :         mov     edx, Value

  0000c	8b 55 f8	 mov	 edx, DWORD PTR _Value$[ebp]

; 1302 :         mov     ecx, Target

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _Target$[ebp]

; 1303 :         mov     eax, [ecx]

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
$ie$10621:

; 1304 : ie:     cmpxchg [ecx], edx

  00014	0f b1 11	 cmpxchg DWORD PTR [ecx], edx

; 1305 :         jnz     short ie

  00017	75 fb		 jne	 SHORT $ie$10621

; 1306 :     }
; 1307 : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
@InterlockedExchange@8 ENDP
DSOUND	ENDS
EXTRN	__imp__KeInsertQueueDpc@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
;	COMDAT ?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc, COMDAT
; _this$ = ecx

; 278  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 279  :         KeInsertQueueDpc(&m_dpcInterrupt, NULL, NULL);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	05 70 07 00 00	 add	 eax, 1904		; 00000770H
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInsertQueueDpc@12

; 280  :     }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc
DSOUND	ENDS
PUBLIC	?WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ	; DirectSound::CMcpxAPU::WaitForMagicWrite
PUBLIC	??_C@_0BM@IKCMHJAD@CMcpxAPU?3?3WaitForMagicWrite?$AA@ ; `string'
PUBLIC	??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@ ; `string'
EXTRN	__imp__KeStallExecutionProcessor@4:NEAR
EXTRN	?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A:BYTE ; DirectSound::CMcpxCore::m_ctxMemory
EXTRN	?SetPrivLockState@CMcpxCore@DirectSound@@IAEXH@Z:NEAR ; DirectSound::CMcpxCore::SetPrivLockState
;	COMDAT ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
DSOUND_RW	SEGMENT
?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA DD 00H ; `DirectSound::CMcpxAPU::WaitForMagicWrite'::`2'::dwMagicWriteValue
DSOUND_RW	ENDS
;	COMDAT ??_C@_0BM@IKCMHJAD@CMcpxAPU?3?3WaitForMagicWrite?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IKCMHJAD@CMcpxAPU?3?3WaitForMagicWrite?$AA@ DB 'CMcpxAPU::WaitF'
	DB	'orMagicWrite', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@ DB 'Magic write'
	DB	' not completing!', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -16
_dwTimeout$ = -12
_pdwMagicWrite$ = -8
?WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::WaitForMagicWrite, COMDAT
; _this$ = ecx

; 708  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 709  :     static DWORD            dwMagicWriteValue   = 0;
; 710  :     DWORD                   dwTimeout           = 100;

  00009	c7 45 f4 64 00
	00 00		 mov	 DWORD PTR _dwTimeout$[ebp], 100 ; 00000064H

; 711  :     volatile DWORD *        pdwMagicWrite;
; 712  :     DWORD                   i;
; 713  : 
; 714  :     dwMagicWriteValue++;

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA
  00015	83 c0 01	 add	 eax, 1
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA, eax

; 715  : 
; 716  :     pdwMagicWrite = (volatile DWORD *)m_ctxMemory[MCPX_MEM_MAGICWRITE].VirtualAddress;

  0001d	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+32
  00023	89 4d f8	 mov	 DWORD PTR _pdwMagicWrite$[ebp], ecx

; 717  :     *pdwMagicWrite = ~dwMagicWriteValue;

  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA
  0002c	f7 d2		 not	 edx
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _pdwMagicWrite$[ebp]
  00031	89 10		 mov	 DWORD PTR [eax], edx

; 718  : 
; 719  :     SetPrivLockState(TRUE);

  00033	6a 01		 push	 1
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 08	 add	 ecx, 8
  0003b	e8 00 00 00 00	 call	 ?SetPrivLockState@CMcpxCore@DirectSound@@IAEXH@Z ; DirectSound::CMcpxCore::SetPrivLockState

; 720  : 
; 721  :     MCPX_REG_WRITE(NV_PAPU_FEMEMADDR, m_ctxMemory[MCPX_MEM_MAGICWRITE].PhysicalAddress);

  00040	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+36
  00046	89 0d 24 13 80
	fe		 mov	 DWORD PTR ds:-25160924, ecx

; 722  :     MCPX_REG_WRITE(NV_PAPU_FEMEMDATA, dwMagicWriteValue);

  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA
  00052	89 15 34 13 80
	fe		 mov	 DWORD PTR ds:-25160908, edx

; 723  : 
; 724  :     SetPrivLockState(FALSE);

  00058	6a 00		 push	 0
  0005a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 08	 add	 ecx, 8
  00060	e8 00 00 00 00	 call	 ?SetPrivLockState@CMcpxCore@DirectSound@@IAEXH@Z ; DirectSound::CMcpxCore::SetPrivLockState
$L35720:

; 725  : 
; 726  :     while(*pdwMagicWrite != dwMagicWriteValue)

  00065	8b 45 f8	 mov	 eax, DWORD PTR _pdwMagicWrite$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?dwMagicWriteValue@?1??WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ@4KA
  00070	74 49		 je	 SHORT $L35708

; 727  :     {
; 728  :         if(!dwTimeout--)

  00072	8b 55 f4	 mov	 edx, DWORD PTR _dwTimeout$[ebp]
  00075	8b 45 f4	 mov	 eax, DWORD PTR _dwTimeout$[ebp]
  00078	83 e8 01	 sub	 eax, 1
  0007b	89 45 f4	 mov	 DWORD PTR _dwTimeout$[ebp], eax
  0007e	85 d2		 test	 edx, edx
  00080	75 2f		 jne	 SHORT $L35722

; 729  :         {
; 730  :             DPF_ERROR("Magic write not completing!");

  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IKCMHJAD@CMcpxAPU?3?3WaitForMagicWrite?$AA@
  0008c	68 da 02 00 00	 push	 730			; 000002daH
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00096	6a 01		 push	 1
  00098	6a 09		 push	 9
  0009a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0009f	83 c4 18	 add	 esp, 24			; 00000018H
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@JFAIFJHC@Magic?5write?5not?5completing?$CB?$AA@
  000a7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ac	83 c4 04	 add	 esp, 4

; 731  :             break;

  000af	eb 0a		 jmp	 SHORT $L35708
$L35722:

; 732  :         }
; 733  : 
; 734  :         KeStallExecutionProcessor(1);

  000b1	6a 01		 push	 1
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeStallExecutionProcessor@4

; 735  :     }

  000b9	eb aa		 jmp	 SHORT $L35720
$L35708:

; 736  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxAPU::WaitForMagicWrite
DSOUND	ENDS
PUBLIC	?ServiceVoiceInterrupt@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceVoiceInterrupt
PUBLIC	?GetInterruptStatusCallback@CMcpxAPU@DirectSound@@CGEPAX@Z ; DirectSound::CMcpxAPU::GetInterruptStatusCallback
EXTRN	__imp__KeSynchronizeExecution@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?ServiceApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?ServiceApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::ServiceApuInterruptDpc, COMDAT
; _this$ = ecx

; 762  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$L35730:

; 763  :     //
; 764  :     // The DPC will parse the interrupt mask and do processing based on what
; 765  :     // event was signaled. In ISR-safe fashion, it will read the current 
; 766  :     // pending interrupt mask twice in the loop. This makes sure the dpc 
; 767  :     // leaves only when no more ISRs are pending.
; 768  :     //
; 769  : 
; 770  :     while(TRUE)

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	85 c0		 test	 eax, eax
  0000e	74 50		 je	 SHORT $L35728

; 771  :     {
; 772  :         KeSynchronizeExecution(&m_Interrupt, GetInterruptStatusCallback, this);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	51		 push	 ecx
  00014	68 00 00 00 00	 push	 OFFSET FLAT:?GetInterruptStatusCallback@CMcpxAPU@DirectSound@@CGEPAX@Z ; DirectSound::CMcpxAPU::GetInterruptStatusCallback
  00019	68 00 00 00 00	 push	 OFFSET FLAT:?m_Interrupt@CMcpxAPU@DirectSound@@1U_KINTERRUPT@@A ; DirectSound::CMcpxAPU::m_Interrupt
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSynchronizeExecution@12

; 773  : 
; 774  :         if(!m_arInterruptStatus[1].General)

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	8b 82 68 07 00
	00		 mov	 eax, DWORD PTR [edx+1896]
  0002d	83 e0 01	 and	 eax, 1
  00030	85 c0		 test	 eax, eax
  00032	75 02		 jne	 SHORT $L35732

; 775  :         {
; 776  :             break;

  00034	eb 2a		 jmp	 SHORT $L35728
$L35732:

; 777  :         }
; 778  : 
; 779  : #ifndef MCPX_BOOT_LIB
; 780  : 
; 781  : #ifndef MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 782  : 
; 783  :         if(m_arInterruptStatus[1].DeltaPanic)
; 784  :         {
; 785  :             HandleDeltaPanic();
; 786  :         }
; 787  : 
; 788  : #ifdef MCPX_ENABLE_DELTA_WARNINGS
; 789  : 
; 790  :         else if(m_arInterruptStatus[1].DeltaWarning)
; 791  :         {
; 792  :             HandleDeltaWarning();
; 793  :         }
; 794  : 
; 795  : #endif // MCPX_ENABLE_DELTA_WARNINGS
; 796  : 
; 797  : #endif // MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 798  : 
; 799  : #endif // MCPX_BOOT_LIB
; 800  : 
; 801  :         if(m_arInterruptStatus[1].FEVoice)

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 91 68 07 00
	00		 mov	 edx, DWORD PTR [ecx+1896]
  0003f	c1 ea 06	 shr	 edx, 6
  00042	83 e2 01	 and	 edx, 1
  00045	85 d2		 test	 edx, edx
  00047	74 08		 je	 SHORT $L35733

; 802  :         {
; 803  :             ServiceVoiceInterrupt();

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?ServiceVoiceInterrupt@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceVoiceInterrupt
$L35733:

; 804  :         }
; 805  : 
; 806  :         m_arInterruptStatus[1].uValue = 0;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 80 68 07 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1896], 0

; 807  :     } 

  0005e	eb a7		 jmp	 SHORT $L35730
$L35728:

; 808  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?ServiceApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxAPU::ServiceApuInterruptDpc
DSOUND	ENDS
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
; Function compile flags: /Odt
;	COMDAT ?ServiceVoiceInterrupt@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -16
_pleEntry$ = -12
_dwVoiceList$ = -8
_pClient$ = -4
?ServiceVoiceInterrupt@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::ServiceVoiceInterrupt, COMDAT
; _this$ = ecx

; 834  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 835  :     PLIST_ENTRY             pleEntry;
; 836  :     CMcpxVoiceClient *      pClient;
; 837  :     DWORD                   dwVoiceList;
; 838  : 
; 839  : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 840  : 
; 841  :     DWORD                   i;
; 842  : 
; 843  : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 844  : 
; 845  :     //
; 846  :     // Wait for the magic write to complete so that all notifiers are 
; 847  :     // written
; 848  :     //
; 849  : 
; 850  :     WaitForMagicWrite();

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?WaitForMagicWrite@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::WaitForMagicWrite

; 851  : 
; 852  :     //
; 853  :     // Process all active voices.  Because the idle handler is allowed to run
; 854  :     // while we're in this function, we need to protect ourselves against the
; 855  :     // active voice list potentially being modified while we're walking it.
; 856  :     // The best way to do this seems to be restarting at the head of the list
; 857  :     // every time the list changes.  We can't guarantee that any node in the 
; 858  :     // list will ever be valid, so we can't keep a back or next pointer.
; 859  :     //
; 860  : 
; 861  :     for(dwVoiceList = 0; dwVoiceList < NUMELMS(m_alstActiveVoices); dwVoiceList++)

  00011	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwVoiceList$[ebp], 0
  00018	eb 09		 jmp	 SHORT $L35741
$L35742:
  0001a	8b 45 f8	 mov	 eax, DWORD PTR _dwVoiceList$[ebp]
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR _dwVoiceList$[ebp], eax
$L35741:
  00023	83 7d f8 03	 cmp	 DWORD PTR _dwVoiceList$[ebp], 3
  00027	73 6e		 jae	 SHORT $L35754

; 862  :     {
; 863  :         pleEntry = m_alstActiveVoices[dwVoiceList].Flink;

  00029	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceList$[ebp]
  0002c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 84 ca 30 07
	00 00		 mov	 eax, DWORD PTR [edx+ecx*8+1840]
  00036	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
$L35745:

; 864  : 
; 865  :         while(pleEntry != &m_alstActiveVoices[dwVoiceList])

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceList$[ebp]
  0003c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8d 84 ca 30 07
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+1840]
  00046	39 45 f4	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  00049	74 4a		 je	 SHORT $L35746

; 866  :         {
; 867  :             pClient = CONTAINING_RECORD(pleEntry, CMcpxVoiceClient, m_leActiveVoice);

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0004e	83 e9 4c	 sub	 ecx, 76			; 0000004cH
  00051	89 4d fc	 mov	 DWORD PTR _pClient$[ebp], ecx

; 868  : 
; 869  : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 870  : 
; 871  :             for(i = 0; i < MCPX_NOTIFIER_COUNT; i++)
; 872  :             {
; 873  :                 if(pClient->m_Notifier.GetStatus(i))
; 874  :                 {
; 875  :                     DPF_BLAB("Voice %x (%x) notifier %lu signaled", pClient, pClient->m_ahVoices[0], i);
; 876  :                 }
; 877  :             }
; 878  : 
; 879  : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 880  : 
; 881  :             pClient->ServiceVoiceInterrupt();

  00054	8b 55 fc	 mov	 edx, DWORD PTR _pClient$[ebp]
  00057	8b 02		 mov	 eax, DWORD PTR [edx]
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _pClient$[ebp]
  0005c	ff 50 14	 call	 DWORD PTR [eax+20]

; 882  : 
; 883  :             BlockIdleHandler();

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::BlockIdleHandler

; 884  :             
; 885  :             if(IsEntryInList(pleEntry))

  00067	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0006a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006c	3b 55 f4	 cmp	 edx, DWORD PTR _pleEntry$[ebp]
  0006f	74 0a		 je	 SHORT $L35751

; 886  :             {
; 887  :                 pleEntry = pleEntry->Flink;

  00071	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 4d f4	 mov	 DWORD PTR _pleEntry$[ebp], ecx

; 888  :             }
; 889  :             else

  00079	eb 10		 jmp	 SHORT $L35752
$L35751:

; 890  :             {
; 891  :                 pleEntry = m_alstActiveVoices[dwVoiceList].Flink;

  0007b	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceList$[ebp]
  0007e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 8c d0 30 07
	00 00		 mov	 ecx, DWORD PTR [eax+edx*8+1840]
  00088	89 4d f4	 mov	 DWORD PTR _pleEntry$[ebp], ecx
$L35752:

; 892  :             }
; 893  : 
; 894  :             UnblockIdleHandler();

  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler

; 895  :         }

  00093	eb a4		 jmp	 SHORT $L35745
$L35746:

; 896  :     }

  00095	eb 83		 jmp	 SHORT $L35742
$L35754:

; 897  : 
; 898  :     //
; 899  :     // Process the pending inactive voice list, but this time just remove
; 900  :     // every node from the list as we go.
; 901  :     //
; 902  : 
; 903  :     while(TRUE)

  00097	ba 01 00 00 00	 mov	 edx, 1
  0009c	85 d2		 test	 edx, edx
  0009e	74 48		 je	 SHORT $L35737

; 904  :     {
; 905  :         BlockIdleHandler();

  000a0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::BlockIdleHandler

; 906  :         
; 907  :         pleEntry = RemoveHeadList(&m_lstPendingInactiveVoices);

  000a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 88 48 07 00
	00		 mov	 ecx, DWORD PTR [eax+1864]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList
  000b7	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax

; 908  : 
; 909  :         UnblockIdleHandler();

  000ba	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler

; 910  : 
; 911  :         if(&m_lstPendingInactiveVoices == pleEntry)

  000c2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	81 c2 48 07 00
	00		 add	 edx, 1864		; 00000748H
  000cb	3b 55 f4	 cmp	 edx, DWORD PTR _pleEntry$[ebp]
  000ce	75 02		 jne	 SHORT $L35756

; 912  :         {
; 913  :             break;

  000d0	eb 16		 jmp	 SHORT $L35737
$L35756:

; 914  :         }
; 915  :     
; 916  :         pClient = CONTAINING_RECORD(pleEntry, CMcpxVoiceClient, m_lePendingInactiveVoice);

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  000d5	83 e8 54	 sub	 eax, 84			; 00000054H
  000d8	89 45 fc	 mov	 DWORD PTR _pClient$[ebp], eax

; 917  : 
; 918  : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 919  : 
; 920  :         if(!pClient->m_Notifier.GetStatus(MCPX_NOTIFIER_SSLA_DONE))
; 921  :         {
; 922  :             if(!pClient->m_Notifier.GetStatus(MCPX_NOTIFIER_SSLB_DONE))
; 923  :             {
; 924  :                 if(!pClient->m_Notifier.GetStatus(MCPX_NOTIFIER_VOICE_OFF))
; 925  :                 {
; 926  :                     ASSERTMSG("Voice has no signaled notifiers");
; 927  :                 }
; 928  :             }
; 929  :         }
; 930  : 
; 931  : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 932  : 
; 933  :         pClient->ServiceVoiceInterrupt();

  000db	8b 4d fc	 mov	 ecx, DWORD PTR _pClient$[ebp]
  000de	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _pClient$[ebp]
  000e3	ff 52 14	 call	 DWORD PTR [edx+20]

; 934  :     }

  000e6	eb af		 jmp	 SHORT $L35754
$L35737:

; 935  : }

  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
?ServiceVoiceInterrupt@CMcpxAPU@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxAPU::ServiceVoiceInterrupt
DSOUND	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND_RD	SEGMENT
??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  00020	74 2c		 je	 SHORT $L30046

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L30046:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
DSOUND	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L30006

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L30005
$L30006:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L30010
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L30009
$L30010:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L30005
$L30009:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L30014
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L30013
$L30014:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L30016
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L30015
$L30016:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L30015:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L30005
$L30013:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L30019

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L30020

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L30020:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L30005
$L30019:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L30005

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L30005

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L30005:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
DSOUND	ENDS
;	COMDAT ?GetInterruptStatusCallback@CMcpxAPU@DirectSound@@CGEPAX@Z
DSOUND	SEGMENT
_pThis$ = -4
_pvContext$ = 8
?GetInterruptStatusCallback@CMcpxAPU@DirectSound@@CGEPAX@Z PROC NEAR ; DirectSound::CMcpxAPU::GetInterruptStatusCallback, COMDAT

; 961  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 962  :     CMcpxAPU *              pThis   = (CMcpxAPU *)pvContext;

  00004	8b 45 08	 mov	 eax, DWORD PTR _pvContext$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _pThis$[ebp], eax

; 963  : 
; 964  :     pThis->m_arInterruptStatus[1].uValue |= INTERLOCKED_EXCHANGE(pThis->m_arInterruptStatus[0].uValue, 0);

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _pThis$[ebp]
  0000d	81 c1 60 07 00
	00		 add	 ecx, 1888		; 00000760H
  00013	33 d2		 xor	 edx, edx
  00015	e8 00 00 00 00	 call	 @InterlockedExchange@8
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _pThis$[ebp]
  0001d	8b 91 68 07 00
	00		 mov	 edx, DWORD PTR [ecx+1896]
  00023	0b d0		 or	 edx, eax
  00025	8b 45 fc	 mov	 eax, DWORD PTR _pThis$[ebp]
  00028	89 90 68 07 00
	00		 mov	 DWORD PTR [eax+1896], edx

; 965  : 
; 966  :     return TRUE;

  0002e	b0 01		 mov	 al, 1

; 967  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?GetInterruptStatusCallback@CMcpxAPU@DirectSound@@CGEPAX@Z ENDP ; DirectSound::CMcpxAPU::GetInterruptStatusCallback
DSOUND	ENDS
PUBLIC	?HandleSoftwareMethod@CMcpxAPU@DirectSound@@IAEXKK@Z ; DirectSound::CMcpxAPU::HandleSoftwareMethod
PUBLIC	??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@ ; `string'
PUBLIC	??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@ ; `string'
PUBLIC	??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@ ; `string'
PUBLIC	??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@ ; `string'
PUBLIC	??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@ ; `string'
PUBLIC	??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@ ; `string'
PUBLIC	??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@ ; `string'
PUBLIC	??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@ ; `string'
PUBLIC	??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@ ; `string'
PUBLIC	??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@ ; `string'
PUBLIC	??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@ ; `string'
EXTRN	?SetFrontEndState@CMcpxCore@DirectSound@@IAEXW4MCPX_FE_STATE@@@Z:NEAR ; DirectSound::CMcpxCore::SetFrontEndState
;	COMDAT ??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@ DB 'CMcpxAPU::HandleFETr'
	DB	'ap', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@ DB 'NONE: m'
	DB	'ethod %x, param %x', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT
??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@ DB 'NOT_IMPL'
	DB	'EMENTED: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@
DSOUND_RD	SEGMENT
??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@ DB 'METHOD_U'
	DB	'NKNOWN: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT
??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@ DB 'BAD_'
	DB	'ARGUMENT: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@
DSOUND_RD	SEGMENT
??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@ DB 'CURRENT_'
	DB	'NOT_SET: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@
DSOUND_RD	SEGMENT
??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@ DB 'ANTECEDE'
	DB	'NT_NOT_SET: method %x, param %x', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT
??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@ DB 'BAD_DATA'
	DB	'_TYPE: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@
DSOUND_RD	SEGMENT
??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@ DB 'BAD_LIST'
	DB	'_POINTER: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@
DSOUND_RD	SEGMENT
??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@ DB 'CURRENT_V'
	DB	'OICE_NOT_3d: method %x, param %x', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@
DSOUND_RD	SEGMENT
??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@ DB 'CTXPA_I'
	DB	'NVALID: method %x, param %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@
DSOUND_RD	SEGMENT
??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@ DB '('
	DB	'unknown) %x: method %x, param %x', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?HandleFETrap@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
tv70 = -20
_this$ = -16
_rFeControl$ = -12
_dwMethod$ = -8
_dwParam$ = -4
?HandleFETrap@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR	; DirectSound::CMcpxAPU::HandleFETrap, COMDAT
; _this$ = ecx

; 993  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 994  :     R_FE_CONTROL            rFeControl;
; 995  :     DWORD                   dwParam;
; 996  :     DWORD                   dwMethod;
; 997  : 
; 998  :     //
; 999  :     // Whahoppen?
; 1000 :     //
; 1001 :     
; 1002 :     MCPX_REG_READ(NV_PAPU_FECTL, &rFeControl.uValue);

  00009	a1 00 11 80 fe	 mov	 eax, DWORD PTR ds:-25161472
  0000e	89 45 f4	 mov	 DWORD PTR _rFeControl$[ebp], eax

; 1003 : 
; 1004 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1005 : 
; 1006 :     ASSERT(NV_PAPU_FECTL_FEMETHMODE_TRAPPED == rFeControl.Mode);
; 1007 : 
; 1008 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1009 : 
; 1010 :     MCPX_REG_READ(NV_PAPU_FEDECMETH, &dwMethod);

  00011	8b 0d 00 13 80
	fe		 mov	 ecx, DWORD PTR ds:-25160960
  00017	89 4d f8	 mov	 DWORD PTR _dwMethod$[ebp], ecx

; 1011 :     MCPX_REG_READ(NV_PAPU_FEDECPARAM, &dwParam);

  0001a	8b 15 04 13 80
	fe		 mov	 edx, DWORD PTR ds:-25160956
  00020	89 55 fc	 mov	 DWORD PTR _dwParam$[ebp], edx

; 1012 : 
; 1013 :     dwMethod = MCPX_GET_REG_VALUE(dwMethod, NV_PAPU_FEDECMETH_METH);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  00026	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002b	89 45 f8	 mov	 DWORD PTR _dwMethod$[ebp], eax

; 1014 :     dwParam = MCPX_GET_REG_VALUE(dwParam, NV_PAPU_FEDECPARAM_VALUE);

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  00031	89 4d fc	 mov	 DWORD PTR _dwParam$[ebp], ecx

; 1015 : 
; 1016 :     switch(rFeControl.TrapReason)
; 1017 :     {

  00034	8b 55 f4	 mov	 edx, DWORD PTR _rFeControl$[ebp]
  00037	c1 ea 08	 shr	 edx, 8
  0003a	83 e2 0f	 and	 edx, 15			; 0000000fH
  0003d	89 55 ec	 mov	 DWORD PTR tv70[ebp], edx
  00040	83 7d ec 0f	 cmp	 DWORD PTR tv70[ebp], 15	; 0000000fH
  00044	0f 87 5d 02 00
	00		 ja	 $L35804
  0004a	8b 45 ec	 mov	 eax, DWORD PTR tv70[ebp]
  0004d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L36543[eax*4]
$L35782:

; 1018 :         case NV_PAPU_FECTL_FETRAPREASON_NONE:
; 1019 :             DPF_ERROR("NONE: method %x, param %x", dwMethod, dwParam);

  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  0005e	68 fb 03 00 00	 push	 1019			; 000003fbH
  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00068	6a 01		 push	 1
  0006a	6a 09		 push	 9
  0006c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  00077	51		 push	 ecx
  00078	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  0007b	52		 push	 edx
  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HGJIPKOI@NONE?3?5method?5?$CFx?0?5param?5?$CFx?$AA@
  00081	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1020 :             break;

  00089	e9 58 02 00 00	 jmp	 $L35779
$L35785:

; 1021 : 
; 1022 :         case NV_PAPU_FECTL_FETRAPREASON_NOT_IMPLEMENTED:
; 1023 :             DPF_ERROR("NOT_IMPLEMENTED: method %x, param %x", dwMethod, dwParam);

  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  00098	68 ff 03 00 00	 push	 1023			; 000003ffH
  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  000a2	6a 01		 push	 1
  000a4	6a 09		 push	 9
  000a6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ab	83 c4 18	 add	 esp, 24			; 00000018H
  000ae	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  000b5	51		 push	 ecx
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@DMPDBLEI@NOT_IMPLEMENTED?3?5method?5?$CFx?0?5para@
  000bb	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1024 :             break;

  000c3	e9 1e 02 00 00	 jmp	 $L35779
$L35787:

; 1025 : 
; 1026 :         case NV_PAPU_FECTL_FETRAPREASON_METHOD_UNKNOWN:
; 1027 :             DPF_ERROR("METHOD_UNKNOWN: method %x, param %x", dwMethod, dwParam);

  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  000d2	68 03 04 00 00	 push	 1027			; 00000403H
  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  000dc	6a 01		 push	 1
  000de	6a 09		 push	 9
  000e0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e5	83 c4 18	 add	 esp, 24			; 00000018H
  000e8	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  000eb	52		 push	 edx
  000ec	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  000ef	50		 push	 eax
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@LFLJHLAB@METHOD_UNKNOWN?3?5method?5?$CFx?0?5param@
  000f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1028 :             break;

  000fd	e9 e4 01 00 00	 jmp	 $L35779
$L35789:

; 1029 : 
; 1030 :         case NV_PAPU_FECTL_FETRAPREASON_BAD_ARGUMENT:
; 1031 :             DPF_ERROR("BAD_ARGUMENT: method %x, param %x", dwMethod, dwParam);

  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  0010c	68 07 04 00 00	 push	 1031			; 00000407H
  00111	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00116	6a 01		 push	 1
  00118	6a 09		 push	 9
  0011a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011f	83 c4 18	 add	 esp, 24			; 00000018H
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  00125	51		 push	 ecx
  00126	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  00129	52		 push	 edx
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@EGGEFCEM@BAD_ARGUMENT?3?5method?5?$CFx?0?5param?5?$CF@
  0012f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00134	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1032 :             break;

  00137	e9 aa 01 00 00	 jmp	 $L35779
$L35791:

; 1033 : 
; 1034 :         case NV_PAPU_FECTL_FETRAPREASON_CURRENT_NOT_SET:
; 1035 :             DPF_ERROR("CURRENT_NOT_SET: method %x, param %x", dwMethod, dwParam);

  0013c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00141	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  00146	68 0b 04 00 00	 push	 1035			; 0000040bH
  0014b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00150	6a 01		 push	 1
  00152	6a 09		 push	 9
  00154	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00159	83 c4 18	 add	 esp, 24			; 00000018H
  0015c	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  0015f	50		 push	 eax
  00160	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  00163	51		 push	 ecx
  00164	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CAHAHIPM@CURRENT_NOT_SET?3?5method?5?$CFx?0?5para@
  00169	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1036 :             break;

  00171	e9 70 01 00 00	 jmp	 $L35779
$L35793:

; 1037 : 
; 1038 :         case NV_PAPU_FECTL_FETRAPREASON_ANTECEDENT_NOT_SET:
; 1039 :             DPF_ERROR("ANTECEDENT_NOT_SET: method %x, param %x", dwMethod, dwParam);

  00176	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0017b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  00180	68 0f 04 00 00	 push	 1039			; 0000040fH
  00185	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0018a	6a 01		 push	 1
  0018c	6a 09		 push	 9
  0018e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00193	83 c4 18	 add	 esp, 24			; 00000018H
  00196	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  00199	52		 push	 edx
  0019a	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  0019d	50		 push	 eax
  0019e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@PHCAILKG@ANTECEDENT_NOT_SET?3?5method?5?$CFx?0?5p@
  001a3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1040 :             break;

  001ab	e9 36 01 00 00	 jmp	 $L35779
$L35795:

; 1041 : 
; 1042 :         case NV_PAPU_FECTL_FETRAPREASON_BAD_DATA_TYPE:
; 1043 :             DPF_ERROR("BAD_DATA_TYPE: method %x, param %x", dwMethod, dwParam);

  001b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  001ba	68 13 04 00 00	 push	 1043			; 00000413H
  001bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  001c4	6a 01		 push	 1
  001c6	6a 09		 push	 9
  001c8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001cd	83 c4 18	 add	 esp, 24			; 00000018H
  001d0	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  001d3	51		 push	 ecx
  001d4	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  001d7	52		 push	 edx
  001d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@IGHLKIE@BAD_DATA_TYPE?3?5method?5?$CFx?0?5param?5@
  001dd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1044 :             break;

  001e5	e9 fc 00 00 00	 jmp	 $L35779
$L35797:

; 1045 : 
; 1046 :         case NV_PAPU_FECTL_FETRAPREASON_BAD_LIST_POINTER:
; 1047 :             DPF_ERROR("BAD_LIST_POINTER: method %x, param %x", dwMethod, dwParam);

  001ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  001f4	68 17 04 00 00	 push	 1047			; 00000417H
  001f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  001fe	6a 01		 push	 1
  00200	6a 09		 push	 9
  00202	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00207	83 c4 18	 add	 esp, 24			; 00000018H
  0020a	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  0020d	50		 push	 eax
  0020e	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  00211	51		 push	 ecx
  00212	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@EIPAMMBG@BAD_LIST_POINTER?3?5method?5?$CFx?0?5par@
  00217	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1048 :             break;

  0021f	e9 c2 00 00 00	 jmp	 $L35779
$L35799:

; 1049 : 
; 1050 :         case NV_PAPU_FECTL_FETRAPREASON_CURRENT_VOICE_NOT_3D:
; 1051 :             DPF_ERROR("CURRENT_VOICE_NOT_3d: method %x, param %x", dwMethod, dwParam);

  00224	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00229	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  0022e	68 1b 04 00 00	 push	 1051			; 0000041bH
  00233	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00238	6a 01		 push	 1
  0023a	6a 09		 push	 9
  0023c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00241	83 c4 18	 add	 esp, 24			; 00000018H
  00244	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  00247	52		 push	 edx
  00248	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  0024b	50		 push	 eax
  0024c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@MBJNHLID@CURRENT_VOICE_NOT_3d?3?5method?5?$CFx?0@
  00251	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00256	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1052 :             break;

  00259	e9 88 00 00 00	 jmp	 $L35779
$L35801:

; 1053 : 
; 1054 :         case NV_PAPU_FECTL_FETRAPREASON_CTXPA_INVALID:
; 1055 :             DPF_ERROR("CTXPA_INVALID: method %x, param %x", dwMethod, dwParam);

  0025e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00263	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  00268	68 1f 04 00 00	 push	 1055			; 0000041fH
  0026d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00272	6a 01		 push	 1
  00274	6a 09		 push	 9
  00276	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0027b	83 c4 18	 add	 esp, 24			; 00000018H
  0027e	8b 4d fc	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  00281	51		 push	 ecx
  00282	8b 55 f8	 mov	 edx, DWORD PTR _dwMethod$[ebp]
  00285	52		 push	 edx
  00286	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@PKBOBKDJ@CTXPA_INVALID?3?5method?5?$CFx?0?5param?5@
  0028b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00290	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 :             break;

  00293	eb 51		 jmp	 SHORT $L35779
$L35803:

; 1057 : 
; 1058 :         case NV_PAPU_FECTL_FETRAPREASON_REQUESTED:
; 1059 :             HandleSoftwareMethod(dwMethod, dwParam);

  00295	8b 45 fc	 mov	 eax, DWORD PTR _dwParam$[ebp]
  00298	50		 push	 eax
  00299	8b 4d f8	 mov	 ecx, DWORD PTR _dwMethod$[ebp]
  0029c	51		 push	 ecx
  0029d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002a0	e8 00 00 00 00	 call	 ?HandleSoftwareMethod@CMcpxAPU@DirectSound@@IAEXKK@Z ; DirectSound::CMcpxAPU::HandleSoftwareMethod

; 1060 :             break;

  002a5	eb 3f		 jmp	 SHORT $L35779
$L35804:

; 1061 :         
; 1062 :         default:
; 1063 :             DPF_ERROR("(unknown) %x: method %x, param %x", (DWORD)rFeControl.TrapReason, dwMethod, dwParam);

  002a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBKFMMPJ@CMcpxAPU?3?3HandleFETrap?$AA@
  002b1	68 27 04 00 00	 push	 1063			; 00000427H
  002b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  002bb	6a 01		 push	 1
  002bd	6a 09		 push	 9
  002bf	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002c4	83 c4 18	 add	 esp, 24			; 00000018H
  002c7	8b 55 fc	 mov	 edx, DWORD PTR _dwParam$[ebp]
  002ca	52		 push	 edx
  002cb	8b 45 f8	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  002ce	50		 push	 eax
  002cf	8b 4d f4	 mov	 ecx, DWORD PTR _rFeControl$[ebp]
  002d2	c1 e9 08	 shr	 ecx, 8
  002d5	83 e1 0f	 and	 ecx, 15			; 0000000fH
  002d8	51		 push	 ecx
  002d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@IJCNIOM@?$CIunknown?$CJ?5?$CFx?3?5method?5?$CFx?0?5param?5?$CF@
  002de	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002e3	83 c4 10	 add	 esp, 16			; 00000010H
$L35779:

; 1064 :             break;
; 1065 :     }
; 1066 : 
; 1067 :     //
; 1068 :     // Snap the FE out of trap mode
; 1069 :     //
; 1070 : 
; 1071 :     SetFrontEndState(MCPX_FE_STATE_HALTED);

  002e6	6a 00		 push	 0
  002e8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002eb	83 c1 08	 add	 ecx, 8
  002ee	e8 00 00 00 00	 call	 ?SetFrontEndState@CMcpxCore@DirectSound@@IAEXW4MCPX_FE_STATE@@@Z ; DirectSound::CMcpxCore::SetFrontEndState

; 1072 :     SetFrontEndState(MCPX_FE_STATE_FREE_RUNNING);

  002f3	6a 01		 push	 1
  002f5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002f8	83 c1 08	 add	 ecx, 8
  002fb	e8 00 00 00 00	 call	 ?SetFrontEndState@CMcpxCore@DirectSound@@IAEXW4MCPX_FE_STATE@@@Z ; DirectSound::CMcpxCore::SetFrontEndState

; 1073 : }

  00300	8b e5		 mov	 esp, ebp
  00302	5d		 pop	 ebp
  00303	c3		 ret	 0
$L36543:
  00304	00 00 00 00	 DD	 $L35782
  00308	00 00 00 00	 DD	 $L35785
  0030c	00 00 00 00	 DD	 $L35787
  00310	00 00 00 00	 DD	 $L35789
  00314	00 00 00 00	 DD	 $L35791
  00318	00 00 00 00	 DD	 $L35793
  0031c	00 00 00 00	 DD	 $L35804
  00320	00 00 00 00	 DD	 $L35795
  00324	00 00 00 00	 DD	 $L35797
  00328	00 00 00 00	 DD	 $L35799
  0032c	00 00 00 00	 DD	 $L35801
  00330	00 00 00 00	 DD	 $L35804
  00334	00 00 00 00	 DD	 $L35804
  00338	00 00 00 00	 DD	 $L35804
  0033c	00 00 00 00	 DD	 $L35804
  00340	00 00 00 00	 DD	 $L35803
?HandleFETrap@CMcpxAPU@DirectSound@@IAEXXZ ENDP		; DirectSound::CMcpxAPU::HandleFETrap
DSOUND	ENDS
PUBLIC	?HandleDeltaWarning@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::HandleDeltaWarning
; Function compile flags: /Odt
;	COMDAT ?HandleDeltaWarning@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -12
_XGSCNT$ = -8
_DGSCNT$ = -4
?HandleDeltaWarning@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::HandleDeltaWarning, COMDAT
; _this$ = ecx

; 1102 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1103 :     DWORD                   XGSCNT;
; 1104 :     DWORD                   DGSCNT;
; 1105 :     
; 1106 :     DPF_ENTER();
; 1107 : 
; 1108 : #if !defined(MCPX_HANDLE_DELTA_PANICS_FROM_ISR) || defined(MCPX_ENABLE_ISR_DEBUGGING)
; 1109 : 
; 1110 :     DPF_WARNING("Delta warning");
; 1111 : 
; 1112 : #endif // !defined(MCPX_HANDLE_DELTA_PANICS_FROM_ISR) || defined(MCPX_ENABLE_ISR_DEBUGGING)
; 1113 : 
; 1114 :     m_dwDeltaWarningCount++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwDeltaWarningCount@CMcpxAPU@DirectSound@@0KA ; DirectSound::CMcpxAPU::m_dwDeltaWarningCount
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?m_dwDeltaWarningCount@CMcpxAPU@DirectSound@@0KA, eax ; DirectSound::CMcpxAPU::m_dwDeltaWarningCount

; 1115 : 
; 1116 :     MCPX_REG_READ(NV_PAPU_XGSCNT, &XGSCNT);

  00016	8b 0d 0c 20 80
	fe		 mov	 ecx, DWORD PTR ds:-25157620
  0001c	89 4d f8	 mov	 DWORD PTR _XGSCNT$[ebp], ecx

; 1117 :     MCPX_REG_READ(NV_PAPU_DGSCNT, &DGSCNT);

  0001f	8b 15 10 20 80
	fe		 mov	 edx, DWORD PTR ds:-25157616
  00025	89 55 fc	 mov	 DWORD PTR _DGSCNT$[ebp], edx

; 1118 :     
; 1119 :     MCPX_REG_WRITE(NV_PAPU_IGSCNT, XGSCNT + DGSCNT);

  00028	8b 45 f8	 mov	 eax, DWORD PTR _XGSCNT$[ebp]
  0002b	03 45 fc	 add	 eax, DWORD PTR _DGSCNT$[ebp]
  0002e	a3 08 20 80 fe	 mov	 DWORD PTR ds:-25157624, eax

; 1120 :     
; 1121 :     DPF_LEAVE_VOID();
; 1122 : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?HandleDeltaWarning@CMcpxAPU@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxAPU::HandleDeltaWarning
DSOUND	ENDS
EXTRN	?Run@CAc97Channel@DirectSound@@QAEXK@Z:NEAR	; DirectSound::CAc97Channel::Run
EXTRN	?Reset@CAc97Channel@DirectSound@@QAEXXZ:NEAR	; DirectSound::CAc97Channel::Reset
EXTRN	?SetSetupEngineState@CMcpxCore@DirectSound@@IAEXW4MCPX_SE_STATE@@@Z:NEAR ; DirectSound::CMcpxCore::SetSetupEngineState
EXTRN	?ResetGlobalCounters@CMcpxCore@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxCore::ResetGlobalCounters
EXTRN	?SetupEncodeProcessor@CMcpxCore@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxCore::SetupEncodeProcessor
; Function compile flags: /Odt
;	COMDAT ?HandleDeltaPanic@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -8
?HandleDeltaPanic@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::HandleDeltaPanic, COMDAT
; _this$ = ecx

; 1153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1154 :     BOOL                    fIdle;
; 1155 :     
; 1156 :     DPF_ENTER();
; 1157 : 
; 1158 : #if !defined(MCPX_HANDLE_DELTA_PANICS_FROM_ISR) || defined(MCPX_ENABLE_ISR_DEBUGGING)
; 1159 : 
; 1160 :     DPF_WARNING("Delta panic.  You'll hear a glitch while the APU is reset...");
; 1161 : 
; 1162 : #endif // !defined(MCPX_HANDLE_DELTA_PANICS_FROM_ISR) || defined(MCPX_ENABLE_ISR_DEBUGGING)
; 1163 :     
; 1164 :     m_dwDeltaPanicCount++;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwDeltaPanicCount@CMcpxAPU@DirectSound@@0KA ; DirectSound::CMcpxAPU::m_dwDeltaPanicCount
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?m_dwDeltaPanicCount@CMcpxAPU@DirectSound@@0KA, eax ; DirectSound::CMcpxAPU::m_dwDeltaPanicCount

; 1165 : 
; 1166 : #ifdef MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 1167 : 
; 1168 :     //
; 1169 :     // Shut down the setup engine
; 1170 :     //
; 1171 : 
; 1172 :     SetSetupEngineState(MCPX_SE_STATE_OFF);

  00016	6a 00		 push	 0
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 08	 add	 ecx, 8
  0001e	e8 00 00 00 00	 call	 ?SetSetupEngineState@CMcpxCore@DirectSound@@IAEXW4MCPX_SE_STATE@@@Z ; DirectSound::CMcpxCore::SetSetupEngineState

; 1173 : 
; 1174 : #else // MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 1175 : 
; 1176 :     //
; 1177 :     // Idle the voice processor
; 1178 :     //
; 1179 : 
; 1180 :     fIdle = IdleVoiceProcessor(TRUE);
; 1181 : 
; 1182 : #endif // MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 1183 : 
; 1184 :     //
; 1185 :     // Reset the ACI DMA
; 1186 :     //
; 1187 : 
; 1188 :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_ANALOG]->Reset();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00029	e8 00 00 00 00	 call	 ?Reset@CAc97Channel@DirectSound@@QAEXXZ ; DirectSound::CAc97Channel::Reset

; 1189 :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->Reset();

  0002e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00034	e8 00 00 00 00	 call	 ?Reset@CAc97Channel@DirectSound@@QAEXXZ ; DirectSound::CAc97Channel::Reset

; 1190 : 
; 1191 :     //
; 1192 :     // Reset the sample counters
; 1193 :     //
; 1194 : 
; 1195 :     ResetGlobalCounters();

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 08	 add	 ecx, 8
  0003f	e8 00 00 00 00	 call	 ?ResetGlobalCounters@CMcpxCore@DirectSound@@IAEXXZ ; DirectSound::CMcpxCore::ResetGlobalCounters

; 1196 : 
; 1197 :     //
; 1198 :     // Reset the EP
; 1199 :     //
; 1200 : 
; 1201 :     MCPX_REG_WRITE(NV_PAPU_EPRST, 1);

  00044	c7 05 fc ff 85
	fe 01 00 00 00	 mov	 DWORD PTR ds:-24772612, 1

; 1202 : 
; 1203 :     SetupEncodeProcessor();

  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 08	 add	 ecx, 8
  00054	e8 00 00 00 00	 call	 ?SetupEncodeProcessor@CMcpxCore@DirectSound@@IAEXXZ ; DirectSound::CMcpxCore::SetupEncodeProcessor

; 1204 : 
; 1205 :     //
; 1206 :     // Start the ACI running again
; 1207 :     //
; 1208 : 
; 1209 :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_ANALOG]->Run();

  00059	6a ff		 push	 -1
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00061	e8 00 00 00 00	 call	 ?Run@CAc97Channel@DirectSound@@QAEXK@Z ; DirectSound::CAc97Channel::Run

; 1210 :     m_Ac97.m_apChannels[AC97_CHANNELTYPE_DIGITAL]->Run();

  00066	6a ff		 push	 -1
  00068	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0006e	e8 00 00 00 00	 call	 ?Run@CAc97Channel@DirectSound@@QAEXK@Z ; DirectSound::CAc97Channel::Run

; 1211 : 
; 1212 : #ifdef MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 1213 : 
; 1214 :     //
; 1215 :     // Restart the setup engine
; 1216 :     //
; 1217 : 
; 1218 :     SetSetupEngineState(MCPX_SE_STATE_DEFAULT);

  00073	6a 01		 push	 1
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	83 c1 08	 add	 ecx, 8
  0007b	e8 00 00 00 00	 call	 ?SetSetupEngineState@CMcpxCore@DirectSound@@IAEXW4MCPX_SE_STATE@@@Z ; DirectSound::CMcpxCore::SetSetupEngineState

; 1219 : 
; 1220 : #else // MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 1221 : 
; 1222 :     //
; 1223 :     // Restore the VP state
; 1224 :     //
; 1225 : 
; 1226 :     if(fIdle)
; 1227 :     {
; 1228 :         IdleVoiceProcessor(FALSE);
; 1229 :     }
; 1230 : 
; 1231 : #endif // MCPX_HANDLE_DELTA_PANICS_FROM_ISR
; 1232 : 
; 1233 :     DPF_LEAVE_VOID();
; 1234 : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?HandleDeltaPanic@CMcpxAPU@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxAPU::HandleDeltaPanic
DSOUND	ENDS
PUBLIC	?HandleIdleVoice@CMcpxAPU@DirectSound@@IAEXK@Z	; DirectSound::CMcpxAPU::HandleIdleVoice
PUBLIC	??_C@_0BP@KOPCCDJ@CMcpxAPU?3?3HandleSoftwareMethod?$AA@ ; `string'
PUBLIC	??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@ ; `string'
;	COMDAT ??_C@_0BP@KOPCCDJ@CMcpxAPU?3?3HandleSoftwareMethod?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@KOPCCDJ@CMcpxAPU?3?3HandleSoftwareMethod?$AA@ DB 'CMcpxAPU::Han'
	DB	'dleSoftwareMethod', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@
DSOUND_RD	SEGMENT
??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@ DB 'Unexpec'
	DB	'ted software method:  %x %x', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?HandleSoftwareMethod@CMcpxAPU@DirectSound@@IAEXKK@Z
DSOUND	SEGMENT
tv64 = -8
_this$ = -4
_dwMethod$ = 8
_dwParam$ = 12
?HandleSoftwareMethod@CMcpxAPU@DirectSound@@IAEXKK@Z PROC NEAR ; DirectSound::CMcpxAPU::HandleSoftwareMethod, COMDAT
; _this$ = ecx

; 1264 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1265 :     switch(dwMethod)
; 1266 :     {

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	81 7d f8 00 80
	00 00		 cmp	 DWORD PTR tv64[ebp], 32768 ; 00008000H
  00016	74 02		 je	 SHORT $L35833
  00018	eb 0e		 jmp	 SHORT $L35834
$L35833:

; 1267 :         case 0x8000:
; 1268 :             
; 1269 :             //
; 1270 :             // SE2FE_IDLE_VOICE is undocumented since it's an internal method
; 1271 :             //
; 1272 : 
; 1273 :             HandleIdleVoice(dwParam);

  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwParam$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?HandleIdleVoice@CMcpxAPU@DirectSound@@IAEXK@Z ; DirectSound::CMcpxAPU::HandleIdleVoice

; 1274 : 
; 1275 :             break;

  00026	eb 35		 jmp	 SHORT $L35828
$L35834:

; 1276 : 
; 1277 :         default:
; 1278 :             
; 1279 :             //
; 1280 :             // Huh?
; 1281 :             //
; 1282 : 
; 1283 :             DPF_ERROR("Unexpected software method:  %x %x", dwMethod, dwParam);

  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KOPCCDJ@CMcpxAPU?3?3HandleSoftwareMethod?$AA@
  00032	68 03 05 00 00	 push	 1283			; 00000503H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0003c	6a 01		 push	 1
  0003e	6a 09		 push	 9
  00040	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00045	83 c4 18	 add	 esp, 24			; 00000018H
  00048	8b 55 0c	 mov	 edx, DWORD PTR _dwParam$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dwMethod$[ebp]
  0004f	50		 push	 eax
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@IOFPJGFP@Unexpected?5software?5method?3?5?5?$CFx?5@
  00055	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
$L35828:

; 1284 : 
; 1285 :             break;
; 1286 :     }
; 1287 : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?HandleSoftwareMethod@CMcpxAPU@DirectSound@@IAEXKK@Z ENDP ; DirectSound::CMcpxAPU::HandleSoftwareMethod
DSOUND	ENDS
PUBLIC	??_C@_0CC@NMDAKMOM@Voice?5not?5in?5software?5active?5lis@ ; `string'
PUBLIC	??_C@_07KNJIFJBG@pClient?$AA@			; `string'
PUBLIC	??_C@_0BK@EMMMFGK@CMcpxAPU?3?3HandleIdleVoice?$AA@ ; `string'
PUBLIC	??_C@_0EE@LLFIMMID@Internal?5hardware?5error?5?9?9?5inval@ ; `string'
EXTRN	?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z:NEAR ; DirectSound::CMcpxVoiceClient::RemoveIdleVoice
;	COMDAT ??_C@_0CC@NMDAKMOM@Voice?5not?5in?5software?5active?5lis@
DSOUND_RD	SEGMENT
??_C@_0CC@NMDAKMOM@Voice?5not?5in?5software?5active?5lis@ DB 'Voice not i'
	DB	'n software active list', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_07KNJIFJBG@pClient?$AA@
DSOUND_RD	SEGMENT
??_C@_07KNJIFJBG@pClient?$AA@ DB 'pClient', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EMMMFGK@CMcpxAPU?3?3HandleIdleVoice?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@EMMMFGK@CMcpxAPU?3?3HandleIdleVoice?$AA@ DB 'CMcpxAPU::HandleId'
	DB	'leVoice', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EE@LLFIMMID@Internal?5hardware?5error?5?9?9?5inval@
DSOUND_RD	SEGMENT
??_C@_0EE@LLFIMMID@Internal?5hardware?5error?5?9?9?5inval@ DB 'Internal h'
	DB	'ardware error -- invalid voice index in idle message (%x)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?HandleIdleVoice@CMcpxAPU@DirectSound@@IAEXK@Z
DSOUND	SEGMENT
_this$ = -12
_dwVoiceFormat$ = -8
_pClient$ = -4
_dwIdleVoice$ = 8
?HandleIdleVoice@CMcpxAPU@DirectSound@@IAEXK@Z PROC NEAR ; DirectSound::CMcpxAPU::HandleIdleVoice, COMDAT
; _this$ = ecx

; 1314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1315 :     CMcpxVoiceClient *      pClient;
; 1316 :     DWORD                   dwVoiceFormat;
; 1317 :     
; 1318 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1319 : 
; 1320 :     DWORD                   dwVoiceState;
; 1321 : 
; 1322 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1323 : 
; 1324 :     DEBUGLOG("HandleIdleVoice %x", dwIdleVoice);
; 1325 : 
; 1326 :     //
; 1327 :     // Check the voice index for validity.  The hardware sometimes likes
; 1328 :     // to have some fun with us.
; 1329 :     //
; 1330 : 
; 1331 :     if(dwIdleVoice < MCPX_HW_MAX_VOICES)

  00009	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _dwIdleVoice$[ebp], 256 ; 00000100H
  00010	0f 83 de 00 00
	00		 jae	 $L35843

; 1332 :     {
; 1333 :         //
; 1334 :         // Make sure no-one's accessing the voice map.  If they are, we can
; 1335 :         // just ignore the idle message and it will get posted again on the
; 1336 :         // next frame.
; 1337 :         //
; 1338 : 
; 1339 :         if(!m_dwVoiceMapLock)

  00016	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 b8 2c 03 00
	00 00		 cmp	 DWORD PTR [eax+812], 0
  00020	0f 85 86 00 00
	00		 jne	 $L35844

; 1340 :         {
; 1341 :             //
; 1342 :             // Don't remove PERSIST voices from the list.  When those voices
; 1343 :             // need to go away, they'll remove the PERSIST bit from their
; 1344 :             // format.
; 1345 :             //
; 1346 : 
; 1347 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1348 : 
; 1349 :             MCPX_VOICE_STRUCT_READ(dwIdleVoice, NV_PAVS_VOICE_PAR_STATE, &dwVoiceState);
; 1350 : 
; 1351 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1352 : 
; 1353 :             MCPX_VOICE_STRUCT_READ(dwIdleVoice, NV_PAVS_VOICE_CFG_FMT, &dwVoiceFormat);

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _dwIdleVoice$[ebp]
  00029	c1 e1 07	 shl	 ecx, 7
  0002c	8b 15 30 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  00032	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  00036	89 45 f8	 mov	 DWORD PTR _dwVoiceFormat$[ebp], eax

; 1354 : 
; 1355 :             if(!MCPX_GET_REG_VALUE(dwVoiceFormat, NV_PAVS_VOICE_CFG_FMT_PERSIST))

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceFormat$[ebp]
  0003c	c1 e9 17	 shr	 ecx, 23			; 00000017H
  0003f	83 e1 01	 and	 ecx, 1
  00042	85 c9		 test	 ecx, ecx
  00044	75 64		 jne	 SHORT $L35855

; 1356 :             {
; 1357 : 
; 1358 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1359 : 
; 1360 :                 DPF_BLAB("Hardware reports voice %x is idle", dwIdleVoice);
; 1361 : 
; 1362 :                 ASSERT(!MCPX_GET_REG_VALUE(dwVoiceState, NV_PAVS_VOICE_PAR_STATE_ACTIVE_VOICE));
; 1363 : 
; 1364 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1365 :         
; 1366 :                 //
; 1367 :                 // Get the voice client for the hardware voice
; 1368 :                 //
; 1369 : 
; 1370 :                 pClient = m_apVoiceMap[dwIdleVoice];

  00046	8b 55 08	 mov	 edx, DWORD PTR _dwIdleVoice$[ebp]
  00049	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 8c 90 30 03
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+816]
  00053	89 4d fc	 mov	 DWORD PTR _pClient$[ebp], ecx

; 1371 : 
; 1372 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1373 : 
; 1374 :                 ASSERT(pClient);
; 1375 : 
; 1376 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1377 : 
; 1378 : #ifdef MCPX_DEBUG_STUCK_VOICES
; 1379 : 
; 1380 :                 pClient->m_dwIgnoredTraps = 0;

  00056	8b 55 fc	 mov	 edx, DWORD PTR _pClient$[ebp]
  00059	c7 82 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+136], 0

; 1381 : 
; 1382 : #endif // MCPX_DEBUG_STUCK_VOICES
; 1383 :         
; 1384 :                 //
; 1385 :                 // We don't want to remove the voice from the processing list until the
; 1386 :                 // last hardware voice is done processing.  Because the voices are always
; 1387 :                 // placed into the processing list in order, the last voice in the array
; 1388 :                 // should be the last one to finish.
; 1389 :                 //
; 1390 : 
; 1391 :                 if(dwIdleVoice == (DWORD)pClient->m_ahVoices[pClient->m_bVoiceCount - 1])

  00063	8b 45 fc	 mov	 eax, DWORD PTR _pClient$[ebp]
  00066	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _pClient$[ebp]
  0006d	0f b7 44 4a 0a	 movzx	 eax, WORD PTR [edx+ecx*2+10]
  00072	39 45 08	 cmp	 DWORD PTR _dwIdleVoice$[ebp], eax
  00075	75 33		 jne	 SHORT $L35855

; 1392 :                 {
; 1393 :                     if(IsEntryInList(&pClient->m_leActiveVoice))

  00077	8b 4d fc	 mov	 ecx, DWORD PTR _pClient$[ebp]
  0007a	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0007d	8b 55 fc	 mov	 edx, DWORD PTR _pClient$[ebp]
  00080	39 4a 4c	 cmp	 DWORD PTR [edx+76], ecx
  00083	74 0c		 je	 SHORT $L35851

; 1394 :                     {
; 1395 :                         pClient->RemoveIdleVoice();

  00085	6a 01		 push	 1
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _pClient$[ebp]
  0008a	e8 00 00 00 00	 call	 ?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z ; DirectSound::CMcpxVoiceClient::RemoveIdleVoice

; 1396 :                     }            
; 1397 :                     else

  0008f	eb 19		 jmp	 SHORT $L35855
$L35851:

; 1398 :                     {
; 1399 :                         ASSERTMSG("Voice not in software active list");

  00091	68 77 05 00 00	 push	 1399			; 00000577H
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@NMDAKMOM@Voice?5not?5in?5software?5active?5lis@
  000a0	6a 01		 push	 1
  000a2	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a7	83 c4 10	 add	 esp, 16			; 00000010H
$L35855:

; 1400 :                     }
; 1401 :                 }
; 1402 :                 else
; 1403 :                 {
; 1404 : 
; 1405 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1406 : 
; 1407 :                     DPF_BLAB("Waiting for voice %x to idle...", pClient->m_ahVoices[pClient->m_bVoiceCount - 1]);
; 1408 : 
; 1409 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1410 :         
; 1411 :                 }
; 1412 :             }
; 1413 :             else
; 1414 :             {
; 1415 : 
; 1416 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1417 : 
; 1418 :                 ASSERT(!MCPX_GET_REG_VALUE(dwVoiceState, NV_PAVS_VOICE_PAR_STATE_ACTIVE_VOICE));
; 1419 : 
; 1420 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1421 : 
; 1422 :             }
; 1423 :         }
; 1424 : 
; 1425 : #ifdef MCPX_DEBUG_STUCK_VOICES
; 1426 : 
; 1427 :         else

  000aa	eb 46		 jmp	 SHORT $L35856
$L35844:

; 1428 :         {
; 1429 :             pClient = m_apVoiceMap[dwIdleVoice];

  000ac	8b 45 08	 mov	 eax, DWORD PTR _dwIdleVoice$[ebp]
  000af	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	8b 94 81 30 03
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+816]
  000b9	89 55 fc	 mov	 DWORD PTR _pClient$[ebp], edx

; 1430 :             ASSERT(pClient);

  000bc	68 96 05 00 00	 push	 1430			; 00000596H
  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KNJIFJBG@pClient?$AA@
  000cb	33 c0		 xor	 eax, eax
  000cd	83 7d fc 00	 cmp	 DWORD PTR _pClient$[ebp], 0
  000d1	0f 94 c0	 sete	 al
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000da	83 c4 10	 add	 esp, 16			; 00000010H

; 1431 : 
; 1432 :             pClient->m_dwIgnoredTraps++;

  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _pClient$[ebp]
  000e0	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  000e6	83 c2 01	 add	 edx, 1
  000e9	8b 45 fc	 mov	 eax, DWORD PTR _pClient$[ebp]
  000ec	89 90 88 00 00
	00		 mov	 DWORD PTR [eax+136], edx
$L35856:

; 1433 :         }
; 1434 : 
; 1435 : #endif // MCPX_DEBUG_STUCK_VOICES
; 1436 :         
; 1437 :     }
; 1438 : 
; 1439 : #if defined(MCPX_ENABLE_ISR_DEBUGGING) || defined(MCPX_DEBUG_STUCK_VOICES)
; 1440 : 
; 1441 :     else

  000f2	eb 31		 jmp	 SHORT $L35840
$L35843:

; 1442 :     {
; 1443 :         DPF_ERROR("Internal hardware error -- invalid voice index in idle message (%x)", dwIdleVoice);

  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@EMMMFGK@CMcpxAPU?3?3HandleIdleVoice?$AA@
  000fe	68 a3 05 00 00	 push	 1443			; 000005a3H
  00103	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00108	6a 01		 push	 1
  0010a	6a 09		 push	 9
  0010c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00111	83 c4 18	 add	 esp, 24			; 00000018H
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _dwIdleVoice$[ebp]
  00117	51		 push	 ecx
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@LLFIMMID@Internal?5hardware?5error?5?9?9?5inval@
  0011d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00122	83 c4 08	 add	 esp, 8
$L35840:

; 1444 :     }
; 1445 : 
; 1446 : #endif // defined(MCPX_ENABLE_ISR_DEBUGGING) || defined(MCPX_DEBUG_STUCK_VOICES)
; 1447 : 
; 1448 : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 04 00	 ret	 4
?HandleIdleVoice@CMcpxAPU@DirectSound@@IAEXK@Z ENDP	; DirectSound::CMcpxAPU::HandleIdleVoice
DSOUND	ENDS
PUBLIC	?Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ	; DirectSound::CMcpxAPU::Commit3dSettings
PUBLIC	?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxAPU::SetEffectData
PUBLIC	?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxAPU::GetEffectData
PUBLIC	?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ	; DirectSound::CMcpxAPU::CommitEffectData
EXTRN	_g_fDirectSoundI3DL2Overdelay:DWORD
EXTRN	?Calculate3d@CHrtfListener@DirectSound@@QAEXK@Z:NEAR ; DirectSound::CHrtfListener::Calculate3d
EXTRN	?Initialize@CI3dl2Listener@DirectSound@@QAEXXZ:NEAR ; DirectSound::CI3dl2Listener::Initialize
EXTRN	?CalculateI3dl2@CI3dl2Listener@DirectSound@@QAEXXZ:NEAR ; DirectSound::CI3dl2Listener::CalculateI3dl2
;	COMDAT ?dwParamOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB
DSOUND_RD	SEGMENT
?dwParamOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB DD 0118H ; `DirectSound::CMcpxAPU::Commit3dSettings'::`2'::dwParamOffset
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ
DSOUND	SEGMENT
_this$ = -8
_dwParameterMask$ = -4
?Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ PROC NEAR ; DirectSound::CMcpxAPU::Commit3dSettings, COMDAT
; _this$ = ecx

; 1476 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1477 :     static const DWORD      dwStateOffset   = offsetof(DSFX_I3DL2REVERB_PARAMS, State.dwFlags);
; 1478 :     static const DWORD      dwParamOffset   = offsetof(DSFX_I3DL2REVERB_PARAMS, dwReflectionsInputDelay[0]);
; 1479 :     DWORD                   dwParameterMask;
; 1480 : 
; 1481 :     DPF_ENTER();
; 1482 : 
; 1483 :     //
; 1484 :     // Cache the parameter mask.  We're relying on the calling function to
; 1485 :     // clear it after all 3D voices have been recalculated.
; 1486 :     //
; 1487 :     
; 1488 :     dwParameterMask = m_pSettings->m_3dParams.dwParameterMask;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000f	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  00015	89 55 fc	 mov	 DWORD PTR _dwParameterMask$[ebp], edx

; 1489 : 
; 1490 :     //
; 1491 :     // Recalculate 3D
; 1492 :     //
; 1493 : 
; 1494 :     Calculate3d(dwParameterMask);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _dwParameterMask$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 58	 add	 ecx, 88			; 00000058H
  00022	e8 00 00 00 00	 call	 ?Calculate3d@CHrtfListener@DirectSound@@QAEXK@Z ; DirectSound::CHrtfListener::Calculate3d

; 1495 : 
; 1496 :     //
; 1497 :     // Recalculate I3DL2
; 1498 :     //
; 1499 : 
; 1500 :     if((dwParameterMask & MCPX_3DCALC_I3DL2LISTENER) && (DSFX_IMAGELOC_UNUSED != m_pSettings->m_EffectLocations.dwI3DL2ReverbIndex))

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _dwParameterMask$[ebp]
  0002a	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00030	85 c9		 test	 ecx, ecx
  00032	0f 84 d8 00 00
	00		 je	 $L35874
  00038	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003e	83 78 0c ff	 cmp	 DWORD PTR [eax+12], -1
  00042	0f 84 c8 00 00
	00		 je	 $L35874

; 1501 :     {
; 1502 :         //
; 1503 :         // Reverb effect data is made up of the following sections:
; 1504 :         //  - state block
; 1505 :         //  - delay line offsets/sizes
; 1506 :         //  - reverb parameters
; 1507 :         //
; 1508 :         // We're using this internal knowlege to tell us where to poke the
; 1509 :         // I3DL2 data.  If the reverb state block size ever changes, update
; 1510 :         // DSFX_I3DL2REVERB_PARAMS.
; 1511 :         //
; 1512 :         // Neither the state block nor the delay line data change between
; 1513 :         // calls to SetI3dl2Listener, so we'll start the changes after both
; 1514 :         // of those.
; 1515 :         //
; 1516 : 
; 1517 :         if(SUCCEEDED(GetEffectData(m_pSettings->m_EffectLocations.dwI3DL2ReverbIndex, 0, &m_I3dl2Data, dwParamOffset)))

  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dwParamOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB
  0004e	51		 push	 ecx
  0004f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00052	81 c2 d8 00 00
	00		 add	 edx, 216		; 000000d8H
  00058	52		 push	 edx
  00059	6a 00		 push	 0
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00061	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00064	52		 push	 edx
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxAPU::GetEffectData
  0006d	85 c0		 test	 eax, eax
  0006f	0f 8c 9b 00 00
	00		 jl	 $L35874

; 1518 :         {
; 1519 :             //
; 1520 :             // In the Nov01 release, I accidentally broke I3DL2 by adding this
; 1521 :             // call to Initialize and failing to remove the Initialize call in
; 1522 :             // CI3dl2Listener::CalculateI3dl2.  If any games tweaked their
; 1523 :             // I3DL2 parameters based on this bug, we want them to be able to
; 1524 :             // get back to the broken behavior.
; 1525 :             //
; 1526 :             
; 1527 :             if(g_fDirectSoundI3DL2Overdelay)

  00075	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundI3DL2Overdelay, 0
  0007c	74 0e		 je	 SHORT $L35877

; 1528 :             {
; 1529 :                 CI3dl2Listener::Initialize();

  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00087	e8 00 00 00 00	 call	 ?Initialize@CI3dl2Listener@DirectSound@@QAEXXZ ; DirectSound::CI3dl2Listener::Initialize
$L35877:

; 1530 :             }
; 1531 : 
; 1532 :             CI3dl2Listener::CalculateI3dl2();

  0008c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00095	e8 00 00 00 00	 call	 ?CalculateI3dl2@CI3dl2Listener@DirectSound@@QAEXXZ ; DirectSound::CI3dl2Listener::CalculateI3dl2

; 1533 : 
; 1534 :             m_I3dl2Data.State.dwFlags |= DSFX_STATE_UPDATE;

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  000a3	83 c9 04	 or	 ecx, 4
  000a6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	89 8a e8 00 00
	00		 mov	 DWORD PTR [edx+232], ecx

; 1535 : 
; 1536 :             SetEffectData(m_pSettings->m_EffectLocations.dwI3DL2ReverbIndex, dwStateOffset, &m_I3dl2Data.State.dwFlags, sizeof(m_I3dl2Data.State.dwFlags), DSFX_DEFERRED);

  000af	6a 01		 push	 1
  000b1	6a 04		 push	 4
  000b3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	05 e8 00 00 00	 add	 eax, 232		; 000000e8H
  000bb	50		 push	 eax
  000bc	6a 10		 push	 16			; 00000010H
  000be	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000c4	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000c7	50		 push	 eax
  000c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	e8 00 00 00 00	 call	 ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxAPU::SetEffectData

; 1537 :             SetEffectData(m_pSettings->m_EffectLocations.dwI3DL2ReverbIndex, dwParamOffset, (LPBYTE)&m_I3dl2Data + dwParamOffset, sizeof(DSFX_I3DL2REVERB_PARAMS) - dwParamOffset, DSFX_DEFERRED);

  000d0	6a 01		 push	 1
  000d2	b9 20 02 00 00	 mov	 ecx, 544		; 00000220H
  000d7	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR ?dwParamOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB
  000dd	51		 push	 ecx
  000de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwParamOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB
  000e4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8d 8c 10 d8 00
	00 00		 lea	 ecx, DWORD PTR [eax+edx+216]
  000ee	51		 push	 ecx
  000ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?dwParamOffset@?1??Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ@4KB
  000f5	52		 push	 edx
  000f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000fc	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000ff	52		 push	 edx
  00100	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	e8 00 00 00 00	 call	 ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxAPU::SetEffectData

; 1538 :             
; 1539 :             CommitEffectData();

  00108	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	e8 00 00 00 00	 call	 ?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ ; DirectSound::CMcpxAPU::CommitEffectData
$L35874:

; 1540 :         }
; 1541 :     }
; 1542 : 
; 1543 :     DPF_LEAVE(dwParameterMask);
; 1544 : 
; 1545 :     return dwParameterMask;

  00110	8b 45 fc	 mov	 eax, DWORD PTR _dwParameterMask$[ebp]

; 1546 : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
?Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ ENDP	; DirectSound::CMcpxAPU::Commit3dSettings
DSOUND	ENDS
PUBLIC	??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@		; `string'
PUBLIC	??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@ ; `string'
EXTRN	?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z:NEAR ; DirectSound::CMcpxGPDspManager::SetEffectData
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
DSOUND_RD	SEGMENT
??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@ DB 'm_pGpDspManager', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT
??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@ DB 'm_dwState &'
	DB	' MCPX_APUSTATE_GPIMAGE', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwEffectIndex$ = 8
_dwOffset$ = 12
_pvData$ = 16
_dwDataSize$ = 20
_dwFlags$ = 24
?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z PROC NEAR ; DirectSound::CMcpxAPU::SetEffectData, COMDAT
; _this$ = ecx

; 211  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 212  :         ASSERT(m_pGpDspManager);

  00007	68 d4 00 00 00	 push	 212			; 000000d4H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	0f 94 c1	 sete	 cl
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 213  :         ASSERT(m_dwState & MCPX_APUSTATE_GPIMAGE);

  0002b	68 d5 00 00 00	 push	 213			; 000000d5H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00043	83 e0 01	 and	 eax, 1
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 214  : 
; 215  :         return m_pGpDspManager->SetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize, dwFlags);

  00054	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 14	 mov	 edx, DWORD PTR _dwDataSize$[ebp]
  0005b	52		 push	 edx
  0005c	8b 45 10	 mov	 eax, DWORD PTR _pvData$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _dwOffset$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 08	 mov	 edx, DWORD PTR _dwEffectIndex$[ebp]
  00067	52		 push	 edx
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006e	e8 00 00 00 00	 call	 ?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxGPDspManager::SetEffectData

; 216  :     }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 14 00	 ret	 20			; 00000014H
?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ENDP	; DirectSound::CMcpxAPU::SetEffectData
DSOUND	ENDS
EXTRN	?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z:NEAR ; DirectSound::CMcpxGPDspManager::GetEffectData
; Function compile flags: /Odt
;	COMDAT ?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z
DSOUND	SEGMENT
_this$ = -4
_dwEffectIndex$ = 8
_dwOffset$ = 12
_pvData$ = 16
_dwDataSize$ = 20
?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z PROC NEAR ; DirectSound::CMcpxAPU::GetEffectData, COMDAT
; _this$ = ecx

; 219  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  :         ASSERT(m_pGpDspManager);

  00007	68 dc 00 00 00	 push	 220			; 000000dcH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	0f 94 c1	 sete	 cl
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 221  :         ASSERT(m_dwState & MCPX_APUSTATE_GPIMAGE);

  0002b	68 dd 00 00 00	 push	 221			; 000000ddH
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00043	83 e0 01	 and	 eax, 1
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 222  : 
; 223  :         return m_pGpDspManager->GetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize);

  00054	8b 4d 14	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 10	 mov	 edx, DWORD PTR _pvData$[ebp]
  0005b	52		 push	 edx
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _dwEffectIndex$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00067	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0006a	e8 00 00 00 00	 call	 ?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxGPDspManager::GetEffectData

; 224  :     }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 10 00	 ret	 16			; 00000010H
?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z ENDP	; DirectSound::CMcpxAPU::GetEffectData
DSOUND	ENDS
EXTRN	?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z:NEAR ; DirectSound::CMcpxGPDspManager::CommitChanges
; Function compile flags: /Odt
;	COMDAT ?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -4
?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxAPU::CommitEffectData, COMDAT
; _this$ = ecx

; 227  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 228  :         ASSERT(m_pGpDspManager);

  00007	68 e4 00 00 00	 push	 228			; 000000e4H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	0f 94 c1	 sete	 cl
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 229  :         ASSERT(m_dwState & MCPX_APUSTATE_GPIMAGE);

  0002b	68 e5 00 00 00	 push	 229			; 000000e5H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00043	83 e0 01	 and	 eax, 1
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 230  : 
; 231  :         m_pGpDspManager->CommitChanges(0, 0);

  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0005e	e8 00 00 00 00	 call	 ?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z ; DirectSound::CMcpxGPDspManager::CommitChanges

; 232  : 
; 233  :         return DS_OK;

  00063	33 c0		 xor	 eax, eax

; 234  :     }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxAPU::CommitEffectData
DSOUND	ENDS
PUBLIC	?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::ScheduleDeferredCommand
PUBLIC	?ScheduleDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::ScheduleDeferredCommandHigh
PUBLIC	?ScheduleDeferredCommandLow@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::ScheduleDeferredCommandLow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
;	COMDAT ?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT
_this$ = -20
$T36571 = -16
___AutoIrql$ = -12
_fScheduled$ = -4
_pCmd$ = 8
?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z PROC NEAR ; DirectSound::CMcpxAPU::ScheduleDeferredCommand, COMDAT
; _this$ = ecx

; 1576 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1577 :     BOOL                    fScheduled;
; 1578 :  
; 1579 :     DPF_ENTER();
; 1580 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1581 : 
; 1582 :     if(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY)

  00011	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00014	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00017	83 e1 01	 and	 ecx, 1
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 11		 je	 SHORT $L35886

; 1583 :     {
; 1584 :         fScheduled = ScheduleDeferredCommandLow(pCmd);

  0001e	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00021	52		 push	 edx
  00022	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?ScheduleDeferredCommandLow@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::ScheduleDeferredCommandLow
  0002a	89 45 fc	 mov	 DWORD PTR _fScheduled$[ebp], eax

; 1585 :     }
; 1586 :     else

  0002d	eb 0f		 jmp	 SHORT $L35887
$L35886:

; 1587 :     {
; 1588 :         fScheduled = ScheduleDeferredCommandHigh(pCmd);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00032	50		 push	 eax
  00033	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?ScheduleDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::ScheduleDeferredCommandHigh
  0003b	89 45 fc	 mov	 DWORD PTR _fScheduled$[ebp], eax
$L35887:

; 1589 :     }
; 1590 : 
; 1591 :     if(fScheduled)

  0003e	83 7d fc 00	 cmp	 DWORD PTR _fScheduled$[ebp], 0
  00042	74 0f		 je	 SHORT $L35888

; 1592 :     {
; 1593 :         pCmd->dwFlags |= MCPX_DEFERREDCMDF_SCHEDULED;

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  00047	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004a	83 ca 02	 or	 edx, 2
  0004d	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00050	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L35888:

; 1594 :     }
; 1595 : 
; 1596 :     DPF_LEAVE(fScheduled);
; 1597 : 
; 1598 :     return fScheduled;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _fScheduled$[ebp]
  00056	89 4d f0	 mov	 DWORD PTR $T36571[ebp], ecx
  00059	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0005c	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00061	8b 45 f0	 mov	 eax, DWORD PTR $T36571[ebp]

; 1599 : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z ENDP ; DirectSound::CMcpxAPU::ScheduleDeferredCommand
DSOUND	ENDS
PUBLIC	??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0DB@DKGCGKPN@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@ ; `string'
PUBLIC	??_C@_0CN@IJPABDMJ@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@ ; `string'
PUBLIC	?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z		; InsertTailList
PUBLIC	?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommand
EXTRN	__imp__KeSetTimer@16:NEAR
EXTRN	__imp__KeQuerySystemTime@4:NEAR
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ DB 'Ke'
	DB	'GetCurrentIrql() == DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@DKGCGKPN@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
DSOUND_RD	SEGMENT
??_C@_0DB@DKGCGKPN@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@ DB '!'
	DB	'(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@IJPABDMJ@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
DSOUND_RD	SEGMENT
??_C@_0CN@IJPABDMJ@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@ DB '!'
	DB	'(pCmd->dwFlags & MCPX_DEFERREDCMDF_PERSIST)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ScheduleDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT
tv214 = -48
tv213 = -44
tv130 = -40
tv194 = -36
tv179 = -32
tv171 = -28
_this$ = -24
_fScheduled$ = -20
_rtCurrentTime$ = -16
_pleNextEntry$ = -4
_pCmd$ = 8
?ScheduleDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z PROC NEAR ; DirectSound::CMcpxAPU::ScheduleDeferredCommandHigh, COMDAT
; _this$ = ecx

; 1627 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1628 :     REFERENCE_TIME          rtCurrentTime;
; 1629 :     PLIST_ENTRY             pleNextEntry;
; 1630 :     BOOL                    fScheduled;
; 1631 : 
; 1632 :     DPF_ENTER();
; 1633 : 
; 1634 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 62 06 00 00	 push	 1634			; 00000662H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1635 :     ASSERT(!(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY));

  00031	68 63 06 00 00	 push	 1635			; 00000663H
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@DKGCGKPN@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
  00040	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00043	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00046	83 e0 01	 and	 eax, 1
  00049	f7 d8		 neg	 eax
  0004b	1b c0		 sbb	 eax, eax
  0004d	f7 d8		 neg	 eax
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 1636 :     ASSERT(!(pCmd->dwFlags & MCPX_DEFERREDCMDF_PERSIST));

  00058	68 64 06 00 00	 push	 1636			; 00000664H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@IJPABDMJ@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0006a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0006d	83 e2 04	 and	 edx, 4
  00070	f7 da		 neg	 edx
  00072	1b d2		 sbb	 edx, edx
  00074	f7 da		 neg	 edx
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 1637 : 
; 1638 :     //
; 1639 :     // Check the current time.  If the timestamp has already elapsed,
; 1640 :     // we aren't going to schedule the command.
; 1641 :     //
; 1642 : 
; 1643 :     if(pCmd->rtTimestamp)

  0007f	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00082	89 45 e4	 mov	 DWORD PTR tv171[ebp], eax
  00085	8b 4d e4	 mov	 ecx, DWORD PTR tv171[ebp]
  00088	8b 55 e4	 mov	 edx, DWORD PTR tv171[ebp]
  0008b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0008e	0b 42 1c	 or	 eax, DWORD PTR [edx+28]
  00091	85 c0		 test	 eax, eax
  00093	0f 84 3b 01 00
	00		 je	 $L35900

; 1644 :     {
; 1645 :         KeQuerySystemTime((PLARGE_INTEGER)&rtCurrentTime);

  00099	8d 4d f0	 lea	 ecx, DWORD PTR _rtCurrentTime$[ebp]
  0009c	51		 push	 ecx
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 1646 : 
; 1647 :         if(pCmd->rtTimestamp <= 0)

  000a3	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  000a6	89 55 e0	 mov	 DWORD PTR tv179[ebp], edx
  000a9	8b 45 e0	 mov	 eax, DWORD PTR tv179[ebp]
  000ac	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  000b0	7f 23		 jg	 SHORT $L35902
  000b2	7c 09		 jl	 SHORT $L36577
  000b4	8b 4d e0	 mov	 ecx, DWORD PTR tv179[ebp]
  000b7	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  000bb	77 18		 ja	 SHORT $L35902
$L36577:

; 1648 :         {
; 1649 :             pCmd->rtTimestamp = rtCurrentTime - pCmd->rtTimestamp;

  000bd	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  000c0	8b 45 f0	 mov	 eax, DWORD PTR _rtCurrentTime$[ebp]
  000c3	2b 42 18	 sub	 eax, DWORD PTR [edx+24]
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR _rtCurrentTime$[ebp+4]
  000c9	1b 4a 1c	 sbb	 ecx, DWORD PTR [edx+28]
  000cc	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  000cf	89 42 18	 mov	 DWORD PTR [edx+24], eax
  000d2	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$L35902:

; 1650 :         }
; 1651 : 
; 1652 :         if(fScheduled = (pCmd->rtTimestamp > rtCurrentTime))

  000d5	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  000d8	89 45 dc	 mov	 DWORD PTR tv194[ebp], eax
  000db	8b 4d dc	 mov	 ecx, DWORD PTR tv194[ebp]
  000de	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000e1	3b 55 f4	 cmp	 edx, DWORD PTR _rtCurrentTime$[ebp+4]
  000e4	7c 16		 jl	 SHORT $L36575
  000e6	7f 0b		 jg	 SHORT $L36578
  000e8	8b 45 dc	 mov	 eax, DWORD PTR tv194[ebp]
  000eb	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ee	3b 4d f0	 cmp	 ecx, DWORD PTR _rtCurrentTime$[ebp]
  000f1	76 09		 jbe	 SHORT $L36575
$L36578:
  000f3	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv130[ebp], 1
  000fa	eb 07		 jmp	 SHORT $L36576
$L36575:
  000fc	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$L36576:
  00103	8b 55 d8	 mov	 edx, DWORD PTR tv130[ebp]
  00106	89 55 ec	 mov	 DWORD PTR _fScheduled$[ebp], edx
  00109	83 7d ec 00	 cmp	 DWORD PTR _fScheduled$[ebp], 0
  0010d	0f 84 bf 00 00
	00		 je	 $L35903

; 1653 :         {
; 1654 :             //
; 1655 :             // If the command is already scheduled, remove it from the queue
; 1656 :             //
; 1657 : 
; 1658 :             if(pCmd->dwFlags & MCPX_DEFERREDCMDF_SCHEDULED)

  00113	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00116	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00119	83 e1 02	 and	 ecx, 2
  0011c	85 c9		 test	 ecx, ecx
  0011e	74 0c		 je	 SHORT $L35904

; 1659 :             {
; 1660 :                 RemoveDeferredCommand(pCmd);

  00120	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00123	52		 push	 edx
  00124	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	e8 00 00 00 00	 call	 ?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommand
$L35904:

; 1661 :             }
; 1662 : 
; 1663 :             //
; 1664 :             // Insert the command into the list in the order commands should be
; 1665 :             // processed.
; 1666 :             //
; 1667 : 
; 1668 :             for(pleNextEntry = m_lstDeferredCommandsHigh.Flink; pleNextEntry != &m_lstDeferredCommandsHigh; pleNextEntry = pleNextEntry->Flink)

  0012c	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0012f	8b 88 50 07 00
	00		 mov	 ecx, DWORD PTR [eax+1872]
  00135	89 4d fc	 mov	 DWORD PTR _pleNextEntry$[ebp], ecx
  00138	eb 08		 jmp	 SHORT $L35905
$L35906:
  0013a	8b 55 fc	 mov	 edx, DWORD PTR _pleNextEntry$[ebp]
  0013d	8b 02		 mov	 eax, DWORD PTR [edx]
  0013f	89 45 fc	 mov	 DWORD PTR _pleNextEntry$[ebp], eax
$L35905:
  00142	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	81 c1 50 07 00
	00		 add	 ecx, 1872		; 00000750H
  0014b	39 4d fc	 cmp	 DWORD PTR _pleNextEntry$[ebp], ecx
  0014e	74 43		 je	 SHORT $L35907

; 1669 :             {
; 1670 :                 AssertValidEntryList(pleNextEntry, ASSERT_IN_LIST);

  00150	68 86 06 00 00	 push	 1670			; 00000686H
  00155	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0015a	6a 01		 push	 1
  0015c	8b 55 fc	 mov	 edx, DWORD PTR _pleNextEntry$[ebp]
  0015f	52		 push	 edx
  00160	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1671 : 
; 1672 :                 if(CONTAINING_RECORD(pleNextEntry, MCPX_DEFERRED_COMMAND, leListEntry)->rtTimestamp > pCmd->rtTimestamp)

  00165	8b 45 fc	 mov	 eax, DWORD PTR _pleNextEntry$[ebp]
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0016b	89 45 d4	 mov	 DWORD PTR tv213[ebp], eax
  0016e	89 4d d0	 mov	 DWORD PTR tv214[ebp], ecx
  00171	8b 55 d4	 mov	 edx, DWORD PTR tv213[ebp]
  00174	8b 45 d0	 mov	 eax, DWORD PTR tv214[ebp]
  00177	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0017a	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  0017d	7c 12		 jl	 SHORT $L35912
  0017f	7f 0e		 jg	 SHORT $L36579
  00181	8b 55 d4	 mov	 edx, DWORD PTR tv213[ebp]
  00184	8b 45 d0	 mov	 eax, DWORD PTR tv214[ebp]
  00187	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0018a	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  0018d	76 02		 jbe	 SHORT $L35912
$L36579:

; 1673 :                 {
; 1674 :                     break;

  0018f	eb 02		 jmp	 SHORT $L35907
$L35912:

; 1675 :                 }
; 1676 :             }

  00191	eb a7		 jmp	 SHORT $L35906
$L35907:

; 1677 : 
; 1678 :             InsertTailList(pleNextEntry, &pCmd->leListEntry);

  00193	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00196	52		 push	 edx
  00197	8b 45 fc	 mov	 eax, DWORD PTR _pleNextEntry$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList

; 1679 : 
; 1680 :             //
; 1681 :             // If we just added the new item at the head of the list, set the timer
; 1682 :             //
; 1683 : 
; 1684 :             if(&pCmd->leListEntry == m_lstDeferredCommandsHigh.Flink)

  001a0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  001a6	3b 91 50 07 00
	00		 cmp	 edx, DWORD PTR [ecx+1872]
  001ac	75 24		 jne	 SHORT $L35903

; 1685 :             {
; 1686 :                 KeSetTimer(&m_tmrDeferredCommandsHigh, *(PLARGE_INTEGER)&pCmd->rtTimestamp, &m_dpcDeferredCommandsHigh);

  001ae	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001b1	05 b8 07 00 00	 add	 eax, 1976		; 000007b8H
  001b6	50		 push	 eax
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  001ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001bd	52		 push	 edx
  001be	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  001c1	50		 push	 eax
  001c2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	81 c1 90 07 00
	00		 add	 ecx, 1936		; 00000790H
  001cb	51		 push	 ecx
  001cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetTimer@16
$L35903:

; 1687 :             }
; 1688 :         }
; 1689 :     }
; 1690 :     else

  001d2	eb 07		 jmp	 SHORT $L35915
$L35900:

; 1691 :     {
; 1692 :         fScheduled = FALSE;

  001d4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _fScheduled$[ebp], 0
$L35915:

; 1693 :     }
; 1694 : 
; 1695 :     DPF_LEAVE(fScheduled);
; 1696 : 
; 1697 :     return fScheduled;

  001db	8b 45 ec	 mov	 eax, DWORD PTR _fScheduled$[ebp]

; 1698 : }

  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 04 00	 ret	 4
?ScheduleDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z ENDP ; DirectSound::CMcpxAPU::ScheduleDeferredCommandHigh
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailList, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 75		 push	 117			; 00000075H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 118  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 76		 push	 118			; 00000076H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 119  : 
; 120  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 121  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 122  :     
; 123  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 124  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 125  : 
; 126  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7e		 push	 126			; 0000007eH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 127  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ENDP		; InsertTailList
DSOUND	ENDS
PUBLIC	??_C@_0CO@DNFHHLKL@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@ ; `string'
PUBLIC	??_C@_0BD@FFPGBNNK@?$CBpCmd?9?$DOrtTimestamp?$AA@ ; `string'
;	COMDAT ??_C@_0CO@DNFHHLKL@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
DSOUND_RD	SEGMENT
??_C@_0CO@DNFHHLKL@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@ DB 'pCmd->d'
	DB	'wFlags & MCPX_DEFERREDCMDF_LOWPRIORITY', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFPGBNNK@?$CBpCmd?9?$DOrtTimestamp?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@FFPGBNNK@?$CBpCmd?9?$DOrtTimestamp?$AA@ DB '!pCmd->rtTimestamp', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ScheduleDeferredCommandLow@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT
tv85 = -16
tv133 = -12
_this$ = -8
_pCmd$ = 8
?ScheduleDeferredCommandLow@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z PROC NEAR ; DirectSound::CMcpxAPU::ScheduleDeferredCommandLow, COMDAT
; _this$ = ecx

; 1726 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1727 :     DWORD                   dwIndex;
; 1728 : 
; 1729 :     DPF_ENTER();
; 1730 : 
; 1731 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 c3 06 00 00	 push	 1731			; 000006c3H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1732 :     ASSERT(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY);

  00031	68 c4 06 00 00	 push	 1732			; 000006c4H
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@DNFHHLKL@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
  00040	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00043	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00046	83 e0 01	 and	 eax, 1
  00049	f7 d8		 neg	 eax
  0004b	1b c0		 sbb	 eax, eax
  0004d	40		 inc	 eax
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00054	83 c4 10	 add	 esp, 16			; 00000010H

; 1733 :     ASSERT(!pCmd->rtTimestamp);

  00057	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0005a	89 4d f4	 mov	 DWORD PTR tv133[ebp], ecx
  0005d	8b 55 f4	 mov	 edx, DWORD PTR tv133[ebp]
  00060	8b 45 f4	 mov	 eax, DWORD PTR tv133[ebp]
  00063	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00066	0b 48 1c	 or	 ecx, DWORD PTR [eax+28]
  00069	85 c9		 test	 ecx, ecx
  0006b	74 09		 je	 SHORT $L36586
  0006d	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  00074	eb 07		 jmp	 SHORT $L36587
$L36586:
  00076	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$L36587:
  0007d	68 c5 06 00 00	 push	 1733			; 000006c5H
  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@FFPGBNNK@?$CBpCmd?9?$DOrtTimestamp?$AA@
  0008c	8b 55 f0	 mov	 edx, DWORD PTR tv85[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00095	83 c4 10	 add	 esp, 16			; 00000010H

; 1734 : 
; 1735 :     //
; 1736 :     // If the command is already in the queue, we don't need to do 
; 1737 :     // anything.  Low-priority commands don't use a timestamp, so the
; 1738 :     // list order is meaningless and there are no timers to reset.
; 1739 :     //
; 1740 : 
; 1741 :     if(!(pCmd->dwFlags & MCPX_DEFERREDCMDF_SCHEDULED))

  00098	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  0009b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009e	83 e1 02	 and	 ecx, 2
  000a1	85 c9		 test	 ecx, ecx
  000a3	75 12		 jne	 SHORT $L35923

; 1742 :     {
; 1743 :         InsertTailList(&m_lstDeferredCommandsLow, &pCmd->leListEntry);

  000a5	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  000a8	52		 push	 edx
  000a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	05 58 07 00 00	 add	 eax, 1880		; 00000758H
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList
$L35923:

; 1744 :     }
; 1745 : 
; 1746 :     DPF_LEAVE(TRUE);
; 1747 : 
; 1748 :     return TRUE;

  000b7	b8 01 00 00 00	 mov	 eax, 1

; 1749 : }

  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
?ScheduleDeferredCommandLow@CMcpxAPU@DirectSound@@IAEHPAUMCPX_DEFERRED_COMMAND@@@Z ENDP ; DirectSound::CMcpxAPU::ScheduleDeferredCommandLow
DSOUND	ENDS
PUBLIC	?RemoveDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommandHigh
PUBLIC	?RemoveDeferredCommandLow@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommandLow
; Function compile flags: /Odt
;	COMDAT ?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT
_this$ = -12
___AutoIrql$ = -8
_pCmd$ = 8
?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z PROC NEAR ; DirectSound::CMcpxAPU::RemoveDeferredCommand, COMDAT
; _this$ = ecx

; 1775 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1776 :     DPF_ENTER();
; 1777 :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1778 : 
; 1779 :     if(pCmd->dwFlags & MCPX_DEFERREDCMDF_SCHEDULED)

  00011	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00014	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00017	83 e1 02	 and	 ecx, 2
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 27		 je	 SHORT $L35929

; 1780 :     {
; 1781 :         if(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY)

  0001e	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00021	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00024	83 e0 01	 and	 eax, 1
  00027	85 c0		 test	 eax, eax
  00029	74 0e		 je	 SHORT $L35930

; 1782 :         {
; 1783 :             RemoveDeferredCommandLow(pCmd);

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?RemoveDeferredCommandLow@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommandLow

; 1784 :         }
; 1785 :         else

  00037	eb 0c		 jmp	 SHORT $L35929
$L35930:

; 1786 :         {
; 1787 :             RemoveDeferredCommandHigh(pCmd);

  00039	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  0003c	52		 push	 edx
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?RemoveDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommandHigh
$L35929:

; 1788 :         }
; 1789 :     }
; 1790 : 
; 1791 :     pCmd->dwFlags &= ~MCPX_DEFERREDCMDF_SCHEDULED;

  00045	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00048	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004b	83 e1 fd	 and	 ecx, -3			; fffffffdH
  0004e	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00051	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1792 : 
; 1793 :     DPF_LEAVE_VOID();
; 1794 : }

  00054	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00057	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z ENDP ; DirectSound::CMcpxAPU::RemoveDeferredCommand
DSOUND	ENDS
PUBLIC	??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@ ; `string'
;	COMDAT ??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
DSOUND_RD	SEGMENT
??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@ DB 'pCmd->d'
	DB	'wFlags & MCPX_DEFERREDCMDF_SCHEDULED', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?RemoveDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT
_this$ = -8
_fListHead$ = -4
_pCmd$ = 8
?RemoveDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z PROC NEAR ; DirectSound::CMcpxAPU::RemoveDeferredCommandHigh, COMDAT
; _this$ = ecx

; 1820 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1821 :     BOOL                    fListHead;
; 1822 : 
; 1823 :     DPF_ENTER();
; 1824 : 
; 1825 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 21 07 00 00	 push	 1825			; 00000721H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1826 :     ASSERT(!(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY));

  00031	68 22 07 00 00	 push	 1826			; 00000722H
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@DKGCGKPN@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
  00040	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00043	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00046	83 e0 01	 and	 eax, 1
  00049	f7 d8		 neg	 eax
  0004b	1b c0		 sbb	 eax, eax
  0004d	f7 d8		 neg	 eax
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 1827 :     ASSERT(pCmd->dwFlags & MCPX_DEFERREDCMDF_SCHEDULED);

  00058	68 23 07 00 00	 push	 1827			; 00000723H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0006a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0006d	83 e2 02	 and	 edx, 2
  00070	f7 da		 neg	 edx
  00072	1b d2		 sbb	 edx, edx
  00074	42		 inc	 edx
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 1828 : 
; 1829 :     //
; 1830 :     // If this is the first command in the queue, we'll have some extra
; 1831 :     // processing to do.
; 1832 :     //
; 1833 : 
; 1834 :     fListHead = (&pCmd->leListEntry == m_lstDeferredCommandsHigh.Flink);

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  00084	2b 88 50 07 00
	00		 sub	 ecx, DWORD PTR [eax+1872]
  0008a	f7 d9		 neg	 ecx
  0008c	1b c9		 sbb	 ecx, ecx
  0008e	41		 inc	 ecx
  0008f	89 4d fc	 mov	 DWORD PTR _fListHead$[ebp], ecx

; 1835 : 
; 1836 :     //
; 1837 :     // Remove the command from the queue.  If we're in the middle of
; 1838 :     // processing the list, defer that to later.
; 1839 :     //
; 1840 : 
; 1841 :     RemoveEntryList(&pCmd->leListEntry);

  00092	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 1842 : 
; 1843 :     //
; 1844 :     // If that was the only item in the list, cancel the timer and remove
; 1845 :     // any pending DPCs.  If there's still items in the list, but we
; 1846 :     // removed the head, reset the timer.
; 1847 :     // 
; 1848 : 
; 1849 :     if(IsListEmpty(&m_lstDeferredCommandsHigh))

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	05 50 07 00 00	 add	 eax, 1872		; 00000750H
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	39 81 50 07 00
	00		 cmp	 DWORD PTR [ecx+1872], eax
  000ac	75 21		 jne	 SHORT $L35938

; 1850 :     {
; 1851 :         KeCancelTimer(&m_tmrDeferredCommandsHigh);

  000ae	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b1	81 c2 90 07 00
	00		 add	 edx, 1936		; 00000790H
  000b7	52		 push	 edx
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeCancelTimer@4

; 1852 :         KeRemoveQueueDpc(&m_dpcDeferredCommandsHigh);

  000be	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	05 b8 07 00 00	 add	 eax, 1976		; 000007b8H
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRemoveQueueDpc@4

; 1853 :     }
; 1854 :     else if(fListHead)

  000cd	eb 30		 jmp	 SHORT $L35935
$L35938:
  000cf	83 7d fc 00	 cmp	 DWORD PTR _fListHead$[ebp], 0
  000d3	74 2a		 je	 SHORT $L35935

; 1855 :     {
; 1856 :         KeSetTimer(&m_tmrDeferredCommandsHigh, *(PLARGE_INTEGER)&CONTAINING_RECORD(m_lstDeferredCommandsHigh.Flink, MCPX_DEFERRED_COMMAND, leListEntry)->rtTimestamp, &m_dpcDeferredCommandsHigh);

  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	81 c1 b8 07 00
	00		 add	 ecx, 1976		; 000007b8H
  000de	51		 push	 ecx
  000df	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	8b 82 50 07 00
	00		 mov	 eax, DWORD PTR [edx+1872]
  000e8	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000eb	51		 push	 ecx
  000ec	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  000ef	52		 push	 edx
  000f0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	05 90 07 00 00	 add	 eax, 1936		; 00000790H
  000f8	50		 push	 eax
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetTimer@16
$L35935:

; 1857 :     }
; 1858 : 
; 1859 :     DPF_LEAVE_VOID();
; 1860 : }

  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?RemoveDeferredCommandHigh@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z ENDP ; DirectSound::CMcpxAPU::RemoveDeferredCommandHigh
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?RemoveDeferredCommandLow@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z
DSOUND	SEGMENT
_this$ = -4
_pCmd$ = 8
?RemoveDeferredCommandLow@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z PROC NEAR ; DirectSound::CMcpxAPU::RemoveDeferredCommandLow, COMDAT
; _this$ = ecx

; 1886 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1887 :     DPF_ENTER();
; 1888 : 
; 1889 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00007	68 61 07 00 00	 push	 1889			; 00000761H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00016	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 f8 02	 cmp	 eax, 2
  00023	0f 95 c1	 setne	 cl
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 1890 :     ASSERT(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY);

  0002f	68 62 07 00 00	 push	 1890			; 00000762H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@DNFHHLKL@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
  0003e	8b 55 08	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00041	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00044	83 e0 01	 and	 eax, 1
  00047	f7 d8		 neg	 eax
  00049	1b c0		 sbb	 eax, eax
  0004b	40		 inc	 eax
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 1891 :     ASSERT(pCmd->dwFlags & MCPX_DEFERREDCMDF_SCHEDULED);

  00055	68 63 07 00 00	 push	 1891			; 00000763H
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  00067	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0006a	83 e2 02	 and	 edx, 2
  0006d	f7 da		 neg	 edx
  0006f	1b d2		 sbb	 edx, edx
  00071	42		 inc	 edx
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 1892 : 
; 1893 :     //
; 1894 :     // Remove the command from the queue
; 1895 :     //
; 1896 : 
; 1897 :     RemoveEntryList(&pCmd->leListEntry);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _pCmd$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 1898 : 
; 1899 :     DPF_LEAVE_VOID();
; 1900 : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?RemoveDeferredCommandLow@CMcpxAPU@DirectSound@@IAEXPAUMCPX_DEFERRED_COMMAND@@@Z ENDP ; DirectSound::CMcpxAPU::RemoveDeferredCommandLow
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?ServiceDeferredCommandsHigh@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
tv171 = -28
_this$ = -24
___AutoIrql$ = -20
_pCmd$ = -12
_rtCurrentTime$ = -8
?ServiceDeferredCommandsHigh@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::ServiceDeferredCommandsHigh, COMDAT
; _this$ = ecx

; 1926 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1927 :     LPMCPX_DEFERRED_COMMAND     pCmd;
; 1928 :     REFERENCE_TIME              rtCurrentTime;
; 1929 :     
; 1930 :     DPF_ENTER();
; 1931 :     AutoIrql();

  00009	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql
$L35958:

; 1932 : 
; 1933 :     while(!IsListEmpty(&m_lstDeferredCommandsHigh))

  00011	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00014	05 50 07 00 00	 add	 eax, 1872		; 00000750H
  00019	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	39 81 50 07 00
	00		 cmp	 DWORD PTR [ecx+1872], eax
  00022	0f 84 0e 01 00
	00		 je	 $L35959

; 1934 :     {
; 1935 :         pCmd = CONTAINING_RECORD(m_lstDeferredCommandsHigh.Flink, MCPX_DEFERRED_COMMAND, leListEntry);

  00028	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 82 50 07 00
	00		 mov	 eax, DWORD PTR [edx+1872]
  00031	89 45 f4	 mov	 DWORD PTR _pCmd$[ebp], eax

; 1936 : 
; 1937 :         ASSERT(!(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY));

  00034	68 91 07 00 00	 push	 1937			; 00000791H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@DKGCGKPN@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
  00043	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  00046	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00049	83 e2 01	 and	 edx, 1
  0004c	f7 da		 neg	 edx
  0004e	1b d2		 sbb	 edx, edx
  00050	f7 da		 neg	 edx
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00058	83 c4 10	 add	 esp, 16			; 00000010H

; 1938 :         ASSERT(pCmd->dwFlags & MCPX_DEFERREDCMDF_SCHEDULED);

  0005b	68 92 07 00 00	 push	 1938			; 00000792H
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
  0006a	8b 45 f4	 mov	 eax, DWORD PTR _pCmd$[ebp]
  0006d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00070	83 e1 02	 and	 ecx, 2
  00073	f7 d9		 neg	 ecx
  00075	1b c9		 sbb	 ecx, ecx
  00077	41		 inc	 ecx
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007e	83 c4 10	 add	 esp, 16			; 00000010H

; 1939 :         ASSERT(!(pCmd->dwFlags & MCPX_DEFERREDCMDF_PERSIST));

  00081	68 93 07 00 00	 push	 1939			; 00000793H
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@IJPABDMJ@?$CB?$CIpCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDC@
  00090	8b 55 f4	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00093	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00096	83 e0 04	 and	 eax, 4
  00099	f7 d8		 neg	 eax
  0009b	1b c0		 sbb	 eax, eax
  0009d	f7 d8		 neg	 eax
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a5	83 c4 10	 add	 esp, 16			; 00000010H

; 1940 : 
; 1941 :         //
; 1942 :         // Get the current system time
; 1943 :         //
; 1944 : 
; 1945 :         KeQuerySystemTime((PLARGE_INTEGER)&rtCurrentTime);

  000a8	8d 4d f8	 lea	 ecx, DWORD PTR _rtCurrentTime$[ebp]
  000ab	51		 push	 ecx
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 1946 : 
; 1947 :         //
; 1948 :         // If the first command in the list's timestamp has expired, go ahead 
; 1949 :         // and trigger it and remove it from the queue.  If not, reset the
; 1950 :         // timer and bail out.
; 1951 :         //
; 1952 : 
; 1953 :         if(pCmd->rtTimestamp <= rtCurrentTime)

  000b2	8b 55 f4	 mov	 edx, DWORD PTR _pCmd$[ebp]
  000b5	89 55 e4	 mov	 DWORD PTR tv171[ebp], edx
  000b8	8b 45 e4	 mov	 eax, DWORD PTR tv171[ebp]
  000bb	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000be	3b 4d fc	 cmp	 ecx, DWORD PTR _rtCurrentTime$[ebp+4]
  000c1	7f 48		 jg	 SHORT $L35965
  000c3	7c 0b		 jl	 SHORT $L36600
  000c5	8b 55 e4	 mov	 edx, DWORD PTR tv171[ebp]
  000c8	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000cb	3b 45 f8	 cmp	 eax, DWORD PTR _rtCurrentTime$[ebp]
  000ce	77 3b		 ja	 SHORT $L35965
$L36600:

; 1954 :         {
; 1955 :             pCmd->dwFlags &= ~MCPX_DEFERREDCMDF_SCHEDULED;

  000d0	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  000d3	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000d6	83 e2 fd	 and	 edx, -3			; fffffffdH
  000d9	8b 45 f4	 mov	 eax, DWORD PTR _pCmd$[ebp]
  000dc	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1956 : 
; 1957 :             RemoveEntryList(&pCmd->leListEntry);

  000df	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 1958 : 
; 1959 :             pCmd->pVoice->ServiceDeferredCommand(pCmd->dwCommand, pCmd->dwContext);

  000e8	8b 55 f4	 mov	 edx, DWORD PTR _pCmd$[ebp]
  000eb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ee	50		 push	 eax
  000ef	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  000f2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000f5	52		 push	 edx
  000f6	8b 45 f4	 mov	 eax, DWORD PTR _pCmd$[ebp]
  000f9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000fc	8b 55 f4	 mov	 edx, DWORD PTR _pCmd$[ebp]
  000ff	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00102	8b 11		 mov	 edx, DWORD PTR [ecx]
  00104	8b c8		 mov	 ecx, eax
  00106	ff 52 20	 call	 DWORD PTR [edx+32]

; 1960 :         }
; 1961 :         else

  00109	eb 26		 jmp	 SHORT $L35966
$L35965:

; 1962 :         {
; 1963 :             KeSetTimer(&m_tmrDeferredCommandsHigh, *(PLARGE_INTEGER)&pCmd->rtTimestamp, &m_dpcDeferredCommandsHigh);

  0010b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	05 b8 07 00 00	 add	 eax, 1976		; 000007b8H
  00113	50		 push	 eax
  00114	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  00117	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0011a	52		 push	 edx
  0011b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0011e	50		 push	 eax
  0011f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	81 c1 90 07 00
	00		 add	 ecx, 1936		; 00000790H
  00128	51		 push	 ecx
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetTimer@16

; 1964 :             break;

  0012f	eb 05		 jmp	 SHORT $L35959
$L35966:

; 1965 :         }
; 1966 :     }

  00131	e9 db fe ff ff	 jmp	 $L35958
$L35959:

; 1967 : 
; 1968 :     DPF_LEAVE_VOID();
; 1969 : }

  00136	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00139	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
?ServiceDeferredCommandsHigh@CMcpxAPU@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxAPU::ServiceDeferredCommandsHigh
DSOUND	ENDS
PUBLIC	??_C@_0BK@NIALBJMK@IsListEmpty?$CI?$CGlstCommands?$CJ?$AA@ ; `string'
PUBLIC	?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z	; MoveEntryTailList
PUBLIC	?ServiceDeferredCommandsLow@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceDeferredCommandsLow
;	COMDAT ??_C@_0BK@NIALBJMK@IsListEmpty?$CI?$CGlstCommands?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@NIALBJMK@IsListEmpty?$CI?$CGlstCommands?$CJ?$AA@ DB 'IsListEmpt'
	DB	'y(&lstCommands)', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ServiceDeferredCommandsLow@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -28
_pleEntry$ = -24
_lstCommands$ = -20
_pCmd$ = -12
_irql$ = -8
?ServiceDeferredCommandsLow@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::ServiceDeferredCommandsLow, COMDAT
; _this$ = ecx

; 1995 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1996 :     LIST_ENTRY              lstCommands;
; 1997 :     PLIST_ENTRY             pleEntry;
; 1998 :     LPMCPX_DEFERRED_COMMAND pCmd;
; 1999 :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 2000 :     
; 2001 :     DPF_ENTER();
; 2002 : 
; 2003 :     //
; 2004 :     // Create a local copy of the command list.  We're doing this so we
; 2005 :     // can safely walk the list without worrying about nodes being added
; 2006 :     // or removed.
; 2007 :     //
; 2008 : 
; 2009 :     InitializeListHead(&lstCommands);

  00011	8d 45 ec	 lea	 eax, DWORD PTR _lstCommands$[ebp]
  00014	89 45 f0	 mov	 DWORD PTR _lstCommands$[ebp+4], eax
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _lstCommands$[ebp+4]
  0001a	89 4d ec	 mov	 DWORD PTR _lstCommands$[ebp], ecx

; 2010 : 
; 2011 :     irql.Raise();

  0001d	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00020	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise
$L35977:

; 2012 :     
; 2013 :     while(!IsListEmpty(&m_lstDeferredCommandsLow))

  00025	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00028	81 c2 58 07 00
	00		 add	 edx, 1880		; 00000758H
  0002e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00031	39 90 58 07 00
	00		 cmp	 DWORD PTR [eax+1880], edx
  00037	74 15		 je	 SHORT $L35980

; 2014 :     {
; 2015 :         MoveEntryTailList(&lstCommands, m_lstDeferredCommandsLow.Flink);

  00039	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 91 58 07 00
	00		 mov	 edx, DWORD PTR [ecx+1880]
  00042	52		 push	 edx
  00043	8d 45 ec	 lea	 eax, DWORD PTR _lstCommands$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveEntryTailList

; 2016 :     }

  0004c	eb d7		 jmp	 SHORT $L35977
$L35980:

; 2017 : 
; 2018 :     //
; 2019 :     // Service all commands, removing them from the local list and adding
; 2020 :     // them back to the main list.
; 2021 :     //
; 2022 : 
; 2023 :     while((pleEntry = RemoveHeadList(&lstCommands)) != &lstCommands)

  0004e	8b 4d ec	 mov	 ecx, DWORD PTR _lstCommands$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList
  00057	89 45 e8	 mov	 DWORD PTR _pleEntry$[ebp], eax
  0005a	8b 55 e8	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  0005d	8d 45 ec	 lea	 eax, DWORD PTR _lstCommands$[ebp]
  00060	3b d0		 cmp	 edx, eax
  00062	0f 84 b6 00 00
	00		 je	 $L35981

; 2024 :     {
; 2025 :         pCmd = CONTAINING_RECORD(pleEntry, MCPX_DEFERRED_COMMAND, leListEntry);

  00068	8b 4d e8	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0006b	89 4d f4	 mov	 DWORD PTR _pCmd$[ebp], ecx

; 2026 : 
; 2027 :         ASSERT(pCmd->dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY);

  0006e	68 eb 07 00 00	 push	 2027			; 000007ebH
  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@DNFHHLKL@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00080	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00083	83 e0 01	 and	 eax, 1
  00086	f7 d8		 neg	 eax
  00088	1b c0		 sbb	 eax, eax
  0008a	40		 inc	 eax
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00091	83 c4 10	 add	 esp, 16			; 00000010H

; 2028 :         ASSERT(pCmd->dwFlags & MCPX_DEFERREDCMDF_SCHEDULED);

  00094	68 ec 07 00 00	 push	 2028			; 000007ecH
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@IJOFEJKE@pCmd?9?$DOdwFlags?5?$CG?5MCPX_DEFERREDCMD@
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  000a6	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a9	83 e2 02	 and	 edx, 2
  000ac	f7 da		 neg	 edx
  000ae	1b d2		 sbb	 edx, edx
  000b0	42		 inc	 edx
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b7	83 c4 10	 add	 esp, 16			; 00000010H

; 2029 : 
; 2030 :         if(pCmd->dwFlags & MCPX_DEFERREDCMDF_PERSIST)

  000ba	8b 45 f4	 mov	 eax, DWORD PTR _pCmd$[ebp]
  000bd	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c0	83 e1 04	 and	 ecx, 4
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 14		 je	 SHORT $L35986

; 2031 :         {
; 2032 :             InsertTailList(&m_lstDeferredCommandsLow, pleEntry);

  000c7	8b 55 e8	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  000ca	52		 push	 edx
  000cb	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	05 58 07 00 00	 add	 eax, 1880		; 00000758H
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList

; 2033 :         }
; 2034 :         else

  000d9	eb 0f		 jmp	 SHORT $L35987
$L35986:

; 2035 :         {
; 2036 :             pCmd->dwFlags &= ~MCPX_DEFERREDCMDF_SCHEDULED;

  000db	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  000de	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000e1	83 e2 fd	 and	 edx, -3			; fffffffdH
  000e4	8b 45 f4	 mov	 eax, DWORD PTR _pCmd$[ebp]
  000e7	89 50 08	 mov	 DWORD PTR [eax+8], edx
$L35987:

; 2037 :         }
; 2038 : 
; 2039 :         irql.Lower();

  000ea	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  000ed	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 2040 : 
; 2041 :         pCmd->pVoice->ServiceDeferredCommand(pCmd->dwCommand, pCmd->dwContext);

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  000f5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000f8	52		 push	 edx
  000f9	8b 45 f4	 mov	 eax, DWORD PTR _pCmd$[ebp]
  000fc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ff	51		 push	 ecx
  00100	8b 55 f4	 mov	 edx, DWORD PTR _pCmd$[ebp]
  00103	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00106	8b 4d f4	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  00109	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0010c	8b 10		 mov	 edx, DWORD PTR [eax]
  0010e	ff 52 20	 call	 DWORD PTR [edx+32]

; 2042 : 
; 2043 :         irql.Raise();

  00111	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00114	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 2044 :     }

  00119	e9 30 ff ff ff	 jmp	 $L35980
$L35981:

; 2045 : 
; 2046 :     ASSERT(IsListEmpty(&lstCommands));

  0011e	68 fe 07 00 00	 push	 2046			; 000007feH
  00123	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@NIALBJMK@IsListEmpty?$CI?$CGlstCommands?$CJ?$AA@
  0012d	8b 45 ec	 mov	 eax, DWORD PTR _lstCommands$[ebp]
  00130	8d 4d ec	 lea	 ecx, DWORD PTR _lstCommands$[ebp]
  00133	33 d2		 xor	 edx, edx
  00135	3b c1		 cmp	 eax, ecx
  00137	0f 95 c2	 setne	 dl
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00140	83 c4 10	 add	 esp, 16			; 00000010H

; 2047 : 
; 2048 :     irql.Lower();

  00143	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00146	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 2049 : 
; 2050 :     DPF_LEAVE_VOID();
; 2051 : }

  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c3		 ret	 0
?ServiceDeferredCommandsLow@CMcpxAPU@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxAPU::ServiceDeferredCommandsLow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z PROC NEAR ; MoveEntryTailList, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 ff 00 00 00	 push	 255			; 000000ffH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 256  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00018	68 00 01 00 00	 push	 256			; 00000100H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 00		 push	 0
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 257  : 
; 258  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 259  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 260  : 
; 261  :     Entry->Flink = ListHead;

  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0004e	89 11		 mov	 DWORD PTR [ecx], edx

; 262  :     Entry->Blink = ListHead->Blink;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00056	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00059	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 263  : 
; 264  :     Entry->Flink->Blink = Entry;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00064	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 265  :     Entry->Blink->Flink = Entry;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00070	89 11		 mov	 DWORD PTR [ecx], edx

; 266  : 
; 267  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00072	68 0b 01 00 00	 push	 267			; 0000010bH
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0007c	6a 01		 push	 1
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 268  : 
; 269  :     return Entry;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]

; 270  : }

  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ENDP	; MoveEntryTailList
DSOUND	ENDS
PUBLIC	??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ ; `string'
;	COMDAT ??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.cpp
DSOUND_RD	SEGMENT
??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ DB '('
	DB	'1) <= PIO_METHOD_QUEUE_CLEAR', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetHrtfHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -16
$T36610 = -12
___AutoIrql$ = -8
_dwHeadroom$ = 8
?SetHrtfHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z PROC NEAR ; DirectSound::CMcpxAPU::SetHrtfHeadroom, COMDAT
; _this$ = ecx

; 2077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2078 :     DPF_ENTER();
; 2079 :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2080 : 
; 2081 :     MCPX_CHECK_VOICE_FIFO(1);

  00011	68 21 08 00 00	 push	 2081			; 00000821H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00020	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00025	0f b6 c0	 movzx	 eax, al
  00028	33 c9		 xor	 ecx, ecx
  0002a	83 f8 02	 cmp	 eax, 2
  0002d	0f 95 c1	 setne	 cl
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	68 21 08 00 00	 push	 2081			; 00000821H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
$L35996:
  00052	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00057	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  0005d	c1 e8 02	 shr	 eax, 2
  00060	83 f8 01	 cmp	 eax, 1
  00063	73 02		 jae	 SHORT $L35997
  00065	eb eb		 jmp	 SHORT $L35996
$L35997:

; 2082 :     MCPX_VOICE_WRITE(SetHRTFHeadroom, MCPX_MAKE_REG_VALUE(dwHeadroom, NV1BA0_PIO_SET_HRTF_HEADROOM_AMOUNT));

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _dwHeadroom$[ebp]
  0006a	83 e1 07	 and	 ecx, 7
  0006d	ba 80 02 00 00	 mov	 edx, 640		; 00000280H
  00072	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 2083 : 
; 2084 :     DPF_LEAVE_HRESULT(DS_OK);
; 2085 : 
; 2086 :     return DS_OK;

  00078	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T36610[ebp], 0
  0007f	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T36610[ebp]

; 2087 : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
?SetHrtfHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z ENDP	; DirectSound::CMcpxAPU::SetHrtfHeadroom
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -16
$T36614 = -12
___AutoIrql$ = -8
_dwMixBin$ = 8
?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z PROC NEAR ; DirectSound::CMcpxAPU::SetMixBinHeadroom, COMDAT
; _this$ = ecx

; 2114 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2115 :     DPF_ENTER();
; 2116 :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2117 : 
; 2118 :     MCPX_CHECK_VOICE_FIFO(1);

  00011	68 46 08 00 00	 push	 2118			; 00000846H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00020	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00025	0f b6 c0	 movzx	 eax, al
  00028	33 c9		 xor	 ecx, ecx
  0002a	83 f8 02	 cmp	 eax, 2
  0002d	0f 95 c1	 setne	 cl
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	68 46 08 00 00	 push	 2118			; 00000846H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DGJLCGDH@c?3?2xbox?2private?2windows?2directx?2@
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GPPNHMML@?$CI1?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
$L36011:
  00052	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00057	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  0005d	c1 e8 02	 shr	 eax, 2
  00060	83 f8 01	 cmp	 eax, 1
  00063	73 02		 jae	 SHORT $L36012
  00065	eb eb		 jmp	 SHORT $L36011
$L36012:

; 2119 :     MCPX_VOICE_WRITE(SetSubMixHeadroom[dwMixBin], MCPX_MAKE_REG_VALUE(m_pSettings->m_abMixBinHeadroom[dwMixBin], NV1BA0_PIO_SET_SUBMIX_HEADROOM_AMOUNT));

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0006d	8b 45 08	 mov	 eax, DWORD PTR _dwMixBin$[ebp]
  00070	0f b6 4c 02 14	 movzx	 ecx, BYTE PTR [edx+eax+20]
  00075	83 e1 07	 and	 ecx, 7
  00078	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0007d	81 c2 00 00 82
	fe		 add	 edx, -25034752		; fe820000H
  00083	8b 45 08	 mov	 eax, DWORD PTR _dwMixBin$[ebp]
  00086	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 2120 : 
; 2121 :     DPF_LEAVE_HRESULT(DS_OK);
; 2122 : 
; 2123 :     return DS_OK;

  00089	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T36614[ebp], 0
  00090	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00093	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00098	8b 45 f4	 mov	 eax, DWORD PTR $T36614[ebp]

; 2124 : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z ENDP	; DirectSound::CMcpxAPU::SetMixBinHeadroom
DSOUND	ENDS
PUBLIC	?SetSpeakerConfig@CMcpxAPU@DirectSound@@QAEJXZ	; DirectSound::CMcpxAPU::SetSpeakerConfig
; Function compile flags: /Odt
;	COMDAT ?SetSpeakerConfig@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT
tv141 = -61
_this$ = -60
_hr$ = -56
_Crosstalk$ = -52
?SetSpeakerConfig@CMcpxAPU@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxAPU::SetSpeakerConfig, COMDAT
; _this$ = ecx

; 2152 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 2153 :     HRESULT                 hr          = DS_OK;

  00009	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2154 :     DSFX_CROSSTALK_STATE    Crosstalk;
; 2155 :     
; 2156 :     DPF_ENTER();
; 2157 : 
; 2158 :     //
; 2159 :     // If the headphone bit is set, disable the crosstalk effect
; 2160 :     //
; 2161 : 
; 2162 :     if(DSFX_IMAGELOC_UNUSED != m_pSettings->m_EffectLocations.dwCrosstalkIndex)

  00010	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00016	83 79 10 ff	 cmp	 DWORD PTR [ecx+16], -1
  0001a	74 69		 je	 SHORT $L36027

; 2163 :     {
; 2164 :         hr = GetEffectData(m_pSettings->m_EffectLocations.dwCrosstalkIndex, 0, &Crosstalk, sizeof(Crosstalk));

  0001c	6a 34		 push	 52			; 00000034H
  0001e	8d 55 cc	 lea	 edx, DWORD PTR _Crosstalk$[ebp]
  00021	52		 push	 edx
  00022	6a 00		 push	 0
  00024	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002d	52		 push	 edx
  0002e	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxAPU::GetEffectData
  00036	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 2165 : 
; 2166 :         if(SUCCEEDED(hr))

  00039	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003d	7c 46		 jl	 SHORT $L36027

; 2167 :         {
; 2168 :             if(m_pSettings->m_dwSpeakerConfig & DSSPEAKER_ENABLE_HEADPHONES)

  0003f	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00045	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00048	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  0004e	85 d2		 test	 edx, edx
  00050	74 0b		 je	 SHORT $L36030

; 2169 :             {
; 2170 :                 Crosstalk.dwFlags &= ~DSFX_STATE_GLOBAL;

  00052	8b 45 dc	 mov	 eax, DWORD PTR _Crosstalk$[ebp+16]
  00055	83 e0 fd	 and	 eax, -3			; fffffffdH
  00058	89 45 dc	 mov	 DWORD PTR _Crosstalk$[ebp+16], eax

; 2171 :             }
; 2172 :             else

  0005b	eb 09		 jmp	 SHORT $L36031
$L36030:

; 2173 :             {
; 2174 :                 Crosstalk.dwFlags |= DSFX_STATE_GLOBAL;

  0005d	8b 4d dc	 mov	 ecx, DWORD PTR _Crosstalk$[ebp+16]
  00060	83 c9 02	 or	 ecx, 2
  00063	89 4d dc	 mov	 DWORD PTR _Crosstalk$[ebp+16], ecx
$L36031:

; 2175 :             }
; 2176 : 
; 2177 :             hr = SetEffectData(m_pSettings->m_EffectLocations.dwCrosstalkIndex, 0, &Crosstalk, sizeof(Crosstalk), DSFX_IMMEDIATE);

  00066	6a 00		 push	 0
  00068	6a 34		 push	 52			; 00000034H
  0006a	8d 55 cc	 lea	 edx, DWORD PTR _Crosstalk$[ebp]
  0006d	52		 push	 edx
  0006e	6a 00		 push	 0
  00070	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	52		 push	 edx
  0007a	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxAPU::SetEffectData
  00082	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L36027:

; 2178 :         }
; 2179 :     }
; 2180 : 
; 2181 :     //
; 2182 :     // Update the 3D listener's surround flag.  We're relying on te caller
; 2183 :     // to trigger the recalc of the listener and all 3D sources.
; 2184 :     //
; 2185 : 
; 2186 :     if(SUCCEEDED(hr))

  00085	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	7c 5a		 jl	 SHORT $L36033

; 2187 :     {
; 2188 :         if(DSSPEAKER_IS_HEADPHONES(m_pSettings->m_dwSpeakerConfig))

  0008b	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00091	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00094	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  0009a	85 d2		 test	 edx, edx
  0009c	74 0c		 je	 SHORT $L36034

; 2189 :         {
; 2190 :             m_fSurround = FALSE;

  0009e	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	c6 80 d0 00 00
	00 00		 mov	 BYTE PTR [eax+208], 0

; 2191 :         }
; 2192 :         else

  000a8	eb 3b		 jmp	 SHORT $L36033
$L36034:

; 2193 :         {
; 2194 :             m_fSurround = DSSPEAKER_IS_SURROUND(m_pSettings->m_dwSpeakerConfig);

  000aa	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000b0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b3	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000b8	83 f8 02	 cmp	 eax, 2
  000bb	74 18		 je	 SHORT $L36618
  000bd	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000c3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000c6	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  000cb	85 c0		 test	 eax, eax
  000cd	75 06		 jne	 SHORT $L36618
  000cf	c6 45 c3 00	 mov	 BYTE PTR tv141[ebp], 0
  000d3	eb 04		 jmp	 SHORT $L36619
$L36618:
  000d5	c6 45 c3 01	 mov	 BYTE PTR tv141[ebp], 1
$L36619:
  000d9	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	8a 55 c3	 mov	 dl, BYTE PTR tv141[ebp]
  000df	88 91 d0 00 00
	00		 mov	 BYTE PTR [ecx+208], dl
$L36033:

; 2195 :         }
; 2196 :     }
; 2197 : 
; 2198 :     DPF_LEAVE_HRESULT(DS_OK);
; 2199 : 
; 2200 :     return DS_OK;

  000e5	33 c0		 xor	 eax, eax

; 2201 : }

  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
?SetSpeakerConfig@CMcpxAPU@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxAPU::SetSpeakerConfig
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_ECMcpxAPU@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECMcpxAPU@DirectSound@@W7AEPAXI@Z PROC NEAR		; DirectSound::CMcpxAPU::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECMcpxAPU@DirectSound@@UAEPAXI@Z
??_ECMcpxAPU@DirectSound@@W7AEPAXI@Z ENDP		; DirectSound::CMcpxAPU::`vector deleting destructor'
_TEXT	ENDS
END
