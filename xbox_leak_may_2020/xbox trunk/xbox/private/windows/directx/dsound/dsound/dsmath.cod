; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\dsmath.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MGMMBIGB@floating?5point?5error?3?5NAN?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FJOEFNLK@floating?5point?5error?3?5NINF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGDEHEFJ@floating?5point?5error?3?5PINF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07GEGFOIDG@flRatio?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@CFGPHFE@Matrix?5must?5be?516?9byte?5aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MagnitudeVector3@Math@DirectSound@@YGNNNN@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MagnitudeVector3@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MagnitudeVector2@Math@DirectSound@@YGNNN@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MagnitudeVector2@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeDouble@Math@DirectSound@@YGNN@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeFloat@Math@DirectSound@@YGMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeVector3@Math@DirectSound@@YGNPAU_D3DVECTOR@@NNN@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeVector2@Math@DirectSound@@YGNPAU_D3DVECTOR@@NN@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RatioToPitch@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?sincosf@@YGXMPAM0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MatrixRotationAxis@Math@DirectSound@@YGPAU_D3DMATRIX@@PAU3@PBU_D3DVECTOR@@M@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Vec3Transform@Math@DirectSound@@YGPAU_VECTOR4@@PAU3@PBU_D3DVECTOR@@PBU_D3DMATRIX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	?NormalizeDouble@Math@DirectSound@@YGNN@Z	; DirectSound::Math::NormalizeDouble
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BK@MGMMBIGB@floating?5point?5error?3?5NAN?$AA@ ; `string'
PUBLIC	??_C@_0BL@FJOEFNLK@floating?5point?5error?3?5NINF?$AA@ ; `string'
PUBLIC	??_C@_0BL@IGDEHEFJ@floating?5point?5error?3?5PINF?$AA@ ; `string'
EXTRN	__fltused:NEAR
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	__fpclass:NEAR
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.cpp
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\dsmath.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MGMMBIGB@floating?5point?5error?3?5NAN?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@MGMMBIGB@floating?5point?5error?3?5NAN?$AA@ DB 'floating point '
	DB	'error: NAN', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FJOEFNLK@floating?5point?5error?3?5NINF?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@FJOEFNLK@floating?5point?5error?3?5NINF?$AA@ DB 'floating point'
	DB	' error: NINF', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGDEHEFJ@floating?5point?5error?3?5PINF?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@IGDEHEFJ@floating?5point?5error?3?5PINF?$AA@ DB 'floating point'
	DB	' error: PINF', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?NormalizeDouble@Math@DirectSound@@YGNN@Z
DSOUND	SEGMENT
_nClass$ = -4
_f$ = 8
?NormalizeDouble@Math@DirectSound@@YGNN@Z PROC NEAR	; DirectSound::Math::NormalizeDouble, COMDAT

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 23   :     int                     nClass  = _fpclass(f);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _f$[ebp+4]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _f$[ebp]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 __fpclass
  00011	83 c4 08	 add	 esp, 8
  00014	89 45 fc	 mov	 DWORD PTR _nClass$[ebp], eax

; 24   :     
; 25   :     if(nClass & (_FPCLASS_SNAN | _FPCLASS_QNAN))

  00017	8b 55 fc	 mov	 edx, DWORD PTR _nClass$[ebp]
  0001a	83 e2 03	 and	 edx, 3
  0001d	85 d2		 test	 edx, edx
  0001f	74 3a		 je	 SHORT $L35555

; 26   :     {
; 27   :         DPF_ERROR("floating point error: NAN");

  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00026	6a 00		 push	 0
  00028	6a 1b		 push	 27			; 0000001bH
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  0002f	6a 01		 push	 1
  00031	6a 09		 push	 9
  00033	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MGMMBIGB@floating?5point?5error?3?5NAN?$AA@
  00040	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00045	83 c4 04	 add	 esp, 4

; 28   :         f = 0.0f;

  00048	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _f$[ebp], 0
  0004f	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _f$[ebp+4], 0

; 29   :     }
; 30   :     else if(nClass & _FPCLASS_NINF)

  00056	e9 83 00 00 00	 jmp	 $L35558
$L35555:
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _nClass$[ebp]
  0005e	83 e0 04	 and	 eax, 4
  00061	85 c0		 test	 eax, eax
  00063	74 37		 je	 SHORT $L35559

; 31   :     {
; 32   :         DPF_ERROR("floating point error: NINF");

  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0006a	6a 00		 push	 0
  0006c	6a 20		 push	 32			; 00000020H
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  00073	6a 01		 push	 1
  00075	6a 09		 push	 9
  00077	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0007c	83 c4 18	 add	 esp, 24			; 00000018H
  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@FJOEFNLK@floating?5point?5error?3?5NINF?$AA@
  00084	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00089	83 c4 04	 add	 esp, 4

; 33   :         f = -DBL_MAX;

  0008c	c7 45 08 ff ff
	ff ff		 mov	 DWORD PTR _f$[ebp], -1
  00093	c7 45 0c ff ff
	ef ff		 mov	 DWORD PTR _f$[ebp+4], -1048577 ; ffefffffH

; 34   :     }
; 35   :     else if(nClass & _FPCLASS_PINF)

  0009a	eb 42		 jmp	 SHORT $L35558
$L35559:
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _nClass$[ebp]
  0009f	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000a5	85 c9		 test	 ecx, ecx
  000a7	74 35		 je	 SHORT $L35558

; 36   :     {
; 37   :         DPF_ERROR("floating point error: PINF");

  000a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ae	6a 00		 push	 0
  000b0	6a 25		 push	 37			; 00000025H
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000b7	6a 01		 push	 1
  000b9	6a 09		 push	 9
  000bb	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c0	83 c4 18	 add	 esp, 24			; 00000018H
  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@IGDEHEFJ@floating?5point?5error?3?5PINF?$AA@
  000c8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000cd	83 c4 04	 add	 esp, 4

; 38   :         f = DBL_MAX;

  000d0	c7 45 08 ff ff
	ff ff		 mov	 DWORD PTR _f$[ebp], -1
  000d7	c7 45 0c ff ff
	ef 7f		 mov	 DWORD PTR _f$[ebp+4], 2146435071 ; 7fefffffH
$L35558:

; 39   :     }
; 40   : 
; 41   :     return f;

  000de	dd 45 08	 fld	 QWORD PTR _f$[ebp]

; 42   : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
?NormalizeDouble@Math@DirectSound@@YGNN@Z ENDP		; DirectSound::Math::NormalizeDouble
DSOUND	ENDS
PUBLIC	?NormalizeFloat@Math@DirectSound@@YGMM@Z	; DirectSound::Math::NormalizeFloat
; Function compile flags: /Odt
;	COMDAT ?NormalizeFloat@Math@DirectSound@@YGMM@Z
DSOUND	SEGMENT
_nClass$ = -4
_f$ = 8
?NormalizeFloat@Math@DirectSound@@YGMM@Z PROC NEAR	; DirectSound::Math::NormalizeFloat, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 51   :     int                     nClass  = _fpclass(f);

  00004	d9 45 08	 fld	 DWORD PTR _f$[ebp]
  00007	83 ec 08	 sub	 esp, 8
  0000a	dd 1c 24	 fstp	 QWORD PTR [esp]
  0000d	e8 00 00 00 00	 call	 __fpclass
  00012	83 c4 08	 add	 esp, 8
  00015	89 45 fc	 mov	 DWORD PTR _nClass$[ebp], eax

; 52   :     
; 53   :     if(nClass & (_FPCLASS_SNAN | _FPCLASS_QNAN))

  00018	8b 45 fc	 mov	 eax, DWORD PTR _nClass$[ebp]
  0001b	83 e0 03	 and	 eax, 3
  0001e	85 c0		 test	 eax, eax
  00020	74 30		 je	 SHORT $L35568

; 54   :     {
; 55   :         DPF_ERROR("floating point error: NAN");

  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00027	6a 00		 push	 0
  00029	6a 37		 push	 55			; 00000037H
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  00030	6a 01		 push	 1
  00032	6a 09		 push	 9
  00034	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00039	83 c4 18	 add	 esp, 24			; 00000018H
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MGMMBIGB@floating?5point?5error?3?5NAN?$AA@
  00041	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00046	83 c4 04	 add	 esp, 4

; 56   :         f = 0.0f;

  00049	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _f$[ebp], 0

; 57   :     }
; 58   :     else if(nClass & _FPCLASS_NINF)

  00050	eb 75		 jmp	 SHORT $L35569
$L35568:
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _nClass$[ebp]
  00055	83 e1 04	 and	 ecx, 4
  00058	85 c9		 test	 ecx, ecx
  0005a	74 30		 je	 SHORT $L35570

; 59   :     {
; 60   :         DPF_ERROR("floating point error: NINF");

  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00061	6a 00		 push	 0
  00063	6a 3c		 push	 60			; 0000003cH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  0006a	6a 01		 push	 1
  0006c	6a 09		 push	 9
  0006e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@FJOEFNLK@floating?5point?5error?3?5NINF?$AA@
  0007b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00080	83 c4 04	 add	 esp, 4

; 61   :         f = -FLT_MAX;

  00083	c7 45 08 ff ff
	7f ff		 mov	 DWORD PTR _f$[ebp], -8388609 ; ff7fffffH

; 62   :     }
; 63   :     else if(nClass & _FPCLASS_PINF)

  0008a	eb 3b		 jmp	 SHORT $L35569
$L35570:
  0008c	8b 55 fc	 mov	 edx, DWORD PTR _nClass$[ebp]
  0008f	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  00095	85 d2		 test	 edx, edx
  00097	74 2e		 je	 SHORT $L35569

; 64   :     {
; 65   :         DPF_ERROR("floating point error: PINF");

  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0009e	6a 00		 push	 0
  000a0	6a 41		 push	 65			; 00000041H
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000a7	6a 01		 push	 1
  000a9	6a 09		 push	 9
  000ab	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000b0	83 c4 18	 add	 esp, 24			; 00000018H
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@IGDEHEFJ@floating?5point?5error?3?5PINF?$AA@
  000b8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000bd	83 c4 04	 add	 esp, 4

; 66   :         f = FLT_MAX;

  000c0	c7 45 08 ff ff
	7f 7f		 mov	 DWORD PTR _f$[ebp], 2139095039 ; 7f7fffffH
$L35569:

; 67   :     }
; 68   : 
; 69   :     return f;

  000c7	d9 45 08	 fld	 DWORD PTR _f$[ebp]

; 70   : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?NormalizeFloat@Math@DirectSound@@YGMM@Z ENDP		; DirectSound::Math::NormalizeFloat
DSOUND	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@47efffffe0000000
PUBLIC	?NormalizeVector3@Math@DirectSound@@YGNPAU_D3DVECTOR@@NNN@Z ; DirectSound::Math::NormalizeVector3
PUBLIC	?MagnitudeVector3@Math@DirectSound@@YGNNNN@Z	; DirectSound::Math::MagnitudeVector3
PUBLIC	??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@	; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@47efffffe0000000
CONST	SEGMENT
__real@47efffffe0000000 DQ 047efffffe0000000r	; 3.40282e+038
CONST	ENDS
;	COMDAT ??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@ DB 'magnitude > 0.0f', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?NormalizeVector3@Math@DirectSound@@YGNPAU_D3DVECTOR@@NNN@Z
DSOUND	SEGMENT
tv85 = -12
_magnitude$ = -8
_pdst$ = 8
_x$ = 12
_y$ = 20
_z$ = 28
?NormalizeVector3@Math@DirectSound@@YGNPAU_D3DVECTOR@@NNN@Z PROC NEAR ; DirectSound::Math::NormalizeVector3, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 82   :     double                  magnitude;
; 83   : 
; 84   :     if(!x && !y && !z)

  00006	dd 45 0c	 fld	 QWORD PTR _x$[ebp]
  00009	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0000f	df e0		 fnstsw	 ax
  00011	f6 c4 44	 test	 ah, 68			; 00000044H
  00014	7a 48		 jp	 SHORT $L35580
  00016	dd 45 14	 fld	 QWORD PTR _y$[ebp]
  00019	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0001f	df e0		 fnstsw	 ax
  00021	f6 c4 44	 test	 ah, 68			; 00000044H
  00024	7a 38		 jp	 SHORT $L35580
  00026	dd 45 1c	 fld	 QWORD PTR _z$[ebp]
  00029	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 44	 test	 ah, 68			; 00000044H
  00034	7a 28		 jp	 SHORT $L35580

; 85   :     {
; 86   :         pdst->x = 0.0f;

  00036	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 87   :         pdst->y = 0.0f;

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00042	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 88   :         pdst->z = 0.0f;

  00049	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  0004c	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 89   : 
; 90   :         return 0.0f;

  00053	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@0000000000000000
  00059	e9 d3 00 00 00	 jmp	 $L35578
$L35580:

; 91   :     }
; 92   :     else if((FLT_MAX == x) || (FLT_MAX == y) || (FLT_MAX == z))

  0005e	81 7d 0c 00 00
	00 e0		 cmp	 DWORD PTR _x$[ebp], -536870912 ; e0000000H
  00065	75 09		 jne	 SHORT $L35991
  00067	81 7d 10 ff ff
	ef 47		 cmp	 DWORD PTR _x$[ebp+4], 1206910975 ; 47efffffH
  0006e	74 24		 je	 SHORT $L35583
$L35991:
  00070	81 7d 14 00 00
	00 e0		 cmp	 DWORD PTR _y$[ebp], -536870912 ; e0000000H
  00077	75 09		 jne	 SHORT $L35992
  00079	81 7d 18 ff ff
	ef 47		 cmp	 DWORD PTR _y$[ebp+4], 1206910975 ; 47efffffH
  00080	74 12		 je	 SHORT $L35583
$L35992:
  00082	81 7d 1c 00 00
	00 e0		 cmp	 DWORD PTR _z$[ebp], -536870912 ; e0000000H
  00089	75 2b		 jne	 SHORT $L35581
  0008b	81 7d 20 ff ff
	ef 47		 cmp	 DWORD PTR _z$[ebp+4], 1206910975 ; 47efffffH
  00092	75 22		 jne	 SHORT $L35581
$L35583:

; 93   :     {
; 94   :         pdst->x = (float)x;

  00094	dd 45 0c	 fld	 QWORD PTR _x$[ebp]
  00097	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  0009a	d9 18		 fstp	 DWORD PTR [eax]

; 95   :         pdst->y = (float)y;

  0009c	dd 45 14	 fld	 QWORD PTR _y$[ebp]
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  000a2	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 96   :         pdst->z = (float)z;

  000a5	dd 45 1c	 fld	 QWORD PTR _z$[ebp]
  000a8	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  000ab	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 97   : 
; 98   :         return FLT_MAX;

  000ae	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@47efffffe0000000
  000b4	eb 7b		 jmp	 SHORT $L35578
$L35581:

; 99   :     }
; 100  : 
; 101  :     magnitude = MagnitudeVector3(x, y, z);

  000b6	8b 45 20	 mov	 eax, DWORD PTR _z$[ebp+4]
  000b9	50		 push	 eax
  000ba	8b 4d 1c	 mov	 ecx, DWORD PTR _z$[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 18	 mov	 edx, DWORD PTR _y$[ebp+4]
  000c1	52		 push	 edx
  000c2	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp+4]
  000c9	51		 push	 ecx
  000ca	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 ?MagnitudeVector3@Math@DirectSound@@YGNNNN@Z ; DirectSound::Math::MagnitudeVector3
  000d3	dd 55 f8	 fst	 QWORD PTR _magnitude$[ebp]

; 102  :     ASSERT(magnitude > 0.0f);

  000d6	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  000dc	df e0		 fnstsw	 ax
  000de	f6 c4 41	 test	 ah, 65			; 00000041H
  000e1	74 09		 je	 SHORT $L35989
  000e3	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  000ea	eb 07		 jmp	 SHORT $L35990
$L35989:
  000ec	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$L35990:
  000f3	6a 66		 push	 102			; 00000066H
  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
  000ff	8b 45 f4	 mov	 eax, DWORD PTR tv85[ebp]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00108	83 c4 10	 add	 esp, 16			; 00000010H

; 103  : 
; 104  :     pdst->x = (float)(x / magnitude);

  0010b	dd 45 0c	 fld	 QWORD PTR _x$[ebp]
  0010e	dc 75 f8	 fdiv	 QWORD PTR _magnitude$[ebp]
  00111	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00114	d9 19		 fstp	 DWORD PTR [ecx]

; 105  :     pdst->y = (float)(y / magnitude);

  00116	dd 45 14	 fld	 QWORD PTR _y$[ebp]
  00119	dc 75 f8	 fdiv	 QWORD PTR _magnitude$[ebp]
  0011c	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  0011f	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 106  :     pdst->z = (float)(z / magnitude);

  00122	dd 45 1c	 fld	 QWORD PTR _z$[ebp]
  00125	dc 75 f8	 fdiv	 QWORD PTR _magnitude$[ebp]
  00128	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  0012b	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 107  : 
; 108  :     return magnitude;

  0012e	dd 45 f8	 fld	 QWORD PTR _magnitude$[ebp]
$L35578:

; 109  : }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 1c 00	 ret	 28			; 0000001cH
?NormalizeVector3@Math@DirectSound@@YGNPAU_D3DVECTOR@@NNN@Z ENDP ; DirectSound::Math::NormalizeVector3
DSOUND	ENDS
EXTRN	_sqrt:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.h
;	COMDAT ?MagnitudeVector3@Math@DirectSound@@YGNNNN@Z
DSOUND	SEGMENT
_x$ = 8
_y$ = 16
_z$ = 24
?MagnitudeVector3@Math@DirectSound@@YGNNNN@Z PROC NEAR	; DirectSound::Math::MagnitudeVector3, COMDAT

; 78   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   :             return sqrt((x * x) + (y * y) + (z * z));

  00003	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00006	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00009	dd 45 10	 fld	 QWORD PTR _y$[ebp]
  0000c	dc 4d 10	 fmul	 QWORD PTR _y$[ebp]
  0000f	de c1		 faddp	 ST(1), ST(0)
  00011	dd 45 18	 fld	 QWORD PTR _z$[ebp]
  00014	dc 4d 18	 fmul	 QWORD PTR _z$[ebp]
  00017	de c1		 faddp	 ST(1), ST(0)
  00019	83 ec 08	 sub	 esp, 8
  0001c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001f	e8 00 00 00 00	 call	 _sqrt
  00024	83 c4 08	 add	 esp, 8

; 80   :         }

  00027	5d		 pop	 ebp
  00028	c2 18 00	 ret	 24			; 00000018H
?MagnitudeVector3@Math@DirectSound@@YGNNNN@Z ENDP	; DirectSound::Math::MagnitudeVector3
DSOUND	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@7f7fffff
PUBLIC	?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z ; DirectSound::Math::NormalizeVector3
PUBLIC	?MagnitudeVector3@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ; DirectSound::Math::MagnitudeVector3
;	COMDAT __real@00000000
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z
DSOUND	SEGMENT
tv86 = -8
_magnitude$ = -4
_pdst$ = 8
_psrc$ = 12
?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z PROC NEAR ; DirectSound::Math::NormalizeVector3, COMDAT

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 119  :     float                   magnitude;
; 120  : 
; 121  :     if(!psrc->x && !psrc->y && !psrc->z)

  00006	8b 45 0c	 mov	 eax, DWORD PTR _psrc$[ebp]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00011	df e0		 fnstsw	 ax
  00013	f6 c4 44	 test	 ah, 68			; 00000044H
  00016	7a 4e		 jp	 SHORT $L35596
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  0001b	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0001e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00024	df e0		 fnstsw	 ax
  00026	f6 c4 44	 test	 ah, 68			; 00000044H
  00029	7a 3b		 jp	 SHORT $L35596
  0002b	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  0002e	d9 42 08	 fld	 DWORD PTR [edx+8]
  00031	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00037	df e0		 fnstsw	 ax
  00039	f6 c4 44	 test	 ah, 68			; 00000044H
  0003c	7a 28		 jp	 SHORT $L35596

; 122  :     {
; 123  :         pdst->x = 0.0f;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00041	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 124  :         pdst->y = 0.0f;

  00047	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  0004a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 125  :         pdst->z = 0.0f;

  00051	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  00054	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 126  : 
; 127  :         return 0.0f;

  0005b	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00061	e9 d4 00 00 00	 jmp	 $L35594
$L35596:

; 128  :     }
; 129  :     else if((FLT_MAX == psrc->x) || (FLT_MAX == psrc->y) || (FLT_MAX == psrc->z))

  00066	8b 45 0c	 mov	 eax, DWORD PTR _psrc$[ebp]
  00069	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  0006f	d8 18		 fcomp	 DWORD PTR [eax]
  00071	df e0		 fnstsw	 ax
  00073	f6 c4 44	 test	 ah, 68			; 00000044H
  00076	7b 26		 jnp	 SHORT $L35599
  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  0007b	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00081	d8 59 04	 fcomp	 DWORD PTR [ecx+4]
  00084	df e0		 fnstsw	 ax
  00086	f6 c4 44	 test	 ah, 68			; 00000044H
  00089	7b 13		 jnp	 SHORT $L35599
  0008b	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  0008e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00094	d8 5a 08	 fcomp	 DWORD PTR [edx+8]
  00097	df e0		 fnstsw	 ax
  00099	f6 c4 44	 test	 ah, 68			; 00000044H
  0009c	7a 2a		 jp	 SHORT $L35597
$L35599:

; 130  :     {
; 131  :         pdst->x = psrc->x;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  000a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a6	89 10		 mov	 DWORD PTR [eax], edx

; 132  :         pdst->y = psrc->y;

  000a8	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  000ae	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b1	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 133  :         pdst->z = psrc->z;

  000b4	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  000ba	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000bd	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 134  : 
; 135  :         return FLT_MAX;

  000c0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  000c6	eb 72		 jmp	 SHORT $L35594
$L35597:

; 136  :     }
; 137  : 
; 138  :     magnitude = MagnitudeVector3(psrc);

  000c8	8b 45 0c	 mov	 eax, DWORD PTR _psrc$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?MagnitudeVector3@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ; DirectSound::Math::MagnitudeVector3
  000d1	d9 55 fc	 fst	 DWORD PTR _magnitude$[ebp]

; 139  :     ASSERT(magnitude > 0.0f);

  000d4	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000da	df e0		 fnstsw	 ax
  000dc	f6 c4 41	 test	 ah, 65			; 00000041H
  000df	74 09		 je	 SHORT $L36003
  000e1	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  000e8	eb 07		 jmp	 SHORT $L36004
$L36003:
  000ea	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$L36004:
  000f1	68 8b 00 00 00	 push	 139			; 0000008bH
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
  00100	8b 4d f8	 mov	 ecx, DWORD PTR tv86[ebp]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00109	83 c4 10	 add	 esp, 16			; 00000010H

; 140  : 
; 141  :     pdst->x = psrc->x / magnitude;

  0010c	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  0010f	d9 02		 fld	 DWORD PTR [edx]
  00111	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  00114	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00117	d9 18		 fstp	 DWORD PTR [eax]

; 142  :     pdst->y = psrc->y / magnitude;

  00119	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  0011c	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0011f	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  00122	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  00125	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 143  :     pdst->z = psrc->z / magnitude;

  00128	8b 45 0c	 mov	 eax, DWORD PTR _psrc$[ebp]
  0012b	d9 40 08	 fld	 DWORD PTR [eax+8]
  0012e	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00134	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 144  : 
; 145  :     return magnitude;

  00137	d9 45 fc	 fld	 DWORD PTR _magnitude$[ebp]
$L35594:

; 146  : }

  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 08 00	 ret	 8
?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z ENDP ; DirectSound::Math::NormalizeVector3
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.h
DSOUND	ENDS
;	COMDAT ?MagnitudeVector3@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z
DSOUND	SEGMENT
tv92 = -4
_p$ = 8
?MagnitudeVector3@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z PROC NEAR ; DirectSound::Math::MagnitudeVector3, COMDAT

; 88   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 89   :             return (float)sqrt((double)((p->x * p->x) + (p->y * p->y) + (p->z * p->z)));

  00004	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000a	d9 00		 fld	 DWORD PTR [eax]
  0000c	d8 09		 fmul	 DWORD PTR [ecx]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00014	d9 42 04	 fld	 DWORD PTR [edx+4]
  00017	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0001a	de c1		 faddp	 ST(1), ST(0)
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00022	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00025	d8 4a 08	 fmul	 DWORD PTR [edx+8]
  00028	de c1		 faddp	 ST(1), ST(0)
  0002a	83 ec 08	 sub	 esp, 8
  0002d	dd 1c 24	 fstp	 QWORD PTR [esp]
  00030	e8 00 00 00 00	 call	 _sqrt
  00035	83 c4 08	 add	 esp, 8
  00038	d9 55 fc	 fst	 DWORD PTR tv92[ebp]

; 90   :         }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?MagnitudeVector3@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ENDP ; DirectSound::Math::MagnitudeVector3
DSOUND	ENDS
PUBLIC	?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z ; DirectSound::Math::NormalizeVector3
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.cpp
;	COMDAT ?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z
DSOUND	SEGMENT
tv80 = -8
_magnitude$ = -4
_pdst$ = 8
?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z PROC NEAR ; DirectSound::Math::NormalizeVector3, COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 155  :     float                   magnitude;
; 156  : 
; 157  :     if(!pdst->x && !pdst->y && !pdst->z)

  00006	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00009	d9 00		 fld	 DWORD PTR [eax]
  0000b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00011	df e0		 fnstsw	 ax
  00013	f6 c4 44	 test	 ah, 68			; 00000044H
  00016	7a 31		 jp	 SHORT $L35604
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  0001b	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0001e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00024	df e0		 fnstsw	 ax
  00026	f6 c4 44	 test	 ah, 68			; 00000044H
  00029	7a 1e		 jp	 SHORT $L35604
  0002b	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  0002e	d9 42 08	 fld	 DWORD PTR [edx+8]
  00031	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00037	df e0		 fnstsw	 ax
  00039	f6 c4 44	 test	 ah, 68			; 00000044H
  0003c	7a 0b		 jp	 SHORT $L35604

; 158  :     {
; 159  :         return 0.0f;

  0003e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00044	e9 b2 00 00 00	 jmp	 $L35602
$L35604:

; 160  :     }
; 161  :     else if((FLT_MAX == pdst->x) || (FLT_MAX == pdst->y) || (FLT_MAX == pdst->z))

  00049	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  0004c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00052	d8 18		 fcomp	 DWORD PTR [eax]
  00054	df e0		 fnstsw	 ax
  00056	f6 c4 44	 test	 ah, 68			; 00000044H
  00059	7b 26		 jnp	 SHORT $L35607
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  0005e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00064	d8 59 04	 fcomp	 DWORD PTR [ecx+4]
  00067	df e0		 fnstsw	 ax
  00069	f6 c4 44	 test	 ah, 68			; 00000044H
  0006c	7b 13		 jnp	 SHORT $L35607
  0006e	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  00071	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00077	d8 5a 08	 fcomp	 DWORD PTR [edx+8]
  0007a	df e0		 fnstsw	 ax
  0007c	f6 c4 44	 test	 ah, 68			; 00000044H
  0007f	7a 08		 jp	 SHORT $L35605
$L35607:

; 162  :     {
; 163  :         return FLT_MAX;

  00081	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00087	eb 72		 jmp	 SHORT $L35602
$L35605:

; 164  :     }
; 165  : 
; 166  :     magnitude = MagnitudeVector3(pdst);

  00089	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?MagnitudeVector3@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ; DirectSound::Math::MagnitudeVector3
  00092	d9 55 fc	 fst	 DWORD PTR _magnitude$[ebp]

; 167  :     ASSERT(magnitude > 0.0f);

  00095	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0009b	df e0		 fnstsw	 ax
  0009d	f6 c4 41	 test	 ah, 65			; 00000041H
  000a0	74 09		 je	 SHORT $L36015
  000a2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  000a9	eb 07		 jmp	 SHORT $L36016
$L36015:
  000ab	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$L36016:
  000b2	68 a7 00 00 00	 push	 167			; 000000a7H
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR tv80[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ca	83 c4 10	 add	 esp, 16			; 00000010H

; 168  : 
; 169  :     pdst->x = pdst->x / magnitude;

  000cd	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  000d0	d9 02		 fld	 DWORD PTR [edx]
  000d2	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  000d5	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  000d8	d9 18		 fstp	 DWORD PTR [eax]

; 170  :     pdst->y = pdst->y / magnitude;

  000da	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  000dd	d9 41 04	 fld	 DWORD PTR [ecx+4]
  000e0	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  000e3	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  000e6	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 171  :     pdst->z = pdst->z / magnitude;

  000e9	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  000ec	d9 40 08	 fld	 DWORD PTR [eax+8]
  000ef	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  000f5	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 172  : 
; 173  :     return magnitude;

  000f8	d9 45 fc	 fld	 DWORD PTR _magnitude$[ebp]
$L35602:

; 174  : }

  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c2 04 00	 ret	 4
?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z ENDP ; DirectSound::Math::NormalizeVector3
DSOUND	ENDS
PUBLIC	?NormalizeVector2@Math@DirectSound@@YGNPAU_D3DVECTOR@@NN@Z ; DirectSound::Math::NormalizeVector2
PUBLIC	?MagnitudeVector2@Math@DirectSound@@YGNNN@Z	; DirectSound::Math::MagnitudeVector2
; Function compile flags: /Odt
;	COMDAT ?NormalizeVector2@Math@DirectSound@@YGNPAU_D3DVECTOR@@NN@Z
DSOUND	SEGMENT
tv80 = -12
_magnitude$ = -8
_pdst$ = 8
_x$ = 12
_z$ = 20
?NormalizeVector2@Math@DirectSound@@YGNPAU_D3DVECTOR@@NN@Z PROC NEAR ; DirectSound::Math::NormalizeVector2, COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 185  :     double                  magnitude;
; 186  : 
; 187  :     pdst->y = 0.0f;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00009	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 188  : 
; 189  :     if(!x && !z)

  00010	dd 45 0c	 fld	 QWORD PTR _x$[ebp]
  00013	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00019	df e0		 fnstsw	 ax
  0001b	f6 c4 44	 test	 ah, 68			; 00000044H
  0001e	7a 2e		 jp	 SHORT $L35614
  00020	dd 45 14	 fld	 QWORD PTR _z$[ebp]
  00023	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 44	 test	 ah, 68			; 00000044H
  0002e	7a 1e		 jp	 SHORT $L35614

; 190  :     {
; 191  :         pdst->x = 0.0f;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 192  :         pdst->z = 0.0f;

  00039	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  0003c	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 193  : 
; 194  :         return 0.0f;

  00043	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@0000000000000000
  00049	e9 a7 00 00 00	 jmp	 $L35612
$L35614:

; 195  :     }
; 196  :     else if((FLT_MAX == x) || (FLT_MAX == z))

  0004e	81 7d 0c 00 00
	00 e0		 cmp	 DWORD PTR _x$[ebp], -536870912 ; e0000000H
  00055	75 09		 jne	 SHORT $L36022
  00057	81 7d 10 ff ff
	ef 47		 cmp	 DWORD PTR _x$[ebp+4], 1206910975 ; 47efffffH
  0005e	74 12		 je	 SHORT $L35617
$L36022:
  00060	81 7d 14 00 00
	00 e0		 cmp	 DWORD PTR _z$[ebp], -536870912 ; e0000000H
  00067	75 22		 jne	 SHORT $L35615
  00069	81 7d 18 ff ff
	ef 47		 cmp	 DWORD PTR _z$[ebp+4], 1206910975 ; 47efffffH
  00070	75 19		 jne	 SHORT $L35615
$L35617:

; 197  :     {
; 198  :         pdst->x = (float)x;

  00072	dd 45 0c	 fld	 QWORD PTR _x$[ebp]
  00075	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00078	d9 18		 fstp	 DWORD PTR [eax]

; 199  :         pdst->z = (float)z;

  0007a	dd 45 14	 fld	 QWORD PTR _z$[ebp]
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00080	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 200  : 
; 201  :         return FLT_MAX;

  00083	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@47efffffe0000000
  00089	eb 6a		 jmp	 SHORT $L35612
$L35615:

; 202  :     }
; 203  : 
; 204  :     magnitude = MagnitudeVector2(x, z);

  0008b	8b 55 18	 mov	 edx, DWORD PTR _z$[ebp+4]
  0008e	52		 push	 edx
  0008f	8b 45 14	 mov	 eax, DWORD PTR _z$[ebp]
  00092	50		 push	 eax
  00093	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp+4]
  00096	51		 push	 ecx
  00097	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  0009a	52		 push	 edx
  0009b	e8 00 00 00 00	 call	 ?MagnitudeVector2@Math@DirectSound@@YGNNN@Z ; DirectSound::Math::MagnitudeVector2
  000a0	dd 55 f8	 fst	 QWORD PTR _magnitude$[ebp]

; 205  :     ASSERT(magnitude > 0.0f);

  000a3	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  000a9	df e0		 fnstsw	 ax
  000ab	f6 c4 41	 test	 ah, 65			; 00000041H
  000ae	74 09		 je	 SHORT $L36020
  000b0	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  000b7	eb 07		 jmp	 SHORT $L36021
$L36020:
  000b9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$L36021:
  000c0	68 cd 00 00 00	 push	 205			; 000000cdH
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
  000cf	8b 45 f4	 mov	 eax, DWORD PTR tv80[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d8	83 c4 10	 add	 esp, 16			; 00000010H

; 206  : 
; 207  :     pdst->x = (float)(x / magnitude);

  000db	dd 45 0c	 fld	 QWORD PTR _x$[ebp]
  000de	dc 75 f8	 fdiv	 QWORD PTR _magnitude$[ebp]
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  000e4	d9 19		 fstp	 DWORD PTR [ecx]

; 208  :     pdst->z = (float)(z / magnitude);

  000e6	dd 45 14	 fld	 QWORD PTR _z$[ebp]
  000e9	dc 75 f8	 fdiv	 QWORD PTR _magnitude$[ebp]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  000ef	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 209  : 
; 210  :     return magnitude;

  000f2	dd 45 f8	 fld	 QWORD PTR _magnitude$[ebp]
$L35612:

; 211  : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 14 00	 ret	 20			; 00000014H
?NormalizeVector2@Math@DirectSound@@YGNPAU_D3DVECTOR@@NN@Z ENDP ; DirectSound::Math::NormalizeVector2
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.h
DSOUND	ENDS
;	COMDAT ?MagnitudeVector2@Math@DirectSound@@YGNNN@Z
DSOUND	SEGMENT
_x$ = 8
_z$ = 16
?MagnitudeVector2@Math@DirectSound@@YGNNN@Z PROC NEAR	; DirectSound::Math::MagnitudeVector2, COMDAT

; 93   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 94   :             return sqrt((x * x) + (z * z));

  00003	dd 45 08	 fld	 QWORD PTR _x$[ebp]
  00006	dc 4d 08	 fmul	 QWORD PTR _x$[ebp]
  00009	dd 45 10	 fld	 QWORD PTR _z$[ebp]
  0000c	dc 4d 10	 fmul	 QWORD PTR _z$[ebp]
  0000f	de c1		 faddp	 ST(1), ST(0)
  00011	83 ec 08	 sub	 esp, 8
  00014	dd 1c 24	 fstp	 QWORD PTR [esp]
  00017	e8 00 00 00 00	 call	 _sqrt
  0001c	83 c4 08	 add	 esp, 8

; 95   :         }

  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?MagnitudeVector2@Math@DirectSound@@YGNNN@Z ENDP	; DirectSound::Math::MagnitudeVector2
DSOUND	ENDS
PUBLIC	?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z ; DirectSound::Math::NormalizeVector2
PUBLIC	?MagnitudeVector2@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ; DirectSound::Math::MagnitudeVector2
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.cpp
;	COMDAT ?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z
DSOUND	SEGMENT
tv80 = -8
_magnitude$ = -4
_pdst$ = 8
_psrc$ = 12
?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z PROC NEAR ; DirectSound::Math::NormalizeVector2, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 221  :     float                   magnitude;
; 222  : 
; 223  :     pdst->y = 0.0f;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00009	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 224  :     
; 225  :     if(!psrc->x && !psrc->z)

  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  00013	d9 01		 fld	 DWORD PTR [ecx]
  00015	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0001b	df e0		 fnstsw	 ax
  0001d	f6 c4 44	 test	 ah, 68			; 00000044H
  00020	7a 31		 jp	 SHORT $L35627
  00022	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  00025	d9 42 08	 fld	 DWORD PTR [edx+8]
  00028	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0002e	df e0		 fnstsw	 ax
  00030	f6 c4 44	 test	 ah, 68			; 00000044H
  00033	7a 1e		 jp	 SHORT $L35627

; 226  :     {
; 227  :         pdst->x = 0.0f;

  00035	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 228  :         pdst->z = 0.0f;

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00041	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 229  : 
; 230  :         return 0.0f;

  00048	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  0004e	e9 a6 00 00 00	 jmp	 $L35625
$L35627:

; 231  :     }
; 232  :     else if((FLT_MAX == psrc->x) || (FLT_MAX == psrc->z))

  00053	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  00056	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  0005c	d8 1a		 fcomp	 DWORD PTR [edx]
  0005e	df e0		 fnstsw	 ax
  00060	f6 c4 44	 test	 ah, 68			; 00000044H
  00063	7b 13		 jnp	 SHORT $L35630
  00065	8b 45 0c	 mov	 eax, DWORD PTR _psrc$[ebp]
  00068	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  0006e	d8 58 08	 fcomp	 DWORD PTR [eax+8]
  00071	df e0		 fnstsw	 ax
  00073	f6 c4 44	 test	 ah, 68			; 00000044H
  00076	7a 1e		 jp	 SHORT $L35628
$L35630:

; 233  :     {
; 234  :         pdst->x = psrc->x;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  0007b	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  0007e	8b 02		 mov	 eax, DWORD PTR [edx]
  00080	89 01		 mov	 DWORD PTR [ecx], eax

; 235  :         pdst->z = psrc->z;

  00082	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00085	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  00088	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 236  : 
; 237  :         return FLT_MAX;

  0008e	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00094	eb 63		 jmp	 SHORT $L35625
$L35628:

; 238  :     }
; 239  : 
; 240  :     magnitude = MagnitudeVector2(psrc);

  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _psrc$[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 ?MagnitudeVector2@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ; DirectSound::Math::MagnitudeVector2
  0009f	d9 55 fc	 fst	 DWORD PTR _magnitude$[ebp]

; 241  :     ASSERT(magnitude > 0.0f);

  000a2	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000a8	df e0		 fnstsw	 ax
  000aa	f6 c4 41	 test	 ah, 65			; 00000041H
  000ad	74 09		 je	 SHORT $L36029
  000af	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  000b6	eb 07		 jmp	 SHORT $L36030
$L36029:
  000b8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$L36030:
  000bf	68 f1 00 00 00	 push	 241			; 000000f1H
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
  000ce	8b 55 f8	 mov	 edx, DWORD PTR tv80[ebp]
  000d1	52		 push	 edx
  000d2	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d7	83 c4 10	 add	 esp, 16			; 00000010H

; 242  : 
; 243  :     pdst->x = psrc->x / magnitude;

  000da	8b 45 0c	 mov	 eax, DWORD PTR _psrc$[ebp]
  000dd	d9 00		 fld	 DWORD PTR [eax]
  000df	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  000e5	d9 19		 fstp	 DWORD PTR [ecx]

; 244  :     pdst->z = psrc->z / magnitude;

  000e7	8b 55 0c	 mov	 edx, DWORD PTR _psrc$[ebp]
  000ea	d9 42 08	 fld	 DWORD PTR [edx+8]
  000ed	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  000f0	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  000f3	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 245  : 
; 246  :     return magnitude;

  000f6	d9 45 fc	 fld	 DWORD PTR _magnitude$[ebp]
$L35625:

; 247  : }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 08 00	 ret	 8
?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z ENDP ; DirectSound::Math::NormalizeVector2
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.h
DSOUND	ENDS
;	COMDAT ?MagnitudeVector2@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z
DSOUND	SEGMENT
tv83 = -4
_p$ = 8
?MagnitudeVector2@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z PROC NEAR ; DirectSound::Math::MagnitudeVector2, COMDAT

; 103  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 104  :             return (float)sqrt((p->x * p->x) + (p->z * p->z));

  00004	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0000a	d9 00		 fld	 DWORD PTR [eax]
  0000c	d8 09		 fmul	 DWORD PTR [ecx]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00014	d9 42 08	 fld	 DWORD PTR [edx+8]
  00017	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0001a	de c1		 faddp	 ST(1), ST(0)
  0001c	83 ec 08	 sub	 esp, 8
  0001f	dd 1c 24	 fstp	 QWORD PTR [esp]
  00022	e8 00 00 00 00	 call	 _sqrt
  00027	83 c4 08	 add	 esp, 8
  0002a	d9 55 fc	 fst	 DWORD PTR tv83[ebp]

; 105  :         }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?MagnitudeVector2@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ENDP ; DirectSound::Math::MagnitudeVector2
DSOUND	ENDS
PUBLIC	?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z ; DirectSound::Math::NormalizeVector2
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.cpp
;	COMDAT ?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z
DSOUND	SEGMENT
tv77 = -8
_magnitude$ = -4
_pdst$ = 8
?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z PROC NEAR ; DirectSound::Math::NormalizeVector2, COMDAT

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 256  :     float                   magnitude;
; 257  : 
; 258  :     pdst->y = 0.0f;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00009	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 259  :     
; 260  :     if(!pdst->x && !pdst->z)

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00013	d9 01		 fld	 DWORD PTR [ecx]
  00015	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0001b	df e0		 fnstsw	 ax
  0001d	f6 c4 44	 test	 ah, 68			; 00000044H
  00020	7a 1e		 jp	 SHORT $L35635
  00022	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  00025	d9 42 08	 fld	 DWORD PTR [edx+8]
  00028	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0002e	df e0		 fnstsw	 ax
  00030	f6 c4 44	 test	 ah, 68			; 00000044H
  00033	7a 0b		 jp	 SHORT $L35635

; 261  :     {
; 262  :         return 0.0f;

  00035	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  0003b	e9 90 00 00 00	 jmp	 $L35633
$L35635:

; 263  :     }
; 264  :     else if((FLT_MAX == pdst->x) || (FLT_MAX == pdst->z))

  00040	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  00043	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  00049	d8 18		 fcomp	 DWORD PTR [eax]
  0004b	df e0		 fnstsw	 ax
  0004d	f6 c4 44	 test	 ah, 68			; 00000044H
  00050	7b 13		 jnp	 SHORT $L35638
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  00055	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  0005b	d8 59 08	 fcomp	 DWORD PTR [ecx+8]
  0005e	df e0		 fnstsw	 ax
  00060	f6 c4 44	 test	 ah, 68			; 00000044H
  00063	7a 08		 jp	 SHORT $L35636
$L35638:

; 265  :     {
; 266  :         return FLT_MAX;

  00065	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@7f7fffff
  0006b	eb 63		 jmp	 SHORT $L35633
$L35636:

; 267  :     }
; 268  : 
; 269  :     magnitude = MagnitudeVector2(pdst);

  0006d	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 ?MagnitudeVector2@Math@DirectSound@@YGMPBU_D3DVECTOR@@@Z ; DirectSound::Math::MagnitudeVector2
  00076	d9 55 fc	 fst	 DWORD PTR _magnitude$[ebp]

; 270  :     ASSERT(magnitude > 0.0f);

  00079	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0007f	df e0		 fnstsw	 ax
  00081	f6 c4 41	 test	 ah, 65			; 00000041H
  00084	74 09		 je	 SHORT $L36037
  00086	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0008d	eb 07		 jmp	 SHORT $L36038
$L36037:
  0008f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$L36038:
  00096	68 0e 01 00 00	 push	 270			; 0000010eH
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EBDKHCCA@magnitude?5?$DO?50?40f?$AA@
  000a5	8b 45 f8	 mov	 eax, DWORD PTR tv77[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ae	83 c4 10	 add	 esp, 16			; 00000010H

; 271  : 
; 272  :     pdst->x = pdst->x / magnitude;

  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  000b4	d9 01		 fld	 DWORD PTR [ecx]
  000b6	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  000b9	8b 55 08	 mov	 edx, DWORD PTR _pdst$[ebp]
  000bc	d9 1a		 fstp	 DWORD PTR [edx]

; 273  :     pdst->z = pdst->z / magnitude;

  000be	8b 45 08	 mov	 eax, DWORD PTR _pdst$[ebp]
  000c1	d9 40 08	 fld	 DWORD PTR [eax+8]
  000c4	d8 75 fc	 fdiv	 DWORD PTR _magnitude$[ebp]
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _pdst$[ebp]
  000ca	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 274  : 
; 275  :     return magnitude;

  000cd	d9 45 fc	 fld	 DWORD PTR _magnitude$[ebp]
$L35633:

; 276  : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
?NormalizeVector2@Math@DirectSound@@YGMPAU_D3DVECTOR@@@Z ENDP ; DirectSound::Math::NormalizeVector2
DSOUND	ENDS
PUBLIC	?RatioToPitch@Math@DirectSound@@YGJM@Z		; DirectSound::Math::RatioToPitch
PUBLIC	??_C@_07GEGFOIDG@flRatio?$AA@			; `string'
;	COMDAT ??_C@_07GEGFOIDG@flRatio?$AA@
DSOUND_RD	SEGMENT
??_C@_07GEGFOIDG@flRatio?$AA@ DB 'flRatio', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?RatioToPitch@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT
tv68 = -12
_fl4096$ = -8
_lPitch$ = -4
_flRatio$ = 8
?RatioToPitch@Math@DirectSound@@YGJM@Z PROC NEAR	; DirectSound::Math::RatioToPitch, COMDAT

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 285  :     const float             fl4096  = 4096.0f;

  00006	c7 45 f8 00 00
	80 45		 mov	 DWORD PTR _fl4096$[ebp], 1166016512 ; 45800000H

; 286  :     long                    lPitch;
; 287  : 
; 288  :     ASSERT(flRatio);

  0000d	d9 45 08	 fld	 DWORD PTR _flRatio$[ebp]
  00010	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00016	df e0		 fnstsw	 ax
  00018	f6 c4 44	 test	 ah, 68			; 00000044H
  0001b	7a 09		 jp	 SHORT $L36042
  0001d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00024	eb 07		 jmp	 SHORT $L36043
$L36042:
  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L36043:
  0002d	68 20 01 00 00	 push	 288			; 00000120H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07GEGFOIDG@flRatio?$AA@
  0003c	8b 45 f4	 mov	 eax, DWORD PTR tv68[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00045	83 c4 10	 add	 esp, 16			; 00000010H

; 289  : 
; 290  :     __asm 
; 291  :     {
; 292  :         fld     fl4096

  00048	d9 45 f8	 fld	 DWORD PTR _fl4096$[ebp]

; 293  :         fld     flRatio

  0004b	d9 45 08	 fld	 DWORD PTR _flRatio$[ebp]

; 294  :         fyl2x

  0004e	d9 f1		 fyl2x

; 295  :         fistp   lPitch

  00050	db 5d fc	 fistp	 DWORD PTR _lPitch$[ebp]

; 296  :     }
; 297  : 
; 298  :     return lPitch;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _lPitch$[ebp]

; 299  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?RatioToPitch@Math@DirectSound@@YGJM@Z ENDP		; DirectSound::Math::RatioToPitch
DSOUND	ENDS
PUBLIC	__real@3f800000
PUBLIC	?MatrixRotationAxis@Math@DirectSound@@YGPAU_D3DMATRIX@@PAU3@PBU_D3DVECTOR@@M@Z ; DirectSound::Math::MatrixRotationAxis
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?MatrixRotationAxis@Math@DirectSound@@YGPAU_D3DMATRIX@@PAU3@PBU_D3DVECTOR@@M@Z
DSOUND	SEGMENT
_zxc1$ = -36
_c$ = -32
_c1$ = -28
_yzc1$ = -24
_s$ = -20
_xyc1$ = -16
_v$ = -12
_pOut$ = 8
_pV$ = 12
_angle$ = 16
?MatrixRotationAxis@Math@DirectSound@@YGPAU_D3DMATRIX@@PAU3@PBU_D3DVECTOR@@M@Z PROC NEAR ; DirectSound::Math::MatrixRotationAxis, COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 334  : #if DBG
; 335  :     if(!pOut || !pV)

  00006	83 7d 08 00	 cmp	 DWORD PTR _pOut$[ebp], 0
  0000a	74 06		 je	 SHORT $L35656
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _pV$[ebp], 0
  00010	75 07		 jne	 SHORT $L35655
$L35656:

; 336  :         return NULL;

  00012	33 c0		 xor	 eax, eax
  00014	e9 3c 01 00 00	 jmp	 $L35654
$L35655:

; 337  : #endif
; 338  : 
; 339  :     float s, c;
; 340  :     sincosf(angle, &s, &c);

  00019	8d 45 e0	 lea	 eax, DWORD PTR _c$[ebp]
  0001c	50		 push	 eax
  0001d	8d 4d ec	 lea	 ecx, DWORD PTR _s$[ebp]
  00020	51		 push	 ecx
  00021	8b 55 10	 mov	 edx, DWORD PTR _angle$[ebp]
  00024	52		 push	 edx
  00025	e8 00 00 00 00	 call	 ?sincosf@@YGXMPAM0@Z	; sincosf

; 341  :     float c1 = 1 - c;

  0002a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00030	d8 65 e0	 fsub	 DWORD PTR _c$[ebp]
  00033	d9 5d e4	 fstp	 DWORD PTR _c1$[ebp]

; 342  : 
; 343  :     D3DVECTOR v = *pV;

  00036	8b 45 0c	 mov	 eax, DWORD PTR _pV$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 4d f4	 mov	 DWORD PTR _v$[ebp], ecx
  0003e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00041	89 55 f8	 mov	 DWORD PTR _v$[ebp+4], edx
  00044	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00047	89 45 fc	 mov	 DWORD PTR _v$[ebp+8], eax

; 344  :     NormalizeVector3(&v, &v);

  0004a	8d 4d f4	 lea	 ecx, DWORD PTR _v$[ebp]
  0004d	51		 push	 ecx
  0004e	8d 55 f4	 lea	 edx, DWORD PTR _v$[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 ?NormalizeVector3@Math@DirectSound@@YGMPAU_D3DVECTOR@@PBU3@@Z ; DirectSound::Math::NormalizeVector3
  00057	dd d8		 fstp	 ST(0)

; 345  : 
; 346  :     float xyc1 = v.x * v.y * c1;

  00059	d9 45 f4	 fld	 DWORD PTR _v$[ebp]
  0005c	d8 4d f8	 fmul	 DWORD PTR _v$[ebp+4]
  0005f	d8 4d e4	 fmul	 DWORD PTR _c1$[ebp]
  00062	d9 5d f0	 fstp	 DWORD PTR _xyc1$[ebp]

; 347  :     float yzc1 = v.y * v.z * c1;

  00065	d9 45 f8	 fld	 DWORD PTR _v$[ebp+4]
  00068	d8 4d fc	 fmul	 DWORD PTR _v$[ebp+8]
  0006b	d8 4d e4	 fmul	 DWORD PTR _c1$[ebp]
  0006e	d9 5d e8	 fstp	 DWORD PTR _yzc1$[ebp]

; 348  :     float zxc1 = v.z * v.x * c1;

  00071	d9 45 fc	 fld	 DWORD PTR _v$[ebp+8]
  00074	d8 4d f4	 fmul	 DWORD PTR _v$[ebp]
  00077	d8 4d e4	 fmul	 DWORD PTR _c1$[ebp]
  0007a	d9 5d dc	 fstp	 DWORD PTR _zxc1$[ebp]

; 349  : 
; 350  :     pOut->_11 = v.x * v.x * c1 + c;

  0007d	d9 45 f4	 fld	 DWORD PTR _v$[ebp]
  00080	d8 4d f4	 fmul	 DWORD PTR _v$[ebp]
  00083	d8 4d e4	 fmul	 DWORD PTR _c1$[ebp]
  00086	d8 45 e0	 fadd	 DWORD PTR _c$[ebp]
  00089	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0008c	d9 18		 fstp	 DWORD PTR [eax]

; 351  :     pOut->_12 = xyc1 + v.z * s;

  0008e	d9 45 fc	 fld	 DWORD PTR _v$[ebp+8]
  00091	d8 4d ec	 fmul	 DWORD PTR _s$[ebp]
  00094	d8 45 f0	 fadd	 DWORD PTR _xyc1$[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  0009a	d9 59 04	 fstp	 DWORD PTR [ecx+4]

; 352  :     pOut->_13 = zxc1 - v.y * s;

  0009d	d9 45 f8	 fld	 DWORD PTR _v$[ebp+4]
  000a0	d8 4d ec	 fmul	 DWORD PTR _s$[ebp]
  000a3	d8 6d dc	 fsubr	 DWORD PTR _zxc1$[ebp]
  000a6	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  000a9	d9 5a 08	 fstp	 DWORD PTR [edx+8]

; 353  :     pOut->_14 = 0.0f;

  000ac	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  000af	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 354  : 
; 355  :     pOut->_21 = xyc1 - v.z * s;

  000b6	d9 45 fc	 fld	 DWORD PTR _v$[ebp+8]
  000b9	d8 4d ec	 fmul	 DWORD PTR _s$[ebp]
  000bc	d8 6d f0	 fsubr	 DWORD PTR _xyc1$[ebp]
  000bf	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  000c2	d9 59 10	 fstp	 DWORD PTR [ecx+16]

; 356  :     pOut->_22 = v.y * v.y * c1 + c;

  000c5	d9 45 f8	 fld	 DWORD PTR _v$[ebp+4]
  000c8	d8 4d f8	 fmul	 DWORD PTR _v$[ebp+4]
  000cb	d8 4d e4	 fmul	 DWORD PTR _c1$[ebp]
  000ce	d8 45 e0	 fadd	 DWORD PTR _c$[ebp]
  000d1	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  000d4	d9 5a 14	 fstp	 DWORD PTR [edx+20]

; 357  :     pOut->_23 = yzc1 + v.x * s;

  000d7	d9 45 f4	 fld	 DWORD PTR _v$[ebp]
  000da	d8 4d ec	 fmul	 DWORD PTR _s$[ebp]
  000dd	d8 45 e8	 fadd	 DWORD PTR _yzc1$[ebp]
  000e0	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  000e3	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 358  :     pOut->_24 = 0.0f;

  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  000e9	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 359  : 
; 360  :     pOut->_31 = zxc1 + v.y * s;

  000f0	d9 45 f8	 fld	 DWORD PTR _v$[ebp+4]
  000f3	d8 4d ec	 fmul	 DWORD PTR _s$[ebp]
  000f6	d8 45 dc	 fadd	 DWORD PTR _zxc1$[ebp]
  000f9	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  000fc	d9 5a 20	 fstp	 DWORD PTR [edx+32]

; 361  :     pOut->_32 = yzc1 - v.x * s;

  000ff	d9 45 f4	 fld	 DWORD PTR _v$[ebp]
  00102	d8 4d ec	 fmul	 DWORD PTR _s$[ebp]
  00105	d8 6d e8	 fsubr	 DWORD PTR _yzc1$[ebp]
  00108	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0010b	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 362  :     pOut->_33 = v.z * v.z * c1 + c;

  0010e	d9 45 fc	 fld	 DWORD PTR _v$[ebp+8]
  00111	d8 4d fc	 fmul	 DWORD PTR _v$[ebp+8]
  00114	d8 4d e4	 fmul	 DWORD PTR _c1$[ebp]
  00117	d8 45 e0	 fadd	 DWORD PTR _c$[ebp]
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  0011d	d9 59 28	 fstp	 DWORD PTR [ecx+40]

; 363  :     pOut->_34 = 0.0f;

  00120	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00123	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 364  : 
; 365  :     pOut->_41 = 0.0f;

  0012a	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0012d	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 366  :     pOut->_42 = 0.0f;

  00134	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  00137	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 367  :     pOut->_43 = 0.0f;

  0013e	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00141	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 368  :     pOut->_44 = 1.0f;

  00148	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0014b	c7 40 3c 00 00
	80 3f		 mov	 DWORD PTR [eax+60], 1065353216 ; 3f800000H

; 369  : 
; 370  :     return pOut;

  00152	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
$L35654:

; 371  : }

  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 0c 00	 ret	 12			; 0000000cH
?MatrixRotationAxis@Math@DirectSound@@YGPAU_D3DMATRIX@@PAU3@PBU_D3DVECTOR@@M@Z ENDP ; DirectSound::Math::MatrixRotationAxis
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?sincosf@@YGXMPAM0@Z
DSOUND	SEGMENT
_angle$ = 8
_psin$ = 12
_pcos$ = 16
?sincosf@@YGXMPAM0@Z PROC NEAR				; sincosf, COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 309  : #ifdef _X86_
; 310  : #define fsincos __asm _emit 0xd9 __asm _emit 0xfb
; 311  :     __asm {
; 312  :         mov eax, psin

  00003	8b 45 0c	 mov	 eax, DWORD PTR _psin$[ebp]

; 313  :         mov edx, pcos

  00006	8b 55 10	 mov	 edx, DWORD PTR _pcos$[ebp]

; 314  :         fld angle

  00009	d9 45 08	 fld	 DWORD PTR _angle$[ebp]

; 315  :         fsincos

  0000c	d9		 DB	 -39			; ffffffd9H
  0000d	fb		 DB	 -5			; fffffffbH

; 316  :         fstp DWORD ptr [edx]

  0000e	d9 1a		 fstp	 DWORD PTR [edx]

; 317  :         fstp DWORD ptr [eax]

  00010	d9 18		 fstp	 DWORD PTR [eax]

; 318  :     }
; 319  : #undef fsincos
; 320  : #else //!_X86_
; 321  :     *psin = sinf(angle);
; 322  :     *pcos = cosf(angle);
; 323  : #endif //!_X86_
; 324  : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
?sincosf@@YGXMPAM0@Z ENDP				; sincosf
DSOUND	ENDS
PUBLIC	?Vec3Transform@Math@DirectSound@@YGPAU_VECTOR4@@PAU3@PBU_D3DVECTOR@@PBU_D3DMATRIX@@@Z ; DirectSound::Math::Vec3Transform
PUBLIC	??_C@_0BP@CFGPHFE@Matrix?5must?5be?516?9byte?5aligned?$AA@ ; `string'
;	COMDAT ??_C@_0BP@CFGPHFE@Matrix?5must?5be?516?9byte?5aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@CFGPHFE@Matrix?5must?5be?516?9byte?5aligned?$AA@ DB 'Matrix mus'
	DB	't be 16-byte aligned', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Vec3Transform@Math@DirectSound@@YGPAU_VECTOR4@@PAU3@PBU_D3DVECTOR@@PBU_D3DMATRIX@@@Z
DSOUND	SEGMENT
_pOut$ = 8
_pV$ = 12
_pM$ = 16
?Vec3Transform@Math@DirectSound@@YGPAU_VECTOR4@@PAU3@PBU_D3DVECTOR@@PBU_D3DMATRIX@@@Z PROC NEAR ; DirectSound::Math::Vec3Transform, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : #if DBG
; 382  :     if(!pOut || !pV || !pM)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pOut$[ebp], 0
  00007	74 0c		 je	 SHORT $L35670
  00009	83 7d 0c 00	 cmp	 DWORD PTR _pV$[ebp], 0
  0000d	74 06		 je	 SHORT $L35670
  0000f	83 7d 10 00	 cmp	 DWORD PTR _pM$[ebp], 0
  00013	75 04		 jne	 SHORT $L35669
$L35670:

; 383  :         return NULL;

  00015	33 c0		 xor	 eax, eax
  00017	eb 73		 jmp	 SHORT $L35668
$L35669:

; 384  :     if ((ULONG_PTR)pM & 0xF)

  00019	8b 45 10	 mov	 eax, DWORD PTR _pM$[ebp]
  0001c	83 e0 0f	 and	 eax, 15			; 0000000fH
  0001f	85 c0		 test	 eax, eax
  00021	74 2e		 je	 SHORT $L35672

; 385  :     {
; 386  :         DPF_ERROR("Matrix must be 16-byte aligned");

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00028	6a 00		 push	 0
  0002a	68 82 01 00 00	 push	 386			; 00000182H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@HMPAAJCK@c?3?2xbox?2private?2windows?2directx?2@
  00034	6a 01		 push	 1
  00036	6a 09		 push	 9
  00038	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@CFGPHFE@Matrix?5must?5be?516?9byte?5aligned?$AA@
  00045	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004a	83 c4 04	 add	 esp, 4

; 387  :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	eb 3b		 jmp	 SHORT $L35668
$L35672:

; 388  :     }
; 389  : #endif
; 390  : 
; 391  : #ifdef _X86_
; 392  :     __asm {
; 393  :         mov     eax, pV

  00051	8b 45 0c	 mov	 eax, DWORD PTR _pV$[ebp]

; 394  :         mov     ecx, pM

  00054	8b 4d 10	 mov	 ecx, DWORD PTR _pM$[ebp]

; 395  :         movss   xmm2, [eax]             // pV->x

  00057	f3 0f 10 10	 movss	 xmm2, XMMWORD PTR [eax]

; 396  :         shufps  xmm2, xmm2, 0           // Fill xmm2 with x

  0005b	0f c6 d2 00	 shufps	 xmm2, xmm2, 0

; 397  :         mulps   xmm2, [ecx]             // x*pM->_11, x*pM->_12, x*pM->_13, x*pM->_14

  0005f	0f 59 11	 mulps	 xmm2, XMMWORD PTR [ecx]

; 398  : 
; 399  :         movss   xmm1, [eax+4]           // pV->y

  00062	f3 0f 10 48 04	 movss	 xmm1, XMMWORD PTR [eax+4]

; 400  :         shufps  xmm1, xmm1, 0           // Fill xmm1 with y

  00067	0f c6 c9 00	 shufps	 xmm1, xmm1, 0

; 401  :         mulps   xmm1, [ecx+16]          // y*pM->_21, y*pM->_22, y*pM->_23, y*pM->_24

  0006b	0f 59 49 10	 mulps	 xmm1, XMMWORD PTR [ecx+16]

; 402  : 
; 403  :         movss   xmm3, [eax+8]

  0006f	f3 0f 10 58 08	 movss	 xmm3, XMMWORD PTR [eax+8]

; 404  :         shufps  xmm3, xmm3, 0           // Fill xmm3 with z

  00074	0f c6 db 00	 shufps	 xmm3, xmm3, 0

; 405  :         mulps   xmm3, [ecx+32]          // z*pM->_31, z*pM->_32, z*pM->_33, z*pM->_34

  00078	0f 59 59 20	 mulps	 xmm3, XMMWORD PTR [ecx+32]

; 406  : 
; 407  :         addps   xmm2, [ecx + 48]        // Add the last row of the matrix

  0007c	0f 58 51 30	 addps	 xmm2, XMMWORD PTR [ecx+48]

; 408  :         mov     eax,  pOut

  00080	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]

; 409  :         addps   xmm2, xmm1

  00083	0f 58 d1	 addps	 xmm2, xmm1

; 410  :         addps   xmm2, xmm3

  00086	0f 58 d3	 addps	 xmm2, xmm3

; 411  :         movups  [eax], xmm2             // Output result

  00089	0f 11 10	 movups	 XMMWORD PTR [eax], xmm2
$L35668:

; 412  :     }
; 413  : #else // !_X86_
; 414  :     XGVECTOR4 v;
; 415  : 
; 416  :     v.x = pV->x * pM->_11 + pV->y * pM->_21 + pV->z * pM->_31 + pM->_41;
; 417  :     v.y = pV->x * pM->_12 + pV->y * pM->_22 + pV->z * pM->_32 + pM->_42;
; 418  :     v.z = pV->x * pM->_13 + pV->y * pM->_23 + pV->z * pM->_33 + pM->_43;
; 419  :     v.w = pV->x * pM->_14 + pV->y * pM->_24 + pV->z * pM->_34 + pM->_44;
; 420  : 
; 421  :     *pOut = v;
; 422  :     return pOut;
; 423  : #endif // !_X86_
; 424  : }

  0008c	5d		 pop	 ebp
  0008d	c2 0c 00	 ret	 12			; 0000000cH
?Vec3Transform@Math@DirectSound@@YGPAU_VECTOR4@@PAU3@PBU_D3DVECTOR@@PBU_D3DMATRIX@@@Z ENDP ; DirectSound::Math::Vec3Transform
DSOUND	ENDS
END
