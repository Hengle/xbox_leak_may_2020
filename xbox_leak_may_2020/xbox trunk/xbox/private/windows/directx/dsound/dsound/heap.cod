; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\heap.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@KMKNPDHL@SGEHEAPRUNMARKER?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@DPDIDAEM@pRunMarker?9?$DOdwRefCount?5?$DM?5MCPX_HW@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@PJEGKKM@CMcpxBufferSgeHeap?3?3Alloc?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@JOGDFDFB@Sharing?5SGE?5run?5?$CFx?5?$CIref?5count?5?$CFl@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@OMIGBIHN@?$CBIsListEmpty?$CI?$CGm_lstMarkers?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@HAFCFLMA@CMcpxBufferSgeHeap?3?3AllocRun?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@PALLACNB@Split?5SGE?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@GDHANFCL@Allocating?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@FOCIIPBL@m_nFreeElementCount?5?$DO?$DN?5pRunMarke@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@CBCHBLME@?$CBpRunMarker?9?$DOfAllocated?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@BOJNKAIC@CMcpxBufferSgeHeap?3?3FreeRun?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@JGFNOCPN@Freeing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EH@MGPIEIAF@pRunMarker?9?$DOnElement?5?$CL?5pRunMarke@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@IJCLLCGN@CMcpxBufferSgeHeap?3?3CoalesceRuns@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@OLPJCOOI@Coalescing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@EMFGKDKI@pvBaseAddress?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@JMKAKNMM@?$CB?$CI?$CIDWORD?$CJpvBaseAddress?5?$CG?5?$CIPAGE_S@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08HIKFCPCB@dnLength?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@FIHLJGA@?$CB?$CIdwAddress?5?$CG?5?$CIPAGE_SIZE?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@BDCAGIHP@?$CBm_dwAvailable?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09DCOKMFNA@?$CBm_dwUsed?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@HMHJLLJJ@?$CBm_pSlopMemoryHeap?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@ENDNGINI@?$CBpMarkerNode?9?$DOfAllocated?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HJCNDBJC@this?5?$DN?$DN?5m_pSlopMemoryHeap?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@IJHIFFPC@nLength?5?$DO?$DN?5nUsed?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@NKOGOBDE@CMcpxSlopMemoryHeap?3?3AddRun?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HM@DHDLHGJJ@Added?5?$CFx?5to?5the?5slop?5heap?5?$CIentry@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@OJLMAIAO@CMcpxSlopMemoryHeap?3?3Alloc?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@HIFFJDIO@Split?5memory?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5a@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@IKOBCBBA@Allocating?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@NIHOPDML@DSOUND_ALLOCATOR_SLOP?5?$DN?$DN?5pRunMar@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@PMMOCEFN@CMcpxSlopMemoryHeap?3?3Free?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@NGDNJECG@Freeing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OGPDEANK@m_dwUsed?5?$DO?$DN?5pRunMarker?9?$DOnLength?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0ED@KLOEHPFP@?$CILPBYTE?$CJpRunMarker?5?$CL?5pRunMarker?9@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEHJELCG@?$CBpNextRunMarker?9?$DOfAllocated?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@BOIGKEFK@CMcpxSlopMemoryHeap?3?3CoalesceRun@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@MKMMHKFA@Coalescing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?5a@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateMarker@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@GGPAU_LIST_ENTRY@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateMarker@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAXKPAU_LIST_ENTRY@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _$E1
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _$E3
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxBufferSgeHeap@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxBufferSgeHeap@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxBufferSgeHeap@DirectSound@@QAEJG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Alloc@CMcpxBufferSgeHeap@DirectSound@@QAEPAUSGEHEAPRUNMARKER@@PAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxBufferSgeHeap@DirectSound@@QAEXPAUSGEHEAPRUNMARKER@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AllocRun@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAXG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FreeRun@CMcpxBufferSgeHeap@DirectSound@@IAEXPAUSGEHEAPRUNMARKER@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CoalesceRuns@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXKPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?UnmapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxSlopMemoryHeap@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxSlopMemoryHeap@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxSlopMemoryHeap@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRun@CMcpxSlopMemoryHeap@DirectSound@@QAEHPAXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Alloc@CMcpxSlopMemoryHeap@DirectSound@@QAEPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxSlopMemoryHeap@DirectSound@@QAEXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CoalesceRuns@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAU3@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxSlopMemoryHeap@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxBufferSgeHeap@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?m_dwUsageThreshold@CMcpxSlopMemoryHeap@DirectSound@@2KB ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsageThreshold
PUBLIC	?m_pSlopMemoryHeap@CMcpxSlopMemoryHeap@DirectSound@@2PAV12@A ; DirectSound::CMcpxSlopMemoryHeap::m_pSlopMemoryHeap
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RD	SEGMENT
?m_dwUsageThreshold@CMcpxSlopMemoryHeap@DirectSound@@2KB DD 040H ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsageThreshold
DSOUND_RD	ENDS
DSOUND_RW	SEGMENT
?m_pSlopMemoryHeap@CMcpxSlopMemoryHeap@DirectSound@@2PAV12@A DD 00H ; DirectSound::CMcpxSlopMemoryHeap::m_pSlopMemoryHeap
DSOUND_RW	ENDS
EXTRN	_g_dwDirectSoundPhysicalMemorySlop:DWORD
CRT$XCU	SEGMENT
_$S2	DD	FLAT:_$E1
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
CRT$XCU	ENDS
;	COMDAT _$E1
DSOUND	SEGMENT
_$E1	PROC NEAR					; COMDAT

; 25   : DWORD &CMcpxSlopMemoryHeap::m_dwAvailable = g_dwDirectSoundPhysicalMemorySlop;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_dwAvailable@CMcpxSlopMemoryHeap@DirectSound@@2AAKA, OFFSET FLAT:_g_dwDirectSoundPhysicalMemorySlop ; DirectSound::CMcpxSlopMemoryHeap::m_dwAvailable
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E1	ENDP
DSOUND	ENDS
EXTRN	_g_dwDirectSoundPhysicalMemoryRecovered:DWORD
CRT$XCU	SEGMENT
_$S4	DD	FLAT:_$E3
; Function compile flags: /Odt
CRT$XCU	ENDS
;	COMDAT _$E3
DSOUND	SEGMENT
_$E3	PROC NEAR					; COMDAT

; 26   : DWORD &CMcpxSlopMemoryHeap::m_dwUsed = g_dwDirectSoundPhysicalMemoryRecovered;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA, OFFSET FLAT:_g_dwDirectSoundPhysicalMemoryRecovered ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
_$E3	ENDP
DSOUND	ENDS
PUBLIC	??0CMcpxBufferSgeHeap@DirectSound@@QAE@XZ	; DirectSound::CMcpxBufferSgeHeap::CMcpxBufferSgeHeap
PUBLIC	??_7CMcpxBufferSgeHeap@DirectSound@@6B@		; DirectSound::CMcpxBufferSgeHeap::`vftable'
PUBLIC	??_GCMcpxBufferSgeHeap@DirectSound@@UAEPAXI@Z	; DirectSound::CMcpxBufferSgeHeap::`scalar deleting destructor'
EXTRN	_g_dwDirectSoundFreeBufferSGEs:DWORD
EXTRN	??_ECMcpxBufferSgeHeap@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CMcpxBufferSgeHeap::`vector deleting destructor'
;	COMDAT ??_7CMcpxBufferSgeHeap@DirectSound@@6B@
CONST	SEGMENT
??_7CMcpxBufferSgeHeap@DirectSound@@6B@ DD FLAT:??_ECMcpxBufferSgeHeap@DirectSound@@UAEPAXI@Z ; DirectSound::CMcpxBufferSgeHeap::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMcpxBufferSgeHeap@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CMcpxBufferSgeHeap@DirectSound@@QAE@XZ PROC NEAR	; DirectSound::CMcpxBufferSgeHeap::CMcpxBufferSgeHeap, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxBufferSgeHeap@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET FLAT:_g_dwDirectSoundFreeBufferSGEs

; 53   :     DPF_ENTER();
; 54   : 
; 55   :     InitializeListHead(&m_lstRuns);

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	83 c2 04	 add	 edx, 4
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 56   :     InitializeListHead(&m_lstMarkers);

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00047	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 57   : 
; 58   :     DPF_LEAVE_VOID();
; 59   : }

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
??0CMcpxBufferSgeHeap@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxBufferSgeHeap::CMcpxBufferSgeHeap
DSOUND	ENDS
PUBLIC	??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ	; DirectSound::CMcpxBufferSgeHeap::~CMcpxBufferSgeHeap
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxBufferSgeHeap@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxBufferSgeHeap@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CMcpxBufferSgeHeap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ ; DirectSound::CMcpxBufferSgeHeap::~CMcpxBufferSgeHeap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35570
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35570:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxBufferSgeHeap@DirectSound@@UAEPAXI@Z ENDP	; DirectSound::CMcpxBufferSgeHeap::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
DSOUND	ENDS
;	COMDAT ??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ PROC NEAR	; DirectSound::CMcpxBufferSgeHeap::~CMcpxBufferSgeHeap, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxBufferSgeHeap@DirectSound@@6B@

; 85   :     DPF_ENTER();
; 86   : 
; 87   :     MEMFREE(m_paMarkers);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00017	74 16		 je	 SHORT $L35575
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
$L35575:

; 88   : 
; 89   :     m_nFreeElementCount = 0;

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 90   : 
; 91   :     DPF_LEAVE_VOID();
; 92   : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1CMcpxBufferSgeHeap@DirectSound@@UAE@XZ ENDP		; DirectSound::CMcpxBufferSgeHeap::~CMcpxBufferSgeHeap
DSOUND	ENDS
PUBLIC	?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z	; InsertTailListUninit
PUBLIC	?Initialize@CMcpxBufferSgeHeap@DirectSound@@QAEJG@Z ; DirectSound::CMcpxBufferSgeHeap::Initialize
PUBLIC	?CreateMarker@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@GGPAU_LIST_ENTRY@@@Z ; DirectSound::CMcpxBufferSgeHeap::CreateMarker
PUBLIC	??_C@_0BB@KMKNPDHL@SGEHEAPRUNMARKER?$AA@	; `string'
PUBLIC	??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
EXTRN	?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemAlloc
;	COMDAT ??_C@_0BB@KMKNPDHL@SGEHEAPRUNMARKER?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@KMKNPDHL@SGEHEAPRUNMARKER?$AA@ DB 'SGEHEAPRUNMARKER', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\heap.cpp', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxBufferSgeHeap@DirectSound@@QAEJG@Z
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_i$ = -4
_nLength$ = 8
?Initialize@CMcpxBufferSgeHeap@DirectSound@@QAEJG@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::Initialize, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 119  :     HRESULT                 hr;
; 120  :     DWORD                   i;
; 121  : 
; 122  :     m_nFreeElementCount = nLength;

  00009	0f b7 45 08	 movzx	 eax, WORD PTR _nLength$[ebp]
  0000d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00013	89 02		 mov	 DWORD PTR [edx], eax

; 123  : 
; 124  :     //
; 125  :     // Allocate markers, include one extra marker for slop
; 126  :     //
; 127  : 
; 128  :     hr = HRFROMP(m_paMarkers = MEMALLOC(SGEHEAPRUNMARKER, nLength + 1));

  00015	6a 01		 push	 1
  00017	0f b7 45 08	 movzx	 eax, WORD PTR _nLength$[ebp]
  0001b	83 c0 01	 add	 eax, 1
  0001e	6b c0 14	 imul	 eax, 20			; 00000014H
  00021	50		 push	 eax
  00022	68 44 53 64 61	 push	 1633964868		; 61645344H
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@KMKNPDHL@SGEHEAPRUNMARKER?$AA@
  0002c	68 80 00 00 00	 push	 128			; 00000080H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00036	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00041	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00044	33 c0		 xor	 eax, eax
  00046	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  0004a	0f 95 c0	 setne	 al
  0004d	48		 dec	 eax
  0004e	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  00053	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 129  : 
; 130  :     //
; 131  :     // All elements are initially free, so add 1 run marker to the run list
; 132  :     //
; 133  : 
; 134  :     if(SUCCEEDED(hr))

  00056	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005a	7c 23		 jl	 SHORT $L35589

; 135  :     {
; 136  :         m_pLargestFreeRunMarker = CreateMarker(&m_paMarkers[0], 0, nLength, &m_lstRuns);

  0005c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 04	 add	 ecx, 4
  00062	51		 push	 ecx
  00063	66 8b 55 08	 mov	 dx, WORD PTR _nLength$[ebp]
  00067	52		 push	 edx
  00068	6a 00		 push	 0
  0006a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00070	51		 push	 ecx
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?CreateMarker@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@GGPAU_LIST_ENTRY@@@Z ; DirectSound::CMcpxBufferSgeHeap::CreateMarker
  00079	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	89 42 18	 mov	 DWORD PTR [edx+24], eax
$L35589:

; 137  :     }
; 138  : 
; 139  :     //
; 140  :     // The remaining markers are unused
; 141  :     //
; 142  : 
; 143  :     if(SUCCEEDED(hr))

  0007f	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00083	7c 39		 jl	 SHORT $L35591

; 144  :     {
; 145  :         for(i = 1; i < (DWORD)nLength + 1; i++)

  00085	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0008c	eb 09		 jmp	 SHORT $L35593
$L35594:
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00091	83 c0 01	 add	 eax, 1
  00094	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35593:
  00097	0f b7 4d 08	 movzx	 ecx, WORD PTR _nLength$[ebp]
  0009b	83 c1 01	 add	 ecx, 1
  0009e	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  000a1	73 1b		 jae	 SHORT $L35591

; 146  :         {
; 147  :             InsertTailListUninit(&m_lstMarkers, &m_paMarkers[i].leListEntry);

  000a3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000a6	6b d2 14	 imul	 edx, 20			; 00000014H
  000a9	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	03 50 14	 add	 edx, DWORD PTR [eax+20]
  000af	52		 push	 edx
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailListUninit

; 148  :         }

  000bc	eb d0		 jmp	 SHORT $L35594
$L35591:

; 149  :     }
; 150  : 
; 151  :     DPF_LEAVE_HRESULT(hr);
; 152  : 
; 153  :     return hr;

  000be	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 154  : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
?Initialize@CMcpxBufferSgeHeap@DirectSound@@QAEJG@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::Initialize
DSOUND	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND_RD	SEGMENT
??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailListUninit, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 88 00 00 00	 push	 136			; 00000088H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 137  : 
; 138  :     Entry->Flink = ListHead;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0001e	89 11		 mov	 DWORD PTR [ecx], edx

; 139  :     Entry->Blink = ListHead->Blink;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 140  :     
; 141  :     Entry->Flink->Blink = Entry;

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00034	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 142  :     Entry->Blink->Flink = Entry;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	89 11		 mov	 DWORD PTR [ecx], edx

; 143  : 
; 144  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00042	68 90 00 00 00	 push	 144			; 00000090H
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0004c	6a 01		 push	 1
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 145  : }    

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; InsertTailListUninit
DSOUND	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L30006

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L30005
$L30006:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L30010
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L30009
$L30010:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L30005
$L30009:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L30014
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L30013
$L30014:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L30016
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L30015
$L30016:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L30015:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L30005
$L30013:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L30019

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L30020

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L30020:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L30005
$L30019:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L30005

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L30005

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L30005:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
DSOUND	ENDS
PUBLIC	?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z	; InsertHeadListUninit
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\heap.h
;	COMDAT ?CreateMarker@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@GGPAU_LIST_ENTRY@@@Z
DSOUND	SEGMENT
_this$ = -4
_pMarker$ = 8
_nElement$ = 12
_nLength$ = 16
_plePrevEntry$ = 20
?CreateMarker@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@GGPAU_LIST_ENTRY@@@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::CreateMarker, COMDAT
; _this$ = ecx

; 110  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 111  :         InsertHeadListUninit(plePrevEntry, &pMarker->leListEntry);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pMarker$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _plePrevEntry$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertHeadListUninit

; 112  : 
; 113  :         pMarker->nElement = nElement;

  00014	8b 55 08	 mov	 edx, DWORD PTR _pMarker$[ebp]
  00017	66 8b 45 0c	 mov	 ax, WORD PTR _nElement$[ebp]
  0001b	66 89 42 08	 mov	 WORD PTR [edx+8], ax

; 114  :         pMarker->nLength = nLength;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pMarker$[ebp]
  00022	66 8b 55 10	 mov	 dx, WORD PTR _nLength$[ebp]
  00026	66 89 51 0a	 mov	 WORD PTR [ecx+10], dx

; 115  :         pMarker->dwRefCount = 0;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pMarker$[ebp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 116  :         pMarker->pvBaseAddress = NULL;

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _pMarker$[ebp]
  00037	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 117  : 
; 118  :         return pMarker;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pMarker$[ebp]

; 119  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
?CreateMarker@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@GGPAU_LIST_ENTRY@@@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::CreateMarker
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertHeadListUninit, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 187  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 bb 00 00 00	 push	 187			; 000000bbH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 188  : 
; 189  :     Entry->Flink = ListHead->Flink;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	89 01		 mov	 DWORD PTR [ecx], eax

; 190  :     Entry->Blink = ListHead;

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00025	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00028	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 191  :     
; 192  :     Entry->Flink->Blink = Entry;

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00033	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 193  :     Entry->Blink->Flink = Entry;

  00036	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0003f	89 11		 mov	 DWORD PTR [ecx], edx

; 194  : 
; 195  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00041	68 c3 00 00 00	 push	 195			; 000000c3H
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0004b	6a 01		 push	 1
  0004d	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 196  : }

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; InsertHeadListUninit
DSOUND	ENDS
PUBLIC	?Alloc@CMcpxBufferSgeHeap@DirectSound@@QAEPAUSGEHEAPRUNMARKER@@PAXK@Z ; DirectSound::CMcpxBufferSgeHeap::Alloc
PUBLIC	?AllocRun@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAXG@Z ; DirectSound::CMcpxBufferSgeHeap::AllocRun
PUBLIC	?MapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXKPAXK@Z ; DirectSound::CMcpxBufferSgeHeap::MapBuffer
PUBLIC	??0CIrql@DirectSound@@QAE@XZ			; DirectSound::CIrql::CIrql
PUBLIC	?Raise@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Raise
PUBLIC	?Lower@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Lower
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0CM@DPDIDAEM@pRunMarker?9?$DOdwRefCount?5?$DM?5MCPX_HW@ ; `string'
PUBLIC	??_C@_0BK@PJEGKKM@CMcpxBufferSgeHeap?3?3Alloc?$AA@ ; `string'
PUBLIC	??_C@_0CD@JOGDFDFB@Sharing?5SGE?5run?5?$CFx?5?$CIref?5count?5?$CFl@ ; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
;	COMDAT ??_C@_0CM@DPDIDAEM@pRunMarker?9?$DOdwRefCount?5?$DM?5MCPX_HW@
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
DSOUND_RD	SEGMENT
??_C@_0CM@DPDIDAEM@pRunMarker?9?$DOdwRefCount?5?$DM?5MCPX_HW@ DB 'pRunMar'
	DB	'ker->dwRefCount < MCPX_HW_MAX_VOICES', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@PJEGKKM@CMcpxBufferSgeHeap?3?3Alloc?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@PJEGKKM@CMcpxBufferSgeHeap?3?3Alloc?$AA@ DB 'CMcpxBufferSgeHeap'
	DB	'::Alloc', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@JOGDFDFB@Sharing?5SGE?5run?5?$CFx?5?$CIref?5count?5?$CFl@
DSOUND_RD	SEGMENT
??_C@_0CD@JOGDFDFB@Sharing?5SGE?5run?5?$CFx?5?$CIref?5count?5?$CFl@ DB 'S'
	DB	'haring SGE run %x (ref count %lu)', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Alloc@CMcpxBufferSgeHeap@DirectSound@@QAEPAUSGEHEAPRUNMARKER@@PAXK@Z
DSOUND	SEGMENT
_this$ = -28
_nLength$ = -24
_pleEntry$ = -20
_pRunMarker$ = -16
_irql$ = -12
_pMarkerNode$ = -4
_pvBaseAddress$ = 8
_dwBufferSize$ = 12
?Alloc@CMcpxBufferSgeHeap@DirectSound@@QAEPAUSGEHEAPRUNMARKER@@PAXK@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::Alloc, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 184  :     LPSGEHEAPRUNMARKER      pRunMarker      = NULL;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pRunMarker$[ebp], 0

; 185  :     PLIST_ENTRY             pleEntry;
; 186  :     LPSGEHEAPRUNMARKER      pMarkerNode;
; 187  :     WORD                    nLength;
; 188  :     CIrql                   irql;

  00010	8d 4d f4	 lea	 ecx, DWORD PTR _irql$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 189  :     
; 190  :     DPF_ENTER();
; 191  : 
; 192  :     //
; 193  :     // Page-align the buffer address and size
; 194  :     //
; 195  : 
; 196  :     nLength = (WORD)COMPUTE_PAGES_SPANNED(pvBaseAddress, dwBufferSize);

  00018	8b 45 08	 mov	 eax, DWORD PTR _pvBaseAddress$[ebp]
  0001b	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00023	8d 94 08 ff 0f
	00 00		 lea	 edx, DWORD PTR [eax+ecx+4095]
  0002a	c1 ea 0c	 shr	 edx, 12			; 0000000cH
  0002d	66 89 55 e8	 mov	 WORD PTR _nLength$[ebp], dx

; 197  :     pvBaseAddress = (LPVOID)((DWORD)pvBaseAddress & ~(PAGE_SIZE - 1));

  00031	8b 45 08	 mov	 eax, DWORD PTR _pvBaseAddress$[ebp]
  00034	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  00039	89 45 08	 mov	 DWORD PTR _pvBaseAddress$[ebp], eax

; 198  : 
; 199  :     //
; 200  :     // Check the list for a buffer whose SGEs we can share
; 201  :     //
; 202  : 
; 203  :     irql.Raise();

  0003c	8d 4d f4	 lea	 ecx, DWORD PTR _irql$[ebp]
  0003f	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 204  : 
; 205  : #ifndef MCPX_NO_SGE_SHARING
; 206  : 
; 207  :     for(pleEntry = m_lstRuns.Flink; pleEntry != &m_lstRuns; pleEntry = pleEntry->Flink)

  00044	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004a	89 55 ec	 mov	 DWORD PTR _pleEntry$[ebp], edx
  0004d	eb 08		 jmp	 SHORT $L35611
$L35612:
  0004f	8b 45 ec	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	89 4d ec	 mov	 DWORD PTR _pleEntry$[ebp], ecx
$L35611:
  00057	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	83 c2 04	 add	 edx, 4
  0005d	39 55 ec	 cmp	 DWORD PTR _pleEntry$[ebp], edx
  00060	74 48		 je	 SHORT $L35613

; 208  :     {
; 209  :         AssertValidEntryList(pleEntry, ASSERT_IN_LIST);

  00062	68 d1 00 00 00	 push	 209			; 000000d1H
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0006c	6a 01		 push	 1
  0006e	8b 45 ec	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 210  : 
; 211  :         pMarkerNode = CONTAINING_RECORD(pleEntry, SGEHEAPRUNMARKER, leListEntry);

  00077	8b 4d ec	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0007a	89 4d fc	 mov	 DWORD PTR _pMarkerNode$[ebp], ecx

; 212  : 
; 213  :         if(pMarkerNode->dwRefCount)

  0007d	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  00080	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00084	74 22		 je	 SHORT $L35618

; 214  :         {
; 215  :             if((DWORD)pvBaseAddress == (DWORD)pMarkerNode->pvBaseAddress)

  00086	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  0008c	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0008f	75 17		 jne	 SHORT $L35618

; 216  :             {
; 217  :                 if(nLength == pMarkerNode->nLength)

  00091	0f b7 55 e8	 movzx	 edx, WORD PTR _nLength$[ebp]
  00095	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  00098	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  0009c	3b d1		 cmp	 edx, ecx
  0009e	75 08		 jne	 SHORT $L35618

; 218  :                 {
; 219  :                     pRunMarker = pMarkerNode;

  000a0	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  000a3	89 55 f0	 mov	 DWORD PTR _pRunMarker$[ebp], edx

; 220  :                     break;

  000a6	eb 02		 jmp	 SHORT $L35613
$L35618:

; 221  :                 }
; 222  :             }
; 223  :         }
; 224  :     }

  000a8	eb a5		 jmp	 SHORT $L35612
$L35613:

; 225  : 
; 226  :     if(pRunMarker)

  000aa	83 7d f0 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  000ae	74 72		 je	 SHORT $L35623

; 227  :     {
; 228  :         //
; 229  :         // We found one, so just AddRef it
; 230  :         //
; 231  : 
; 232  :         ASSERT(pRunMarker->dwRefCount < MCPX_HW_MAX_VOICES);

  000b0	68 e8 00 00 00	 push	 232			; 000000e8H
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@DPDIDAEM@pRunMarker?9?$DOdwRefCount?5?$DM?5MCPX_HW@
  000bf	8b 45 f0	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000c2	81 78 0c 00 01
	00 00		 cmp	 DWORD PTR [eax+12], 256	; 00000100H
  000c9	1b c9		 sbb	 ecx, ecx
  000cb	41		 inc	 ecx
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d2	83 c4 10	 add	 esp, 16			; 00000010H

; 233  : 
; 234  :         pRunMarker->dwRefCount++;

  000d5	8b 55 f0	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000d8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000db	83 c0 01	 add	 eax, 1
  000de	8b 4d f0	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000e1	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 235  : 
; 236  :         DPF_SGE_HEAP("Sharing SGE run %x (ref count %lu)", pRunMarker->nElement, pRunMarker->dwRefCount);

  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PJEGKKM@CMcpxBufferSgeHeap?3?3Alloc?$AA@
  000ee	68 ec 00 00 00	 push	 236			; 000000ecH
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  000f8	6a 05		 push	 5
  000fa	6a 09		 push	 9
  000fc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00101	83 c4 18	 add	 esp, 24			; 00000018H
  00104	8b 55 f0	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00107	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0010a	50		 push	 eax
  0010b	8b 4d f0	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0010e	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00112	52		 push	 edx
  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JOGDFDFB@Sharing?5SGE?5run?5?$CFx?5?$CIref?5count?5?$CFl@
  00118	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  :     }
; 238  :     else

  00120	eb 38		 jmp	 SHORT $L35627
$L35623:

; 239  : 
; 240  : #endif // MCPX_NO_SGE_SHARING
; 241  : 
; 242  :     {
; 243  :         //
; 244  :         // Allocate a new run and map it into SGEs.  Note that we're not 
; 245  :         // setting the run marker's base address until after it's been
; 246  :         // mapped.  This will prevent us from ever trying to use an unmapped
; 247  :         // run if a higher IRQL call comes in.
; 248  :         //
; 249  :         
; 250  :         if(pRunMarker = AllocRun(pvBaseAddress, nLength))

  00122	66 8b 45 e8	 mov	 ax, WORD PTR _nLength$[ebp]
  00126	50		 push	 eax
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  0012a	51		 push	 ecx
  0012b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	e8 00 00 00 00	 call	 ?AllocRun@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAXG@Z ; DirectSound::CMcpxBufferSgeHeap::AllocRun
  00133	89 45 f0	 mov	 DWORD PTR _pRunMarker$[ebp], eax
  00136	83 7d f0 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  0013a	74 1e		 je	 SHORT $L35627

; 251  :         {
; 252  :             irql.Lower();

  0013c	8d 4d f4	 lea	 ecx, DWORD PTR _irql$[ebp]
  0013f	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 253  : 
; 254  :             MapBuffer(pRunMarker->nElement, pvBaseAddress, nLength);

  00144	0f b7 55 e8	 movzx	 edx, WORD PTR _nLength$[ebp]
  00148	52		 push	 edx
  00149	8b 45 08	 mov	 eax, DWORD PTR _pvBaseAddress$[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d f0	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00150	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 ?MapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXKPAXK@Z ; DirectSound::CMcpxBufferSgeHeap::MapBuffer
$L35627:

; 255  :         }
; 256  :     }
; 257  : 
; 258  :     irql.Lower();

  0015a	8d 4d f4	 lea	 ecx, DWORD PTR _irql$[ebp]
  0015d	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 259  : 
; 260  :     DPF_LEAVE(pRunMarker);
; 261  : 
; 262  :     return pRunMarker;

  00162	8b 45 f0	 mov	 eax, DWORD PTR _pRunMarker$[ebp]

; 263  : }

  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c2 08 00	 ret	 8
?Alloc@CMcpxBufferSgeHeap@DirectSound@@QAEPAUSGEHEAPRUNMARKER@@PAXK@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::Alloc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@DirectSound@@QAE@XZ PROC NEAR			; DirectSound::CIrql::CIrql, COMDAT
; _this$ = ecx

; 40   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   :         m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 42   :     }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Raise, COMDAT
; _this$ = ecx

; 45   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   :         if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L30264

; 47   :         {
; 48   :             m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L30264:

; 49   :         }
; 50   :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Lower, COMDAT
; _this$ = ecx

; 53   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :         if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L30269

; 55   :         {
; 56   :             KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 57   :             m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L30269:

; 58   :         }
; 59   :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Lower
DSOUND	ENDS
PUBLIC	?Free@CMcpxBufferSgeHeap@DirectSound@@QAEXPAUSGEHEAPRUNMARKER@@@Z ; DirectSound::CMcpxBufferSgeHeap::Free
PUBLIC	?FreeRun@CMcpxBufferSgeHeap@DirectSound@@IAEXPAUSGEHEAPRUNMARKER@@@Z ; DirectSound::CMcpxBufferSgeHeap::FreeRun
PUBLIC	?UnmapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXPAXK@Z ; DirectSound::CMcpxBufferSgeHeap::UnmapBuffer
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
;	COMDAT ?Free@CMcpxBufferSgeHeap@DirectSound@@QAEXPAUSGEHEAPRUNMARKER@@@Z
DSOUND	SEGMENT
_this$ = -20
_dnLength$ = -16
_pvBaseAddress$ = -12
_irql$ = -8
_pRunMarker$ = 8
?Free@CMcpxBufferSgeHeap@DirectSound@@QAEXPAUSGEHEAPRUNMARKER@@@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::Free, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 290  :     LPVOID                  pvBaseAddress;
; 291  :     DWORD                   dnLength;
; 292  :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 293  :     
; 294  :     DPF_ENTER();
; 295  : 
; 296  :     irql.Raise();

  00011	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00014	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 297  :     
; 298  :     if(!--pRunMarker->dwRefCount)

  00019	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0001c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001f	83 e9 01	 sub	 ecx, 1
  00022	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00025	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00028	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0002b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002f	75 34		 jne	 SHORT $L35636

; 299  :     {
; 300  :         pvBaseAddress = pRunMarker->pvBaseAddress;

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00034	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00037	89 55 f4	 mov	 DWORD PTR _pvBaseAddress$[ebp], edx

; 301  :         dnLength = pRunMarker->nLength;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0003d	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  00041	89 4d f0	 mov	 DWORD PTR _dnLength$[ebp], ecx

; 302  :         
; 303  :         FreeRun(pRunMarker);

  00044	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00047	52		 push	 edx
  00048	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?FreeRun@CMcpxBufferSgeHeap@DirectSound@@IAEXPAUSGEHEAPRUNMARKER@@@Z ; DirectSound::CMcpxBufferSgeHeap::FreeRun

; 304  : 
; 305  :         irql.Lower();

  00050	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00053	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 306  : 
; 307  :         UnmapBuffer(pvBaseAddress, dnLength);

  00058	8b 45 f0	 mov	 eax, DWORD PTR _dnLength$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?UnmapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXPAXK@Z ; DirectSound::CMcpxBufferSgeHeap::UnmapBuffer
$L35636:

; 308  :     }
; 309  :     
; 310  :     irql.Lower();

  00065	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00068	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 311  : 
; 312  :     DPF_LEAVE_VOID();
; 313  : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?Free@CMcpxBufferSgeHeap@DirectSound@@QAEXPAUSGEHEAPRUNMARKER@@@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::Free
DSOUND	ENDS
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
PUBLIC	??_C@_0BM@OMIGBIHN@?$CBIsListEmpty?$CI?$CGm_lstMarkers?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BN@HAFCFLMA@CMcpxBufferSgeHeap?3?3AllocRun?$AA@ ; `string'
PUBLIC	??_C@_0CJ@PALLACNB@Split?5SGE?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@ ; `string'
PUBLIC	??_C@_0BM@GDHANFCL@Allocating?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CL@FOCIIPBL@m_nFreeElementCount?5?$DO?$DN?5pRunMarke@ ; `string'
;	COMDAT ??_C@_0BM@OMIGBIHN@?$CBIsListEmpty?$CI?$CGm_lstMarkers?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@OMIGBIHN@?$CBIsListEmpty?$CI?$CGm_lstMarkers?$CJ?$AA@ DB '!IsLi'
	DB	'stEmpty(&m_lstMarkers)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@HAFCFLMA@CMcpxBufferSgeHeap?3?3AllocRun?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@HAFCFLMA@CMcpxBufferSgeHeap?3?3AllocRun?$AA@ DB 'CMcpxBufferSge'
	DB	'Heap::AllocRun', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@PALLACNB@Split?5SGE?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@
DSOUND_RD	SEGMENT
??_C@_0CJ@PALLACNB@Split?5SGE?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@ DB 'S'
	DB	'plit SGE run into %x (%lu) and %x (%lu)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@GDHANFCL@Allocating?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@GDHANFCL@Allocating?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ DB 'A'
	DB	'llocating SGE run %x (%lu)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@FOCIIPBL@m_nFreeElementCount?5?$DO?$DN?5pRunMarke@
DSOUND_RD	SEGMENT
??_C@_0CL@FOCIIPBL@m_nFreeElementCount?5?$DO?$DN?5pRunMarke@ DB 'm_nFreeE'
	DB	'lementCount >= pRunMarker->nLength', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AllocRun@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAXG@Z
DSOUND	SEGMENT
_this$ = -16
_pleEntry$ = -12
_pRunMarker$ = -8
_pMarkerNode$ = -4
_pvBaseAddress$ = 8
_nLength$ = 12
?AllocRun@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAXG@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::AllocRun, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 343  :     LPSGEHEAPRUNMARKER      pRunMarker  = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pRunMarker$[ebp], 0

; 344  :     LPSGEHEAPRUNMARKER      pMarkerNode;
; 345  :     PLIST_ENTRY             pleEntry;
; 346  : 
; 347  :     DPF_ENTER();
; 348  : 
; 349  :     //
; 350  :     // Check the largest available run length to see if we can service
; 351  :     // the request
; 352  :     //
; 353  : 
; 354  :     if(m_pLargestFreeRunMarker)

  00010	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00017	0f 84 9d 02 00
	00		 je	 $L35645

; 355  :     {
; 356  :         if(m_pLargestFreeRunMarker->nLength >= nLength)

  0001d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00023	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  00027	0f b7 4d 0c	 movzx	 ecx, WORD PTR _nLength$[ebp]
  0002b	3b c1		 cmp	 eax, ecx
  0002d	0f 8c 87 02 00
	00		 jl	 $L35645

; 357  :         {
; 358  :             //
; 359  :             // Find a free run that is as close as possible to the requested element
; 360  :             // count.  This will help to reduce fragmentation.
; 361  :             //
; 362  : 
; 363  :             for(pleEntry = m_lstRuns.Flink; pleEntry != &m_lstRuns; pleEntry = pleEntry->Flink)

  00033	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00039	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  0003c	eb 08		 jmp	 SHORT $L35647
$L35648:
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	89 55 f4	 mov	 DWORD PTR _pleEntry$[ebp], edx
$L35647:
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 c0 04	 add	 eax, 4
  0004c	39 45 f4	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  0004f	74 5b		 je	 SHORT $L35649

; 364  :             {
; 365  :                 AssertValidEntryList(pleEntry, ASSERT_IN_LIST);

  00051	68 6d 01 00 00	 push	 365			; 0000016dH
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0005b	6a 01		 push	 1
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 366  : 
; 367  :                 pMarkerNode = CONTAINING_RECORD(pleEntry, SGEHEAPRUNMARKER, leListEntry);

  00066	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00069	89 55 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], edx

; 368  :             
; 369  :                 if(!pMarkerNode->fAllocated)

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  0006f	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00073	75 35		 jne	 SHORT $L35654

; 370  :                 {
; 371  :                     if(pMarkerNode->nLength >= nLength)

  00075	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  00078	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  0007c	0f b7 45 0c	 movzx	 eax, WORD PTR _nLength$[ebp]
  00080	3b d0		 cmp	 edx, eax
  00082	7c 26		 jl	 SHORT $L35654

; 372  :                     {
; 373  :                         if(!pRunMarker)

  00084	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  00088	75 08		 jne	 SHORT $L35656

; 374  :                         {
; 375  :                             pRunMarker = pMarkerNode;

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  0008d	89 4d f8	 mov	 DWORD PTR _pRunMarker$[ebp], ecx

; 376  :                         }
; 377  :                         else if(pMarkerNode->nLength < pRunMarker->nLength)

  00090	eb 18		 jmp	 SHORT $L35654
$L35656:
  00092	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  00095	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0009c	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  000a0	3b c2		 cmp	 eax, edx
  000a2	7d 06		 jge	 SHORT $L35654

; 378  :                         {
; 379  :                             pRunMarker = pMarkerNode;

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  000a7	89 45 f8	 mov	 DWORD PTR _pRunMarker$[ebp], eax
$L35654:

; 380  :                         }
; 381  :                     }
; 382  :                 }
; 383  :             }

  000aa	eb 92		 jmp	 SHORT $L35648
$L35649:

; 384  : 
; 385  :             //
; 386  :             // If we're using the whole run, just flag it as allocated.  If not,
; 387  :             // get a free marker from the pool and add it to the list.  We're only
; 388  :             // using a single list so that runs can be broken and coalesced without
; 389  :             // having to walk the list.
; 390  :             //
; 391  : 
; 392  :             if(pRunMarker)

  000ac	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  000b0	0f 84 27 01 00
	00		 je	 $L35659

; 393  :             {
; 394  :                 if(nLength < pRunMarker->nLength)

  000b6	0f b7 4d 0c	 movzx	 ecx, WORD PTR _nLength$[ebp]
  000ba	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000bd	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  000c1	3b c8		 cmp	 ecx, eax
  000c3	0f 8d c4 00 00
	00		 jge	 $L35660

; 395  :                 {
; 396  :                     ASSERT(!IsListEmpty(&m_lstMarkers));

  000c9	68 8c 01 00 00	 push	 396			; 0000018cH
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@OMIGBIHN@?$CBIsListEmpty?$CI?$CGm_lstMarkers?$CJ?$AA@
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000de	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e1	33 c0		 xor	 eax, eax
  000e3	39 4a 0c	 cmp	 DWORD PTR [edx+12], ecx
  000e6	0f 94 c0	 sete	 al
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ef	83 c4 10	 add	 esp, 16			; 00000010H

; 397  :             
; 398  :                     pleEntry = RemoveHeadList(&m_lstMarkers);

  000f2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000f8	52		 push	 edx
  000f9	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList
  000fe	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax

; 399  :                     pMarkerNode = CONTAINING_RECORD(pleEntry, SGEHEAPRUNMARKER, leListEntry);

  00101	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00104	89 45 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], eax

; 400  : 
; 401  :                     CreateMarker(pMarkerNode, pRunMarker->nElement + nLength, pRunMarker->nLength - nLength, &pRunMarker->leListEntry);

  00107	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0010a	51		 push	 ecx
  0010b	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  0010e	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  00112	0f b7 4d 0c	 movzx	 ecx, WORD PTR _nLength$[ebp]
  00116	2b c1		 sub	 eax, ecx
  00118	50		 push	 eax
  00119	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  0011c	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00120	0f b7 4d 0c	 movzx	 ecx, WORD PTR _nLength$[ebp]
  00124	03 c1		 add	 eax, ecx
  00126	50		 push	 eax
  00127	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  0012a	52		 push	 edx
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	e8 00 00 00 00	 call	 ?CreateMarker@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@GGPAU_LIST_ENTRY@@@Z ; DirectSound::CMcpxBufferSgeHeap::CreateMarker

; 402  : 
; 403  :                     pRunMarker->nLength = nLength;

  00133	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00136	66 8b 4d 0c	 mov	 cx, WORD PTR _nLength$[ebp]
  0013a	66 89 48 0a	 mov	 WORD PTR [eax+10], cx

; 404  : 
; 405  :                     DPF_SGE_HEAP("Split SGE run into %x (%lu) and %x (%lu)", pRunMarker->nElement, pRunMarker->nLength, pMarkerNode->nElement, pMarkerNode->nLength);

  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@HAFCFLMA@CMcpxBufferSgeHeap?3?3AllocRun?$AA@
  00148	68 95 01 00 00	 push	 405			; 00000195H
  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00152	6a 05		 push	 5
  00154	6a 09		 push	 9
  00156	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0015b	83 c4 18	 add	 esp, 24			; 00000018H
  0015e	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  00161	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  00165	50		 push	 eax
  00166	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  00169	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0016d	52		 push	 edx
  0016e	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00171	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  00175	51		 push	 ecx
  00176	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00179	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0017d	50		 push	 eax
  0017e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@PALLACNB@Split?5SGE?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@
  00183	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00188	83 c4 14	 add	 esp, 20			; 00000014H

; 406  :                 }
; 407  :                 else

  0018b	eb 3d		 jmp	 SHORT $L35668
$L35660:

; 408  :                 {
; 409  :                     DPF_SGE_HEAP("Allocating SGE run %x (%lu)", pRunMarker->nElement, pRunMarker->nLength);

  0018d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00192	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@HAFCFLMA@CMcpxBufferSgeHeap?3?3AllocRun?$AA@
  00197	68 99 01 00 00	 push	 409			; 00000199H
  0019c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  001a1	6a 05		 push	 5
  001a3	6a 09		 push	 9
  001a5	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001aa	83 c4 18	 add	 esp, 24			; 00000018H
  001ad	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  001b0	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  001b4	52		 push	 edx
  001b5	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  001b8	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  001bc	51		 push	 ecx
  001bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GDHANFCL@Allocating?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
  001c2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001c7	83 c4 0c	 add	 esp, 12			; 0000000cH
$L35668:

; 410  :                 }
; 411  : 
; 412  :                 pRunMarker->fAllocated = TRUE;

  001ca	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  001cd	c7 42 0c 01 00
	00 00		 mov	 DWORD PTR [edx+12], 1

; 413  :                 pRunMarker->pvBaseAddress = pvBaseAddress;

  001d4	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  001d7	8b 4d 08	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  001da	89 48 10	 mov	 DWORD PTR [eax+16], ecx
$L35659:

; 414  :             }
; 415  : 
; 416  :             //
; 417  :             // Update the free element count and largest run members
; 418  :             //
; 419  : 
; 420  :             if(pRunMarker)

  001dd	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  001e1	0f 84 d3 00 00
	00		 je	 $L35645

; 421  :             {
; 422  :                 ASSERT(m_nFreeElementCount >= pRunMarker->nLength);

  001e7	68 a6 01 00 00	 push	 422			; 000001a6H
  001ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  001f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@FOCIIPBL@m_nFreeElementCount?5?$DO?$DN?5pRunMarke@
  001f6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001f9	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001fc	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  001ff	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  00203	39 10		 cmp	 DWORD PTR [eax], edx
  00205	1b c0		 sbb	 eax, eax
  00207	f7 d8		 neg	 eax
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0020f	83 c4 10	 add	 esp, 16			; 00000010H

; 423  :                 m_nFreeElementCount -= pRunMarker->nLength;

  00212	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00215	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00218	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0021b	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  0021f	8b 12		 mov	 edx, DWORD PTR [edx]
  00221	2b d1		 sub	 edx, ecx
  00223	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00226	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00229	89 11		 mov	 DWORD PTR [ecx], edx

; 424  : 
; 425  :                 if(pRunMarker == m_pLargestFreeRunMarker)

  0022b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0022e	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00231	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  00234	0f 85 80 00 00
	00		 jne	 $L35645

; 426  :                 {
; 427  :                     m_pLargestFreeRunMarker = NULL;

  0023a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0023d	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 428  :                     
; 429  :                     for(pleEntry = m_lstRuns.Flink; pleEntry != &m_lstRuns; pleEntry = pleEntry->Flink)

  00244	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00247	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0024a	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  0024d	eb 08		 jmp	 SHORT $L35673
$L35674:
  0024f	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  00252	8b 11		 mov	 edx, DWORD PTR [ecx]
  00254	89 55 f4	 mov	 DWORD PTR _pleEntry$[ebp], edx
$L35673:
  00257	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0025a	83 c0 04	 add	 eax, 4
  0025d	39 45 f4	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  00260	74 58		 je	 SHORT $L35645

; 430  :                     {
; 431  :                         AssertValidEntryList(pleEntry, ASSERT_IN_LIST);

  00262	68 af 01 00 00	 push	 431			; 000001afH
  00267	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0026c	6a 01		 push	 1
  0026e	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 432  : 
; 433  :                         pMarkerNode = CONTAINING_RECORD(pleEntry, SGEHEAPRUNMARKER, leListEntry);

  00277	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  0027a	89 55 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], edx

; 434  :             
; 435  :                         if(!pMarkerNode->fAllocated)

  0027d	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  00280	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00284	75 32		 jne	 SHORT $L35680

; 436  :                         {
; 437  :                             if(!m_pLargestFreeRunMarker)

  00286	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00289	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0028d	75 0b		 jne	 SHORT $L35681

; 438  :                             {
; 439  :                                 m_pLargestFreeRunMarker = pMarkerNode;

  0028f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00292	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  00295	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 440  :                             }
; 441  :                             else if(pMarkerNode->nLength > m_pLargestFreeRunMarker->nLength)

  00298	eb 1e		 jmp	 SHORT $L35680
$L35681:
  0029a	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  0029d	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  002a1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002a4	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002a7	0f b7 41 0a	 movzx	 eax, WORD PTR [ecx+10]
  002ab	3b d0		 cmp	 edx, eax
  002ad	7e 09		 jle	 SHORT $L35680

; 442  :                             {
; 443  :                                 m_pLargestFreeRunMarker = pMarkerNode;

  002af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002b2	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  002b5	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$L35680:

; 444  :                             }
; 445  :                         }
; 446  :                     }

  002b8	eb 95		 jmp	 SHORT $L35674
$L35645:

; 447  :                 }                    
; 448  :             }
; 449  :         }
; 450  :     }
; 451  : 
; 452  :     DPF_LEAVE(pRunMarker);
; 453  : 
; 454  :     return pRunMarker;

  002ba	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]

; 455  : }

  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c2 08 00	 ret	 8
?AllocRun@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAXG@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::AllocRun
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  00020	74 2c		 je	 SHORT $L30046

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L30046:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
DSOUND	ENDS
PUBLIC	?CoalesceRuns@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@0@Z ; DirectSound::CMcpxBufferSgeHeap::CoalesceRuns
PUBLIC	??_C@_0BI@CBCHBLME@?$CBpRunMarker?9?$DOfAllocated?$AA@ ; `string'
PUBLIC	??_C@_0BM@BOJNKAIC@CMcpxBufferSgeHeap?3?3FreeRun?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JGFNOCPN@Freeing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0BI@CBCHBLME@?$CBpRunMarker?9?$DOfAllocated?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
DSOUND_RD	SEGMENT
??_C@_0BI@CBCHBLME@?$CBpRunMarker?9?$DOfAllocated?$AA@ DB '!pRunMarker->f'
	DB	'Allocated', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@BOJNKAIC@CMcpxBufferSgeHeap?3?3FreeRun?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@BOJNKAIC@CMcpxBufferSgeHeap?3?3FreeRun?$AA@ DB 'CMcpxBufferSgeH'
	DB	'eap::FreeRun', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@JGFNOCPN@Freeing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@JGFNOCPN@Freeing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ DB 'Free'
	DB	'ing SGE run %x (%lu)', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?FreeRun@CMcpxBufferSgeHeap@DirectSound@@IAEXPAUSGEHEAPRUNMARKER@@@Z
DSOUND	SEGMENT
_this$ = -12
_pleEntry$ = -8
_pMarkerNode$ = -4
_pRunMarker$ = 8
?FreeRun@CMcpxBufferSgeHeap@DirectSound@@IAEXPAUSGEHEAPRUNMARKER@@@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::FreeRun, COMDAT
; _this$ = ecx

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 482  :     PLIST_ENTRY             pleEntry;
; 483  :     LPSGEHEAPRUNMARKER      pMarkerNode;
; 484  :     
; 485  :     DPF_ENTER();
; 486  : 
; 487  :     ASSERT(!pRunMarker->fAllocated);

  00009	68 e7 01 00 00	 push	 487			; 000001e7H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CBCHBLME@?$CBpRunMarker?9?$DOfAllocated?$AA@
  00018	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00021	0f 95 c1	 setne	 cl
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 488  : 
; 489  :     DPF_SGE_HEAP("Freeing SGE run %x (%lu)", pRunMarker->nElement, pRunMarker->nLength);

  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BOJNKAIC@CMcpxBufferSgeHeap?3?3FreeRun?$AA@
  00037	68 e9 01 00 00	 push	 489			; 000001e9H
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00041	6a 05		 push	 5
  00043	6a 09		 push	 9
  00045	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0004a	83 c4 18	 add	 esp, 24			; 00000018H
  0004d	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00050	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00058	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0005c	52		 push	 edx
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@JGFNOCPN@Freeing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
  00062	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 490  : 
; 491  :     //
; 492  :     // Update the free element count
; 493  :     //
; 494  : 
; 495  :     m_nFreeElementCount += pRunMarker->nLength;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00070	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00073	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  00077	03 01		 add	 eax, DWORD PTR [ecx]
  00079	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0007f	89 02		 mov	 DWORD PTR [edx], eax
$L35694:

; 496  : 
; 497  :     //
; 498  :     // Coalesce the run with those around it and add it back to the free 
; 499  :     // marker pool.
; 500  :     //
; 501  : 
; 502  :     while(TRUE)

  00081	b8 01 00 00 00	 mov	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	74 3b		 je	 SHORT $L35703

; 503  :     {
; 504  :         if((pleEntry = pRunMarker->leListEntry.Flink) == &m_lstRuns)

  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0008d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008f	89 55 f8	 mov	 DWORD PTR _pleEntry$[ebp], edx
  00092	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00095	83 c0 04	 add	 eax, 4
  00098	39 45 f8	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  0009b	75 02		 jne	 SHORT $L35696

; 505  :         {
; 506  :             break;

  0009d	eb 26		 jmp	 SHORT $L35703
$L35696:

; 507  :         }
; 508  : 
; 509  :         pMarkerNode = CONTAINING_RECORD(pleEntry, SGEHEAPRUNMARKER, leListEntry);

  0009f	8b 4d f8	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  000a2	89 4d fc	 mov	 DWORD PTR _pMarkerNode$[ebp], ecx

; 510  : 
; 511  :         if(pMarkerNode->fAllocated)

  000a5	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  000a8	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  000ac	74 02		 je	 SHORT $L35701

; 512  :         {
; 513  :             break;

  000ae	eb 15		 jmp	 SHORT $L35703
$L35701:

; 514  :         }
; 515  : 
; 516  :         pRunMarker = CoalesceRuns(pRunMarker, pMarkerNode);

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000b7	51		 push	 ecx
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?CoalesceRuns@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@0@Z ; DirectSound::CMcpxBufferSgeHeap::CoalesceRuns
  000c0	89 45 08	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 517  :     }

  000c3	eb bc		 jmp	 SHORT $L35694
$L35703:

; 518  : 
; 519  :     while(TRUE)

  000c5	ba 01 00 00 00	 mov	 edx, 1
  000ca	85 d2		 test	 edx, edx
  000cc	74 3c		 je	 SHORT $L35704

; 520  :     {
; 521  :         if((pleEntry = pRunMarker->leListEntry.Blink) == &m_lstRuns)

  000ce	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000d1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d4	89 4d f8	 mov	 DWORD PTR _pleEntry$[ebp], ecx
  000d7	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000da	83 c2 04	 add	 edx, 4
  000dd	39 55 f8	 cmp	 DWORD PTR _pleEntry$[ebp], edx
  000e0	75 02		 jne	 SHORT $L35705

; 522  :         {
; 523  :             break;

  000e2	eb 26		 jmp	 SHORT $L35704
$L35705:

; 524  :         }
; 525  : 
; 526  :         pMarkerNode = CONTAINING_RECORD(pleEntry, SGEHEAPRUNMARKER, leListEntry);

  000e4	8b 45 f8	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  000e7	89 45 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], eax

; 527  : 
; 528  :         if(pMarkerNode->fAllocated)

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  000ed	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  000f1	74 02		 je	 SHORT $L35710

; 529  :         {
; 530  :             break;

  000f3	eb 15		 jmp	 SHORT $L35704
$L35710:

; 531  :         }
; 532  : 
; 533  :         pRunMarker = CoalesceRuns(pMarkerNode, pRunMarker);

  000f5	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000f8	52		 push	 edx
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  000fc	50		 push	 eax
  000fd	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	e8 00 00 00 00	 call	 ?CoalesceRuns@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@0@Z ; DirectSound::CMcpxBufferSgeHeap::CoalesceRuns
  00105	89 45 08	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 534  :     }

  00108	eb bb		 jmp	 SHORT $L35703
$L35704:

; 535  : 
; 536  :     //
; 537  :     // Update the largest run pointer
; 538  :     //
; 539  : 
; 540  :     if(m_pLargestFreeRunMarker)

  0010a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00111	74 20		 je	 SHORT $L35711

; 541  :     {
; 542  :         if(pRunMarker->nLength > m_pLargestFreeRunMarker->nLength)

  00113	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00116	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  0011a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00120	0f b7 4a 0a	 movzx	 ecx, WORD PTR [edx+10]
  00124	3b c1		 cmp	 eax, ecx
  00126	7e 09		 jle	 SHORT $L35712

; 543  :         {
; 544  :             m_pLargestFreeRunMarker = pRunMarker;

  00128	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0012b	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0012e	89 42 18	 mov	 DWORD PTR [edx+24], eax
$L35712:

; 545  :         }
; 546  :     }
; 547  :     else

  00131	eb 09		 jmp	 SHORT $L35687
$L35711:

; 548  :     {
; 549  :         m_pLargestFreeRunMarker = pRunMarker;

  00133	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00139	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$L35687:

; 550  :     }
; 551  : 
; 552  :     DPF_LEAVE_VOID();
; 553  : }

  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 04 00	 ret	 4
?FreeRun@CMcpxBufferSgeHeap@DirectSound@@IAEXPAUSGEHEAPRUNMARKER@@@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::FreeRun
DSOUND	ENDS
PUBLIC	?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z	; MoveEntryTailList
PUBLIC	??_C@_0EH@MGPIEIAF@pRunMarker?9?$DOnElement?5?$CL?5pRunMarke@ ; `string'
PUBLIC	??_C@_0CB@IJCLLCGN@CMcpxBufferSgeHeap?3?3CoalesceRuns@ ; `string'
PUBLIC	??_C@_0CJ@OLPJCOOI@Coalescing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@ ; `string'
;	COMDAT ??_C@_0EH@MGPIEIAF@pRunMarker?9?$DOnElement?5?$CL?5pRunMarke@
DSOUND_RD	SEGMENT
??_C@_0EH@MGPIEIAF@pRunMarker?9?$DOnElement?5?$CL?5pRunMarke@ DB 'pRunMar'
	DB	'ker->nElement + pRunMarker->nLength == pNextRunMarker->nEleme'
	DB	'nt', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@IJCLLCGN@CMcpxBufferSgeHeap?3?3CoalesceRuns@
DSOUND_RD	SEGMENT
??_C@_0CB@IJCLLCGN@CMcpxBufferSgeHeap?3?3CoalesceRuns@ DB 'CMcpxBufferSge'
	DB	'Heap::CoalesceRuns', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@OLPJCOOI@Coalescing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@
DSOUND_RD	SEGMENT
??_C@_0CJ@OLPJCOOI@Coalescing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@ DB 'C'
	DB	'oalescing SGE run %x (%lu) and %x (%lu)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CoalesceRuns@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@0@Z
DSOUND	SEGMENT
_this$ = -4
_pRunMarker$ = 8
_pNextRunMarker$ = 12
?CoalesceRuns@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@0@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::CoalesceRuns, COMDAT
; _this$ = ecx

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 583  :     DPF_ENTER();
; 584  : 
; 585  :     ASSERT(pRunMarker->nElement + pRunMarker->nLength == pNextRunMarker->nElement);

  00007	68 49 02 00 00	 push	 585			; 00000249H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@MGPIEIAF@pRunMarker?9?$DOnElement?5?$CL?5pRunMarke@
  00016	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00019	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00020	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  00024	03 c8		 add	 ecx, eax
  00026	8b 55 0c	 mov	 edx, DWORD PTR _pNextRunMarker$[ebp]
  00029	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  0002d	33 d2		 xor	 edx, edx
  0002f	3b c8		 cmp	 ecx, eax
  00031	0f 95 c2	 setne	 dl
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 586  : 
; 587  :     AssertValidEntryList(&pRunMarker->leListEntry, ASSERT_IN_LIST);

  0003d	68 4b 02 00 00	 push	 587			; 0000024bH
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00047	6a 01		 push	 1
  00049	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 588  :     AssertValidEntryList(&pNextRunMarker->leListEntry, ASSERT_IN_LIST);

  00052	68 4c 02 00 00	 push	 588			; 0000024cH
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0005c	6a 01		 push	 1
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _pNextRunMarker$[ebp]
  00061	51		 push	 ecx
  00062	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 589  : 
; 590  :     DPF_SGE_HEAP("Coalescing SGE run %x (%lu) and %x (%lu)", pRunMarker->nElement, pRunMarker->nLength, pNextRunMarker->nElement, pNextRunMarker->nLength);

  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@IJCLLCGN@CMcpxBufferSgeHeap?3?3CoalesceRuns@
  00071	68 4e 02 00 00	 push	 590			; 0000024eH
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0007b	6a 05		 push	 5
  0007d	6a 09		 push	 9
  0007f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	8b 55 0c	 mov	 edx, DWORD PTR _pNextRunMarker$[ebp]
  0008a	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  0008e	50		 push	 eax
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR _pNextRunMarker$[ebp]
  00092	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00096	52		 push	 edx
  00097	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0009a	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  0009e	51		 push	 ecx
  0009f	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000a2	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@OLPJCOOI@Coalescing?5SGE?5run?5?$CFx?5?$CI?$CFlu?$CJ?5and?5@
  000ac	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b1	83 c4 14	 add	 esp, 20			; 00000014H

; 591  : 
; 592  :     pRunMarker->nLength += pNextRunMarker->nLength;

  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR _pNextRunMarker$[ebp]
  000b7	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  000bb	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000be	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  000c2	03 ca		 add	 ecx, edx
  000c4	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000c7	66 89 4a 0a	 mov	 WORD PTR [edx+10], cx

; 593  : 
; 594  :     MoveEntryTailList(&m_lstMarkers, &pNextRunMarker->leListEntry);

  000cb	8b 45 0c	 mov	 eax, DWORD PTR _pNextRunMarker$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveEntryTailList

; 595  : 
; 596  :     DPF_LEAVE(pRunMarker);
; 597  : 
; 598  :     return pRunMarker;

  000db	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]

; 599  : }

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
?CoalesceRuns@CMcpxBufferSgeHeap@DirectSound@@IAEPAUSGEHEAPRUNMARKER@@PAU3@0@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::CoalesceRuns
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z PROC NEAR ; MoveEntryTailList, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 ff 00 00 00	 push	 255			; 000000ffH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 256  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00018	68 00 01 00 00	 push	 256			; 00000100H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 00		 push	 0
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 257  : 
; 258  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 259  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 260  : 
; 261  :     Entry->Flink = ListHead;

  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0004e	89 11		 mov	 DWORD PTR [ecx], edx

; 262  :     Entry->Blink = ListHead->Blink;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00056	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00059	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 263  : 
; 264  :     Entry->Flink->Blink = Entry;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00064	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 265  :     Entry->Blink->Flink = Entry;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00070	89 11		 mov	 DWORD PTR [ecx], edx

; 266  : 
; 267  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00072	68 0b 01 00 00	 push	 267			; 0000010bH
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0007c	6a 01		 push	 1
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 268  : 
; 269  :     return Entry;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]

; 270  : }

  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ENDP	; MoveEntryTailList
DSOUND	ENDS
PUBLIC	??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@ ; `string'
PUBLIC	??_C@_0O@EMFGKDKI@pvBaseAddress?$AA@		; `string'
PUBLIC	??_C@_0CK@JMKAKNMM@?$CB?$CI?$CIDWORD?$CJpvBaseAddress?5?$CG?5?$CIPAGE_S@ ; `string'
PUBLIC	??_C@_08HIKFCPCB@dnLength?$AA@			; `string'
PUBLIC	??_C@_0BP@FIHLJGA@?$CB?$CIdwAddress?5?$CG?5?$CIPAGE_SIZE?5?9?51?$CJ?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ ; `string'
EXTRN	__imp__MmLockUnlockBufferPages@12:NEAR
EXTRN	__imp__MmGetPhysicalAddress@4:NEAR
;	COMDAT ??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
DSOUND_RD	SEGMENT
??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@ DB 'dwSgeIndex '
	DB	'< MCPX_HW_MAX_BUFFER_PRDS', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@EMFGKDKI@pvBaseAddress?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@EMFGKDKI@pvBaseAddress?$AA@ DB 'pvBaseAddress', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@JMKAKNMM@?$CB?$CI?$CIDWORD?$CJpvBaseAddress?5?$CG?5?$CIPAGE_S@
DSOUND_RD	SEGMENT
??_C@_0CK@JMKAKNMM@?$CB?$CI?$CIDWORD?$CJpvBaseAddress?5?$CG?5?$CIPAGE_S@ DB '!'
	DB	'((DWORD)pvBaseAddress & (PAGE_SIZE - 1))', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_08HIKFCPCB@dnLength?$AA@
DSOUND_RD	SEGMENT
??_C@_08HIKFCPCB@dnLength?$AA@ DB 'dnLength', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@FIHLJGA@?$CB?$CIdwAddress?5?$CG?5?$CIPAGE_SIZE?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@FIHLJGA@?$CB?$CIdwAddress?5?$CG?5?$CIPAGE_SIZE?5?9?51?$CJ?$CJ?$AA@ DB '!'
	DB	'(dwAddress & (PAGE_SIZE - 1))', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ DB 'Ke'
	DB	'GetCurrentIrql() == DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ DB '('
	DB	'2) <= PIO_METHOD_QUEUE_CLEAR', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?MapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXKPAXK@Z
DSOUND	SEGMENT
_dwAddress$ = -12
_irql$ = -8
_dwSgeIndex$ = 8
_pvBaseAddress$ = 12
_dnLength$ = 16
?MapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXKPAXK@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::MapBuffer, COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 630  :     DWORD                   dwAddress;
; 631  :     CIrql                   irql;

  00006	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 632  :     
; 633  :     DPF_ENTER();
; 634  : 
; 635  :     ASSERT(dwSgeIndex < MCPX_HW_MAX_BUFFER_PRDS);

  0000e	68 7b 02 00 00	 push	 635			; 0000027bH
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@
  0001d	81 7d 08 00 08
	00 00		 cmp	 DWORD PTR _dwSgeIndex$[ebp], 2048 ; 00000800H
  00024	1b c0		 sbb	 eax, eax
  00026	40		 inc	 eax
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 636  :     ASSERT(pvBaseAddress);

  00030	68 7c 02 00 00	 push	 636			; 0000027cH
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@EMFGKDKI@pvBaseAddress?$AA@
  0003f	33 c9		 xor	 ecx, ecx
  00041	83 7d 0c 00	 cmp	 DWORD PTR _pvBaseAddress$[ebp], 0
  00045	0f 94 c1	 sete	 cl
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004e	83 c4 10	 add	 esp, 16			; 00000010H

; 637  :     ASSERT(!((DWORD)pvBaseAddress & (PAGE_SIZE - 1)));

  00051	68 7d 02 00 00	 push	 637			; 0000027dH
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@JMKAKNMM@?$CB?$CI?$CIDWORD?$CJpvBaseAddress?5?$CG?5?$CIPAGE_S@
  00060	8b 55 0c	 mov	 edx, DWORD PTR _pvBaseAddress$[ebp]
  00063	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00069	f7 da		 neg	 edx
  0006b	1b d2		 sbb	 edx, edx
  0006d	f7 da		 neg	 edx
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00075	83 c4 10	 add	 esp, 16			; 00000010H

; 638  :     ASSERT(dnLength);

  00078	68 7e 02 00 00	 push	 638			; 0000027eH
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08HIKFCPCB@dnLength?$AA@
  00087	33 c0		 xor	 eax, eax
  00089	83 7d 10 00	 cmp	 DWORD PTR _dnLength$[ebp], 0
  0008d	0f 94 c0	 sete	 al
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00096	83 c4 10	 add	 esp, 16			; 00000010H

; 639  : 
; 640  :     //
; 641  :     // Lock the buffer data
; 642  :     //
; 643  : 
; 644  :     MmLockUnlockBufferPages(pvBaseAddress, dnLength << PAGE_SHIFT, FALSE);

  00099	6a 00		 push	 0
  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _dnLength$[ebp]
  0009e	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  000a1	51		 push	 ecx
  000a2	8b 55 0c	 mov	 edx, DWORD PTR _pvBaseAddress$[ebp]
  000a5	52		 push	 edx
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12
$L35735:

; 645  : 
; 646  :     //
; 647  :     // Start mapping pages into SGEs
; 648  :     //
; 649  : 
; 650  :     while(dnLength--)

  000ac	8b 45 10	 mov	 eax, DWORD PTR _dnLength$[ebp]
  000af	8b 4d 10	 mov	 ecx, DWORD PTR _dnLength$[ebp]
  000b2	83 e9 01	 sub	 ecx, 1
  000b5	89 4d 10	 mov	 DWORD PTR _dnLength$[ebp], ecx
  000b8	85 c0		 test	 eax, eax
  000ba	0f 84 ce 00 00
	00		 je	 $L35726

; 651  :     {
; 652  :         dwAddress = MmGetPhysicalAddress(pvBaseAddress);

  000c0	8b 55 0c	 mov	 edx, DWORD PTR _pvBaseAddress$[ebp]
  000c3	52		 push	 edx
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmGetPhysicalAddress@4
  000ca	89 45 f4	 mov	 DWORD PTR _dwAddress$[ebp], eax

; 653  :         ASSERT(!(dwAddress & (PAGE_SIZE - 1)));

  000cd	68 8d 02 00 00	 push	 653			; 0000028dH
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@FIHLJGA@?$CB?$CIdwAddress?5?$CG?5?$CIPAGE_SIZE?5?9?51?$CJ?$CJ?$AA@
  000dc	8b 45 f4	 mov	 eax, DWORD PTR _dwAddress$[ebp]
  000df	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  000e4	f7 d8		 neg	 eax
  000e6	1b c0		 sbb	 eax, eax
  000e8	f7 d8		 neg	 eax
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000f0	83 c4 10	 add	 esp, 16			; 00000010H

; 654  : 
; 655  :         irql.Raise();

  000f3	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  000f6	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 656  :         
; 657  :         MCPX_CHECK_VOICE_FIFO(2);

  000fb	68 91 02 00 00	 push	 657			; 00000291H
  00100	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00105	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0010a	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0010f	0f b6 c8	 movzx	 ecx, al
  00112	33 d2		 xor	 edx, edx
  00114	83 f9 02	 cmp	 ecx, 2
  00117	0f 95 c2	 setne	 dl
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00120	83 c4 10	 add	 esp, 16			; 00000010H
  00123	68 91 02 00 00	 push	 657			; 00000291H
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0012d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@MKPFBHKH@?$CI2?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  00132	6a 00		 push	 0
  00134	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00139	83 c4 10	 add	 esp, 16			; 00000010H
$L35741:
  0013c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00141	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  00147	c1 e9 02	 shr	 ecx, 2
  0014a	83 f9 02	 cmp	 ecx, 2
  0014d	73 02		 jae	 SHORT $L35742
  0014f	eb eb		 jmp	 SHORT $L35741
$L35742:

; 658  : 
; 659  :         MCPX_VOICE_WRITE(SetCurrentInBufSGE, dwSgeIndex);

  00151	ba 04 08 00 00	 mov	 edx, 2052		; 00000804H
  00156	8b 45 08	 mov	 eax, DWORD PTR _dwSgeIndex$[ebp]
  00159	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 660  :         MCPX_VOICE_WRITE(SetCurrentInBufSGEOffset, dwAddress);

  0015f	b9 08 08 00 00	 mov	 ecx, 2056		; 00000808H
  00164	8b 55 f4	 mov	 edx, DWORD PTR _dwAddress$[ebp]
  00167	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 661  : 
; 662  :         irql.Lower();

  0016d	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00170	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 663  : 
; 664  :         pvBaseAddress = (LPBYTE)pvBaseAddress + PAGE_SIZE;

  00175	8b 45 0c	 mov	 eax, DWORD PTR _pvBaseAddress$[ebp]
  00178	05 00 10 00 00	 add	 eax, 4096		; 00001000H
  0017d	89 45 0c	 mov	 DWORD PTR _pvBaseAddress$[ebp], eax

; 665  :         
; 666  :         dwSgeIndex++;

  00180	8b 4d 08	 mov	 ecx, DWORD PTR _dwSgeIndex$[ebp]
  00183	83 c1 01	 add	 ecx, 1
  00186	89 4d 08	 mov	 DWORD PTR _dwSgeIndex$[ebp], ecx

; 667  :     }

  00189	e9 1e ff ff ff	 jmp	 $L35735
$L35726:

; 668  : 
; 669  :     DPF_LEAVE_VOID();
; 670  : }

  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 0c 00	 ret	 12			; 0000000cH
?MapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXKPAXK@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::MapBuffer
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?UnmapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXPAXK@Z
DSOUND	SEGMENT
_pvBaseAddress$ = 8
_dnLength$ = 12
?UnmapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXPAXK@Z PROC NEAR ; DirectSound::CMcpxBufferSgeHeap::UnmapBuffer, COMDAT

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 699  :     DPF_ENTER();
; 700  : 
; 701  :     ASSERT(pvBaseAddress);

  00003	68 bd 02 00 00	 push	 701			; 000002bdH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@EMFGKDKI@pvBaseAddress?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pvBaseAddress$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 702  :     ASSERT(!((DWORD)pvBaseAddress & (PAGE_SIZE - 1)));

  00024	68 be 02 00 00	 push	 702			; 000002beH
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@JMKAKNMM@?$CB?$CI?$CIDWORD?$CJpvBaseAddress?5?$CG?5?$CIPAGE_S@
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  00036	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  0003c	f7 d9		 neg	 ecx
  0003e	1b c9		 sbb	 ecx, ecx
  00040	f7 d9		 neg	 ecx
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 703  :     ASSERT(dnLength);

  0004b	68 bf 02 00 00	 push	 703			; 000002bfH
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08HIKFCPCB@dnLength?$AA@
  0005a	33 d2		 xor	 edx, edx
  0005c	83 7d 0c 00	 cmp	 DWORD PTR _dnLength$[ebp], 0
  00060	0f 94 c2	 sete	 dl
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 704  : 
; 705  :     //
; 706  :     // Unlock the buffer data
; 707  :     //
; 708  : 
; 709  :     MmLockUnlockBufferPages(pvBaseAddress, dnLength << PAGE_SHIFT, TRUE);

  0006c	6a 01		 push	 1
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _dnLength$[ebp]
  00071	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  00078	51		 push	 ecx
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12

; 710  : 
; 711  :     DPF_LEAVE_VOID();
; 712  : }

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?UnmapBuffer@CMcpxBufferSgeHeap@DirectSound@@KGXPAXK@Z ENDP ; DirectSound::CMcpxBufferSgeHeap::UnmapBuffer
DSOUND	ENDS
PUBLIC	??0CMcpxSlopMemoryHeap@DirectSound@@QAE@XZ	; DirectSound::CMcpxSlopMemoryHeap::CMcpxSlopMemoryHeap
PUBLIC	??_7CMcpxSlopMemoryHeap@DirectSound@@6B@	; DirectSound::CMcpxSlopMemoryHeap::`vftable'
PUBLIC	??_GCMcpxSlopMemoryHeap@DirectSound@@UAEPAXI@Z	; DirectSound::CMcpxSlopMemoryHeap::`scalar deleting destructor'
PUBLIC	??0CRefCount@DirectSound@@QAE@K@Z		; DirectSound::CRefCount::CRefCount
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
PUBLIC	??_C@_0P@BDCAGIHP@?$CBm_dwAvailable?$AA@	; `string'
PUBLIC	??_C@_09DCOKMFNA@?$CBm_dwUsed?$AA@		; `string'
PUBLIC	??_C@_0BD@HMHJLLJJ@?$CBm_pSlopMemoryHeap?$AA@	; `string'
EXTRN	??_ECMcpxSlopMemoryHeap@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CMcpxSlopMemoryHeap::`vector deleting destructor'
;	COMDAT ??_7CMcpxSlopMemoryHeap@DirectSound@@6B@
CONST	SEGMENT
??_7CMcpxSlopMemoryHeap@DirectSound@@6B@ DD FLAT:??_ECMcpxSlopMemoryHeap@DirectSound@@UAEPAXI@Z ; DirectSound::CMcpxSlopMemoryHeap::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
CONST	ENDS
;	COMDAT ??_C@_0P@BDCAGIHP@?$CBm_dwAvailable?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@BDCAGIHP@?$CBm_dwAvailable?$AA@ DB '!m_dwAvailable', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_09DCOKMFNA@?$CBm_dwUsed?$AA@
DSOUND_RD	SEGMENT
??_C@_09DCOKMFNA@?$CBm_dwUsed?$AA@ DB '!m_dwUsed', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@HMHJLLJJ@?$CBm_pSlopMemoryHeap?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@HMHJLLJJ@?$CBm_pSlopMemoryHeap?$AA@ DB '!m_pSlopMemoryHeap', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??0CMcpxSlopMemoryHeap@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CMcpxSlopMemoryHeap@DirectSound@@QAE@XZ PROC NEAR	; DirectSound::CMcpxSlopMemoryHeap::CMcpxSlopMemoryHeap, COMDAT
; _this$ = ecx

; 737  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxSlopMemoryHeap@DirectSound@@6B@

; 738  :     DPF_ENTER();
; 739  : 
; 740  :     ASSERT(!m_dwAvailable);

  0001a	68 e4 02 00 00	 push	 740			; 000002e4H
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@BDCAGIHP@?$CBm_dwAvailable?$AA@
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwAvailable@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwAvailable
  0002f	33 d2		 xor	 edx, edx
  00031	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00034	0f 95 c2	 setne	 dl
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 741  :     ASSERT(!m_dwUsed);

  00040	68 e5 02 00 00	 push	 741			; 000002e5H
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DCOKMFNA@?$CBm_dwUsed?$AA@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  00054	33 c9		 xor	 ecx, ecx
  00056	83 38 00	 cmp	 DWORD PTR [eax], 0
  00059	0f 95 c1	 setne	 cl
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00062	83 c4 10	 add	 esp, 16			; 00000010H

; 742  : 
; 743  :     ASSERT(!m_pSlopMemoryHeap);

  00065	68 e7 02 00 00	 push	 743			; 000002e7H
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@HMHJLLJJ@?$CBm_pSlopMemoryHeap?$AA@
  00074	33 d2		 xor	 edx, edx
  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pSlopMemoryHeap@CMcpxSlopMemoryHeap@DirectSound@@2PAV12@A, 0 ; DirectSound::CMcpxSlopMemoryHeap::m_pSlopMemoryHeap
  0007d	0f 95 c2	 setne	 dl
  00080	52		 push	 edx
  00081	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00086	83 c4 10	 add	 esp, 16			; 00000010H

; 744  :     m_pSlopMemoryHeap = this;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	a3 00 00 00 00	 mov	 DWORD PTR ?m_pSlopMemoryHeap@CMcpxSlopMemoryHeap@DirectSound@@2PAV12@A, eax ; DirectSound::CMcpxSlopMemoryHeap::m_pSlopMemoryHeap

; 745  : 
; 746  :     InitializeListHead(&m_lstEntries);

  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	83 c1 08	 add	 ecx, 8
  00097	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009a	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000a6	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 747  :     InitializeListHead(&m_lstRuns);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	83 c0 10	 add	 eax, 16			; 00000010H
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000be	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 748  : 
; 749  :     DPF_LEAVE_VOID();
; 750  : }

  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
??0CMcpxSlopMemoryHeap@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxSlopMemoryHeap::CMcpxSlopMemoryHeap
DSOUND	ENDS
PUBLIC	??_7CRefCount@DirectSound@@6B@			; DirectSound::CRefCount::`vftable'
PUBLIC	??_GCRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
CONST	SEGMENT
??_7CRefCount@DirectSound@@6B@ DD FLAT:??_ECRefCount@DirectSound@@UAEPAXI@Z ; DirectSound::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@DirectSound@@QAE@K@Z PROC NEAR		; DirectSound::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 38   :     }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@DirectSound@@QAE@K@Z ENDP			; DirectSound::CRefCount::CRefCount
DSOUND	ENDS
PUBLIC	??1CRefCount@DirectSound@@UAE@XZ		; DirectSound::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@DirectSound@@UAEPAXI@Z PROC NEAR		; DirectSound::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L30389
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L30389:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CRefCount::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CRefCount@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@

; 42   :         ASSERT(!m_dwRefCount);

  00010	6a 2a		 push	 42			; 0000002aH
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 43   :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@DirectSound@@UAE@XZ ENDP			; DirectSound::CRefCount::~CRefCount
DSOUND	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T36355 = -8
$T36354 = -4
_this$ = 8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L30406

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L30406

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T36355[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T36355[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T36354[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T36354[ebp], 0
  00058	74 11		 je	 SHORT $L36356
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T36354[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T36354[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L36357
$L36356:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L36357:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L30404
$L30406:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L30404:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
DSOUND	ENDS
PUBLIC	??1CMcpxSlopMemoryHeap@DirectSound@@UAE@XZ	; DirectSound::CMcpxSlopMemoryHeap::~CMcpxSlopMemoryHeap
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxSlopMemoryHeap@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxSlopMemoryHeap@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CMcpxSlopMemoryHeap::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxSlopMemoryHeap@DirectSound@@UAE@XZ ; DirectSound::CMcpxSlopMemoryHeap::~CMcpxSlopMemoryHeap
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35765
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35765:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxSlopMemoryHeap@DirectSound@@UAEPAXI@Z ENDP	; DirectSound::CMcpxSlopMemoryHeap::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??0CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::~CAutoIrql
PUBLIC	??_C@_0BJ@ENDNGINI@?$CBpMarkerNode?9?$DOfAllocated?$AA@ ; `string'
PUBLIC	??_C@_0BK@HJCNDBJC@this?5?$DN?$DN?5m_pSlopMemoryHeap?$AA@ ; `string'
EXTRN	?TrackingPhysicalFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPhysicalFree
;	COMDAT ??_C@_0BJ@ENDNGINI@?$CBpMarkerNode?9?$DOfAllocated?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
DSOUND_RD	SEGMENT
??_C@_0BJ@ENDNGINI@?$CBpMarkerNode?9?$DOfAllocated?$AA@ DB '!pMarkerNode-'
	DB	'>fAllocated', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HJCNDBJC@this?5?$DN?$DN?5m_pSlopMemoryHeap?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@HJCNDBJC@this?5?$DN?$DN?5m_pSlopMemoryHeap?$AA@ DB 'this == m_p'
	DB	'SlopMemoryHeap', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CMcpxSlopMemoryHeap@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -28
___AutoIrql$ = -24
_pEntryNode$ = -16
_pleEntry$ = -12
_pvBaseAddress$ = -8
_pMarkerNode$ = -4
??1CMcpxSlopMemoryHeap@DirectSound@@UAE@XZ PROC NEAR	; DirectSound::CMcpxSlopMemoryHeap::~CMcpxSlopMemoryHeap, COMDAT
; _this$ = ecx

; 775  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxSlopMemoryHeap@DirectSound@@6B@

; 776  : 
; 777  : #ifdef DEBUG
; 778  : 
; 779  :     LPSLOPRUNMARKER         pMarkerNode;
; 780  : 
; 781  : #endif // DEBUG
; 782  : 
; 783  :     PLIST_ENTRY             pleEntry;
; 784  :     LPSLOPMEMENTRY          pEntryNode;
; 785  :     LPVOID                  pvBaseAddress;
; 786  : 
; 787  :     DPF_ENTER();
; 788  :     AutoIrql();

  00012	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 789  : 
; 790  : #ifdef DEBUG
; 791  : 
; 792  :     // 
; 793  :     // Make sure no memory is still being used
; 794  :     //
; 795  :     
; 796  :     for(pleEntry = m_lstRuns.Flink; pleEntry != &m_lstRuns; pleEntry = pleEntry->Flink)

  0001a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00020	89 55 f4	 mov	 DWORD PTR _pleEntry$[ebp], edx
  00023	eb 08		 jmp	 SHORT $L35775
$L35776:
  00025	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d f4	 mov	 DWORD PTR _pleEntry$[ebp], ecx
$L35775:
  0002d	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00030	83 c2 10	 add	 edx, 16			; 00000010H
  00033	39 55 f4	 cmp	 DWORD PTR _pleEntry$[ebp], edx
  00036	74 2c		 je	 SHORT $L35777

; 797  :     {
; 798  :         pMarkerNode = CONTAINING_RECORD(pleEntry, SLOPRUNMARKER, leListEntry);

  00038	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  0003b	89 45 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], eax

; 799  : 
; 800  :         ASSERT(!pMarkerNode->fAllocated);

  0003e	68 20 03 00 00	 push	 800			; 00000320H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@ENDNGINI@?$CBpMarkerNode?9?$DOfAllocated?$AA@
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  00050	33 d2		 xor	 edx, edx
  00052	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00056	0f 95 c2	 setne	 dl
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 801  :     }

  00062	eb c1		 jmp	 SHORT $L35776
$L35777:

; 802  : 
; 803  : #endif // DEBUG
; 804  : 
; 805  :     //
; 806  :     // Free the global pointer
; 807  :     //
; 808  :     
; 809  :     ASSERT(this == m_pSlopMemoryHeap);

  00064	68 29 03 00 00	 push	 809			; 00000329H
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HJCNDBJC@this?5?$DN?$DN?5m_pSlopMemoryHeap?$AA@
  00073	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00076	33 c9		 xor	 ecx, ecx
  00078	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?m_pSlopMemoryHeap@CMcpxSlopMemoryHeap@DirectSound@@2PAV12@A ; DirectSound::CMcpxSlopMemoryHeap::m_pSlopMemoryHeap
  0007e	0f 95 c1	 setne	 cl
  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00087	83 c4 10	 add	 esp, 16			; 00000010H

; 810  :     m_pSlopMemoryHeap = NULL;

  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pSlopMemoryHeap@CMcpxSlopMemoryHeap@DirectSound@@2PAV12@A, 0 ; DirectSound::CMcpxSlopMemoryHeap::m_pSlopMemoryHeap
$L35785:

; 811  : 
; 812  :     //
; 813  :     // Free memory owned by the heap
; 814  :     //
; 815  : 
; 816  :     while((pleEntry = RemoveHeadList(&m_lstEntries)) != &m_lstEntries)

  00094	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList
  000a0	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  000a3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	83 c1 08	 add	 ecx, 8
  000a9	39 4d f4	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  000ac	74 27		 je	 SHORT $L35786

; 817  :     {
; 818  :         pEntryNode = CONTAINING_RECORD(pleEntry, SLOPMEMENTRY, leListEntry);

  000ae	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  000b1	89 55 f0	 mov	 DWORD PTR _pEntryNode$[ebp], edx

; 819  :         pvBaseAddress = pEntryNode->pvBaseAddress;

  000b4	8b 45 f0	 mov	 eax, DWORD PTR _pEntryNode$[ebp]
  000b7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ba	89 4d f8	 mov	 DWORD PTR _pvBaseAddress$[ebp], ecx

; 820  :         
; 821  :         PHYSFREE(pvBaseAddress);

  000bd	83 7d f8 00	 cmp	 DWORD PTR _pvBaseAddress$[ebp], 0
  000c1	74 10		 je	 SHORT $L35791
  000c3	8b 55 f8	 mov	 edx, DWORD PTR _pvBaseAddress$[ebp]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 ?TrackingPhysicalFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPhysicalFree
  000cc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pvBaseAddress$[ebp], 0
$L35791:

; 822  :     }

  000d3	eb bf		 jmp	 SHORT $L35785
$L35786:

; 823  : 
; 824  :     //
; 825  :     // Reset tracking values
; 826  :     //
; 827  : 
; 828  :     ASSERT(!m_dwUsed);

  000d5	68 3c 03 00 00	 push	 828			; 0000033cH
  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DCOKMFNA@?$CBm_dwUsed?$AA@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  000e9	33 c9		 xor	 ecx, ecx
  000eb	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ee	0f 95 c1	 setne	 cl
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000f7	83 c4 10	 add	 esp, 16			; 00000010H

; 829  : 
; 830  :     m_dwAvailable = 0;

  000fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_dwAvailable@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwAvailable
  00100	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 831  :     m_dwUsed = 0;

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  0010b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 832  : 
; 833  :     DPF_LEAVE_VOID();
; 834  : }

  00111	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00114	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00119	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
??1CMcpxSlopMemoryHeap@DirectSound@@UAE@XZ ENDP		; DirectSound::CMcpxSlopMemoryHeap::~CMcpxSlopMemoryHeap
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 77   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 78   :         Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 79   :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 82   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   :         Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 84   :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::~CAutoIrql
DSOUND	ENDS
PUBLIC	?AddRun@CMcpxSlopMemoryHeap@DirectSound@@QAEHPAXKK@Z ; DirectSound::CMcpxSlopMemoryHeap::AddRun
PUBLIC	?CreateMarker@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAXKPAU_LIST_ENTRY@@@Z ; DirectSound::CMcpxSlopMemoryHeap::CreateMarker
PUBLIC	??_C@_0BB@IJHIFFPC@nLength?5?$DO?$DN?5nUsed?$AA@ ; `string'
PUBLIC	??_C@_0BM@NKOGOBDE@CMcpxSlopMemoryHeap?3?3AddRun?$AA@ ; `string'
PUBLIC	??_C@_0HM@DHDLHGJJ@Added?5?$CFx?5to?5the?5slop?5heap?5?$CIentry@ ; `string'
;	COMDAT ??_C@_0BB@IJHIFFPC@nLength?5?$DO?$DN?5nUsed?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
DSOUND_RD	SEGMENT
??_C@_0BB@IJHIFFPC@nLength?5?$DO?$DN?5nUsed?$AA@ DB 'nLength >= nUsed', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@NKOGOBDE@CMcpxSlopMemoryHeap?3?3AddRun?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@NKOGOBDE@CMcpxSlopMemoryHeap?3?3AddRun?$AA@ DB 'CMcpxSlopMemory'
	DB	'Heap::AddRun', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HM@DHDLHGJJ@Added?5?$CFx?5to?5the?5slop?5heap?5?$CIentry@
DSOUND_RD	SEGMENT
??_C@_0HM@DHDLHGJJ@Added?5?$CFx?5to?5the?5slop?5heap?5?$CIentry@ DB 'Adde'
	DB	'd %x to the slop heap (entry %x, run marker %x, length %lu, %'
	DB	'lu bytes used for tracking, %lu bytes used for run marker)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRun@CMcpxSlopMemoryHeap@DirectSound@@QAEHPAXKK@Z
DSOUND	SEGMENT
_this$ = -32
$T36373 = -28
___AutoIrql$ = -24
_pRunMarker$ = -16
_nSlopLength$ = -12
_fOwned$ = -8
_pEntry$ = -4
_pvBaseAddress$ = 8
_nLength$ = 12
_nUsed$ = 16
?AddRun@CMcpxSlopMemoryHeap@DirectSound@@QAEHPAXKK@Z PROC NEAR ; DirectSound::CMcpxSlopMemoryHeap::AddRun, COMDAT
; _this$ = ecx

; 867  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 868  :     DWORD                   nSlopLength;
; 869  :     LPSLOPRUNMARKER         pRunMarker;
; 870  :     LPSLOPMEMENTRY          pEntry;
; 871  :     BOOL                    fOwned;
; 872  :     
; 873  :     DPF_ENTER();
; 874  :     AutoIrql();

  00009	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 875  : 
; 876  :     //
; 877  :     // Make sure the run is large enough to hold the tracking entry, at least
; 878  :     // one run marker and still have some space left over for data.
; 879  :     //
; 880  : 
; 881  :     ASSERT(nLength >= nUsed);

  00011	68 71 03 00 00	 push	 881			; 00000371H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IJHIFFPC@nLength?5?$DO?$DN?5nUsed?$AA@
  00020	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00023	3b 45 10	 cmp	 eax, DWORD PTR _nUsed$[ebp]
  00026	1b c9		 sbb	 ecx, ecx
  00028	f7 d9		 neg	 ecx
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 882  :     nSlopLength = nLength - nUsed;

  00033	8b 55 0c	 mov	 edx, DWORD PTR _nLength$[ebp]
  00036	2b 55 10	 sub	 edx, DWORD PTR _nUsed$[ebp]
  00039	89 55 f4	 mov	 DWORD PTR _nSlopLength$[ebp], edx

; 883  : 
; 884  :     if(fOwned = (nSlopLength > sizeof(*pEntry) + sizeof(*pRunMarker) + m_dwUsageThreshold))

  0003c	b8 5c 00 00 00	 mov	 eax, 92			; 0000005cH
  00041	3b 45 f4	 cmp	 eax, DWORD PTR _nSlopLength$[ebp]
  00044	1b c9		 sbb	 ecx, ecx
  00046	f7 d9		 neg	 ecx
  00048	89 4d f8	 mov	 DWORD PTR _fOwned$[ebp], ecx
  0004b	83 7d f8 00	 cmp	 DWORD PTR _fOwned$[ebp], 0
  0004f	0f 84 c3 00 00
	00		 je	 $L35804

; 885  :     {
; 886  :         //
; 887  :         // Add the allocation to the entry list so we can free it later.  
; 888  :         // We'll use the first part of the unused memory as the entry marker
; 889  :         //
; 890  : 
; 891  :         pEntry = (LPSLOPMEMENTRY)((LPBYTE)pvBaseAddress + nUsed);

  00055	8b 55 08	 mov	 edx, DWORD PTR _pvBaseAddress$[ebp]
  00058	03 55 10	 add	 edx, DWORD PTR _nUsed$[ebp]
  0005b	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx

; 892  : 
; 893  :         pEntry->pvBaseAddress = pvBaseAddress;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  00064	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 894  : 
; 895  :         InsertTailListUninit(&m_lstEntries, &pEntry->leListEntry);

  00067	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	83 c0 08	 add	 eax, 8
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailListUninit

; 896  : 
; 897  :         //
; 898  :         // Initialize a run marker immediately after the tracking entry and
; 899  :         // add it to the run list.
; 900  :         //
; 901  : 
; 902  :         pRunMarker = CreateMarker(pEntry + 1, nSlopLength - sizeof(*pEntry), &m_lstRuns);

  00077	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	83 c1 10	 add	 ecx, 16			; 00000010H
  0007d	51		 push	 ecx
  0007e	8b 55 f4	 mov	 edx, DWORD PTR _nSlopLength$[ebp]
  00081	83 ea 0c	 sub	 edx, 12			; 0000000cH
  00084	52		 push	 edx
  00085	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00088	83 c0 0c	 add	 eax, 12			; 0000000cH
  0008b	50		 push	 eax
  0008c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?CreateMarker@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAXKPAU_LIST_ENTRY@@@Z ; DirectSound::CMcpxSlopMemoryHeap::CreateMarker
  00094	89 45 f0	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 903  : 
; 904  :         if(m_pLargestFreeRunMarker)

  00097	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0009e	74 1c		 je	 SHORT $L35807

; 905  :         {
; 906  :             if(pRunMarker->nLength > m_pLargestFreeRunMarker->nLength)

  000a0	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000a9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ac	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  000af	76 09		 jbe	 SHORT $L35808

; 907  :             {
; 908  :                 m_pLargestFreeRunMarker = pRunMarker;

  000b1	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 4d f0	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000b7	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$L35808:

; 909  :             }
; 910  :         }
; 911  :         else

  000ba	eb 09		 jmp	 SHORT $L35809
$L35807:

; 912  :         {
; 913  :             m_pLargestFreeRunMarker = pRunMarker;

  000bc	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000bf	8b 45 f0	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000c2	89 42 18	 mov	 DWORD PTR [edx+24], eax
$L35809:

; 914  :         }
; 915  : 
; 916  :         m_dwAvailable += nLength;

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwAvailable@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwAvailable
  000cb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cd	03 55 0c	 add	 edx, DWORD PTR _nLength$[ebp]
  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwAvailable@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwAvailable
  000d5	89 10		 mov	 DWORD PTR [eax], edx

; 917  : 
; 918  :         DPF_MEM_HEAP("Added %x to the slop heap (entry %x, run marker %x, length %lu, %lu bytes used for tracking, %lu bytes used for run marker)", pvBaseAddress, pEntry, pRunMarker, nSlopLength, sizeof(*pEntry), sizeof(*pRunMarker));

  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NKOGOBDE@CMcpxSlopMemoryHeap?3?3AddRun?$AA@
  000e1	68 96 03 00 00	 push	 918			; 00000396H
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  000eb	6a 05		 push	 5
  000ed	6a 09		 push	 9
  000ef	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000f4	83 c4 18	 add	 esp, 24			; 00000018H
  000f7	6a 10		 push	 16			; 00000010H
  000f9	6a 0c		 push	 12			; 0000000cH
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR _nSlopLength$[ebp]
  000fe	51		 push	 ecx
  000ff	8b 55 f0	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00102	52		 push	 edx
  00103	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00106	50		 push	 eax
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _pvBaseAddress$[ebp]
  0010a	51		 push	 ecx
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0HM@DHDLHGJJ@Added?5?$CFx?5to?5the?5slop?5heap?5?$CIentry@
  00110	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00115	83 c4 1c	 add	 esp, 28			; 0000001cH
$L35804:

; 919  :     }
; 920  : 
; 921  :     DPF_LEAVE(fOwned);
; 922  : 
; 923  :     return fOwned;

  00118	8b 55 f8	 mov	 edx, DWORD PTR _fOwned$[ebp]
  0011b	89 55 e4	 mov	 DWORD PTR $T36373[ebp], edx
  0011e	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00121	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00126	8b 45 e4	 mov	 eax, DWORD PTR $T36373[ebp]

; 924  : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 0c 00	 ret	 12			; 0000000cH
?AddRun@CMcpxSlopMemoryHeap@DirectSound@@QAEHPAXKK@Z ENDP ; DirectSound::CMcpxSlopMemoryHeap::AddRun
DSOUND	ENDS
PUBLIC	??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\heap.h
DSOUND_RD	SEGMENT
??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\heap.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@ DB 'n'
	DB	'Length > sizeof(*pRunMarker)', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CreateMarker@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAXKPAU_LIST_ENTRY@@@Z
DSOUND	SEGMENT
_this$ = -8
_pRunMarker$ = -4
_pvBaseAddress$ = 8
_nLength$ = 12
_plePrevEntry$ = 16
?CreateMarker@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAXKPAU_LIST_ENTRY@@@Z PROC NEAR ; DirectSound::CMcpxSlopMemoryHeap::CreateMarker, COMDAT
; _this$ = ecx

; 163  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 164  :         LPSLOPRUNMARKER         pRunMarker  = (LPSLOPRUNMARKER)pvBaseAddress;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pvBaseAddress$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 165  :     
; 166  :         ASSERT(nLength > sizeof(*pRunMarker));

  0000f	68 a6 00 00 00	 push	 166			; 000000a6H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
  0001e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00023	3b 4d 0c	 cmp	 ecx, DWORD PTR _nLength$[ebp]
  00026	1b d2		 sbb	 edx, edx
  00028	42		 inc	 edx
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 167  : 
; 168  :         InsertHeadListUninit(plePrevEntry, &pRunMarker->leListEntry);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00035	50		 push	 eax
  00036	8b 4d 10	 mov	 ecx, DWORD PTR _plePrevEntry$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertHeadListUninit

; 169  : 
; 170  :         pRunMarker->nLength = nLength;

  0003f	8b 55 fc	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00042	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  00045	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 171  :         pRunMarker->dwSignature = 0;

  00048	8b 4d fc	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0004b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 172  : 
; 173  :         return pRunMarker;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _pRunMarker$[ebp]

; 174  :     }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?CreateMarker@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAXKPAU_LIST_ENTRY@@@Z ENDP ; DirectSound::CMcpxSlopMemoryHeap::CreateMarker
DSOUND	ENDS
PUBLIC	??_C@_0CM@HIFFJDIO@Split?5memory?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5a@ ; `string'
PUBLIC	??_C@_0BP@IKOBCBBA@Allocating?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ ; `string'
PUBLIC	?Alloc@CMcpxSlopMemoryHeap@DirectSound@@QAEPAXK@Z ; DirectSound::CMcpxSlopMemoryHeap::Alloc
PUBLIC	??_C@_0BL@OJLMAIAO@CMcpxSlopMemoryHeap?3?3Alloc?$AA@ ; `string'
;	COMDAT ??_C@_0BL@OJLMAIAO@CMcpxSlopMemoryHeap?3?3Alloc?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\heap.cpp
DSOUND_RD	SEGMENT
??_C@_0BL@OJLMAIAO@CMcpxSlopMemoryHeap?3?3Alloc?$AA@ DB 'CMcpxSlopMemoryH'
	DB	'eap::Alloc', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@HIFFJDIO@Split?5memory?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5a@
DSOUND_RD	SEGMENT
??_C@_0CM@HIFFJDIO@Split?5memory?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5a@ DB 'S'
	DB	'plit memory run into %x (%lu) and %x (%lu)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@IKOBCBBA@Allocating?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@IKOBCBBA@Allocating?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ DB 'A'
	DB	'llocating memory run %x (%lu)', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Alloc@CMcpxSlopMemoryHeap@DirectSound@@QAEPAXK@Z
DSOUND	SEGMENT
tv190 = -32
_this$ = -28
$T36380 = -24
___AutoIrql$ = -20
_pleEntry$ = -12
_pRunMarker$ = -8
_pMarkerNode$ = -4
_nLength$ = 8
?Alloc@CMcpxSlopMemoryHeap@DirectSound@@QAEPAXK@Z PROC NEAR ; DirectSound::CMcpxSlopMemoryHeap::Alloc, COMDAT
; _this$ = ecx

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 951  :     LPSLOPRUNMARKER         pRunMarker      = NULL;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pRunMarker$[ebp], 0

; 952  :     LPSLOPRUNMARKER         pMarkerNode;
; 953  :     PLIST_ENTRY             pleEntry;
; 954  : 
; 955  :     DPF_ENTER();
; 956  :     AutoIrql();

  00010	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 957  : 
; 958  :     //
; 959  :     // The length must include the space to hold the run marker
; 960  :     //
; 961  : 
; 962  :     nLength += sizeof(SLOPRUNMARKER);

  00018	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  0001b	83 c0 10	 add	 eax, 16			; 00000010H
  0001e	89 45 08	 mov	 DWORD PTR _nLength$[ebp], eax

; 963  : 
; 964  :     //
; 965  :     // Check the largest available run length to see if we can service
; 966  :     // the request
; 967  :     //
; 968  : 
; 969  :     if(m_pLargestFreeRunMarker)

  00021	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00028	0f 84 0a 02 00
	00		 je	 $L35822

; 970  :     {
; 971  :         if(m_pLargestFreeRunMarker->nLength >= nLength)

  0002e	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00034	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00037	3b 4d 08	 cmp	 ecx, DWORD PTR _nLength$[ebp]
  0003a	0f 82 f8 01 00
	00		 jb	 $L35822

; 972  :         {
; 973  :             //
; 974  :             // Find a free run that is as close as possible to the requested element
; 975  :             // count.  This will help to reduce fragmentation.
; 976  :             //
; 977  : 
; 978  :             for(pleEntry = m_lstRuns.Flink; pleEntry != &m_lstRuns; pleEntry = pleEntry->Flink)

  00040	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00046	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  00049	eb 08		 jmp	 SHORT $L35824
$L35825:
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00050	89 55 f4	 mov	 DWORD PTR _pleEntry$[ebp], edx
$L35824:
  00053	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 c0 10	 add	 eax, 16			; 00000010H
  00059	39 45 f4	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  0005c	74 53		 je	 SHORT $L35826

; 979  :             {
; 980  :                 AssertValidEntryList(pleEntry, ASSERT_IN_LIST);

  0005e	68 d4 03 00 00	 push	 980			; 000003d4H
  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00068	6a 01		 push	 1
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 981  : 
; 982  :                 pMarkerNode = CONTAINING_RECORD(pleEntry, SLOPRUNMARKER, leListEntry);

  00073	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00076	89 55 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], edx

; 983  :             
; 984  :                 if(!pMarkerNode->fAllocated)

  00079	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  0007c	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00080	75 2d		 jne	 SHORT $L35831

; 985  :                 {
; 986  :                     if(pMarkerNode->nLength >= nLength)

  00082	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  00085	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00088	3b 55 08	 cmp	 edx, DWORD PTR _nLength$[ebp]
  0008b	72 22		 jb	 SHORT $L35831

; 987  :                     {
; 988  :                         if(!pRunMarker)

  0008d	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  00091	75 08		 jne	 SHORT $L35833

; 989  :                         {
; 990  :                             pRunMarker = pMarkerNode;

  00093	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  00096	89 45 f8	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 991  :                         }
; 992  :                         else if(pMarkerNode->nLength < pRunMarker->nLength)

  00099	eb 14		 jmp	 SHORT $L35831
$L35833:
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  0009e	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000a1	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000a4	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000a7	73 06		 jae	 SHORT $L35831

; 993  :                         {
; 994  :                             pRunMarker = pMarkerNode;

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  000ac	89 4d f8	 mov	 DWORD PTR _pRunMarker$[ebp], ecx
$L35831:

; 995  :                         }
; 996  :                     }
; 997  :                 }
; 998  :             }

  000af	eb 9a		 jmp	 SHORT $L35825
$L35826:

; 999  : 
; 1000 :             //
; 1001 :             // If we're using the whole run, just flag it as allocated.  If not,
; 1002 :             // create a new marker from the remaining buffer and add it to the 
; 1003 :             // list.  We're only using a single list so that runs can be broken 
; 1004 :             // and coalesced without having to walk the list.
; 1005 :             //
; 1006 : 
; 1007 :             if(pRunMarker)

  000b1	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  000b5	0f 84 be 00 00
	00		 je	 $L35836

; 1008 :             {
; 1009 :                 if(nLength + sizeof(*pRunMarker) + m_dwUsageThreshold < pRunMarker->nLength)

  000bb	8b 55 08	 mov	 edx, DWORD PTR _nLength$[ebp]
  000be	83 c2 50	 add	 edx, 80			; 00000050H
  000c1	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000c4	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  000c7	73 6e		 jae	 SHORT $L35837

; 1010 :                 {
; 1011 :                     pMarkerNode = CreateMarker((LPBYTE)pRunMarker + nLength, pRunMarker->nLength - nLength, &pRunMarker->leListEntry);

  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000cc	51		 push	 ecx
  000cd	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000d0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000d3	2b 45 08	 sub	 eax, DWORD PTR _nLength$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000da	03 4d 08	 add	 ecx, DWORD PTR _nLength$[ebp]
  000dd	51		 push	 ecx
  000de	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?CreateMarker@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAXKPAU_LIST_ENTRY@@@Z ; DirectSound::CMcpxSlopMemoryHeap::CreateMarker
  000e6	89 45 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], eax

; 1012 : 
; 1013 :                     pRunMarker->nLength = nLength;

  000e9	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000ec	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  000ef	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1014 : 
; 1015 :                     DPF_MEM_HEAP("Split memory run into %x (%lu) and %x (%lu)", pRunMarker, pRunMarker->nLength, pMarkerNode, pMarkerNode->nLength);

  000f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OJLMAIAO@CMcpxSlopMemoryHeap?3?3Alloc?$AA@
  000fc	68 f7 03 00 00	 push	 1015			; 000003f7H
  00101	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00106	6a 05		 push	 5
  00108	6a 09		 push	 9
  0010a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0010f	83 c4 18	 add	 esp, 24			; 00000018H
  00112	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  00115	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00118	52		 push	 edx
  00119	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00120	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00123	52		 push	 edx
  00124	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00127	50		 push	 eax
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@HIFFJDIO@Split?5memory?5run?5into?5?$CFx?5?$CI?$CFlu?$CJ?5a@
  0012d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00132	83 c4 14	 add	 esp, 20			; 00000014H

; 1016 :                 }
; 1017 :                 else

  00135	eb 38		 jmp	 SHORT $L35841
$L35837:

; 1018 :                 {
; 1019 :                     DPF_MEM_HEAP("Allocating memory run %x (%lu)", pRunMarker, pRunMarker->nLength);

  00137	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0013c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OJLMAIAO@CMcpxSlopMemoryHeap?3?3Alloc?$AA@
  00141	68 fb 03 00 00	 push	 1019			; 000003fbH
  00146	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0014b	6a 05		 push	 5
  0014d	6a 09		 push	 9
  0014f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00154	83 c4 18	 add	 esp, 24			; 00000018H
  00157	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0015a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0015d	52		 push	 edx
  0015e	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00161	50		 push	 eax
  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@IKOBCBBA@Allocating?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
  00167	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L35841:

; 1020 :                 }
; 1021 : 
; 1022 :                 pRunMarker->dwSignature = DSOUND_ALLOCATOR_SLOP;

  0016f	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00172	c7 41 0c 73 6c
	6f 70		 mov	 DWORD PTR [ecx+12], 1886350451 ; 706f6c73H
$L35836:

; 1023 :             }
; 1024 : 
; 1025 :             //
; 1026 :             // Update the largest run member
; 1027 :             //
; 1028 : 
; 1029 :             if(pRunMarker)

  00179	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  0017d	0f 84 87 00 00
	00		 je	 $L35843

; 1030 :             {
; 1031 :                 if(pRunMarker == m_pLargestFreeRunMarker)

  00183	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00186	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00189	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  0018c	75 7c		 jne	 SHORT $L35843

; 1032 :                 {
; 1033 :                     m_pLargestFreeRunMarker = NULL;

  0018e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 1034 :                     
; 1035 :                     for(pleEntry = m_lstRuns.Flink; pleEntry != &m_lstRuns; pleEntry = pleEntry->Flink)

  00198	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0019b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0019e	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  001a1	eb 08		 jmp	 SHORT $L35845
$L35846:
  001a3	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  001a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001a8	89 55 f4	 mov	 DWORD PTR _pleEntry$[ebp], edx
$L35845:
  001ab	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  001ae	83 c0 10	 add	 eax, 16			; 00000010H
  001b1	39 45 f4	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  001b4	74 54		 je	 SHORT $L35843

; 1036 :                     {
; 1037 :                         AssertValidEntryList(pleEntry, ASSERT_IN_LIST);

  001b6	68 0d 04 00 00	 push	 1037			; 0000040dH
  001bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  001c0	6a 01		 push	 1
  001c2	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  001c5	51		 push	 ecx
  001c6	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1038 : 
; 1039 :                         pMarkerNode = CONTAINING_RECORD(pleEntry, SLOPRUNMARKER, leListEntry);

  001cb	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  001ce	89 55 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], edx

; 1040 :             
; 1041 :                         if(!pMarkerNode->fAllocated)

  001d1	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  001d4	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  001d8	75 2e		 jne	 SHORT $L35852

; 1042 :                         {
; 1043 :                             if(!m_pLargestFreeRunMarker)

  001da	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  001e1	75 0b		 jne	 SHORT $L35853

; 1044 :                             {
; 1045 :                                 m_pLargestFreeRunMarker = pMarkerNode;

  001e3	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  001e6	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  001e9	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 1046 :                             }
; 1047 :                             else if(pMarkerNode->nLength > m_pLargestFreeRunMarker->nLength)

  001ec	eb 1a		 jmp	 SHORT $L35852
$L35853:
  001ee	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001f1	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  001f4	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  001f7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001fa	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  001fd	76 09		 jbe	 SHORT $L35852

; 1048 :                             {
; 1049 :                                 m_pLargestFreeRunMarker = pMarkerNode;

  001ff	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00202	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  00205	89 42 18	 mov	 DWORD PTR [edx+24], eax
$L35852:

; 1050 :                             }
; 1051 :                         }
; 1052 :                     }

  00208	eb 99		 jmp	 SHORT $L35846
$L35843:

; 1053 :                 }                    
; 1054 :             }
; 1055 : 
; 1056 :             //
; 1057 :             // Update the amount of memory recovered
; 1058 :             //
; 1059 : 
; 1060 :             if(pRunMarker)

  0020a	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  0020e	74 16		 je	 SHORT $L35856

; 1061 :             {
; 1062 :                 m_dwUsed += pRunMarker->nLength;

  00210	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  00216	8b 11		 mov	 edx, DWORD PTR [ecx]
  00218	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  0021b	03 50 08	 add	 edx, DWORD PTR [eax+8]
  0021e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  00224	89 11		 mov	 DWORD PTR [ecx], edx
$L35856:

; 1063 :             }
; 1064 : 
; 1065 :             //
; 1066 :             // AddRef ourselves so we're always around as long as allocated
; 1067 :             // memory is.
; 1068 :             //
; 1069 : 
; 1070 :             if(pRunMarker)

  00226	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  0022a	74 0c		 je	 SHORT $L35822

; 1071 :             {
; 1072 :                 AddRef();

  0022c	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0022f	8b 02		 mov	 eax, DWORD PTR [edx]
  00231	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00234	51		 push	 ecx
  00235	ff 50 04	 call	 DWORD PTR [eax+4]
$L35822:

; 1073 :             }
; 1074 :         }
; 1075 :     }
; 1076 : 
; 1077 :     DPF_LEAVE(pRunMarker ? pRunMarker + 1 : NULL);
; 1078 : 
; 1079 :     return pRunMarker ? pRunMarker + 1 : NULL;

  00238	83 7d f8 00	 cmp	 DWORD PTR _pRunMarker$[ebp], 0
  0023c	74 0b		 je	 SHORT $L36381
  0023e	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00241	83 c2 10	 add	 edx, 16			; 00000010H
  00244	89 55 e0	 mov	 DWORD PTR tv190[ebp], edx
  00247	eb 07		 jmp	 SHORT $L36382
$L36381:
  00249	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$L36382:
  00250	8b 45 e0	 mov	 eax, DWORD PTR tv190[ebp]
  00253	89 45 e8	 mov	 DWORD PTR $T36380[ebp], eax
  00256	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00259	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0025e	8b 45 e8	 mov	 eax, DWORD PTR $T36380[ebp]

; 1080 : }

  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c2 04 00	 ret	 4
?Alloc@CMcpxSlopMemoryHeap@DirectSound@@QAEPAXK@Z ENDP	; DirectSound::CMcpxSlopMemoryHeap::Alloc
DSOUND	ENDS
PUBLIC	??_C@_0DB@NIHOPDML@DSOUND_ALLOCATOR_SLOP?5?$DN?$DN?5pRunMar@ ; `string'
PUBLIC	??_C@_0BK@PMMOCEFN@CMcpxSlopMemoryHeap?3?3Free?$AA@ ; `string'
PUBLIC	??_C@_0BM@NGDNJECG@Freeing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CA@OGPDEANK@m_dwUsed?5?$DO?$DN?5pRunMarker?9?$DOnLength?$AA@ ; `string'
PUBLIC	?Free@CMcpxSlopMemoryHeap@DirectSound@@QAEXPAX@Z ; DirectSound::CMcpxSlopMemoryHeap::Free
PUBLIC	?CoalesceRuns@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAU3@0@Z ; DirectSound::CMcpxSlopMemoryHeap::CoalesceRuns
;	COMDAT ??_C@_0DB@NIHOPDML@DSOUND_ALLOCATOR_SLOP?5?$DN?$DN?5pRunMar@
DSOUND_RD	SEGMENT
??_C@_0DB@NIHOPDML@DSOUND_ALLOCATOR_SLOP?5?$DN?$DN?5pRunMar@ DB 'DSOUND_A'
	DB	'LLOCATOR_SLOP == pRunMarker->dwSignature', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@PMMOCEFN@CMcpxSlopMemoryHeap?3?3Free?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@PMMOCEFN@CMcpxSlopMemoryHeap?3?3Free?$AA@ DB 'CMcpxSlopMemoryHe'
	DB	'ap::Free', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@NGDNJECG@Freeing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@NGDNJECG@Freeing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@ DB 'F'
	DB	'reeing memory run %x (%lu)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OGPDEANK@m_dwUsed?5?$DO?$DN?5pRunMarker?9?$DOnLength?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@OGPDEANK@m_dwUsed?5?$DO?$DN?5pRunMarker?9?$DOnLength?$AA@ DB 'm'
	DB	'_dwUsed >= pRunMarker->nLength', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Free@CMcpxSlopMemoryHeap@DirectSound@@QAEXPAX@Z
DSOUND	SEGMENT
_this$ = -24
___AutoIrql$ = -20
_pleEntry$ = -12
_pRunMarker$ = -8
_pMarkerNode$ = -4
_pvBaseAddress$ = 8
?Free@CMcpxSlopMemoryHeap@DirectSound@@QAEXPAX@Z PROC NEAR ; DirectSound::CMcpxSlopMemoryHeap::Free, COMDAT
; _this$ = ecx

; 1106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1107 :     LPSLOPRUNMARKER         pRunMarker  = (LPSLOPRUNMARKER)pvBaseAddress - 1;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pvBaseAddress$[ebp]
  0000c	83 e8 10	 sub	 eax, 16			; 00000010H
  0000f	89 45 f8	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 1108 :     PLIST_ENTRY             pleEntry;
; 1109 :     LPSLOPRUNMARKER         pMarkerNode;
; 1110 :     
; 1111 :     DPF_ENTER();
; 1112 :     AutoIrql();

  00012	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1113 : 
; 1114 :     ASSERT(DSOUND_ALLOCATOR_SLOP == pRunMarker->dwSignature);

  0001a	68 5a 04 00 00	 push	 1114			; 0000045aH
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@NIHOPDML@DSOUND_ALLOCATOR_SLOP?5?$DN?$DN?5pRunMar@
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0002c	33 d2		 xor	 edx, edx
  0002e	81 79 0c 73 6c
	6f 70		 cmp	 DWORD PTR [ecx+12], 1886350451 ; 706f6c73H
  00035	0f 95 c2	 setne	 dl
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 1115 : 
; 1116 :     DPF_MEM_HEAP("Freeing memory run %x (%lu)", pRunMarker, pRunMarker->nLength);

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PMMOCEFN@CMcpxSlopMemoryHeap?3?3Free?$AA@
  0004b	68 5c 04 00 00	 push	 1116			; 0000045cH
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00055	6a 05		 push	 5
  00057	6a 09		 push	 9
  00059	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00064	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00067	51		 push	 ecx
  00068	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  0006b	52		 push	 edx
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NGDNJECG@Freeing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?$AA@
  00071	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1117 : 
; 1118 :     //
; 1119 :     // Update the amount of memory recovered
; 1120 :     //
; 1121 : 
; 1122 :     ASSERT(m_dwUsed >= pRunMarker->nLength);

  00079	68 62 04 00 00	 push	 1122			; 00000462H
  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@OGPDEANK@m_dwUsed?5?$DO?$DN?5pRunMarker?9?$DOnLength?$AA@
  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  0008d	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00090	8b 10		 mov	 edx, DWORD PTR [eax]
  00092	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00095	1b c0		 sbb	 eax, eax
  00097	f7 d8		 neg	 eax
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0009f	83 c4 10	 add	 esp, 16			; 00000010H

; 1123 :     m_dwUsed -= pRunMarker->nLength;

  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  000a8	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
  000b6	89 01		 mov	 DWORD PTR [ecx], eax

; 1124 : 
; 1125 :     //
; 1126 :     // Reset the run signature so it's flagged as free
; 1127 :     //
; 1128 : 
; 1129 :     pRunMarker->dwSignature = 0;

  000b8	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000bb	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
$L35873:

; 1130 : 
; 1131 :     //
; 1132 :     // Coalesce the run with those around it
; 1133 :     //
; 1134 : 
; 1135 :     while(TRUE)

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	85 c0		 test	 eax, eax
  000c9	74 4b		 je	 SHORT $L35885

; 1136 :     {
; 1137 :         if((pleEntry = pRunMarker->leListEntry.Flink) == &m_lstRuns)

  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d0	89 55 f4	 mov	 DWORD PTR _pleEntry$[ebp], edx
  000d3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000d6	83 c0 10	 add	 eax, 16			; 00000010H
  000d9	39 45 f4	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  000dc	75 02		 jne	 SHORT $L35875

; 1138 :         {
; 1139 :             break;

  000de	eb 36		 jmp	 SHORT $L35885
$L35875:

; 1140 :         }
; 1141 : 
; 1142 :         pMarkerNode = CONTAINING_RECORD(pleEntry, SLOPRUNMARKER, leListEntry);

  000e0	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  000e3	89 4d fc	 mov	 DWORD PTR _pMarkerNode$[ebp], ecx

; 1143 : 
; 1144 :         if(pMarkerNode->fAllocated)

  000e6	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  000e9	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  000ed	74 02		 je	 SHORT $L35880

; 1145 :         {
; 1146 :             break;

  000ef	eb 25		 jmp	 SHORT $L35885
$L35880:

; 1147 :         }
; 1148 : 
; 1149 :         if((LPBYTE)pRunMarker + pRunMarker->nLength != (LPBYTE)pMarkerNode)

  000f1	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000f4	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  000f7	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  000fa	3b 4d fc	 cmp	 ecx, DWORD PTR _pMarkerNode$[ebp]
  000fd	74 02		 je	 SHORT $L35883

; 1150 :         {
; 1151 :             break;

  000ff	eb 15		 jmp	 SHORT $L35885
$L35883:

; 1152 :         }
; 1153 : 
; 1154 :         pRunMarker = CoalesceRuns(pRunMarker, pMarkerNode);

  00101	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  00104	52		 push	 edx
  00105	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00108	50		 push	 eax
  00109	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	e8 00 00 00 00	 call	 ?CoalesceRuns@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAU3@0@Z ; DirectSound::CMcpxSlopMemoryHeap::CoalesceRuns
  00111	89 45 f8	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 1155 :     }

  00114	eb ac		 jmp	 SHORT $L35873
$L35885:

; 1156 : 
; 1157 :     while(TRUE)

  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	85 c9		 test	 ecx, ecx
  0011d	74 4c		 je	 SHORT $L35886

; 1158 :     {
; 1159 :         if((pleEntry = pRunMarker->leListEntry.Blink) == &m_lstRuns)

  0011f	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  00122	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00125	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  00128	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	83 c1 10	 add	 ecx, 16			; 00000010H
  0012e	39 4d f4	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  00131	75 02		 jne	 SHORT $L35887

; 1160 :         {
; 1161 :             break;

  00133	eb 36		 jmp	 SHORT $L35886
$L35887:

; 1162 :         }
; 1163 : 
; 1164 :         pMarkerNode = CONTAINING_RECORD(pleEntry, SLOPRUNMARKER, leListEntry);

  00135	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00138	89 55 fc	 mov	 DWORD PTR _pMarkerNode$[ebp], edx

; 1165 : 
; 1166 :         if(pMarkerNode->fAllocated)

  0013b	8b 45 fc	 mov	 eax, DWORD PTR _pMarkerNode$[ebp]
  0013e	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00142	74 02		 je	 SHORT $L35892

; 1167 :         {
; 1168 :             break;

  00144	eb 25		 jmp	 SHORT $L35886
$L35892:

; 1169 :         }
; 1170 : 
; 1171 :         if((LPBYTE)pMarkerNode + pMarkerNode->nLength != (LPBYTE)pRunMarker)

  00146	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  00149	8b 55 fc	 mov	 edx, DWORD PTR _pMarkerNode$[ebp]
  0014c	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  0014f	3b 55 f8	 cmp	 edx, DWORD PTR _pRunMarker$[ebp]
  00152	74 02		 je	 SHORT $L35895

; 1172 :         {
; 1173 :             break;

  00154	eb 15		 jmp	 SHORT $L35886
$L35895:

; 1174 :         }
; 1175 : 
; 1176 :         pRunMarker = CoalesceRuns(pMarkerNode, pRunMarker);

  00156	8b 45 f8	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00159	50		 push	 eax
  0015a	8b 4d fc	 mov	 ecx, DWORD PTR _pMarkerNode$[ebp]
  0015d	51		 push	 ecx
  0015e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	e8 00 00 00 00	 call	 ?CoalesceRuns@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAU3@0@Z ; DirectSound::CMcpxSlopMemoryHeap::CoalesceRuns
  00166	89 45 f8	 mov	 DWORD PTR _pRunMarker$[ebp], eax

; 1177 :     }

  00169	eb ab		 jmp	 SHORT $L35885
$L35886:

; 1178 : 
; 1179 :     //
; 1180 :     // Update the largest run pointer
; 1181 :     //
; 1182 : 
; 1183 :     if(m_pLargestFreeRunMarker)

  0016b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0016e	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  00172	74 1c		 je	 SHORT $L35896

; 1184 :     {
; 1185 :         if(pRunMarker->nLength > m_pLargestFreeRunMarker->nLength)

  00174	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00177	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0017a	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  0017d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00180	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00183	76 09		 jbe	 SHORT $L35897

; 1186 :         {
; 1187 :             m_pLargestFreeRunMarker = pRunMarker;

  00185	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	8b 55 f8	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  0018b	89 51 18	 mov	 DWORD PTR [ecx+24], edx
$L35897:

; 1188 :         }
; 1189 :     }
; 1190 :     else

  0018e	eb 09		 jmp	 SHORT $L35898
$L35896:

; 1191 :     {
; 1192 :         m_pLargestFreeRunMarker = pRunMarker;

  00190	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00193	8b 4d f8	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00196	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$L35898:

; 1193 :     }
; 1194 : 
; 1195 :     //
; 1196 :     // Release the reference added in Alloc
; 1197 :     //
; 1198 : 
; 1199 :     Release();

  00199	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0019c	8b 02		 mov	 eax, DWORD PTR [edx]
  0019e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	51		 push	 ecx
  001a2	ff 50 08	 call	 DWORD PTR [eax+8]

; 1200 : 
; 1201 :     DPF_LEAVE_VOID();
; 1202 : }

  001a5	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  001a8	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c2 04 00	 ret	 4
?Free@CMcpxSlopMemoryHeap@DirectSound@@QAEXPAX@Z ENDP	; DirectSound::CMcpxSlopMemoryHeap::Free
DSOUND	ENDS
PUBLIC	??_C@_0ED@KLOEHPFP@?$CILPBYTE?$CJpRunMarker?5?$CL?5pRunMarker?9@ ; `string'
PUBLIC	??_C@_0BM@IEHJELCG@?$CBpNextRunMarker?9?$DOfAllocated?$AA@ ; `string'
PUBLIC	??_C@_0CC@BOIGKEFK@CMcpxSlopMemoryHeap?3?3CoalesceRun@ ; `string'
PUBLIC	??_C@_0CM@MKMMHKFA@Coalescing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?5a@ ; `string'
;	COMDAT ??_C@_0ED@KLOEHPFP@?$CILPBYTE?$CJpRunMarker?5?$CL?5pRunMarker?9@
DSOUND_RD	SEGMENT
??_C@_0ED@KLOEHPFP@?$CILPBYTE?$CJpRunMarker?5?$CL?5pRunMarker?9@ DB '(LPB'
	DB	'YTE)pRunMarker + pRunMarker->nLength == (LPBYTE)pNextRunMarke'
	DB	'r', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEHJELCG@?$CBpNextRunMarker?9?$DOfAllocated?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IEHJELCG@?$CBpNextRunMarker?9?$DOfAllocated?$AA@ DB '!pNextRunM'
	DB	'arker->fAllocated', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@BOIGKEFK@CMcpxSlopMemoryHeap?3?3CoalesceRun@
DSOUND_RD	SEGMENT
??_C@_0CC@BOIGKEFK@CMcpxSlopMemoryHeap?3?3CoalesceRun@ DB 'CMcpxSlopMemor'
	DB	'yHeap::CoalesceRuns', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@MKMMHKFA@Coalescing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?5a@
DSOUND_RD	SEGMENT
??_C@_0CM@MKMMHKFA@Coalescing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?5a@ DB 'C'
	DB	'oalescing memory run %x (%lu) and %x (%lu)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CoalesceRuns@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAU3@0@Z
DSOUND	SEGMENT
_this$ = -4
_pRunMarker$ = 8
_pNextRunMarker$ = 12
?CoalesceRuns@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAU3@0@Z PROC NEAR ; DirectSound::CMcpxSlopMemoryHeap::CoalesceRuns, COMDAT
; _this$ = ecx

; 1231 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1232 :     DPF_ENTER();
; 1233 : 
; 1234 :     ASSERT((LPBYTE)pRunMarker + pRunMarker->nLength == (LPBYTE)pNextRunMarker);

  00007	68 d2 04 00 00	 push	 1234			; 000004d2H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@KLOEHPFP@?$CILPBYTE?$CJpRunMarker?5?$CL?5pRunMarker?9@
  00016	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  0001c	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  0001f	33 d2		 xor	 edx, edx
  00021	3b 4d 0c	 cmp	 ecx, DWORD PTR _pNextRunMarker$[ebp]
  00024	0f 95 c2	 setne	 dl
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 1235 :     ASSERT(!pRunMarker->fAllocated);

  00030	68 d3 04 00 00	 push	 1235			; 000004d3H
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CBCHBLME@?$CBpRunMarker?9?$DOfAllocated?$AA@
  0003f	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  00042	33 c9		 xor	 ecx, ecx
  00044	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00048	0f 95 c1	 setne	 cl
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 1236 :     ASSERT(!pNextRunMarker->fAllocated);

  00054	68 d4 04 00 00	 push	 1236			; 000004d4H
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IEHJELCG@?$CBpNextRunMarker?9?$DOfAllocated?$AA@
  00063	8b 55 0c	 mov	 edx, DWORD PTR _pNextRunMarker$[ebp]
  00066	33 c0		 xor	 eax, eax
  00068	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0006c	0f 95 c0	 setne	 al
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00075	83 c4 10	 add	 esp, 16			; 00000010H

; 1237 : 
; 1238 :     AssertValidEntryList(&pRunMarker->leListEntry, ASSERT_IN_LIST);

  00078	68 d6 04 00 00	 push	 1238			; 000004d6H
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00082	6a 01		 push	 1
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _pRunMarker$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1239 :     AssertValidEntryList(&pNextRunMarker->leListEntry, ASSERT_IN_LIST);

  0008d	68 d7 04 00 00	 push	 1239			; 000004d7H
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  00097	6a 01		 push	 1
  00099	8b 55 0c	 mov	 edx, DWORD PTR _pNextRunMarker$[ebp]
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1240 : 
; 1241 :     DPF_MEM_HEAP("Coalescing memory run %x (%lu) and %x (%lu)", pRunMarker, pRunMarker->nLength, pNextRunMarker, pNextRunMarker->nLength);

  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BOIGKEFK@CMcpxSlopMemoryHeap?3?3CoalesceRun@
  000ac	68 d9 04 00 00	 push	 1241			; 000004d9H
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JOKDFGED@c?3?2xbox?2private?2windows?2directx?2@
  000b6	6a 05		 push	 5
  000b8	6a 09		 push	 9
  000ba	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000bf	83 c4 18	 add	 esp, 24			; 00000018H
  000c2	8b 45 0c	 mov	 eax, DWORD PTR _pNextRunMarker$[ebp]
  000c5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c8	51		 push	 ecx
  000c9	8b 55 0c	 mov	 edx, DWORD PTR _pNextRunMarker$[ebp]
  000cc	52		 push	 edx
  000cd	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000d0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d3	51		 push	 ecx
  000d4	8b 55 08	 mov	 edx, DWORD PTR _pRunMarker$[ebp]
  000d7	52		 push	 edx
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@MKMMHKFA@Coalescing?5memory?5run?5?$CFx?5?$CI?$CFlu?$CJ?5a@
  000dd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000e2	83 c4 14	 add	 esp, 20			; 00000014H

; 1242 : 
; 1243 :     pRunMarker->nLength += pNextRunMarker->nLength;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000e8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000eb	8b 55 0c	 mov	 edx, DWORD PTR _pNextRunMarker$[ebp]
  000ee	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  000f1	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]
  000f4	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1244 :     
; 1245 :     RemoveEntryList(&pNextRunMarker->leListEntry);

  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _pNextRunMarker$[ebp]
  000fa	51		 push	 ecx
  000fb	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 1246 : 
; 1247 :     DPF_LEAVE(pRunMarker);
; 1248 : 
; 1249 :     return pRunMarker;

  00100	8b 45 08	 mov	 eax, DWORD PTR _pRunMarker$[ebp]

; 1250 : }

  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
?CoalesceRuns@CMcpxSlopMemoryHeap@DirectSound@@IAEPAUSLOPRUNMARKER@@PAU3@0@Z ENDP ; DirectSound::CMcpxSlopMemoryHeap::CoalesceRuns
DSOUND	ENDS
PUBLIC	?m_dwAvailable@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwAvailable
PUBLIC	?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
DSOUND_URW	SEGMENT
?m_dwAvailable@CMcpxSlopMemoryHeap@DirectSound@@2AAKA DD 01H DUP (?) ; DirectSound::CMcpxSlopMemoryHeap::m_dwAvailable
?m_dwUsed@CMcpxSlopMemoryHeap@DirectSound@@2AAKA DD 01H DUP (?) ; DirectSound::CMcpxSlopMemoryHeap::m_dwUsed
DSOUND_URW	ENDS
END
