; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\cipher.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_U@YAPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_V@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lfsr@@YGX_KPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?rotr@@YGXPAKKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?rotl@@YGXPAKKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XAudiopUtility_GenerateKey@@YGXPAE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XAudiopUtility_Encode@@YGHPAE0K0H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XAudiopUtility_Decode@@YGHPAE0K0H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	?lfsr@@YGX_KPAXK@Z				; lfsr
EXTRN	__aullshr:NEAR
EXTRN	__allshl:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
; File c:\xbox\private\windows\directx\dsound\tools\xcodescr\cipher.cpp
DSOUND_URW	SEGMENT
?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA DQ 01H DUP (?)	; `lfsr'::`2'::ShiftReg
; Function compile flags: /Odt
DSOUND_URW	ENDS
;	COMDAT ?lfsr@@YGX_KPAXK@Z
DSOUND	SEGMENT
_seed$ = 8
_Contents$ = 16
_Length$ = 20
?lfsr@@YGX_KPAXK@Z PROC NEAR				; lfsr, COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 11   : 	static ULONGLONG ShiftReg;
; 12   : 
; 13   : 	if (seed != 0 ) {

  00005	8b 45 08	 mov	 eax, DWORD PTR _seed$[ebp]
  00008	0b 45 0c	 or	 eax, DWORD PTR _seed$[ebp+4]
  0000b	85 c0		 test	 eax, eax
  0000d	74 12		 je	 SHORT $L35573

; 14   : 		ShiftReg = seed;

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _seed$[ebp]
  00012	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA, ecx
  00018	8b 55 0c	 mov	 edx, DWORD PTR _seed$[ebp+4]
  0001b	89 15 04 00 00
	00		 mov	 DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA+4, edx
$L35573:

; 15   : 	}
; 16   : 
; 17   : 	ShiftReg = ((((ShiftReg >> 63) 
; 18   : 		^ (ShiftReg >> 3)
; 19   : 		^ (ShiftReg >> 2)
; 20   : 		^ (ShiftReg)) & 0x1) << 63) | (ShiftReg >> 1);

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
  00026	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA+4
  0002c	b1 3f		 mov	 cl, 63			; 0000003fH
  0002e	e8 00 00 00 00	 call	 __aullshr
  00033	8b f0		 mov	 esi, eax
  00035	8b fa		 mov	 edi, edx
  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
  0003c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA+4
  00042	b1 03		 mov	 cl, 3
  00044	e8 00 00 00 00	 call	 __aullshr
  00049	33 f0		 xor	 esi, eax
  0004b	33 fa		 xor	 edi, edx
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
  00052	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA+4
  00058	b1 02		 mov	 cl, 2
  0005a	e8 00 00 00 00	 call	 __aullshr
  0005f	33 f0		 xor	 esi, eax
  00061	33 fa		 xor	 edi, edx
  00063	33 35 00 00 00
	00		 xor	 esi, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
  00069	33 3d 04 00 00
	00		 xor	 edi, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA+4
  0006f	83 e6 01	 and	 esi, 1
  00072	83 e7 00	 and	 edi, 0
  00075	8b c6		 mov	 eax, esi
  00077	8b d7		 mov	 edx, edi
  00079	b1 3f		 mov	 cl, 63			; 0000003fH
  0007b	e8 00 00 00 00	 call	 __allshl
  00080	8b f0		 mov	 esi, eax
  00082	8b fa		 mov	 edi, edx
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
  00089	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA+4
  0008f	b1 01		 mov	 cl, 1
  00091	e8 00 00 00 00	 call	 __aullshr
  00096	0b f0		 or	 esi, eax
  00098	0b fa		 or	 edi, edx
  0009a	89 35 00 00 00
	00		 mov	 DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA, esi
  000a0	89 3d 04 00 00
	00		 mov	 DWORD PTR ?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA+4, edi

; 21   : 
; 22   : 	if (Contents) {

  000a6	83 7d 10 00	 cmp	 DWORD PTR _Contents$[ebp], 0
  000aa	74 15		 je	 SHORT $L35570

; 23   : 
; 24   : 		memcpy(Contents, &ShiftReg,Length);

  000ac	8b 45 14	 mov	 eax, DWORD PTR _Length$[ebp]
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:?ShiftReg@?1??lfsr@@YGX_KPAXK@Z@4_KA
  000b5	8b 4d 10	 mov	 ecx, DWORD PTR _Contents$[ebp]
  000b8	51		 push	 ecx
  000b9	e8 00 00 00 00	 call	 _memcpy
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH
$L35570:

; 25   : 	}
; 26   : 
; 27   : 
; 28   : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5d		 pop	 ebp
  000c4	c2 10 00	 ret	 16			; 00000010H
?lfsr@@YGX_KPAXK@Z ENDP					; lfsr
DSOUND	ENDS
PUBLIC	?rotr@@YGXPAKKE@Z				; rotr
; Function compile flags: /Odt
;	COMDAT ?rotr@@YGXPAKKE@Z
DSOUND	SEGMENT
tv65 = -8
_u$ = -4
_value$ = 8
_nRotBits$ = 12
_valueSize$ = 16
?rotr@@YGXPAKKE@Z PROC NEAR				; rotr, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 32   : 	union {
; 33   : 		USHORT shortV;
; 34   : 		ULONG longV;
; 35   : 		UCHAR charV;
; 36   : 	} u;
; 37   : 
; 38   : 	u.longV = *value;

  00006	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d fc	 mov	 DWORD PTR _u$[ebp], ecx

; 39   : 
; 40   : 	switch (valueSize) {

  0000e	8a 55 10	 mov	 dl, BYTE PTR _valueSize$[ebp]
  00011	88 55 f8	 mov	 BYTE PTR tv65[ebp], dl
  00014	80 7d f8 01	 cmp	 BYTE PTR tv65[ebp], 1
  00018	74 0e		 je	 SHORT $L35595
  0001a	80 7d f8 02	 cmp	 BYTE PTR tv65[ebp], 2
  0001e	74 26		 je	 SHORT $L35596
  00020	80 7d f8 04	 cmp	 BYTE PTR tv65[ebp], 4
  00024	74 3f		 je	 SHORT $L35597
  00026	eb 57		 jmp	 SHORT $L35592
$L35595:

; 41   : 	case 1:
; 42   : 		u.charV = (u.charV << nRotBits) | (u.charV >> (8-nRotBits));

  00028	0f b6 45 fc	 movzx	 eax, BYTE PTR _u$[ebp]
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _nRotBits$[ebp]
  0002f	d3 e0		 shl	 eax, cl
  00031	0f b6 55 fc	 movzx	 edx, BYTE PTR _u$[ebp]
  00035	b9 08 00 00 00	 mov	 ecx, 8
  0003a	2b 4d 0c	 sub	 ecx, DWORD PTR _nRotBits$[ebp]
  0003d	d3 fa		 sar	 edx, cl
  0003f	0b c2		 or	 eax, edx
  00041	88 45 fc	 mov	 BYTE PTR _u$[ebp], al

; 43   : 		break;

  00044	eb 39		 jmp	 SHORT $L35592
$L35596:

; 44   : 	case 2:
; 45   : 		u.shortV = (u.shortV << nRotBits) | (u.shortV >> (16-nRotBits));

  00046	0f b7 45 fc	 movzx	 eax, WORD PTR _u$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _nRotBits$[ebp]
  0004d	d3 e0		 shl	 eax, cl
  0004f	0f b7 55 fc	 movzx	 edx, WORD PTR _u$[ebp]
  00053	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00058	2b 4d 0c	 sub	 ecx, DWORD PTR _nRotBits$[ebp]
  0005b	d3 fa		 sar	 edx, cl
  0005d	0b c2		 or	 eax, edx
  0005f	66 89 45 fc	 mov	 WORD PTR _u$[ebp], ax

; 46   : 		break;

  00063	eb 1a		 jmp	 SHORT $L35592
$L35597:

; 47   : 	case 4:
; 48   : 		u.longV = (u.longV << nRotBits) | (u.longV >> (32-nRotBits));

  00065	8b 45 fc	 mov	 eax, DWORD PTR _u$[ebp]
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _nRotBits$[ebp]
  0006b	d3 e0		 shl	 eax, cl
  0006d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00072	2b 4d 0c	 sub	 ecx, DWORD PTR _nRotBits$[ebp]
  00075	8b 55 fc	 mov	 edx, DWORD PTR _u$[ebp]
  00078	d3 ea		 shr	 edx, cl
  0007a	0b c2		 or	 eax, edx
  0007c	89 45 fc	 mov	 DWORD PTR _u$[ebp], eax
$L35592:

; 49   : 		break;
; 50   : 	}
; 51   : 
; 52   : 
; 53   : 	*value = u.longV;

  0007f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _u$[ebp]
  00085	89 08		 mov	 DWORD PTR [eax], ecx

; 54   : 
; 55   : 	
; 56   : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
?rotr@@YGXPAKKE@Z ENDP					; rotr
DSOUND	ENDS
PUBLIC	?rotl@@YGXPAKKE@Z				; rotl
; Function compile flags: /Odt
;	COMDAT ?rotl@@YGXPAKKE@Z
DSOUND	SEGMENT
tv65 = -8
_u$ = -4
_value$ = 8
_nRotBits$ = 12
_valueSize$ = 16
?rotl@@YGXPAKKE@Z PROC NEAR				; rotl, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 60   : 	union {
; 61   : 		USHORT shortV;
; 62   : 		ULONG longV;
; 63   : 		UCHAR charV;
; 64   : 	} u;
; 65   : 
; 66   : 	u.longV = *value;

  00006	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d fc	 mov	 DWORD PTR _u$[ebp], ecx

; 67   : 
; 68   : 	switch (valueSize) {

  0000e	8a 55 10	 mov	 dl, BYTE PTR _valueSize$[ebp]
  00011	88 55 f8	 mov	 BYTE PTR tv65[ebp], dl
  00014	80 7d f8 01	 cmp	 BYTE PTR tv65[ebp], 1
  00018	74 0e		 je	 SHORT $L35618
  0001a	80 7d f8 02	 cmp	 BYTE PTR tv65[ebp], 2
  0001e	74 26		 je	 SHORT $L35619
  00020	80 7d f8 04	 cmp	 BYTE PTR tv65[ebp], 4
  00024	74 3f		 je	 SHORT $L35620
  00026	eb 57		 jmp	 SHORT $L35615
$L35618:

; 69   : 	case 1:
; 70   : 		u.charV = (u.charV >> nRotBits) | (u.charV << (8-nRotBits));

  00028	0f b6 45 fc	 movzx	 eax, BYTE PTR _u$[ebp]
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _nRotBits$[ebp]
  0002f	d3 f8		 sar	 eax, cl
  00031	0f b6 55 fc	 movzx	 edx, BYTE PTR _u$[ebp]
  00035	b9 08 00 00 00	 mov	 ecx, 8
  0003a	2b 4d 0c	 sub	 ecx, DWORD PTR _nRotBits$[ebp]
  0003d	d3 e2		 shl	 edx, cl
  0003f	0b c2		 or	 eax, edx
  00041	88 45 fc	 mov	 BYTE PTR _u$[ebp], al

; 71   : 		break;

  00044	eb 39		 jmp	 SHORT $L35615
$L35619:

; 72   : 	case 2:
; 73   : 		u.shortV = (u.shortV >> nRotBits) | (u.shortV << (16-nRotBits));

  00046	0f b7 45 fc	 movzx	 eax, WORD PTR _u$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _nRotBits$[ebp]
  0004d	d3 f8		 sar	 eax, cl
  0004f	0f b7 55 fc	 movzx	 edx, WORD PTR _u$[ebp]
  00053	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00058	2b 4d 0c	 sub	 ecx, DWORD PTR _nRotBits$[ebp]
  0005b	d3 e2		 shl	 edx, cl
  0005d	0b c2		 or	 eax, edx
  0005f	66 89 45 fc	 mov	 WORD PTR _u$[ebp], ax

; 74   : 		break;

  00063	eb 1a		 jmp	 SHORT $L35615
$L35620:

; 75   : 	case 4:
; 76   : 		u.longV = (u.longV >> nRotBits) | (u.longV << (32-nRotBits));

  00065	8b 45 fc	 mov	 eax, DWORD PTR _u$[ebp]
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _nRotBits$[ebp]
  0006b	d3 e8		 shr	 eax, cl
  0006d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00072	2b 4d 0c	 sub	 ecx, DWORD PTR _nRotBits$[ebp]
  00075	8b 55 fc	 mov	 edx, DWORD PTR _u$[ebp]
  00078	d3 e2		 shl	 edx, cl
  0007a	0b c2		 or	 eax, edx
  0007c	89 45 fc	 mov	 DWORD PTR _u$[ebp], eax
$L35615:

; 77   : 		break;
; 78   : 	
; 79   : 	}
; 80   : 
; 81   : 
; 82   : 	*value = u.longV;

  0007f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _u$[ebp]
  00085	89 08		 mov	 DWORD PTR [eax], ecx

; 83   : 	
; 84   : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
?rotl@@YGXPAKKE@Z ENDP					; rotl
DSOUND	ENDS
PUBLIC	?XAudiopUtility_GenerateKey@@YGXPAE@Z		; XAudiopUtility_GenerateKey
; Function compile flags: /Odt
;	COMDAT ?XAudiopUtility_GenerateKey@@YGXPAE@Z
DSOUND	SEGMENT
_i$35626 = -12
_seed$ = -8
_pKey$ = 8
?XAudiopUtility_GenerateKey@@YGXPAE@Z PROC NEAR		; XAudiopUtility_GenerateKey, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 88   : 
; 89   : 	ULONGLONG seed = PRIVATE_KEY_SEED;

  00006	c7 45 f8 ba 12
	de 49		 mov	 DWORD PTR _seed$[ebp], 1239290554 ; 49de12baH
  0000d	c7 45 fc ca 9b
	a4 7f		 mov	 DWORD PTR _seed$[ebp+4], 2141494218 ; 7fa49bcaH

; 90   : 
; 91   : 	//
; 92   : 	// seed LFSR
; 93   : 	//
; 94   : 
; 95   : 	lfsr(seed,NULL,0);

  00014	6a 00		 push	 0
  00016	6a 00		 push	 0
  00018	8b 45 fc	 mov	 eax, DWORD PTR _seed$[ebp+4]
  0001b	50		 push	 eax
  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _seed$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ?lfsr@@YGX_KPAXK@Z	; lfsr

; 96   : 
; 97   : 	//
; 98   : 	// shift a few times
; 99   : 	//
; 100  : 
; 101  : 	for (ULONG i=0;i<KEY_SIZE*10;i++) {

  00025	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$35626[ebp], 0
  0002c	eb 09		 jmp	 SHORT $L35627
$L35628:
  0002e	8b 55 f4	 mov	 edx, DWORD PTR _i$35626[ebp]
  00031	83 c2 01	 add	 edx, 1
  00034	89 55 f4	 mov	 DWORD PTR _i$35626[ebp], edx
$L35627:
  00037	83 7d f4 50	 cmp	 DWORD PTR _i$35626[ebp], 80 ; 00000050H
  0003b	73 11		 jae	 SHORT $L35623

; 102  : 		lfsr(0,pKey,KEY_SIZE);

  0003d	6a 08		 push	 8
  0003f	8b 45 08	 mov	 eax, DWORD PTR _pKey$[ebp]
  00042	50		 push	 eax
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	e8 00 00 00 00	 call	 ?lfsr@@YGX_KPAXK@Z	; lfsr

; 103  : 	}

  0004c	eb e0		 jmp	 SHORT $L35628
$L35623:

; 104  : 
; 105  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?XAudiopUtility_GenerateKey@@YGXPAE@Z ENDP		; XAudiopUtility_GenerateKey
DSOUND	ENDS
PUBLIC	?XAudiopUtility_Encode@@YGHPAE0K0H@Z		; XAudiopUtility_Encode
PUBLIC	?XAudiopUtility_Decode@@YGHPAE0K0H@Z		; XAudiopUtility_Decode
EXTRN	_memcmp:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT ?XAudiopUtility_Encode@@YGHPAE0K0H@Z
DSOUND	SEGMENT
$T35995 = -48
$T35994 = -44
_seed$ = -40
_err$ = -28
_temp2$ = -21
_szPrivateKey$ = -20
_temp$ = -9
_pDst2$ = -8
_i$ = -4
_pKey$ = 8
_pSrc$ = 12
_dwSize$ = 16
_pDst$ = 20
_fIncludeKey$ = 24
?XAudiopUtility_Encode@@YGHPAE0K0H@Z PROC NEAR		; XAudiopUtility_Encode, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi

; 113  : 	ULONGLONG seed;
; 114  : 	UCHAR szPrivateKey[KEY_SIZE];
; 115  : 	ULONG i;
; 116  : 	int err = ERROR_SUCCESS;

  00007	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 117  : 	UCHAR temp,temp2;
; 118  : 
; 119  : 	XAudiopUtility_GenerateKey(szPrivateKey);

  0000e	8d 45 ec	 lea	 eax, DWORD PTR _szPrivateKey$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?XAudiopUtility_GenerateKey@@YGXPAE@Z ; XAudiopUtility_GenerateKey

; 120  : 
; 121  : 	for (i=0;i<KEY_SIZE;i++) {

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $L35643
$L35644:
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00023	83 c1 01	 add	 ecx, 1
  00026	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35643:
  00029	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  0002d	73 29		 jae	 SHORT $L35645

; 122  : 
; 123  : 		//
; 124  :       	// store our key with their key in the first N bytes of destination
; 125  : 	    //
; 126  : 
; 127  : 		temp = szPrivateKey[i] ^ pKey[i];

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00032	0f b6 44 15 ec	 movzx	 eax, BYTE PTR _szPrivateKey$[ebp+edx]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _pKey$[ebp]
  0003a	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  0003d	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00040	33 c2		 xor	 eax, edx
  00042	88 45 f7	 mov	 BYTE PTR _temp$[ebp], al

; 128  : 		if (fIncludeKey) {

  00045	83 7d 18 00	 cmp	 DWORD PTR _fIncludeKey$[ebp], 0
  00049	74 0b		 je	 SHORT $L35646

; 129  : 
; 130  : 			*(pDst+i) = temp;

  0004b	8b 45 14	 mov	 eax, DWORD PTR _pDst$[ebp]
  0004e	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  00051	8a 4d f7	 mov	 cl, BYTE PTR _temp$[ebp]
  00054	88 08		 mov	 BYTE PTR [eax], cl
$L35646:

; 131  : 
; 132  : 		}
; 133  : 
; 134  : 	}

  00056	eb c8		 jmp	 SHORT $L35644
$L35645:

; 135  : 
; 136  :     //
; 137  : 	// seed the LFSR
; 138  : 	//
; 139  : 
; 140  : 	memcpy(&seed,szPrivateKey,sizeof(seed));

  00058	6a 08		 push	 8
  0005a	8d 55 ec	 lea	 edx, DWORD PTR _szPrivateKey$[ebp]
  0005d	52		 push	 edx
  0005e	8d 45 d8	 lea	 eax, DWORD PTR _seed$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : 	lfsr(seed,NULL,0);

  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	8b 4d dc	 mov	 ecx, DWORD PTR _seed$[ebp+4]
  00071	51		 push	 ecx
  00072	8b 55 d8	 mov	 edx, DWORD PTR _seed$[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?lfsr@@YGX_KPAXK@Z	; lfsr

; 142  : 
; 143  : 	//
; 144  : 	// encode the data, byte at a time..
; 145  : 	// we do a XOR, rght shift, left shift
; 146  : 	//
; 147  : 
; 148  : 	if (fIncludeKey) {

  0007b	83 7d 18 00	 cmp	 DWORD PTR _fIncludeKey$[ebp], 0
  0007f	74 09		 je	 SHORT $L35647

; 149  : 		pDst += KEY_SIZE;

  00081	8b 45 14	 mov	 eax, DWORD PTR _pDst$[ebp]
  00084	83 c0 08	 add	 eax, 8
  00087	89 45 14	 mov	 DWORD PTR _pDst$[ebp], eax
$L35647:

; 150  : 	}
; 151  : 
; 152  : 	temp = 0;

  0008a	c6 45 f7 00	 mov	 BYTE PTR _temp$[ebp], 0

; 153  : 
; 154  : 	for (i=0;i<dwSize;i++) {

  0008e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00095	eb 09		 jmp	 SHORT $L35648
$L35649:
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0009a	83 c1 01	 add	 ecx, 1
  0009d	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35648:
  000a0	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000a3	3b 55 10	 cmp	 edx, DWORD PTR _dwSize$[ebp]
  000a6	73 74		 jae	 SHORT $L35650

; 155  : 
; 156  : 		lfsr(0,&temp2,sizeof(UCHAR));

  000a8	6a 01		 push	 1
  000aa	8d 45 eb	 lea	 eax, DWORD PTR _temp2$[ebp]
  000ad	50		 push	 eax
  000ae	6a 00		 push	 0
  000b0	6a 00		 push	 0
  000b2	e8 00 00 00 00	 call	 ?lfsr@@YGX_KPAXK@Z	; lfsr

; 157  : 		temp = temp2 ^ *(pSrc+i) ^ szPrivateKey[i%KEY_SIZE];

  000b7	0f b6 4d eb	 movzx	 ecx, BYTE PTR _temp2$[ebp]
  000bb	8b 55 0c	 mov	 edx, DWORD PTR _pSrc$[ebp]
  000be	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  000c1	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000c4	33 c8		 xor	 ecx, eax
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c9	33 d2		 xor	 edx, edx
  000cb	be 08 00 00 00	 mov	 esi, 8
  000d0	f7 f6		 div	 esi
  000d2	0f b6 54 15 ec	 movzx	 edx, BYTE PTR _szPrivateKey$[ebp+edx]
  000d7	33 ca		 xor	 ecx, edx
  000d9	88 4d f7	 mov	 BYTE PTR _temp$[ebp], cl

; 158  : 
; 159  : 		temp += szPrivateKey[i%KEY_SIZE]*pKey[i%KEY_SIZE];

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000df	33 d2		 xor	 edx, edx
  000e1	b9 08 00 00 00	 mov	 ecx, 8
  000e6	f7 f1		 div	 ecx
  000e8	0f b6 4c 15 ec	 movzx	 ecx, BYTE PTR _szPrivateKey$[ebp+edx]
  000ed	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f0	33 d2		 xor	 edx, edx
  000f2	be 08 00 00 00	 mov	 esi, 8
  000f7	f7 f6		 div	 esi
  000f9	8b 45 08	 mov	 eax, DWORD PTR _pKey$[ebp]
  000fc	0f b6 14 10	 movzx	 edx, BYTE PTR [eax+edx]
  00100	0f af ca	 imul	 ecx, edx
  00103	0f b6 45 f7	 movzx	 eax, BYTE PTR _temp$[ebp]
  00107	03 c1		 add	 eax, ecx
  00109	88 45 f7	 mov	 BYTE PTR _temp$[ebp], al

; 160  : 		*(pDst+i) = temp;

  0010c	8b 4d 14	 mov	 ecx, DWORD PTR _pDst$[ebp]
  0010f	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  00112	8a 55 f7	 mov	 dl, BYTE PTR _temp$[ebp]
  00115	88 11		 mov	 BYTE PTR [ecx], dl

; 161  : 
; 162  : 	}

  00117	e9 7b ff ff ff	 jmp	 $L35649
$L35650:

; 163  : 
; 164  : 
; 165  : #if _DEBUG
; 166  : 
; 167  : 	//
; 168  : 	// DEBUG ONLY: Verify encryption/decryption
; 169  : 	//
; 170  : 
; 171  : 	PUCHAR pDst2 = new UCHAR[dwSize];

  0011c	8b 45 10	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00125	83 c4 04	 add	 esp, 4
  00128	89 45 d4	 mov	 DWORD PTR $T35994[ebp], eax
  0012b	8b 4d d4	 mov	 ecx, DWORD PTR $T35994[ebp]
  0012e	89 4d f8	 mov	 DWORD PTR _pDst2$[ebp], ecx

; 172  : 	memset(pDst2,0,dwSize);

  00131	8b 55 10	 mov	 edx, DWORD PTR _dwSize$[ebp]
  00134	52		 push	 edx
  00135	6a 00		 push	 0
  00137	8b 45 f8	 mov	 eax, DWORD PTR _pDst2$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 _memset
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  : 
; 174  : 	if (fIncludeKey) {

  00143	83 7d 18 00	 cmp	 DWORD PTR _fIncludeKey$[ebp], 0
  00147	74 1f		 je	 SHORT $L35655

; 175  : 		XAudiopUtility_Decode(pKey, pDst-KEY_SIZE,dwSize+KEY_SIZE,pDst2,TRUE);

  00149	6a 01		 push	 1
  0014b	8b 4d f8	 mov	 ecx, DWORD PTR _pDst2$[ebp]
  0014e	51		 push	 ecx
  0014f	8b 55 10	 mov	 edx, DWORD PTR _dwSize$[ebp]
  00152	83 c2 08	 add	 edx, 8
  00155	52		 push	 edx
  00156	8b 45 14	 mov	 eax, DWORD PTR _pDst$[ebp]
  00159	83 e8 08	 sub	 eax, 8
  0015c	50		 push	 eax
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR _pKey$[ebp]
  00160	51		 push	 ecx
  00161	e8 00 00 00 00	 call	 ?XAudiopUtility_Decode@@YGHPAE0K0H@Z ; XAudiopUtility_Decode

; 176  : 	} else {

  00166	eb 17		 jmp	 SHORT $L35656
$L35655:

; 177  : 		XAudiopUtility_Decode(pKey, pDst,dwSize,pDst2, FALSE);

  00168	6a 00		 push	 0
  0016a	8b 55 f8	 mov	 edx, DWORD PTR _pDst2$[ebp]
  0016d	52		 push	 edx
  0016e	8b 45 10	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00171	50		 push	 eax
  00172	8b 4d 14	 mov	 ecx, DWORD PTR _pDst$[ebp]
  00175	51		 push	 ecx
  00176	8b 55 08	 mov	 edx, DWORD PTR _pKey$[ebp]
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 ?XAudiopUtility_Decode@@YGHPAE0K0H@Z ; XAudiopUtility_Decode
$L35656:

; 178  : 	}
; 179  : 
; 180  : 	if (pSrc != pDst) {

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _pSrc$[ebp]
  00182	3b 45 14	 cmp	 eax, DWORD PTR _pDst$[ebp]
  00185	74 24		 je	 SHORT $L35657

; 181  : 		err = memcmp(pDst2,pSrc,dwSize);

  00187	8b 4d 10	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  0018a	51		 push	 ecx
  0018b	8b 55 0c	 mov	 edx, DWORD PTR _pSrc$[ebp]
  0018e	52		 push	 edx
  0018f	8b 45 f8	 mov	 eax, DWORD PTR _pDst2$[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _memcmp
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019b	89 45 e4	 mov	 DWORD PTR _err$[ebp], eax

; 182  : 		if (err) {

  0019e	83 7d e4 00	 cmp	 DWORD PTR _err$[ebp], 0
  001a2	74 07		 je	 SHORT $L35657

; 183  : 			err = -1;

  001a4	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _err$[ebp], -1
$L35657:

; 184  : 		}
; 185  : 	}
; 186  : 
; 187  : 
; 188  : 	delete [] pDst2;

  001ab	8b 4d f8	 mov	 ecx, DWORD PTR _pDst2$[ebp]
  001ae	89 4d d0	 mov	 DWORD PTR $T35995[ebp], ecx
  001b1	8b 55 d0	 mov	 edx, DWORD PTR $T35995[ebp]
  001b4	52		 push	 edx
  001b5	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001ba	83 c4 04	 add	 esp, 4

; 189  : 
; 190  : #endif
; 191  : 
; 192  : 	return err;

  001bd	8b 45 e4	 mov	 eax, DWORD PTR _err$[ebp]

; 193  : 
; 194  : }

  001c0	5e		 pop	 esi
  001c1	8b e5		 mov	 esp, ebp
  001c3	5d		 pop	 ebp
  001c4	c2 14 00	 ret	 20			; 00000014H
?XAudiopUtility_Encode@@YGHPAE0K0H@Z ENDP		; XAudiopUtility_Encode
DSOUND	ENDS
PUBLIC	??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@		; `string'
PUBLIC	??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@		; `string'
EXTRN	?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemAlloc
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
DSOUND_RD	SEGMENT
??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@ DB '(unknown)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@ DB '(none)', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??_U@YAPAXI@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
??_U@YAPAXI@Z PROC NEAR					; operator new[], COMDAT

; 225  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  :     return DirectSound::CMemoryManager::TrackingMemAlloc("(none)", 0, "(unknown)", DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE);

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
  00013	6a 00		 push	 0
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
  0001a	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc

; 227  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??_U@YAPAXI@Z ENDP					; operator new[]
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
;	COMDAT ??_V@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 249  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 250  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 251  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\tools\xcodescr\cipher.cpp
DSOUND	ENDS
;	COMDAT ?XAudiopUtility_Decode@@YGHPAE0K0H@Z
DSOUND	SEGMENT
_seed$ = -40
_szDevKey$ = -32
_err$ = -24
_temp2$ = -17
_szPrivateKey$ = -16
_temp$ = -5
_i$ = -4
_pKey$ = 8
_pSrc$ = 12
_dwSize$ = 16
_pDst$ = 20
_fIsKeyEmbedded$ = 24
?XAudiopUtility_Decode@@YGHPAE0K0H@Z PROC NEAR		; XAudiopUtility_Decode, COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi

; 207  : 	ULONGLONG seed;
; 208  : 
; 209  : 	UCHAR szPrivateKey[KEY_SIZE],szDevKey[KEY_SIZE];
; 210  : 	ULONG i;
; 211  : 	int err = ERROR_SUCCESS;

  00007	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 212  : 	UCHAR temp,temp2;
; 213  : 
; 214  : 	//
; 215  : 	// regenerate our key
; 216  : 	//
; 217  : 	
; 218  : 	XAudiopUtility_GenerateKey(szPrivateKey);

  0000e	8d 45 f0	 lea	 eax, DWORD PTR _szPrivateKey$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?XAudiopUtility_GenerateKey@@YGXPAE@Z ; XAudiopUtility_GenerateKey

; 219  : 
; 220  : 	if (fIsKeyEmbedded) {

  00017	83 7d 18 00	 cmp	 DWORD PTR _fIsKeyEmbedded$[ebp], 0
  0001b	74 4e		 je	 SHORT $L35674

; 221  : 
; 222  : 		//
; 223  : 		// recover user key from first N bytes of src
; 224  : 		//
; 225  : 		
; 226  : 		for (i=0;i<KEY_SIZE;i++) {

  0001d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00024	eb 09		 jmp	 SHORT $L35675
$L35676:
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00029	83 c1 01	 add	 ecx, 1
  0002c	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35675:
  0002f	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  00033	73 1c		 jae	 SHORT $L35677

; 227  : 			
; 228  : 			szDevKey[i] = szPrivateKey[i] ^ *(pSrc+i);

  00035	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00038	0f b6 44 15 f0	 movzx	 eax, BYTE PTR _szPrivateKey$[ebp+edx]
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  00040	03 4d fc	 add	 ecx, DWORD PTR _i$[ebp]
  00043	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00046	33 c2		 xor	 eax, edx
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004b	88 44 0d e0	 mov	 BYTE PTR _szDevKey$[ebp+ecx], al

; 229  : 			
; 230  : 		}

  0004f	eb d5		 jmp	 SHORT $L35676
$L35677:

; 231  : 
; 232  : 		if (pKey) {

  00051	83 7d 08 00	 cmp	 DWORD PTR _pKey$[ebp], 0
  00055	74 12		 je	 SHORT $L35678

; 233  : 			memcpy(pKey,szDevKey,KEY_SIZE);

  00057	6a 08		 push	 8
  00059	8d 55 e0	 lea	 edx, DWORD PTR _szDevKey$[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 08	 mov	 eax, DWORD PTR _pKey$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _memcpy
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$L35678:

; 234  : 		}
; 235  : 
; 236  : 	} else {

  00069	eb 20		 jmp	 SHORT $L35679
$L35674:

; 237  : 
; 238  : 		if (pKey == NULL) {

  0006b	83 7d 08 00	 cmp	 DWORD PTR _pKey$[ebp], 0
  0006f	75 08		 jne	 SHORT $L35680

; 239  : 			return -1;

  00071	83 c8 ff	 or	 eax, -1
  00074	e9 dd 00 00 00	 jmp	 $L35666
$L35680:

; 240  : 		}
; 241  : 
; 242  : 		memcpy(szDevKey,pKey,KEY_SIZE);

  00079	6a 08		 push	 8
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _pKey$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 55 e0	 lea	 edx, DWORD PTR _szDevKey$[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 _memcpy
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
$L35679:

; 243  : 
; 244  : 	}
; 245  : 
; 246  :     //
; 247  : 	// seed the LFSR
; 248  : 	//
; 249  : 
; 250  : 	memcpy(&seed,szPrivateKey,sizeof(seed));

  0008b	6a 08		 push	 8
  0008d	8d 45 f0	 lea	 eax, DWORD PTR _szPrivateKey$[ebp]
  00090	50		 push	 eax
  00091	8d 4d d8	 lea	 ecx, DWORD PTR _seed$[ebp]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 _memcpy
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 251  : 	lfsr(seed,NULL,0);

  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	8b 55 dc	 mov	 edx, DWORD PTR _seed$[ebp+4]
  000a4	52		 push	 edx
  000a5	8b 45 d8	 mov	 eax, DWORD PTR _seed$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?lfsr@@YGX_KPAXK@Z	; lfsr

; 252  : 
; 253  : 	//
; 254  : 	// decode the data, byte at a time..
; 255  : 	// we do the inverse of the encode algorithm
; 256  : 	//
; 257  : 
; 258  : 	if (fIsKeyEmbedded) {

  000ae	83 7d 18 00	 cmp	 DWORD PTR _fIsKeyEmbedded$[ebp], 0
  000b2	74 12		 je	 SHORT $L35681

; 259  : 		pSrc += KEY_SIZE;

  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR _pSrc$[ebp]
  000b7	83 c1 08	 add	 ecx, 8
  000ba	89 4d 0c	 mov	 DWORD PTR _pSrc$[ebp], ecx

; 260  : 		dwSize -= KEY_SIZE;

  000bd	8b 55 10	 mov	 edx, DWORD PTR _dwSize$[ebp]
  000c0	83 ea 08	 sub	 edx, 8
  000c3	89 55 10	 mov	 DWORD PTR _dwSize$[ebp], edx
$L35681:

; 261  : 	}
; 262  : 
; 263  : 	temp = 0;

  000c6	c6 45 fb 00	 mov	 BYTE PTR _temp$[ebp], 0

; 264  : 
; 265  : 	for (i=0;i<dwSize;i++) {

  000ca	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d1	eb 09		 jmp	 SHORT $L35682
$L35683:
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d6	83 c0 01	 add	 eax, 1
  000d9	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35682:
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000df	3b 4d 10	 cmp	 ecx, DWORD PTR _dwSize$[ebp]
  000e2	73 6f		 jae	 SHORT $L35684

; 266  : 
; 267  : 		temp = *(pSrc+i);

  000e4	8b 55 0c	 mov	 edx, DWORD PTR _pSrc$[ebp]
  000e7	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  000ea	8a 02		 mov	 al, BYTE PTR [edx]
  000ec	88 45 fb	 mov	 BYTE PTR _temp$[ebp], al

; 268  : 		temp -= szPrivateKey[i%KEY_SIZE]*szDevKey[i%KEY_SIZE];	

  000ef	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f2	33 d2		 xor	 edx, edx
  000f4	b9 08 00 00 00	 mov	 ecx, 8
  000f9	f7 f1		 div	 ecx
  000fb	0f b6 4c 15 f0	 movzx	 ecx, BYTE PTR _szPrivateKey$[ebp+edx]
  00100	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00103	33 d2		 xor	 edx, edx
  00105	be 08 00 00 00	 mov	 esi, 8
  0010a	f7 f6		 div	 esi
  0010c	0f b6 54 15 e0	 movzx	 edx, BYTE PTR _szDevKey$[ebp+edx]
  00111	0f af ca	 imul	 ecx, edx
  00114	0f b6 45 fb	 movzx	 eax, BYTE PTR _temp$[ebp]
  00118	2b c1		 sub	 eax, ecx
  0011a	88 45 fb	 mov	 BYTE PTR _temp$[ebp], al

; 269  : 		lfsr(0,&temp2,sizeof(UCHAR));

  0011d	6a 01		 push	 1
  0011f	8d 4d ef	 lea	 ecx, DWORD PTR _temp2$[ebp]
  00122	51		 push	 ecx
  00123	6a 00		 push	 0
  00125	6a 00		 push	 0
  00127	e8 00 00 00 00	 call	 ?lfsr@@YGX_KPAXK@Z	; lfsr

; 270  : 		*(pDst+i) = temp2 ^ temp ^ szPrivateKey[i%KEY_SIZE];

  0012c	0f b6 4d ef	 movzx	 ecx, BYTE PTR _temp2$[ebp]
  00130	0f b6 55 fb	 movzx	 edx, BYTE PTR _temp$[ebp]
  00134	33 ca		 xor	 ecx, edx
  00136	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00139	33 d2		 xor	 edx, edx
  0013b	be 08 00 00 00	 mov	 esi, 8
  00140	f7 f6		 div	 esi
  00142	0f b6 44 15 f0	 movzx	 eax, BYTE PTR _szPrivateKey$[ebp+edx]
  00147	33 c8		 xor	 ecx, eax
  00149	8b 55 14	 mov	 edx, DWORD PTR _pDst$[ebp]
  0014c	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  0014f	88 0a		 mov	 BYTE PTR [edx], cl

; 271  : 	}

  00151	eb 80		 jmp	 SHORT $L35683
$L35684:

; 272  : 
; 273  : 
; 274  : 	return err;

  00153	8b 45 e8	 mov	 eax, DWORD PTR _err$[ebp]
$L35666:

; 275  : 
; 276  : }

  00156	5e		 pop	 esi
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c2 14 00	 ret	 20			; 00000014H
?XAudiopUtility_Decode@@YGHPAE0K0H@Z ENDP		; XAudiopUtility_Decode
DSOUND	ENDS
END
