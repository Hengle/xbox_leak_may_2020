; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\mcpvoice.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@LEKHIOCF@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@EBDMEPFB@?$CBm_RegCache?4CfgFMT?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DKIEPBCI@?$CBm_RegCache?4CfgMISC?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@HGMFBOAN@1?5?$DN?$DN?5m_pSettings?9?$DOm_fmt?4nChannel@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@LGOOLAEG@CHrtfSource?$CI?$CKm_pMcpxApu?0?5?$CKm_pSet@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EB@MMHINABP@CI3dl2Source?$CI?$CKm_pMcpxApu?0?5m_pSet@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@ELHILHON@CMcpxVoiceClient?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EG@IKOKNEFB@Can?8t?5change?5the?5number?5of?5hardw@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@NGDLDOCD@Unexpected?5sample?5size?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@CONOHMHI@Unexpected?5format?5type?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@NMPGLFKL@?$CB?$CIm_pSettings?9?$DOm_fmt?4nChannels?5?$CF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@CNKNCEDN@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@MPGCGJKK@?$CI18?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@KOAPLHPD@?$CB?$CIm_dwStatus?5?$CG?5?$HO?$CIMCPX_VOICESTATU@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@NNPNAPIO@CMcpxVoiceClient?3?3ReleaseVoiceRe@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CEPMNOIA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5freeing?5resources?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@HMCBNOED@a?5?$DM?$DN?5DSMIXBIN_LAST?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OKAMGNFN@CMcpxVoiceClient?3?3ConvertMixBinV@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GFBAKIMB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@ECEDJPHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@MNHCOCM@?$CI6?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DC@JPOBEEFA@m_pHrtfSource?9?$DOm_3dVoiceData?4lDi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@JLHGPJIA@m_pHrtfSource?9?$DOm_3dVoiceData?4lCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@OCHBOLAM@m_pHrtfSource?9?$DOm_3dVoiceData?4lFr@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@CLNGDPON@m_pHrtfSource?9?$DOm_3dVoiceData?4lRe@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@HDLHEC@?$CB?$CIm_pSettings?9?$DOm_dwMixBinCount?5?$CF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@FKDFBPHH@m_pSettings?9?$DOm_lVolume?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EB@OHNAHBLA@m_pSettings?9?$DOm_alMixBinVolumes?$FLm@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@MDCCJFOE@l3dFrontDirect?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@POMGKCHN@l3dRearDirect?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@LALMGBAC@l3dReverbSend?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@EDMIOIDI@l3dVolume?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EP@CBIOHENO@m_pHrtfSource?9?$DOm_3dVoiceData?4alM@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@MCHJLCJG@CMcpxVoiceClient?3?3ConvertVolumeV@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@LONCEFGP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5mixbin?5?$CFlu?5?$CI?$CFlu?$CJ?5v@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@OKJMGJNE@pSubMixDestination?9?$DOm_pSettings?9@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GOKFKIKE@pSubMixDestination?9?$DOm_pHrtfSourc@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HA@EBIAGJBN@No?5effects?5image?5has?5been?5downlo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HJ@PFFMBHKD@Crosstalk?5is?5not?5in?5the?5current?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@MJOCJIBD@?$CBIsListEmpty?$CI?$CGm_lstSourceVoices?$CJ@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@PEIBGGOF@IsListEmpty?$CI?$CGm_lstSourceVoices?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DM@DAJJLAJC@pSubMixDestination?9?$DOm_dwStatus?5?$CG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PEOFJJDI@?$CI0x20?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DLHMNLCO@hAntecedentVoice?5?$DM?5MCPX_HW_MAX_V@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EA@KJIGOGLG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5inheriting?5voice?5l@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@FOPNANFG@bVoiceList?5?$DM?5NUMELMS?$CIm_pMcpxApu?9@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@FDGCOIDJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@MJKHDBNC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@KOPKBAEC@CMcpxVoiceClient?3?3DeactivateVoic@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@ODBPPJFA@Deactivating?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@BEFEJAOO@CMcpxVoiceClient?3?3ReleaseVoice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@BKJMGHBP@Releasing?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@EADPALEL@?$CB?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@GELHBDFO@Busy?9waiting?5for?5the?5voice?5to?5tu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@NPBPONNE@This?5warning?5is?5being?5generated?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EF@OJCILPFM@a?5hardware?5voice?5to?5be?5stopped?4?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@OOPIPDLA@operation?0?5so?5any?5function?5that?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EL@JCEFBPFB@until?5it?5is?4?5?5To?5see?5an?5example?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@JANHIGAO@immediately?5follow?5it?5with?5a?5cal@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@KMADEABL@are?0?5you?8ll?5see?5that?5DSBSTATUS_P@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@KLDALOHL@that?5can?5potentially?5block?5in?5th@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@EEEIHDP@query?5the?5playing?5status?5of?5a?5bu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EH@GEIEDGIP@the?5object?5you?5wish?5to?5check?4?5?5T@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@DHOOJBPK@variable?5?$CCg_fDirectSoundDisableB@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT ??_C@_0BB@EILNFPMP@m_rtVoiceOff?5?$DO?50?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@LMDDGLKA@?$CBm_pMcpxApu?9?$DOm_dwVoiceMapLock?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@NBHAPEBK@CMcpxVoiceClient?3?3CheckStuckVoic@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@MHMKIJEI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5appears?5to?5be?5stuc@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@NANHPLEK@?$CI1?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@BCHFCAKF@CMcpxVoiceClient?3?3PauseVoice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@EBEJKDNP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5pause?5state?5going?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@IMCHFDDO@m_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAPS@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@KNAGEJEI@m_pI3dl2Source?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@GMNIGPNO@m_bAvailable3dFilter?5?$DM?5MCPX_HW_3@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0IL@OKJLOFJO@?$CI1?5?$CL?5?$CI?$CIsizeof?$CIpFilterPair?9?$DOpLeft@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@NDPCHOOB@?$CIitd?5?$DO?$DN?5?942?$CJ?5?$CG?$CG?5?$CIitd?5?$DM?$DN?542?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@PBAOCHCM@Invalid?5EG?5identifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@MMDBKKON@?$CI9?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@HODIEEIE@pSubMixDestination?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@NHIALCLL@CMcpxVoiceClient?3?3ConnectVoice?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@JFFAPBKC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5?$CFx?5?$CI?$CFx?$CJ?5as?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@PACLBLCI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5is?5still?5active?4?5?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@OGCACCEO@CMcpxVoiceClient?3?3DisconnectVoic@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@GGCJJFAI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5disconnected?5submi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@KJPCMOID@?$CI3?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?and@@YIXPCGG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?or@@YIXPCGG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetHrtfFilterPair@CHrtfSource@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxNotifier@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxVoiceNotifier@DirectSound@@QAEXG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxVoiceClient@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxVoiceNotifier@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxVoiceClient@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetAntecedentVoice@CMcpxVoiceClient@DirectSound@@AAEXPAEPAPAV12@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveStuckVoice@CMcpxVoiceClient@DirectSound@@AAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLFO@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEG@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ConnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetSslPosition@CMcpxVoiceClient@DirectSound@@IAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCMcpxAPU@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dw3dVolumeMask@?1??Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwMcpxMaxAttenuation@?1??ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?DisabledFilterData@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UFIRFILTER8@@B
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?fExplained@?1??WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ@4HA
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT ?dwHrtfMask@?1??Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?DisabledFilterPair@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UHRTFFILTERPAIR@@B
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwPitchMask@?1??Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?rtTimeout@?1??CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ@4_JB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwI3dl2VolumeMask@?1??Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxVoiceClient@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?dwFilterMask@?1??Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z@4KB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, DSOUND_RW, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?m_dwStuckVoiceCount@CMcpxVoiceClient@DirectSound@@2KA ; DirectSound::CMcpxVoiceClient::m_dwStuckVoiceCount
PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RW	SEGMENT
?m_dwStuckVoiceCount@CMcpxVoiceClient@DirectSound@@2KA DD 00H ; DirectSound::CMcpxVoiceClient::m_dwStuckVoiceCount
DSOUND_RW	ENDS
PUBLIC	??0CMcpxVoiceNotifier@DirectSound@@QAE@XZ	; DirectSound::CMcpxVoiceNotifier::CMcpxVoiceNotifier
PUBLIC	??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z ; DirectSound::CMcpxVoiceClient::CMcpxVoiceClient
PUBLIC	?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z ; DirectSound::CMcpxVoiceClient::Initialize
PUBLIC	?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ	; DirectSound::CMcpxVoiceClient::SetFormat
PUBLIC	??_7CMcpxVoiceClient@DirectSound@@6B@		; DirectSound::CMcpxVoiceClient::`vftable'
PUBLIC	??_GCMcpxVoiceClient@DirectSound@@UAEPAXI@Z	; DirectSound::CMcpxVoiceClient::`scalar deleting destructor'
PUBLIC	??0CRefCount@DirectSound@@QAE@K@Z		; DirectSound::CRefCount::CRefCount
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
PUBLIC	?__AddRef@DirectSound@@YGPAVCMcpxAPU@1@PAV21@@Z	; DirectSound::__AddRef
PUBLIC	?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z ; DirectSound::__AddRef
EXTRN	__purecall:NEAR
EXTRN	??_ECMcpxVoiceClient@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CMcpxVoiceClient::`vector deleting destructor'
;	COMDAT ??_7CMcpxVoiceClient@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
CONST	SEGMENT
??_7CMcpxVoiceClient@DirectSound@@6B@ DD FLAT:??_ECMcpxVoiceClient@DirectSound@@UAEPAXI@Z ; DirectSound::CMcpxVoiceClient::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z
	DD	FLAT:?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
_pMcpxApu$ = 8
_pSettings$ = 12
??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::CMcpxVoiceClient, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	6a 01		 push	 1
  0000b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00013	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxVoiceClient@DirectSound@@6B@
  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 68	 add	 ecx, 104		; 00000068H
  00022	e8 00 00 00 00	 call	 ??0CMcpxVoiceNotifier@DirectSound@@QAE@XZ

; 43   :     DWORD                   i;
; 44   :     
; 45   :     DPF_ENTER();
; 46   :     
; 47   :     m_pMcpxApu = ADDREF(pMcpxApu);

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pMcpxApu$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCMcpxAPU@1@PAV21@@Z ; DirectSound::__AddRef
  00030	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00033	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 48   :     m_pSettings = ADDREF(pSettings);

  00036	8b 45 0c	 mov	 eax, DWORD PTR _pSettings$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z ; DirectSound::__AddRef
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 49   : 
; 50   :     //
; 51   :     // Initialize defaults
; 52   :     //
; 53   : 
; 54   :     m_dw3dMode = DS3DMODE_NORMAL;

  00045	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00048	c7 42 7c 00 00
	00 00		 mov	 DWORD PTR [edx+124], 0

; 55   : 
; 56   :     InitializeListHead(&m_leActiveVoice);

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 c0 4c	 add	 eax, 76			; 0000004cH
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00064	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 57   :     InitializeListHead(&m_lePendingInactiveVoice);

  00067	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	83 c2 54	 add	 edx, 84			; 00000054H
  0006d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00070	89 50 58	 mov	 DWORD PTR [eax+88], edx
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00079	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0007c	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 58   :     InitializeListHead(&m_leSourceVoice);

  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00085	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00088	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00094	89 50 5c	 mov	 DWORD PTR [eax+92], edx

; 59   :     InitializeListHead(&m_lstSourceVoices);

  00097	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	83 c0 44	 add	 eax, 68			; 00000044H
  0009d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000ac	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 60   : 
; 61   :     m_bVoiceList = MCPX_VOICELIST_INVALID;

  000af	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b2	c6 42 65 ff	 mov	 BYTE PTR [edx+101], 255	; 000000ffH

; 62   : 
; 63   :     for(i = 0; i < NUMELMS(m_ahVoices); i++)

  000b6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000bd	eb 09		 jmp	 SHORT $L35565
$L35566:
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c2	83 c0 01	 add	 eax, 1
  000c5	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35565:
  000c8	83 7d fc 03	 cmp	 DWORD PTR _i$[ebp], 3
  000cc	73 0f		 jae	 SHORT $L35555

; 64   :     {
; 65   :         m_ahVoices[i] = MCPX_VOICE_HANDLE_INVALID;

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000d1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d4	66 c7 44 4a 0c
	ff ff		 mov	 WORD PTR [edx+ecx*2+12], 65535 ; 0000ffffH

; 66   :     }

  000db	eb e2		 jmp	 SHORT $L35566
$L35555:

; 67   : 
; 68   :     DPF_LEAVE_VOID();
; 69   : }

  000dd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 08 00	 ret	 8
??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z ENDP ; DirectSound::CMcpxVoiceClient::CMcpxVoiceClient
DSOUND	ENDS
PUBLIC	??_7CRefCount@DirectSound@@6B@			; DirectSound::CRefCount::`vftable'
PUBLIC	??_GCRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
CONST	SEGMENT
??_7CRefCount@DirectSound@@6B@ DD FLAT:??_ECRefCount@DirectSound@@UAEPAXI@Z ; DirectSound::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@DirectSound@@QAE@K@Z PROC NEAR		; DirectSound::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 38   :     }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@DirectSound@@QAE@K@Z ENDP			; DirectSound::CRefCount::CRefCount
DSOUND	ENDS
PUBLIC	??1CRefCount@DirectSound@@UAE@XZ		; DirectSound::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@DirectSound@@UAEPAXI@Z PROC NEAR		; DirectSound::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L30389
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L30389:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CRefCount::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND_RD	SEGMENT
??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CRefCount@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@

; 42   :         ASSERT(!m_dwRefCount);

  00010	6a 2a		 push	 42			; 0000002aH
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 43   :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@DirectSound@@UAE@XZ ENDP			; DirectSound::CRefCount::~CRefCount
DSOUND	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T37203 = -8
$T37202 = -4
_this$ = 8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L30406

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L30406

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T37203[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T37203[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T37202[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T37202[ebp], 0
  00058	74 11		 je	 SHORT $L37204
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T37202[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T37202[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L37205
$L37204:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L37205:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L30404
$L30406:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L30404:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
DSOUND	ENDS
PUBLIC	??1CMcpxVoiceClient@DirectSound@@UAE@XZ		; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxVoiceClient@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxVoiceClient@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CMcpxVoiceClient::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxVoiceClient@DirectSound@@UAE@XZ ; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35572
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35572:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxVoiceClient@DirectSound@@UAEPAXI@Z ENDP	; DirectSound::CMcpxVoiceClient::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??0CMcpxNotifier@DirectSound@@QAE@XZ		; DirectSound::CMcpxNotifier::CMcpxNotifier
; Function compile flags: /Odt
;	COMDAT ??0CMcpxVoiceNotifier@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CMcpxVoiceNotifier@DirectSound@@QAE@XZ PROC NEAR	; DirectSound::CMcpxVoiceNotifier::CMcpxVoiceNotifier, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CMcpxNotifier@DirectSound@@QAE@XZ ; DirectSound::CMcpxNotifier::CMcpxNotifier
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CMcpxVoiceNotifier@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxVoiceNotifier::CMcpxVoiceNotifier
DSOUND	ENDS
PUBLIC	?Free@CMcpxNotifier@DirectSound@@QAEXXZ		; DirectSound::CMcpxNotifier::Free
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpxcore.h
;	COMDAT ??0CMcpxNotifier@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CMcpxNotifier@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CMcpxNotifier::CMcpxNotifier, COMDAT
; _this$ = ecx

; 414  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 415  :         Free();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Free@CMcpxNotifier@DirectSound@@QAEXXZ ; DirectSound::CMcpxNotifier::Free

; 416  :     }

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CMcpxNotifier@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxNotifier::CMcpxNotifier
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Free@CMcpxNotifier@DirectSound@@QAEXXZ PROC NEAR	; DirectSound::CMcpxNotifier::Free, COMDAT
; _this$ = ecx

; 430  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 431  :         m_paNotifier = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 432  :         m_dwNotifierCount = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 433  :     }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?Free@CMcpxNotifier@DirectSound@@QAEXXZ ENDP		; DirectSound::CMcpxNotifier::Free
DSOUND	ENDS
PUBLIC	?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::DisconnectVoice
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CO@LEKHIOCF@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@ ; `string'
;	COMDAT ??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
DSOUND_RD	SEGMENT
??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpvoice.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@LEKHIOCF@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
DSOUND_RD	SEGMENT
??_C@_0CO@LEKHIOCF@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@ DB '!('
	DB	'm_dwStatus & ~MCPX_VOICESTATUS_RELEASEMASK)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CMcpxVoiceClient@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -12
$T37222 = -8
$T37221 = -4
??1CMcpxVoiceClient@DirectSound@@UAE@XZ PROC NEAR	; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxVoiceClient@DirectSound@@6B@

; 95   :     DPF_ENTER();
; 96   : 
; 97   :     ASSERT(!(m_dwStatus & ~MCPX_VOICESTATUS_RELEASEMASK));

  00012	6a 61		 push	 97			; 00000061H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@LEKHIOCF@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
  0001e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00025	83 e2 ef	 and	 edx, -17		; ffffffefH
  00028	f7 da		 neg	 edx
  0002a	1b d2		 sbb	 edx, edx
  0002c	f7 da		 neg	 edx
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 98   : 
; 99   :     //
; 100  :     // Make sure we're not still in the active voice list
; 101  :     //
; 102  : 
; 103  :     AssertValidEntryList(&m_leActiveVoice, ASSERT_NOT_IN_LIST);

  00037	6a 67		 push	 103			; 00000067H
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0003e	6a 02		 push	 2
  00040	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 c0 4c	 add	 eax, 76			; 0000004cH
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 104  :     AssertValidEntryList(&m_lePendingInactiveVoice, ASSERT_NOT_IN_LIST);

  0004c	6a 68		 push	 104			; 00000068H
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00053	6a 02		 push	 2
  00055	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 54	 add	 ecx, 84			; 00000054H
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 105  :     
; 106  :     //
; 107  :     // Make sure we're disconnected from any submixes
; 108  :     //
; 109  : 
; 110  :     DisconnectVoice();

  00061	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::DisconnectVoice

; 111  : 
; 112  :     AssertValidEntryList(&m_leSourceVoice, ASSERT_NOT_IN_LIST);

  00069	6a 70		 push	 112			; 00000070H
  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00070	6a 02		 push	 2
  00072	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00075	83 c2 5c	 add	 edx, 92			; 0000005cH
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 113  :     AssertValidEntryList(&m_lstSourceVoices, ASSERT_NOT_IN_LIST);

  0007e	6a 71		 push	 113			; 00000071H
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00085	6a 02		 push	 2
  00087	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	83 c0 44	 add	 eax, 68			; 00000044H
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 114  : 
; 115  :     //
; 116  :     // Release object references
; 117  :     //
; 118  :     
; 119  :     DELETE(m_pHrtfSource);

  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	83 79 70 00	 cmp	 DWORD PTR [ecx+112], 0
  0009a	74 1f		 je	 SHORT $L35581
  0009c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0009f	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  000a2	89 45 fc	 mov	 DWORD PTR $T37221[ebp], eax
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR $T37221[ebp]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ae	83 c4 04	 add	 esp, 4
  000b1	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	c7 42 70 00 00
	00 00		 mov	 DWORD PTR [edx+112], 0
$L35581:

; 120  :     DELETE(m_pI3dl2Source);

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000be	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  000c2	74 1f		 je	 SHORT $L35583
  000c4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  000ca	89 55 f8	 mov	 DWORD PTR $T37222[ebp], edx
  000cd	8b 45 f8	 mov	 eax, DWORD PTR $T37222[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	83 c4 04	 add	 esp, 4
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0
$L35583:

; 121  : 
; 122  :     RELEASE(m_pSettings);

  000e3	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000e6	83 7a 78 00	 cmp	 DWORD PTR [edx+120], 0
  000ea	74 1c		 je	 SHORT $L35585
  000ec	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000f2	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  000f8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000fa	50		 push	 eax
  000fb	ff 51 08	 call	 DWORD PTR [ecx+8]
  000fe	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00101	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0
$L35585:

; 123  :     RELEASE(m_pMcpxApu);

  00108	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0010b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0010f	74 1c		 je	 SHORT $L35578
  00111	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00117	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0011d	8b 12		 mov	 edx, DWORD PTR [edx]
  0011f	51		 push	 ecx
  00120	ff 52 08	 call	 DWORD PTR [edx+8]
  00123	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00126	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$L35578:

; 124  : 
; 125  :     DPF_LEAVE_VOID();
; 126  : }

  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
??1CMcpxVoiceClient@DirectSound@@UAE@XZ ENDP		; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient
DSOUND	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L30006

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L30005
$L30006:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L30010
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L30009
$L30010:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L30005
$L30009:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L30014
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L30013
$L30014:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L30016
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L30015
$L30016:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L30015:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L30005
$L30013:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L30019

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L30020

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L30020:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L30005
$L30019:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L30005

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L30005

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L30005:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
DSOUND	ENDS
PUBLIC	??_C@_0BD@EBDMEPFB@?$CBm_RegCache?4CfgFMT?$AA@	; `string'
PUBLIC	??_C@_0BE@DKIEPBCI@?$CBm_RegCache?4CfgMISC?$AA@	; `string'
PUBLIC	??_C@_0CC@HGMFBOAN@1?5?$DN?$DN?5m_pSettings?9?$DOm_fmt?4nChannel@ ; `string'
PUBLIC	??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@ ; `string'
PUBLIC	??_C@_0DE@LGOOLAEG@CHrtfSource?$CI?$CKm_pMcpxApu?0?5?$CKm_pSet@ ; `string'
PUBLIC	??_C@_0EB@MMHINABP@CI3dl2Source?$CI?$CKm_pMcpxApu?0?5m_pSet@ ; `string'
EXTRN	??0CHrtfSource@DirectSound@@QAE@ABVCHrtfListener@1@ABUDS3DSOURCEPARAMS@@@Z:NEAR ; DirectSound::CHrtfSource::CHrtfSource
EXTRN	??0CI3dl2Source@DirectSound@@QAE@ABVCI3dl2Listener@1@ABU_DSI3DL2BUFFER@@@Z:NEAR ; DirectSound::CI3dl2Source::CI3dl2Source
;	COMDAT ??_C@_0BD@EBDMEPFB@?$CBm_RegCache?4CfgFMT?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
DSOUND_RD	SEGMENT
??_C@_0BD@EBDMEPFB@?$CBm_RegCache?4CfgFMT?$AA@ DB '!m_RegCache.CfgFMT', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DKIEPBCI@?$CBm_RegCache?4CfgMISC?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DKIEPBCI@?$CBm_RegCache?4CfgMISC?$AA@ DB '!m_RegCache.CfgMISC', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@HGMFBOAN@1?5?$DN?$DN?5m_pSettings?9?$DOm_fmt?4nChannel@
DSOUND_RD	SEGMENT
??_C@_0CC@HGMFBOAN@1?5?$DN?$DN?5m_pSettings?9?$DOm_fmt?4nChannel@ DB '1 ='
	DB	'= m_pSettings->m_fmt.nChannels', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@ DB 'm_pSettings->m_p'
	DB	'3dParams', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@LGOOLAEG@CHrtfSource?$CI?$CKm_pMcpxApu?0?5?$CKm_pSet@
DSOUND_RD	SEGMENT
??_C@_0DE@LGOOLAEG@CHrtfSource?$CI?$CKm_pMcpxApu?0?5?$CKm_pSet@ DB 'CHrtf'
	DB	'Source(*m_pMcpxApu, *m_pSettings->m_p3dParams)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EB@MMHINABP@CI3dl2Source?$CI?$CKm_pMcpxApu?0?5m_pSet@
DSOUND_RD	SEGMENT
??_C@_0EB@MMHINABP@CI3dl2Source?$CI?$CKm_pMcpxApu?0?5m_pSet@ DB 'CI3dl2So'
	DB	'urce(*m_pMcpxApu, m_pSettings->m_p3dParams->I3dl2Params)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z
DSOUND	SEGMENT
tv225 = -32
tv223 = -28
tv202 = -24
tv200 = -20
_this$ = -16
$T37234 = -12
$T37229 = -8
_hr$ = -4
_fStream$ = 8
?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::Initialize, COMDAT
; _this$ = ecx

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 153  :     HRESULT                 hr  = DS_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 154  :     
; 155  :     DPF_ENTER();
; 156  : 
; 157  :     ASSERT(!m_RegCache.CfgFMT);

  00010	68 9d 00 00 00	 push	 157			; 0000009dH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@EBDMEPFB@?$CBm_RegCache?4CfgFMT?$AA@
  0001f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00022	33 c9		 xor	 ecx, ecx
  00024	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00028	0f 95 c1	 setne	 cl
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 158  :     ASSERT(!m_RegCache.CfgMISC);

  00034	68 9e 00 00 00	 push	 158			; 0000009eH
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DKIEPBCI@?$CBm_RegCache?4CfgMISC?$AA@
  00043	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00046	33 c0		 xor	 eax, eax
  00048	83 7a 18 00	 cmp	 DWORD PTR [edx+24], 0
  0004c	0f 95 c0	 setne	 al
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 159  :     
; 160  :     //
; 161  :     // Setup voice for buffer or stream mode
; 162  :     //
; 163  : 
; 164  :     if(fStream)

  00058	83 7d 08 00	 cmp	 DWORD PTR _fStream$[ebp], 0
  0005c	74 14		 je	 SHORT $L35595

; 165  :     {
; 166  :         m_RegCache.CfgFMT |= MCPX_MAKE_REG_VALUE(NV1BA0_PIO_SET_VOICE_CFG_FMT_DATA_TYPE_STREAM, NV1BA0_PIO_SET_VOICE_CFG_FMT_DATA_TYPE);

  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00064	81 ca 00 00 00
	01		 or	 edx, 16777216		; 01000000H
  0006a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 167  :     }
; 168  :     else

  00070	eb 0c		 jmp	 SHORT $L35597
$L35595:

; 169  :     {
; 170  :         m_RegCache.CfgFMT |= MCPX_MAKE_REG_VALUE(NV1BA0_PIO_SET_VOICE_CFG_FMT_DATA_TYPE_BUFFER, NV1BA0_PIO_SET_VOICE_CFG_FMT_DATA_TYPE);

  00072	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00078	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0007b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$L35597:

; 171  :     }
; 172  : 
; 173  :     //
; 174  :     // Set MIXIN-only values
; 175  :     //
; 176  : 
; 177  :     if(m_pSettings->m_dwFlags & DSBCAPS_MIXIN)

  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00084	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00087	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0008c	85 c0		 test	 eax, eax
  0008e	74 36		 je	 SHORT $L35599

; 178  :     {
; 179  :         m_RegCache.CfgFMT |= MCPX_MAKE_REG_VALUE(DSMIXBIN_SUBMIX, NV_PAVS_VOICE_CFG_FMT_MULTIPASS_BIN__ALIAS__);

  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00096	81 ca 00 00 1f
	00		 or	 edx, 2031616		; 001f0000H
  0009c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 180  :         m_RegCache.CfgFMT |= MCPX_MAKE_REG_VALUE(NV1BA0_PIO_SET_VOICE_CFG_FMT_MULTIPASS_ON, NV1BA0_PIO_SET_VOICE_CFG_FMT_MULTIPASS);

  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000a8	81 ca 00 00 20
	00		 or	 edx, 2097152		; 00200000H
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 181  :         m_RegCache.CfgFMT |= MCPX_MAKE_REG_VALUE(NV_PAVS_VOICE_CFG_FMT_CLEAR_MIX_TRUE, NV_PAVS_VOICE_CFG_FMT_CLEAR_MIX);

  000b4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ba	81 ca 00 00 00
	04		 or	 edx, 67108864		; 04000000H
  000c0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	89 50 14	 mov	 DWORD PTR [eax+20], edx
$L35599:

; 182  :     }
; 183  : 
; 184  :     //
; 185  :     // Turn interrupts on for streams.  Buffers will get them from the idle
; 186  :     // voice handler, not the hardware.
; 187  :     //
; 188  : 
; 189  :     if(fStream)

  000c6	83 7d 08 00	 cmp	 DWORD PTR _fStream$[ebp], 0
  000ca	74 12		 je	 SHORT $L35603

; 190  :     {
; 191  :         m_RegCache.CfgMISC |= MCPX_MAKE_REG_VALUE(NV1BA0_PIO_SET_VOICE_CFG_MISC_NOTIFY_INTERRUPT_ENABLE, NV1BA0_PIO_SET_VOICE_CFG_MISC_NOTIFY_INTERRUPT);

  000cc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000d2	81 ca 00 00 80
	00		 or	 edx, 8388608		; 00800000H
  000d8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000db	89 50 18	 mov	 DWORD PTR [eax+24], edx
$L35603:

; 192  :     }
; 193  : 
; 194  :     //
; 195  :     // Set up filter and SRC headroom
; 196  :     //
; 197  : 
; 198  :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000de	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000e4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e7	25 00 20 08 00	 and	 eax, 532480		; 00082000H
  000ec	85 c0		 test	 eax, eax
  000ee	74 0e		 je	 SHORT $L35605

; 199  :     {
; 200  :         m_RegCache.CfgFMT |= MCPX_MAKE_REG_VALUE(NV_PAVS_VOICE_CFG_FMT_HEADROOM_SRC0_FLT0, NV1BA0_PIO_SET_VOICE_CFG_FMT_HEADROOM);

  000f0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000f6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000f9	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 201  :     }
; 202  :     else

  000fc	eb 12		 jmp	 SHORT $L35607
$L35605:

; 203  :     {
; 204  :         m_RegCache.CfgFMT |= MCPX_MAKE_REG_VALUE(NV_PAVS_VOICE_CFG_FMT_HEADROOM_SRC1_FLT3, NV1BA0_PIO_SET_VOICE_CFG_FMT_HEADROOM);

  000fe	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00104	81 ca 00 e0 00
	00		 or	 edx, 57344		; 0000e000H
  0010a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	89 50 14	 mov	 DWORD PTR [eax+20], edx
$L35607:

; 205  :     }
; 206  : 
; 207  :     //
; 208  :     // Set the voice format.  If we're a MIXIN voice, we just need to set the
; 209  :     // voice count to 1.
; 210  :     //
; 211  : 
; 212  :     if(m_pSettings->m_dwFlags & DSBCAPS_MIXIN)

  00110	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00116	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00119	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0011e	85 c0		 test	 eax, eax
  00120	74 34		 je	 SHORT $L35609

; 213  :     {
; 214  :         ASSERT(1 == m_pSettings->m_fmt.nChannels);

  00122	68 d6 00 00 00	 push	 214			; 000000d6H
  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0012c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@HGMFBOAN@1?5?$DN?$DN?5m_pSettings?9?$DOm_fmt?4nChannel@
  00131	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00137	0f b6 42 0e	 movzx	 eax, BYTE PTR [edx+14]
  0013b	83 e8 01	 sub	 eax, 1
  0013e	f7 d8		 neg	 eax
  00140	1b c0		 sbb	 eax, eax
  00142	f7 d8		 neg	 eax
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0014a	83 c4 10	 add	 esp, 16			; 00000010H

; 215  :         m_bVoiceCount = 1;

  0014d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	c6 41 64 01	 mov	 BYTE PTR [ecx+100], 1

; 216  :     }
; 217  :     else

  00154	eb 0e		 jmp	 SHORT $L35611
$L35609:

; 218  :     {
; 219  :         hr = SetFormat();

  00156	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00159	8b 02		 mov	 eax, DWORD PTR [edx]
  0015b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	ff 50 10	 call	 DWORD PTR [eax+16]
  00161	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L35611:

; 220  :     }
; 221  : 
; 222  : #ifndef MCPX_BOOT_LIB
; 223  : 
; 224  :     //
; 225  :     // Allocate 3D helper objects
; 226  :     //
; 227  : 
; 228  :     if(SUCCEEDED(hr) && (m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  00164	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00168	0f 8c 53 01 00
	00		 jl	 $L35613
  0016e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00174	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00177	83 e0 10	 and	 eax, 16			; 00000010H
  0017a	85 c0		 test	 eax, eax
  0017c	0f 84 3f 01 00
	00		 je	 $L35613

; 229  :     {
; 230  :         ASSERT(m_pSettings->m_p3dParams);

  00182	68 e6 00 00 00	 push	 230			; 000000e6H
  00187	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0018c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
  00191	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00197	33 c0		 xor	 eax, eax
  00199	83 ba b4 00 00
	00 00		 cmp	 DWORD PTR [edx+180], 0
  001a0	0f 94 c0	 sete	 al
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001a9	83 c4 10	 add	 esp, 16			; 00000010H

; 231  :         
; 232  :         hr = HRFROMP(m_pHrtfSource = NEW(CHrtfSource(*m_pMcpxApu, *m_pSettings->m_p3dParams)));

  001ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@LGOOLAEG@CHrtfSource?$CI?$CKm_pMcpxApu?0?5?$CKm_pSet@
  001b1	68 e8 00 00 00	 push	 232			; 000000e8H
  001b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001bb	68 cc 00 00 00	 push	 204			; 000000ccH
  001c0	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  001c5	83 c4 10	 add	 esp, 16			; 00000010H
  001c8	89 45 f8	 mov	 DWORD PTR $T37229[ebp], eax
  001cb	83 7d f8 00	 cmp	 DWORD PTR $T37229[ebp], 0
  001cf	74 3c		 je	 SHORT $L37232
  001d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  001d8	74 0e		 je	 SHORT $L37230
  001da	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001dd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001e0	83 c0 58	 add	 eax, 88			; 00000058H
  001e3	89 45 ec	 mov	 DWORD PTR tv200[ebp], eax
  001e6	eb 07		 jmp	 SHORT $L37231
$L37230:
  001e8	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv200[ebp], 0
$L37231:
  001ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f2	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  001f5	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  001fb	50		 push	 eax
  001fc	8b 4d ec	 mov	 ecx, DWORD PTR tv200[ebp]
  001ff	51		 push	 ecx
  00200	8b 4d f8	 mov	 ecx, DWORD PTR $T37229[ebp]
  00203	e8 00 00 00 00	 call	 ??0CHrtfSource@DirectSound@@QAE@ABVCHrtfListener@1@ABUDS3DSOURCEPARAMS@@@Z ; DirectSound::CHrtfSource::CHrtfSource
  00208	89 45 e8	 mov	 DWORD PTR tv202[ebp], eax
  0020b	eb 07		 jmp	 SHORT $L37233
$L37232:
  0020d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv202[ebp], 0
$L37233:
  00214	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00217	8b 45 e8	 mov	 eax, DWORD PTR tv202[ebp]
  0021a	89 42 70	 mov	 DWORD PTR [edx+112], eax
  0021d	33 c9		 xor	 ecx, ecx
  0021f	83 7d e8 00	 cmp	 DWORD PTR tv202[ebp], 0
  00223	0f 95 c1	 setne	 cl
  00226	49		 dec	 ecx
  00227	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  0022d	89 4d fc	 mov	 DWORD PTR _hr$[ebp], ecx

; 233  : 
; 234  :         if(SUCCEEDED(hr))

  00230	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00234	0f 8c 87 00 00
	00		 jl	 $L35613

; 235  :         {
; 236  :             hr = HRFROMP(m_pI3dl2Source = NEW(CI3dl2Source(*m_pMcpxApu, m_pSettings->m_p3dParams->I3dl2Params)));

  0023a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@MMHINABP@CI3dl2Source?$CI?$CKm_pMcpxApu?0?5m_pSet@
  0023f	68 ec 00 00 00	 push	 236			; 000000ecH
  00244	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00249	6a 1c		 push	 28			; 0000001cH
  0024b	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00250	83 c4 10	 add	 esp, 16			; 00000010H
  00253	89 45 f4	 mov	 DWORD PTR $T37234[ebp], eax
  00256	83 7d f4 00	 cmp	 DWORD PTR $T37234[ebp], 0
  0025a	74 42		 je	 SHORT $L37237
  0025c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0025f	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00263	74 11		 je	 SHORT $L37235
  00265	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00268	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0026b	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00271	89 4d e4	 mov	 DWORD PTR tv223[ebp], ecx
  00274	eb 07		 jmp	 SHORT $L37236
$L37235:
  00276	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv223[ebp], 0
$L37236:
  0027d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00280	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00283	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00289	83 c1 4c	 add	 ecx, 76			; 0000004cH
  0028c	51		 push	 ecx
  0028d	8b 55 e4	 mov	 edx, DWORD PTR tv223[ebp]
  00290	52		 push	 edx
  00291	8b 4d f4	 mov	 ecx, DWORD PTR $T37234[ebp]
  00294	e8 00 00 00 00	 call	 ??0CI3dl2Source@DirectSound@@QAE@ABVCI3dl2Listener@1@ABU_DSI3DL2BUFFER@@@Z ; DirectSound::CI3dl2Source::CI3dl2Source
  00299	89 45 e0	 mov	 DWORD PTR tv225[ebp], eax
  0029c	eb 07		 jmp	 SHORT $L37238
$L37237:
  0029e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv225[ebp], 0
$L37238:
  002a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002a8	8b 4d e0	 mov	 ecx, DWORD PTR tv225[ebp]
  002ab	89 48 74	 mov	 DWORD PTR [eax+116], ecx
  002ae	33 d2		 xor	 edx, edx
  002b0	83 7d e0 00	 cmp	 DWORD PTR tv225[ebp], 0
  002b4	0f 95 c2	 setne	 dl
  002b7	4a		 dec	 edx
  002b8	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  002be	89 55 fc	 mov	 DWORD PTR _hr$[ebp], edx
$L35613:

; 237  :         }
; 238  :     }
; 239  : 
; 240  : #endif // MCPX_BOOT_LIB
; 241  : 
; 242  :     DPF_LEAVE_HRESULT(hr);
; 243  : 
; 244  :     return hr;

  002c1	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 245  : }

  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c2 04 00	 ret	 4
?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z ENDP	; DirectSound::CMcpxVoiceClient::Initialize
DSOUND	ENDS
EXTRN	?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemAlloc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  :     return DirectSound::CMemoryManager::TrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc

; 234  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
DSOUND	ENDS
PUBLIC	?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
PUBLIC	??0CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::~CAutoIrql
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ ; `string'
PUBLIC	??_C@_0BM@ELHILHON@CMcpxVoiceClient?3?3SetFormat?$AA@ ; `string'
PUBLIC	??_C@_0EG@IKOKNEFB@Can?8t?5change?5the?5number?5of?5hardw@ ; `string'
PUBLIC	??_C@_0BH@NGDLDOCD@Unexpected?5sample?5size?$AA@ ; `string'
PUBLIC	??_C@_0BH@CONOHMHI@Unexpected?5format?5type?$AA@ ; `string'
PUBLIC	??_C@_0CE@NMPGLFKL@?$CB?$CIm_pSettings?9?$DOm_fmt?4nChannels?5?$CF@ ; `string'
PUBLIC	??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
;	COMDAT ??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
DSOUND_RD	SEGMENT
??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ DB '!'
	DB	'(m_pSettings->m_dwFlags & DSBCAPS_MIXIN)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@ELHILHON@CMcpxVoiceClient?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@ELHILHON@CMcpxVoiceClient?3?3SetFormat?$AA@ DB 'CMcpxVoiceClien'
	DB	't::SetFormat', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EG@IKOKNEFB@Can?8t?5change?5the?5number?5of?5hardw@
DSOUND_RD	SEGMENT
??_C@_0EG@IKOKNEFB@Can?8t?5change?5the?5number?5of?5hardw@ DB 'Can''t cha'
	DB	'nge the number of hardware voices used by an allocated voice', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@NGDLDOCD@Unexpected?5sample?5size?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@NGDLDOCD@Unexpected?5sample?5size?$AA@ DB 'Unexpected sample si'
	DB	'ze', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@CONOHMHI@Unexpected?5format?5type?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@CONOHMHI@Unexpected?5format?5type?$AA@ DB 'Unexpected format ty'
	DB	'pe', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@NMPGLFKL@?$CB?$CIm_pSettings?9?$DOm_fmt?4nChannels?5?$CF@
DSOUND_RD	SEGMENT
??_C@_0CE@NMPGLFKL@?$CB?$CIm_pSettings?9?$DOm_fmt?4nChannels?5?$CF@ DB '!'
	DB	'(m_pSettings->m_fmt.nChannels % 2)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ DB 'Ke'
	DB	'GetCurrentIrql() == DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'2 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ
DSOUND	SEGMENT
tv142 = -36
tv137 = -32
_this$ = -28
$T37245 = -24
___AutoIrql$ = -20
_hr$ = -12
_bVoiceCount$ = -5
_i$ = -4
?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::SetFormat, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :     HRESULT                 hr              = DS_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 273  :     BYTE                    bVoiceCount;
; 274  :     DWORD                   i;
; 275  :     
; 276  :     DPF_ENTER();
; 277  :     AutoIrql();

  00010	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 278  : 
; 279  :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_MIXIN));

  00018	68 17 01 00 00	 push	 279			; 00000117H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00027	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0002d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00030	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00036	f7 da		 neg	 edx
  00038	1b d2		 sbb	 edx, edx
  0003a	f7 da		 neg	 edx
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 280  : 
; 281  :     //
; 282  :     // Update the number of hardware voices used by the object
; 283  :     // 
; 284  : 
; 285  :     bVoiceCount = ((m_pSettings->m_fmt.nChannels - 1) >> 1) + 1;

  00045	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0004b	0f b6 51 0e	 movzx	 edx, BYTE PTR [ecx+14]
  0004f	83 ea 01	 sub	 edx, 1
  00052	d1 fa		 sar	 edx, 1
  00054	83 c2 01	 add	 edx, 1
  00057	88 55 fb	 mov	 BYTE PTR _bVoiceCount$[ebp], dl

; 286  : 
; 287  :     if(bVoiceCount != m_bVoiceCount)

  0005a	0f b6 45 fb	 movzx	 eax, BYTE PTR _bVoiceCount$[ebp]
  0005e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00065	3b c2		 cmp	 eax, edx
  00067	74 4d		 je	 SHORT $L35637

; 288  :     {
; 289  :         if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00069	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00070	83 e1 01	 and	 ecx, 1
  00073	85 c9		 test	 ecx, ecx
  00075	74 36		 je	 SHORT $L35638

; 290  :         {
; 291  :             DPF_ERROR("Can't change the number of hardware voices used by an allocated voice");

  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@ELHILHON@CMcpxVoiceClient?3?3SetFormat?$AA@
  00081	68 23 01 00 00	 push	 291			; 00000123H
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0008b	6a 01		 push	 1
  0008d	6a 09		 push	 9
  0008f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00094	83 c4 18	 add	 esp, 24			; 00000018H
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@IKOKNEFB@Can?8t?5change?5the?5number?5of?5hardw@
  0009c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a1	83 c4 04	 add	 esp, 4

; 292  :             hr = DSERR_INVALIDCALL;

  000a4	c7 45 f4 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H

; 293  :         }
; 294  :         else

  000ab	eb 09		 jmp	 SHORT $L35637
$L35638:

; 295  :         {
; 296  :             m_bVoiceCount = bVoiceCount;

  000ad	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000b0	8a 45 fb	 mov	 al, BYTE PTR _bVoiceCount$[ebp]
  000b3	88 42 64	 mov	 BYTE PTR [edx+100], al
$L35637:

; 297  :         }
; 298  :     }
; 299  : 
; 300  :     //
; 301  :     // Create the format mask
; 302  :     //
; 303  : 
; 304  :     if(SUCCEEDED(hr))

  000b6	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ba	0f 8c 78 01 00
	00		 jl	 $L35647

; 305  :     {
; 306  :         switch(m_pSettings->m_fmt.wFormatTag)
; 307  :         {

  000c0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000c6	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000ca	89 45 e0	 mov	 DWORD PTR tv137[ebp], eax
  000cd	83 7d e0 01	 cmp	 DWORD PTR tv137[ebp], 1
  000d1	74 0f		 je	 SHORT $L35652
  000d3	83 7d e0 69	 cmp	 DWORD PTR tv137[ebp], 105 ; 00000069H
  000d7	0f 84 10 01 00
	00		 je	 $L35671
  000dd	e9 3d 01 00 00	 jmp	 $L35674
$L35652:

; 308  :             case WAVE_FORMAT_PCM:
; 309  :                 switch(m_pSettings->m_fmt.wBitsPerSample)
; 310  :                 {

  000e2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000e8	0f b6 42 0f	 movzx	 eax, BYTE PTR [edx+15]
  000ec	89 45 dc	 mov	 DWORD PTR tv142[ebp], eax
  000ef	8b 4d dc	 mov	 ecx, DWORD PTR tv142[ebp]
  000f2	83 e9 08	 sub	 ecx, 8
  000f5	89 4d dc	 mov	 DWORD PTR tv142[ebp], ecx
  000f8	83 7d dc 18	 cmp	 DWORD PTR tv142[ebp], 24 ; 00000018H
  000fc	0f 87 d0 00 00
	00		 ja	 $L35669
  00102	8b 55 dc	 mov	 edx, DWORD PTR tv142[ebp]
  00105	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $L37246[edx]
  0010c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L37248[eax*4]
$L35657:

; 311  :                     case 8:  
; 312  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE_U8, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE);

  00113	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00119	81 e2 ff ff ff
	cf		 and	 edx, -805306369		; cfffffffH
  0011f	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00122	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 313  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE_B8, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE);

  00125	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0012b	81 e2 ff ff ff
	3f		 and	 edx, 1073741823		; 3fffffffH
  00131	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00134	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 314  :                         break;

  00137	e9 af 00 00 00	 jmp	 $L35654
$L35660:

; 315  : 
; 316  :                     case 16: 
; 317  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE_S16, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE);

  0013c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00142	81 e2 ff ff ff
	cf		 and	 edx, -805306369		; cfffffffH
  00148	81 ca 00 00 00
	10		 or	 edx, 268435456		; 10000000H
  0014e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00151	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 318  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE_B16, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE);

  00154	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0015a	81 e2 ff ff ff
	3f		 and	 edx, 1073741823		; 3fffffffH
  00160	81 ca 00 00 00
	40		 or	 edx, 1073741824		; 40000000H
  00166	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00169	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 319  :                         break;

  0016c	eb 7d		 jmp	 SHORT $L35654
$L35663:

; 320  : 
; 321  :                     case 24:
; 322  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE_S24, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE);

  0016e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00174	81 e2 ff ff ff
	cf		 and	 edx, -805306369		; cfffffffH
  0017a	81 ca 00 00 00
	20		 or	 edx, 536870912		; 20000000H
  00180	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00183	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 323  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE_B32, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE);

  00186	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0018c	81 e2 ff ff ff
	3f		 and	 edx, 1073741823		; 3fffffffH
  00192	81 ca 00 00 00
	c0		 or	 edx, -1073741824	; c0000000H
  00198	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 324  :                         break;

  0019e	eb 4b		 jmp	 SHORT $L35654
$L35666:

; 325  : 
; 326  :                     case 32: 
; 327  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE_S32, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE);

  001a0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001a6	81 e2 ff ff ff
	cf		 and	 edx, -805306369		; cfffffffH
  001ac	81 ca 00 00 00
	30		 or	 edx, 805306368		; 30000000H
  001b2	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  001b5	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 328  :                         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE_B32, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE);

  001b8	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001be	81 e2 ff ff ff
	3f		 and	 edx, 1073741823		; 3fffffffH
  001c4	81 ca 00 00 00
	c0		 or	 edx, -1073741824	; c0000000H
  001ca	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 329  :                         break;

  001d0	eb 19		 jmp	 SHORT $L35654
$L35669:

; 330  : 
; 331  :                     default:
; 332  :                         ASSERTMSG("Unexpected sample size");

  001d2	68 4c 01 00 00	 push	 332			; 0000014cH
  001d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@NGDLDOCD@Unexpected?5sample?5size?$AA@
  001e1	6a 01		 push	 1
  001e3	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001e8	83 c4 10	 add	 esp, 16			; 00000010H
$L35654:

; 333  :                         break;
; 334  :                 }
; 335  : 
; 336  :                 break;

  001eb	eb 4b		 jmp	 SHORT $L35647
$L35671:

; 337  : 
; 338  :             case WAVE_FORMAT_XBOX_ADPCM:
; 339  :                 m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE_ADPCM, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE);

  001ed	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001f3	81 e2 ff ff ff
	3f		 and	 edx, 1073741823		; 3fffffffH
  001f9	81 ca 00 00 00
	80		 or	 edx, -2147483648	; 80000000H
  001ff	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00202	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 340  :                 m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE_ADPCM, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLE_SIZE);

  00205	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0020b	81 e2 ff ff ff
	cf		 and	 edx, -805306369		; cfffffffH
  00211	81 ca 00 00 00
	20		 or	 edx, 536870912		; 20000000H
  00217	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0021a	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 341  :                 break;

  0021d	eb 19		 jmp	 SHORT $L35647
$L35674:

; 342  : 
; 343  :             default:
; 344  :                 ASSERTMSG("Unexpected format type");

  0021f	68 58 01 00 00	 push	 344			; 00000158H
  00224	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00229	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@CONOHMHI@Unexpected?5format?5type?$AA@
  0022e	6a 01		 push	 1
  00230	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00235	83 c4 10	 add	 esp, 16			; 00000010H
$L35647:

; 345  :                 break;
; 346  :         }
; 347  :     }
; 348  : 
; 349  :     //
; 350  :     // Set samples per block.  This register overlaps with the multipass bin 
; 351  :     // alias for mixin buffers, so we can't set both.
; 352  :     //
; 353  : 
; 354  :     if(SUCCEEDED(hr))

  00238	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0023c	7c 27		 jl	 SHORT $L35677

; 355  :     {
; 356  :         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, m_pSettings->m_fmt.nChannels - 1, NV1BA0_PIO_SET_VOICE_CFG_FMT_SAMPLES_PER_BLOCK);

  0023e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00241	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00244	81 e2 ff ff e0
	ff		 and	 edx, -2031617		; ffe0ffffH
  0024a	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0024d	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00250	0f b6 41 0e	 movzx	 eax, BYTE PTR [ecx+14]
  00254	83 e8 01	 sub	 eax, 1
  00257	83 e0 1f	 and	 eax, 31			; 0000001fH
  0025a	c1 e0 10	 shl	 eax, 16			; 00000010H
  0025d	0b d0		 or	 edx, eax
  0025f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00262	89 51 14	 mov	 DWORD PTR [ecx+20], edx
$L35677:

; 357  :     }
; 358  : 
; 359  :     //
; 360  :     // If the voice uses more than 1 channel, enable stereo.  We can do
; 361  :     // this when we're using multiple hardware voices per software voice
; 362  :     // because we're restricted to 1, 2, 4 or 6-channels per voice, so 
; 363  :     // there's only one odd-numbered voice.
; 364  :     //
; 365  : 
; 366  :     if(SUCCEEDED(hr))

  00265	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00269	7c 6d		 jl	 SHORT $L35680

; 367  :     {
; 368  :         if(1 == m_pSettings->m_fmt.nChannels)

  0026b	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0026e	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00271	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  00275	83 f9 01	 cmp	 ecx, 1
  00278	75 13		 jne	 SHORT $L35681

; 369  :         {
; 370  :             m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_STEREO_DISABLE, NV1BA0_PIO_SET_VOICE_CFG_FMT_STEREO);

  0027a	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0027d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00280	25 ff ff ff f7	 and	 eax, -134217729		; f7ffffffH
  00285	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00288	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 371  :         }
; 372  :         else

  0028b	eb 4b		 jmp	 SHORT $L35680
$L35681:

; 373  :         {
; 374  :             ASSERT(!(m_pSettings->m_fmt.nChannels % 2));

  0028d	68 76 01 00 00	 push	 374			; 00000176H
  00292	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00297	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@NMPGLFKL@?$CB?$CIm_pSettings?9?$DOm_fmt?4nChannels?5?$CF@
  0029c	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0029f	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  002a2	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  002a6	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  002ac	79 05		 jns	 SHORT $L37247
  002ae	49		 dec	 ecx
  002af	83 c9 fe	 or	 ecx, -2			; fffffffeH
  002b2	41		 inc	 ecx
$L37247:
  002b3	f7 d9		 neg	 ecx
  002b5	1b c9		 sbb	 ecx, ecx
  002b7	f7 d9		 neg	 ecx
  002b9	51		 push	 ecx
  002ba	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002bf	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 
; 376  :             m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_STEREO_ENABLE, NV1BA0_PIO_SET_VOICE_CFG_FMT_STEREO);

  002c2	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  002c5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002c8	25 ff ff ff f7	 and	 eax, -134217729		; f7ffffffH
  002cd	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H
  002d2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002d5	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$L35680:

; 377  :         }
; 378  :     }
; 379  : 
; 380  :     //
; 381  :     // Update voice registers
; 382  :     //
; 383  :     
; 384  :     if(SUCCEEDED(hr) && (m_dwStatus & MCPX_VOICESTATUS_ALLOCATED))

  002d8	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002dc	0f 8c cd 00 00
	00		 jl	 $L35687
  002e2	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  002e5	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  002e9	83 e0 01	 and	 eax, 1
  002ec	85 c0		 test	 eax, eax
  002ee	0f 84 bb 00 00
	00		 je	 $L35687

; 385  :     {
; 386  :         MCPX_CHECK_VOICE_FIFO(2 * m_bVoiceCount);

  002f4	68 82 01 00 00	 push	 386			; 00000182H
  002f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  002fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00303	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00308	0f b6 c8	 movzx	 ecx, al
  0030b	33 d2		 xor	 edx, edx
  0030d	83 f9 02	 cmp	 ecx, 2
  00310	0f 95 c2	 setne	 dl
  00313	52		 push	 edx
  00314	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00319	83 c4 10	 add	 esp, 16			; 00000010H
  0031c	68 82 01 00 00	 push	 386			; 00000182H
  00321	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00326	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  0032b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0032e	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00332	d1 e1		 shl	 ecx, 1
  00334	33 d2		 xor	 edx, edx
  00336	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00339	0f 9f c2	 setg	 dl
  0033c	52		 push	 edx
  0033d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00342	83 c4 10	 add	 esp, 16			; 00000010H
$L35691:
  00345	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0034a	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  00350	c1 e9 02	 shr	 ecx, 2
  00353	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00356	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0035a	d1 e0		 shl	 eax, 1
  0035c	3b c8		 cmp	 ecx, eax
  0035e	73 02		 jae	 SHORT $L35692
  00360	eb e3		 jmp	 SHORT $L35691
$L35692:

; 387  : 
; 388  :         for(i = 0; i < m_bVoiceCount; i++)

  00362	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00369	eb 09		 jmp	 SHORT $L35695
$L35696:
  0036b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0036e	83 c1 01	 add	 ecx, 1
  00371	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35695:
  00374	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00377	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0037b	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  0037e	73 2f		 jae	 SHORT $L35687

; 389  :         {
; 390  :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00380	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00383	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00386	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  0038b	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00390	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 391  :             MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  00396	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00399	52		 push	 edx
  0039a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0039d	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  003a2	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  003a7	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 392  :         }

  003ad	eb bc		 jmp	 SHORT $L35696
$L35687:

; 393  :     }
; 394  : 
; 395  :     DPF_LEAVE_HRESULT(hr);
; 396  : 
; 397  :     return hr;

  003af	8b 55 f4	 mov	 edx, DWORD PTR _hr$[ebp]
  003b2	89 55 e8	 mov	 DWORD PTR $T37245[ebp], edx
  003b5	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  003b8	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  003bd	8b 45 e8	 mov	 eax, DWORD PTR $T37245[ebp]

; 398  : }

  003c0	8b e5		 mov	 esp, ebp
  003c2	5d		 pop	 ebp
  003c3	c3		 ret	 0
$L37248:
  003c4	00 00 00 00	 DD	 $L35657
  003c8	00 00 00 00	 DD	 $L35660
  003cc	00 00 00 00	 DD	 $L35663
  003d0	00 00 00 00	 DD	 $L35666
  003d4	00 00 00 00	 DD	 $L35669
$L37246:
  003d8	00		 DB	 0
  003d9	04		 DB	 4
  003da	04		 DB	 4
  003db	04		 DB	 4
  003dc	04		 DB	 4
  003dd	04		 DB	 4
  003de	04		 DB	 4
  003df	04		 DB	 4
  003e0	01		 DB	 1
  003e1	04		 DB	 4
  003e2	04		 DB	 4
  003e3	04		 DB	 4
  003e4	04		 DB	 4
  003e5	04		 DB	 4
  003e6	04		 DB	 4
  003e7	04		 DB	 4
  003e8	02		 DB	 2
  003e9	04		 DB	 4
  003ea	04		 DB	 4
  003eb	04		 DB	 4
  003ec	04		 DB	 4
  003ed	04		 DB	 4
  003ee	04		 DB	 4
  003ef	04		 DB	 4
  003f0	03		 DB	 3
?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ ENDP	; DirectSound::CMcpxVoiceClient::SetFormat
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	??0CIrql@DirectSound@@QAE@XZ			; DirectSound::CIrql::CIrql
PUBLIC	?Raise@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 77   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 78   :         Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 79   :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@DirectSound@@QAE@XZ PROC NEAR			; DirectSound::CIrql::CIrql, COMDAT
; _this$ = ecx

; 40   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   :         m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 42   :     }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Raise, COMDAT
; _this$ = ecx

; 45   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   :         if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L30264

; 47   :         {
; 48   :             m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L30264:

; 49   :         }
; 50   :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Raise
DSOUND	ENDS
PUBLIC	?Lower@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Lower
; Function compile flags: /Odt
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 82   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   :         Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 84   :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::~CAutoIrql
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Lower, COMDAT
; _this$ = ecx

; 53   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :         if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L30269

; 55   :         {
; 56   :             KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 57   :             m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L30269:

; 58   :         }
; 59   :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.h
DSOUND	ENDS
;	COMDAT ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT
_this$ = -8
_dwCfgFMT$ = -4
_dwVoiceIndex$ = 8
?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT, COMDAT
; _this$ = ecx

; 270  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :         DWORD                   dwCfgFMT    = m_RegCache.CfgFMT;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000f	89 4d fc	 mov	 DWORD PTR _dwCfgFMT$[ebp], ecx

; 272  : 
; 273  :         if(dwVoiceIndex)

  00012	83 7d 08 00	 cmp	 DWORD PTR _dwVoiceIndex$[ebp], 0
  00016	74 0c		 je	 SHORT $L34976

; 274  :         {
; 275  :             dwCfgFMT |= MCPX_MAKE_REG_VALUE(NV_PAVS_VOICE_CFG_FMT_LINKED_VOICE_ON, NV1BA0_PIO_SET_VOICE_CFG_FMT_LINKED_VOICE);

  00018	8b 55 fc	 mov	 edx, DWORD PTR _dwCfgFMT$[ebp]
  0001b	81 ca 00 00 40
	00		 or	 edx, 4194304		; 00400000H
  00021	89 55 fc	 mov	 DWORD PTR _dwCfgFMT$[ebp], edx
$L34976:

; 276  :         }
; 277  : 
; 278  :         return dwCfgFMT;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _dwCfgFMT$[ebp]

; 279  :     }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ENDP ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
DSOUND	ENDS
PUBLIC	?Initialize@CMcpxVoiceNotifier@DirectSound@@QAEXG@Z ; DirectSound::CMcpxVoiceNotifier::Initialize
PUBLIC	?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z ; DirectSound::CMcpxVoiceClient::ConvertMixBinValues
PUBLIC	?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues
PUBLIC	?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z ; DirectSound::CMcpxVoiceClient::ConvertPitchValue
PUBLIC	?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ ; DirectSound::CMcpxVoiceClient::AllocateVoiceResources
PUBLIC	?LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::LoadHrtfFilter
PUBLIC	?GetHrtfFilterPair@CHrtfSource@DirectSound@@QAEXXZ ; DirectSound::CHrtfSource::GetHrtfFilterPair
PUBLIC	??_C@_0DB@CNKNCEDN@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@ ; `string'
PUBLIC	??_C@_0BP@MPGCGJKK@?$CI18?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ ; `string'
PUBLIC	??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@		; `string'
EXTRN	?AllocateVoices@CMcpxAPU@DirectSound@@QAEJPAVCMcpxVoiceClient@2@@Z:NEAR ; DirectSound::CMcpxAPU::AllocateVoices
;	COMDAT ??_C@_0DB@CNKNCEDN@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
DSOUND_RD	SEGMENT
??_C@_0DB@CNKNCEDN@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@ DB '!('
	DB	'm_dwStatus & ~MCPX_VOICESTATUS_DEACTIVATEMASK)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@MPGCGJKK@?$CI18?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@MPGCGJKK@?$CI18?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ DB '('
	DB	'18) <= PIO_METHOD_QUEUE_CLEAR', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@ DB 'm_pHrtfSource', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ
DSOUND	SEGMENT
_this$ = -68
$T37273 = -64
_dwVoiceBins$ = -60
___AutoIrql$ = -56
_hr$ = -48
_Volume$ = -44
_dwPitch$ = -8
_i$ = -4
?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::AllocateVoiceResources, COMDAT
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 425  :     HRESULT                 hr              = DS_OK;

  00009	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 426  :     DWORD                   dwVoiceBins;
; 427  :     DWORD                   dwPitch;
; 428  :     MCPX_VOICE_VOLUME       Volume;
; 429  :     DWORD                   i;
; 430  :     
; 431  :     DPF_ENTER();
; 432  :     AutoIrql();

  00010	8d 4d c8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 433  : 
; 434  :     if(!(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED))

  00018	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0001f	83 e1 01	 and	 ecx, 1
  00022	85 c9		 test	 ecx, ecx
  00024	0f 85 b4 02 00
	00		 jne	 $L35714

; 435  :     {
; 436  :         ASSERT(!(m_dwStatus & ~MCPX_VOICESTATUS_DEACTIVATEMASK));

  0002a	68 b4 01 00 00	 push	 436			; 000001b4H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@CNKNCEDN@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
  00039	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00040	25 ee fe ff ff	 and	 eax, -274		; fffffeeeH
  00045	f7 d8		 neg	 eax
  00047	1b c0		 sbb	 eax, eax
  00049	f7 d8		 neg	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 437  :         
; 438  :         //
; 439  :         // Allocate voices
; 440  :         //
; 441  : 
; 442  :         hr = m_pMcpxApu->AllocateVoices(this);

  00054	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0005e	e8 00 00 00 00	 call	 ?AllocateVoices@CMcpxAPU@DirectSound@@QAEJPAVCMcpxVoiceClient@2@@Z ; DirectSound::CMcpxAPU::AllocateVoices
  00063	89 45 d0	 mov	 DWORD PTR _hr$[ebp], eax

; 443  : 
; 444  :         //
; 445  :         // Initialize the notifier wrapper
; 446  :         //
; 447  : 
; 448  :         if(SUCCEEDED(hr))

  00066	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006a	7c 13		 jl	 SHORT $L35717

; 449  :         {
; 450  :             m_Notifier.Initialize(m_ahVoices[0]);

  0006c	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  00073	51		 push	 ecx
  00074	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	83 c1 68	 add	 ecx, 104		; 00000068H
  0007a	e8 00 00 00 00	 call	 ?Initialize@CMcpxVoiceNotifier@DirectSound@@QAEXG@Z ; DirectSound::CMcpxVoiceNotifier::Initialize
$L35717:

; 451  :         }
; 452  : 
; 453  :         //
; 454  :         // Flag the voice as having resources allocated
; 455  :         //
; 456  : 
; 457  :         if(SUCCEEDED(hr))

  0007f	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00083	7c 10		 jl	 SHORT $L35719

; 458  :         {
; 459  :             or(&m_dwStatus, MCPX_VOICESTATUS_ALLOCATED);

  00085	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 12	 add	 ecx, 18			; 00000012H
  0008b	ba 01 00 00 00	 mov	 edx, 1
  00090	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or
$L35719:

; 460  :         }
; 461  : 
; 462  :         //
; 463  :         // Build mixbin register values
; 464  :         //
; 465  : 
; 466  :         if(SUCCEEDED(hr))

  00095	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00099	7c 13		 jl	 SHORT $L35721

; 467  :         {
; 468  :             ConvertMixBinValues(&dwVoiceBins, &m_RegCache.CfgFMT);

  0009b	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	83 c2 14	 add	 edx, 20			; 00000014H
  000a1	52		 push	 edx
  000a2	8d 45 c4	 lea	 eax, DWORD PTR _dwVoiceBins$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z ; DirectSound::CMcpxVoiceClient::ConvertMixBinValues
$L35721:

; 469  :         }
; 470  : 
; 471  :         //
; 472  :         // Build volume register values
; 473  :         //
; 474  : 
; 475  :         if(SUCCEEDED(hr))

  000ae	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b2	7c 0c		 jl	 SHORT $L35723

; 476  :         {
; 477  :             ConvertVolumeValues(&Volume);

  000b4	8d 4d d4	 lea	 ecx, DWORD PTR _Volume$[ebp]
  000b7	51		 push	 ecx
  000b8	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues
$L35723:

; 478  :         }
; 479  : 
; 480  :         //
; 481  :         // Calculate pitch shift
; 482  :         //
; 483  : 
; 484  :         if(SUCCEEDED(hr))

  000c0	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c4	7c 0c		 jl	 SHORT $L35725

; 485  :         {
; 486  :             ConvertPitchValue(&dwPitch);

  000c6	8d 55 f8	 lea	 edx, DWORD PTR _dwPitch$[ebp]
  000c9	52		 push	 edx
  000ca	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	e8 00 00 00 00	 call	 ?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z ; DirectSound::CMcpxVoiceClient::ConvertPitchValue
$L35725:

; 487  :         }
; 488  : 
; 489  :         //
; 490  :         // Set voice registers
; 491  :         //
; 492  : 
; 493  :         if(SUCCEEDED(hr))

  000d2	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d6	0f 8c b5 01 00
	00		 jl	 $L35727

; 494  :         {
; 495  :             for(i = 0; i < m_bVoiceCount; i++)

  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e3	eb 09		 jmp	 SHORT $L35728
$L35729:
  000e5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e8	83 c0 01	 add	 eax, 1
  000eb	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35728:
  000ee	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  000f5	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  000f8	0f 83 93 01 00
	00		 jae	 $L35727

; 496  :             {
; 497  :                 MCPX_CHECK_VOICE_FIFO(18);

  000fe	68 f1 01 00 00	 push	 497			; 000001f1H
  00103	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00108	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0010d	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00112	0f b6 c0	 movzx	 eax, al
  00115	33 c9		 xor	 ecx, ecx
  00117	83 f8 02	 cmp	 eax, 2
  0011a	0f 95 c1	 setne	 cl
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00123	83 c4 10	 add	 esp, 16			; 00000010H
  00126	68 f1 01 00 00	 push	 497			; 000001f1H
  0012b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00130	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@MPGCGJKK@?$CI18?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  00135	6a 00		 push	 0
  00137	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0013c	83 c4 10	 add	 esp, 16			; 00000010H
$L35733:
  0013f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00144	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  0014a	c1 e8 02	 shr	 eax, 2
  0014d	83 f8 12	 cmp	 eax, 18			; 00000012H
  00150	73 02		 jae	 SHORT $L35734
  00152	eb eb		 jmp	 SHORT $L35733
$L35734:

; 498  : 
; 499  :                 MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00154	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00157	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  0015f	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00164	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 500  :                 MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  0016a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0016d	52		 push	 edx
  0016e	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  00176	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  0017b	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 501  :                 MCPX_VOICE_WRITE(SetVoiceCfgMISC, m_RegCache.CfgMISC);

  00181	ba 18 03 00 00	 mov	 edx, 792		; 00000318H
  00186	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00189	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0018c	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 502  :                 MCPX_VOICE_WRITE(SetVoiceCfgENV0, m_RegCache.CfgENV0);

  00192	ba 08 03 00 00	 mov	 edx, 776		; 00000308H
  00197	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0019a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0019d	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 503  :                 MCPX_VOICE_WRITE(SetVoiceCfgENVA, m_RegCache.CfgENVA);

  001a3	ba 0c 03 00 00	 mov	 edx, 780		; 0000030cH
  001a8	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ae	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 504  :                 MCPX_VOICE_WRITE(SetVoiceCfgENV1, m_RegCache.CfgENV1);

  001b4	ba 10 03 00 00	 mov	 edx, 784		; 00000310H
  001b9	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001bc	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001bf	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 505  :                 MCPX_VOICE_WRITE(SetVoiceCfgENVF, m_RegCache.CfgENVF);

  001c5	ba 14 03 00 00	 mov	 edx, 788		; 00000314H
  001ca	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001d0	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 506  :                 MCPX_VOICE_WRITE(SetVoiceCfgLFODLY, m_RegCache.CfgLFODLY);

  001d6	ba 50 03 00 00	 mov	 edx, 848		; 00000350H
  001db	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001de	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001e1	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 507  :                 MCPX_VOICE_WRITE(SetVoiceLFOENV, m_RegCache.LFOENV);

  001e7	ba 6c 03 00 00	 mov	 edx, 876		; 0000036cH
  001ec	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  001f2	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 508  :                 MCPX_VOICE_WRITE(SetVoiceLFOMOD, m_RegCache.LFOMOD);

  001f8	ba 70 03 00 00	 mov	 edx, 880		; 00000370H
  001fd	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00200	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00203	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 509  :                 MCPX_VOICE_WRITE(SetVoiceTarFCA, m_RegCache.TarFCA);

  00209	ba 74 03 00 00	 mov	 edx, 884		; 00000374H
  0020e	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00211	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00214	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 510  :                 MCPX_VOICE_WRITE(SetVoiceTarFCB, m_RegCache.TarFCB);

  0021a	ba 78 03 00 00	 mov	 edx, 888		; 00000378H
  0021f	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00222	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00225	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 511  :                 MCPX_VOICE_WRITE(SetVoiceCfgVBIN, dwVoiceBins);

  0022b	ba 00 03 00 00	 mov	 edx, 768		; 00000300H
  00230	8b 45 c4	 mov	 eax, DWORD PTR _dwVoiceBins$[ebp]
  00233	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 512  :                 MCPX_VOICE_WRITE(SetVoiceTarVOLA, Volume.TarVOLA[i]);

  00239	b9 60 03 00 00	 mov	 ecx, 864		; 00000360H
  0023e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00241	8b 44 95 d4	 mov	 eax, DWORD PTR _Volume$[ebp+edx*4]
  00245	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 513  :                 MCPX_VOICE_WRITE(SetVoiceTarVOLB, Volume.TarVOLB[i]);

  0024b	b9 64 03 00 00	 mov	 ecx, 868		; 00000364H
  00250	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00253	8b 44 95 e0	 mov	 eax, DWORD PTR _Volume$[ebp+edx*4+12]
  00257	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 514  :                 MCPX_VOICE_WRITE(SetVoiceTarVOLC, Volume.TarVOLC[i]);

  0025d	b9 68 03 00 00	 mov	 ecx, 872		; 00000368H
  00262	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00265	8b 44 95 ec	 mov	 eax, DWORD PTR _Volume$[ebp+edx*4+24]
  00269	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 515  :                 MCPX_VOICE_WRITE(SetVoiceTarPitch, dwPitch);

  0026f	b9 7c 03 00 00	 mov	 ecx, 892		; 0000037cH
  00274	8b 55 f8	 mov	 edx, DWORD PTR _dwPitch$[ebp]
  00277	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 516  :                 MCPX_VOICE_WRITE(SetVoiceTarHRTF, 0xFFFF);

  0027d	b8 1c 03 00 00	 mov	 eax, 796		; 0000031cH
  00282	c7 80 00 00 82
	fe ff ff 00 00	 mov	 DWORD PTR [eax-25034752], 65535 ; 0000ffffH

; 517  :             }

  0028c	e9 54 fe ff ff	 jmp	 $L35729
$L35727:

; 518  :         }
; 519  : 
; 520  : #ifndef MCPX_BOOT_LIB
; 521  : 
; 522  :         //
; 523  :         // If we're 3D, force a reload of the HRTF filter coefficients
; 524  :         //
; 525  : 
; 526  :         if(SUCCEEDED(hr) && (m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  00291	83 7d d0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00295	7c 47		 jl	 SHORT $L35714
  00297	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0029d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002a0	83 e0 10	 and	 eax, 16			; 00000010H
  002a3	85 c0		 test	 eax, eax
  002a5	74 37		 je	 SHORT $L35714

; 527  :         {
; 528  :             ASSERT(m_pHrtfSource);

  002a7	68 10 02 00 00	 push	 528			; 00000210H
  002ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  002b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
  002b6	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b9	33 d2		 xor	 edx, edx
  002bb	83 79 70 00	 cmp	 DWORD PTR [ecx+112], 0
  002bf	0f 94 c2	 sete	 dl
  002c2	52		 push	 edx
  002c3	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002c8	83 c4 10	 add	 esp, 16			; 00000010H

; 529  : 
; 530  :             m_pHrtfSource->GetHrtfFilterPair();

  002cb	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  002ce	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  002d1	e8 00 00 00 00	 call	 ?GetHrtfFilterPair@CHrtfSource@DirectSound@@QAEXXZ ; DirectSound::CHrtfSource::GetHrtfFilterPair

; 531  : 
; 532  :             LoadHrtfFilter();

  002d6	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d9	e8 00 00 00 00	 call	 ?LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::LoadHrtfFilter
$L35714:

; 533  :         }
; 534  : 
; 535  : #endif // MCPX_BOOT_LIB
; 536  : 
; 537  :     }
; 538  : 
; 539  :     DPF_LEAVE_HRESULT(hr);
; 540  : 
; 541  :     return hr;

  002de	8b 4d d0	 mov	 ecx, DWORD PTR _hr$[ebp]
  002e1	89 4d c0	 mov	 DWORD PTR $T37273[ebp], ecx
  002e4	8d 4d c8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  002e7	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  002ec	8b 45 c0	 mov	 eax, DWORD PTR $T37273[ebp]

; 542  : }

  002ef	8b e5		 mov	 esp, ebp
  002f1	5d		 pop	 ebp
  002f2	c3		 ret	 0
?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ ENDP ; DirectSound::CMcpxVoiceClient::AllocateVoiceResources
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ?or@@YIXPCGG@Z
DSOUND	SEGMENT
_src$ = -8
_dst$ = -4
?or@@YIXPCGG@Z PROC NEAR				; or, COMDAT
; _dst$ = ecx
; _src$ = dx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	66 89 55 f8	 mov	 WORD PTR _src$[ebp], dx
  0000a	89 4d fc	 mov	 DWORD PTR _dst$[ebp], ecx

; 176  :     __asm
; 177  :     {
; 178  :         or word ptr [ecx], dx

  0000d	66 09 11	 or	 WORD PTR [ecx], dx

; 179  :     }
; 180  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?or@@YIXPCGG@Z ENDP					; or
DSOUND	ENDS
PUBLIC	?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ ; DirectSound::CHrtfSource::IsValidAlgorithm
PUBLIC	??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@	; `string'
EXTRN	?m_pfnGetFilterPair@CHrtfSource@DirectSound@@0P6GXPAV12@@ZA:DWORD ; DirectSound::CHrtfSource::m_pfnGetFilterPair
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\hrtf.h
DSOUND_RD	SEGMENT
??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\hrtf.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@ DB 'IsValidAlgorithm()', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@ DB 'm_pfnGetFilterPair', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetHrtfFilterPair@CHrtfSource@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?GetHrtfFilterPair@CHrtfSource@DirectSound@@QAEXXZ PROC NEAR ; DirectSound::CHrtfSource::GetHrtfFilterPair, COMDAT
; _this$ = ecx

; 399  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 400  :         ASSERT(IsValidAlgorithm());

  00007	68 90 01 00 00	 push	 400			; 00000190H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
  00016	e8 00 00 00 00	 call	 ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ ; DirectSound::CHrtfSource::IsValidAlgorithm
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	40		 inc	 eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 401  :         ASSERT(m_pfnGetFilterPair);

  00029	68 91 01 00 00	 push	 401			; 00000191H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
  00038	33 c0		 xor	 eax, eax
  0003a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pfnGetFilterPair@CHrtfSource@DirectSound@@0P6GXPAV12@@ZA, 0 ; DirectSound::CHrtfSource::m_pfnGetFilterPair
  00041	0f 94 c0	 sete	 al
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 402  :         m_pfnGetFilterPair(this);

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	51		 push	 ecx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR ?m_pfnGetFilterPair@CHrtfSource@DirectSound@@0P6GXPAV12@@ZA ; DirectSound::CHrtfSource::m_pfnGetFilterPair

; 403  :     }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?GetHrtfFilterPair@CHrtfSource@DirectSound@@QAEXXZ ENDP	; DirectSound::CHrtfSource::GetHrtfFilterPair
DSOUND	ENDS
EXTRN	?m_nAlgorithm@CHrtfSource@DirectSound@@1IA:DWORD ; DirectSound::CHrtfSource::m_nAlgorithm
; Function compile flags: /Odt
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT
tv66 = -4
?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ PROC NEAR ; DirectSound::CHrtfSource::IsValidAlgorithm, COMDAT

; 389  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 390  :         return (m_nAlgorithm >= DS3DALG_FIRST) && (m_nAlgorithm <= DS3DALG_LAST);

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_nAlgorithm@CHrtfSource@DirectSound@@1IA, 0 ; DirectSound::CHrtfSource::m_nAlgorithm
  0000b	72 12		 jb	 SHORT $L37283
  0000d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?m_nAlgorithm@CHrtfSource@DirectSound@@1IA, 2 ; DirectSound::CHrtfSource::m_nAlgorithm
  00014	77 09		 ja	 SHORT $L37283
  00016	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001d	eb 07		 jmp	 SHORT $L37284
$L37283:
  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L37284:
  00026	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]

; 391  :     }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ ENDP	; DirectSound::CHrtfSource::IsValidAlgorithm
DSOUND	ENDS
PUBLIC	?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z	; DirectSound::CMcpxNotifier::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.h
;	COMDAT ?Initialize@CMcpxVoiceNotifier@DirectSound@@QAEXG@Z
DSOUND	SEGMENT
_this$ = -4
_hVoice$ = 8
?Initialize@CMcpxVoiceNotifier@DirectSound@@QAEXG@Z PROC NEAR ; DirectSound::CMcpxVoiceNotifier::Initialize, COMDAT
; _this$ = ecx

; 116  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  :         CMcpxNotifier::Initialize(MCPX_NOTIFIER_BASE_OFFSET + ((DWORD)hVoice * MCPX_NOTIFIER_COUNT), MCPX_NOTIFIER_COUNT);

  00007	6a 04		 push	 4
  00009	0f b7 45 08	 movzx	 eax, WORD PTR _hVoice$[ebp]
  0000d	8d 0c 85 02 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+2]
  00014	51		 push	 ecx
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z ; DirectSound::CMcpxNotifier::Initialize

; 118  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?Initialize@CMcpxVoiceNotifier@DirectSound@@QAEXG@Z ENDP ; DirectSound::CMcpxVoiceNotifier::Initialize
DSOUND	ENDS
PUBLIC	?Reset@CMcpxNotifier@DirectSound@@QAEXXZ	; DirectSound::CMcpxNotifier::Reset
PUBLIC	??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@		; `string'
PUBLIC	??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@	; `string'
EXTRN	?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A:BYTE ; DirectSound::CMcpxCore::m_ctxMemory
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpxcore.h
DSOUND_RD	SEGMENT
??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpxcore.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@ DB '!m_paNotifier', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@ DB '!m_dwNotifierCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwBaseNotifierIndex$ = 8
_dwNotifierCount$ = 12
?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z PROC NEAR ; DirectSound::CMcpxNotifier::Initialize, COMDAT
; _this$ = ecx

; 419  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 420  :         ASSERT(!m_paNotifier);

  00007	68 a4 01 00 00	 push	 420			; 000001a4H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	0f 95 c1	 setne	 cl
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 421  :         ASSERT(!m_dwNotifierCount);

  0002a	68 a5 01 00 00	 push	 421			; 000001a5H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	33 c0		 xor	 eax, eax
  0003e	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00042	0f 95 c0	 setne	 al
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 422  : 
; 423  :         m_paNotifier = (PMCPX_HW_NOTIFICATION)CMcpxCore::m_ctxMemory[MCPX_MEM_NOTIFIERS].VirtualAddress + dwBaseNotifierIndex;

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _dwBaseNotifierIndex$[ebp]
  00051	c1 e1 04	 shl	 ecx, 4
  00054	8b 15 40 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+64
  0005a	03 d1		 add	 edx, ecx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	89 10		 mov	 DWORD PTR [eax], edx

; 424  :         m_dwNotifierCount = dwNotifierCount;

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 55 0c	 mov	 edx, DWORD PTR _dwNotifierCount$[ebp]
  00067	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 425  : 
; 426  :         Reset();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ ; DirectSound::CMcpxNotifier::Reset

; 427  :     }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z ENDP	; DirectSound::CMcpxNotifier::Initialize
DSOUND	ENDS
PUBLIC	??_C@_0N@BMLCBDGO@m_paNotifier?$AA@		; `string'
PUBLIC	??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@	; `string'
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@BMLCBDGO@m_paNotifier?$AA@ DB 'm_paNotifier', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@ DB 'm_dwNotifierCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -8
_dwNotifierIndex$ = -4
?Reset@CMcpxNotifier@DirectSound@@QAEXXZ PROC NEAR	; DirectSound::CMcpxNotifier::Reset, COMDAT
; _this$ = ecx

; 463  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 464  :         DWORD                   dwNotifierIndex;
; 465  :     
; 466  :         ASSERT(m_paNotifier);

  00009	68 d2 01 00 00	 push	 466			; 000001d2H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	0f 94 c1	 sete	 cl
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 467  :         ASSERT(m_dwNotifierCount);

  0002c	68 d3 01 00 00	 push	 467			; 000001d3H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	33 c0		 xor	 eax, eax
  00040	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00044	0f 94 c0	 sete	 al
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 468  : 
; 469  :         for(dwNotifierIndex = 0; dwNotifierIndex < m_dwNotifierCount; dwNotifierIndex++)

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwNotifierIndex$[ebp], 0
  00057	eb 09		 jmp	 SHORT $L34204
$L34205:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _dwNotifierIndex$[ebp]
  0005c	83 c1 01	 add	 ecx, 1
  0005f	89 4d fc	 mov	 DWORD PTR _dwNotifierIndex$[ebp], ecx
$L34204:
  00062	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 45 fc	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00068	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0006b	73 12		 jae	 SHORT $L34201

; 470  :         {
; 471  :             m_paNotifier[dwNotifierIndex].Status = NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS;

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _dwNotifierIndex$[ebp]
  00070	c1 e1 04	 shl	 ecx, 4
  00073	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00076	8b 02		 mov	 eax, DWORD PTR [edx]
  00078	c6 44 08 0f 80	 mov	 BYTE PTR [eax+ecx+15], 128 ; 00000080H

; 472  :         }

  0007d	eb da		 jmp	 SHORT $L34205
$L34201:

; 473  :     }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?Reset@CMcpxNotifier@DirectSound@@QAEXXZ ENDP		; DirectSound::CMcpxNotifier::Reset
DSOUND	ENDS
PUBLIC	?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ReleaseVoiceResources
PUBLIC	??_C@_0EN@KOAPLHPD@?$CB?$CIm_dwStatus?5?$CG?5?$HO?$CIMCPX_VOICESTATU@ ; `string'
PUBLIC	??_C@_0CI@NNPNAPIO@CMcpxVoiceClient?3?3ReleaseVoiceRe@ ; `string'
PUBLIC	??_C@_0CA@CEPMNOIA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5freeing?5resources?$AA@ ; `string'
EXTRN	_memset:NEAR
EXTRN	?FreeVoices@CMcpxAPU@DirectSound@@QAEXPAVCMcpxVoiceClient@2@@Z:NEAR ; DirectSound::CMcpxAPU::FreeVoices
;	COMDAT ??_C@_0EN@KOAPLHPD@?$CB?$CIm_dwStatus?5?$CG?5?$HO?$CIMCPX_VOICESTATU@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
DSOUND_RD	SEGMENT
??_C@_0EN@KOAPLHPD@?$CB?$CIm_dwStatus?5?$CG?5?$HO?$CIMCPX_VOICESTATU@ DB '!'
	DB	'(m_dwStatus & ~(MCPX_VOICESTATUS_ALLOCATED | MCPX_VOICESTATUS'
	DB	'_RELEASEMASK))', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@NNPNAPIO@CMcpxVoiceClient?3?3ReleaseVoiceRe@
DSOUND_RD	SEGMENT
??_C@_0CI@NNPNAPIO@CMcpxVoiceClient?3?3ReleaseVoiceRe@ DB 'CMcpxVoiceClie'
	DB	'nt::ReleaseVoiceResources', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CEPMNOIA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5freeing?5resources?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@CEPMNOIA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5freeing?5resources?$AA@ DB 'V'
	DB	'oice %x (%x) freeing resources', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -16
___AutoIrql$ = -12
_i$ = -4
?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::ReleaseVoiceResources, COMDAT
; _this$ = ecx

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 569  :     DWORD                   i;
; 570  :     
; 571  :     DPF_ENTER();
; 572  :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 573  : 
; 574  :     ASSERT(!(m_dwStatus & ~(MCPX_VOICESTATUS_ALLOCATED | MCPX_VOICESTATUS_RELEASEMASK)));

  00011	68 3e 02 00 00	 push	 574			; 0000023eH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EN@KOAPLHPD@?$CB?$CIm_dwStatus?5?$CG?5?$HO?$CIMCPX_VOICESTATU@
  00020	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00027	83 e1 ee	 and	 ecx, -18		; ffffffeeH
  0002a	f7 d9		 neg	 ecx
  0002c	1b c9		 sbb	 ecx, ecx
  0002e	f7 d9		 neg	 ecx
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00036	83 c4 10	 add	 esp, 16			; 00000010H

; 575  :     
; 576  :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00039	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	0f 84 cb 00 00
	00		 je	 $L35784

; 577  :     {
; 578  :         //
; 579  :         // Clear the voice structure
; 580  :         //
; 581  : 
; 582  :         for(i = 0; i < m_bVoiceCount; i++)

  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00052	eb 09		 jmp	 SHORT $L35785
$L35786:
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00057	83 c1 01	 add	 ecx, 1
  0005a	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35785:
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00064	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00067	73 4a		 jae	 SHORT $L35787

; 583  :         {
; 584  :             ZeroMemory((LPVOID)MCPX_VOICE_STRUCT_BASE(m_ahVoices[i]), NV_PAVS_SIZE);

  00069	68 80 00 00 00	 push	 128			; 00000080H
  0006e	6a 00		 push	 0
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00073	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00076	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  0007b	c1 e0 07	 shl	 eax, 7
  0007e	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  00084	03 c8		 add	 ecx, eax
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _memset
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 585  : 
; 586  :             MCPX_VOICE_STRUCT_WRITE(m_ahVoices[i], NV_PAVS_VOICE_TAR_PITCH_LINK, m_ahVoices[i]);

  0008f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  0009a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	0f b7 54 50 0c	 movzx	 edx, WORD PTR [eax+edx*2+12]
  000a5	c1 e2 07	 shl	 edx, 7
  000a8	a1 30 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  000ad	89 4c 10 7c	 mov	 DWORD PTR [eax+edx+124], ecx

; 587  :         }

  000b1	eb a1		 jmp	 SHORT $L35786
$L35787:

; 588  :         
; 589  :         //
; 590  :         // Free the notifier wrapper
; 591  :         //
; 592  : 
; 593  :         m_Notifier.Free();

  000b3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	83 c1 68	 add	 ecx, 104		; 00000068H
  000b9	e8 00 00 00 00	 call	 ?Free@CMcpxNotifier@DirectSound@@QAEXXZ ; DirectSound::CMcpxNotifier::Free

; 594  :         
; 595  :         //
; 596  :         // Free the hardware voices
; 597  :         //
; 598  : 
; 599  :         DPF_INFO("Voice %x (%x) freeing resources", this, m_ahVoices[0]);

  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@NNPNAPIO@CMcpxVoiceClient?3?3ReleaseVoiceRe@
  000c8	68 57 02 00 00	 push	 599			; 00000257H
  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000d2	6a 04		 push	 4
  000d4	6a 09		 push	 9
  000d6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000db	83 c4 18	 add	 esp, 24			; 00000018H
  000de	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  000e5	52		 push	 edx
  000e6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	50		 push	 eax
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@CEPMNOIA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5freeing?5resources?$AA@
  000ef	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 600  : 
; 601  :         m_pMcpxApu->FreeVoices(this);

  000f7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	51		 push	 ecx
  000fb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00101	e8 00 00 00 00	 call	 ?FreeVoices@CMcpxAPU@DirectSound@@QAEXPAVCMcpxVoiceClient@2@@Z ; DirectSound::CMcpxAPU::FreeVoices

; 602  : 
; 603  :         //
; 604  :         // Reset the status
; 605  :         //
; 606  : 
; 607  :         and(&m_dwStatus, MCPX_VOICESTATUS_RELEASEMASK);

  00106	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	83 c1 12	 add	 ecx, 18			; 00000012H
  0010c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00111	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and
$L35784:

; 608  :     }
; 609  : 
; 610  :     DPF_LEAVE_VOID();
; 611  : }

  00116	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00119	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxVoiceClient::ReleaseVoiceResources
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ?and@@YIXPCGG@Z
DSOUND	SEGMENT
_src$ = -8
_dst$ = -4
?and@@YIXPCGG@Z PROC NEAR				; and, COMDAT
; _dst$ = ecx
; _src$ = dx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	66 89 55 f8	 mov	 WORD PTR _src$[ebp], dx
  0000a	89 4d fc	 mov	 DWORD PTR _dst$[ebp], ecx

; 168  :     __asm
; 169  :     {
; 170  :         and word ptr [ecx], dx

  0000d	66 21 11	 and	 WORD PTR [ecx], dx

; 171  :     }
; 172  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?and@@YIXPCGG@Z ENDP					; and
DSOUND	ENDS
PUBLIC	?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetMixBins
PUBLIC	??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
;	COMDAT ??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
DSOUND_RD	SEGMENT
??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'8 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -60
$T37303 = -56
_dwVoiceBins$ = -52
___AutoIrql$ = -48
_Volume$ = -40
_i$ = -4
?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::SetMixBins, COMDAT
; _this$ = ecx

; 637  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 638  :     DWORD                   dwVoiceBins;
; 639  :     MCPX_VOICE_VOLUME       Volume;
; 640  :     DWORD                   i;
; 641  :     
; 642  :     DPF_ENTER();
; 643  :     AutoIrql();

  00009	8d 4d d0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 644  : 
; 645  :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00011	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00018	83 e1 01	 and	 ecx, 1
  0001b	85 c9		 test	 ecx, ecx
  0001d	0f 84 45 01 00
	00		 je	 $L35805

; 646  :     {
; 647  :         ConvertMixBinValues(&dwVoiceBins, &m_RegCache.CfgFMT);

  00023	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  00026	83 c2 14	 add	 edx, 20			; 00000014H
  00029	52		 push	 edx
  0002a	8d 45 cc	 lea	 eax, DWORD PTR _dwVoiceBins$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z ; DirectSound::CMcpxVoiceClient::ConvertMixBinValues

; 648  :         ConvertVolumeValues(&Volume);

  00036	8d 4d d8	 lea	 ecx, DWORD PTR _Volume$[ebp]
  00039	51		 push	 ecx
  0003a	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues

; 649  : 
; 650  :         MCPX_CHECK_VOICE_FIFO(8 * m_bVoiceCount);

  00042	68 8a 02 00 00	 push	 650			; 0000028aH
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00051	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00056	0f b6 d0	 movzx	 edx, al
  00059	33 c0		 xor	 eax, eax
  0005b	83 fa 02	 cmp	 edx, 2
  0005e	0f 95 c0	 setne	 al
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	68 8a 02 00 00	 push	 650			; 0000028aH
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  00079	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00080	c1 e2 03	 shl	 edx, 3
  00083	33 c0		 xor	 eax, eax
  00085	83 fa 20	 cmp	 edx, 32			; 00000020H
  00088	0f 9f c0	 setg	 al
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00091	83 c4 10	 add	 esp, 16			; 00000010H
$L35808:
  00094	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00099	8b 91 00 00 82
	fe		 mov	 edx, DWORD PTR [ecx-25034752]
  0009f	c1 ea 02	 shr	 edx, 2
  000a2	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  000a9	c1 e1 03	 shl	 ecx, 3
  000ac	3b d1		 cmp	 edx, ecx
  000ae	73 02		 jae	 SHORT $L35809
  000b0	eb e2		 jmp	 SHORT $L35808
$L35809:

; 651  :         
; 652  :         for(i = 0; i < m_bVoiceCount; i++)

  000b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b9	eb 09		 jmp	 SHORT $L35812
$L35813:
  000bb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000be	83 c2 01	 add	 edx, 1
  000c1	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L35812:
  000c4	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  000cb	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  000ce	0f 83 94 00 00
	00		 jae	 $L35805

; 653  :         {
; 654  :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  000d4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000d7	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  000da	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  000df	ba f8 02 00 00	 mov	 edx, 760		; 000002f8H
  000e4	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 655  :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  000ea	b8 fc 02 00 00	 mov	 eax, 764		; 000002fcH
  000ef	c7 80 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [eax-25034752], 1

; 656  :             MCPX_VOICE_WRITE(SetVoiceCfgVBIN, dwVoiceBins);

  000f9	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  000fe	8b 55 cc	 mov	 edx, DWORD PTR _dwVoiceBins$[ebp]
  00101	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 657  :             MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  00107	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  00113	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  00118	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 658  :             MCPX_VOICE_WRITE(SetVoiceTarVOLA, Volume.TarVOLA[i]);

  0011e	ba 60 03 00 00	 mov	 edx, 864		; 00000360H
  00123	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00126	8b 4c 85 d8	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4]
  0012a	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 659  :             MCPX_VOICE_WRITE(SetVoiceTarVOLB, Volume.TarVOLB[i]);

  00130	ba 64 03 00 00	 mov	 edx, 868		; 00000364H
  00135	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00138	8b 4c 85 e4	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+12]
  0013c	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 660  :             MCPX_VOICE_WRITE(SetVoiceTarVOLC, Volume.TarVOLC[i]);

  00142	ba 68 03 00 00	 mov	 edx, 872		; 00000368H
  00147	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0014a	8b 4c 85 f0	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+24]
  0014e	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 661  :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  00154	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  00159	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 662  :         }

  00163	e9 53 ff ff ff	 jmp	 $L35813
$L35805:

; 663  :     }
; 664  :     
; 665  :     DPF_LEAVE_HRESULT(DS_OK);
; 666  : 
; 667  :     return DS_OK;

  00168	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T37303[ebp], 0
  0016f	8d 4d d0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00172	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00177	8b 45 c8	 mov	 eax, DWORD PTR $T37303[ebp]

; 668  : }

  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxVoiceClient::SetMixBins
DSOUND	ENDS
PUBLIC	??_C@_0BD@HMCBNOED@a?5?$DM?$DN?5DSMIXBIN_LAST?$AA@ ; `string'
PUBLIC	??_C@_0CG@OKAMGNFN@CMcpxVoiceClient?3?3ConvertMixBinV@ ; `string'
PUBLIC	??_C@_0CF@GFBAKIMB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@ ; `string'
PUBLIC	??_C@_0CO@ECEDJPHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@ ; `string'
;	COMDAT ??_C@_0BD@HMCBNOED@a?5?$DM?$DN?5DSMIXBIN_LAST?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@HMCBNOED@a?5?$DM?$DN?5DSMIXBIN_LAST?$AA@ DB 'a <= DSMIXBIN_LAST'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OKAMGNFN@CMcpxVoiceClient?3?3ConvertMixBinV@
DSOUND_RD	SEGMENT
??_C@_0CG@OKAMGNFN@CMcpxVoiceClient?3?3ConvertMixBinV@ DB 'CMcpxVoiceClie'
	DB	'nt::ConvertMixBinValues', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GFBAKIMB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@
DSOUND_RD	SEGMENT
??_C@_0CF@GFBAKIMB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@ DB 'V'
	DB	'oice %x (%x) assigned to mixbin %lu', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@ECEDJPHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@
DSOUND_RD	SEGMENT
??_C@_0CO@ECEDJPHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@ DB 'V'
	DB	'oice %x (%x) assigned to mixbin %lu (unused)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z
DSOUND	SEGMENT
_this$ = -48
_b$ = -44
_adwMixBins$ = -40
_i$ = -8
_a$ = -4
_pdwVoiceBins$ = 8
_pdwVoiceFormat$ = 12
?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::ConvertMixBinValues, COMDAT
; _this$ = ecx

; 697  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 698  :     DWORD                   adwMixBins[8];
; 699  :     DWORD                   i, a, b;
; 700  :     
; 701  :     DPF_ENTER();
; 702  : 
; 703  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 bf 02 00 00	 push	 703			; 000002bfH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 704  : 
; 705  :     //
; 706  :     // The MCP-X registers are stored in a wacky format.  Instead of using a
; 707  :     // 32-bit register that uses 1 bit per mixbin, they use 5-bit mixbin 
; 708  :     // indeces that are stored in 30 bits of one register and 10 of another.
; 709  :     //
; 710  :     // The hardware gets surly if a voice is assigned to less than 8 mixbins, 
; 711  :     // so we'll assign it to 8, but set the extra bins' volumes to 0.
; 712  :     //
; 713  :     // You'll notice that when we invent mixbins to assign the voice to,
; 714  :     // they're unique.  This is to prevent a theoretical stall in the VP.
; 715  :     //
; 716  : 
; 717  :     for(i = 0; i < m_pSettings->m_dwMixBinCount; i++)

  00031	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00038	eb 09		 jmp	 SHORT $L35842
$L35843:
  0003a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0003d	83 c2 01	 add	 edx, 1
  00040	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L35842:
  00043	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00049	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0004c	3b 51 24	 cmp	 edx, DWORD PTR [ecx+36]
  0004f	73 17		 jae	 SHORT $L35844

; 718  :     {
; 719  :         adwMixBins[i] = m_pSettings->m_abMixBins[i];

  00051	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00057	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0005a	0f b6 44 11 28	 movzx	 eax, BYTE PTR [ecx+edx+40]
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00062	89 44 8d d8	 mov	 DWORD PTR _adwMixBins$[ebp+ecx*4], eax

; 720  :     }

  00066	eb d2		 jmp	 SHORT $L35843
$L35844:

; 721  : 
; 722  :     a = DSMIXBIN_FIRST;

  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _a$[ebp], 0
$L35846:

; 723  : 
; 724  :     while(i < NUMELMS(adwMixBins))

  0006f	83 7d f8 08	 cmp	 DWORD PTR _i$[ebp], 8
  00073	73 74		 jae	 SHORT $L35847

; 725  :     {
; 726  :         ASSERT(a <= DSMIXBIN_LAST);

  00075	68 d6 02 00 00	 push	 726			; 000002d6H
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@HMCBNOED@a?5?$DM?$DN?5DSMIXBIN_LAST?$AA@
  00084	ba 1f 00 00 00	 mov	 edx, 31			; 0000001fH
  00089	3b 55 fc	 cmp	 edx, DWORD PTR _a$[ebp]
  0008c	1b c0		 sbb	 eax, eax
  0008e	f7 d8		 neg	 eax
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00096	83 c4 10	 add	 esp, 16			; 00000010H

; 727  :         
; 728  :         for(b = 0; b < i; b++)

  00099	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _b$[ebp], 0
  000a0	eb 09		 jmp	 SHORT $L35849
$L35850:
  000a2	8b 4d d4	 mov	 ecx, DWORD PTR _b$[ebp]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	89 4d d4	 mov	 DWORD PTR _b$[ebp], ecx
$L35849:
  000ab	8b 55 d4	 mov	 edx, DWORD PTR _b$[ebp]
  000ae	3b 55 f8	 cmp	 edx, DWORD PTR _i$[ebp]
  000b1	73 10		 jae	 SHORT $L35851

; 729  :         {
; 730  :             if(a == adwMixBins[b])

  000b3	8b 45 d4	 mov	 eax, DWORD PTR _b$[ebp]
  000b6	8b 4d fc	 mov	 ecx, DWORD PTR _a$[ebp]
  000b9	3b 4c 85 d8	 cmp	 ecx, DWORD PTR _adwMixBins$[ebp+eax*4]
  000bd	75 02		 jne	 SHORT $L35852

; 731  :             {
; 732  :                 break;

  000bf	eb 02		 jmp	 SHORT $L35851
$L35852:

; 733  :             }
; 734  :         }

  000c1	eb df		 jmp	 SHORT $L35850
$L35851:

; 735  : 
; 736  :         if(b >= i)

  000c3	8b 55 d4	 mov	 edx, DWORD PTR _b$[ebp]
  000c6	3b 55 f8	 cmp	 edx, DWORD PTR _i$[ebp]
  000c9	72 13		 jb	 SHORT $L35853

; 737  :         {
; 738  :             adwMixBins[i++] = a;

  000cb	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _a$[ebp]
  000d1	89 4c 85 d8	 mov	 DWORD PTR _adwMixBins$[ebp+eax*4], ecx
  000d5	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000d8	83 c2 01	 add	 edx, 1
  000db	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L35853:

; 739  :         }
; 740  :     
; 741  :         a++;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _a$[ebp]
  000e1	83 c0 01	 add	 eax, 1
  000e4	89 45 fc	 mov	 DWORD PTR _a$[ebp], eax

; 742  :     }            

  000e7	eb 86		 jmp	 SHORT $L35846
$L35847:

; 743  : 
; 744  : #ifdef DEBUG
; 745  : 
; 746  :     for(i = 0; i < m_pSettings->m_dwMixBinCount; i++)

  000e9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000f0	eb 09		 jmp	 SHORT $L35854
$L35855:
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000f5	83 c1 01	 add	 ecx, 1
  000f8	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L35854:
  000fb	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00101	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00104	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  00107	73 43		 jae	 SHORT $L35856

; 747  :     {
; 748  :         DPF_BLAB("Voice %x (%x) assigned to mixbin %lu", this, m_ahVoices[0], adwMixBins[i]);

  00109	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0010e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@OKAMGNFN@CMcpxVoiceClient?3?3ConvertMixBinV@
  00113	68 ec 02 00 00	 push	 748			; 000002ecH
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0011d	6a 05		 push	 5
  0011f	6a 09		 push	 9
  00121	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00126	83 c4 18	 add	 esp, 24			; 00000018H
  00129	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0012c	8b 44 95 d8	 mov	 eax, DWORD PTR _adwMixBins$[ebp+edx*4]
  00130	50		 push	 eax
  00131	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00138	52		 push	 edx
  00139	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	50		 push	 eax
  0013d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@GFBAKIMB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@
  00142	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00147	83 c4 10	 add	 esp, 16			; 00000010H

; 749  :     }

  0014a	eb a6		 jmp	 SHORT $L35855
$L35856:

; 750  : 
; 751  :     for(; i < NUMELMS(adwMixBins); i++)

  0014c	eb 09		 jmp	 SHORT $L35859
$L35860:
  0014e	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00151	83 c1 01	 add	 ecx, 1
  00154	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L35859:
  00157	83 7d f8 08	 cmp	 DWORD PTR _i$[ebp], 8
  0015b	73 43		 jae	 SHORT $L35861

; 752  :     {
; 753  :         DPF_BLAB("Voice %x (%x) assigned to mixbin %lu (unused)", this, m_ahVoices[0], adwMixBins[i]);

  0015d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@OKAMGNFN@CMcpxVoiceClient?3?3ConvertMixBinV@
  00167	68 f1 02 00 00	 push	 753			; 000002f1H
  0016c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00171	6a 05		 push	 5
  00173	6a 09		 push	 9
  00175	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0017a	83 c4 18	 add	 esp, 24			; 00000018H
  0017d	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00180	8b 44 95 d8	 mov	 eax, DWORD PTR _adwMixBins$[ebp+edx*4]
  00184	50		 push	 eax
  00185	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0018c	52		 push	 edx
  0018d	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00190	50		 push	 eax
  00191	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@ECEDJPHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5assigned?5to?5mixbin@
  00196	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0019b	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :     }

  0019e	eb ae		 jmp	 SHORT $L35860
$L35861:

; 755  : 
; 756  : #endif // DEBUG
; 757  : 
; 758  :     *pdwVoiceBins = 0;

  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _pdwVoiceBins$[ebp]
  001a3	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 759  :     
; 760  :     for(i = 0; i < 3; i++)

  001a9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001b0	eb 09		 jmp	 SHORT $L35863
$L35864:
  001b2	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  001b5	83 c2 01	 add	 edx, 1
  001b8	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$L35863:
  001bb	83 7d f8 03	 cmp	 DWORD PTR _i$[ebp], 3
  001bf	73 1d		 jae	 SHORT $L35865

; 761  :     {
; 762  :         *pdwVoiceBins |= adwMixBins[i] << (i * 5);

  001c1	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001c4	6b c9 05	 imul	 ecx, 5
  001c7	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001ca	8b 54 85 d8	 mov	 edx, DWORD PTR _adwMixBins$[ebp+eax*4]
  001ce	d3 e2		 shl	 edx, cl
  001d0	8b 45 08	 mov	 eax, DWORD PTR _pdwVoiceBins$[ebp]
  001d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d5	0b ca		 or	 ecx, edx
  001d7	8b 55 08	 mov	 edx, DWORD PTR _pdwVoiceBins$[ebp]
  001da	89 0a		 mov	 DWORD PTR [edx], ecx

; 763  :     }

  001dc	eb d4		 jmp	 SHORT $L35864
$L35865:

; 764  : 
; 765  :     for(; i < 6; i++)

  001de	eb 09		 jmp	 SHORT $L35866
$L35867:
  001e0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  001e3	83 c0 01	 add	 eax, 1
  001e6	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L35866:
  001e9	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  001ed	73 20		 jae	 SHORT $L35868

; 766  :     {
; 767  :         *pdwVoiceBins |= adwMixBins[i] << ((i * 5) + 1);

  001ef	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  001f2	6b c9 05	 imul	 ecx, 5
  001f5	83 c1 01	 add	 ecx, 1
  001f8	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  001fb	8b 44 95 d8	 mov	 eax, DWORD PTR _adwMixBins$[ebp+edx*4]
  001ff	d3 e0		 shl	 eax, cl
  00201	8b 4d 08	 mov	 ecx, DWORD PTR _pdwVoiceBins$[ebp]
  00204	8b 11		 mov	 edx, DWORD PTR [ecx]
  00206	0b d0		 or	 edx, eax
  00208	8b 45 08	 mov	 eax, DWORD PTR _pdwVoiceBins$[ebp]
  0020b	89 10		 mov	 DWORD PTR [eax], edx

; 768  :     }        

  0020d	eb d1		 jmp	 SHORT $L35867
$L35868:

; 769  : 
; 770  :     *pdwVoiceFormat &= ~0x3FF;

  0020f	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwVoiceFormat$[ebp]
  00212	8b 11		 mov	 edx, DWORD PTR [ecx]
  00214	81 e2 00 fc ff
	ff		 and	 edx, -1024		; fffffc00H
  0021a	8b 45 0c	 mov	 eax, DWORD PTR _pdwVoiceFormat$[ebp]
  0021d	89 10		 mov	 DWORD PTR [eax], edx

; 771  : 
; 772  :     for(; i < 8; i++)

  0021f	eb 09		 jmp	 SHORT $L35869
$L35870:
  00221	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00224	83 c1 01	 add	 ecx, 1
  00227	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L35869:
  0022a	83 7d f8 08	 cmp	 DWORD PTR _i$[ebp], 8
  0022e	73 20		 jae	 SHORT $L35837

; 773  :     {
; 774  :         *pdwVoiceFormat |= adwMixBins[i] << ((i - 6) * 5);

  00230	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00233	83 e9 06	 sub	 ecx, 6
  00236	6b c9 05	 imul	 ecx, 5
  00239	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0023c	8b 44 95 d8	 mov	 eax, DWORD PTR _adwMixBins$[ebp+edx*4]
  00240	d3 e0		 shl	 eax, cl
  00242	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwVoiceFormat$[ebp]
  00245	8b 11		 mov	 edx, DWORD PTR [ecx]
  00247	0b d0		 or	 edx, eax
  00249	8b 45 0c	 mov	 eax, DWORD PTR _pdwVoiceFormat$[ebp]
  0024c	89 10		 mov	 DWORD PTR [eax], edx

; 775  :     }

  0024e	eb d1		 jmp	 SHORT $L35870
$L35837:

; 776  : 
; 777  :     DPF_LEAVE_VOID();
; 778  : }

  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c2 08 00	 ret	 8
?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z ENDP ; DirectSound::CMcpxVoiceClient::ConvertMixBinValues
DSOUND	ENDS
PUBLIC	??_C@_0CO@MNHCOCM@?$CI6?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
PUBLIC	?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ	; DirectSound::CMcpxVoiceClient::SetVolume
;	COMDAT ??_C@_0CO@MNHCOCM@?$CI6?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@MNHCOCM@?$CI6?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'6 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -56
$T37310 = -52
___AutoIrql$ = -48
_Volume$ = -40
_i$ = -4
?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::SetVolume, COMDAT
; _this$ = ecx

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 805  :     MCPX_VOICE_VOLUME       Volume;
; 806  :     DWORD                   i;
; 807  :     
; 808  :     DPF_ENTER();
; 809  :     AutoIrql();

  00009	8d 4d d0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 810  : 
; 811  :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00011	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00018	83 e1 01	 and	 ecx, 1
  0001b	85 c9		 test	 ecx, ecx
  0001d	0f 84 09 01 00
	00		 je	 $L35879

; 812  :     {
; 813  :         ConvertVolumeValues(&Volume);

  00023	8d 55 d8	 lea	 edx, DWORD PTR _Volume$[ebp]
  00026	52		 push	 edx
  00027	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues

; 814  : 
; 815  :         MCPX_CHECK_VOICE_FIFO(6 * m_bVoiceCount);

  0002f	68 2f 03 00 00	 push	 815			; 0000032fH
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0003e	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00043	0f b6 c0	 movzx	 eax, al
  00046	33 c9		 xor	 ecx, ecx
  00048	83 f8 02	 cmp	 eax, 2
  0004b	0f 95 c1	 setne	 cl
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	68 2f 03 00 00	 push	 815			; 0000032fH
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MNHCOCM@?$CI6?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  00066	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00069	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0006d	6b c0 06	 imul	 eax, 6
  00070	33 c9		 xor	 ecx, ecx
  00072	83 f8 20	 cmp	 eax, 32			; 00000020H
  00075	0f 9f c1	 setg	 cl
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
$L35882:
  00081	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00086	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  0008c	c1 e8 02	 shr	 eax, 2
  0008f	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00096	6b d2 06	 imul	 edx, 6
  00099	3b c2		 cmp	 eax, edx
  0009b	73 02		 jae	 SHORT $L35883
  0009d	eb e2		 jmp	 SHORT $L35882
$L35883:

; 816  :         
; 817  :         for(i = 0; i < m_bVoiceCount; i++)

  0009f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a6	eb 09		 jmp	 SHORT $L35886
$L35887:
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ab	83 c0 01	 add	 eax, 1
  000ae	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35886:
  000b1	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  000b8	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  000bb	73 6f		 jae	 SHORT $L35879

; 818  :         {
; 819  :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c0	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	0f b7 54 41 0c	 movzx	 edx, WORD PTR [ecx+eax*2+12]
  000c8	b8 f8 02 00 00	 mov	 eax, 760		; 000002f8H
  000cd	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 820  :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  000d3	b9 fc 02 00 00	 mov	 ecx, 764		; 000002fcH
  000d8	c7 81 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [ecx-25034752], 1

; 821  :             MCPX_VOICE_WRITE(SetVoiceTarVOLA, Volume.TarVOLA[i]);

  000e2	ba 60 03 00 00	 mov	 edx, 864		; 00000360H
  000e7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000ea	8b 4c 85 d8	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4]
  000ee	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 822  :             MCPX_VOICE_WRITE(SetVoiceTarVOLB, Volume.TarVOLB[i]);

  000f4	ba 64 03 00 00	 mov	 edx, 868		; 00000364H
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000fc	8b 4c 85 e4	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+12]
  00100	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 823  :             MCPX_VOICE_WRITE(SetVoiceTarVOLC, Volume.TarVOLC[i]);

  00106	ba 68 03 00 00	 mov	 edx, 872		; 00000368H
  0010b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0010e	8b 4c 85 f0	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+24]
  00112	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 824  :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  00118	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  0011d	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 825  :         }

  00127	e9 7c ff ff ff	 jmp	 $L35887
$L35879:

; 826  :     }
; 827  :     
; 828  :     DPF_LEAVE_HRESULT(DS_OK);
; 829  : 
; 830  :     return DS_OK;

  0012c	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T37310[ebp], 0
  00133	8d 4d d0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00136	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0013b	8b 45 cc	 mov	 eax, DWORD PTR $T37310[ebp]

; 831  : }

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxVoiceClient::SetVolume
DSOUND	ENDS
PUBLIC	??_C@_0DC@JPOBEEFA@m_pHrtfSource?9?$DOm_3dVoiceData?4lDi@ ; `string'
PUBLIC	??_C@_0CO@JLHGPJIA@m_pHrtfSource?9?$DOm_3dVoiceData?4lCo@ ; `string'
PUBLIC	??_C@_0CP@OCHBOLAM@m_pHrtfSource?9?$DOm_3dVoiceData?4lFr@ ; `string'
PUBLIC	??_C@_0CO@CLNGDPON@m_pHrtfSource?9?$DOm_3dVoiceData?4lRe@ ; `string'
PUBLIC	??_C@_0DA@HDLHEC@?$CB?$CIm_pSettings?9?$DOm_dwMixBinCount?5?$CF@ ; `string'
PUBLIC	??_C@_0BM@FKDFBPHH@m_pSettings?9?$DOm_lVolume?5?$DM?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0EB@OHNAHBLA@m_pSettings?9?$DOm_alMixBinVolumes?$FLm@ ; `string'
PUBLIC	??_C@_0BE@MDCCJFOE@l3dFrontDirect?5?$DM?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0BD@POMGKCHN@l3dRearDirect?5?$DM?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0BD@LALMGBAC@l3dReverbSend?5?$DM?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0P@EDMIOIDI@l3dVolume?5?$DM?$DN?50?$AA@	; `string'
PUBLIC	??_C@_0EP@CBIOHENO@m_pHrtfSource?9?$DOm_3dVoiceData?4alM@ ; `string'
PUBLIC	??_C@_0CG@MCHJLCJG@CMcpxVoiceClient?3?3ConvertVolumeV@ ; `string'
PUBLIC	??_C@_0CL@LONCEFGP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5mixbin?5?$CFlu?5?$CI?$CFlu?$CJ?5v@ ; `string'
;	COMDAT ??_C@_0DC@JPOBEEFA@m_pHrtfSource?9?$DOm_3dVoiceData?4lDi@
DSOUND_RD	SEGMENT
??_C@_0DC@JPOBEEFA@m_pHrtfSource?9?$DOm_3dVoiceData?4lDi@ DB 'm_pHrtfSour'
	DB	'ce->m_3dVoiceData.lDistanceVolume <= 0', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@JLHGPJIA@m_pHrtfSource?9?$DOm_3dVoiceData?4lCo@
DSOUND_RD	SEGMENT
??_C@_0CO@JLHGPJIA@m_pHrtfSource?9?$DOm_3dVoiceData?4lCo@ DB 'm_pHrtfSour'
	DB	'ce->m_3dVoiceData.lConeVolume <= 0', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@OCHBOLAM@m_pHrtfSource?9?$DOm_3dVoiceData?4lFr@
DSOUND_RD	SEGMENT
??_C@_0CP@OCHBOLAM@m_pHrtfSource?9?$DOm_3dVoiceData?4lFr@ DB 'm_pHrtfSour'
	DB	'ce->m_3dVoiceData.lFrontVolume <= 0', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@CLNGDPON@m_pHrtfSource?9?$DOm_3dVoiceData?4lRe@
DSOUND_RD	SEGMENT
??_C@_0CO@CLNGDPON@m_pHrtfSource?9?$DOm_3dVoiceData?4lRe@ DB 'm_pHrtfSour'
	DB	'ce->m_3dVoiceData.lRearVolume <= 0', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@HDLHEC@?$CB?$CIm_pSettings?9?$DOm_dwMixBinCount?5?$CF@
DSOUND_RD	SEGMENT
??_C@_0DA@HDLHEC@?$CB?$CIm_pSettings?9?$DOm_dwMixBinCount?5?$CF@ DB '!(m_'
	DB	'pSettings->m_dwMixBinCount % m_bVoiceCount)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@FKDFBPHH@m_pSettings?9?$DOm_lVolume?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@FKDFBPHH@m_pSettings?9?$DOm_lVolume?5?$DM?$DN?50?$AA@ DB 'm_pSe'
	DB	'ttings->m_lVolume <= 0', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EB@OHNAHBLA@m_pSettings?9?$DOm_alMixBinVolumes?$FLm@
DSOUND_RD	SEGMENT
??_C@_0EB@OHNAHBLA@m_pSettings?9?$DOm_alMixBinVolumes?$FLm@ DB 'm_pSettin'
	DB	'gs->m_alMixBinVolumes[m_pSettings->m_abMixBins[i]] <= 0', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@MDCCJFOE@l3dFrontDirect?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@MDCCJFOE@l3dFrontDirect?5?$DM?$DN?50?$AA@ DB 'l3dFrontDirect <='
	DB	' 0', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@POMGKCHN@l3dRearDirect?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@POMGKCHN@l3dRearDirect?5?$DM?$DN?50?$AA@ DB 'l3dRearDirect <= 0'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@LALMGBAC@l3dReverbSend?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@LALMGBAC@l3dReverbSend?5?$DM?$DN?50?$AA@ DB 'l3dReverbSend <= 0'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@EDMIOIDI@l3dVolume?5?$DM?$DN?50?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@EDMIOIDI@l3dVolume?5?$DM?$DN?50?$AA@ DB 'l3dVolume <= 0', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EP@CBIOHENO@m_pHrtfSource?9?$DOm_3dVoiceData?4alM@
DSOUND_RD	SEGMENT
??_C@_0EP@CBIOHENO@m_pHrtfSource?9?$DOm_3dVoiceData?4alM@ DB 'm_pHrtfSour'
	DB	'ce->m_3dVoiceData.alMixBinVolumes[m_pSettings->m_abMixBins[i]'
	DB	'] <= 0', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@MCHJLCJG@CMcpxVoiceClient?3?3ConvertVolumeV@
DSOUND_RD	SEGMENT
??_C@_0CG@MCHJLCJG@CMcpxVoiceClient?3?3ConvertVolumeV@ DB 'CMcpxVoiceClie'
	DB	'nt::ConvertVolumeValues', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@LONCEFGP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5mixbin?5?$CFlu?5?$CI?$CFlu?$CJ?5v@
DSOUND_RD	SEGMENT
??_C@_0CL@LONCEFGP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5mixbin?5?$CFlu?5?$CI?$CFlu?$CJ?5v@ DB 'V'
	DB	'oice %x (%x) mixbin %lu (%lu) volume -%ld', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z
DSOUND	SEGMENT
tv267 = -72
_this$ = -68
_l3dVolume$ = -64
_f3dVolume$ = -60
_l3dRearDirect$ = -56
_dwPerVoiceBins$ = -52
_l3dReverbSend$ = -48
_l3dFrontDirect$ = -44
_adwVolumes$ = -40
_dwVoiceIndex$ = -8
_i$ = -4
_pVolumeRegisters$ = 8
?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues, COMDAT
; _this$ = ecx

; 857  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 858  :     static const DWORD      dwMcpxMaxAttenuation                    = MCPX_GET_REG_VALUE(~0UL, NV_PAVS_VOICE_TAR_VOLA_VOLUME0);
; 859  :     DWORD                   adwVolumes[MCPX_HW_MAX_VOICE_MIXBINS];
; 860  : 
; 861  : #ifndef MCPX_BOOT_LIB
; 862  : 
; 863  :     BOOL                    f3dVolume                               = FALSE;

  00009	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _f3dVolume$[ebp], 0

; 864  :     LONG                    l3dVolume;
; 865  :     LONG                    l3dFrontDirect;
; 866  :     LONG                    l3dRearDirect;
; 867  :     LONG                    l3dReverbSend;
; 868  : 
; 869  : #endif // MCPX_BOOT_LIB
; 870  : 
; 871  :     DWORD                   dwPerVoiceBins;
; 872  :     DWORD                   dwVoiceIndex;
; 873  :     DWORD                   i;
; 874  :     
; 875  :     DPF_ENTER();
; 876  : 
; 877  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00010	68 6d 03 00 00	 push	 877			; 0000036dH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0001f	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00024	0f b6 c0	 movzx	 eax, al
  00027	33 c9		 xor	 ecx, ecx
  00029	83 f8 02	 cmp	 eax, 2
  0002c	0f 95 c1	 setne	 cl
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 878  : 
; 879  : #ifndef MCPX_BOOT_LIB
; 880  : 
; 881  :     //
; 882  :     // Calculate generic 3D volume, front direct-path, rear direct-path 
; 883  :     // and reverb send levels separately.  3D volume will be applied
; 884  :     // to all mixbins, front to the fronts, rear to the rears and reverb
; 885  :     // to the I3DL2 mixbin.
; 886  :     //
; 887  : 
; 888  :     if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  00038	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0003e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00041	83 e1 10	 and	 ecx, 16			; 00000010H
  00044	85 c9		 test	 ecx, ecx
  00046	0f 84 8b 01 00
	00		 je	 $L35918

; 889  :     {
; 890  :         ASSERT(m_pSettings->m_p3dParams);

  0004c	68 7a 03 00 00	 push	 890			; 0000037aH
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
  0005b	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00061	33 c9		 xor	 ecx, ecx
  00063	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  0006a	0f 94 c1	 sete	 cl
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 891  : 
; 892  :         if(DS3DMODE_DISABLE != m_pSettings->m_p3dParams->HrtfParams.dwMode)

  00076	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00079	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0007c	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00082	83 79 3c 02	 cmp	 DWORD PTR [ecx+60], 2
  00086	0f 84 4b 01 00
	00		 je	 $L35918

; 893  :         {
; 894  :             ASSERT(m_pHrtfSource);

  0008c	68 7e 03 00 00	 push	 894			; 0000037eH
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
  0009b	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	33 c0		 xor	 eax, eax
  000a0	83 7a 70 00	 cmp	 DWORD PTR [edx+112], 0
  000a4	0f 94 c0	 sete	 al
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ad	83 c4 10	 add	 esp, 16			; 00000010H

; 895  :         
; 896  :             ASSERT(m_pHrtfSource->m_3dVoiceData.lDistanceVolume <= 0);

  000b0	68 80 03 00 00	 push	 896			; 00000380H
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DC@JPOBEEFA@m_pHrtfSource?9?$DOm_3dVoiceData?4lDi@
  000bf	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  000c5	33 c0		 xor	 eax, eax
  000c7	83 7a 28 00	 cmp	 DWORD PTR [edx+40], 0
  000cb	0f 9f c0	 setg	 al
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d4	83 c4 10	 add	 esp, 16			; 00000010H

; 897  :             ASSERT(m_pHrtfSource->m_3dVoiceData.lConeVolume <= 0);

  000d7	68 81 03 00 00	 push	 897			; 00000381H
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@JLHGPJIA@m_pHrtfSource?9?$DOm_3dVoiceData?4lCo@
  000e6	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  000ec	33 c0		 xor	 eax, eax
  000ee	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  000f2	0f 9f c0	 setg	 al
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000fb	83 c4 10	 add	 esp, 16			; 00000010H

; 898  :             ASSERT(m_pHrtfSource->m_3dVoiceData.lFrontVolume <= 0);

  000fe	68 82 03 00 00	 push	 898			; 00000382H
  00103	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00108	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@OCHBOLAM@m_pHrtfSource?9?$DOm_3dVoiceData?4lFr@
  0010d	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00113	33 c0		 xor	 eax, eax
  00115	83 7a 30 00	 cmp	 DWORD PTR [edx+48], 0
  00119	0f 9f c0	 setg	 al
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00122	83 c4 10	 add	 esp, 16			; 00000010H

; 899  :             ASSERT(m_pHrtfSource->m_3dVoiceData.lRearVolume <= 0);

  00125	68 83 03 00 00	 push	 899			; 00000383H
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0012f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@CLNGDPON@m_pHrtfSource?9?$DOm_3dVoiceData?4lRe@
  00134	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00137	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0013a	33 c0		 xor	 eax, eax
  0013c	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  00140	0f 9f c0	 setg	 al
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00149	83 c4 10	 add	 esp, 16			; 00000010H

; 900  : 
; 901  :             l3dVolume = m_pHrtfSource->m_3dVoiceData.lDistanceVolume + m_pHrtfSource->m_3dVoiceData.lConeVolume;

  0014c	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00152	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00155	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00158	8b 52 28	 mov	 edx, DWORD PTR [edx+40]
  0015b	03 51 2c	 add	 edx, DWORD PTR [ecx+44]
  0015e	89 55 c0	 mov	 DWORD PTR _l3dVolume$[ebp], edx

; 902  :         
; 903  :             l3dFrontDirect = l3dVolume + m_pHrtfSource->m_3dVoiceData.lFrontVolume + m_pI3dl2Source->m_I3dl2Data.lDirect;

  00161	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00164	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00167	8b 55 c0	 mov	 edx, DWORD PTR _l3dVolume$[ebp]
  0016a	03 51 30	 add	 edx, DWORD PTR [ecx+48]
  0016d	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00170	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00173	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00176	89 55 d4	 mov	 DWORD PTR _l3dFrontDirect$[ebp], edx

; 904  :             l3dFrontDirect = min(l3dFrontDirect, 0);

  00179	33 d2		 xor	 edx, edx
  0017b	83 7d d4 00	 cmp	 DWORD PTR _l3dFrontDirect$[ebp], 0
  0017f	0f 9d c2	 setge	 dl
  00182	4a		 dec	 edx
  00183	23 55 d4	 and	 edx, DWORD PTR _l3dFrontDirect$[ebp]
  00186	89 55 d4	 mov	 DWORD PTR _l3dFrontDirect$[ebp], edx

; 905  : 
; 906  :             l3dRearDirect = l3dVolume + m_pHrtfSource->m_3dVoiceData.lRearVolume + m_pI3dl2Source->m_I3dl2Data.lDirect;

  00189	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0018c	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  0018f	8b 55 c0	 mov	 edx, DWORD PTR _l3dVolume$[ebp]
  00192	03 51 34	 add	 edx, DWORD PTR [ecx+52]
  00195	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00198	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0019b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0019e	89 55 c8	 mov	 DWORD PTR _l3dRearDirect$[ebp], edx

; 907  :             l3dRearDirect = min(l3dRearDirect, 0);

  001a1	33 d2		 xor	 edx, edx
  001a3	83 7d c8 00	 cmp	 DWORD PTR _l3dRearDirect$[ebp], 0
  001a7	0f 9d c2	 setge	 dl
  001aa	4a		 dec	 edx
  001ab	23 55 c8	 and	 edx, DWORD PTR _l3dRearDirect$[ebp]
  001ae	89 55 c8	 mov	 DWORD PTR _l3dRearDirect$[ebp], edx

; 908  : 
; 909  :             l3dReverbSend = l3dVolume + m_pI3dl2Source->m_I3dl2Data.lSource;

  001b1	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001b7	8b 55 c0	 mov	 edx, DWORD PTR _l3dVolume$[ebp]
  001ba	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  001bd	89 55 d0	 mov	 DWORD PTR _l3dReverbSend$[ebp], edx

; 910  :             l3dReverbSend = min(l3dReverbSend, 0);

  001c0	33 c0		 xor	 eax, eax
  001c2	83 7d d0 00	 cmp	 DWORD PTR _l3dReverbSend$[ebp], 0
  001c6	0f 9d c0	 setge	 al
  001c9	48		 dec	 eax
  001ca	23 45 d0	 and	 eax, DWORD PTR _l3dReverbSend$[ebp]
  001cd	89 45 d0	 mov	 DWORD PTR _l3dReverbSend$[ebp], eax

; 911  : 
; 912  :             f3dVolume = TRUE;

  001d0	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _f3dVolume$[ebp], 1
$L35918:

; 913  :         }
; 914  :     }
; 915  : 
; 916  : #endif // MCPX_BOOT_LIB
; 917  : 
; 918  :     //
; 919  :     // If we're multichannel, determine which mixbins need to be muted.
; 920  :     // We need to be sure that since all of our hardware voices point to
; 921  :     // the same mixbins, we mute some on a per-voice basis so we don't
; 922  :     // end up with multiple voices feeding the same mixbin.
; 923  :     //
; 924  : 
; 925  :     ASSERT(!(m_pSettings->m_dwMixBinCount % m_bVoiceCount));

  001d7	68 9d 03 00 00	 push	 925			; 0000039dH
  001dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@HDLHEC@?$CB?$CIm_pSettings?9?$DOm_dwMixBinCount?5?$CF@
  001e6	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  001ec	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  001f3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001f6	33 d2		 xor	 edx, edx
  001f8	f7 f1		 div	 ecx
  001fa	f7 da		 neg	 edx
  001fc	1b d2		 sbb	 edx, edx
  001fe	f7 da		 neg	 edx
  00200	52		 push	 edx
  00201	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00206	83 c4 10	 add	 esp, 16			; 00000010H

; 926  :     dwPerVoiceBins = m_pSettings->m_dwMixBinCount / m_bVoiceCount;

  00209	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0020c	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0020f	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00212	0f b6 49 64	 movzx	 ecx, BYTE PTR [ecx+100]
  00216	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00219	33 d2		 xor	 edx, edx
  0021b	f7 f1		 div	 ecx
  0021d	89 45 cc	 mov	 DWORD PTR _dwPerVoiceBins$[ebp], eax

; 927  : 
; 928  :     //
; 929  :     // Enter the per-voice loop
; 930  :     //
; 931  : 
; 932  :     for(dwVoiceIndex = 0; dwVoiceIndex < m_bVoiceCount; dwVoiceIndex++)

  00220	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwVoiceIndex$[ebp], 0
  00227	eb 09		 jmp	 SHORT $L35925
$L35926:
  00229	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  0022c	83 c2 01	 add	 edx, 1
  0022f	89 55 f8	 mov	 DWORD PTR _dwVoiceIndex$[ebp], edx
$L35925:
  00232	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00235	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00239	39 4d f8	 cmp	 DWORD PTR _dwVoiceIndex$[ebp], ecx
  0023c	0f 83 7b 04 00
	00		 jae	 $L35906

; 933  :     {
; 934  :         //
; 935  :         // For each mixbin we're assigned to, set a volume in the array
; 936  :         //
; 937  : 
; 938  :         for(i = 0; i < NUMELMS(adwVolumes); i++)

  00242	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00249	eb 09		 jmp	 SHORT $L35928
$L35929:
  0024b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0024e	83 c2 01	 add	 edx, 1
  00251	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L35928:
  00254	83 7d fc 08	 cmp	 DWORD PTR _i$[ebp], 8
  00258	0f 83 fc 02 00
	00		 jae	 $L35930

; 939  :         {
; 940  :             //
; 941  :             // Are we using this mixbin?
; 942  :             //
; 943  : 
; 944  :             if((i < (dwPerVoiceBins * dwVoiceIndex)) || (i >= (dwPerVoiceBins * (dwVoiceIndex + 1))))

  0025e	8b 45 cc	 mov	 eax, DWORD PTR _dwPerVoiceBins$[ebp]
  00261	0f af 45 f8	 imul	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  00265	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00268	72 11		 jb	 SHORT $L35932
  0026a	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  0026d	83 c1 01	 add	 ecx, 1
  00270	8b 55 cc	 mov	 edx, DWORD PTR _dwPerVoiceBins$[ebp]
  00273	0f af d1	 imul	 edx, ecx
  00276	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  00279	72 0d		 jb	 SHORT $L35931
$L35932:

; 945  :             {
; 946  :                 adwVolumes[i] = dwMcpxMaxAttenuation;

  0027b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0027e	c7 44 85 d8 ff
	0f 00 00	 mov	 DWORD PTR _adwVolumes$[ebp+eax*4], 4095 ; 00000fffH

; 947  :                 continue;

  00286	eb c3		 jmp	 SHORT $L35929
$L35931:

; 948  :             }
; 949  : 
; 950  :             //
; 951  :             // Start with global voice volume
; 952  :             //
; 953  : 
; 954  :             ASSERT(m_pSettings->m_lVolume <= 0);

  00288	68 ba 03 00 00	 push	 954			; 000003baH
  0028d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00292	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@FKDFBPHH@m_pSettings?9?$DOm_lVolume?5?$DM?$DN?50?$AA@
  00297	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0029d	33 c0		 xor	 eax, eax
  0029f	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  002a3	0f 9f c0	 setg	 al
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002ac	83 c4 10	 add	 esp, 16			; 00000010H

; 955  :             adwVolumes[i] = -m_pSettings->m_lVolume;

  002af	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b2	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  002b5	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002b8	f7 d8		 neg	 eax
  002ba	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002bd	89 44 8d d8	 mov	 DWORD PTR _adwVolumes$[ebp+ecx*4], eax

; 956  : 
; 957  :             //
; 958  :             // Combine mixbin-specific volume with global voice volume
; 959  :             //
; 960  : 
; 961  :             ASSERT(m_pSettings->m_alMixBinVolumes[m_pSettings->m_abMixBins[i]] <= 0);

  002c1	68 c1 03 00 00	 push	 961			; 000003c1H
  002c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  002cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@OHNAHBLA@m_pSettings?9?$DOm_alMixBinVolumes?$FLm@
  002d0	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  002d3	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  002d6	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d9	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  002dc	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002df	0f b6 54 0a 28	 movzx	 edx, BYTE PTR [edx+ecx+40]
  002e4	33 c9		 xor	 ecx, ecx
  002e6	83 7c 90 30 00	 cmp	 DWORD PTR [eax+edx*4+48], 0
  002eb	0f 9f c1	 setg	 cl
  002ee	51		 push	 ecx
  002ef	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002f4	83 c4 10	 add	 esp, 16			; 00000010H

; 962  :             adwVolumes[i] -= m_pSettings->m_alMixBinVolumes[m_pSettings->m_abMixBins[i]];

  002f7	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  002fa	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  002fd	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00300	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00303	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00306	0f b6 54 0a 28	 movzx	 edx, BYTE PTR [edx+ecx+40]
  0030b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0030e	8b 4c 8d d8	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+ecx*4]
  00312	2b 4c 90 30	 sub	 ecx, DWORD PTR [eax+edx*4+48]
  00316	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00319	89 4c 95 d8	 mov	 DWORD PTR _adwVolumes$[ebp+edx*4], ecx

; 963  : 
; 964  : #ifndef MCPX_BOOT_LIB
; 965  : 
; 966  :             //
; 967  :             // Add 3D attenuation
; 968  :             //
; 969  : 
; 970  :             if(f3dVolume)

  0031d	83 7d c4 00	 cmp	 DWORD PTR _f3dVolume$[ebp], 0
  00321	0f 84 7f 01 00
	00		 je	 $L35935

; 971  :             {
; 972  :                 switch(m_pSettings->m_abMixBins[i])
; 973  :                 {

  00327	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0032a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0032d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00330	0f b6 44 11 28	 movzx	 eax, BYTE PTR [ecx+edx+40]
  00335	89 45 b8	 mov	 DWORD PTR tv267[ebp], eax
  00338	8b 4d b8	 mov	 ecx, DWORD PTR tv267[ebp]
  0033b	83 e9 06	 sub	 ecx, 6
  0033e	89 4d b8	 mov	 DWORD PTR tv267[ebp], ecx
  00341	83 7d b8 04	 cmp	 DWORD PTR tv267[ebp], 4
  00345	0f 87 a9 00 00
	00		 ja	 $L35946
  0034b	8b 55 b8	 mov	 edx, DWORD PTR tv267[ebp]
  0034e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L37314[edx*4]
$L35940:

; 974  :                     case DSMIXBIN_3D_FRONT_LEFT:
; 975  :                     case DSMIXBIN_3D_FRONT_RIGHT:
; 976  :                         ASSERT(l3dFrontDirect <= 0);

  00355	68 d0 03 00 00	 push	 976			; 000003d0H
  0035a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0035f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@MDCCJFOE@l3dFrontDirect?5?$DM?$DN?50?$AA@
  00364	33 c0		 xor	 eax, eax
  00366	83 7d d4 00	 cmp	 DWORD PTR _l3dFrontDirect$[ebp], 0
  0036a	0f 9f c0	 setg	 al
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00373	83 c4 10	 add	 esp, 16			; 00000010H

; 977  :                         adwVolumes[i] -= l3dFrontDirect;

  00376	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00379	8b 54 8d d8	 mov	 edx, DWORD PTR _adwVolumes$[ebp+ecx*4]
  0037d	2b 55 d4	 sub	 edx, DWORD PTR _l3dFrontDirect$[ebp]
  00380	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00383	89 54 85 d8	 mov	 DWORD PTR _adwVolumes$[ebp+eax*4], edx

; 978  :                         break;

  00387	e9 9a 00 00 00	 jmp	 $L35937
$L35942:

; 979  : 
; 980  :                     case DSMIXBIN_3D_BACK_LEFT:
; 981  :                     case DSMIXBIN_3D_BACK_RIGHT:
; 982  :                         ASSERT(l3dRearDirect <= 0);

  0038c	68 d6 03 00 00	 push	 982			; 000003d6H
  00391	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00396	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@POMGKCHN@l3dRearDirect?5?$DM?$DN?50?$AA@
  0039b	33 c9		 xor	 ecx, ecx
  0039d	83 7d c8 00	 cmp	 DWORD PTR _l3dRearDirect$[ebp], 0
  003a1	0f 9f c1	 setg	 cl
  003a4	51		 push	 ecx
  003a5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  003aa	83 c4 10	 add	 esp, 16			; 00000010H

; 983  :                         adwVolumes[i] -= l3dRearDirect;

  003ad	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003b0	8b 44 95 d8	 mov	 eax, DWORD PTR _adwVolumes$[ebp+edx*4]
  003b4	2b 45 c8	 sub	 eax, DWORD PTR _l3dRearDirect$[ebp]
  003b7	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  003ba	89 44 8d d8	 mov	 DWORD PTR _adwVolumes$[ebp+ecx*4], eax

; 984  :                         break;

  003be	eb 66		 jmp	 SHORT $L35937
$L35944:

; 985  : 
; 986  :                     case DSMIXBIN_I3DL2:
; 987  :                         ASSERT(l3dReverbSend <= 0);

  003c0	68 db 03 00 00	 push	 987			; 000003dbH
  003c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  003ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@LALMGBAC@l3dReverbSend?5?$DM?$DN?50?$AA@
  003cf	33 d2		 xor	 edx, edx
  003d1	83 7d d0 00	 cmp	 DWORD PTR _l3dReverbSend$[ebp], 0
  003d5	0f 9f c2	 setg	 dl
  003d8	52		 push	 edx
  003d9	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  003de	83 c4 10	 add	 esp, 16			; 00000010H

; 988  :                         adwVolumes[i] -= l3dReverbSend;

  003e1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  003e4	8b 4c 85 d8	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+eax*4]
  003e8	2b 4d d0	 sub	 ecx, DWORD PTR _l3dReverbSend$[ebp]
  003eb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  003ee	89 4c 95 d8	 mov	 DWORD PTR _adwVolumes$[ebp+edx*4], ecx

; 989  :                         break;

  003f2	eb 32		 jmp	 SHORT $L35937
$L35946:

; 990  : 
; 991  :                     default:
; 992  :                         ASSERT(l3dVolume <= 0);

  003f4	68 e0 03 00 00	 push	 992			; 000003e0H
  003f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  003fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@EDMIOIDI@l3dVolume?5?$DM?$DN?50?$AA@
  00403	33 c0		 xor	 eax, eax
  00405	83 7d c0 00	 cmp	 DWORD PTR _l3dVolume$[ebp], 0
  00409	0f 9f c0	 setg	 al
  0040c	50		 push	 eax
  0040d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00412	83 c4 10	 add	 esp, 16			; 00000010H

; 993  :                         adwVolumes[i] -= l3dVolume;

  00415	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00418	8b 54 8d d8	 mov	 edx, DWORD PTR _adwVolumes$[ebp+ecx*4]
  0041c	2b 55 c0	 sub	 edx, DWORD PTR _l3dVolume$[ebp]
  0041f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00422	89 54 85 d8	 mov	 DWORD PTR _adwVolumes$[ebp+eax*4], edx
$L35937:

; 994  :                         break;
; 995  :                 }
; 996  : 
; 997  :                 if(m_pHrtfSource->m_3dVoiceData.dwMixBinValidMask & (1UL << m_pSettings->m_abMixBins[i]))

  00426	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00429	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0042c	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0042f	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00432	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00435	0f b6 4c 01 28	 movzx	 ecx, BYTE PTR [ecx+eax+40]
  0043a	b8 01 00 00 00	 mov	 eax, 1
  0043f	d3 e0		 shl	 eax, cl
  00441	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00444	23 c8		 and	 ecx, eax
  00446	85 c9		 test	 ecx, ecx
  00448	74 5c		 je	 SHORT $L35935

; 998  :                 {
; 999  :                     ASSERT(m_pHrtfSource->m_3dVoiceData.alMixBinVolumes[m_pSettings->m_abMixBins[i]] <= 0);

  0044a	68 e7 03 00 00	 push	 999			; 000003e7H
  0044f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00454	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EP@CBIOHENO@m_pHrtfSource?9?$DOm_3dVoiceData?4alM@
  00459	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0045c	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  0045f	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00462	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00465	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00468	0f b6 54 0a 28	 movzx	 edx, BYTE PTR [edx+ecx+40]
  0046d	33 c9		 xor	 ecx, ecx
  0046f	83 7c 90 44 00	 cmp	 DWORD PTR [eax+edx*4+68], 0
  00474	0f 9f c1	 setg	 cl
  00477	51		 push	 ecx
  00478	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0047d	83 c4 10	 add	 esp, 16			; 00000010H

; 1000 :                     adwVolumes[i] -= m_pHrtfSource->m_3dVoiceData.alMixBinVolumes[m_pSettings->m_abMixBins[i]];

  00480	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00483	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  00486	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00489	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0048c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0048f	0f b6 54 0a 28	 movzx	 edx, BYTE PTR [edx+ecx+40]
  00494	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00497	8b 4c 8d d8	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+ecx*4]
  0049b	2b 4c 90 44	 sub	 ecx, DWORD PTR [eax+edx*4+68]
  0049f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  004a2	89 4c 95 d8	 mov	 DWORD PTR _adwVolumes$[ebp+edx*4], ecx
$L35935:

; 1001 :                 }
; 1002 :             }
; 1003 : 
; 1004 : #endif // MCPX_BOOT_LIB
; 1005 : 
; 1006 :             //
; 1007 :             // Convert to register format
; 1008 :             //
; 1009 : 
; 1010 :             DPF_BLAB("Voice %x (%x) mixbin %lu (%lu) volume -%ld", this, m_ahVoices[dwVoiceIndex], i, m_pSettings->m_abMixBins[i], adwVolumes[i]);

  004a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  004ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@MCHJLCJG@CMcpxVoiceClient?3?3ConvertVolumeV@
  004b0	68 f2 03 00 00	 push	 1010			; 000003f2H
  004b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  004ba	6a 05		 push	 5
  004bc	6a 09		 push	 9
  004be	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  004c3	83 c4 18	 add	 esp, 24			; 00000018H
  004c6	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004c9	8b 4c 85 d8	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+eax*4]
  004cd	51		 push	 ecx
  004ce	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  004d1	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  004d4	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004d7	0f b6 54 08 28	 movzx	 edx, BYTE PTR [eax+ecx+40]
  004dc	52		 push	 edx
  004dd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  004e0	50		 push	 eax
  004e1	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  004e4	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  004e7	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  004ec	50		 push	 eax
  004ed	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f0	51		 push	 ecx
  004f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@LONCEFGP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5mixbin?5?$CFlu?5?$CI?$CFlu?$CJ?5v@
  004f6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  004fb	83 c4 18	 add	 esp, 24			; 00000018H

; 1011 :             
; 1012 :             adwVolumes[i] <<= 6;

  004fe	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00501	8b 44 95 d8	 mov	 eax, DWORD PTR _adwVolumes$[ebp+edx*4]
  00505	c1 e0 06	 shl	 eax, 6
  00508	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0050b	89 44 8d d8	 mov	 DWORD PTR _adwVolumes$[ebp+ecx*4], eax

; 1013 :             adwVolumes[i] /= 100;

  0050f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00512	8b 44 95 d8	 mov	 eax, DWORD PTR _adwVolumes$[ebp+edx*4]
  00516	33 d2		 xor	 edx, edx
  00518	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0051d	f7 f1		 div	 ecx
  0051f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00522	89 44 95 d8	 mov	 DWORD PTR _adwVolumes$[ebp+edx*4], eax

; 1014 : 
; 1015 :             CHECKRANGE(adwVolumes[i], 0, dwMcpxMaxAttenuation);

  00526	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00529	83 7c 85 d8 00	 cmp	 DWORD PTR _adwVolumes$[ebp+eax*4], 0
  0052e	73 0d		 jae	 SHORT $L35952
  00530	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00533	c7 44 8d d8 00
	00 00 00	 mov	 DWORD PTR _adwVolumes$[ebp+ecx*4], 0
  0053b	eb 18		 jmp	 SHORT $L35953
$L35952:
  0053d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00540	81 7c 95 d8 ff
	0f 00 00	 cmp	 DWORD PTR _adwVolumes$[ebp+edx*4], 4095 ; 00000fffH
  00548	76 0b		 jbe	 SHORT $L35953
  0054a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0054d	c7 44 85 d8 ff
	0f 00 00	 mov	 DWORD PTR _adwVolumes$[ebp+eax*4], 4095 ; 00000fffH
$L35953:

; 1016 :         }

  00555	e9 f1 fc ff ff	 jmp	 $L35929
$L35930:

; 1017 : 
; 1018 :         //
; 1019 :         // Set register values
; 1020 :         //
; 1021 : 
; 1022 :         pVolumeRegisters->TarVOLA[dwVoiceIndex] = MCPX_MAKE_REG_VALUE(adwVolumes[0], NV1BA0_PIO_SET_VOICE_TAR_VOLA_VOLUME0);

  0055a	8b 4d d8	 mov	 ecx, DWORD PTR _adwVolumes$[ebp]
  0055d	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00563	c1 e1 04	 shl	 ecx, 4
  00566	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  00569	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  0056c	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 1023 :         pVolumeRegisters->TarVOLA[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[1], NV1BA0_PIO_SET_VOICE_TAR_VOLA_VOLUME1);

  0056f	8b 4d dc	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+4]
  00572	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00578	c1 e1 14	 shl	 ecx, 20			; 00000014H
  0057b	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  0057e	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  00581	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00584	0b d1		 or	 edx, ecx
  00586	8b 45 f8	 mov	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  00589	8b 4d 08	 mov	 ecx, DWORD PTR _pVolumeRegisters$[ebp]
  0058c	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1024 :         pVolumeRegisters->TarVOLA[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[6], NV1BA0_PIO_SET_VOICE_TAR_VOLA_VOLUME6_B3_0);

  0058f	8b 55 f0	 mov	 edx, DWORD PTR _adwVolumes$[ebp+24]
  00592	83 e2 0f	 and	 edx, 15			; 0000000fH
  00595	8b 45 f8	 mov	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  00598	8b 4d 08	 mov	 ecx, DWORD PTR _pVolumeRegisters$[ebp]
  0059b	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0059e	0b c2		 or	 eax, edx
  005a0	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  005a3	8b 55 08	 mov	 edx, DWORD PTR _pVolumeRegisters$[ebp]
  005a6	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1025 :         pVolumeRegisters->TarVOLA[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[7], NV1BA0_PIO_SET_VOICE_TAR_VOLA_VOLUME7_B3_0);

  005a9	8b 45 f4	 mov	 eax, DWORD PTR _adwVolumes$[ebp+28]
  005ac	83 e0 0f	 and	 eax, 15			; 0000000fH
  005af	c1 e0 10	 shl	 eax, 16			; 00000010H
  005b2	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  005b5	8b 55 08	 mov	 edx, DWORD PTR _pVolumeRegisters$[ebp]
  005b8	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  005bb	0b c8		 or	 ecx, eax
  005bd	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  005c0	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  005c3	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 1026 : 
; 1027 :         pVolumeRegisters->TarVOLB[dwVoiceIndex] = MCPX_MAKE_REG_VALUE(adwVolumes[2], NV1BA0_PIO_SET_VOICE_TAR_VOLB_VOLUME2);

  005c6	8b 4d e0	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+8]
  005c9	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  005cf	c1 e1 04	 shl	 ecx, 4
  005d2	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  005d5	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  005d8	89 4c 90 0c	 mov	 DWORD PTR [eax+edx*4+12], ecx

; 1028 :         pVolumeRegisters->TarVOLB[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[3], NV1BA0_PIO_SET_VOICE_TAR_VOLB_VOLUME3);

  005dc	8b 4d e4	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+12]
  005df	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  005e5	c1 e1 14	 shl	 ecx, 20			; 00000014H
  005e8	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  005eb	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  005ee	8b 54 90 0c	 mov	 edx, DWORD PTR [eax+edx*4+12]
  005f2	0b d1		 or	 edx, ecx
  005f4	8b 45 f8	 mov	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  005f7	8b 4d 08	 mov	 ecx, DWORD PTR _pVolumeRegisters$[ebp]
  005fa	89 54 81 0c	 mov	 DWORD PTR [ecx+eax*4+12], edx

; 1029 :         pVolumeRegisters->TarVOLB[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[6] >> 4, NV1BA0_PIO_SET_VOICE_TAR_VOLB_VOLUME6_B7_4);

  005fe	8b 55 f0	 mov	 edx, DWORD PTR _adwVolumes$[ebp+24]
  00601	c1 ea 04	 shr	 edx, 4
  00604	83 e2 0f	 and	 edx, 15			; 0000000fH
  00607	8b 45 f8	 mov	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  0060a	8b 4d 08	 mov	 ecx, DWORD PTR _pVolumeRegisters$[ebp]
  0060d	8b 44 81 0c	 mov	 eax, DWORD PTR [ecx+eax*4+12]
  00611	0b c2		 or	 eax, edx
  00613	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  00616	8b 55 08	 mov	 edx, DWORD PTR _pVolumeRegisters$[ebp]
  00619	89 44 8a 0c	 mov	 DWORD PTR [edx+ecx*4+12], eax

; 1030 :         pVolumeRegisters->TarVOLB[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[7] >> 4, NV1BA0_PIO_SET_VOICE_TAR_VOLB_VOLUME7_B7_4);

  0061d	8b 45 f4	 mov	 eax, DWORD PTR _adwVolumes$[ebp+28]
  00620	c1 e8 04	 shr	 eax, 4
  00623	83 e0 0f	 and	 eax, 15			; 0000000fH
  00626	c1 e0 10	 shl	 eax, 16			; 00000010H
  00629	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  0062c	8b 55 08	 mov	 edx, DWORD PTR _pVolumeRegisters$[ebp]
  0062f	8b 4c 8a 0c	 mov	 ecx, DWORD PTR [edx+ecx*4+12]
  00633	0b c8		 or	 ecx, eax
  00635	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  00638	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  0063b	89 4c 90 0c	 mov	 DWORD PTR [eax+edx*4+12], ecx

; 1031 : 
; 1032 :         pVolumeRegisters->TarVOLC[dwVoiceIndex] = MCPX_MAKE_REG_VALUE(adwVolumes[4], NV1BA0_PIO_SET_VOICE_TAR_VOLC_VOLUME4);

  0063f	8b 4d e8	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+16]
  00642	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00648	c1 e1 04	 shl	 ecx, 4
  0064b	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  0064e	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  00651	89 4c 90 18	 mov	 DWORD PTR [eax+edx*4+24], ecx

; 1033 :         pVolumeRegisters->TarVOLC[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[5], NV1BA0_PIO_SET_VOICE_TAR_VOLC_VOLUME5);

  00655	8b 4d ec	 mov	 ecx, DWORD PTR _adwVolumes$[ebp+20]
  00658	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  0065e	c1 e1 14	 shl	 ecx, 20			; 00000014H
  00661	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  00664	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  00667	8b 54 90 18	 mov	 edx, DWORD PTR [eax+edx*4+24]
  0066b	0b d1		 or	 edx, ecx
  0066d	8b 45 f8	 mov	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  00670	8b 4d 08	 mov	 ecx, DWORD PTR _pVolumeRegisters$[ebp]
  00673	89 54 81 18	 mov	 DWORD PTR [ecx+eax*4+24], edx

; 1034 :         pVolumeRegisters->TarVOLC[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[6] >> 8, NV1BA0_PIO_SET_VOICE_TAR_VOLC_VOLUME6_B11_8);

  00677	8b 55 f0	 mov	 edx, DWORD PTR _adwVolumes$[ebp+24]
  0067a	c1 ea 08	 shr	 edx, 8
  0067d	83 e2 0f	 and	 edx, 15			; 0000000fH
  00680	8b 45 f8	 mov	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  00683	8b 4d 08	 mov	 ecx, DWORD PTR _pVolumeRegisters$[ebp]
  00686	8b 44 81 18	 mov	 eax, DWORD PTR [ecx+eax*4+24]
  0068a	0b c2		 or	 eax, edx
  0068c	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  0068f	8b 55 08	 mov	 edx, DWORD PTR _pVolumeRegisters$[ebp]
  00692	89 44 8a 18	 mov	 DWORD PTR [edx+ecx*4+24], eax

; 1035 :         pVolumeRegisters->TarVOLC[dwVoiceIndex] |= MCPX_MAKE_REG_VALUE(adwVolumes[7] >> 8, NV1BA0_PIO_SET_VOICE_TAR_VOLC_VOLUME7_B11_8);

  00696	8b 45 f4	 mov	 eax, DWORD PTR _adwVolumes$[ebp+28]
  00699	c1 e8 08	 shr	 eax, 8
  0069c	83 e0 0f	 and	 eax, 15			; 0000000fH
  0069f	c1 e0 10	 shl	 eax, 16			; 00000010H
  006a2	8b 4d f8	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  006a5	8b 55 08	 mov	 edx, DWORD PTR _pVolumeRegisters$[ebp]
  006a8	8b 4c 8a 18	 mov	 ecx, DWORD PTR [edx+ecx*4+24]
  006ac	0b c8		 or	 ecx, eax
  006ae	8b 55 f8	 mov	 edx, DWORD PTR _dwVoiceIndex$[ebp]
  006b1	8b 45 08	 mov	 eax, DWORD PTR _pVolumeRegisters$[ebp]
  006b4	89 4c 90 18	 mov	 DWORD PTR [eax+edx*4+24], ecx

; 1036 :     }

  006b8	e9 6c fb ff ff	 jmp	 $L35926
$L35906:

; 1037 : 
; 1038 :     DPF_LEAVE_VOID();
; 1039 : }

  006bd	8b e5		 mov	 esp, ebp
  006bf	5d		 pop	 ebp
  006c0	c2 04 00	 ret	 4
$L37314:
  006c3	00 00 00 00	 DD	 $L35940
  006c7	00 00 00 00	 DD	 $L35940
  006cb	00 00 00 00	 DD	 $L35942
  006cf	00 00 00 00	 DD	 $L35942
  006d3	00 00 00 00	 DD	 $L35944
?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ENDP ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues
DSOUND	ENDS
PUBLIC	?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ	; DirectSound::CMcpxVoiceClient::SetPitch
; Function compile flags: /Odt
;	COMDAT ?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -32
$T37318 = -28
___AutoIrql$ = -24
_pSourceVoice$ = -16
_dwPitch$ = -12
_i$ = -8
_pleSourceVoice$ = -4
?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::SetPitch, COMDAT
; _this$ = ecx

; 1065 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1066 :     PLIST_ENTRY             pleSourceVoice;
; 1067 :     CMcpxVoiceClient *      pSourceVoice;
; 1068 :     DWORD                   dwPitch;
; 1069 :     DWORD                   i;
; 1070 :     
; 1071 :     DPF_ENTER();
; 1072 :     AutoIrql();

  00009	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1073 : 
; 1074 :     //
; 1075 :     // If we're a submix destination, we can't change our pitch.  It has to
; 1076 :     // stay locked at 0.  Instead, we'll update all the source voices' pitch
; 1077 :     // values.
; 1078 :     //
; 1079 : 
; 1080 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  00011	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00017	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001a	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00020	85 d2		 test	 edx, edx
  00022	74 4b		 je	 SHORT $L35976

; 1081 :     {
; 1082 :         for(pleSourceVoice = m_lstSourceVoices.Flink; pleSourceVoice != &m_lstSourceVoices; pleSourceVoice = pleSourceVoice->Flink)

  00024	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  0002a	89 4d fc	 mov	 DWORD PTR _pleSourceVoice$[ebp], ecx
  0002d	eb 08		 jmp	 SHORT $L35977
$L35978:
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _pleSourceVoice$[ebp]
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	89 45 fc	 mov	 DWORD PTR _pleSourceVoice$[ebp], eax
$L35977:
  00037	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 44	 add	 ecx, 68			; 00000044H
  0003d	39 4d fc	 cmp	 DWORD PTR _pleSourceVoice$[ebp], ecx
  00040	74 28		 je	 SHORT $L35979

; 1083 :         {
; 1084 :             AssertValidEntryList(pleSourceVoice, ASSERT_IN_LIST);

  00042	68 3c 04 00 00	 push	 1084			; 0000043cH
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0004c	6a 01		 push	 1
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _pleSourceVoice$[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1085 : 
; 1086 :             pSourceVoice = CONTAINING_RECORD(pleSourceVoice, CMcpxVoiceClient, m_leSourceVoice);

  00057	8b 45 fc	 mov	 eax, DWORD PTR _pleSourceVoice$[ebp]
  0005a	83 e8 5c	 sub	 eax, 92			; 0000005cH
  0005d	89 45 f0	 mov	 DWORD PTR _pSourceVoice$[ebp], eax

; 1087 : 
; 1088 :             pSourceVoice->SetPitch();

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _pSourceVoice$[ebp]
  00063	e8 00 00 00 00	 call	 ?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetPitch

; 1089 :         }

  00068	eb c5		 jmp	 SHORT $L35978
$L35979:

; 1090 :     }
; 1091 :     else if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  0006a	e9 d0 00 00 00	 jmp	 $L35984
$L35976:
  0006f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00076	83 e2 01	 and	 edx, 1
  00079	85 d2		 test	 edx, edx
  0007b	0f 84 be 00 00
	00		 je	 $L35984

; 1092 :     {
; 1093 :         ConvertPitchValue(&dwPitch);

  00081	8d 45 f4	 lea	 eax, DWORD PTR _dwPitch$[ebp]
  00084	50		 push	 eax
  00085	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z ; DirectSound::CMcpxVoiceClient::ConvertPitchValue

; 1094 : 
; 1095 :         MCPX_CHECK_VOICE_FIFO(2 * m_bVoiceCount);

  0008d	68 47 04 00 00	 push	 1095			; 00000447H
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0009c	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  000a1	0f b6 c8	 movzx	 ecx, al
  000a4	33 d2		 xor	 edx, edx
  000a6	83 f9 02	 cmp	 ecx, 2
  000a9	0f 95 c2	 setne	 dl
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	68 47 04 00 00	 push	 1095			; 00000447H
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  000c4	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  000cb	d1 e1		 shl	 ecx, 1
  000cd	33 d2		 xor	 edx, edx
  000cf	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000d2	0f 9f c2	 setg	 dl
  000d5	52		 push	 edx
  000d6	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000db	83 c4 10	 add	 esp, 16			; 00000010H
$L35987:
  000de	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000e3	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  000e9	c1 e9 02	 shr	 ecx, 2
  000ec	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  000f3	d1 e0		 shl	 eax, 1
  000f5	3b c8		 cmp	 ecx, eax
  000f7	73 02		 jae	 SHORT $L35988
  000f9	eb e3		 jmp	 SHORT $L35987
$L35988:

; 1096 :         
; 1097 :         for(i = 0; i < m_bVoiceCount; i++)

  000fb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00102	eb 09		 jmp	 SHORT $L35991
$L35992:
  00104	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00107	83 c1 01	 add	 ecx, 1
  0010a	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$L35991:
  0010d	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00110	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00114	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  00117	73 26		 jae	 SHORT $L35984

; 1098 :         {
; 1099 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00119	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0011c	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00124	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00129	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 1100 :             MCPX_VOICE_WRITE(SetVoiceTarPitch, dwPitch);

  0012f	ba 7c 03 00 00	 mov	 edx, 892		; 0000037cH
  00134	8b 45 f4	 mov	 eax, DWORD PTR _dwPitch$[ebp]
  00137	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 1101 :         }

  0013d	eb c5		 jmp	 SHORT $L35992
$L35984:

; 1102 :     }
; 1103 :     
; 1104 :     DPF_LEAVE_HRESULT(DS_OK);
; 1105 : 
; 1106 :     return DS_OK;

  0013f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T37318[ebp], 0
  00146	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00149	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0014e	8b 45 e4	 mov	 eax, DWORD PTR $T37318[ebp]

; 1107 : }

  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxVoiceClient::SetPitch
DSOUND	ENDS
PUBLIC	?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
PUBLIC	??_C@_0CN@OKJMGJNE@pSubMixDestination?9?$DOm_pSettings?9@ ; `string'
PUBLIC	??_C@_0CC@GOKFKIKE@pSubMixDestination?9?$DOm_pHrtfSourc@ ; `string'
;	COMDAT ??_C@_0CN@OKJMGJNE@pSubMixDestination?9?$DOm_pSettings?9@
DSOUND_RD	SEGMENT
??_C@_0CN@OKJMGJNE@pSubMixDestination?9?$DOm_pSettings?9@ DB 'pSubMixDest'
	DB	'ination->m_pSettings->m_p3dParams', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GOKFKIKE@pSubMixDestination?9?$DOm_pHrtfSourc@
DSOUND_RD	SEGMENT
??_C@_0CC@GOKFKIKE@pSubMixDestination?9?$DOm_pHrtfSourc@ DB 'pSubMixDesti'
	DB	'nation->m_pHrtfSource', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z
DSOUND	SEGMENT
_this$ = -12
_pSubMixDestination$ = -8
_lPitch$ = -4
_pdwPitch$ = 8
?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::ConvertPitchValue, COMDAT
; _this$ = ecx

; 1133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1134 :     CMcpxBuffer *           pSubMixDestination;
; 1135 :     LONG                    lPitch;
; 1136 :     
; 1137 :     DPF_ENTER();
; 1138 : 
; 1139 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 73 04 00 00	 push	 1139			; 00000473H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1140 : 
; 1141 :     //
; 1142 :     // If we're a submix destination, our pitch must be locked at 0.  In order 
; 1143 :     // to allow callers to set the pitch on submix destination voices, all
; 1144 :     // source voices will know to read from our pitch.
; 1145 :     //
; 1146 : 
; 1147 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  00031	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00040	85 c9		 test	 ecx, ecx
  00042	74 0c		 je	 SHORT $L36006

; 1148 :     {
; 1149 :         lPitch = 0;

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _lPitch$[ebp], 0

; 1150 :     }
; 1151 :     else

  0004b	e9 5c 01 00 00	 jmp	 $L36007
$L36006:

; 1152 :     {
; 1153 :         lPitch = m_pSettings->m_lPitch;

  00050	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00056	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00059	89 4d fc	 mov	 DWORD PTR _lPitch$[ebp], ecx

; 1154 : 
; 1155 : #ifndef MCPX_BOOT_LIB
; 1156 : 
; 1157 :         if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  0005c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	83 e1 10	 and	 ecx, 16			; 00000010H
  00068	85 c9		 test	 ecx, ecx
  0006a	74 6f		 je	 SHORT $L36008

; 1158 :         {
; 1159 :             ASSERT(m_pSettings->m_p3dParams);

  0006c	68 87 04 00 00	 push	 1159			; 00000487H
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00081	33 c9		 xor	 ecx, ecx
  00083	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  0008a	0f 94 c1	 sete	 cl
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00093	83 c4 10	 add	 esp, 16			; 00000010H

; 1160 :             ASSERT(m_pHrtfSource);

  00096	68 88 04 00 00	 push	 1160			; 00000488H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
  000a5	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	33 c0		 xor	 eax, eax
  000aa	83 7a 70 00	 cmp	 DWORD PTR [edx+112], 0
  000ae	0f 94 c0	 sete	 al
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b7	83 c4 10	 add	 esp, 16			; 00000010H

; 1161 :             
; 1162 :             if(DS3DMODE_DISABLE != m_pSettings->m_p3dParams->HrtfParams.dwMode)

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000c0	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  000c6	83 78 3c 02	 cmp	 DWORD PTR [eax+60], 2
  000ca	74 0f		 je	 SHORT $L36008

; 1163 :             {
; 1164 :                 lPitch += m_pHrtfSource->m_3dVoiceData.lDopplerPitch;

  000cc	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _lPitch$[ebp]
  000d5	03 42 38	 add	 eax, DWORD PTR [edx+56]
  000d8	89 45 fc	 mov	 DWORD PTR _lPitch$[ebp], eax
$L36008:

; 1165 :             }
; 1166 :         }
; 1167 : 
; 1168 : #endif // MCPX_BOOT_LIB
; 1169 : 
; 1170 :         if(pSubMixDestination = GetSubMixDestination())

  000db	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	e8 00 00 00 00	 call	 ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
  000e3	89 45 f8	 mov	 DWORD PTR _pSubMixDestination$[ebp], eax
  000e6	83 7d f8 00	 cmp	 DWORD PTR _pSubMixDestination$[ebp], 0
  000ea	0f 84 9a 00 00
	00		 je	 $L36010

; 1171 :         {
; 1172 :             lPitch += pSubMixDestination->m_pSettings->m_lPitch;

  000f0	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  000f3	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _lPitch$[ebp]
  000fc	03 42 18	 add	 eax, DWORD PTR [edx+24]
  000ff	89 45 fc	 mov	 DWORD PTR _lPitch$[ebp], eax

; 1173 : 
; 1174 : #ifndef MCPX_BOOT_LIB
; 1175 : 
; 1176 :             if(pSubMixDestination->m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  00102	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  00105	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0010b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0010e	83 e0 10	 and	 eax, 16			; 00000010H
  00111	85 c0		 test	 eax, eax
  00113	74 75		 je	 SHORT $L36010

; 1177 :             {
; 1178 :                 ASSERT(pSubMixDestination->m_pSettings->m_p3dParams);

  00115	68 9a 04 00 00	 push	 1178			; 0000049aH
  0011a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0011f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@OKJMGJNE@pSubMixDestination?9?$DOm_pSettings?9@
  00124	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  00127	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0012d	33 c0		 xor	 eax, eax
  0012f	83 ba b4 00 00
	00 00		 cmp	 DWORD PTR [edx+180], 0
  00136	0f 94 c0	 sete	 al
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0013f	83 c4 10	 add	 esp, 16			; 00000010H

; 1179 :                 ASSERT(pSubMixDestination->m_pHrtfSource);

  00142	68 9b 04 00 00	 push	 1179			; 0000049bH
  00147	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0014c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@GOKFKIKE@pSubMixDestination?9?$DOm_pHrtfSourc@
  00151	8b 4d f8	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  00154	33 d2		 xor	 edx, edx
  00156	83 79 70 00	 cmp	 DWORD PTR [ecx+112], 0
  0015a	0f 94 c2	 sete	 dl
  0015d	52		 push	 edx
  0015e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00163	83 c4 10	 add	 esp, 16			; 00000010H

; 1180 : 
; 1181 :                 if(DS3DMODE_DISABLE != pSubMixDestination->m_pSettings->m_p3dParams->HrtfParams.dwMode)

  00166	8b 45 f8	 mov	 eax, DWORD PTR _pSubMixDestination$[ebp]
  00169	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0016f	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00175	83 7a 3c 02	 cmp	 DWORD PTR [edx+60], 2
  00179	74 0f		 je	 SHORT $L36010

; 1182 :                 {
; 1183 :                     lPitch += pSubMixDestination->m_pHrtfSource->m_3dVoiceData.lDopplerPitch;

  0017b	8b 45 f8	 mov	 eax, DWORD PTR _pSubMixDestination$[ebp]
  0017e	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00181	8b 55 fc	 mov	 edx, DWORD PTR _lPitch$[ebp]
  00184	03 51 38	 add	 edx, DWORD PTR [ecx+56]
  00187	89 55 fc	 mov	 DWORD PTR _lPitch$[ebp], edx
$L36010:

; 1184 :                 }
; 1185 :             }
; 1186 : 
; 1187 : #endif // MCPX_BOOT_LIB
; 1188 : 
; 1189 :         }
; 1190 : 
; 1191 :         CHECKRANGE(lPitch, DSBPITCH_MIN, DSBPITCH_MAX);

  0018a	81 7d fc 01 80
	ff ff		 cmp	 DWORD PTR _lPitch$[ebp], -32767 ; ffff8001H
  00191	7d 09		 jge	 SHORT $L36015
  00193	c7 45 fc 01 80
	ff ff		 mov	 DWORD PTR _lPitch$[ebp], -32767 ; ffff8001H
  0019a	eb 10		 jmp	 SHORT $L36007
$L36015:
  0019c	81 7d fc ff 1f
	00 00		 cmp	 DWORD PTR _lPitch$[ebp], 8191 ; 00001fffH
  001a3	7e 07		 jle	 SHORT $L36007
  001a5	c7 45 fc ff 1f
	00 00		 mov	 DWORD PTR _lPitch$[ebp], 8191 ; 00001fffH
$L36007:

; 1192 :     }
; 1193 : 
; 1194 :     *pdwPitch = MCPX_MAKE_REG_VALUE(lPitch, NV1BA0_PIO_SET_VOICE_TAR_PITCH_STEP);

  001ac	8b 45 fc	 mov	 eax, DWORD PTR _lPitch$[ebp]
  001af	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001b4	c1 e0 10	 shl	 eax, 16			; 00000010H
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _pdwPitch$[ebp]
  001ba	89 01		 mov	 DWORD PTR [ecx], eax

; 1195 : 
; 1196 :     DPF_LEAVE_VOID();
; 1197 : }

  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c2 04 00	 ret	 4
?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z ENDP ; DirectSound::CMcpxVoiceClient::ConvertPitchValue
DSOUND	ENDS
PUBLIC	??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ ; `string'
PUBLIC	??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@ ; `string'
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.h
DSOUND_RD	SEGMENT
??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpvoice.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT
??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ DB '!'
	DB	'(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT
??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@ DB 'm_pSetti'
	DB	'ngs->m_pMixinBuffer->m_pSettings->m_dwFlags & DSBCAPS_SUBMIXM'
	DB	'ASK', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ
DSOUND	SEGMENT
_this$ = -4
?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ PROC NEAR ; DirectSound::CMcpxVoiceClient::GetSubMixDestination, COMDAT
; _this$ = ecx

; 282  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 283  :         if(!m_pSettings->m_pMixinBuffer)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0000d	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00014	75 04		 jne	 SHORT $L34982

; 284  :         {
; 285  :             return NULL;

  00016	33 c0		 xor	 eax, eax
  00018	eb 70		 jmp	 SHORT $L34981
$L34982:

; 286  :         }
; 287  : 
; 288  :         ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  0001a	68 20 01 00 00	 push	 288			; 00000120H
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0002f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00032	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00038	f7 d9		 neg	 ecx
  0003a	1b c9		 sbb	 ecx, ecx
  0003c	f7 d9		 neg	 ecx
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 289  :         ASSERT(m_pSettings->m_pMixinBuffer->m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK);

  00047	68 21 01 00 00	 push	 289			; 00000121H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0005c	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00062	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00065	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00068	25 00 20 08 00	 and	 eax, 532480		; 00082000H
  0006d	f7 d8		 neg	 eax
  0006f	1b c0		 sbb	 eax, eax
  00071	40		 inc	 eax
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 290  : 
; 291  :         return m_pSettings->m_pMixinBuffer->m_pBuffer;

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00081	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  00087	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
$L34981:

; 292  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ENDP ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
DSOUND	ENDS
PUBLIC	?GetAntecedentVoice@CMcpxVoiceClient@DirectSound@@AAEXPAEPAPAV12@@Z ; DirectSound::CMcpxVoiceClient::GetAntecedentVoice
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
;	COMDAT ?GetAntecedentVoice@CMcpxVoiceClient@DirectSound@@AAEXPAEPAPAV12@@Z
DSOUND	SEGMENT
_this$ = -16
_pleAntecedentVoice$ = -8
_pSubMixDestination$ = -4
_pbVoiceList$ = 8
_ppAntecedentVoice$ = 12
?GetAntecedentVoice@CMcpxVoiceClient@DirectSound@@AAEXPAEPAPAV12@@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::GetAntecedentVoice, COMDAT
; _this$ = ecx

; 1226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1227 :     CMcpxVoiceClient *      pSubMixDestination;
; 1228 :     PLIST_ENTRY             pleAntecedentVoice;
; 1229 :     CMcpxVoiceClient *      pAntecedentVoice;
; 1230 :     
; 1231 :     DPF_ENTER();
; 1232 : 
; 1233 :     if(pSubMixDestination = GetSubMixDestination())

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
  00011	89 45 fc	 mov	 DWORD PTR _pSubMixDestination$[ebp], eax
  00014	83 7d fc 00	 cmp	 DWORD PTR _pSubMixDestination$[ebp], 0
  00018	74 50		 je	 SHORT $L36027

; 1234 :     {
; 1235 :         *pbVoiceList = MCPX_VOICELIST_MP;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _pbVoiceList$[ebp]
  0001d	c6 00 02	 mov	 BYTE PTR [eax], 2

; 1236 : 
; 1237 :         AssertValidEntryList(&pSubMixDestination->m_leActiveVoice, ASSERT_IN_LIST);

  00020	68 d5 04 00 00	 push	 1237			; 000004d5H
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0002a	6a 01		 push	 1
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  0002f	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1238 : 
; 1239 :         pleAntecedentVoice = pSubMixDestination->m_leActiveVoice.Blink;

  00038	8b 55 fc	 mov	 edx, DWORD PTR _pSubMixDestination$[ebp]
  0003b	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0003e	89 45 f8	 mov	 DWORD PTR _pleAntecedentVoice$[ebp], eax

; 1240 : 
; 1241 :         if(&m_pMcpxApu->m_alstActiveVoices[MCPX_VOICELIST_MP] == pleAntecedentVoice)

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00047	81 c2 40 07 00
	00		 add	 edx, 1856		; 00000740H
  0004d	3b 55 f8	 cmp	 edx, DWORD PTR _pleAntecedentVoice$[ebp]
  00050	75 0b		 jne	 SHORT $L36028

; 1242 :         {
; 1243 :             *ppAntecedentVoice = NULL;

  00052	8b 45 0c	 mov	 eax, DWORD PTR _ppAntecedentVoice$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1244 :         }
; 1245 :         else

  0005b	eb 0b		 jmp	 SHORT $L36029
$L36028:

; 1246 :         {
; 1247 :             *ppAntecedentVoice = CONTAINING_RECORD(pleAntecedentVoice, CMcpxVoiceClient, m_leActiveVoice);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _pleAntecedentVoice$[ebp]
  00060	83 e9 4c	 sub	 ecx, 76			; 0000004cH
  00063	8b 55 0c	 mov	 edx, DWORD PTR _ppAntecedentVoice$[ebp]
  00066	89 0a		 mov	 DWORD PTR [edx], ecx
$L36029:

; 1248 :         }
; 1249 :     }
; 1250 :     else if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  00068	eb 54		 jmp	 SHORT $L36023
$L36027:
  0006a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00070	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00073	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00079	85 d2		 test	 edx, edx
  0007b	74 11		 je	 SHORT $L36035

; 1251 :     {
; 1252 :         *pbVoiceList = MCPX_VOICELIST_MP;

  0007d	8b 45 08	 mov	 eax, DWORD PTR _pbVoiceList$[ebp]
  00080	c6 00 02	 mov	 BYTE PTR [eax], 2

; 1253 :         *ppAntecedentVoice = NULL;

  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _ppAntecedentVoice$[ebp]
  00086	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1254 :     }
; 1255 :     else if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  0008c	eb 30		 jmp	 SHORT $L36023
$L36035:
  0008e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00091	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00094	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00097	83 e1 10	 and	 ecx, 16			; 00000010H
  0009a	85 c9		 test	 ecx, ecx
  0009c	74 11		 je	 SHORT $L36037

; 1256 :     {
; 1257 :         *pbVoiceList = MCPX_VOICELIST_3D;

  0009e	8b 55 08	 mov	 edx, DWORD PTR _pbVoiceList$[ebp]
  000a1	c6 02 01	 mov	 BYTE PTR [edx], 1

; 1258 :         *ppAntecedentVoice = NULL;

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _ppAntecedentVoice$[ebp]
  000a7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1259 :     }
; 1260 :     else

  000ad	eb 0f		 jmp	 SHORT $L36023
$L36037:

; 1261 :     {
; 1262 :         *pbVoiceList = MCPX_VOICELIST_2D;

  000af	8b 4d 08	 mov	 ecx, DWORD PTR _pbVoiceList$[ebp]
  000b2	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 1263 :         *ppAntecedentVoice = NULL;

  000b5	8b 55 0c	 mov	 edx, DWORD PTR _ppAntecedentVoice$[ebp]
  000b8	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L36023:

; 1264 :     }
; 1265 : 
; 1266 :     DPF_LEAVE_VOID();
; 1267 : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 08 00	 ret	 8
?GetAntecedentVoice@CMcpxVoiceClient@DirectSound@@AAEXPAEPAPAV12@@Z ENDP ; DirectSound::CMcpxVoiceClient::GetAntecedentVoice
DSOUND	ENDS
PUBLIC	?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ ; DirectSound::CMcpxVoiceClient::Commit3dSettings
PUBLIC	?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ActivateVoice
PUBLIC	?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff
PUBLIC	??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@ ; `string'
PUBLIC	??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@ ; `string'
PUBLIC	??_C@_0HA@EBIAGJBN@No?5effects?5image?5has?5been?5downlo@ ; `string'
PUBLIC	??_C@_0HJ@PFFMBHKD@Crosstalk?5is?5not?5in?5the?5current?5@ ; `string'
PUBLIC	??_C@_0CB@MJOCJIBD@?$CBIsListEmpty?$CI?$CGm_lstSourceVoices?$CJ@ ; `string'
PUBLIC	??_C@_0CA@PEIBGGOF@IsListEmpty?$CI?$CGm_lstSourceVoices?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0DM@DAJJLAJC@pSubMixDestination?9?$DOm_dwStatus?5?$CG@ ; `string'
PUBLIC	??_C@_0CB@PEOFJJDI@?$CI0x20?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR@ ; `string'
PUBLIC	??_C@_0CG@DLHMNLCO@hAntecedentVoice?5?$DM?5MCPX_HW_MAX_V@ ; `string'
PUBLIC	??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
PUBLIC	??_C@_0EA@KJIGOGLG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5inheriting?5voice?5l@ ; `string'
PUBLIC	??_C@_0DF@FOPNANFG@bVoiceList?5?$DM?5NUMELMS?$CIm_pMcpxApu?9@ ; `string'
PUBLIC	??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@ ; `string'
PUBLIC	??_C@_0DA@FDGCOIDJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@ ; `string'
PUBLIC	??_C@_0CE@MJKHDBNC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@ ; `string'
PUBLIC	?InsertHeadList@@YGXPAU_LIST_ENTRY@@0@Z		; InsertHeadList
PUBLIC	?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ	; DirectSound::CMcpxAPU::BlockIdleHandler
PUBLIC	?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler
EXTRN	?Play@CMcpxBuffer@DirectSound@@QAEJK@Z:NEAR	; DirectSound::CMcpxBuffer::Play
;	COMDAT ??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
DSOUND_RD	SEGMENT
??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@ DB 'm_dwStatus '
	DB	'& MCPX_VOICESTATUS_ALLOCATED', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@ DB 'CMcpxVoiceC'
	DB	'lient::ActivateVoice', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HA@EBIAGJBN@No?5effects?5image?5has?5been?5downlo@
DSOUND_RD	SEGMENT
??_C@_0HA@EBIAGJBN@No?5effects?5image?5has?5been?5downlo@ DB 'No effects '
	DB	'image has been downloaded and 3D sounds are feeding the XTLK '
	DB	'mixbins.  Your 3D sounds will be silent', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HJ@PFFMBHKD@Crosstalk?5is?5not?5in?5the?5current?5@
DSOUND_RD	SEGMENT
??_C@_0HJ@PFFMBHKD@Crosstalk?5is?5not?5in?5the?5current?5@ DB 'Crosstalk '
	DB	'is not in the current effects image and 3D sounds are feeding'
	DB	' the XTLK mixbins.  Your 3D sounds will be silent', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@MJOCJIBD@?$CBIsListEmpty?$CI?$CGm_lstSourceVoices?$CJ@
DSOUND_RD	SEGMENT
??_C@_0CB@MJOCJIBD@?$CBIsListEmpty?$CI?$CGm_lstSourceVoices?$CJ@ DB '!IsL'
	DB	'istEmpty(&m_lstSourceVoices)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@PEIBGGOF@IsListEmpty?$CI?$CGm_lstSourceVoices?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@PEIBGGOF@IsListEmpty?$CI?$CGm_lstSourceVoices?$CJ?$AA@ DB 'IsLi'
	DB	'stEmpty(&m_lstSourceVoices)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DM@DAJJLAJC@pSubMixDestination?9?$DOm_dwStatus?5?$CG@
DSOUND_RD	SEGMENT
??_C@_0DM@DAJJLAJC@pSubMixDestination?9?$DOm_dwStatus?5?$CG@ DB 'pSubMixD'
	DB	'estination->m_dwStatus & MCPX_VOICESTATUS_ALLOCATED', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PEOFJJDI@?$CI0x20?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR@
DSOUND_RD	SEGMENT
??_C@_0CB@PEOFJJDI@?$CI0x20?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR@ DB '(0'
	DB	'x20) <= PIO_METHOD_QUEUE_CLEAR', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DLHMNLCO@hAntecedentVoice?5?$DM?5MCPX_HW_MAX_V@
DSOUND_RD	SEGMENT
??_C@_0CG@DLHMNLCO@hAntecedentVoice?5?$DM?5MCPX_HW_MAX_V@ DB 'hAntecedent'
	DB	'Voice < MCPX_HW_MAX_VOICES', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'7 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EA@KJIGOGLG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5inheriting?5voice?5l@
DSOUND_RD	SEGMENT
??_C@_0EA@KJIGOGLG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5inheriting?5voice?5l@ DB 'V'
	DB	'oice %x (%x) inheriting voice list position from voice %x (%x'
	DB	')', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@FOPNANFG@bVoiceList?5?$DM?5NUMELMS?$CIm_pMcpxApu?9@
DSOUND_RD	SEGMENT
??_C@_0DF@FOPNANFG@bVoiceList?5?$DM?5NUMELMS?$CIm_pMcpxApu?9@ DB 'bVoiceL'
	DB	'ist < NUMELMS(m_pMcpxApu->m_alstActiveVoices)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@
DSOUND_RD	SEGMENT
??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@ DB 'MCPX_VOI'
	DB	'CELIST_INVALID == m_bVoiceList', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@FDGCOIDJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@
DSOUND_RD	SEGMENT
??_C@_0DA@FDGCOIDJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@ DB 'V'
	DB	'oice %x (%x) now active in list %x, but paused', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@MJKHDBNC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@
DSOUND_RD	SEGMENT
??_C@_0CE@MJKHDBNC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@ DB 'V'
	DB	'oice %x (%x) now active in list %x', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -44
_pAntecedentVoice$ = -40
_dwAntecedentVoice$ = -36
_bVoiceList$ = -29
_pSubMixDestination$ = -28
_hAntecedentVoice$ = -24
_dwVoicePause$ = -20
_i$ = -16
_dwVoiceOn$ = -12
_irql$ = -8
?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::ActivateVoice, COMDAT
; _this$ = ecx

; 1293 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 1294 :     BYTE                    bVoiceList;
; 1295 :     CMcpxBuffer *           pSubMixDestination;
; 1296 :     CMcpxVoiceClient *      pAntecedentVoice;
; 1297 :     MCPX_VOICE_HANDLE       hAntecedentVoice;
; 1298 :     DWORD                   dwAntecedentVoice;
; 1299 :     DWORD                   dwVoiceOn;
; 1300 :     DWORD                   dwVoicePause;
; 1301 :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 1302 :     int                     i;
; 1303 :     
; 1304 :     DPF_ENTER();
; 1305 : 
; 1306 :     ASSERT(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  00011	68 1a 05 00 00	 push	 1306			; 0000051aH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
  00020	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00027	83 e1 01	 and	 ecx, 1
  0002a	f7 d9		 neg	 ecx
  0002c	1b c9		 sbb	 ecx, ecx
  0002e	41		 inc	 ecx
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 1307 : 
; 1308 :     if(!(m_dwStatus & MCPX_VOICESTATUS_ACTIVE))

  00038	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  0003f	83 e0 02	 and	 eax, 2
  00042	85 c0		 test	 eax, eax
  00044	0f 85 15 06 00
	00		 jne	 $L36042

; 1309 :     {
; 1310 : 
; 1311 : #ifndef MCPX_BOOT_LIB
; 1312 : 
; 1313 :         if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  0004a	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00050	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00053	83 e0 10	 and	 eax, 16			; 00000010H
  00056	85 c0		 test	 eax, eax
  00058	74 7e		 je	 SHORT $L36054

; 1314 :         {
; 1315 :             if(!(m_pMcpxApu->m_dwState & MCPX_APUSTATE_GPIMAGE))

  0005a	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00060	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00066	83 e0 01	 and	 eax, 1
  00069	85 c0		 test	 eax, eax
  0006b	75 2f		 jne	 SHORT $L36055

; 1316 :             {
; 1317 :                 DPF_ERROR("No effects image has been downloaded and 3D sounds are feeding the XTLK mixbins.  Your 3D sounds will be silent");

  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@
  00077	68 25 05 00 00	 push	 1317			; 00000525H
  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00081	6a 01		 push	 1
  00083	6a 09		 push	 9
  00085	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0008a	83 c4 18	 add	 esp, 24			; 00000018H
  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0HA@EBIAGJBN@No?5effects?5image?5has?5been?5downlo@
  00092	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00097	83 c4 04	 add	 esp, 4

; 1318 :             }
; 1319 :             else if(DSFX_IMAGELOC_UNUSED == m_pMcpxApu->m_pSettings->m_EffectLocations.dwCrosstalkIndex)

  0009a	eb 3c		 jmp	 SHORT $L36054
$L36055:
  0009c	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000a5	83 78 10 ff	 cmp	 DWORD PTR [eax+16], -1
  000a9	75 2d		 jne	 SHORT $L36054

; 1320 :             {
; 1321 :                 DPF_ERROR("Crosstalk is not in the current effects image and 3D sounds are feeding the XTLK mixbins.  Your 3D sounds will be silent");

  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@
  000b5	68 29 05 00 00	 push	 1321			; 00000529H
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000bf	6a 01		 push	 1
  000c1	6a 09		 push	 9
  000c3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c8	83 c4 18	 add	 esp, 24			; 00000018H
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0HJ@PFFMBHKD@Crosstalk?5is?5not?5in?5the?5current?5@
  000d0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d5	83 c4 04	 add	 esp, 4
$L36054:

; 1322 :             }
; 1323 :         }
; 1324 : 
; 1325 : #endif // MCPX_BOOT_LIB
; 1326 : 
; 1327 :         if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000d8	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000de	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000e1	25 00 20 08 00	 and	 eax, 532480		; 00082000H
  000e6	85 c0		 test	 eax, eax
  000e8	74 2b		 je	 SHORT $L36061

; 1328 :         {
; 1329 :             ASSERT(!IsListEmpty(&m_lstSourceVoices));

  000ea	68 31 05 00 00	 push	 1329			; 00000531H
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@MJOCJIBD@?$CBIsListEmpty?$CI?$CGm_lstSourceVoices?$CJ@
  000f9	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	83 c1 44	 add	 ecx, 68			; 00000044H
  000ff	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00102	33 c0		 xor	 eax, eax
  00104	39 4a 44	 cmp	 DWORD PTR [edx+68], ecx
  00107	0f 94 c0	 sete	 al
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00110	83 c4 10	 add	 esp, 16			; 00000010H

; 1330 :         }
; 1331 :         else

  00113	eb 29		 jmp	 SHORT $L36063
$L36061:

; 1332 :         {
; 1333 :             ASSERT(IsListEmpty(&m_lstSourceVoices));

  00115	68 35 05 00 00	 push	 1333			; 00000535H
  0011a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0011f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@PEIBGGOF@IsListEmpty?$CI?$CGm_lstSourceVoices?$CJ?$AA@
  00124	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	83 c1 44	 add	 ecx, 68			; 00000044H
  0012a	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0012d	33 c0		 xor	 eax, eax
  0012f	39 4a 44	 cmp	 DWORD PTR [edx+68], ecx
  00132	0f 95 c0	 setne	 al
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0013b	83 c4 10	 add	 esp, 16			; 00000010H
$L36063:

; 1334 :         }
; 1335 : 
; 1336 :         //
; 1337 :         // Just because the voice status doesn't include ACTIVE doesn't mean
; 1338 :         // the hardware voice is done.  Block until the voice is really 
; 1339 :         // finished.
; 1340 :         //
; 1341 : 
; 1342 :         WaitForVoiceOff();

  0013e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff

; 1343 : 
; 1344 :         AssertValidEntryList(&m_leActiveVoice, ASSERT_NOT_IN_LIST);

  00146	68 40 05 00 00	 push	 1344			; 00000540H
  0014b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00150	6a 02		 push	 2
  00152	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00158	51		 push	 ecx
  00159	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1345 :         AssertValidEntryList(&m_lePendingInactiveVoice, ASSERT_NOT_IN_LIST);

  0015e	68 41 05 00 00	 push	 1345			; 00000541H
  00163	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00168	6a 02		 push	 2
  0016a	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0016d	83 c2 54	 add	 edx, 84			; 00000054H
  00170	52		 push	 edx
  00171	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1346 : 
; 1347 :         //
; 1348 :         // Update the status
; 1349 :         //
; 1350 :         
; 1351 :         or(&m_dwStatus, MCPX_VOICESTATUS_ACTIVE);

  00176	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	83 c1 12	 add	 ecx, 18			; 00000012H
  0017c	ba 02 00 00 00	 mov	 edx, 2
  00181	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 1352 : 
; 1353 : #ifndef MCPX_BOOT_LIB
; 1354 : 
; 1355 :         //
; 1356 :         // If we're 3D, make sure all 3D data is up-to-date
; 1357 :         //
; 1358 : 
; 1359 :         if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  00186	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00189	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0018c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0018f	83 e2 10	 and	 edx, 16			; 00000010H
  00192	85 d2		 test	 edx, edx
  00194	74 08		 je	 SHORT $L36065

; 1360 :         {
; 1361 :             Commit3dSettings();

  00196	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00199	e8 00 00 00 00	 call	 ?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ ; DirectSound::CMcpxVoiceClient::Commit3dSettings
$L36065:

; 1362 :         }
; 1363 : 
; 1364 : #endif // MCPX_BOOT_LIB
; 1365 : 
; 1366 :         //
; 1367 :         // If we're submixing, go ahead and start the destination playing 
; 1368 :         // now so it's in the list before we try to determine where to insert 
; 1369 :         // ourselves.
; 1370 :         //
; 1371 : 
; 1372 :         if(pSubMixDestination = GetSubMixDestination())

  0019e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	e8 00 00 00 00	 call	 ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
  001a6	89 45 e4	 mov	 DWORD PTR _pSubMixDestination$[ebp], eax
  001a9	83 7d e4 00	 cmp	 DWORD PTR _pSubMixDestination$[ebp], 0
  001ad	74 31		 je	 SHORT $L36066

; 1373 :         {
; 1374 :             ASSERT(pSubMixDestination->m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  001af	68 5e 05 00 00	 push	 1374			; 0000055eH
  001b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001b9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DAJJLAJC@pSubMixDestination?9?$DOm_dwStatus?5?$CG@
  001be	8b 45 e4	 mov	 eax, DWORD PTR _pSubMixDestination$[ebp]
  001c1	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  001c5	83 e1 01	 and	 ecx, 1
  001c8	f7 d9		 neg	 ecx
  001ca	1b c9		 sbb	 ecx, ecx
  001cc	41		 inc	 ecx
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001d3	83 c4 10	 add	 esp, 16			; 00000010H

; 1375 :             
; 1376 :             pSubMixDestination->Play(TRUE);

  001d6	6a 01		 push	 1
  001d8	8b 4d e4	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  001db	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play
$L36066:

; 1377 :         }
; 1378 : 
; 1379 :         //
; 1380 :         // Raise IRQL for synchronization
; 1381 :         //
; 1382 : 
; 1383 :         irql.Raise();

  001e0	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  001e3	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 1384 :         
; 1385 :         //
; 1386 :         // Wait for the method queue to clear so we know we have enough space
; 1387 :         // in the FIFO for the VoiceOn method.
; 1388 :         //
; 1389 : 
; 1390 :         MCPX_CHECK_VOICE_FIFO(PIO_METHOD_QUEUE_CLEAR);

  001e8	68 6e 05 00 00	 push	 1390			; 0000056eH
  001ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  001f7	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  001fc	0f b6 d0	 movzx	 edx, al
  001ff	33 c0		 xor	 eax, eax
  00201	83 fa 02	 cmp	 edx, 2
  00204	0f 95 c0	 setne	 al
  00207	50		 push	 eax
  00208	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0020d	83 c4 10	 add	 esp, 16			; 00000010H
  00210	68 6e 05 00 00	 push	 1390			; 0000056eH
  00215	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0021a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@PEOFJJDI@?$CI0x20?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR@
  0021f	6a 00		 push	 0
  00221	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00226	83 c4 10	 add	 esp, 16			; 00000010H
$L36070:
  00229	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0022e	8b 91 00 00 82
	fe		 mov	 edx, DWORD PTR [ecx-25034752]
  00234	c1 ea 02	 shr	 edx, 2
  00237	83 fa 20	 cmp	 edx, 32			; 00000020H
  0023a	73 02		 jae	 SHORT $L36071
  0023c	eb eb		 jmp	 SHORT $L36070
$L36071:

; 1391 : 
; 1392 :         //
; 1393 :         // Block the idle handler in order to prevent the voice list from
; 1394 :         // being modified.
; 1395 :         //
; 1396 : 
; 1397 :         m_pMcpxApu->BlockIdleHandler();

  0023e	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00241	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00244	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::BlockIdleHandler

; 1398 : 
; 1399 :         //
; 1400 :         // Reset the voice notifiers
; 1401 :         //
; 1402 : 
; 1403 :         m_Notifier.Reset();

  00249	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0024c	83 c1 68	 add	 ecx, 104		; 00000068H
  0024f	e8 00 00 00 00	 call	 ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ ; DirectSound::CMcpxNotifier::Reset

; 1404 : 
; 1405 :         //
; 1406 :         // Turn on the PERSIST bit so voices are left in the processing list 
; 1407 :         // until we take them out.
; 1408 :         //
; 1409 : 
; 1410 :         if(m_dwStatus & MCPX_VOICESTATUS_PERSIST)

  00254	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00257	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  0025b	83 e2 10	 and	 edx, 16			; 00000010H
  0025e	85 d2		 test	 edx, edx
  00260	74 1a		 je	 SHORT $L36074

; 1411 :         {
; 1412 :             m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST_ON, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST);

  00262	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00265	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00268	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  0026e	81 c9 00 00 80
	00		 or	 ecx, 8388608		; 00800000H
  00274	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00277	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1413 :         }
; 1414 :         else

  0027a	eb 12		 jmp	 SHORT $L36076
$L36074:

; 1415 :         {
; 1416 :             m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST_OFF, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST);

  0027c	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0027f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00282	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00288	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0028b	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$L36076:

; 1417 :         }
; 1418 : 
; 1419 :         //
; 1420 :         // Figure out where to insert the voice in the hardware processing 
; 1421 :         // list
; 1422 :         //
; 1423 : 
; 1424 :         GetAntecedentVoice(&bVoiceList, &pAntecedentVoice);

  0028e	8d 45 d8	 lea	 eax, DWORD PTR _pAntecedentVoice$[ebp]
  00291	50		 push	 eax
  00292	8d 4d e3	 lea	 ecx, DWORD PTR _bVoiceList$[ebp]
  00295	51		 push	 ecx
  00296	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00299	e8 00 00 00 00	 call	 ?GetAntecedentVoice@CMcpxVoiceClient@DirectSound@@AAEXPAEPAPAV12@@Z ; DirectSound::CMcpxVoiceClient::GetAntecedentVoice

; 1425 : 
; 1426 :         if(pAntecedentVoice)

  0029e	83 7d d8 00	 cmp	 DWORD PTR _pAntecedentVoice$[ebp], 0
  002a2	74 4e		 je	 SHORT $L36078

; 1427 :         {
; 1428 :             hAntecedentVoice = pAntecedentVoice->m_ahVoices[pAntecedentVoice->m_bVoiceCount - 1];

  002a4	8b 55 d8	 mov	 edx, DWORD PTR _pAntecedentVoice$[ebp]
  002a7	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  002ab	8b 4d d8	 mov	 ecx, DWORD PTR _pAntecedentVoice$[ebp]
  002ae	66 8b 54 41 0a	 mov	 dx, WORD PTR [ecx+eax*2+10]
  002b3	66 89 55 e8	 mov	 WORD PTR _hAntecedentVoice$[ebp], dx

; 1429 :             ASSERT(hAntecedentVoice < MCPX_HW_MAX_VOICES);

  002b7	68 95 05 00 00	 push	 1429			; 00000595H
  002bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  002c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@DLHMNLCO@hAntecedentVoice?5?$DM?5MCPX_HW_MAX_V@
  002c6	0f b7 45 e8	 movzx	 eax, WORD PTR _hAntecedentVoice$[ebp]
  002ca	33 c9		 xor	 ecx, ecx
  002cc	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  002d1	0f 9d c1	 setge	 cl
  002d4	51		 push	 ecx
  002d5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002da	83 c4 10	 add	 esp, 16			; 00000010H

; 1430 : 
; 1431 :             dwAntecedentVoice = MCPX_MAKE_REG_VALUE(hAntecedentVoice, NV1BA0_PIO_SET_ANTECEDENT_VOICE_HANDLE);

  002dd	0f b7 55 e8	 movzx	 edx, WORD PTR _hAntecedentVoice$[ebp]
  002e1	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  002e7	89 55 dc	 mov	 DWORD PTR _dwAntecedentVoice$[ebp], edx

; 1432 :             dwAntecedentVoice |= MCPX_MAKE_REG_VALUE(NV1BA0_PIO_SET_ANTECEDENT_VOICE_LIST_INHERIT, NV1BA0_PIO_SET_ANTECEDENT_VOICE_LIST);

  002ea	8b 45 dc	 mov	 eax, DWORD PTR _dwAntecedentVoice$[ebp]
  002ed	89 45 dc	 mov	 DWORD PTR _dwAntecedentVoice$[ebp], eax

; 1433 :         }
; 1434 :         else

  002f0	eb 1c		 jmp	 SHORT $L36082
$L36078:

; 1435 :         {
; 1436 :             dwAntecedentVoice = MCPX_MAKE_REG_VALUE(NV1BA0_PIO_SET_ANTECEDENT_VOICE_HANDLE_NULL, NV1BA0_PIO_SET_ANTECEDENT_VOICE_HANDLE);

  002f2	c7 45 dc ff ff
	00 00		 mov	 DWORD PTR _dwAntecedentVoice$[ebp], 65535 ; 0000ffffH

; 1437 :             dwAntecedentVoice |= MCPX_MAKE_REG_VALUE(bVoiceList + 1, NV1BA0_PIO_SET_ANTECEDENT_VOICE_LIST);

  002f9	0f b6 4d e3	 movzx	 ecx, BYTE PTR _bVoiceList$[ebp]
  002fd	83 c1 01	 add	 ecx, 1
  00300	83 e1 03	 and	 ecx, 3
  00303	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00306	8b 55 dc	 mov	 edx, DWORD PTR _dwAntecedentVoice$[ebp]
  00309	0b d1		 or	 edx, ecx
  0030b	89 55 dc	 mov	 DWORD PTR _dwAntecedentVoice$[ebp], edx
$L36082:

; 1438 :         }
; 1439 : 
; 1440 :         //
; 1441 :         // Turn the voice on.  If we're supposed to be paused, do that now
; 1442 :         // as well.  Note that we're turning the voices on in reverse order
; 1443 :         // so they're in the hardware processing list correctly.
; 1444 :         //
; 1445 : 
; 1446 :         MCPX_CHECK_VOICE_FIFO(7 * m_bVoiceCount);

  0030e	68 a6 05 00 00	 push	 1446			; 000005a6H
  00313	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00318	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0031d	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00322	0f b6 c0	 movzx	 eax, al
  00325	33 c9		 xor	 ecx, ecx
  00327	83 f8 02	 cmp	 eax, 2
  0032a	0f 95 c1	 setne	 cl
  0032d	51		 push	 ecx
  0032e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00333	83 c4 10	 add	 esp, 16			; 00000010H
  00336	68 a6 05 00 00	 push	 1446			; 000005a6H
  0033b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00340	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  00345	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00348	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0034c	6b c0 07	 imul	 eax, 7
  0034f	33 c9		 xor	 ecx, ecx
  00351	83 f8 20	 cmp	 eax, 32			; 00000020H
  00354	0f 9f c1	 setg	 cl
  00357	51		 push	 ecx
  00358	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0035d	83 c4 10	 add	 esp, 16			; 00000010H
$L36087:
  00360	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00365	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  0036b	c1 e8 02	 shr	 eax, 2
  0036e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00371	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00375	6b d2 07	 imul	 edx, 7
  00378	3b c2		 cmp	 eax, edx
  0037a	73 02		 jae	 SHORT $L36088
  0037c	eb e2		 jmp	 SHORT $L36087
$L36088:

; 1447 : 
; 1448 :         for(i = m_bVoiceCount - 1; i >= 0; i--)

  0037e	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00381	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00385	83 e9 01	 sub	 ecx, 1
  00388	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
  0038b	eb 09		 jmp	 SHORT $L36091
$L36092:
  0038d	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00390	83 ea 01	 sub	 edx, 1
  00393	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L36091:
  00396	83 7d f0 00	 cmp	 DWORD PTR _i$[ebp], 0
  0039a	0f 8c 22 01 00
	00		 jl	 $L36093

; 1449 :         {
; 1450 :             if(pAntecedentVoice)

  003a0	83 7d d8 00	 cmp	 DWORD PTR _pAntecedentVoice$[ebp], 0
  003a4	74 46		 je	 SHORT $L36094

; 1451 :             {
; 1452 :                 DPF_BLAB("Voice %x (%x) inheriting voice list position from voice %x (%x)", this, m_ahVoices[i], pAntecedentVoice, hAntecedentVoice);

  003a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  003ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@
  003b0	68 ac 05 00 00	 push	 1452			; 000005acH
  003b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  003ba	6a 05		 push	 5
  003bc	6a 09		 push	 9
  003be	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  003c3	83 c4 18	 add	 esp, 24			; 00000018H
  003c6	0f b7 45 e8	 movzx	 eax, WORD PTR _hAntecedentVoice$[ebp]
  003ca	50		 push	 eax
  003cb	8b 4d d8	 mov	 ecx, DWORD PTR _pAntecedentVoice$[ebp]
  003ce	51		 push	 ecx
  003cf	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  003d2	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  003d5	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  003da	51		 push	 ecx
  003db	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  003de	52		 push	 edx
  003df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJIGOGLG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5inheriting?5voice?5l@
  003e4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003e9	83 c4 14	 add	 esp, 20			; 00000014H
$L36094:

; 1453 :             }
; 1454 : 
; 1455 :             dwVoiceOn = MCPX_SET_REG_VALUE(m_RegCache.VoiceOn, m_ahVoices[i], NV1BA0_PIO_VOICE_ON_HANDLE);

  003ec	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  003ef	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  003f2	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  003f8	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  003fb	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  003fe	0f b7 54 50 0c	 movzx	 edx, WORD PTR [eax+edx*2+12]
  00403	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00409	0b ca		 or	 ecx, edx
  0040b	89 4d f4	 mov	 DWORD PTR _dwVoiceOn$[ebp], ecx

; 1456 :         
; 1457 :             if(m_dwStatus & MCPX_VOICESTATUS_ALLPAUSEDMASK)

  0040e	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00411	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00415	81 e1 04 04 00
	00		 and	 ecx, 1028		; 00000404H
  0041b	85 c9		 test	 ecx, ecx
  0041d	74 09		 je	 SHORT $L36097

; 1458 :             {
; 1459 :                 dwVoicePause = MCPX_MAKE_REG_VALUE(NV1BA0_PIO_VOICE_PAUSE_ACTION_STOP, NV1BA0_PIO_VOICE_PAUSE_ACTION);

  0041f	c7 45 ec 00 00
	04 00		 mov	 DWORD PTR _dwVoicePause$[ebp], 262144 ; 00040000H

; 1460 :             }
; 1461 :             else

  00426	eb 07		 jmp	 SHORT $L36099
$L36097:

; 1462 :             {
; 1463 :                 dwVoicePause = MCPX_MAKE_REG_VALUE(NV1BA0_PIO_VOICE_PAUSE_ACTION_RESUME, NV1BA0_PIO_VOICE_PAUSE_ACTION);

  00428	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwVoicePause$[ebp], 0
$L36099:

; 1464 :             }
; 1465 : 
; 1466 :             dwVoicePause |= MCPX_MAKE_REG_VALUE(m_ahVoices[i], NV1BA0_PIO_VOICE_PAUSE_HANDLE);

  0042f	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00432	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00435	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  0043a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00440	8b 55 ec	 mov	 edx, DWORD PTR _dwVoicePause$[ebp]
  00443	0b d1		 or	 edx, ecx
  00445	89 55 ec	 mov	 DWORD PTR _dwVoicePause$[ebp], edx

; 1467 :         
; 1468 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00448	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0044b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0044e	0f b7 54 41 0c	 movzx	 edx, WORD PTR [ecx+eax*2+12]
  00453	b8 f8 02 00 00	 mov	 eax, 760		; 000002f8H
  00458	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1469 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  0045e	b9 fc 02 00 00	 mov	 ecx, 764		; 000002fcH
  00463	c7 81 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [ecx-25034752], 1

; 1470 :             MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  0046d	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00470	52		 push	 edx
  00471	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00474	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  00479	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  0047e	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 1471 :             MCPX_VOICE_WRITE(SetAntecedentVoice, dwAntecedentVoice);

  00484	ba 20 01 00 00	 mov	 edx, 288		; 00000120H
  00489	8b 45 dc	 mov	 eax, DWORD PTR _dwAntecedentVoice$[ebp]
  0048c	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 1472 :             MCPX_VOICE_WRITE(VoiceOn, dwVoiceOn);

  00492	b9 24 01 00 00	 mov	 ecx, 292		; 00000124H
  00497	8b 55 f4	 mov	 edx, DWORD PTR _dwVoiceOn$[ebp]
  0049a	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 1473 :             MCPX_VOICE_WRITE(VoicePause, dwVoicePause);

  004a0	b8 40 01 00 00	 mov	 eax, 320		; 00000140H
  004a5	8b 4d ec	 mov	 ecx, DWORD PTR _dwVoicePause$[ebp]
  004a8	89 88 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], ecx

; 1474 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  004ae	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  004b3	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 1475 :         }

  004bd	e9 cb fe ff ff	 jmp	 $L36092
$L36093:

; 1476 : 
; 1477 :         //
; 1478 :         // Add the voice client object to the active voice list
; 1479 :         //
; 1480 : 
; 1481 :         if(pAntecedentVoice)

  004c2	83 7d d8 00	 cmp	 DWORD PTR _pAntecedentVoice$[ebp], 0
  004c6	74 2d		 je	 SHORT $L36116

; 1482 :         {
; 1483 :             AssertValidEntryList(&pAntecedentVoice->m_leActiveVoice, ASSERT_IN_LIST);

  004c8	68 cb 05 00 00	 push	 1483			; 000005cbH
  004cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  004d2	6a 01		 push	 1
  004d4	8b 45 d8	 mov	 eax, DWORD PTR _pAntecedentVoice$[ebp]
  004d7	83 c0 4c	 add	 eax, 76			; 0000004cH
  004da	50		 push	 eax
  004db	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1484 :             InsertHeadList(&pAntecedentVoice->m_leActiveVoice, &m_leActiveVoice);

  004e0	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  004e3	83 c1 4c	 add	 ecx, 76			; 0000004cH
  004e6	51		 push	 ecx
  004e7	8b 55 d8	 mov	 edx, DWORD PTR _pAntecedentVoice$[ebp]
  004ea	83 c2 4c	 add	 edx, 76			; 0000004cH
  004ed	52		 push	 edx
  004ee	e8 00 00 00 00	 call	 ?InsertHeadList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertHeadList

; 1485 :         }
; 1486 :         else

  004f3	eb 40		 jmp	 SHORT $L36117
$L36116:

; 1487 :         {
; 1488 :             ASSERT(bVoiceList < NUMELMS(m_pMcpxApu->m_alstActiveVoices));

  004f5	68 d0 05 00 00	 push	 1488			; 000005d0H
  004fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  004ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@FOPNANFG@bVoiceList?5?$DM?5NUMELMS?$CIm_pMcpxApu?9@
  00504	0f b6 45 e3	 movzx	 eax, BYTE PTR _bVoiceList$[ebp]
  00508	83 f8 03	 cmp	 eax, 3
  0050b	1b c9		 sbb	 ecx, ecx
  0050d	41		 inc	 ecx
  0050e	51		 push	 ecx
  0050f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00514	83 c4 10	 add	 esp, 16			; 00000010H

; 1489 :             InsertHeadList(&m_pMcpxApu->m_alstActiveVoices[bVoiceList], &m_leActiveVoice);

  00517	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0051a	83 c2 4c	 add	 edx, 76			; 0000004cH
  0051d	52		 push	 edx
  0051e	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00521	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00524	0f b6 55 e3	 movzx	 edx, BYTE PTR _bVoiceList$[ebp]
  00528	8d 84 d1 30 07
	00 00		 lea	 eax, DWORD PTR [ecx+edx*8+1840]
  0052f	50		 push	 eax
  00530	e8 00 00 00 00	 call	 ?InsertHeadList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertHeadList
$L36117:

; 1490 :         }
; 1491 : 
; 1492 :         //
; 1493 :         // Save the voice list index for later retrieval
; 1494 :         //
; 1495 : 
; 1496 :         ASSERT(MCPX_VOICELIST_INVALID == m_bVoiceList);

  00535	68 d8 05 00 00	 push	 1496			; 000005d8H
  0053a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0053f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@
  00544	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00547	0f b6 51 65	 movzx	 edx, BYTE PTR [ecx+101]
  0054b	33 c0		 xor	 eax, eax
  0054d	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00553	0f 95 c0	 setne	 al
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0055c	83 c4 10	 add	 esp, 16			; 00000010H

; 1497 :         m_bVoiceList = bVoiceList;

  0055f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00562	8a 55 e3	 mov	 dl, BYTE PTR _bVoiceList$[ebp]
  00565	88 51 65	 mov	 BYTE PTR [ecx+101], dl

; 1498 : 
; 1499 :         //
; 1500 :         // Wait for the method queue to clear so we know the VoiceOn method
; 1501 :         // has been processed.
; 1502 :         //
; 1503 : 
; 1504 :         MCPX_CHECK_VOICE_FIFO(PIO_METHOD_QUEUE_CLEAR);

  00568	68 e0 05 00 00	 push	 1504			; 000005e0H
  0056d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00572	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00577	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0057c	0f b6 c0	 movzx	 eax, al
  0057f	33 c9		 xor	 ecx, ecx
  00581	83 f8 02	 cmp	 eax, 2
  00584	0f 95 c1	 setne	 cl
  00587	51		 push	 ecx
  00588	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0058d	83 c4 10	 add	 esp, 16			; 00000010H
  00590	68 e0 05 00 00	 push	 1504			; 000005e0H
  00595	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0059a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@PEOFJJDI@?$CI0x20?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR@
  0059f	6a 00		 push	 0
  005a1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  005a6	83 c4 10	 add	 esp, 16			; 00000010H
$L36121:
  005a9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005ae	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  005b4	c1 e8 02	 shr	 eax, 2
  005b7	83 f8 20	 cmp	 eax, 32			; 00000020H
  005ba	73 02		 jae	 SHORT $L36122
  005bc	eb eb		 jmp	 SHORT $L36121
$L36122:

; 1505 : 
; 1506 :         //
; 1507 :         // Unblock the idle handler
; 1508 :         //
; 1509 : 
; 1510 :         m_pMcpxApu->UnblockIdleHandler();

  005be	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  005c1	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  005c4	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler

; 1511 : 
; 1512 :         //
; 1513 :         // Lower IRQL
; 1514 :         //
; 1515 : 
; 1516 :         irql.Lower();

  005c9	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  005cc	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 1517 : 
; 1518 :         //
; 1519 :         // All done
; 1520 :         //
; 1521 : 
; 1522 :         if(m_dwStatus & MCPX_VOICESTATUS_ALLPAUSEDMASK)

  005d1	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  005d4	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  005d8	25 04 04 00 00	 and	 eax, 1028		; 00000404H
  005dd	85 c0		 test	 eax, eax
  005df	74 40		 je	 SHORT $L36125

; 1523 :         {
; 1524 :             DPF_INFO("Voice %x (%x) now active in list %x, but paused", this, m_ahVoices[0], (DWORD)bVoiceList);

  005e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  005e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@
  005eb	68 f4 05 00 00	 push	 1524			; 000005f4H
  005f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  005f5	6a 04		 push	 4
  005f7	6a 09		 push	 9
  005f9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  005fe	83 c4 18	 add	 esp, 24			; 00000018H
  00601	0f b6 4d e3	 movzx	 ecx, BYTE PTR _bVoiceList$[ebp]
  00605	51		 push	 ecx
  00606	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00609	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  0060d	50		 push	 eax
  0060e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00611	51		 push	 ecx
  00612	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@FDGCOIDJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@
  00617	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0061c	83 c4 10	 add	 esp, 16			; 00000010H

; 1525 :         }
; 1526 :         else

  0061f	eb 3e		 jmp	 SHORT $L36042
$L36125:

; 1527 :         {
; 1528 :             DPF_INFO("Voice %x (%x) now active in list %x", this, m_ahVoices[0], (DWORD)bVoiceList);

  00621	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00626	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EMMPIKKN@CMcpxVoiceClient?3?3ActivateVoice?$AA@
  0062b	68 f8 05 00 00	 push	 1528			; 000005f8H
  00630	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00635	6a 04		 push	 4
  00637	6a 09		 push	 9
  00639	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0063e	83 c4 18	 add	 esp, 24			; 00000018H
  00641	0f b6 55 e3	 movzx	 edx, BYTE PTR _bVoiceList$[ebp]
  00645	52		 push	 edx
  00646	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00649	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  0064d	51		 push	 ecx
  0064e	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00651	52		 push	 edx
  00652	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@MJKHDBNC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5now?5active?5in?5list@
  00657	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0065c	83 c4 10	 add	 esp, 16			; 00000010H
$L36042:

; 1529 :         }
; 1530 :     }
; 1531 : 
; 1532 :     DPF_LEAVE_VOID();
; 1533 : }

  0065f	8b e5		 mov	 esp, ebp
  00661	5d		 pop	 ebp
  00662	c3		 ret	 0
?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxVoiceClient::ActivateVoice
DSOUND	ENDS
PUBLIC	??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND_RD	SEGMENT
??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?InsertHeadList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertHeadList@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertHeadList, COMDAT

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 a8 00 00 00	 push	 168			; 000000a8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 169  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00018	68 a9 00 00 00	 push	 169			; 000000a9H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 02		 push	 2
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 170  : 
; 171  :     Entry->Flink = ListHead->Flink;

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 0a		 mov	 DWORD PTR [edx], ecx

; 172  :     Entry->Blink = ListHead;

  00037	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0003a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0003d	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 173  :     
; 174  :     Entry->Flink->Blink = Entry;

  00040	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00043	8b 11		 mov	 edx, DWORD PTR [ecx]
  00045	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00048	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 175  :     Entry->Blink->Flink = Entry;

  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00051	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00054	89 02		 mov	 DWORD PTR [edx], eax

; 176  : 
; 177  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00056	68 b1 00 00 00	 push	 177			; 000000b1H
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00060	6a 01		 push	 1
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 178  : }

  0006b	5d		 pop	 ebp
  0006c	c2 08 00	 ret	 8
?InsertHeadList@@YGXPAU_LIST_ENTRY@@0@Z ENDP		; InsertHeadList
DSOUND	ENDS
PUBLIC	??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
DSOUND_RD	SEGMENT
??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dsound\dsound\mcpapu.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ DB 'KeG'
	DB	'etCurrentIrql() >= DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@ DB 'm_dwVoiceMapLo'
	DB	'ck < ~0UL', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::BlockIdleHandler, COMDAT
; _this$ = ecx

; 264  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 265  :         ASSERT(KeGetCurrentIrql() >= DISPATCH_LEVEL);

  00007	68 09 01 00 00	 push	 265			; 00000109H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  00016	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 f8 02	 cmp	 eax, 2
  00023	0f 9c c1	 setl	 cl
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 266  :         ASSERT(m_dwVoiceMapLock < ~0UL);

  0002f	68 0a 01 00 00	 push	 266			; 0000010aH
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	83 ba 2c 03 00
	00 ff		 cmp	 DWORD PTR [edx+812], -1
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 267  :         m_dwVoiceMapLock++;

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 91 2c 03 00
	00		 mov	 edx, DWORD PTR [ecx+812]
  0005d	83 c2 01	 add	 edx, 1
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	89 90 2c 03 00
	00		 mov	 DWORD PTR [eax+812], edx

; 268  :     }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ENDP	; DirectSound::CMcpxAPU::BlockIdleHandler
DSOUND	ENDS
PUBLIC	??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@ ; `string'
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@ DB 'm_dwVoiceMapLoc'
	DB	'k >= 1', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::UnblockIdleHandler, COMDAT
; _this$ = ecx

; 271  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         ASSERT(KeGetCurrentIrql() >= DISPATCH_LEVEL);

  00007	68 10 01 00 00	 push	 272			; 00000110H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  00016	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 f8 02	 cmp	 eax, 2
  00023	0f 9c c1	 setl	 cl
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 273  :         ASSERT(m_dwVoiceMapLock >= 1);

  0002f	68 11 01 00 00	 push	 273			; 00000111H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	83 ba 2c 03 00
	00 01		 cmp	 DWORD PTR [edx+812], 1
  00048	1b c0		 sbb	 eax, eax
  0004a	f7 d8		 neg	 eax
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 274  :         m_dwVoiceMapLock--;

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 91 2c 03 00
	00		 mov	 edx, DWORD PTR [ecx+812]
  0005e	83 ea 01	 sub	 edx, 1
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	89 90 2c 03 00
	00		 mov	 DWORD PTR [eax+812], edx

; 275  :     }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ENDP	; DirectSound::CMcpxAPU::UnblockIdleHandler
DSOUND	ENDS
PUBLIC	?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice
PUBLIC	??_C@_0CC@KOPKBAEC@CMcpxVoiceClient?3?3DeactivateVoic@ ; `string'
PUBLIC	??_C@_0BL@ODBPPJFA@Deactivating?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@ ; `string'
PUBLIC	??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
EXTRN	?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z:NEAR	; DirectSound::CMcpxBuffer::Stop
EXTRN	__imp__KeQuerySystemTime@4:NEAR
;	COMDAT ??_C@_0CC@KOPKBAEC@CMcpxVoiceClient?3?3DeactivateVoic@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
DSOUND_RD	SEGMENT
??_C@_0CC@KOPKBAEC@CMcpxVoiceClient?3?3DeactivateVoic@ DB 'CMcpxVoiceClie'
	DB	'nt::DeactivateVoice', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@ODBPPJFA@Deactivating?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@ODBPPJFA@Deactivating?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@ DB 'Dea'
	DB	'ctivating voice %x (%x)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@
DSOUND_RD	SEGMENT
??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@ DB 'm_bVoiceLis'
	DB	't < MCPX_VOICELIST_COUNT', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'3 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z
DSOUND	SEGMENT
_this$ = -32
_pSubMixDestination$ = -28
_pleListEntry$ = -24
_pSourceVoice$ = -20
_fSourceValid$ = -16
_i$ = -12
_irql$ = -8
_fBlock$ = 8
?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::DeactivateVoice, COMDAT
; _this$ = ecx

; 1560 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1561 :     CMcpxBuffer *           pSubMixDestination;
; 1562 :     CMcpxVoiceClient *      pSourceVoice;
; 1563 :     PLIST_ENTRY             pleListEntry;
; 1564 :     BOOL                    fSourceValid;
; 1565 :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 1566 :     DWORD                   i;
; 1567 :     
; 1568 :     DPF_ENTER();
; 1569 : 
; 1570 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00011	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00018	83 e1 03	 and	 ecx, 3
  0001b	83 f9 03	 cmp	 ecx, 3
  0001e	0f 85 82 02 00
	00		 jne	 $L36141

; 1571 :     {
; 1572 :         DPF_INFO("Deactivating voice %x (%x)", this, m_ahVoices[0]);

  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@KOPKBAEC@CMcpxVoiceClient?3?3DeactivateVoic@
  0002e	68 24 06 00 00	 push	 1572			; 00000624H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00038	6a 04		 push	 4
  0003a	6a 09		 push	 9
  0003c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  0004b	50		 push	 eax
  0004c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	51		 push	 ecx
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODBPPJFA@Deactivating?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@
  00055	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1573 : 
; 1574 :         //
; 1575 :         // Raise IRQL for synchronization
; 1576 :         //
; 1577 : 
; 1578 :         irql.Raise();

  0005d	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00060	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 1579 : 
; 1580 :         //
; 1581 :         // Block the idle handler until we're done setting the voice status
; 1582 :         //
; 1583 : 
; 1584 :         m_pMcpxApu->BlockIdleHandler();

  00065	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00068	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0006b	e8 00 00 00 00	 call	 ?BlockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::BlockIdleHandler

; 1585 :         
; 1586 :         //
; 1587 :         // Remove pretty much everything from the status mask, since
; 1588 :         // most of the bits are only valid when we're active.
; 1589 :         //
; 1590 : 
; 1591 :         and(&m_dwStatus, MCPX_VOICESTATUS_DEACTIVATEMASK);

  00070	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 12	 add	 ecx, 18			; 00000012H
  00076	ba 11 01 00 00	 mov	 edx, 273		; 00000111H
  0007b	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and

; 1592 : 
; 1593 :         //
; 1594 :         // Turn off the PERSIST bit so we're guaranteed the voice will be
; 1595 :         // stopped.
; 1596 :         //
; 1597 : 
; 1598 :         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST_OFF, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST);

  00080	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00086	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  0008c	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1599 : 
; 1600 :         //
; 1601 :         // There also seems to be a bug where a looping voice won't always
; 1602 :         // turn off, so we'll disable the looping bit while we're at it.
; 1603 :         //
; 1604 : 
; 1605 :         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP_OFF, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP);

  00092	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00098	81 e1 ff ff ff
	fd		 and	 ecx, -33554433		; fdffffffH
  0009e	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1606 : 
; 1607 :         //
; 1608 :         // Check the voice list identifier.  If it's -1, the voice has
; 1609 :         // already been removed from the voice list.  We'll set a bit in 
; 1610 :         // the status that tells us that we're still waiting for the voice 
; 1611 :         // to turn off.  When this happens, the ISR will clear the status 
; 1612 :         // bit for us.
; 1613 :         //
; 1614 : 
; 1615 :         if(m_bVoiceList < MCPX_VOICELIST_COUNT)

  000a4	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	0f b6 48 65	 movzx	 ecx, BYTE PTR [eax+101]
  000ab	83 f9 03	 cmp	 ecx, 3
  000ae	0f 8d 0c 01 00
	00		 jge	 $L36146

; 1616 :         {
; 1617 :             //
; 1618 :             // Turn off the voice.  It won't turn off instantly, but the VoiceOff
; 1619 :             // command will be in the command FIFO, so for all intents, the voice
; 1620 :             // really is off.  The one caveat to this is that you want to watch
; 1621 :             // for the VoiceOff notifier before freeing any memory associated
; 1622 :             // with this voice.  It's possible that the VP could access memory
; 1623 :             // between when the VoiceOff notifier goes into the queue and when
; 1624 :             // the voice is processed.
; 1625 :             //
; 1626 : 
; 1627 :             DEBUGLOG("VoiceOff %x (%x)", this, m_ahVoices[0]);
; 1628 : 
; 1629 :             or(&m_dwStatus, MCPX_VOICESTATUS_VOICEOFF);

  000b4	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	83 c1 12	 add	 ecx, 18			; 00000012H
  000ba	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  000bf	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 1630 :             ASSERT(m_bVoiceList < MCPX_VOICELIST_COUNT);

  000c4	68 5e 06 00 00	 push	 1630			; 0000065eH
  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@
  000d3	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	0f b6 42 65	 movzx	 eax, BYTE PTR [edx+101]
  000da	33 c9		 xor	 ecx, ecx
  000dc	83 f8 03	 cmp	 eax, 3
  000df	0f 9d c1	 setge	 cl
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 1631 : 
; 1632 : #ifndef MCPX_SIMULATE_STUCK_VOICE
; 1633 : 
; 1634 : #ifdef MCPX_NO_VOICE_OFF
; 1635 : 
; 1636 :             DWORD LFOENV = MCPX_SET_REG_VALUE(m_RegCache.LFOENV, 1, NV1BA0_PIO_SET_VOICE_LFO_ENV_EA_RELEASERATE);
; 1637 :             
; 1638 :             MCPX_CHECK_VOICE_FIFO(4 * m_bVoiceCount);
; 1639 :         
; 1640 :             for(i = 0; i < m_bVoiceCount; i++)
; 1641 :             {
; 1642 :                 MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);
; 1643 :                 MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));
; 1644 :                 MCPX_VOICE_WRITE(SetVoiceLFOENV, LFOENV);
; 1645 :                 MCPX_VOICE_WRITE(VoiceRelease, m_ahVoices[i]);
; 1646 :             }
; 1647 : 
; 1648 : #else // MCPX_NO_VOICE_OFF
; 1649 : 
; 1650 :             MCPX_CHECK_VOICE_FIFO(3 * m_bVoiceCount);

  000eb	68 72 06 00 00	 push	 1650			; 00000672H
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  000fa	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  000ff	0f b6 d0	 movzx	 edx, al
  00102	33 c0		 xor	 eax, eax
  00104	83 fa 02	 cmp	 edx, 2
  00107	0f 95 c0	 setne	 al
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00110	83 c4 10	 add	 esp, 16			; 00000010H
  00113	68 72 06 00 00	 push	 1650			; 00000672H
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0011d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  00122	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00129	6b d2 03	 imul	 edx, 3
  0012c	33 c0		 xor	 eax, eax
  0012e	83 fa 20	 cmp	 edx, 32			; 00000020H
  00131	0f 9f c0	 setg	 al
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0013a	83 c4 10	 add	 esp, 16			; 00000010H
$L36150:
  0013d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00142	8b 91 00 00 82
	fe		 mov	 edx, DWORD PTR [ecx-25034752]
  00148	c1 ea 02	 shr	 edx, 2
  0014b	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0014e	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00152	6b c9 03	 imul	 ecx, 3
  00155	3b d1		 cmp	 edx, ecx
  00157	73 02		 jae	 SHORT $L36151
  00159	eb e2		 jmp	 SHORT $L36150
$L36151:

; 1651 :         
; 1652 :             for(i = 0; i < m_bVoiceCount; i++)

  0015b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00162	eb 09		 jmp	 SHORT $L36154
$L36155:
  00164	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00167	83 c2 01	 add	 edx, 1
  0016a	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L36154:
  0016d	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00170	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00174	39 4d f4	 cmp	 DWORD PTR _i$[ebp], ecx
  00177	73 45		 jae	 SHORT $L36156

; 1653 :             {
; 1654 :                 MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00179	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0017c	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0017f	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  00184	ba f8 02 00 00	 mov	 edx, 760		; 000002f8H
  00189	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 1655 :                 MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  0018f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00192	50		 push	 eax
  00193	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  0019b	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  001a0	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 1656 :                 MCPX_VOICE_WRITE(VoiceOff, m_ahVoices[i]);

  001a6	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  001a9	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001ac	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  001b1	ba 28 01 00 00	 mov	 edx, 296		; 00000128H
  001b6	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 1657 :             }

  001bc	eb a6		 jmp	 SHORT $L36155
$L36156:

; 1658 : 
; 1659 : #endif // MCPX_NO_VOICE_OFF
; 1660 : 
; 1661 : #endif // MCPX_SIMULATE_STUCK_VOICE
; 1662 : 
; 1663 :         }
; 1664 :         else

  001be	eb 2a		 jmp	 SHORT $L36163
$L36146:

; 1665 :         {
; 1666 :             ASSERT(MCPX_VOICELIST_INVALID == m_bVoiceList);

  001c0	68 82 06 00 00	 push	 1666			; 00000682H
  001c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@
  001cf	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001d2	0f b6 48 65	 movzx	 ecx, BYTE PTR [eax+101]
  001d6	33 d2		 xor	 edx, edx
  001d8	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  001de	0f 95 c2	 setne	 dl
  001e1	52		 push	 edx
  001e2	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001e7	83 c4 10	 add	 esp, 16			; 00000010H
$L36163:

; 1667 :         }
; 1668 : 
; 1669 :         //
; 1670 :         // Unblock the idle handler
; 1671 :         //
; 1672 : 
; 1673 :         m_pMcpxApu->UnblockIdleHandler();

  001ea	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001ed	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001f0	e8 00 00 00 00	 call	 ?UnblockIdleHandler@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::UnblockIdleHandler

; 1674 : 
; 1675 :         //
; 1676 :         // Save the time we posted the VoiceOff request so we can make
; 1677 :         // the hardware handles it later.
; 1678 :         //
; 1679 :         
; 1680 :         KeQuerySystemTime((PLARGE_INTEGER)&m_rtVoiceOff);

  001f5	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f8	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  001fe	51		 push	 ecx
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 1681 : 
; 1682 :         //
; 1683 :         // Schedule a deferred command to check for a stuck voice
; 1684 :         //
; 1685 : 
; 1686 :         if(!fBlock)

  00205	83 7d 08 00	 cmp	 DWORD PTR _fBlock$[ebp], 0
  00209	75 13		 jne	 SHORT $L36165

; 1687 :         {
; 1688 :             ScheduleDeferredCommand(MCPX_DEFERREDCMD_VOICE_CHECKSTUCK, 0, 0);

  0020b	6a 00		 push	 0
  0020d	6a 00		 push	 0
  0020f	6a 00		 push	 0
  00211	6a 00		 push	 0
  00213	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00216	8b 02		 mov	 eax, DWORD PTR [edx]
  00218	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0021b	ff 50 18	 call	 DWORD PTR [eax+24]
$L36165:

; 1689 :         }
; 1690 : 
; 1691 :         //
; 1692 :         // If we're submixing, and we're the last source voice to stop,
; 1693 :         // deactivate the destination voice.
; 1694 :         //
; 1695 : 
; 1696 :         if(pSubMixDestination = GetSubMixDestination())

  0021e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00221	e8 00 00 00 00	 call	 ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
  00226	89 45 e4	 mov	 DWORD PTR _pSubMixDestination$[ebp], eax
  00229	83 7d e4 00	 cmp	 DWORD PTR _pSubMixDestination$[ebp], 0
  0022d	74 6d		 je	 SHORT $L36166

; 1697 :         {
; 1698 :             fSourceValid = FALSE;

  0022f	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _fSourceValid$[ebp], 0

; 1699 : 
; 1700 :             for(pleListEntry = pSubMixDestination->m_lstSourceVoices.Flink; pleListEntry != &pSubMixDestination->m_lstSourceVoices; pleListEntry = pleListEntry->Flink)

  00236	8b 4d e4	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  00239	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0023c	89 55 e8	 mov	 DWORD PTR _pleListEntry$[ebp], edx
  0023f	eb 08		 jmp	 SHORT $L36167
$L36168:
  00241	8b 45 e8	 mov	 eax, DWORD PTR _pleListEntry$[ebp]
  00244	8b 08		 mov	 ecx, DWORD PTR [eax]
  00246	89 4d e8	 mov	 DWORD PTR _pleListEntry$[ebp], ecx
$L36167:
  00249	8b 55 e4	 mov	 edx, DWORD PTR _pSubMixDestination$[ebp]
  0024c	83 c2 44	 add	 edx, 68			; 00000044H
  0024f	39 55 e8	 cmp	 DWORD PTR _pleListEntry$[ebp], edx
  00252	74 38		 je	 SHORT $L36169

; 1701 :             {
; 1702 :                 AssertValidEntryList(pleListEntry, ASSERT_IN_LIST);

  00254	68 a6 06 00 00	 push	 1702			; 000006a6H
  00259	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0025e	6a 01		 push	 1
  00260	8b 45 e8	 mov	 eax, DWORD PTR _pleListEntry$[ebp]
  00263	50		 push	 eax
  00264	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 1703 : 
; 1704 :                 pSourceVoice = CONTAINING_RECORD(pleListEntry, CMcpxVoiceClient, m_leSourceVoice);

  00269	8b 4d e8	 mov	 ecx, DWORD PTR _pleListEntry$[ebp]
  0026c	83 e9 5c	 sub	 ecx, 92			; 0000005cH
  0026f	89 4d ec	 mov	 DWORD PTR _pSourceVoice$[ebp], ecx

; 1705 : 
; 1706 :                 if((pSourceVoice->m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00272	8b 55 ec	 mov	 edx, DWORD PTR _pSourceVoice$[ebp]
  00275	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00279	83 e0 03	 and	 eax, 3
  0027c	83 f8 03	 cmp	 eax, 3
  0027f	75 09		 jne	 SHORT $L36174

; 1707 :                 {
; 1708 :                     fSourceValid = TRUE;

  00281	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _fSourceValid$[ebp], 1

; 1709 :                     break;

  00288	eb 02		 jmp	 SHORT $L36169
$L36174:

; 1710 :                 }
; 1711 :             }

  0028a	eb b5		 jmp	 SHORT $L36168
$L36169:

; 1712 : 
; 1713 :             if(!fSourceValid)

  0028c	83 7d f0 00	 cmp	 DWORD PTR _fSourceValid$[ebp], 0
  00290	75 0a		 jne	 SHORT $L36166

; 1714 :             {
; 1715 :                 pSubMixDestination->Stop();

  00292	6a 00		 push	 0
  00294	8b 4d e4	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  00297	e8 00 00 00 00	 call	 ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Stop
$L36166:

; 1716 :             }
; 1717 :         }
; 1718 : 
; 1719 :         //
; 1720 :         // Lower IRQL
; 1721 :         //
; 1722 : 
; 1723 :         irql.Lower();

  0029c	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0029f	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 1724 :     }
; 1725 :     else if(!(m_dwStatus & MCPX_VOICESTATUS_VOICEOFF))

  002a4	eb 1e		 jmp	 SHORT $L36176
$L36141:
  002a6	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  002a9	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  002ad	81 e2 00 80 00
	00		 and	 edx, 32768		; 00008000H
  002b3	85 d2		 test	 edx, edx
  002b5	75 0d		 jne	 SHORT $L36176

; 1726 :     {
; 1727 :         //
; 1728 :         // Remove the CHECKSTUCK deferred command from the queue
; 1729 :         //
; 1730 : 
; 1731 :         RemoveDeferredCommand(MCPX_DEFERREDCMD_VOICE_CHECKSTUCK);

  002b7	6a 00		 push	 0
  002b9	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	8b 10		 mov	 edx, DWORD PTR [eax]
  002be	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c1	ff 52 1c	 call	 DWORD PTR [edx+28]
$L36176:

; 1732 :     }
; 1733 : 
; 1734 :     //
; 1735 :     // Block until the voice actually stops
; 1736 :     //
; 1737 : 
; 1738 :     if(fBlock)

  002c4	83 7d 08 00	 cmp	 DWORD PTR _fBlock$[ebp], 0
  002c8	74 08		 je	 SHORT $L36134

; 1739 :     {
; 1740 :         WaitForVoiceOff();

  002ca	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	e8 00 00 00 00	 call	 ?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff
$L36134:

; 1741 :     }
; 1742 : 
; 1743 :     DPF_LEAVE_VOID();
; 1744 : }

  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 04 00	 ret	 4
?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ENDP ; DirectSound::CMcpxVoiceClient::DeactivateVoice
DSOUND	ENDS
PUBLIC	?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z ; DirectSound::CMcpxVoiceClient::RemoveIdleVoice
PUBLIC	?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z		; InsertTailList
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
PUBLIC	?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z	; DirectSound::CMcpxNotifier::SetStatus
PUBLIC	?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc
;	COMDAT ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B
DSOUND_RD	SEGMENT
?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B DD 02054H ; `DirectSound::CMcpxVoiceClient::RemoveIdleVoice'::`2'::ListRegisters
	DD	02058H
	DD	0205cH
	DD	02060H
	DD	02064H
	DD	02068H
	DD	0206cH
	DD	02070H
	DD	02074H
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z
DSOUND	SEGMENT
_this$ = -48
_dwCVL$ = -44
_dwPrevVoice$ = -40
_dwRegister$ = -36
_dwTVL$ = -32
_fFixNVL$ = -28
_dwNVL$ = -24
_i$ = -20
_dwNextVoice$ = -16
_pPrev$ = -12
_fFixCVL$ = -8
_pNext$ = -4
_fScheduleDpc$ = 8
?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::RemoveIdleVoice, COMDAT
; _this$ = ecx

; 1770 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 1771 :     static const struct
; 1772 :     {
; 1773 :         DWORD               TVL;
; 1774 :         DWORD               CVL;
; 1775 :         DWORD               NVL;
; 1776 :     } ListRegisters[] =
; 1777 :     {
; 1778 :         { NV_PAPU_TVL2D, NV_PAPU_CVL2D, NV_PAPU_NVL2D },    // MCPX_VOICELIST_2D
; 1779 :         { NV_PAPU_TVL3D, NV_PAPU_CVL3D, NV_PAPU_NVL3D },    // MCPX_VOICELIST_3D
; 1780 :         { NV_PAPU_TVLMP, NV_PAPU_CVLMP, NV_PAPU_NVLMP },    // MCPX_VOICELIST_MP
; 1781 :     };
; 1782 : 
; 1783 :     CMcpxVoiceClient *      pPrev;
; 1784 :     CMcpxVoiceClient *      pNext;
; 1785 :     DWORD                   dwPrevVoice;
; 1786 :     DWORD                   dwNextVoice;
; 1787 :     DWORD                   dwRegister;
; 1788 :     DWORD                   dwTVL;
; 1789 :     DWORD                   dwCVL;
; 1790 :     DWORD                   dwNVL;
; 1791 :     BOOL                    fFixCVL;
; 1792 :     BOOL                    fFixNVL;
; 1793 :     DWORD                   i;
; 1794 : 
; 1795 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1796 : 
; 1797 :     ASSERT((KeGetCurrentIrql() > DISPATCH_LEVEL) || m_pMcpxApu->m_dwVoiceMapLock);
; 1798 : 
; 1799 :     AssertValidEntryList(&m_leActiveVoice, ASSERT_IN_LIST);
; 1800 :     ASSERT(m_bVoiceList < NUMELMS(ListRegisters));
; 1801 : 
; 1802 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1803 : 
; 1804 :     //
; 1805 :     // Save the current list register values
; 1806 :     //
; 1807 : 
; 1808 :     MCPX_REG_READ(ListRegisters[m_bVoiceList].TVL, &dwTVL);

  00009	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 65	 movzx	 ecx, BYTE PTR [eax+101]
  00010	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00013	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B[ecx]
  00019	8b 82 00 00 80
	fe		 mov	 eax, DWORD PTR [edx-25165824]
  0001f	89 45 e0	 mov	 DWORD PTR _dwTVL$[ebp], eax

; 1809 :     MCPX_REG_READ(ListRegisters[m_bVoiceList].CVL, &dwCVL);

  00022	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	0f b6 51 65	 movzx	 edx, BYTE PTR [ecx+101]
  00029	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0002c	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B[edx+4]
  00032	8b 88 00 00 80
	fe		 mov	 ecx, DWORD PTR [eax-25165824]
  00038	89 4d d4	 mov	 DWORD PTR _dwCVL$[ebp], ecx

; 1810 :     MCPX_REG_READ(ListRegisters[m_bVoiceList].NVL, &dwNVL);

  0003b	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	0f b6 42 65	 movzx	 eax, BYTE PTR [edx+101]
  00042	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00045	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B[eax+8]
  0004b	8b 91 00 00 80
	fe		 mov	 edx, DWORD PTR [ecx-25165824]
  00051	89 55 e8	 mov	 DWORD PTR _dwNVL$[ebp], edx

; 1811 : 
; 1812 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1813 : 
; 1814 :     ASSERT(!(dwTVL & 0xFFFF0000));
; 1815 :     ASSERT(!(dwCVL & 0xFFFF0000));
; 1816 :     ASSERT(!(dwNVL & 0xFFFF0000));
; 1817 : 
; 1818 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1819 : 
; 1820 :     //
; 1821 :     // Determine the voice's position within the list
; 1822 :     //
; 1823 : 
; 1824 :     if(&m_pMcpxApu->m_alstActiveVoices[m_bVoiceList] == m_leActiveVoice.Blink)

  00054	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005a	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	0f b6 42 65	 movzx	 eax, BYTE PTR [edx+101]
  00061	8d 8c c1 30 07
	00 00		 lea	 ecx, DWORD PTR [ecx+eax*8+1840]
  00068	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	3b 4a 50	 cmp	 ecx, DWORD PTR [edx+80]
  0006e	75 10		 jne	 SHORT $L36209

; 1825 :     {
; 1826 :         pPrev = NULL;

  00070	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pPrev$[ebp], 0

; 1827 :         dwPrevVoice = NV_PAPU_FECV_VALUE_NULL;

  00077	c7 45 d8 ff ff
	00 00		 mov	 DWORD PTR _dwPrevVoice$[ebp], 65535 ; 0000ffffH

; 1828 :     }
; 1829 :     else

  0007e	eb 1e		 jmp	 SHORT $L36210
$L36209:

; 1830 :     {
; 1831 :         pPrev = CONTAINING_RECORD(m_leActiveVoice.Blink, CMcpxVoiceClient, m_leActiveVoice);

  00080	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00086	83 e9 4c	 sub	 ecx, 76			; 0000004cH
  00089	89 4d f4	 mov	 DWORD PTR _pPrev$[ebp], ecx

; 1832 :         dwPrevVoice = (DWORD)pPrev->m_ahVoices[pPrev->m_bVoiceCount - 1];

  0008c	8b 55 f4	 mov	 edx, DWORD PTR _pPrev$[ebp]
  0008f	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _pPrev$[ebp]
  00096	0f b7 54 41 0a	 movzx	 edx, WORD PTR [ecx+eax*2+10]
  0009b	89 55 d8	 mov	 DWORD PTR _dwPrevVoice$[ebp], edx
$L36210:

; 1833 :     }
; 1834 : 
; 1835 :     if(&m_pMcpxApu->m_alstActiveVoices[m_bVoiceList] == m_leActiveVoice.Flink)

  0009e	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a4	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	0f b6 42 65	 movzx	 eax, BYTE PTR [edx+101]
  000ab	8d 8c c1 30 07
	00 00		 lea	 ecx, DWORD PTR [ecx+eax*8+1840]
  000b2	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	3b 4a 4c	 cmp	 ecx, DWORD PTR [edx+76]
  000b8	75 10		 jne	 SHORT $L36216

; 1836 :     {
; 1837 :         pNext = NULL;

  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pNext$[ebp], 0

; 1838 :         dwNextVoice = NV_PAPU_FECV_VALUE_NULL;

  000c1	c7 45 f0 ff ff
	00 00		 mov	 DWORD PTR _dwNextVoice$[ebp], 65535 ; 0000ffffH

; 1839 :     }
; 1840 :     else

  000c8	eb 16		 jmp	 SHORT $L36217
$L36216:

; 1841 :     {
; 1842 :         pNext = CONTAINING_RECORD(m_leActiveVoice.Flink, CMcpxVoiceClient, m_leActiveVoice);

  000ca	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000d0	83 e9 4c	 sub	 ecx, 76			; 0000004cH
  000d3	89 4d fc	 mov	 DWORD PTR _pNext$[ebp], ecx

; 1843 :         dwNextVoice = (DWORD)pNext->m_ahVoices[0];

  000d6	8b 55 fc	 mov	 edx, DWORD PTR _pNext$[ebp]
  000d9	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000dd	89 45 f0	 mov	 DWORD PTR _dwNextVoice$[ebp], eax
$L36217:

; 1844 :     }
; 1845 : 
; 1846 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 1847 : 
; 1848 :     //
; 1849 :     // Validate the list surrounding the voice to be removed
; 1850 :     //
; 1851 :     
; 1852 :     if(pPrev)
; 1853 :     {
; 1854 :         MCPX_VOICE_STRUCT_READ(dwPrevVoice, NV_PAVS_VOICE_TAR_PITCH_LINK, &dwRegister);
; 1855 :         ASSERT((dwRegister & 0xFFFF) == (DWORD)m_ahVoices[0]);
; 1856 :     }
; 1857 :     else
; 1858 :     {
; 1859 :         ASSERT(dwTVL == (DWORD)m_ahVoices[0]);
; 1860 :     }
; 1861 : 
; 1862 :     for(i = 0; i < (DWORD)m_bVoiceCount - 1; i++)
; 1863 :     {
; 1864 :         MCPX_VOICE_STRUCT_READ(m_ahVoices[i], NV_PAVS_VOICE_TAR_PITCH_LINK, &dwRegister);
; 1865 :         ASSERT((dwRegister & 0xFFFF) == (DWORD)m_ahVoices[i + 1]);
; 1866 :     }
; 1867 : 
; 1868 :     MCPX_VOICE_STRUCT_READ(m_ahVoices[i], NV_PAVS_VOICE_TAR_PITCH_LINK, &dwRegister);
; 1869 :     ASSERT((dwRegister & 0xFFFF) == dwNextVoice);
; 1870 : 
; 1871 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 1872 : 
; 1873 :     //
; 1874 :     // If we're at the head of the list, fix the TVL register.  If not, 
; 1875 :     // fix up the next voice pointer for the previous voice.
; 1876 :     //
; 1877 : 
; 1878 :     if(pPrev)

  000e0	83 7d f4 00	 cmp	 DWORD PTR _pPrev$[ebp], 0
  000e4	74 3d		 je	 SHORT $L36223

; 1879 :     {
; 1880 :         MCPX_VOICE_STRUCT_READ(dwPrevVoice, NV_PAVS_VOICE_TAR_PITCH_LINK, &dwRegister);

  000e6	8b 4d d8	 mov	 ecx, DWORD PTR _dwPrevVoice$[ebp]
  000e9	c1 e1 07	 shl	 ecx, 7
  000ec	8b 15 30 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  000f2	8b 44 0a 7c	 mov	 eax, DWORD PTR [edx+ecx+124]
  000f6	89 45 dc	 mov	 DWORD PTR _dwRegister$[ebp], eax

; 1881 : 
; 1882 :         dwRegister &= 0xFFFF0000;

  000f9	8b 4d dc	 mov	 ecx, DWORD PTR _dwRegister$[ebp]
  000fc	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00102	89 4d dc	 mov	 DWORD PTR _dwRegister$[ebp], ecx

; 1883 :         dwRegister |= dwNextVoice;

  00105	8b 55 dc	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00108	0b 55 f0	 or	 edx, DWORD PTR _dwNextVoice$[ebp]
  0010b	89 55 dc	 mov	 DWORD PTR _dwRegister$[ebp], edx

; 1884 : 
; 1885 :         MCPX_VOICE_STRUCT_WRITE(dwPrevVoice, NV_PAVS_VOICE_TAR_PITCH_LINK, dwRegister);

  0010e	8b 45 d8	 mov	 eax, DWORD PTR _dwPrevVoice$[ebp]
  00111	c1 e0 07	 shl	 eax, 7
  00114	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  0011a	8b 55 dc	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  0011d	89 54 01 7c	 mov	 DWORD PTR [ecx+eax+124], edx

; 1886 :     }
; 1887 :     else

  00121	eb 1f		 jmp	 SHORT $L36231
$L36223:

; 1888 :     {
; 1889 :         dwTVL = dwNextVoice;

  00123	8b 45 f0	 mov	 eax, DWORD PTR _dwNextVoice$[ebp]
  00126	89 45 e0	 mov	 DWORD PTR _dwTVL$[ebp], eax

; 1890 :         
; 1891 :         MCPX_REG_WRITE(ListRegisters[m_bVoiceList].TVL, dwTVL);

  00129	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	0f b6 51 65	 movzx	 edx, BYTE PTR [ecx+101]
  00130	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00133	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B[edx]
  00139	8b 4d e0	 mov	 ecx, DWORD PTR _dwTVL$[ebp]
  0013c	89 88 00 00 80
	fe		 mov	 DWORD PTR [eax-25165824], ecx
$L36231:

; 1892 :     }
; 1893 : 
; 1894 :     //
; 1895 :     // Enter the hardware voice loop
; 1896 :     //
; 1897 : 
; 1898 :     for(i = 0, fFixCVL = FALSE, fFixNVL = FALSE; i < m_bVoiceCount; i++)

  00142	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00149	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fFixCVL$[ebp], 0
  00150	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _fFixNVL$[ebp], 0
  00157	eb 09		 jmp	 SHORT $L36234
$L36235:
  00159	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  0015c	83 c2 01	 add	 edx, 1
  0015f	89 55 ec	 mov	 DWORD PTR _i$[ebp], edx
$L36234:
  00162	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00165	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00169	39 4d ec	 cmp	 DWORD PTR _i$[ebp], ecx
  0016c	0f 83 87 00 00
	00		 jae	 $L36236

; 1899 :     {
; 1900 :         //
; 1901 :         // Check the CVL register
; 1902 :         //
; 1903 : 
; 1904 :         if(dwCVL == (DWORD)m_ahVoices[i])

  00172	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  00175	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00178	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  0017d	39 4d d4	 cmp	 DWORD PTR _dwCVL$[ebp], ecx
  00180	75 07		 jne	 SHORT $L36238

; 1905 :         {
; 1906 :             fFixCVL = TRUE;

  00182	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fFixCVL$[ebp], 1
$L36238:

; 1907 :         }
; 1908 : 
; 1909 :         //
; 1910 :         // Check the NVL register
; 1911 :         //
; 1912 : 
; 1913 :         if(dwNVL == (DWORD)m_ahVoices[i])

  00189	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  0018c	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  00194	39 4d e8	 cmp	 DWORD PTR _dwNVL$[ebp], ecx
  00197	75 07		 jne	 SHORT $L36240

; 1914 :         {
; 1915 :             fFixNVL = TRUE;

  00199	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _fFixNVL$[ebp], 1
$L36240:

; 1916 :         }
; 1917 : 
; 1918 :         //
; 1919 :         // Remove the voice from the hardware list by making it point to itself
; 1920 :         //
; 1921 : 
; 1922 :         MCPX_VOICE_STRUCT_READ(m_ahVoices[i], NV_PAVS_VOICE_TAR_PITCH_LINK, &dwRegister);

  001a0	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  001a3	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  001a6	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  001ab	c1 e1 07	 shl	 ecx, 7
  001ae	8b 15 30 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  001b4	8b 44 0a 7c	 mov	 eax, DWORD PTR [edx+ecx+124]
  001b8	89 45 dc	 mov	 DWORD PTR _dwRegister$[ebp], eax

; 1923 : 
; 1924 :         dwRegister &= 0xFFFF0000;

  001bb	8b 4d dc	 mov	 ecx, DWORD PTR _dwRegister$[ebp]
  001be	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  001c4	89 4d dc	 mov	 DWORD PTR _dwRegister$[ebp], ecx

; 1925 :         dwRegister |= (WORD)m_ahVoices[i];

  001c7	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  001ca	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  001d2	8b 55 dc	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  001d5	0b d1		 or	 edx, ecx
  001d7	89 55 dc	 mov	 DWORD PTR _dwRegister$[ebp], edx

; 1926 :         
; 1927 :         MCPX_VOICE_STRUCT_WRITE(m_ahVoices[i], NV_PAVS_VOICE_TAR_PITCH_LINK, dwRegister);

  001da	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001dd	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  001e0	0f b7 54 41 0c	 movzx	 edx, WORD PTR [ecx+eax*2+12]
  001e5	c1 e2 07	 shl	 edx, 7
  001e8	a1 30 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  001ed	8b 4d dc	 mov	 ecx, DWORD PTR _dwRegister$[ebp]
  001f0	89 4c 10 7c	 mov	 DWORD PTR [eax+edx+124], ecx

; 1928 :     }

  001f4	e9 60 ff ff ff	 jmp	 $L36235
$L36236:

; 1929 : 
; 1930 :     //
; 1931 :     // Fix up the CVL and NVL registers
; 1932 :     //
; 1933 : 
; 1934 :     if(fFixCVL)

  001f9	83 7d f8 00	 cmp	 DWORD PTR _fFixCVL$[ebp], 0
  001fd	0f 84 82 00 00
	00		 je	 $L36249

; 1935 :     {
; 1936 :         if(pNext)

  00203	83 7d fc 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  00207	74 3b		 je	 SHORT $L36250

; 1937 :         {
; 1938 :             dwCVL = dwNextVoice;

  00209	8b 55 f0	 mov	 edx, DWORD PTR _dwNextVoice$[ebp]
  0020c	89 55 d4	 mov	 DWORD PTR _dwCVL$[ebp], edx

; 1939 : 
; 1940 :             MCPX_VOICE_STRUCT_READ(dwNextVoice, NV_PAVS_VOICE_TAR_PITCH_LINK, &dwRegister);

  0020f	8b 45 f0	 mov	 eax, DWORD PTR _dwNextVoice$[ebp]
  00212	c1 e0 07	 shl	 eax, 7
  00215	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  0021b	8b 54 01 7c	 mov	 edx, DWORD PTR [ecx+eax+124]
  0021f	89 55 dc	 mov	 DWORD PTR _dwRegister$[ebp], edx

; 1941 :             
; 1942 :             dwRegister &= 0xFFFF;

  00222	8b 45 dc	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00225	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0022a	89 45 dc	 mov	 DWORD PTR _dwRegister$[ebp], eax

; 1943 : 
; 1944 :             if(NV_PAPU_FECV_VALUE_NULL == dwRegister)

  0022d	81 7d dc ff ff
	00 00		 cmp	 DWORD PTR _dwRegister$[ebp], 65535 ; 0000ffffH
  00234	75 06		 jne	 SHORT $L36254

; 1945 :             {
; 1946 :                 dwRegister = dwTVL;

  00236	8b 4d e0	 mov	 ecx, DWORD PTR _dwTVL$[ebp]
  00239	89 4d dc	 mov	 DWORD PTR _dwRegister$[ebp], ecx
$L36254:

; 1947 :             }
; 1948 : 
; 1949 :             dwNVL = dwRegister;

  0023c	8b 55 dc	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  0023f	89 55 e8	 mov	 DWORD PTR _dwNVL$[ebp], edx

; 1950 :         }
; 1951 :         else

  00242	eb 0d		 jmp	 SHORT $L36255
$L36250:

; 1952 :         {
; 1953 :             dwCVL = NV_PAPU_FECV_VALUE_NULL;

  00244	c7 45 d4 ff ff
	00 00		 mov	 DWORD PTR _dwCVL$[ebp], 65535 ; 0000ffffH

; 1954 :             dwNVL = dwTVL;

  0024b	8b 45 e0	 mov	 eax, DWORD PTR _dwTVL$[ebp]
  0024e	89 45 e8	 mov	 DWORD PTR _dwNVL$[ebp], eax
$L36255:

; 1955 :         }
; 1956 : 
; 1957 :         MCPX_REG_WRITE(ListRegisters[m_bVoiceList].CVL, dwCVL);

  00251	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00254	0f b6 51 65	 movzx	 edx, BYTE PTR [ecx+101]
  00258	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0025b	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B[edx+4]
  00261	8b 4d d4	 mov	 ecx, DWORD PTR _dwCVL$[ebp]
  00264	89 88 00 00 80
	fe		 mov	 DWORD PTR [eax-25165824], ecx

; 1958 :         MCPX_REG_WRITE(ListRegisters[m_bVoiceList].NVL, dwNVL);

  0026a	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0026d	0f b6 42 65	 movzx	 eax, BYTE PTR [edx+101]
  00271	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00274	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B[eax+8]
  0027a	8b 55 e8	 mov	 edx, DWORD PTR _dwNVL$[ebp]
  0027d	89 91 00 00 80
	fe		 mov	 DWORD PTR [ecx-25165824], edx

; 1959 :     }
; 1960 :     else if(fFixNVL)

  00283	eb 33		 jmp	 SHORT $L36260
$L36249:
  00285	83 7d e4 00	 cmp	 DWORD PTR _fFixNVL$[ebp], 0
  00289	74 2d		 je	 SHORT $L36260

; 1961 :     {
; 1962 :         if(pNext)

  0028b	83 7d fc 00	 cmp	 DWORD PTR _pNext$[ebp], 0
  0028f	74 08		 je	 SHORT $L36262

; 1963 :         {
; 1964 :             dwNVL = dwNextVoice;

  00291	8b 45 f0	 mov	 eax, DWORD PTR _dwNextVoice$[ebp]
  00294	89 45 e8	 mov	 DWORD PTR _dwNVL$[ebp], eax

; 1965 :         }
; 1966 :         else

  00297	eb 06		 jmp	 SHORT $L36263
$L36262:

; 1967 :         {
; 1968 :             dwNVL = dwTVL;

  00299	8b 4d e0	 mov	 ecx, DWORD PTR _dwTVL$[ebp]
  0029c	89 4d e8	 mov	 DWORD PTR _dwNVL$[ebp], ecx
$L36263:

; 1969 :         }
; 1970 : 
; 1971 :         MCPX_REG_WRITE(ListRegisters[m_bVoiceList].NVL, dwNVL);

  0029f	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  002a2	0f b6 42 65	 movzx	 eax, BYTE PTR [edx+101]
  002a6	6b c0 0c	 imul	 eax, 12			; 0000000cH
  002a9	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR ?ListRegisters@?1??RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z@4QBU__unnamed@23@B[eax+8]
  002af	8b 55 e8	 mov	 edx, DWORD PTR _dwNVL$[ebp]
  002b2	89 91 00 00 80
	fe		 mov	 DWORD PTR [ecx-25165824], edx
$L36260:

; 1972 :     }
; 1973 : 
; 1974 :     //
; 1975 :     // Remove the voice client object from the active voice list
; 1976 :     //
; 1977 : 
; 1978 :     RemoveEntryList(&m_leActiveVoice);

  002b8	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  002bb	83 c0 4c	 add	 eax, 76			; 0000004cH
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 1979 : 
; 1980 :     //
; 1981 :     // Reset the voice list index
; 1982 :     //
; 1983 : 
; 1984 :     m_bVoiceList = MCPX_VOICELIST_INVALID;

  002c4	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c7	c6 41 65 ff	 mov	 BYTE PTR [ecx+101], 255	; 000000ffH

; 1985 : 
; 1986 :     //
; 1987 :     // If the voice realizes it's stopped before we do, either because it
; 1988 :     // stopped itself or because the SSL interrupt was completed before
; 1989 :     // the idle voice interrupt, the voice will set the VOICEOFF bit in
; 1990 :     // it's status, meaning that it's waiting for notification from us that
; 1991 :     // it's free to release it's resources.  If this bit is set, just clear
; 1992 :     // it.  If it's not, add the voice to the "pending inactive" list.  During
; 1993 :     // the ISR DPC, we'll walk both the active voice lists and the pending
; 1994 :     // inactive list.  This makes it safe for us to remove the voice from the
; 1995 :     // active voice list before the SSL interrupt is handled.
; 1996 :     // 
; 1997 : 
; 1998 :     if(m_dwStatus & MCPX_VOICESTATUS_VOICEOFF)

  002cb	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  002ce	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  002d2	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  002d7	85 c0		 test	 eax, eax
  002d9	74 12		 je	 SHORT $L36266

; 1999 :     {
; 2000 :         and(&m_dwStatus, ~MCPX_VOICESTATUS_VOICEOFF);

  002db	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  002de	83 c1 12	 add	 ecx, 18			; 00000012H
  002e1	ba ff 7f 00 00	 mov	 edx, 32767		; 00007fffH
  002e6	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and

; 2001 : 
; 2002 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 2003 : 
; 2004 :         DPF_INFO("Voice %x (%x) is now idle", this, m_ahVoices[0]);
; 2005 : 
; 2006 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 2007 : 
; 2008 :     }
; 2009 :     else

  002eb	eb 53		 jmp	 SHORT $L36182
$L36266:

; 2010 :     {
; 2011 :         m_Notifier.SetStatus(MCPX_NOTIFIER_VOICE_OFF, TRUE);

  002ed	6a 01		 push	 1
  002ef	6a 03		 push	 3
  002f1	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  002f4	83 c1 68	 add	 ecx, 104		; 00000068H
  002f7	e8 00 00 00 00	 call	 ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z ; DirectSound::CMcpxNotifier::SetStatus

; 2012 :         
; 2013 :         if(fScheduleDpc)

  002fc	83 7d 08 00	 cmp	 DWORD PTR _fScheduleDpc$[ebp], 0
  00300	74 3e		 je	 SHORT $L36182

; 2014 :         {
; 2015 :             InsertTailList(&m_pMcpxApu->m_lstPendingInactiveVoices, &m_lePendingInactiveVoice);

  00302	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00305	83 c1 54	 add	 ecx, 84			; 00000054H
  00308	51		 push	 ecx
  00309	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0030c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0030f	05 48 07 00 00	 add	 eax, 1864		; 00000748H
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList

; 2016 : 
; 2017 :             m_pMcpxApu->m_arInterruptStatus[0].FEVoice = TRUE;

  0031a	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0031d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00320	8b 82 60 07 00
	00		 mov	 eax, DWORD PTR [edx+1888]
  00326	83 c8 40	 or	 eax, 64			; 00000040H
  00329	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0032c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0032f	89 82 60 07 00
	00		 mov	 DWORD PTR [edx+1888], eax

; 2018 :         
; 2019 :             m_pMcpxApu->ScheduleApuInterruptDpc();

  00335	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00338	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0033b	e8 00 00 00 00	 call	 ?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc
$L36182:

; 2020 :         }
; 2021 : 
; 2022 : #ifdef MCPX_ENABLE_ISR_DEBUGGING
; 2023 : 
; 2024 :         DPF_INFO("Voice %x (%x) is now idle, but pending SSL completion", this, m_ahVoices[0]);
; 2025 : 
; 2026 : #endif // MCPX_ENABLE_ISR_DEBUGGING
; 2027 : 
; 2028 :     }
; 2029 : }

  00340	8b e5		 mov	 esp, ebp
  00342	5d		 pop	 ebp
  00343	c2 04 00	 ret	 4
?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z ENDP ; DirectSound::CMcpxVoiceClient::RemoveIdleVoice
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailList, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 75		 push	 117			; 00000075H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 118  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 76		 push	 118			; 00000076H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 119  : 
; 120  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 121  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 122  :     
; 123  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 124  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 125  : 
; 126  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7e		 push	 126			; 0000007eH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 127  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ENDP		; InsertTailList
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  00020	74 2c		 je	 SHORT $L30046

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L30046:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
DSOUND	ENDS
PUBLIC	??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ ; `string'
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpxcore.h
DSOUND_RD	SEGMENT
??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ DB 'dwNotifierI'
	DB	'ndex < m_dwNotifierCount', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z
DSOUND	SEGMENT
_this$ = -4
_dwNotifierIndex$ = 8
_fSignaled$ = 12
?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z PROC NEAR ; DirectSound::CMcpxNotifier::SetStatus, COMDAT
; _this$ = ecx

; 455  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  :         ASSERT(m_paNotifier);

  00007	68 c8 01 00 00	 push	 456			; 000001c8H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	0f 94 c1	 sete	 cl
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 457  :         ASSERT(dwNotifierIndex < m_dwNotifierCount);

  0002a	68 c9 01 00 00	 push	 457			; 000001c9H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  0003f	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00042	1b c9		 sbb	 ecx, ecx
  00044	41		 inc	 ecx
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : 
; 459  :         m_paNotifier[dwNotifierIndex].Status = fSignaled ? NV1BA0_NOTIFICATION_STATUS_DONE_SUCCESS : NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS;

  0004e	8b 55 0c	 mov	 edx, DWORD PTR _fSignaled$[ebp]
  00051	f7 da		 neg	 edx
  00053	1b d2		 sbb	 edx, edx
  00055	83 e2 81	 and	 edx, -127		; ffffff81H
  00058	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0005e	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00061	c1 e0 04	 shl	 eax, 4
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00069	88 54 01 0f	 mov	 BYTE PTR [ecx+eax+15], dl

; 460  :     }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z ENDP	; DirectSound::CMcpxNotifier::SetStatus
DSOUND	ENDS
EXTRN	__imp__KeInsertQueueDpc@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
;	COMDAT ?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc, COMDAT
; _this$ = ecx

; 278  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 279  :         KeInsertQueueDpc(&m_dpcInterrupt, NULL, NULL);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	05 70 07 00 00	 add	 eax, 1904		; 00000770H
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInsertQueueDpc@12

; 280  :     }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?ScheduleApuInterruptDpc@CMcpxAPU@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxAPU::ScheduleApuInterruptDpc
DSOUND	ENDS
PUBLIC	?RemoveStuckVoice@CMcpxVoiceClient@DirectSound@@AAEXXZ ; DirectSound::CMcpxVoiceClient::RemoveStuckVoice
EXTRN	?Break@CDebug@DirectSound@@SAXXZ:NEAR		; DirectSound::CDebug::Break
EXTRN	?IdleVoiceProcessor@CMcpxCore@DirectSound@@QAEHH@Z:NEAR ; DirectSound::CMcpxCore::IdleVoiceProcessor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
;	COMDAT ?RemoveStuckVoice@CMcpxVoiceClient@DirectSound@@AAEXXZ
DSOUND	SEGMENT
_this$ = -16
___AutoIrql$ = -12
_fIdle$ = -4
?RemoveStuckVoice@CMcpxVoiceClient@DirectSound@@AAEXXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::RemoveStuckVoice, COMDAT
; _this$ = ecx

; 2055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2056 :     BOOL                    fIdle;
; 2057 :     
; 2058 :     DPF_ENTER();
; 2059 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2060 : 
; 2061 : #ifdef MCPX_DEBUG_STUCK_VOICES
; 2062 : 
; 2063 :     BREAK();

  00011	e8 00 00 00 00	 call	 ?Break@CDebug@DirectSound@@SAXXZ ; DirectSound::CDebug::Break

; 2064 : 
; 2065 : #endif // MCPX_DEBUG_STUCK_VOICES
; 2066 : 
; 2067 :     m_dwStuckVoiceCount++;

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwStuckVoiceCount@CMcpxVoiceClient@DirectSound@@2KA ; DirectSound::CMcpxVoiceClient::m_dwStuckVoiceCount
  0001b	83 c0 01	 add	 eax, 1
  0001e	a3 00 00 00 00	 mov	 DWORD PTR ?m_dwStuckVoiceCount@CMcpxVoiceClient@DirectSound@@2KA, eax ; DirectSound::CMcpxVoiceClient::m_dwStuckVoiceCount

; 2068 :     
; 2069 :     //
; 2070 :     // Idle the voice processor
; 2071 :     //
; 2072 : 
; 2073 :     fIdle = m_pMcpxApu->IdleVoiceProcessor(TRUE);

  00023	6a 01		 push	 1
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0002b	83 c1 08	 add	 ecx, 8
  0002e	e8 00 00 00 00	 call	 ?IdleVoiceProcessor@CMcpxCore@DirectSound@@QAEHH@Z ; DirectSound::CMcpxCore::IdleVoiceProcessor
  00033	89 45 fc	 mov	 DWORD PTR _fIdle$[ebp], eax

; 2074 : 
; 2075 :     //
; 2076 :     // Remove the stuck voice
; 2077 :     //
; 2078 : 
; 2079 :     RemoveIdleVoice(FALSE);

  00036	6a 00		 push	 0
  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?RemoveIdleVoice@CMcpxVoiceClient@DirectSound@@AAEXH@Z ; DirectSound::CMcpxVoiceClient::RemoveIdleVoice

; 2080 : 
; 2081 :     //
; 2082 :     // Turn the VP back on
; 2083 :     //
; 2084 : 
; 2085 :     if(fIdle)

  00040	83 7d fc 00	 cmp	 DWORD PTR _fIdle$[ebp], 0
  00044	74 10		 je	 SHORT $L36275

; 2086 :     {
; 2087 :         m_pMcpxApu->IdleVoiceProcessor(FALSE);

  00046	6a 00		 push	 0
  00048	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0004e	83 c1 08	 add	 ecx, 8
  00051	e8 00 00 00 00	 call	 ?IdleVoiceProcessor@CMcpxCore@DirectSound@@QAEHH@Z ; DirectSound::CMcpxCore::IdleVoiceProcessor
$L36275:

; 2088 :     }
; 2089 : 
; 2090 :     //
; 2091 :     // Service the voice interrupt that didn't happen
; 2092 :     //
; 2093 : 
; 2094 :     ServiceVoiceInterrupt();

  00056	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 10		 mov	 edx, DWORD PTR [eax]
  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	ff 52 14	 call	 DWORD PTR [edx+20]

; 2095 : 
; 2096 :     DPF_LEAVE_VOID();
; 2097 : }

  00061	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00064	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?RemoveStuckVoice@CMcpxVoiceClient@DirectSound@@AAEXXZ ENDP ; DirectSound::CMcpxVoiceClient::RemoveStuckVoice
DSOUND	ENDS
PUBLIC	?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ReleaseVoice
PUBLIC	??_C@_0BP@BEFEJAOO@CMcpxVoiceClient?3?3ReleaseVoice?$AA@ ; `string'
PUBLIC	??_C@_0BI@BKJMGHBP@Releasing?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0BP@BEFEJAOO@CMcpxVoiceClient?3?3ReleaseVoice?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@BEFEJAOO@CMcpxVoiceClient?3?3ReleaseVoice?$AA@ DB 'CMcpxVoiceCl'
	DB	'ient::ReleaseVoice', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@BKJMGHBP@Releasing?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@BKJMGHBP@Releasing?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@ DB 'Releas'
	DB	'ing voice %x (%x)', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -16
___AutoIrql$ = -12
_i$ = -4
?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::ReleaseVoice, COMDAT
; _this$ = ecx

; 2123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2124 :     DWORD                   i;
; 2125 :     
; 2126 :     DPF_ENTER();
; 2127 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2128 : 
; 2129 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00011	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00018	83 e1 03	 and	 ecx, 3
  0001b	83 f9 03	 cmp	 ecx, 3
  0001e	0f 85 2d 01 00
	00		 jne	 $L36282

; 2130 :     {
; 2131 :         //
; 2132 :         // Release the voice.  We'll get an interrupt later when the voice
; 2133 :         // actually turns off.  Be sure the PERSIST bit is cleared so the voice
; 2134 :         // turns off at the end of the envelope.
; 2135 :         //
; 2136 :         
; 2137 :         DPF_INFO("Releasing voice %x (%x)", this, m_ahVoices[0]);

  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BEFEJAOO@CMcpxVoiceClient?3?3ReleaseVoice?$AA@
  0002e	68 59 08 00 00	 push	 2137			; 00000859H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00038	6a 04		 push	 4
  0003a	6a 09		 push	 9
  0003c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00047	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  0004b	50		 push	 eax
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	51		 push	 ecx
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@BKJMGHBP@Releasing?5voice?5?$CFx?5?$CI?$CFx?$CJ?$AA@
  00055	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2138 : 
; 2139 :         or(&m_dwStatus, MCPX_VOICESTATUS_NOTEOFF);

  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	83 c1 12	 add	 ecx, 18			; 00000012H
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 2140 :         
; 2141 :         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST_OFF, NV1BA0_PIO_SET_VOICE_CFG_FMT_PERSIST);

  0006d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00070	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00073	25 ff ff 7f ff	 and	 eax, -8388609		; ff7fffffH
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2142 : 
; 2143 :         MCPX_CHECK_VOICE_FIFO(3 * m_bVoiceCount);

  0007e	68 5f 08 00 00	 push	 2143			; 0000085fH
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0008d	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00092	0f b6 d0	 movzx	 edx, al
  00095	33 c0		 xor	 eax, eax
  00097	83 fa 02	 cmp	 edx, 2
  0009a	0f 95 c0	 setne	 al
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a3	83 c4 10	 add	 esp, 16			; 00000010H
  000a6	68 5f 08 00 00	 push	 2143			; 0000085fH
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  000bc	6b d2 03	 imul	 edx, 3
  000bf	33 c0		 xor	 eax, eax
  000c1	83 fa 20	 cmp	 edx, 32			; 00000020H
  000c4	0f 9f c0	 setg	 al
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
$L36287:
  000d0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000d5	8b 91 00 00 82
	fe		 mov	 edx, DWORD PTR [ecx-25034752]
  000db	c1 ea 02	 shr	 edx, 2
  000de	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  000e5	6b c9 03	 imul	 ecx, 3
  000e8	3b d1		 cmp	 edx, ecx
  000ea	73 02		 jae	 SHORT $L36288
  000ec	eb e2		 jmp	 SHORT $L36287
$L36288:

; 2144 :         
; 2145 :         for(i = 0; i < m_bVoiceCount; i++)

  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000f5	eb 09		 jmp	 SHORT $L36291
$L36292:
  000f7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000fa	83 c2 01	 add	 edx, 1
  000fd	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L36291:
  00100	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00103	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00107	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  0010a	73 45		 jae	 SHORT $L36282

; 2146 :         {
; 2147 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  0010c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0010f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00112	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  00117	ba f8 02 00 00	 mov	 edx, 760		; 000002f8H
  0011c	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 2148 :             MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  00122	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00125	50		 push	 eax
  00126	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  0012e	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  00133	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 2149 :             MCPX_VOICE_WRITE(VoiceRelease, m_ahVoices[i]);

  00139	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0013c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  00144	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  00149	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 2150 :         }

  0014f	eb a6		 jmp	 SHORT $L36292
$L36282:

; 2151 :     }
; 2152 : 
; 2153 :     DPF_LEAVE_VOID();
; 2154 : }

  00151	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00154	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxVoiceClient::ReleaseVoice
DSOUND	ENDS
PUBLIC	?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::CheckStuckVoice
PUBLIC	??_C@_0CI@EADPALEL@?$CB?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_@ ; `string'
PUBLIC	??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@ ; `string'
PUBLIC	??_C@_0CH@GELHBDFO@Busy?9waiting?5for?5the?5voice?5to?5tu@ ; `string'
PUBLIC	??_C@_0EN@NPBPONNE@This?5warning?5is?5being?5generated?5@ ; `string'
PUBLIC	??_C@_0EF@OJCILPFM@a?5hardware?5voice?5to?5be?5stopped?4?5@ ; `string'
PUBLIC	??_C@_0EM@OOPIPDLA@operation?0?5so?5any?5function?5that?5@ ; `string'
PUBLIC	??_C@_0EL@JCEFBPFB@until?5it?5is?4?5?5To?5see?5an?5example?5@ ; `string'
PUBLIC	??_C@_0EN@JANHIGAO@immediately?5follow?5it?5with?5a?5cal@ ; `string'
PUBLIC	??_C@_0EM@KMADEABL@are?0?5you?8ll?5see?5that?5DSBSTATUS_P@ ; `string'
PUBLIC	??_C@_0EK@KLDALOHL@that?5can?5potentially?5block?5in?5th@ ; `string'
PUBLIC	??_C@_0EN@EEEIHDP@query?5the?5playing?5status?5of?5a?5bu@ ; `string'
PUBLIC	??_C@_0EH@GEIEDGIP@the?5object?5you?5wish?5to?5check?4?5?5T@ ; `string'
PUBLIC	??_C@_0DJ@DHOOJBPK@variable?5?$CCg_fDirectSoundDisableB@ ; `string'
EXTRN	_g_fDirectSoundDisableBusyWaitWarning:DWORD
;	COMDAT ??_C@_0CI@EADPALEL@?$CB?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_@
DSOUND_RD	SEGMENT
??_C@_0CI@EADPALEL@?$CB?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_@ DB '!(m_d'
	DB	'wStatus & MCPX_VOICESTATUS_ACTIVE)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
DSOUND_RD	SEGMENT
??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@ DB 'CMcpxVoiceClie'
	DB	'nt::WaitForVoiceOff', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@GELHBDFO@Busy?9waiting?5for?5the?5voice?5to?5tu@
DSOUND_RD	SEGMENT
??_C@_0CH@GELHBDFO@Busy?9waiting?5for?5the?5voice?5to?5tu@ DB 'Busy-waiti'
	DB	'ng for the voice to turn off', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ?fExplained@?1??WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ@4HA
DSOUND_RW	SEGMENT
?fExplained@?1??WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ@4HA DD 00H ; `DirectSound::CMcpxVoiceClient::WaitForVoiceOff'::`2'::fExplained
DSOUND_RW	ENDS
;	COMDAT ??_C@_0EN@NPBPONNE@This?5warning?5is?5being?5generated?5@
DSOUND_RD	SEGMENT
??_C@_0EN@NPBPONNE@This?5warning?5is?5being?5generated?5@ DB 'This warnin'
	DB	'g is being generated because you''ve called a method that req'
	DB	'uires', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EF@OJCILPFM@a?5hardware?5voice?5to?5be?5stopped?4?5@
DSOUND_RD	SEGMENT
??_C@_0EF@OJCILPFM@a?5hardware?5voice?5to?5be?5stopped?4?5@ DB 'a hardwar'
	DB	'e voice to be stopped.  Stopping a voice is an asynchronous', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@OOPIPDLA@operation?0?5so?5any?5function?5that?5@
DSOUND_RD	SEGMENT
??_C@_0EM@OOPIPDLA@operation?0?5so?5any?5function?5that?5@ DB 'operation,'
	DB	' so any function that requires the voice to be stopped must b'
	DB	'lock', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EL@JCEFBPFB@until?5it?5is?4?5?5To?5see?5an?5example?5@
DSOUND_RD	SEGMENT
??_C@_0EL@JCEFBPFB@until?5it?5is?4?5?5To?5see?5an?5example?5@ DB 'until i'
	DB	't is.  To see an example of this, call IDirectSoundBuffer::St'
	DB	'op and', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@JANHIGAO@immediately?5follow?5it?5with?5a?5cal@
DSOUND_RD	SEGMENT
??_C@_0EN@JANHIGAO@immediately?5follow?5it?5with?5a?5cal@ DB 'immediately'
	DB	' follow it with a call to IDirectSoundBuffer::GetStatus.  Cha'
	DB	'nces', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@KMADEABL@are?0?5you?8ll?5see?5that?5DSBSTATUS_P@
DSOUND_RD	SEGMENT
??_C@_0EM@KMADEABL@are?0?5you?8ll?5see?5that?5DSBSTATUS_P@ DB 'are, you'''
	DB	'll see that DSBSTATUS_PLAYING is still set.  For a list of me'
	DB	'thods', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@KLDALOHL@that?5can?5potentially?5block?5in?5th@
DSOUND_RD	SEGMENT
??_C@_0EK@KLDALOHL@that?5can?5potentially?5block?5in?5th@ DB 'that can po'
	DB	'tentially block in this method, consult the documentation.  T'
	DB	'o', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@EEEIHDP@query?5the?5playing?5status?5of?5a?5bu@
DSOUND_RD	SEGMENT
??_C@_0EN@EEEIHDP@query?5the?5playing?5status?5of?5a?5bu@ DB 'query the p'
	DB	'laying status of a buffer or stream, call the GetStatus metho'
	DB	'd on', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EH@GEIEDGIP@the?5object?5you?5wish?5to?5check?4?5?5T@
DSOUND_RD	SEGMENT
??_C@_0EH@GEIEDGIP@the?5object?5you?5wish?5to?5check?4?5?5T@ DB 'the obje'
	DB	'ct you wish to check.  To disable this warning, set the globa'
	DB	'l', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@DHOOJBPK@variable?5?$CCg_fDirectSoundDisableB@
DSOUND_RD	SEGMENT
??_C@_0DJ@DHOOJBPK@variable?5?$CCg_fDirectSoundDisableB@ DB 'variable "g_'
	DB	'fDirectSoundDisableBusyWaitWarning" to TRUE.', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff, COMDAT
; _this$ = ecx

; 2181 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2182 :     static BOOL             fExplained  = FALSE;
; 2183 :     
; 2184 :     DPF_ENTER();
; 2185 : 
; 2186 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0000e	83 e1 01	 and	 ecx, 1
  00011	85 c9		 test	 ecx, ecx
  00013	0f 84 6b 02 00
	00		 je	 $L36303

; 2187 :     {
; 2188 :         ASSERT(!(m_dwStatus & MCPX_VOICESTATUS_ACTIVE));

  00019	68 8c 08 00 00	 push	 2188			; 0000088cH
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EADPALEL@?$CB?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_@
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  0002f	83 e0 02	 and	 eax, 2
  00032	f7 d8		 neg	 eax
  00034	1b c0		 sbb	 eax, eax
  00036	f7 d8		 neg	 eax
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 2189 : 
; 2190 : #ifdef DEBUG
; 2191 : 
; 2192 :         if(m_dwStatus & MCPX_VOICESTATUS_VOICEOFF)

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00048	81 e2 00 80 00
	00		 and	 edx, 32768		; 00008000H
  0004e	85 d2		 test	 edx, edx
  00050	0f 84 2e 02 00
	00		 je	 $L36303

; 2193 :         {
; 2194 :             if(!g_fDirectSoundDisableBusyWaitWarning)

  00056	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundDisableBusyWaitWarning, 0
  0005d	0f 85 06 02 00
	00		 jne	 $L36324

; 2195 :             {
; 2196 :                 DPF_WARNING("Busy-waiting for the voice to turn off");

  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  0006d	68 94 08 00 00	 push	 2196			; 00000894H
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00077	6a 03		 push	 3
  00079	6a 09		 push	 9
  0007b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00080	83 c4 18	 add	 esp, 24			; 00000018H
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@GELHBDFO@Busy?9waiting?5for?5the?5voice?5to?5tu@
  00088	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008d	83 c4 04	 add	 esp, 4

; 2197 : 
; 2198 :                 if(!fExplained)

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fExplained@?1??WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ@4HA, 0
  00097	0f 85 cc 01 00
	00		 jne	 $L36324

; 2199 :                 {
; 2200 :                     DPF_WARNING("This warning is being generated because you've called a method that requires");

  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  000a7	68 98 08 00 00	 push	 2200			; 00000898H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000b1	6a 03		 push	 3
  000b3	6a 09		 push	 9
  000b5	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ba	83 c4 18	 add	 esp, 24			; 00000018H
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EN@NPBPONNE@This?5warning?5is?5being?5generated?5@
  000c2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000c7	83 c4 04	 add	 esp, 4

; 2201 :                     DPF_WARNING("a hardware voice to be stopped.  Stopping a voice is an asynchronous");

  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  000d4	68 99 08 00 00	 push	 2201			; 00000899H
  000d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000de	6a 03		 push	 3
  000e0	6a 09		 push	 9
  000e2	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e7	83 c4 18	 add	 esp, 24			; 00000018H
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EF@OJCILPFM@a?5hardware?5voice?5to?5be?5stopped?4?5@
  000ef	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f4	83 c4 04	 add	 esp, 4

; 2202 :                     DPF_WARNING("operation, so any function that requires the voice to be stopped must block");

  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  00101	68 9a 08 00 00	 push	 2202			; 0000089aH
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0010b	6a 03		 push	 3
  0010d	6a 09		 push	 9
  0010f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00114	83 c4 18	 add	 esp, 24			; 00000018H
  00117	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@OOPIPDLA@operation?0?5so?5any?5function?5that?5@
  0011c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00121	83 c4 04	 add	 esp, 4

; 2203 :                     DPF_WARNING("until it is.  To see an example of this, call IDirectSoundBuffer::Stop and");

  00124	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00129	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  0012e	68 9b 08 00 00	 push	 2203			; 0000089bH
  00133	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00138	6a 03		 push	 3
  0013a	6a 09		 push	 9
  0013c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00141	83 c4 18	 add	 esp, 24			; 00000018H
  00144	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EL@JCEFBPFB@until?5it?5is?4?5?5To?5see?5an?5example?5@
  00149	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0014e	83 c4 04	 add	 esp, 4

; 2204 :                     DPF_WARNING("immediately follow it with a call to IDirectSoundBuffer::GetStatus.  Chances");

  00151	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  0015b	68 9c 08 00 00	 push	 2204			; 0000089cH
  00160	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00165	6a 03		 push	 3
  00167	6a 09		 push	 9
  00169	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0016e	83 c4 18	 add	 esp, 24			; 00000018H
  00171	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EN@JANHIGAO@immediately?5follow?5it?5with?5a?5cal@
  00176	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017b	83 c4 04	 add	 esp, 4

; 2205 :                     DPF_WARNING("are, you'll see that DSBSTATUS_PLAYING is still set.  For a list of methods");

  0017e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00183	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  00188	68 9d 08 00 00	 push	 2205			; 0000089dH
  0018d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00192	6a 03		 push	 3
  00194	6a 09		 push	 9
  00196	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
  0019e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@KMADEABL@are?0?5you?8ll?5see?5that?5DSBSTATUS_P@
  001a3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a8	83 c4 04	 add	 esp, 4

; 2206 :                     DPF_WARNING("that can potentially block in this method, consult the documentation.  To");

  001ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  001b5	68 9e 08 00 00	 push	 2206			; 0000089eH
  001ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001bf	6a 03		 push	 3
  001c1	6a 09		 push	 9
  001c3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001c8	83 c4 18	 add	 esp, 24			; 00000018H
  001cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EK@KLDALOHL@that?5can?5potentially?5block?5in?5th@
  001d0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001d5	83 c4 04	 add	 esp, 4

; 2207 :                     DPF_WARNING("query the playing status of a buffer or stream, call the GetStatus method on");

  001d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  001e2	68 9f 08 00 00	 push	 2207			; 0000089fH
  001e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001ec	6a 03		 push	 3
  001ee	6a 09		 push	 9
  001f0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001f5	83 c4 18	 add	 esp, 24			; 00000018H
  001f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EN@EEEIHDP@query?5the?5playing?5status?5of?5a?5bu@
  001fd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00202	83 c4 04	 add	 esp, 4

; 2208 :                     DPF_WARNING("the object you wish to check.  To disable this warning, set the global");

  00205	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0020a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  0020f	68 a0 08 00 00	 push	 2208			; 000008a0H
  00214	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00219	6a 03		 push	 3
  0021b	6a 09		 push	 9
  0021d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00222	83 c4 18	 add	 esp, 24			; 00000018H
  00225	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@GEIEDGIP@the?5object?5you?5wish?5to?5check?4?5?5T@
  0022a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0022f	83 c4 04	 add	 esp, 4

; 2209 :                     DPF_WARNING("variable \"g_fDirectSoundDisableBusyWaitWarning\" to TRUE.");

  00232	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00237	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BCJBIGDM@CMcpxVoiceClient?3?3WaitForVoiceOf@
  0023c	68 a1 08 00 00	 push	 2209			; 000008a1H
  00241	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00246	6a 03		 push	 3
  00248	6a 09		 push	 9
  0024a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0024f	83 c4 18	 add	 esp, 24			; 00000018H
  00252	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@DHOOJBPK@variable?5?$CCg_fDirectSoundDisableB@
  00257	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0025c	83 c4 04	 add	 esp, 4

; 2210 : 
; 2211 :                     fExplained = TRUE;

  0025f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?fExplained@?1??WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ@4HA, 1
$L36324:

; 2212 :                 }
; 2213 :             }
; 2214 : 
; 2215 : #endif // DEBUG
; 2216 :         
; 2217 :             while(m_dwStatus & MCPX_VOICESTATUS_VOICEOFF)

  00269	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026c	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00270	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00276	85 c9		 test	 ecx, ecx
  00278	74 0a		 je	 SHORT $L36303

; 2218 :             {
; 2219 :                 CheckStuckVoice();

  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0027d	e8 00 00 00 00	 call	 ?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::CheckStuckVoice

; 2220 :             }

  00282	eb e5		 jmp	 SHORT $L36324
$L36303:

; 2221 : 
; 2222 : #ifdef DEBUG
; 2223 : 
; 2224 :         }
; 2225 : 
; 2226 : #endif // DEBUG
; 2227 : 
; 2228 :     }
; 2229 : 
; 2230 :     DPF_LEAVE_VOID();
; 2231 : }

  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c3		 ret	 0
?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff
DSOUND	ENDS
PUBLIC	??_C@_0BB@EILNFPMP@m_rtVoiceOff?5?$DO?50?$AA@	; `string'
PUBLIC	??_C@_0BO@LMDDGLKA@?$CBm_pMcpxApu?9?$DOm_dwVoiceMapLock?$AA@ ; `string'
PUBLIC	??_C@_0CC@NBHAPEBK@CMcpxVoiceClient?3?3CheckStuckVoic@ ; `string'
PUBLIC	??_C@_0DO@MHMKIJEI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5appears?5to?5be?5stuc@ ; `string'
;	COMDAT ??_C@_0BB@EILNFPMP@m_rtVoiceOff?5?$DO?50?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@EILNFPMP@m_rtVoiceOff?5?$DO?50?$AA@ DB 'm_rtVoiceOff > 0', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@LMDDGLKA@?$CBm_pMcpxApu?9?$DOm_dwVoiceMapLock?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@LMDDGLKA@?$CBm_pMcpxApu?9?$DOm_dwVoiceMapLock?$AA@ DB '!m_pMcpx'
	DB	'Apu->m_dwVoiceMapLock', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@NBHAPEBK@CMcpxVoiceClient?3?3CheckStuckVoic@
DSOUND_RD	SEGMENT
??_C@_0CC@NBHAPEBK@CMcpxVoiceClient?3?3CheckStuckVoic@ DB 'CMcpxVoiceClie'
	DB	'nt::CheckStuckVoice', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@MHMKIJEI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5appears?5to?5be?5stuc@
DSOUND_RD	SEGMENT
??_C@_0DO@MHMKIJEI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5appears?5to?5be?5stuc@ DB 'V'
	DB	'oice %x (%x) appears to be stuck.  Forcing it to turn off...', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT
tv157 = -28
tv73 = -20
tv140 = -16
_this$ = -12
_rtCurrent$ = -8
?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::CheckStuckVoice, COMDAT
; _this$ = ecx

; 2258 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2259 : 
; 2260 : #ifdef MCPX_DEBUG_STUCK_VOICES
; 2261 : 
; 2262 :     static const REFERENCE_TIME rtTimeout   = 5000i64 * 10000i64;  // 5000ms
; 2263 : 
; 2264 : #else // MCPX_DEBUG_STUCK_VOICES
; 2265 : 
; 2266 :     static const REFERENCE_TIME rtTimeout   = 500i64 * 10000i64;   // 500ms
; 2267 : 
; 2268 : #endif // MCPX_DEBUG_STUCK_VOICES
; 2269 : 
; 2270 :     REFERENCE_TIME              rtCurrent;
; 2271 :     
; 2272 :     DPF_ENTER();
; 2273 : 
; 2274 :     if((m_dwStatus & MCPX_VOICESTATUS_VOICEOFFMASK) == MCPX_VOICESTATUS_VOICEOFFMASK)

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00010	81 e1 01 80 00
	00		 and	 ecx, 32769		; 00008001H
  00016	81 f9 01 80 00
	00		 cmp	 ecx, 32769		; 00008001H
  0001c	0f 85 f2 00 00
	00		 jne	 $L36333

; 2275 :     {
; 2276 :         //
; 2277 :         // We're still waiting for the voice to turn off.  Check to see how
; 2278 :         // long it's been since we called VoiceOff.
; 2279 :         //
; 2280 :         
; 2281 :         ASSERT(m_rtVoiceOff > 0);

  00022	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00025	89 55 f0	 mov	 DWORD PTR tv140[ebp], edx
  00028	8b 45 f0	 mov	 eax, DWORD PTR tv140[ebp]
  0002b	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00032	7f 17		 jg	 SHORT $L37370
  00034	7c 0c		 jl	 SHORT $L37372
  00036	8b 4d f0	 mov	 ecx, DWORD PTR tv140[ebp]
  00039	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [ecx+128], 0
  00040	77 09		 ja	 SHORT $L37370
$L37372:
  00042	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00049	eb 07		 jmp	 SHORT $L37371
$L37370:
  0004b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L37371:
  00052	68 e9 08 00 00	 push	 2281			; 000008e9H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EILNFPMP@m_rtVoiceOff?5?$DO?50?$AA@
  00061	8b 55 ec	 mov	 edx, DWORD PTR tv73[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0006a	83 c4 10	 add	 esp, 16			; 00000010H

; 2282 :         ASSERT(!m_pMcpxApu->m_dwVoiceMapLock);

  0006d	68 ea 08 00 00	 push	 2282			; 000008eaH
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LMDDGLKA@?$CBm_pMcpxApu?9?$DOm_dwVoiceMapLock?$AA@
  0007c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00082	33 d2		 xor	 edx, edx
  00084	83 b9 2c 03 00
	00 00		 cmp	 DWORD PTR [ecx+812], 0
  0008b	0f 95 c2	 setne	 dl
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00094	83 c4 10	 add	 esp, 16			; 00000010H

; 2283 :         
; 2284 :         KeQuerySystemTime((PLARGE_INTEGER)&rtCurrent);

  00097	8d 45 f8	 lea	 eax, DWORD PTR _rtCurrent$[ebp]
  0009a	50		 push	 eax
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 2285 : 
; 2286 :         if(rtCurrent >= m_rtVoiceOff + rtTimeout)

  000a1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	8b 91 80 00 00
	00		 mov	 edx, DWORD PTR [ecx+128]
  000aa	81 c2 80 f0 fa
	02		 add	 edx, 50000000		; 02faf080H
  000b0	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  000b6	83 d0 00	 adc	 eax, 0
  000b9	89 55 e4	 mov	 DWORD PTR tv157[ebp], edx
  000bc	89 45 e8	 mov	 DWORD PTR tv157[ebp+4], eax
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _rtCurrent$[ebp+4]
  000c2	3b 4d e8	 cmp	 ecx, DWORD PTR tv157[ebp+4]
  000c5	7c 4b		 jl	 SHORT $L36337
  000c7	7f 08		 jg	 SHORT $L37373
  000c9	8b 55 f8	 mov	 edx, DWORD PTR _rtCurrent$[ebp]
  000cc	3b 55 e4	 cmp	 edx, DWORD PTR tv157[ebp]
  000cf	72 41		 jb	 SHORT $L36337
$L37373:

; 2287 :         {
; 2288 :             DPF_WARNING("Voice %x (%x) appears to be stuck.  Forcing it to turn off...", this, m_ahVoices[0]);

  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@NBHAPEBK@CMcpxVoiceClient?3?3CheckStuckVoic@
  000db	68 f0 08 00 00	 push	 2288			; 000008f0H
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000e5	6a 03		 push	 3
  000e7	6a 09		 push	 9
  000e9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ee	83 c4 18	 add	 esp, 24			; 00000018H
  000f1	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000f8	51		 push	 ecx
  000f9	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000fc	52		 push	 edx
  000fd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@MHMKIJEI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5appears?5to?5be?5stuc@
  00102	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2289 : 
; 2290 :             RemoveStuckVoice();

  0010a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	e8 00 00 00 00	 call	 ?RemoveStuckVoice@CMcpxVoiceClient@DirectSound@@AAEXXZ ; DirectSound::CMcpxVoiceClient::RemoveStuckVoice
$L36337:

; 2291 :         }
; 2292 :     }
; 2293 :     else

  00112	eb 0d		 jmp	 SHORT $L36329
$L36333:

; 2294 :     {
; 2295 :         //
; 2296 :         // The voice is turned off.  Make sure the CHECKSTUCK deferred
; 2297 :         // command is removed from the queue.
; 2298 :         //
; 2299 :         
; 2300 :         RemoveDeferredCommand(MCPX_DEFERREDCMD_VOICE_CHECKSTUCK);

  00114	6a 00		 push	 0
  00116	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00119	8b 10		 mov	 edx, DWORD PTR [eax]
  0011b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0011e	ff 52 1c	 call	 DWORD PTR [edx+28]
$L36329:

; 2301 :     }
; 2302 : 
; 2303 :     DPF_LEAVE_VOID();
; 2304 : }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c3		 ret	 0
?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxVoiceClient::CheckStuckVoice
DSOUND	ENDS
PUBLIC	?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z ; DirectSound::CMcpxVoiceClient::PauseVoice
PUBLIC	??_C@_0CO@NANHPLEK@?$CI1?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
PUBLIC	??_C@_0BN@BCHFCAKF@CMcpxVoiceClient?3?3PauseVoice?$AA@ ; `string'
PUBLIC	??_C@_0CO@EBEJKDNP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5pause?5state?5going?5@ ; `string'
;	COMDAT ??_C@_0CO@NANHPLEK@?$CI1?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@NANHPLEK@?$CI1?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'1 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@BCHFCAKF@CMcpxVoiceClient?3?3PauseVoice?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@BCHFCAKF@CMcpxVoiceClient?3?3PauseVoice?$AA@ DB 'CMcpxVoiceClie'
	DB	'nt::PauseVoice', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@EBEJKDNP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5pause?5state?5going?5@
DSOUND_RD	SEGMENT
??_C@_0CO@EBEJKDNP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5pause?5state?5going?5@ DB 'V'
	DB	'oice %x (%x) pause state going from %x to %x', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z
DSOUND	SEGMENT
_this$ = -20
___AutoIrql$ = -16
_dwRegisterValue$ = -8
_i$ = -4
_dwStatus$ = 8
?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::PauseVoice, COMDAT
; _this$ = ecx

; 2330 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2331 :     DWORD                   dwRegisterValue;
; 2332 :     DWORD                   i;
; 2333 :     
; 2334 :     DPF_ENTER();
; 2335 :     AutoIrql();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2336 : 
; 2337 :     dwStatus &= MCPX_VOICESTATUS_ALLPAUSEDMASK;

  00011	8b 45 08	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00014	25 04 04 00 00	 and	 eax, 1028		; 00000404H
  00019	89 45 08	 mov	 DWORD PTR _dwStatus$[ebp], eax

; 2338 : 
; 2339 :     //
; 2340 :     // Pause or resume the voice
; 2341 :     //
; 2342 : 
; 2343 :     if(MAKEBOOL(dwStatus) != MAKEBOOL(m_dwStatus & MCPX_VOICESTATUS_ALLPAUSEDMASK))

  0001c	33 c9		 xor	 ecx, ecx
  0001e	83 7d 08 00	 cmp	 DWORD PTR _dwStatus$[ebp], 0
  00022	0f 95 c1	 setne	 cl
  00025	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00028	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  0002c	25 04 04 00 00	 and	 eax, 1028		; 00000404H
  00031	f7 d8		 neg	 eax
  00033	1b c0		 sbb	 eax, eax
  00035	f7 d8		 neg	 eax
  00037	3b c8		 cmp	 ecx, eax
  00039	0f 84 24 01 00
	00		 je	 $L36348

; 2344 :     {
; 2345 :         if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  0003f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00046	83 e2 03	 and	 edx, 3
  00049	83 fa 03	 cmp	 edx, 3
  0004c	0f 85 c6 00 00
	00		 jne	 $L36349

; 2346 :         {
; 2347 :             if(dwStatus)

  00052	83 7d 08 00	 cmp	 DWORD PTR _dwStatus$[ebp], 0
  00056	74 09		 je	 SHORT $L36350

; 2348 :             {
; 2349 :                 dwRegisterValue = MCPX_MAKE_REG_VALUE(NV1BA0_PIO_VOICE_PAUSE_ACTION_STOP, NV1BA0_PIO_VOICE_PAUSE_ACTION);

  00058	c7 45 f8 00 00
	04 00		 mov	 DWORD PTR _dwRegisterValue$[ebp], 262144 ; 00040000H

; 2350 :             }
; 2351 :             else

  0005f	eb 07		 jmp	 SHORT $L36352
$L36350:

; 2352 :             {
; 2353 :                 dwRegisterValue = MCPX_MAKE_REG_VALUE(NV1BA0_PIO_VOICE_PAUSE_ACTION_RESUME, NV1BA0_PIO_VOICE_PAUSE_ACTION);

  00061	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwRegisterValue$[ebp], 0
$L36352:

; 2354 :             }
; 2355 : 
; 2356 :             MCPX_CHECK_VOICE_FIFO(1 * m_bVoiceCount);

  00068	68 34 09 00 00	 push	 2356			; 00000934H
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00077	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0007c	0f b6 c0	 movzx	 eax, al
  0007f	33 c9		 xor	 ecx, ecx
  00081	83 f8 02	 cmp	 eax, 2
  00084	0f 95 c1	 setne	 cl
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0008d	83 c4 10	 add	 esp, 16			; 00000010H
  00090	68 34 09 00 00	 push	 2356			; 00000934H
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@NANHPLEK@?$CI1?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  0009f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  000a6	33 c9		 xor	 ecx, ecx
  000a8	83 f8 20	 cmp	 eax, 32			; 00000020H
  000ab	0f 9f c1	 setg	 cl
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b4	83 c4 10	 add	 esp, 16			; 00000010H
$L36356:
  000b7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000bc	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  000c2	c1 e8 02	 shr	 eax, 2
  000c5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  000cc	3b c2		 cmp	 eax, edx
  000ce	73 02		 jae	 SHORT $L36357
  000d0	eb e5		 jmp	 SHORT $L36356
$L36357:

; 2357 :             
; 2358 :             for(i = 0; i < m_bVoiceCount; i++)

  000d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000d9	eb 09		 jmp	 SHORT $L36360
$L36361:
  000db	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000de	83 c0 01	 add	 eax, 1
  000e1	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36360:
  000e4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  000eb	39 55 fc	 cmp	 DWORD PTR _i$[ebp], edx
  000ee	73 28		 jae	 SHORT $L36349

; 2359 :             {
; 2360 :                 MCPX_VOICE_WRITE(VoicePause, MCPX_SET_REG_VALUE(dwRegisterValue, m_ahVoices[i], NV1BA0_PIO_VOICE_PAUSE_HANDLE));

  000f0	8b 45 f8	 mov	 eax, DWORD PTR _dwRegisterValue$[ebp]
  000f3	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000fb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	0f b7 4c 4a 0c	 movzx	 ecx, WORD PTR [edx+ecx*2+12]
  00103	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00109	0b c1		 or	 eax, ecx
  0010b	ba 40 01 00 00	 mov	 edx, 320		; 00000140H
  00110	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 2361 :             }

  00116	eb c3		 jmp	 SHORT $L36361
$L36349:

; 2362 :         }
; 2363 : 
; 2364 :         DPF_INFO("Voice %x (%x) pause state going from %x to %x", this, m_ahVoices[0], m_dwStatus & MCPX_VOICESTATUS_ALLPAUSEDMASK, dwStatus);

  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0011d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BCHFCAKF@CMcpxVoiceClient?3?3PauseVoice?$AA@
  00122	68 3c 09 00 00	 push	 2364			; 0000093cH
  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0012c	6a 04		 push	 4
  0012e	6a 09		 push	 9
  00130	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00135	83 c4 18	 add	 esp, 24			; 00000018H
  00138	8b 45 08	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00143	81 e2 04 04 00
	00		 and	 edx, 1028		; 00000404H
  00149	52		 push	 edx
  0014a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00151	51		 push	 ecx
  00152	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00155	52		 push	 edx
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EBEJKDNP@Voice?5?$CFx?5?$CI?$CFx?$CJ?5pause?5state?5going?5@
  0015b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00160	83 c4 14	 add	 esp, 20			; 00000014H
$L36348:

; 2365 :     }
; 2366 : 
; 2367 :     //
; 2368 :     // Update the status
; 2369 :     //
; 2370 : 
; 2371 :     and(&m_dwStatus, ~MCPX_VOICESTATUS_ALLPAUSEDMASK);

  00163	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00166	83 c1 12	 add	 ecx, 18			; 00000012H
  00169	ba fb fb 00 00	 mov	 edx, 64507		; 0000fbfbH
  0016e	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and

; 2372 :     or(&m_dwStatus, (WORD)dwStatus);

  00173	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	83 c1 12	 add	 ecx, 18			; 00000012H
  00179	8b 55 08	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  0017c	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 2373 : 
; 2374 :     DPF_LEAVE_VOID();
; 2375 : }

  00181	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00184	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c2 04 00	 ret	 4
?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z ENDP	; DirectSound::CMcpxVoiceClient::PauseVoice
DSOUND	ENDS
PUBLIC	?Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z ; DirectSound::CMcpxVoiceClient::Apply3dSettings
PUBLIC	??_C@_0CI@IMCHFDDO@m_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAPS@ ; `string'
PUBLIC	??_C@_0P@KNAGEJEI@m_pI3dl2Source?$AA@		; `string'
PUBLIC	??0CAutoFpState@DirectSound@@QAE@XZ		; DirectSound::CAutoFpState::CAutoFpState
PUBLIC	??1CAutoFpState@DirectSound@@QAE@XZ		; DirectSound::CAutoFpState::~CAutoFpState
EXTRN	__fltused:NEAR
EXTRN	?Calculate3d@CHrtfSource@DirectSound@@QAEXK@Z:NEAR ; DirectSound::CHrtfSource::Calculate3d
EXTRN	?CalculateI3dl2@CI3dl2Source@DirectSound@@QAEXM@Z:NEAR ; DirectSound::CI3dl2Source::CalculateI3dl2
;	COMDAT ??_C@_0CI@IMCHFDDO@m_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAPS@
DSOUND_RD	SEGMENT
??_C@_0CI@IMCHFDDO@m_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAPS@ DB 'm_pSett'
	DB	'ings->m_dwFlags & DSBCAPS_CTRL3D', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@KNAGEJEI@m_pI3dl2Source?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@KNAGEJEI@m_pI3dl2Source?$AA@ DB 'm_pI3dl2Source', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ
DSOUND	SEGMENT
_this$ = -28
$T37380 = -24
_dwI3dl2ChangeMask$ = -20
___AutoFpState$ = -13
_dwParameterMask$ = -12
_dwMixBinChangeMask$ = -8
_dw3dChangeMask$ = -4
?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::Commit3dSettings, COMDAT
; _this$ = ecx

; 2403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 2404 :     DWORD                   dwParameterMask     = 0;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwParameterMask$[ebp], 0

; 2405 :     DWORD                   dw3dChangeMask;
; 2406 :     DWORD                   dwMixBinChangeMask;
; 2407 :     DWORD                   dwI3dl2ChangeMask;
; 2408 : 
; 2409 :     DPF_ENTER();
; 2410 :     AutoFpState();

  00010	8d 4d f3	 lea	 ecx, DWORD PTR ___AutoFpState$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoFpState@DirectSound@@QAE@XZ ; DirectSound::CAutoFpState::CAutoFpState

; 2411 : 
; 2412 :     ASSERT(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D);

  00018	68 6c 09 00 00	 push	 2412			; 0000096cH
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@IMCHFDDO@m_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAPS@
  00027	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0002d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00030	83 e2 10	 and	 edx, 16			; 00000010H
  00033	f7 da		 neg	 edx
  00035	1b d2		 sbb	 edx, edx
  00037	42		 inc	 edx
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 2413 :     ASSERT(m_pSettings->m_p3dParams);

  00041	68 6d 09 00 00	 push	 2413			; 0000096dH
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
  00050	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00056	33 d2		 xor	 edx, edx
  00058	83 b9 b4 00 00
	00 00		 cmp	 DWORD PTR [ecx+180], 0
  0005f	0f 94 c2	 sete	 dl
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 2414 :     ASSERT(m_pHrtfSource);

  0006b	68 6e 09 00 00	 push	 2414			; 0000096eH
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
  0007a	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	33 c9		 xor	 ecx, ecx
  0007f	83 78 70 00	 cmp	 DWORD PTR [eax+112], 0
  00083	0f 94 c1	 sete	 cl
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0008c	83 c4 10	 add	 esp, 16			; 00000010H

; 2415 :     ASSERT(m_pI3dl2Source);

  0008f	68 6f 09 00 00	 push	 2415			; 0000096fH
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@KNAGEJEI@m_pI3dl2Source?$AA@
  0009e	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	33 c0		 xor	 eax, eax
  000a3	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  000a7	0f 94 c0	 sete	 al
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b0	83 c4 10	 add	 esp, 16			; 00000010H

; 2416 : 
; 2417 :     //
; 2418 :     // If the voice isn't active, don't bother doing the recalc yet.  We'll
; 2419 :     // do it when the voice is activated.
; 2420 :     //
; 2421 :     
; 2422 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  000b3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  000ba	83 e2 03	 and	 edx, 3
  000bd	83 fa 03	 cmp	 edx, 3
  000c0	0f 85 3a 01 00
	00		 jne	 $L36380

; 2423 :     {
; 2424 :         //
; 2425 :         // If the mode changed at all, a position recalculation is required.
; 2426 :         // This is because any change from NORMAL to HEADRELATIVE requires
; 2427 :         // the position recalc, but since you could go from NORMAL to 
; 2428 :         // DISABLED to HEADRELATIVE, we'll just take the hit.
; 2429 :         //
; 2430 :         // If we went from ENABLED to DISABLED, we don't actually want to
; 2431 :         // recalculate anything yet, but we do have to reset everything 3D
; 2432 :         // affects.
; 2433 :         //
; 2434 :         // If not, we'll go ahead and recalculate and reset the parameter
; 2435 :         // mask.  Because changing the mode to DISABLED doesn't clear the
; 2436 :         // parameter mask, any remaining changes will be recalculated and
; 2437 :         // applied now.
; 2438 :         //
; 2439 : 
; 2440 :         dw3dChangeMask = 0;

  000c6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dw3dChangeMask$[ebp], 0

; 2441 :         dwMixBinChangeMask = 0;

  000cd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwMixBinChangeMask$[ebp], 0

; 2442 :         dwI3dl2ChangeMask = 0;

  000d4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwI3dl2ChangeMask$[ebp], 0

; 2443 :         
; 2444 :         if(m_dw3dMode != m_pSettings->m_p3dParams->HrtfParams.dwMode)

  000db	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000de	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  000e1	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000ea	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  000ed	3b 4a 3c	 cmp	 ecx, DWORD PTR [edx+60]
  000f0	74 76		 je	 SHORT $L36381

; 2445 :         {
; 2446 :             if((DS3DMODE_DISABLE == m_pSettings->m_p3dParams->HrtfParams.dwMode) != (DS3DMODE_DISABLE == m_dw3dMode))

  000f2	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  000f8	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000fe	33 d2		 xor	 edx, edx
  00100	83 79 3c 02	 cmp	 DWORD PTR [ecx+60], 2
  00104	0f 94 c2	 sete	 dl
  00107	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	33 c9		 xor	 ecx, ecx
  0010c	83 78 7c 02	 cmp	 DWORD PTR [eax+124], 2
  00110	0f 94 c1	 sete	 cl
  00113	3b d1		 cmp	 edx, ecx
  00115	74 19		 je	 SHORT $L36382

; 2447 :             {
; 2448 :                 dw3dChangeMask |= MCPX_3DAPPLY_MASK;

  00117	8b 55 fc	 mov	 edx, DWORD PTR _dw3dChangeMask$[ebp]
  0011a	83 ca 3f	 or	 edx, 63			; 0000003fH
  0011d	89 55 fc	 mov	 DWORD PTR _dw3dChangeMask$[ebp], edx

; 2449 :                 dwI3dl2ChangeMask |= MCPX_I3DL2APPLY_MASK;

  00120	8b 45 ec	 mov	 eax, DWORD PTR _dwI3dl2ChangeMask$[ebp]
  00123	83 c8 0f	 or	 eax, 15			; 0000000fH
  00126	89 45 ec	 mov	 DWORD PTR _dwI3dl2ChangeMask$[ebp], eax

; 2450 :                 dwMixBinChangeMask |= ~0UL;

  00129	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _dwMixBinChangeMask$[ebp], -1
$L36382:

; 2451 :             }
; 2452 : 
; 2453 :             m_dw3dMode = m_pSettings->m_p3dParams->HrtfParams.dwMode;

  00130	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00136	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0013c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	8b 50 3c	 mov	 edx, DWORD PTR [eax+60]
  00142	89 51 7c	 mov	 DWORD PTR [ecx+124], edx

; 2454 :             m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_POSITION;

  00145	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00148	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0014b	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00151	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00154	0d ff 00 00 00	 or	 eax, 255		; 000000ffH
  00159	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0015f	8b 8a b4 00 00
	00		 mov	 ecx, DWORD PTR [edx+180]
  00165	89 41 78	 mov	 DWORD PTR [ecx+120], eax
$L36381:

; 2455 :         }
; 2456 :         
; 2457 :         //
; 2458 :         // Save a local copy of the parameter mask
; 2459 :         //
; 2460 :         
; 2461 :         dwParameterMask |= m_pSettings->m_p3dParams->dwParameterMask;

  00168	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0016b	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0016e	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00174	8b 55 f4	 mov	 edx, DWORD PTR _dwParameterMask$[ebp]
  00177	0b 51 78	 or	 edx, DWORD PTR [ecx+120]
  0017a	89 55 f4	 mov	 DWORD PTR _dwParameterMask$[ebp], edx

; 2462 : 
; 2463 :         //
; 2464 :         // Recalculate and check for changes that need to be applied
; 2465 :         //
; 2466 : 
; 2467 :         if(DS3DMODE_DISABLE != m_pSettings->m_p3dParams->HrtfParams.dwMode)

  0017d	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00180	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00183	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00189	83 7a 3c 02	 cmp	 DWORD PTR [edx+60], 2
  0018d	74 5d		 je	 SHORT $L36383

; 2468 :         {
; 2469 :             m_pHrtfSource->Calculate3d(dwParameterMask);

  0018f	8b 45 f4	 mov	 eax, DWORD PTR _dwParameterMask$[ebp]
  00192	50		 push	 eax
  00193	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00199	e8 00 00 00 00	 call	 ?Calculate3d@CHrtfSource@DirectSound@@QAEXK@Z ; DirectSound::CHrtfSource::Calculate3d

; 2470 : 
; 2471 :             dw3dChangeMask |= m_pHrtfSource->m_3dVoiceData.dwChangeMask;

  0019e	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  001a1	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  001a4	8b 4d fc	 mov	 ecx, DWORD PTR _dw3dChangeMask$[ebp]
  001a7	0b 48 1c	 or	 ecx, DWORD PTR [eax+28]
  001aa	89 4d fc	 mov	 DWORD PTR _dw3dChangeMask$[ebp], ecx

; 2472 :             dwMixBinChangeMask |= m_pHrtfSource->m_3dVoiceData.dwMixBinChangeMask;

  001ad	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  001b0	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  001b3	8b 4d f8	 mov	 ecx, DWORD PTR _dwMixBinChangeMask$[ebp]
  001b6	0b 48 24	 or	 ecx, DWORD PTR [eax+36]
  001b9	89 4d f8	 mov	 DWORD PTR _dwMixBinChangeMask$[ebp], ecx

; 2473 : 
; 2474 :             if(dwParameterMask & DS3DPARAM_BUFFER_I3DL2)

  001bc	8b 55 f4	 mov	 edx, DWORD PTR _dwParameterMask$[ebp]
  001bf	81 e2 80 00 00
	00		 and	 edx, 128		; 00000080H
  001c5	85 d2		 test	 edx, edx
  001c7	74 23		 je	 SHORT $L36383

; 2475 :             {
; 2476 :                 m_pI3dl2Source->CalculateI3dl2(m_pHrtfSource->m_3dData.flMagPos);

  001c9	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  001cc	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  001cf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001d2	52		 push	 edx
  001d3	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  001d6	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001d9	e8 00 00 00 00	 call	 ?CalculateI3dl2@CI3dl2Source@DirectSound@@QAEXM@Z ; DirectSound::CI3dl2Source::CalculateI3dl2

; 2477 : 
; 2478 :                 dwI3dl2ChangeMask |= m_pI3dl2Source->m_I3dl2Data.dwChangeMask;

  001de	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001e1	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  001e4	8b 45 ec	 mov	 eax, DWORD PTR _dwI3dl2ChangeMask$[ebp]
  001e7	0b 02		 or	 eax, DWORD PTR [edx]
  001e9	89 45 ec	 mov	 DWORD PTR _dwI3dl2ChangeMask$[ebp], eax
$L36383:

; 2479 :             }
; 2480 :         }
; 2481 : 
; 2482 :         Apply3dSettings(dw3dChangeMask, dwMixBinChangeMask, dwI3dl2ChangeMask);

  001ec	8b 4d ec	 mov	 ecx, DWORD PTR _dwI3dl2ChangeMask$[ebp]
  001ef	51		 push	 ecx
  001f0	8b 55 f8	 mov	 edx, DWORD PTR _dwMixBinChangeMask$[ebp]
  001f3	52		 push	 edx
  001f4	8b 45 fc	 mov	 eax, DWORD PTR _dw3dChangeMask$[ebp]
  001f7	50		 push	 eax
  001f8	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001fb	e8 00 00 00 00	 call	 ?Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z ; DirectSound::CMcpxVoiceClient::Apply3dSettings
$L36380:

; 2483 :     }
; 2484 :     
; 2485 :     DPF_LEAVE(dwParameterMask);
; 2486 : 
; 2487 :     return dwParameterMask;

  00200	8b 4d f4	 mov	 ecx, DWORD PTR _dwParameterMask$[ebp]
  00203	89 4d e8	 mov	 DWORD PTR $T37380[ebp], ecx
  00206	8d 4d f3	 lea	 ecx, DWORD PTR ___AutoFpState$[ebp]
  00209	e8 00 00 00 00	 call	 ??1CAutoFpState@DirectSound@@QAE@XZ ; DirectSound::CAutoFpState::~CAutoFpState
  0020e	8b 45 e8	 mov	 eax, DWORD PTR $T37380[ebp]

; 2488 : }

  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c3		 ret	 0
?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ ENDP ; DirectSound::CMcpxVoiceClient::Commit3dSettings
DSOUND	ENDS
PUBLIC	?Save@CFpState@DirectSound@@QAEXXZ		; DirectSound::CFpState::Save
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??0CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoFpState@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoFpState::CAutoFpState, COMDAT
; _this$ = ecx

; 145  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  :         Save();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Save@CFpState@DirectSound@@QAEXXZ ; DirectSound::CFpState::Save

; 147  :     }

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CAutoFpState@DirectSound@@QAE@XZ ENDP		; DirectSound::CAutoFpState::CAutoFpState
DSOUND	ENDS
EXTRN	__imp__KeSaveFloatingPointState@4:NEAR
EXTRN	?m_dwRefCount@CFpState@DirectSound@@0KA:DWORD	; DirectSound::CFpState::m_dwRefCount
EXTRN	?m_fps@CFpState@DirectSound@@0U_KFLOATING_SAVE@@A:BYTE ; DirectSound::CFpState::m_fps
; Function compile flags: /Odt
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Save@CFpState@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CFpState::Save, COMDAT
; _this$ = ecx

; 108  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  :         if(KeIsExecutingDpc())

  00007	e8 00 00 00 00	 call	 _KeIsExecutingDpc@0
  0000c	85 c0		 test	 eax, eax
  0000e	74 23		 je	 SHORT $L30310

; 110  :         {
; 111  :             if(!m_dwRefCount++)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA ; DirectSound::CFpState::m_dwRefCount
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA ; DirectSound::CFpState::m_dwRefCount
  0001b	83 c1 01	 add	 ecx, 1
  0001e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA, ecx ; DirectSound::CFpState::m_dwRefCount
  00024	85 c0		 test	 eax, eax
  00026	75 0b		 jne	 SHORT $L30310

; 112  :             {
; 113  :                 KeSaveFloatingPointState(&m_fps);

  00028	68 00 00 00 00	 push	 OFFSET FLAT:?m_fps@CFpState@DirectSound@@0U_KFLOATING_SAVE@@A ; DirectSound::CFpState::m_fps
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSaveFloatingPointState@4
$L30310:

; 114  :             }
; 115  :         }
; 116  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Save@CFpState@DirectSound@@QAEXXZ ENDP			; DirectSound::CFpState::Save
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT
_KeIsExecutingDpc@0 PROC NEAR				; COMDAT

; 1524 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1525 : #if defined(_NTSYSTEM_)
; 1526 :     return KeGetCurrentPrcb()->DpcRoutineActive;
; 1527 : #else
; 1528 :     __asm {  mov eax, fs:[0] KPCR.PrcbData.DpcRoutineActive }

  00003	64 a1 58 00 00
	00		 mov	 eax, DWORD PTR fs:88

; 1529 : #endif
; 1530 : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_KeIsExecutingDpc@0 ENDP
DSOUND	ENDS
PUBLIC	?Restore@CFpState@DirectSound@@QAEXXZ		; DirectSound::CFpState::Restore
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??1CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoFpState@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoFpState::~CAutoFpState, COMDAT
; _this$ = ecx

; 150  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 151  :         Restore();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Restore@CFpState@DirectSound@@QAEXXZ ; DirectSound::CFpState::Restore

; 152  :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoFpState@DirectSound@@QAE@XZ ENDP		; DirectSound::CAutoFpState::~CAutoFpState
DSOUND	ENDS
EXTRN	__imp__KeRestoreFloatingPointState@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Restore@CFpState@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CFpState::Restore, COMDAT
; _this$ = ecx

; 119  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  :         if(KeIsExecutingDpc())

  00007	e8 00 00 00 00	 call	 _KeIsExecutingDpc@0
  0000c	85 c0		 test	 eax, eax
  0000e	74 21		 je	 SHORT $L30316

; 121  :         {
; 122  :             if(!--m_dwRefCount)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA ; DirectSound::CFpState::m_dwRefCount
  00015	83 e8 01	 sub	 eax, 1
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA, eax ; DirectSound::CFpState::m_dwRefCount
  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA, 0 ; DirectSound::CFpState::m_dwRefCount
  00024	75 0b		 jne	 SHORT $L30316

; 123  :             {
; 124  :                 KeRestoreFloatingPointState(&m_fps);

  00026	68 00 00 00 00	 push	 OFFSET FLAT:?m_fps@CFpState@DirectSound@@0U_KFLOATING_SAVE@@A ; DirectSound::CFpState::m_fps
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRestoreFloatingPointState@4
$L30316:

; 125  :             }
; 126  :         }
; 127  :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?Restore@CFpState@DirectSound@@QAEXXZ ENDP		; DirectSound::CFpState::Restore
DSOUND	ENDS
PUBLIC	?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z ; DirectSound::CMcpxVoiceClient::SetFilter
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.cpp
;	COMDAT ?Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z
DSOUND	SEGMENT
_this$ = -4
_dw3dChangeMask$ = 8
_dwMixBinChangeMask$ = 12
_dwI3dl2ChangeMask$ = 16
?Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::Apply3dSettings, COMDAT
; _this$ = ecx

; 2520 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2521 :     static const DWORD      dw3dVolumeMask      = MCPX_3DAPPLY_DISTANCEVOLUME | MCPX_3DAPPLY_CONEVOLUME | MCPX_3DAPPLY_FRONTVOLUME | MCPX_3DAPPLY_REARVOLUME;
; 2522 :     static const DWORD      dwI3dl2VolumeMask   = MCPX_I3DL2APPLY_DIRECT | MCPX_I3DL2APPLY_SOURCE;
; 2523 :     static const DWORD      dwPitchMask         = MCPX_3DAPPLY_DOPPLERPITCH;
; 2524 :     static const DWORD      dwHrtfMask          = MCPX_3DAPPLY_FILTERPAIR;
; 2525 :     static const DWORD      dwFilterMask        = MCPX_I3DL2APPLY_DIRECTIIR | MCPX_I3DL2APPLY_REVERBIIR;
; 2526 :     
; 2527 :     DPF_ENTER();
; 2528 : 
; 2529 :     if((dw3dChangeMask & dw3dVolumeMask) || (dwMixBinChangeMask) || (dwI3dl2ChangeMask & dwI3dl2VolumeMask))

  00007	8b 45 08	 mov	 eax, DWORD PTR _dw3dChangeMask$[ebp]
  0000a	83 e0 0f	 and	 eax, 15			; 0000000fH
  0000d	85 c0		 test	 eax, eax
  0000f	75 10		 jne	 SHORT $L36403
  00011	83 7d 0c 00	 cmp	 DWORD PTR _dwMixBinChangeMask$[ebp], 0
  00015	75 0a		 jne	 SHORT $L36403
  00017	8b 4d 10	 mov	 ecx, DWORD PTR _dwI3dl2ChangeMask$[ebp]
  0001a	83 e1 03	 and	 ecx, 3
  0001d	85 c9		 test	 ecx, ecx
  0001f	74 08		 je	 SHORT $L36402
$L36403:

; 2530 :     {
; 2531 :         SetVolume();

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetVolume
$L36402:

; 2532 :     }
; 2533 : 
; 2534 :     if(dw3dChangeMask & dwPitchMask)

  00029	8b 55 08	 mov	 edx, DWORD PTR _dw3dChangeMask$[ebp]
  0002c	83 e2 10	 and	 edx, 16			; 00000010H
  0002f	85 d2		 test	 edx, edx
  00031	74 08		 je	 SHORT $L36404

; 2535 :     {
; 2536 :         SetPitch();

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetPitch
$L36404:

; 2537 :     }
; 2538 :     
; 2539 :     if(dw3dChangeMask & dwHrtfMask)

  0003b	8b 45 08	 mov	 eax, DWORD PTR _dw3dChangeMask$[ebp]
  0003e	83 e0 20	 and	 eax, 32			; 00000020H
  00041	85 c0		 test	 eax, eax
  00043	74 08		 je	 SHORT $L36405

; 2540 :     {
; 2541 :         LoadHrtfFilter();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::LoadHrtfFilter
$L36405:

; 2542 :     }
; 2543 : 
; 2544 :     if(dwI3dl2ChangeMask & dwFilterMask)

  0004d	8b 4d 10	 mov	 ecx, DWORD PTR _dwI3dl2ChangeMask$[ebp]
  00050	83 e1 0c	 and	 ecx, 12			; 0000000cH
  00053	85 c9		 test	 ecx, ecx
  00055	74 0a		 je	 SHORT $L36391

; 2545 :     {
; 2546 :         SetFilter(NULL);

  00057	6a 00		 push	 0
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z ; DirectSound::CMcpxVoiceClient::SetFilter
$L36391:

; 2547 :     }
; 2548 : 
; 2549 :     DPF_LEAVE_VOID();
; 2550 : }

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 0c 00	 ret	 12			; 0000000cH
?Apply3dSettings@CMcpxVoiceClient@DirectSound@@IAEXKKK@Z ENDP ; DirectSound::CMcpxVoiceClient::Apply3dSettings
DSOUND	ENDS
PUBLIC	__real@00000000
PUBLIC	??_C@_0DD@GMNIGPNO@m_bAvailable3dFilter?5?$DM?5MCPX_HW_3@ ; `string'
PUBLIC	??_C@_0IL@OKJLOFJO@?$CI1?5?$CL?5?$CI?$CIsizeof?$CIpFilterPair?9?$DOpLeft@ ; `string'
PUBLIC	??_C@_0BM@NDPCHOOB@?$CIitd?5?$DO?$DN?5?942?$CJ?5?$CG?$CG?5?$CIitd?5?$DM?$DN?542?$CJ?$AA@ ; `string'
;	COMDAT ?DisabledFilterPair@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UHRTFFILTERPAIR@@B
DSOUND_RD	SEGMENT
?DisabledFilterPair@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UHRTFFILTERPAIR@@B DD FLAT:?DisabledFilterData@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UFIRFILTER8@@B ; `DirectSound::CMcpxVoiceClient::LoadHrtfFilter'::`2'::DisabledFilterPair
	DD	FLAT:?DisabledFilterData@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UFIRFILTER8@@B
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@GMNIGPNO@m_bAvailable3dFilter?5?$DM?5MCPX_HW_3@
DSOUND_RD	SEGMENT
??_C@_0DD@GMNIGPNO@m_bAvailable3dFilter?5?$DM?5MCPX_HW_3@ DB 'm_bAvailabl'
	DB	'e3dFilter < MCPX_HW_3DFILTERS_PER_VOICE', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0IL@OKJLOFJO@?$CI1?5?$CL?5?$CI?$CIsizeof?$CIpFilterPair?9?$DOpLeft@
DSOUND_RD	SEGMENT
??_C@_0IL@OKJLOFJO@?$CI1?5?$CL?5?$CI?$CIsizeof?$CIpFilterPair?9?$DOpLeft@ DB '('
	DB	'1 + ((sizeof(pFilterPair->pLeftFilter->Coeff) / sizeof((pFilt'
	DB	'erPair->pLeftFilter->Coeff)[0])) - 1) / 2 + 1 + 2) <= PIO_MET'
	DB	'HOD_QUEUE_CLEAR', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0BM@NDPCHOOB@?$CIitd?5?$DO?$DN?5?942?$CJ?5?$CG?$CG?5?$CIitd?5?$DM?$DN?542?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@NDPCHOOB@?$CIitd?5?$DO?$DN?5?942?$CJ?5?$CG?$CG?5?$CIitd?5?$DM?$DN?542?$CJ?$AA@ DB '('
	DB	'itd >= -42) && (itd <= 42)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ?DisabledFilterData@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UFIRFILTER8@@B
DSOUND_RD	SEGMENT
?DisabledFilterData@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UFIRFILTER8@@B DB 00H ; `DirectSound::CMcpxVoiceClient::LoadHrtfFilter'::`2'::DisabledFilterData
	DB	055H
	DB	055H
	DB	09fH
	DB	022H
	DB	041H
	DB	06H
	DB	0a4H
	DB	011H
	DB	027H
	DB	0aaH
	DB	0b2H
	DB	02dH
	DB	02dH
	DB	09H
	DB	0dH
	DB	092H
	DB	096H
	DB	013H
	DB	0bH
	DB	09bH
	DB	081H
	DB	0dH
	DB	091H
	DB	07H
	DB	016H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	02H
	DB	00H
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ
DSOUND	SEGMENT
tv240 = -40
_this$ = -36
___AutoIrql$ = -32
_pFilterPair$ = -24
_hrirx$ = -20
_dwFilterIndex$ = -16
_hrir$ = -12
_itd$ = -8
_i$ = -4
?LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::LoadHrtfFilter, COMDAT
; _this$ = ecx

; 2580 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 2581 :     static const FIRFILTER8     DisabledFilterData  =
; 2582 :     {
; 2583 :         { 0x00, 0x55, 0x55, 0x9F, 0x22, 0x41, 0x06, 0xA4, 0x11, 0x27, 0xAA, 0xB2, 0x2d, 0x2d, 0x09, 0x0D, 0x92, 0x96, 0x13, 0x0B, 0x9B, 0x81, 0x0D, 0x91, 0x07, 0x16, 0x05, 0x05, 0x06, 0x06, 0x02 },  0    /*  left, #1170 */
; 2584 :     };
; 2585 : 
; 2586 :     static const HRTFFILTERPAIR DisabledFilterPair  =
; 2587 :     {
; 2588 :         &DisabledFilterData,
; 2589 :         &DisabledFilterData
; 2590 :     };
; 2591 : 
; 2592 :     LPCHRTFFILTERPAIR           pFilterPair;
; 2593 :     DWORD                       dwFilterIndex;
; 2594 :     DWORD                       hrir;
; 2595 :     DWORD                       hrirx;
; 2596 :     LONG                        itd;
; 2597 :     DWORD                       i;
; 2598 :     
; 2599 :     DPF_ENTER();
; 2600 :     AutoIrql();

  00009	8d 4d e0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2601 : 
; 2602 :     ASSERT(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  00011	68 2a 0a 00 00	 push	 2602			; 00000a2aH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
  00020	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00027	83 e1 01	 and	 ecx, 1
  0002a	f7 d9		 neg	 ecx
  0002c	1b c9		 sbb	 ecx, ecx
  0002e	41		 inc	 ecx
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 2603 :     ASSERT(m_pSettings->m_p3dParams);

  00038	68 2b 0a 00 00	 push	 2603			; 00000a2bH
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
  00047	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0004d	33 c9		 xor	 ecx, ecx
  0004f	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  00056	0f 94 c1	 sete	 cl
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 2604 :     ASSERT(m_pHrtfSource);

  00062	68 2c 0a 00 00	 push	 2604			; 00000a2cH
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
  00071	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00074	33 c0		 xor	 eax, eax
  00076	83 7a 70 00	 cmp	 DWORD PTR [edx+112], 0
  0007a	0f 94 c0	 sete	 al
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00083	83 c4 10	 add	 esp, 16			; 00000010H

; 2605 : 
; 2606 :     //
; 2607 :     // Get pointers to the HRTF coefficients
; 2608 :     //
; 2609 :     // If we're not 3D or the 3D mode is DISABLED, we'll disable HRTF by
; 2610 :     // loading the coefficients for 0,0 azimuth/elevation.
; 2611 :     //
; 2612 :     // If the HRTF coefficients ever change, the filter pair used here will
; 2613 :     // need to be updated.
; 2614 :     //
; 2615 : 
; 2616 :     if(DS3DMODE_DISABLE == m_pSettings->m_p3dParams->HrtfParams.dwMode)

  00086	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0008c	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00092	83 78 3c 02	 cmp	 DWORD PTR [eax+60], 2
  00096	75 09		 jne	 SHORT $L36422

; 2617 :     {
; 2618 :         pFilterPair = &DisabledFilterPair;

  00098	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pFilterPair$[ebp], OFFSET FLAT:?DisabledFilterPair@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UHRTFFILTERPAIR@@B

; 2619 :     }
; 2620 :     else if(!m_pHrtfSource->m_3dVoiceData.FilterPair.pLeftFilter)

  0009f	eb 36		 jmp	 SHORT $L36423
$L36422:
  000a1	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  000a7	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  000ab	75 09		 jne	 SHORT $L36424

; 2621 :     {
; 2622 :         pFilterPair = &DisabledFilterPair;

  000ad	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pFilterPair$[ebp], OFFSET FLAT:?DisabledFilterPair@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UHRTFFILTERPAIR@@B

; 2623 :     }
; 2624 :     else if(!m_pHrtfSource->m_3dVoiceData.FilterPair.pRightFilter)

  000b4	eb 21		 jmp	 SHORT $L36423
$L36424:
  000b6	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  000bc	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  000c0	75 09		 jne	 SHORT $L36426

; 2625 :     {
; 2626 :         pFilterPair = &DisabledFilterPair;

  000c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pFilterPair$[ebp], OFFSET FLAT:?DisabledFilterPair@?1??LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ@4UHRTFFILTERPAIR@@B

; 2627 :     }
; 2628 :     else

  000c9	eb 0c		 jmp	 SHORT $L36423
$L36426:

; 2629 :     {
; 2630 :         pFilterPair = &m_pHrtfSource->m_3dVoiceData.FilterPair;

  000cb	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  000ce	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  000d1	83 c0 3c	 add	 eax, 60			; 0000003cH
  000d4	89 45 e8	 mov	 DWORD PTR _pFilterPair$[ebp], eax
$L36423:

; 2631 :     }
; 2632 : 
; 2633 :     //
; 2634 :     // Alternate between the 3D filters.  Each 3D voice actually gets 
; 2635 :     // allocated 2 hardware 3D filters.  This way, we can update one of
; 2636 :     // them while the other one is still being processed.  This prevents
; 2637 :     // us from stomping on the filter coefficients while the hardware is
; 2638 :     // in the middle of processing a frame.
; 2639 :     //
; 2640 : 
; 2641 :     ASSERT(m_bAvailable3dFilter < MCPX_HW_3DFILTERS_PER_VOICE);

  000d7	68 51 0a 00 00	 push	 2641			; 00000a51H
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@GMNIGPNO@m_bAvailable3dFilter?5?$DM?5MCPX_HW_3@
  000e6	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	0f b6 51 66	 movzx	 edx, BYTE PTR [ecx+102]
  000ed	33 c0		 xor	 eax, eax
  000ef	83 fa 02	 cmp	 edx, 2
  000f2	0f 9d c0	 setge	 al
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000fb	83 c4 10	 add	 esp, 16			; 00000010H

; 2642 : 
; 2643 :     dwFilterIndex = ((DWORD)m_ahVoices[0] * MCPX_HW_3DFILTERS_PER_VOICE) + m_bAvailable3dFilter;

  000fe	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00105	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00108	0f b6 48 66	 movzx	 ecx, BYTE PTR [eax+102]
  0010c	8d 14 51	 lea	 edx, DWORD PTR [ecx+edx*2]
  0010f	89 55 f0	 mov	 DWORD PTR _dwFilterIndex$[ebp], edx

; 2644 :     m_bAvailable3dFilter = !m_bAvailable3dFilter;

  00112	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00115	0f b6 48 66	 movzx	 ecx, BYTE PTR [eax+102]
  00119	f7 d9		 neg	 ecx
  0011b	1a c9		 sbb	 cl, cl
  0011d	fe c1		 inc	 cl
  0011f	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00122	88 4a 66	 mov	 BYTE PTR [edx+102], cl

; 2645 : 
; 2646 :     //
; 2647 :     // Load the coefficients
; 2648 :     //
; 2649 : 
; 2650 :     MCPX_CHECK_VOICE_FIFO(1 + (NUMELMS(pFilterPair->pLeftFilter->Coeff) - 1) / 2 + 1 + 2);

  00125	68 5a 0a 00 00	 push	 2650			; 00000a5aH
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0012f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00134	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00139	0f b6 c0	 movzx	 eax, al
  0013c	33 c9		 xor	 ecx, ecx
  0013e	83 f8 02	 cmp	 eax, 2
  00141	0f 95 c1	 setne	 cl
  00144	51		 push	 ecx
  00145	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0014a	83 c4 10	 add	 esp, 16			; 00000010H
  0014d	68 5a 0a 00 00	 push	 2650			; 00000a5aH
  00152	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00157	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0IL@OKJLOFJO@?$CI1?5?$CL?5?$CI?$CIsizeof?$CIpFilterPair?9?$DOpLeft@
  0015c	6a 00		 push	 0
  0015e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00163	83 c4 10	 add	 esp, 16			; 00000010H
$L36432:
  00166	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0016b	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  00171	c1 e8 02	 shr	 eax, 2
  00174	83 f8 13	 cmp	 eax, 19			; 00000013H
  00177	73 02		 jae	 SHORT $L36433
  00179	eb eb		 jmp	 SHORT $L36432
$L36433:

; 2651 : 
; 2652 :     MCPX_VOICE_WRITE(SetCurrentHRTFEntry, MCPX_MAKE_REG_VALUE(dwFilterIndex, NV1BA0_PIO_SET_CURRENT_HRTF_ENTRY_HANDLE));

  0017b	8b 4d f0	 mov	 ecx, DWORD PTR _dwFilterIndex$[ebp]
  0017e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00184	ba 60 01 00 00	 mov	 edx, 352		; 00000160H
  00189	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 2653 : 
; 2654 :     for(i = 0; i < (NUMELMS(pFilterPair->pLeftFilter->Coeff) - 1) / 2; i++)

  0018f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00196	eb 09		 jmp	 SHORT $L36439
$L36440:
  00198	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0019b	83 c0 01	 add	 eax, 1
  0019e	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36439:
  001a1	83 7d fc 0f	 cmp	 DWORD PTR _i$[ebp], 15	; 0000000fH
  001a5	0f 83 88 00 00
	00		 jae	 $L36441

; 2655 :     {
; 2656 :         hrir = MCPX_MAKE_REG_VALUE(pFilterPair->pLeftFilter->Coeff[i * 2], NV1BA0_PIO_SET_HRIR_LEFT0);

  001ab	8b 4d e8	 mov	 ecx, DWORD PTR _pFilterPair$[ebp]
  001ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001b3	0f b6 0c 42	 movzx	 ecx, BYTE PTR [edx+eax*2]
  001b7	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001bd	89 4d f4	 mov	 DWORD PTR _hrir$[ebp], ecx

; 2657 :         hrir |= MCPX_MAKE_REG_VALUE(pFilterPair->pRightFilter->Coeff[i * 2], NV1BA0_PIO_SET_HRIR_RIGHT0);

  001c0	8b 55 e8	 mov	 edx, DWORD PTR _pFilterPair$[ebp]
  001c3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001c9	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  001cd	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001d3	c1 e2 08	 shl	 edx, 8
  001d6	8b 45 f4	 mov	 eax, DWORD PTR _hrir$[ebp]
  001d9	0b c2		 or	 eax, edx
  001db	89 45 f4	 mov	 DWORD PTR _hrir$[ebp], eax

; 2658 :         hrir |= MCPX_MAKE_REG_VALUE(pFilterPair->pLeftFilter->Coeff[(i * 2) + 1], NV1BA0_PIO_SET_HRIR_LEFT1);

  001de	8b 4d e8	 mov	 ecx, DWORD PTR _pFilterPair$[ebp]
  001e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e3	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001e6	0f b6 4c 42 01	 movzx	 ecx, BYTE PTR [edx+eax*2+1]
  001eb	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  001f1	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001f4	8b 55 f4	 mov	 edx, DWORD PTR _hrir$[ebp]
  001f7	0b d1		 or	 edx, ecx
  001f9	89 55 f4	 mov	 DWORD PTR _hrir$[ebp], edx

; 2659 :         hrir |= MCPX_MAKE_REG_VALUE(pFilterPair->pRightFilter->Coeff[(i * 2) + 1], NV1BA0_PIO_SET_HRIR_RIGHT1);

  001fc	8b 45 e8	 mov	 eax, DWORD PTR _pFilterPair$[ebp]
  001ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00202	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00205	0f b6 44 51 01	 movzx	 eax, BYTE PTR [ecx+edx*2+1]
  0020a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0020f	c1 e0 18	 shl	 eax, 24			; 00000018H
  00212	8b 4d f4	 mov	 ecx, DWORD PTR _hrir$[ebp]
  00215	0b c8		 or	 ecx, eax
  00217	89 4d f4	 mov	 DWORD PTR _hrir$[ebp], ecx

; 2660 : 
; 2661 :         MCPX_VOICE_WRITE(SetHRIR[i], hrir);

  0021a	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0021f	81 c2 00 00 82
	fe		 add	 edx, -25034752		; fe820000H
  00225	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00228	8b 4d f4	 mov	 ecx, DWORD PTR _hrir$[ebp]
  0022b	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 2662 :     }

  0022e	e9 65 ff ff ff	 jmp	 $L36440
$L36441:

; 2663 : 
; 2664 :     hrirx = MCPX_MAKE_REG_VALUE(pFilterPair->pLeftFilter->Coeff[i * 2], NV1BA0_PIO_SET_HRIR_X_LEFT30);

  00233	8b 55 e8	 mov	 edx, DWORD PTR _pFilterPair$[ebp]
  00236	8b 02		 mov	 eax, DWORD PTR [edx]
  00238	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0023b	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  0023f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00245	89 55 ec	 mov	 DWORD PTR _hrirx$[ebp], edx

; 2665 :     hrirx |= MCPX_MAKE_REG_VALUE(pFilterPair->pRightFilter->Coeff[i * 2], NV1BA0_PIO_SET_HRIR_X_RIGHT30);

  00248	8b 45 e8	 mov	 eax, DWORD PTR _pFilterPair$[ebp]
  0024b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0024e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00251	0f b6 04 51	 movzx	 eax, BYTE PTR [ecx+edx*2]
  00255	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0025a	c1 e0 08	 shl	 eax, 8
  0025d	8b 4d ec	 mov	 ecx, DWORD PTR _hrirx$[ebp]
  00260	0b c8		 or	 ecx, eax
  00262	89 4d ec	 mov	 DWORD PTR _hrirx$[ebp], ecx

; 2666 : 
; 2667 :     //
; 2668 :     // Set filter delay
; 2669 :     //
; 2670 : 
; 2671 :     ASSERT(m_pHrtfSource);

  00265	68 6f 0a 00 00	 push	 2671			; 00000a6fH
  0026a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0026f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@HDKPCPIG@m_pHrtfSource?$AA@
  00274	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00277	33 c0		 xor	 eax, eax
  00279	83 7a 70 00	 cmp	 DWORD PTR [edx+112], 0
  0027d	0f 94 c0	 sete	 al
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00286	83 c4 10	 add	 esp, 16			; 00000010H

; 2672 :     
; 2673 :     if(m_pHrtfSource->m_3dData.flAzimuth >= 0.0f)

  00289	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0028c	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0028f	d9 42 10	 fld	 DWORD PTR [edx+16]
  00292	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00298	df e0		 fnstsw	 ax
  0029a	f6 c4 01	 test	 ah, 1
  0029d	75 0e		 jne	 SHORT $L36450

; 2674 :     {
; 2675 :         itd = (LONG)pFilterPair->pLeftFilter->Delay;

  0029f	8b 45 e8	 mov	 eax, DWORD PTR _pFilterPair$[ebp]
  002a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a4	0f b6 51 1f	 movzx	 edx, BYTE PTR [ecx+31]
  002a8	89 55 f8	 mov	 DWORD PTR _itd$[ebp], edx

; 2676 :     }
; 2677 :     else

  002ab	eb 0f		 jmp	 SHORT $L36452
$L36450:

; 2678 :     {
; 2679 :         itd = -(LONG)pFilterPair->pRightFilter->Delay;

  002ad	8b 45 e8	 mov	 eax, DWORD PTR _pFilterPair$[ebp]
  002b0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002b3	0f b6 51 1f	 movzx	 edx, BYTE PTR [ecx+31]
  002b7	f7 da		 neg	 edx
  002b9	89 55 f8	 mov	 DWORD PTR _itd$[ebp], edx
$L36452:

; 2680 :     }
; 2681 : 
; 2682 :     ASSERT((itd >= -42) && (itd <= 42));

  002bc	83 7d f8 d6	 cmp	 DWORD PTR _itd$[ebp], -42 ; ffffffd6H
  002c0	7c 0f		 jl	 SHORT $L37403
  002c2	83 7d f8 2a	 cmp	 DWORD PTR _itd$[ebp], 42 ; 0000002aH
  002c6	7f 09		 jg	 SHORT $L37403
  002c8	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv240[ebp], 0
  002cf	eb 07		 jmp	 SHORT $L37404
$L37403:
  002d1	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv240[ebp], 1
$L37404:
  002d8	68 7a 0a 00 00	 push	 2682			; 00000a7aH
  002dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  002e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NDPCHOOB@?$CIitd?5?$DO?$DN?5?942?$CJ?5?$CG?$CG?5?$CIitd?5?$DM?$DN?542?$CJ?$AA@
  002e7	8b 45 d8	 mov	 eax, DWORD PTR tv240[ebp]
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002f0	83 c4 10	 add	 esp, 16			; 00000010H

; 2683 : 
; 2684 :     itd <<= 9;

  002f3	8b 4d f8	 mov	 ecx, DWORD PTR _itd$[ebp]
  002f6	c1 e1 09	 shl	 ecx, 9
  002f9	89 4d f8	 mov	 DWORD PTR _itd$[ebp], ecx

; 2685 : 
; 2686 :     itd = MCPX_MAKE_REG_VALUE(itd, NV1BA0_PIO_SET_HRIR_X_ITD);

  002fc	8b 55 f8	 mov	 edx, DWORD PTR _itd$[ebp]
  002ff	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00305	c1 e2 10	 shl	 edx, 16			; 00000010H
  00308	89 55 f8	 mov	 DWORD PTR _itd$[ebp], edx

; 2687 : 
; 2688 :     MCPX_VOICE_WRITE(SetHRIRX, hrirx | itd);

  0030b	8b 45 ec	 mov	 eax, DWORD PTR _hrirx$[ebp]
  0030e	0b 45 f8	 or	 eax, DWORD PTR _itd$[ebp]
  00311	b9 3c 04 00 00	 mov	 ecx, 1084		; 0000043cH
  00316	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 2689 : 
; 2690 :     //
; 2691 :     // Tell the voice to use the coefficient we just loaded
; 2692 :     //
; 2693 : 
; 2694 :     MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[0]);

  0031c	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0031f	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00323	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00328	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 2695 :     MCPX_VOICE_WRITE(SetVoiceTarHRTF, MCPX_MAKE_REG_VALUE(dwFilterIndex, NV1BA0_PIO_SET_VOICE_TAR_HRTF_HANDLE));

  0032e	8b 55 f0	 mov	 edx, DWORD PTR _dwFilterIndex$[ebp]
  00331	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00337	b8 1c 03 00 00	 mov	 eax, 796		; 0000031cH
  0033c	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2696 : 
; 2697 :     DPF_LEAVE_VOID();
; 2698 : }

  00342	8d 4d e0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00345	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0034a	8b e5		 mov	 esp, ebp
  0034c	5d		 pop	 ebp
  0034d	c3		 ret	 0
?LoadHrtfFilter@CMcpxVoiceClient@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxVoiceClient::LoadHrtfFilter
DSOUND	ENDS
PUBLIC	?SetLFO@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSLFODESC@@@Z ; DirectSound::CMcpxVoiceClient::SetLFO
PUBLIC	??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@ ; `string'
;	COMDAT ??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@ DB 'Invalid LFO identifi'
	DB	'er', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetLFO@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT
_this$ = -20
$T37410 = -16
___AutoIrql$ = -12
_i$ = -4
_pLfo$ = 8
?SetLFO@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSLFODESC@@@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::SetLFO, COMDAT
; _this$ = ecx

; 2726 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2727 :     DWORD                   i;
; 2728 :     
; 2729 :     DPF_ENTER();
; 2730 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2731 : 
; 2732 :     //
; 2733 :     // Recalculate register values
; 2734 :     //
; 2735 :     
; 2736 :     if(DSLFO_MULTI == pLfo->dwLFO)

  00011	8b 45 08	 mov	 eax, DWORD PTR _pLfo$[ebp]
  00014	83 38 00	 cmp	 DWORD PTR [eax], 0
  00017	0f 85 d4 00 00
	00		 jne	 $L36469

; 2737 :     {
; 2738 :         m_RegCache.CfgMISC = MCPX_SET_REG_VALUE(m_RegCache.CfgMISC, MAKEBOOL(pLfo->dwDelay), NV1BA0_PIO_SET_VOICE_CFG_MISC_LFOA_DELAYMODE);

  0001d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00023	81 e2 ff bf ff
	ff		 and	 edx, -16385		; ffffbfffH
  00029	8b 45 08	 mov	 eax, DWORD PTR _pLfo$[ebp]
  0002c	33 c9		 xor	 ecx, ecx
  0002e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00032	0f 95 c1	 setne	 cl
  00035	83 e1 01	 and	 ecx, 1
  00038	c1 e1 0e	 shl	 ecx, 14			; 0000000eH
  0003b	0b d1		 or	 edx, ecx
  0003d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00040	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2739 :         
; 2740 :         m_RegCache.CfgLFODLY = MCPX_SET_REG_VALUE(m_RegCache.CfgLFODLY, pLfo->dwDelay, NV1BA0_PIO_SET_VOICE_PAR_LFODLY_LFOADLY);

  00043	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00049	81 e2 00 80 ff
	ff		 and	 edx, -32768		; ffff8000H
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pLfo$[ebp]
  00052	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00055	81 e1 ff 7f 00
	00		 and	 ecx, 32767		; 00007fffH
  0005b	0b d1		 or	 edx, ecx
  0005d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00060	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 2741 :         
; 2742 :         m_RegCache.LFOENV = MCPX_SET_REG_VALUE(m_RegCache.LFOENV, pLfo->dwDelta, NV1BA0_PIO_SET_VOICE_LFO_ENV_LFOADLT);

  00063	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00069	81 e2 ff 0f c0
	ff		 and	 edx, -4190209		; ffc00fffH
  0006f	8b 45 08	 mov	 eax, DWORD PTR _pLfo$[ebp]
  00072	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00075	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  0007b	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  0007e	0b d1		 or	 edx, ecx
  00080	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00083	89 50 30	 mov	 DWORD PTR [eax+48], edx

; 2743 :         
; 2744 :         m_RegCache.LFOMOD = MCPX_SET_REG_VALUE(m_RegCache.LFOMOD, pLfo->lAmplitudeModulation, NV1BA0_PIO_SET_VOICE_LFO_MOD_LFOAAM);

  00086	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0008c	81 e2 00 ff ff
	ff		 and	 edx, -256		; ffffff00H
  00092	8b 45 08	 mov	 eax, DWORD PTR _pLfo$[ebp]
  00095	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00098	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0009e	0b d1		 or	 edx, ecx
  000a0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 2745 :         m_RegCache.LFOMOD = MCPX_SET_REG_VALUE(m_RegCache.LFOMOD, pLfo->lPitchModulation, NV1BA0_PIO_SET_VOICE_LFO_MOD_LFOAFM);

  000a6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000ac	81 e2 ff 00 ff
	ff		 and	 edx, -65281		; ffff00ffH
  000b2	8b 45 08	 mov	 eax, DWORD PTR _pLfo$[ebp]
  000b5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b8	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000be	c1 e1 08	 shl	 ecx, 8
  000c1	0b d1		 or	 edx, ecx
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 2746 :         m_RegCache.LFOMOD = MCPX_SET_REG_VALUE(m_RegCache.LFOMOD, pLfo->lFilterCutOffRange, NV1BA0_PIO_SET_VOICE_LFO_MOD_LFOAFC);

  000c9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  000cf	81 e2 ff ff 00
	ff		 and	 edx, -16711681		; ff00ffffH
  000d5	8b 45 08	 mov	 eax, DWORD PTR _pLfo$[ebp]
  000d8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000db	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000e1	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000e4	0b d1		 or	 edx, ecx
  000e6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 2747 :     }
; 2748 :     else if(DSLFO_PITCH == pLfo->dwLFO)

  000ec	e9 b2 00 00 00	 jmp	 $L36476
$L36469:
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  000f4	83 39 01	 cmp	 DWORD PTR [ecx], 1
  000f7	0f 85 8d 00 00
	00		 jne	 $L36477

; 2749 :     {
; 2750 :         m_RegCache.CfgMISC = MCPX_SET_REG_VALUE(m_RegCache.CfgMISC, MAKEBOOL(pLfo->dwDelay), NV1BA0_PIO_SET_VOICE_CFG_MISC_LFOF_DELAYMODE);

  000fd	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00100	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00103	25 ff 7f ff ff	 and	 eax, -32769		; ffff7fffH
  00108	8b 4d 08	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  0010b	33 d2		 xor	 edx, edx
  0010d	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00111	0f 95 c2	 setne	 dl
  00114	83 e2 01	 and	 edx, 1
  00117	c1 e2 0f	 shl	 edx, 15			; 0000000fH
  0011a	0b c2		 or	 eax, edx
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 2751 :         
; 2752 :         m_RegCache.CfgLFODLY = MCPX_SET_REG_VALUE(m_RegCache.CfgLFODLY, pLfo->dwDelay, NV1BA0_PIO_SET_VOICE_PAR_LFODLY_LFOFDLY);

  00122	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00125	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00128	25 ff ff 00 80	 and	 eax, -2147418113	; 8000ffffH
  0012d	8b 4d 08	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  00130	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00133	81 e2 ff 7f 00
	00		 and	 edx, 32767		; 00007fffH
  00139	c1 e2 10	 shl	 edx, 16			; 00000010H
  0013c	0b c2		 or	 eax, edx
  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 2753 :         
; 2754 :         m_RegCache.LFOENV = MCPX_SET_REG_VALUE(m_RegCache.LFOENV, pLfo->dwDelta, NV1BA0_PIO_SET_VOICE_LFO_ENV_LFOFDLT);

  00144	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00147	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0014a	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  00152	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00155	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  0015b	c1 e2 16	 shl	 edx, 22			; 00000016H
  0015e	0b c2		 or	 eax, edx
  00160	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00163	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 2755 :         
; 2756 :         m_RegCache.LFOMOD = MCPX_SET_REG_VALUE(m_RegCache.LFOMOD, pLfo->lPitchModulation, NV1BA0_PIO_SET_VOICE_LFO_MOD_LFOFFM);

  00166	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00169	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0016c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00171	8b 4d 08	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  00174	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00177	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0017d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00180	0b c2		 or	 eax, edx
  00182	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 2757 :     }
; 2758 :     else

  00188	eb 19		 jmp	 SHORT $L36476
$L36477:

; 2759 :     {
; 2760 :         ASSERTMSG("Invalid LFO identifier");

  0018a	68 c8 0a 00 00	 push	 2760			; 00000ac8H
  0018f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00194	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@
  00199	6a 01		 push	 1
  0019b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001a0	83 c4 10	 add	 esp, 16			; 00000010H
$L36476:

; 2761 :     }
; 2762 : 
; 2763 :     //
; 2764 :     // Apply changes
; 2765 :     //
; 2766 :     
; 2767 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  001a3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001a6	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  001aa	83 e0 01	 and	 eax, 1
  001ad	85 c0		 test	 eax, eax
  001af	0f 84 0b 01 00
	00		 je	 $L36484

; 2768 :     {
; 2769 :         MCPX_CHECK_VOICE_FIFO(7 * m_bVoiceCount);

  001b5	68 d1 0a 00 00	 push	 2769			; 00000ad1H
  001ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  001c4	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  001c9	0f b6 c8	 movzx	 ecx, al
  001cc	33 d2		 xor	 edx, edx
  001ce	83 f9 02	 cmp	 ecx, 2
  001d1	0f 95 c2	 setne	 dl
  001d4	52		 push	 edx
  001d5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001da	83 c4 10	 add	 esp, 16			; 00000010H
  001dd	68 d1 0a 00 00	 push	 2769			; 00000ad1H
  001e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  001e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  001ec	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  001f3	6b c9 07	 imul	 ecx, 7
  001f6	33 d2		 xor	 edx, edx
  001f8	83 f9 20	 cmp	 ecx, 32			; 00000020H
  001fb	0f 9f c2	 setg	 dl
  001fe	52		 push	 edx
  001ff	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00204	83 c4 10	 add	 esp, 16			; 00000010H
$L36486:
  00207	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0020c	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  00212	c1 e9 02	 shr	 ecx, 2
  00215	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00218	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0021c	6b c0 07	 imul	 eax, 7
  0021f	3b c8		 cmp	 ecx, eax
  00221	73 02		 jae	 SHORT $L36487
  00223	eb e2		 jmp	 SHORT $L36486
$L36487:

; 2770 :         
; 2771 :         for(i = 0; i < m_bVoiceCount; i++)

  00225	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0022c	eb 09		 jmp	 SHORT $L36490
$L36491:
  0022e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00231	83 c1 01	 add	 ecx, 1
  00234	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L36490:
  00237	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0023a	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0023e	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00241	73 7d		 jae	 SHORT $L36484

; 2772 :         {
; 2773 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00243	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00246	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00249	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  0024e	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00253	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 2774 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  00259	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  0025e	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1

; 2775 :             MCPX_VOICE_WRITE(SetVoiceCfgMISC, m_RegCache.CfgMISC);

  00268	b8 18 03 00 00	 mov	 eax, 792		; 00000318H
  0026d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00270	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00273	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2776 :             MCPX_VOICE_WRITE(SetVoiceCfgLFODLY, m_RegCache.CfgLFODLY);

  00279	b8 50 03 00 00	 mov	 eax, 848		; 00000350H
  0027e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00281	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00284	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2777 :             MCPX_VOICE_WRITE(SetVoiceLFOENV, m_RegCache.LFOENV);

  0028a	b8 6c 03 00 00	 mov	 eax, 876		; 0000036cH
  0028f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00292	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00295	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2778 :             MCPX_VOICE_WRITE(SetVoiceLFOMOD, m_RegCache.LFOMOD);

  0029b	b8 70 03 00 00	 mov	 eax, 880		; 00000370H
  002a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002a3	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  002a6	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2779 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  002ac	b8 fc 02 00 00	 mov	 eax, 764		; 000002fcH
  002b1	c7 80 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [eax-25034752], 0

; 2780 :         }

  002bb	e9 6e ff ff ff	 jmp	 $L36491
$L36484:

; 2781 :     }
; 2782 : 
; 2783 :     DPF_LEAVE_HRESULT(DS_OK);
; 2784 : 
; 2785 :     return DS_OK;

  002c0	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T37410[ebp], 0
  002c7	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  002ca	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  002cf	8b 45 f0	 mov	 eax, DWORD PTR $T37410[ebp]

; 2786 : }

  002d2	8b e5		 mov	 esp, ebp
  002d4	5d		 pop	 ebp
  002d5	c2 04 00	 ret	 4
?SetLFO@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSLFODESC@@@Z ENDP ; DirectSound::CMcpxVoiceClient::SetLFO
DSOUND	ENDS
PUBLIC	?SetEG@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CMcpxVoiceClient::SetEG
PUBLIC	??_C@_0BG@PBAOCHCM@Invalid?5EG?5identifier?$AA@	; `string'
PUBLIC	??_C@_0CO@MMDBKKON@?$CI9?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
;	COMDAT ??_C@_0BG@PBAOCHCM@Invalid?5EG?5identifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@PBAOCHCM@Invalid?5EG?5identifier?$AA@ DB 'Invalid EG identifier'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@MMDBKKON@?$CI9?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@MMDBKKON@?$CI9?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'9 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEG@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT
_this$ = -20
$T37414 = -16
___AutoIrql$ = -12
_i$ = -4
_pEnv$ = 8
?SetEG@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::SetEG, COMDAT
; _this$ = ecx

; 2812 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2813 :     DWORD                   i;
; 2814 :     
; 2815 :     DPF_ENTER();
; 2816 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2817 : 
; 2818 :     //
; 2819 :     // Recalculate register values
; 2820 :     //
; 2821 :     
; 2822 :     if(DSEG_MULTI == pEnv->dwEG)

  00011	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  00014	83 38 00	 cmp	 DWORD PTR [eax], 0
  00017	0f 85 34 01 00
	00		 jne	 $L36515

; 2823 :     {
; 2824 :         m_RegCache.VoiceOn = MCPX_SET_REG_VALUE(m_RegCache.VoiceOn, pEnv->dwMode, NV1BA0_PIO_VOICE_ON_ENVF);

  0001d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00023	81 e2 ff ff ff
	f0		 and	 edx, -251658241		; f0ffffffH
  00029	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  0002c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002f	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00032	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00035	0b d1		 or	 edx, ecx
  00037	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 2825 :         
; 2826 :         m_RegCache.CfgMISC = MCPX_SET_REG_VALUE(m_RegCache.CfgMISC, pEnv->dwRelease, NV1BA0_PIO_SET_VOICE_CFG_MISC_EF_RELEASERATE);

  0003d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00043	81 e2 00 f0 ff
	ff		 and	 edx, -4096		; fffff000H
  00049	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  0004c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0004f	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00055	0b d1		 or	 edx, ecx
  00057	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 2827 :         
; 2828 :         m_RegCache.CfgENV0 = MCPX_SET_REG_VALUE(m_RegCache.CfgENV0, pEnv->lPitchScale, NV1BA0_PIO_SET_VOICE_CFG_ENV0_EF_PITCHSCALE);

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00063	81 e2 ff ff ff
	00		 and	 edx, 16777215		; 00ffffffH
  00069	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  0006c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0006f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00075	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00078	0b d1		 or	 edx, ecx
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 2829 :         
; 2830 :         m_RegCache.CfgENV1 = MCPX_SET_REG_VALUE(m_RegCache.CfgENV1, pEnv->dwAttack, NV1BA0_PIO_SET_VOICE_CFG_ENV1_EF_ATTACKRATE);

  00080	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00086	81 e2 00 f0 ff
	ff		 and	 edx, -4096		; fffff000H
  0008c	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  0008f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00092	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00098	0b d1		 or	 edx, ecx
  0009a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 2831 :         m_RegCache.CfgENV1 = MCPX_SET_REG_VALUE(m_RegCache.CfgENV1, pEnv->dwDelay, NV1BA0_PIO_SET_VOICE_CFG_ENV1_EF_DELAYTIME);

  000a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a6	81 e2 ff 0f 00
	ff		 and	 edx, -16773121		; ff000fffH
  000ac	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  000af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b2	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  000b8	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  000bb	0b d1		 or	 edx, ecx
  000bd	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 2832 :         m_RegCache.CfgENV1 = MCPX_SET_REG_VALUE(m_RegCache.CfgENV1, pEnv->lFilterCutOff, NV1BA0_PIO_SET_VOICE_CFG_ENV1_EF_FCSCALE);

  000c3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000c9	81 e2 ff ff ff
	00		 and	 edx, 16777215		; 00ffffffH
  000cf	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  000d2	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000d5	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000db	c1 e1 18	 shl	 ecx, 24			; 00000018H
  000de	0b d1		 or	 edx, ecx
  000e0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 2833 :         
; 2834 :         m_RegCache.CfgENVF = MCPX_SET_REG_VALUE(m_RegCache.CfgENVF, pEnv->dwDecay, NV1BA0_PIO_SET_VOICE_CFG_ENVF_EF_DECAYRATE);

  000e6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000ec	81 e2 00 f0 ff
	ff		 and	 edx, -4096		; fffff000H
  000f2	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  000f5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f8	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  000fe	0b d1		 or	 edx, ecx
  00100	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00103	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 2835 :         m_RegCache.CfgENVF = MCPX_SET_REG_VALUE(m_RegCache.CfgENVF, pEnv->dwHold, NV1BA0_PIO_SET_VOICE_CFG_ENVF_EF_HOLDTIME);

  00106	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0010c	81 e2 ff 0f 00
	ff		 and	 edx, -16773121		; ff000fffH
  00112	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  00115	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00118	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  0011e	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  00121	0b d1		 or	 edx, ecx
  00123	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00126	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 2836 :         m_RegCache.CfgENVF = MCPX_SET_REG_VALUE(m_RegCache.CfgENVF, pEnv->dwSustain, NV1BA0_PIO_SET_VOICE_CFG_ENVF_EF_SUSTAINLEVEL);

  00129	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0012f	81 e2 ff ff ff
	00		 and	 edx, 16777215		; 00ffffffH
  00135	8b 45 08	 mov	 eax, DWORD PTR _pEnv$[ebp]
  00138	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0013b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00141	c1 e1 18	 shl	 ecx, 24			; 00000018H
  00144	0b d1		 or	 edx, ecx
  00146	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00149	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 2837 :     }
; 2838 :     else if(DSEG_AMPLITUDE == pEnv->dwEG)

  0014c	e9 09 01 00 00	 jmp	 $L36525
$L36515:
  00151	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  00154	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00157	0f 85 e4 00 00
	00		 jne	 $L36526

; 2839 :     {
; 2840 :         m_RegCache.VoiceOn = MCPX_SET_REG_VALUE(m_RegCache.VoiceOn, pEnv->dwMode, NV1BA0_PIO_VOICE_ON_ENVA);

  0015d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00160	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00163	25 ff ff ff 0f	 and	 eax, 268435455		; 0fffffffH
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  0016b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0016e	83 e2 0f	 and	 edx, 15			; 0000000fH
  00171	c1 e2 1c	 shl	 edx, 28			; 0000001cH
  00174	0b c2		 or	 eax, edx
  00176	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 2841 : 
; 2842 :         m_RegCache.LFOENV = MCPX_SET_REG_VALUE(m_RegCache.LFOENV, pEnv->dwRelease, NV1BA0_PIO_SET_VOICE_LFO_ENV_EA_RELEASERATE);

  0017c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0017f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00182	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  00187	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  0018a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0018d	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00193	0b c2		 or	 eax, edx
  00195	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00198	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 2843 : 
; 2844 :         m_RegCache.CfgENV0 = MCPX_SET_REG_VALUE(m_RegCache.CfgENV0, pEnv->dwAttack, NV1BA0_PIO_SET_VOICE_CFG_ENV0_EA_ATTACKRATE);

  0019b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0019e	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001a1	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  001a9	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001ac	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001b2	0b c2		 or	 eax, edx
  001b4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 2845 :         m_RegCache.CfgENV0 = MCPX_SET_REG_VALUE(m_RegCache.CfgENV0, pEnv->dwDelay, NV1BA0_PIO_SET_VOICE_CFG_ENV0_EA_DELAYTIME);

  001ba	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001bd	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  001c0	25 ff 0f 00 ff	 and	 eax, -16773121		; ff000fffH
  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  001c8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001cb	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001d1	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  001d4	0b c2		 or	 eax, edx
  001d6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001d9	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 2846 : 
; 2847 :         m_RegCache.CfgENVA = MCPX_SET_REG_VALUE(m_RegCache.CfgENVA, pEnv->dwDecay, NV1BA0_PIO_SET_VOICE_CFG_ENVA_EA_DECAYRATE);

  001dc	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001df	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  001e2	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  001e7	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  001ea	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001ed	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001f3	0b c2		 or	 eax, edx
  001f5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001f8	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2848 :         m_RegCache.CfgENVA = MCPX_SET_REG_VALUE(m_RegCache.CfgENVA, pEnv->dwHold, NV1BA0_PIO_SET_VOICE_CFG_ENVA_EA_HOLDTIME);

  001fb	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001fe	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00201	25 ff 0f 00 ff	 and	 eax, -16773121		; ff000fffH
  00206	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  00209	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0020c	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00212	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  00215	0b c2		 or	 eax, edx
  00217	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2849 :         m_RegCache.CfgENVA = MCPX_SET_REG_VALUE(m_RegCache.CfgENVA, pEnv->dwSustain, NV1BA0_PIO_SET_VOICE_CFG_ENVA_EA_SUSTAINLEVEL);

  0021d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00220	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00223	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00228	8b 4d 08	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  0022b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0022e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00234	c1 e2 18	 shl	 edx, 24			; 00000018H
  00237	0b c2		 or	 eax, edx
  00239	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0023c	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 2850 :     }
; 2851 :     else

  0023f	eb 19		 jmp	 SHORT $L36525
$L36526:

; 2852 :     {
; 2853 :         ASSERTMSG("Invalid EG identifier");

  00241	68 25 0b 00 00	 push	 2853			; 00000b25H
  00246	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0024b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@PBAOCHCM@Invalid?5EG?5identifier?$AA@
  00250	6a 01		 push	 1
  00252	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00257	83 c4 10	 add	 esp, 16			; 00000010H
$L36525:

; 2854 :     }
; 2855 : 
; 2856 :     //
; 2857 :     // Apply changes
; 2858 :     //
; 2859 :     
; 2860 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  0025a	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0025d	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00261	83 e0 01	 and	 eax, 1
  00264	85 c0		 test	 eax, eax
  00266	0f 84 31 01 00
	00		 je	 $L36536

; 2861 :     {
; 2862 :         MCPX_CHECK_VOICE_FIFO(9 * m_bVoiceCount);

  0026c	68 2e 0b 00 00	 push	 2862			; 00000b2eH
  00271	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00276	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0027b	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00280	0f b6 c8	 movzx	 ecx, al
  00283	33 d2		 xor	 edx, edx
  00285	83 f9 02	 cmp	 ecx, 2
  00288	0f 95 c2	 setne	 dl
  0028b	52		 push	 edx
  0028c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00291	83 c4 10	 add	 esp, 16			; 00000010H
  00294	68 2e 0b 00 00	 push	 2862			; 00000b2eH
  00299	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0029e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MMDBKKON@?$CI9?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  002a3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002a6	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  002aa	6b c9 09	 imul	 ecx, 9
  002ad	33 d2		 xor	 edx, edx
  002af	83 f9 20	 cmp	 ecx, 32			; 00000020H
  002b2	0f 9f c2	 setg	 dl
  002b5	52		 push	 edx
  002b6	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002bb	83 c4 10	 add	 esp, 16			; 00000010H
$L36539:
  002be	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002c3	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  002c9	c1 e9 02	 shr	 ecx, 2
  002cc	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  002cf	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  002d3	6b c0 09	 imul	 eax, 9
  002d6	3b c8		 cmp	 ecx, eax
  002d8	73 02		 jae	 SHORT $L36540
  002da	eb e2		 jmp	 SHORT $L36539
$L36540:

; 2863 :         
; 2864 :         for(i = 0; i < m_bVoiceCount; i++)

  002dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  002e3	eb 09		 jmp	 SHORT $L36543
$L36544:
  002e5	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  002e8	83 c1 01	 add	 ecx, 1
  002eb	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L36543:
  002ee	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  002f1	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  002f5	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  002f8	0f 83 9f 00 00
	00		 jae	 $L36536

; 2865 :         {
; 2866 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  002fe	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00301	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00304	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00309	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  0030e	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 2867 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  00314	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  00319	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1

; 2868 :             MCPX_VOICE_WRITE(SetVoiceCfgMISC, m_RegCache.CfgMISC);

  00323	b8 18 03 00 00	 mov	 eax, 792		; 00000318H
  00328	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0032e	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2869 :             MCPX_VOICE_WRITE(SetVoiceCfgENV0, m_RegCache.CfgENV0);

  00334	b8 08 03 00 00	 mov	 eax, 776		; 00000308H
  00339	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0033c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0033f	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2870 :             MCPX_VOICE_WRITE(SetVoiceCfgENVA, m_RegCache.CfgENVA);

  00345	b8 0c 03 00 00	 mov	 eax, 780		; 0000030cH
  0034a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0034d	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00350	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2871 :             MCPX_VOICE_WRITE(SetVoiceCfgENV1, m_RegCache.CfgENV1);

  00356	b8 10 03 00 00	 mov	 eax, 784		; 00000310H
  0035b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0035e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00361	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2872 :             MCPX_VOICE_WRITE(SetVoiceCfgENVF, m_RegCache.CfgENVF);

  00367	b8 14 03 00 00	 mov	 eax, 788		; 00000314H
  0036c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0036f	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00372	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2873 :             MCPX_VOICE_WRITE(SetVoiceLFOENV, m_RegCache.LFOENV);

  00378	b8 6c 03 00 00	 mov	 eax, 876		; 0000036cH
  0037d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00380	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00383	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 2874 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  00389	b8 fc 02 00 00	 mov	 eax, 764		; 000002fcH
  0038e	c7 80 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [eax-25034752], 0

; 2875 :         }

  00398	e9 48 ff ff ff	 jmp	 $L36544
$L36536:

; 2876 :     }
; 2877 : 
; 2878 :     DPF_LEAVE_HRESULT(DS_OK);
; 2879 : 
; 2880 :     return DS_OK;

  0039d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T37414[ebp], 0
  003a4	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  003a7	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  003ac	8b 45 f0	 mov	 eax, DWORD PTR $T37414[ebp]

; 2881 : }

  003af	8b e5		 mov	 esp, ebp
  003b1	5d		 pop	 ebp
  003b2	c2 04 00	 ret	 4
?SetEG@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSENVELOPEDESC@@@Z ENDP ; DirectSound::CMcpxVoiceClient::SetEG
DSOUND	ENDS
EXTRN	_memcpy:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT
_this$ = -44
$T37418 = -40
___AutoIrql$ = -36
_i$ = -28
_Filter$ = -24
_pFilter$ = 8
?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::SetFilter, COMDAT
; _this$ = ecx

; 2907 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 2908 :     DSFILTERDESC            Filter;
; 2909 :     DWORD                   i;
; 2910 :     
; 2911 :     DPF_ENTER();
; 2912 :     AutoIrql();

  00009	8d 4d dc	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 2913 : 
; 2914 :     //
; 2915 :     // Make a local copy of the filter data or create one based on current
; 2916 :     // register values.
; 2917 :     //
; 2918 : 
; 2919 :     if(pFilter)

  00011	83 7d 08 00	 cmp	 DWORD PTR _pFilter$[ebp], 0
  00015	74 14		 je	 SHORT $L36573

; 2920 :     {
; 2921 :         CopyMemory(&Filter, pFilter, sizeof(*pFilter));

  00017	6a 18		 push	 24			; 00000018H
  00019	8b 45 08	 mov	 eax, DWORD PTR _pFilter$[ebp]
  0001c	50		 push	 eax
  0001d	8d 4d e8	 lea	 ecx, DWORD PTR _Filter$[ebp]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 _memcpy
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2922 :     }
; 2923 :     else

  00029	eb 5f		 jmp	 SHORT $L36574
$L36573:

; 2924 :     {
; 2925 :         Filter.dwMode = MCPX_GET_REG_VALUE(m_RegCache.CfgMISC, NV1BA0_PIO_SET_VOICE_CFG_MISC_FMODE);

  0002b	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00031	c1 e8 10	 shr	 eax, 16			; 00000010H
  00034	83 e0 03	 and	 eax, 3
  00037	89 45 e8	 mov	 DWORD PTR _Filter$[ebp], eax

; 2926 :         Filter.dwQCoefficient = MCPX_GET_REG_VALUE(m_RegCache.CfgMISC, NV1BA0_PIO_SET_VOICE_CFG_MISC_BPQ);

  0003a	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00040	c1 ea 12	 shr	 edx, 18			; 00000012H
  00043	83 e2 07	 and	 edx, 7
  00046	89 55 ec	 mov	 DWORD PTR _Filter$[ebp+4], edx

; 2927 : 
; 2928 :         Filter.adwCoefficients[0] = MCPX_GET_REG_VALUE(m_RegCache.TarFCA, NV1BA0_PIO_SET_VOICE_TAR_FCA_FC0);

  00049	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0004f	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00055	89 4d f0	 mov	 DWORD PTR _Filter$[ebp+8], ecx

; 2929 :         Filter.adwCoefficients[1] = MCPX_GET_REG_VALUE(m_RegCache.TarFCA, NV1BA0_PIO_SET_VOICE_TAR_FCA_FC1);

  00058	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0005e	c1 e8 10	 shr	 eax, 16			; 00000010H
  00061	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00066	89 45 f4	 mov	 DWORD PTR _Filter$[ebp+12], eax

; 2930 : 
; 2931 :         Filter.adwCoefficients[2] = MCPX_GET_REG_VALUE(m_RegCache.TarFCB, NV1BA0_PIO_SET_VOICE_TAR_FCB_FC2);

  00069	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0006f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00075	89 55 f8	 mov	 DWORD PTR _Filter$[ebp+16], edx

; 2932 :         Filter.adwCoefficients[3] = MCPX_GET_REG_VALUE(m_RegCache.TarFCB, NV1BA0_PIO_SET_VOICE_TAR_FCB_FC3);

  00078	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0007e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00081	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00087	89 4d fc	 mov	 DWORD PTR _Filter$[ebp+20], ecx
$L36574:

; 2933 :     }
; 2934 : 
; 2935 : #ifndef MCPX_BOOT_LIB
; 2936 : 
; 2937 :     //
; 2938 :     // If we're 3D, hack the filter mode so I3DL2 is always turned on
; 2939 :     //
; 2940 : 
; 2941 :     if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  0008a	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00090	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00093	83 e1 10	 and	 ecx, 16			; 00000010H
  00096	85 c9		 test	 ecx, ecx
  00098	74 0d		 je	 SHORT $L36575

; 2942 :     {
; 2943 :         if(DSFILTER_MODE_BYPASS == Filter.dwMode)

  0009a	83 7d e8 00	 cmp	 DWORD PTR _Filter$[ebp], 0
  0009e	75 07		 jne	 SHORT $L36575

; 2944 :         {
; 2945 :             Filter.dwMode = DSFILTER_MODE_MULTI;

  000a0	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _Filter$[ebp], 3
$L36575:

; 2946 :         }
; 2947 :     }
; 2948 : 
; 2949 : #endif // MCPX_BOOT_LIB
; 2950 : 
; 2951 :     //
; 2952 :     // Recalculate register values
; 2953 :     //
; 2954 :     
; 2955 :     m_RegCache.CfgMISC = MCPX_SET_REG_VALUE(m_RegCache.CfgMISC, Filter.dwMode, NV1BA0_PIO_SET_VOICE_CFG_MISC_FMODE);

  000a7	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000ad	25 ff ff fc ff	 and	 eax, -196609		; fffcffffH
  000b2	8b 4d e8	 mov	 ecx, DWORD PTR _Filter$[ebp]
  000b5	83 e1 03	 and	 ecx, 3
  000b8	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000bb	0b c1		 or	 eax, ecx
  000bd	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 2956 :     m_RegCache.CfgMISC = MCPX_SET_REG_VALUE(m_RegCache.CfgMISC, Filter.dwQCoefficient, NV1BA0_PIO_SET_VOICE_CFG_MISC_BPQ);

  000c3	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000c9	81 e1 ff ff e3
	ff		 and	 ecx, -1835009		; ffe3ffffH
  000cf	8b 55 ec	 mov	 edx, DWORD PTR _Filter$[ebp+4]
  000d2	83 e2 07	 and	 edx, 7
  000d5	c1 e2 12	 shl	 edx, 18			; 00000012H
  000d8	0b ca		 or	 ecx, edx
  000da	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 2957 : 
; 2958 :     m_RegCache.TarFCA = MCPX_MAKE_REG_VALUE(Filter.adwCoefficients[0], NV1BA0_PIO_SET_VOICE_TAR_FCA_FC0);

  000e0	8b 4d f0	 mov	 ecx, DWORD PTR _Filter$[ebp+8]
  000e3	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000e9	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 2959 :     m_RegCache.TarFCA |= MCPX_MAKE_REG_VALUE(Filter.adwCoefficients[1], NV1BA0_PIO_SET_VOICE_TAR_FCA_FC1);

  000ef	8b 45 f4	 mov	 eax, DWORD PTR _Filter$[ebp+12]
  000f2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000f7	c1 e0 10	 shl	 eax, 16			; 00000010H
  000fa	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00100	0b d0		 or	 edx, eax
  00102	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00105	89 50 38	 mov	 DWORD PTR [eax+56], edx

; 2960 : 
; 2961 : #ifndef MCPX_BOOT_LIB
; 2962 : 
; 2963 :     if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  00108	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  0010e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00111	83 e0 10	 and	 eax, 16			; 00000010H
  00114	85 c0		 test	 eax, eax
  00116	0f 84 a2 00 00
	00		 je	 $L36581

; 2964 :     {
; 2965 :         ASSERT(m_pSettings->m_p3dParams);

  0011c	68 95 0b 00 00	 push	 2965			; 00000b95H
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00126	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@ECCFODNO@m_pSettings?9?$DOm_p3dParams?$AA@
  0012b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00131	33 c0		 xor	 eax, eax
  00133	83 ba b4 00 00
	00 00		 cmp	 DWORD PTR [edx+180], 0
  0013a	0f 94 c0	 sete	 al
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00143	83 c4 10	 add	 esp, 16			; 00000010H

; 2966 :         ASSERT(m_pI3dl2Source);

  00146	68 96 0b 00 00	 push	 2966			; 00000b96H
  0014b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@KNAGEJEI@m_pI3dl2Source?$AA@
  00155	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00158	33 d2		 xor	 edx, edx
  0015a	83 79 74 00	 cmp	 DWORD PTR [ecx+116], 0
  0015e	0f 94 c2	 sete	 dl
  00161	52		 push	 edx
  00162	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00167	83 c4 10	 add	 esp, 16			; 00000010H

; 2967 :         
; 2968 :         if(DS3DMODE_DISABLE == m_pSettings->m_p3dParams->HrtfParams.dwMode)

  0016a	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00170	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00176	83 7a 3c 02	 cmp	 DWORD PTR [edx+60], 2
  0017a	75 0c		 jne	 SHORT $L36582

; 2969 :         {
; 2970 :             m_RegCache.TarFCB = 0;

  0017c	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0017f	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0

; 2971 :         }
; 2972 :         else            

  00186	eb 34		 jmp	 SHORT $L36583
$L36582:

; 2973 :         {
; 2974 :             m_RegCache.TarFCB = MCPX_MAKE_REG_VALUE(m_pI3dl2Source->m_I3dl2Data.nDirectIir, NV_PAVS_VOICE_CUR_FCB_FC2);

  00188	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0018b	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  0018e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00191	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00196	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00199	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 2975 :             m_RegCache.TarFCB |= MCPX_MAKE_REG_VALUE(m_pI3dl2Source->m_I3dl2Data.nReverbIir, NV_PAVS_VOICE_CUR_FCB_FC3);

  0019c	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0019f	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  001a2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001a5	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001ab	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001ae	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  001b1	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  001b4	0b c1		 or	 eax, ecx
  001b6	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001b9	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$L36583:

; 2976 :         }
; 2977 :     }
; 2978 :     else

  001bc	eb 29		 jmp	 SHORT $L36586
$L36581:

; 2979 : 
; 2980 : #endif // MCPX_BOOT_LIB
; 2981 : 
; 2982 :     {
; 2983 :         m_RegCache.TarFCB = MCPX_MAKE_REG_VALUE(Filter.adwCoefficients[2], NV_PAVS_VOICE_CUR_FCB_FC2);

  001be	8b 55 f8	 mov	 edx, DWORD PTR _Filter$[ebp+16]
  001c1	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  001c7	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  001ca	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 2984 :         m_RegCache.TarFCB |= MCPX_MAKE_REG_VALUE(Filter.adwCoefficients[3], NV_PAVS_VOICE_CUR_FCB_FC3);

  001cd	8b 4d fc	 mov	 ecx, DWORD PTR _Filter$[ebp+20]
  001d0	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001d6	c1 e1 10	 shl	 ecx, 16			; 00000010H
  001d9	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  001dc	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  001df	0b c1		 or	 eax, ecx
  001e1	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$L36586:

; 2985 :     }
; 2986 : 
; 2987 :     //
; 2988 :     // Apply changes
; 2989 :     //
; 2990 :     
; 2991 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  001e7	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  001ea	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  001ee	83 e0 01	 and	 eax, 1
  001f1	85 c0		 test	 eax, eax
  001f3	0f 84 f7 00 00
	00		 je	 $L36589

; 2992 :     {
; 2993 :         MCPX_CHECK_VOICE_FIFO(6 * m_bVoiceCount);

  001f9	68 b1 0b 00 00	 push	 2993			; 00000bb1H
  001fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00203	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00208	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0020d	0f b6 c8	 movzx	 ecx, al
  00210	33 d2		 xor	 edx, edx
  00212	83 f9 02	 cmp	 ecx, 2
  00215	0f 95 c2	 setne	 dl
  00218	52		 push	 edx
  00219	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0021e	83 c4 10	 add	 esp, 16			; 00000010H
  00221	68 b1 0b 00 00	 push	 2993			; 00000bb1H
  00226	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0022b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MNHCOCM@?$CI6?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  00230	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00233	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00237	6b c9 06	 imul	 ecx, 6
  0023a	33 d2		 xor	 edx, edx
  0023c	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0023f	0f 9f c2	 setg	 dl
  00242	52		 push	 edx
  00243	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00248	83 c4 10	 add	 esp, 16			; 00000010H
$L36591:
  0024b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00250	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  00256	c1 e9 02	 shr	 ecx, 2
  00259	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0025c	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00260	6b c0 06	 imul	 eax, 6
  00263	3b c8		 cmp	 ecx, eax
  00265	73 02		 jae	 SHORT $L36592
  00267	eb e2		 jmp	 SHORT $L36591
$L36592:

; 2994 :         
; 2995 :         for(i = 0; i < m_bVoiceCount; i++)

  00269	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00270	eb 09		 jmp	 SHORT $L36595
$L36596:
  00272	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  00275	83 c1 01	 add	 ecx, 1
  00278	89 4d e4	 mov	 DWORD PTR _i$[ebp], ecx
$L36595:
  0027b	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0027e	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00282	39 45 e4	 cmp	 DWORD PTR _i$[ebp], eax
  00285	73 69		 jae	 SHORT $L36589

; 2996 :         {
; 2997 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00287	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  0028a	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0028d	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00292	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00297	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 2998 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  0029d	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  002a2	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1

; 2999 :             MCPX_VOICE_WRITE(SetVoiceCfgMISC, m_RegCache.CfgMISC);

  002ac	b8 18 03 00 00	 mov	 eax, 792		; 00000318H
  002b1	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  002b4	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002b7	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 3000 :             MCPX_VOICE_WRITE(SetVoiceTarFCA, m_RegCache.TarFCA);

  002bd	b8 74 03 00 00	 mov	 eax, 884		; 00000374H
  002c2	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  002c5	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  002c8	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 3001 :             MCPX_VOICE_WRITE(SetVoiceTarFCB, m_RegCache.TarFCB);

  002ce	b8 78 03 00 00	 mov	 eax, 888		; 00000378H
  002d3	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  002d6	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  002d9	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 3002 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  002df	b8 fc 02 00 00	 mov	 eax, 764		; 000002fcH
  002e4	c7 80 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [eax-25034752], 0

; 3003 :         }

  002ee	eb 82		 jmp	 SHORT $L36596
$L36589:

; 3004 :     }
; 3005 : 
; 3006 :     DPF_LEAVE_HRESULT(DS_OK);
; 3007 : 
; 3008 :     return DS_OK;

  002f0	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T37418[ebp], 0
  002f7	8d 4d dc	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  002fa	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  002ff	8b 45 d8	 mov	 eax, DWORD PTR $T37418[ebp]

; 3009 : }

  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	c2 04 00	 ret	 4
?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z ENDP ; DirectSound::CMcpxVoiceClient::SetFilter
DSOUND	ENDS
PUBLIC	?ConnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::ConnectVoice
PUBLIC	??_C@_0BD@HODIEEIE@pSubMixDestination?$AA@	; `string'
PUBLIC	??_C@_0BP@NHIALCLL@CMcpxVoiceClient?3?3ConnectVoice?$AA@ ; `string'
PUBLIC	??_C@_0DH@JFFAPBKC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5?$CFx?5?$CI?$CFx?$CJ?5as?5i@ ; `string'
PUBLIC	??_C@_0DE@PACLBLCI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5is?5still?5active?4?5?5@ ; `string'
;	COMDAT ??_C@_0BD@HODIEEIE@pSubMixDestination?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@HODIEEIE@pSubMixDestination?$AA@ DB 'pSubMixDestination', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@NHIALCLL@CMcpxVoiceClient?3?3ConnectVoice?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@NHIALCLL@CMcpxVoiceClient?3?3ConnectVoice?$AA@ DB 'CMcpxVoiceCl'
	DB	'ient::ConnectVoice', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@JFFAPBKC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5?$CFx?5?$CI?$CFx?$CJ?5as?5i@
DSOUND_RD	SEGMENT
??_C@_0DH@JFFAPBKC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5?$CFx?5?$CI?$CFx?$CJ?5as?5i@ DB 'V'
	DB	'oice %x (%x) using %x (%x) as it''s submix destination', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@PACLBLCI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5is?5still?5active?4?5?5@
DSOUND_RD	SEGMENT
??_C@_0DE@PACLBLCI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5is?5still?5active?4?5?5@ DB 'V'
	DB	'oice %x (%x) is still active.  Shutting it down...', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ConnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -68
$T37422 = -64
_dwVoiceBins$ = -60
___AutoIrql$ = -56
_pSubMixDestination$ = -48
_Volume$ = -44
_dwPitch$ = -8
_i$ = -4
?ConnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::ConnectVoice, COMDAT
; _this$ = ecx

; 3035 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 3036 :     CMcpxBuffer *           pSubMixDestination;
; 3037 :     DWORD                   dwVoiceBins;
; 3038 :     MCPX_VOICE_VOLUME       Volume;
; 3039 :     DWORD                   dwPitch;
; 3040 :     DWORD                   i;
; 3041 :     
; 3042 :     DPF_ENTER();
; 3043 :     AutoIrql();

  00009	8d 4d c8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 3044 : 
; 3045 :     pSubMixDestination = GetSubMixDestination();

  00011	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
  00019	89 45 d0	 mov	 DWORD PTR _pSubMixDestination$[ebp], eax

; 3046 :     ASSERT(pSubMixDestination);

  0001c	68 e6 0b 00 00	 push	 3046			; 00000be6H
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@HODIEEIE@pSubMixDestination?$AA@
  0002b	33 c0		 xor	 eax, eax
  0002d	83 7d d0 00	 cmp	 DWORD PTR _pSubMixDestination$[ebp], 0
  00031	0f 94 c0	 sete	 al
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 3047 : 
; 3048 :     DPF_INFO("Voice %x (%x) using %x (%x) as it's submix destination", this, m_ahVoices[0], pSubMixDestination, pSubMixDestination->m_ahVoices[0]);

  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@NHIALCLL@CMcpxVoiceClient?3?3ConnectVoice?$AA@
  00047	68 e8 0b 00 00	 push	 3048			; 00000be8H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00051	6a 04		 push	 4
  00053	6a 09		 push	 9
  00055	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	8b 4d d0	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  00060	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00064	52		 push	 edx
  00065	8b 45 d0	 mov	 eax, DWORD PTR _pSubMixDestination$[ebp]
  00068	50		 push	 eax
  00069	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00070	52		 push	 edx
  00071	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	50		 push	 eax
  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@JFFAPBKC@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5?$CFx?5?$CI?$CFx?$CJ?5as?5i@
  0007a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007f	83 c4 14	 add	 esp, 20			; 00000014H

; 3049 : 
; 3050 :     //
; 3051 :     // Make sure we're not active.  The voice has to be turned off in order
; 3052 :     // to change it's position in the voice list.
; 3053 :     //
; 3054 :     
; 3055 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00082	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00089	83 e2 03	 and	 edx, 3
  0008c	83 fa 03	 cmp	 edx, 3
  0008f	75 43		 jne	 SHORT $L36625

; 3056 :     {
; 3057 :         DPF_WARNING("Voice %x (%x) is still active.  Shutting it down...", this, m_ahVoices[0]);

  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@NHIALCLL@CMcpxVoiceClient?3?3ConnectVoice?$AA@
  0009b	68 f1 0b 00 00	 push	 3057			; 00000bf1H
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000a5	6a 03		 push	 3
  000a7	6a 09		 push	 9
  000a9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ae	83 c4 18	 add	 esp, 24			; 00000018H
  000b1	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000b8	51		 push	 ecx
  000b9	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	52		 push	 edx
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@PACLBLCI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5is?5still?5active?4?5?5@
  000c2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3058 :         DeactivateVoice();

  000ca	6a 00		 push	 0
  000cc	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice
$L36625:

; 3059 :     }
; 3060 : 
; 3061 :     //
; 3062 :     // Add us to the destination voice's list
; 3063 :     //
; 3064 : 
; 3065 :     InsertTailList(&pSubMixDestination->m_lstSourceVoices, &m_leSourceVoice);

  000d4	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	83 c0 5c	 add	 eax, 92			; 0000005cH
  000da	50		 push	 eax
  000db	8b 4d d0	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  000de	83 c1 44	 add	 ecx, 68			; 00000044H
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList

; 3066 : 
; 3067 :     //
; 3068 :     // Update our mixbin assignments, volume and pitch
; 3069 :     //
; 3070 : 
; 3071 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  000e7	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  000ea	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  000ee	83 e0 01	 and	 eax, 1
  000f1	85 c0		 test	 eax, eax
  000f3	0f 84 5f 01 00
	00		 je	 $L36627

; 3072 :     {
; 3073 :         ConvertMixBinValues(&dwVoiceBins, &m_RegCache.CfgFMT);

  000f9	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	83 c1 14	 add	 ecx, 20			; 00000014H
  000ff	51		 push	 ecx
  00100	8d 55 c4	 lea	 edx, DWORD PTR _dwVoiceBins$[ebp]
  00103	52		 push	 edx
  00104	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	e8 00 00 00 00	 call	 ?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z ; DirectSound::CMcpxVoiceClient::ConvertMixBinValues

; 3074 :         ConvertVolumeValues(&Volume);

  0010c	8d 45 d4	 lea	 eax, DWORD PTR _Volume$[ebp]
  0010f	50		 push	 eax
  00110	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	e8 00 00 00 00	 call	 ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues

; 3075 :         ConvertPitchValue(&dwPitch);

  00118	8d 4d f8	 lea	 ecx, DWORD PTR _dwPitch$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	e8 00 00 00 00	 call	 ?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z ; DirectSound::CMcpxVoiceClient::ConvertPitchValue

; 3076 : 
; 3077 :         MCPX_CHECK_VOICE_FIFO(9 * m_bVoiceCount);

  00124	68 05 0c 00 00	 push	 3077			; 00000c05H
  00129	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0012e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00133	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00138	0f b6 d0	 movzx	 edx, al
  0013b	33 c0		 xor	 eax, eax
  0013d	83 fa 02	 cmp	 edx, 2
  00140	0f 95 c0	 setne	 al
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00149	83 c4 10	 add	 esp, 16			; 00000010H
  0014c	68 05 0c 00 00	 push	 3077			; 00000c05H
  00151	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MMDBKKON@?$CI9?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  0015b	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00162	6b d2 09	 imul	 edx, 9
  00165	33 c0		 xor	 eax, eax
  00167	83 fa 20	 cmp	 edx, 32			; 00000020H
  0016a	0f 9f c0	 setg	 al
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00173	83 c4 10	 add	 esp, 16			; 00000010H
$L36629:
  00176	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0017b	8b 91 00 00 82
	fe		 mov	 edx, DWORD PTR [ecx-25034752]
  00181	c1 ea 02	 shr	 edx, 2
  00184	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00187	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  0018b	6b c9 09	 imul	 ecx, 9
  0018e	3b d1		 cmp	 edx, ecx
  00190	73 02		 jae	 SHORT $L36630
  00192	eb e2		 jmp	 SHORT $L36629
$L36630:

; 3078 :         
; 3079 :         for(i = 0; i < m_bVoiceCount; i++)

  00194	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0019b	eb 09		 jmp	 SHORT $L36633
$L36634:
  0019d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001a0	83 c2 01	 add	 edx, 1
  001a3	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L36633:
  001a6	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001a9	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  001ad	39 4d fc	 cmp	 DWORD PTR _i$[ebp], ecx
  001b0	0f 83 a2 00 00
	00		 jae	 $L36627

; 3080 :         {
; 3081 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  001b6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  001b9	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001bc	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  001c1	ba f8 02 00 00	 mov	 edx, 760		; 000002f8H
  001c6	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 3082 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  001cc	b8 fc 02 00 00	 mov	 eax, 764		; 000002fcH
  001d1	c7 80 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [eax-25034752], 1

; 3083 :             MCPX_VOICE_WRITE(SetVoiceCfgVBIN, dwVoiceBins);

  001db	b9 00 03 00 00	 mov	 ecx, 768		; 00000300H
  001e0	8b 55 c4	 mov	 edx, DWORD PTR _dwVoiceBins$[ebp]
  001e3	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 3084 :             MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  001e9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001ec	50		 push	 eax
  001ed	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  001f5	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  001fa	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 3085 :             MCPX_VOICE_WRITE(SetVoiceTarVOLA, Volume.TarVOLA[i]);

  00200	ba 60 03 00 00	 mov	 edx, 864		; 00000360H
  00205	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00208	8b 4c 85 d4	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4]
  0020c	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 3086 :             MCPX_VOICE_WRITE(SetVoiceTarVOLB, Volume.TarVOLB[i]);

  00212	ba 64 03 00 00	 mov	 edx, 868		; 00000364H
  00217	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0021a	8b 4c 85 e0	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+12]
  0021e	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 3087 :             MCPX_VOICE_WRITE(SetVoiceTarVOLC, Volume.TarVOLC[i]);

  00224	ba 68 03 00 00	 mov	 edx, 872		; 00000368H
  00229	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0022c	8b 4c 85 ec	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+24]
  00230	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 3088 :             MCPX_VOICE_WRITE(SetVoiceTarPitch, dwPitch);

  00236	ba 7c 03 00 00	 mov	 edx, 892		; 0000037cH
  0023b	8b 45 f8	 mov	 eax, DWORD PTR _dwPitch$[ebp]
  0023e	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 3089 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  00244	b9 fc 02 00 00	 mov	 ecx, 764		; 000002fcH
  00249	c7 81 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [ecx-25034752], 0

; 3090 :         }

  00253	e9 45 ff ff ff	 jmp	 $L36634
$L36627:

; 3091 :     }
; 3092 : 
; 3093 :     DPF_LEAVE_HRESULT(DS_OK);
; 3094 : 
; 3095 :     return DS_OK;

  00258	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T37422[ebp], 0
  0025f	8d 4d c8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00262	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00267	8b 45 c0	 mov	 eax, DWORD PTR $T37422[ebp]

; 3096 : }

  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c3		 ret	 0
?ConnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxVoiceClient::ConnectVoice
DSOUND	ENDS
PUBLIC	??_C@_0CC@OGCACCEO@CMcpxVoiceClient?3?3DisconnectVoic@ ; `string'
PUBLIC	??_C@_0CP@GGCJJFAI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5disconnected?5submi@ ; `string'
;	COMDAT ??_C@_0CC@OGCACCEO@CMcpxVoiceClient?3?3DisconnectVoic@
DSOUND_RD	SEGMENT
??_C@_0CC@OGCACCEO@CMcpxVoiceClient?3?3DisconnectVoic@ DB 'CMcpxVoiceClie'
	DB	'nt::DisconnectVoice', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@GGCJJFAI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5disconnected?5submi@
DSOUND_RD	SEGMENT
??_C@_0CP@GGCJJFAI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5disconnected?5submi@ DB 'V'
	DB	'oice %x (%x) disconnected submix from %x (%x)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -72
$T37426 = -68
_dwVoiceBins$ = -64
___AutoIrql$ = -60
_pSubMixDestination$ = -48
_Volume$ = -44
_dwPitch$ = -8
_i$ = -4
?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::DisconnectVoice, COMDAT
; _this$ = ecx

; 3122 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d b8	 mov	 DWORD PTR _this$[ebp], ecx

; 3123 :     CMcpxBuffer *           pSubMixDestination;
; 3124 :     DWORD                   dwVoiceBins;
; 3125 :     MCPX_VOICE_VOLUME       Volume;
; 3126 :     DWORD                   dwPitch;
; 3127 :     HRESULT                 hr;
; 3128 :     DWORD                   i;
; 3129 :     
; 3130 :     DPF_ENTER();
; 3131 :     AutoIrql();

  00009	8d 4d c4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 3132 : 
; 3133 :     if(pSubMixDestination = GetSubMixDestination())

  00011	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?GetSubMixDestination@CMcpxVoiceClient@DirectSound@@IAEPAVCMcpxBuffer@2@XZ ; DirectSound::CMcpxVoiceClient::GetSubMixDestination
  00019	89 45 d0	 mov	 DWORD PTR _pSubMixDestination$[ebp], eax
  0001c	83 7d d0 00	 cmp	 DWORD PTR _pSubMixDestination$[ebp], 0
  00020	0f 84 c2 01 00
	00		 je	 $L36667

; 3134 :     {
; 3135 :         //
; 3136 :         // Remove ourselves from the destination voices's list
; 3137 :         //
; 3138 : 
; 3139 :         RemoveEntryList(&m_leSourceVoice);

  00026	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c0 5c	 add	 eax, 92			; 0000005cH
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 3140 : 
; 3141 :         DPF_INFO("Voice %x (%x) disconnected submix from %x (%x)", this, m_ahVoices[0], pSubMixDestination, pSubMixDestination->m_ahVoices[0]);

  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@OGCACCEO@CMcpxVoiceClient?3?3DisconnectVoic@
  0003c	68 45 0c 00 00	 push	 3141			; 00000c45H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00046	6a 04		 push	 4
  00048	6a 09		 push	 9
  0004a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0004f	83 c4 18	 add	 esp, 24			; 00000018H
  00052	8b 4d d0	 mov	 ecx, DWORD PTR _pSubMixDestination$[ebp]
  00055	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00059	52		 push	 edx
  0005a	8b 45 d0	 mov	 eax, DWORD PTR _pSubMixDestination$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00065	52		 push	 edx
  00066	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@GGCJJFAI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5disconnected?5submi@
  0006f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00074	83 c4 14	 add	 esp, 20			; 00000014H

; 3142 : 
; 3143 :         //
; 3144 :         // Update our mixbin assignments, volume and pitch
; 3145 :         //
; 3146 : 
; 3147 :         if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00077	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  0007e	83 e2 01	 and	 edx, 1
  00081	85 d2		 test	 edx, edx
  00083	0f 84 5f 01 00
	00		 je	 $L36667

; 3148 :         {
; 3149 :             ConvertMixBinValues(&dwVoiceBins, &m_RegCache.CfgFMT);

  00089	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	83 c0 14	 add	 eax, 20			; 00000014H
  0008f	50		 push	 eax
  00090	8d 4d c0	 lea	 ecx, DWORD PTR _dwVoiceBins$[ebp]
  00093	51		 push	 ecx
  00094	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?ConvertMixBinValues@CMcpxVoiceClient@DirectSound@@IAEXPAK0@Z ; DirectSound::CMcpxVoiceClient::ConvertMixBinValues

; 3150 :             ConvertVolumeValues(&Volume);

  0009c	8d 55 d4	 lea	 edx, DWORD PTR _Volume$[ebp]
  0009f	52		 push	 edx
  000a0	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues

; 3151 :             ConvertPitchValue(&dwPitch);

  000a8	8d 45 f8	 lea	 eax, DWORD PTR _dwPitch$[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?ConvertPitchValue@CMcpxVoiceClient@DirectSound@@IAEXPAK@Z ; DirectSound::CMcpxVoiceClient::ConvertPitchValue

; 3152 : 
; 3153 :             MCPX_CHECK_VOICE_FIFO(9 * m_bVoiceCount);

  000b4	68 51 0c 00 00	 push	 3153			; 00000c51H
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  000c3	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  000c8	0f b6 c8	 movzx	 ecx, al
  000cb	33 d2		 xor	 edx, edx
  000cd	83 f9 02	 cmp	 ecx, 2
  000d0	0f 95 c2	 setne	 dl
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d9	83 c4 10	 add	 esp, 16			; 00000010H
  000dc	68 51 0c 00 00	 push	 3153			; 00000c51H
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MMDBKKON@?$CI9?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  000eb	8b 45 b8	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  000f2	6b c9 09	 imul	 ecx, 9
  000f5	33 d2		 xor	 edx, edx
  000f7	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000fa	0f 9f c2	 setg	 dl
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00103	83 c4 10	 add	 esp, 16			; 00000010H
$L36672:
  00106	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0010b	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  00111	c1 e9 02	 shr	 ecx, 2
  00114	8b 55 b8	 mov	 edx, DWORD PTR _this$[ebp]
  00117	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0011b	6b c0 09	 imul	 eax, 9
  0011e	3b c8		 cmp	 ecx, eax
  00120	73 02		 jae	 SHORT $L36673
  00122	eb e2		 jmp	 SHORT $L36672
$L36673:

; 3154 :             
; 3155 :             for(i = 0; i < m_bVoiceCount; i++)

  00124	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0012b	eb 09		 jmp	 SHORT $L36676
$L36677:
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00130	83 c1 01	 add	 ecx, 1
  00133	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L36676:
  00136	8b 55 b8	 mov	 edx, DWORD PTR _this$[ebp]
  00139	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0013d	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00140	0f 83 a2 00 00
	00		 jae	 $L36667

; 3156 :             {
; 3157 :                 MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00146	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00149	8b 55 b8	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00151	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00156	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 3158 :                 MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  0015c	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  00161	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1

; 3159 :                 MCPX_VOICE_WRITE(SetVoiceCfgVBIN, dwVoiceBins);

  0016b	b8 00 03 00 00	 mov	 eax, 768		; 00000300H
  00170	8b 4d c0	 mov	 ecx, DWORD PTR _dwVoiceBins$[ebp]
  00173	89 88 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], ecx

; 3160 :                 MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  00179	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0017c	52		 push	 edx
  0017d	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  00185	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  0018a	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 3161 :                 MCPX_VOICE_WRITE(SetVoiceTarVOLA, Volume.TarVOLA[i]);

  00190	ba 60 03 00 00	 mov	 edx, 864		; 00000360H
  00195	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00198	8b 4c 85 d4	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4]
  0019c	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 3162 :                 MCPX_VOICE_WRITE(SetVoiceTarVOLB, Volume.TarVOLB[i]);

  001a2	ba 64 03 00 00	 mov	 edx, 868		; 00000364H
  001a7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001aa	8b 4c 85 e0	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+12]
  001ae	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 3163 :                 MCPX_VOICE_WRITE(SetVoiceTarVOLC, Volume.TarVOLC[i]);

  001b4	ba 68 03 00 00	 mov	 edx, 872		; 00000368H
  001b9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001bc	8b 4c 85 ec	 mov	 ecx, DWORD PTR _Volume$[ebp+eax*4+24]
  001c0	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 3164 :                 MCPX_VOICE_WRITE(SetVoiceTarPitch, dwPitch);

  001c6	ba 7c 03 00 00	 mov	 edx, 892		; 0000037cH
  001cb	8b 45 f8	 mov	 eax, DWORD PTR _dwPitch$[ebp]
  001ce	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 3165 :                 MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  001d4	b9 fc 02 00 00	 mov	 ecx, 764		; 000002fcH
  001d9	c7 81 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [ecx-25034752], 0

; 3166 :             }

  001e3	e9 45 ff ff ff	 jmp	 $L36677
$L36667:

; 3167 :         }
; 3168 :     }
; 3169 : 
; 3170 :     DPF_LEAVE_HRESULT(DS_OK);
; 3171 : 
; 3172 :     return DS_OK;

  001e8	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T37426[ebp], 0
  001ef	8d 4d c4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  001f2	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  001f7	8b 45 bc	 mov	 eax, DWORD PTR $T37426[ebp]

; 3173 : }

  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c3		 ret	 0
?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ ENDP ; DirectSound::CMcpxVoiceClient::DisconnectVoice
DSOUND	ENDS
PUBLIC	?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
PUBLIC	?GetSslPosition@CMcpxVoiceClient@DirectSound@@IAEKXZ ; DirectSound::CMcpxVoiceClient::GetSslPosition
PUBLIC	??_C@_0BO@KJPCMOID@?$CI3?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ ; `string'
;	COMDAT ??_C@_0BO@KJPCMOID@?$CI3?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@KJPCMOID@?$CI3?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@ DB '('
	DB	'3) <= PIO_METHOD_QUEUE_CLEAR', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetSslPosition@CMcpxVoiceClient@DirectSound@@IAEKXZ
DSOUND	SEGMENT
_this$ = -24
$T37430 = -20
___AutoIrql$ = -16
_dwState$ = -8
_dwPlayCursor$ = -4
?GetSslPosition@CMcpxVoiceClient@DirectSound@@IAEKXZ PROC NEAR ; DirectSound::CMcpxVoiceClient::GetSslPosition, COMDAT
; _this$ = ecx

; 3199 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 3200 :     DWORD                   dwPlayCursor    = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwPlayCursor$[ebp], 0

; 3201 :     DWORD                   dwState;
; 3202 :     
; 3203 :     DPF_ENTER();
; 3204 :     AutoIrql();

  00010	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 3205 : 
; 3206 :     //
; 3207 :     // There's two ways to query the hardware for current position.  We could 
; 3208 :     // use the "recommended" way and poke a position request register, wait for 
; 3209 :     // an interrupt, then get the current position out of a notifier.  Or, we
; 3210 :     // could go the simple route and just look at the voice structure.  NVidia
; 3211 :     // doesn't like this solution because they want to be able to change the
; 3212 :     // voice structure without modifying any driver code.  Our part won't change,
; 3213 :     // and the driver could be modified either way.  Hm... let's see... I think
; 3214 :     // I prefer the lesser amount of code and no interrupts.
; 3215 :     //
; 3216 :     // We're locking the voice so we don't query the voice structure while the
; 3217 :     // APU is writing to it.  It's possible we could read partially written
; 3218 :     // data.
; 3219 :     // 
; 3220 : 
; 3221 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00018	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0001f	83 e1 01	 and	 ecx, 1
  00022	85 c9		 test	 ecx, ecx
  00024	0f 84 e7 00 00
	00		 je	 $L36706

; 3222 :     {
; 3223 :         //
; 3224 :         // Check for the NEW_VOICE bit in the voice state.  The hardware 
; 3225 :         // doesn't update the position register until the first frame has 
; 3226 :         // been processed.
; 3227 :         //
; 3228 : 
; 3229 :         MCPX_VOICE_STRUCT_READ(m_ahVoices[m_bVoiceCount - 1], NV_PAVS_VOICE_PAR_STATE, &dwState);

  0002a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00031	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	0f b7 54 41 0a	 movzx	 edx, WORD PTR [ecx+eax*2+10]
  00039	c1 e2 07	 shl	 edx, 7
  0003c	a1 30 00 00 00	 mov	 eax, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  00041	8b 4c 10 54	 mov	 ecx, DWORD PTR [eax+edx+84]
  00045	89 4d f8	 mov	 DWORD PTR _dwState$[ebp], ecx

; 3230 : 
; 3231 :         if(!MCPX_GET_REG_VALUE(dwState, NV_PAVS_VOICE_PAR_STATE_NEW_VOICE))

  00048	8b 55 f8	 mov	 edx, DWORD PTR _dwState$[ebp]
  0004b	c1 ea 14	 shr	 edx, 20			; 00000014H
  0004e	83 e2 01	 and	 edx, 1
  00051	85 d2		 test	 edx, edx
  00053	0f 85 b8 00 00
	00		 jne	 $L36706

; 3232 :         {
; 3233 :             MCPX_CHECK_VOICE_FIFO(3);

  00059	68 a1 0c 00 00	 push	 3233			; 00000ca1H
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00068	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0006d	0f b6 c0	 movzx	 eax, al
  00070	33 c9		 xor	 ecx, ecx
  00072	83 f8 02	 cmp	 eax, 2
  00075	0f 95 c1	 setne	 cl
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	68 a1 0c 00 00	 push	 3233			; 00000ca1H
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@JCNBEPNO@c?3?2xbox?2private?2windows?2directx?2@
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@KJPCMOID@?$CI3?$CJ?5?$DM?$DN?5PIO_METHOD_QUEUE_CLEAR?$AA@
  00090	6a 00		 push	 0
  00092	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00097	83 c4 10	 add	 esp, 16			; 00000010H
$L36713:
  0009a	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0009f	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  000a5	c1 e8 02	 shr	 eax, 2
  000a8	83 f8 03	 cmp	 eax, 3
  000ab	73 02		 jae	 SHORT $L36714
  000ad	eb eb		 jmp	 SHORT $L36713
$L36714:

; 3234 :         
; 3235 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[0]);

  000af	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  000b6	b8 f8 02 00 00	 mov	 eax, 760		; 000002f8H
  000bb	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 3236 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  000c1	b9 fc 02 00 00	 mov	 ecx, 764		; 000002fcH
  000c6	c7 81 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [ecx-25034752], 1

; 3237 :             MCPX_VOICE_STRUCT_READ(m_ahVoices[0], NV_PAVS_VOICE_PAR_OFFSET, &dwPlayCursor);

  000d0	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000d3	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000d7	c1 e0 07	 shl	 eax, 7
  000da	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  000e0	8b 54 01 58	 mov	 edx, DWORD PTR [ecx+eax+88]
  000e4	89 55 fc	 mov	 DWORD PTR _dwPlayCursor$[ebp], edx

; 3238 :             MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  000e7	b8 fc 02 00 00	 mov	 eax, 764		; 000002fcH
  000ec	c7 80 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [eax-25034752], 0

; 3239 : 
; 3240 :             dwPlayCursor = MCPX_GET_REG_VALUE(dwPlayCursor, NV_PAVS_VOICE_PAR_OFFSET_CBO);

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _dwPlayCursor$[ebp]
  000f9	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  000ff	89 4d fc	 mov	 DWORD PTR _dwPlayCursor$[ebp], ecx

; 3241 :             dwPlayCursor = SamplesToBytes(dwPlayCursor);

  00102	8b 55 fc	 mov	 edx, DWORD PTR _dwPlayCursor$[ebp]
  00105	52		 push	 edx
  00106	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
  0010e	89 45 fc	 mov	 DWORD PTR _dwPlayCursor$[ebp], eax
$L36706:

; 3242 :         }
; 3243 :     }
; 3244 : 
; 3245 :     DPF_LEAVE(dwPlayCursor);
; 3246 : 
; 3247 :     return dwPlayCursor;

  00111	8b 45 fc	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  00114	89 45 ec	 mov	 DWORD PTR $T37430[ebp], eax
  00117	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0011a	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0011f	8b 45 ec	 mov	 eax, DWORD PTR $T37430[ebp]

; 3248 : }

  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
?GetSslPosition@CMcpxVoiceClient@DirectSound@@IAEKXZ ENDP ; DirectSound::CMcpxVoiceClient::GetSslPosition
DSOUND	ENDS
PUBLIC	??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@ ; `string'
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.h
DSOUND_RD	SEGMENT
??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@ DB 'WAVE'
	DB	'_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwSamples$ = 8
?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::SamplesToBytes, COMDAT
; _this$ = ecx

; 256  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 257  : 	    if(WAVE_FORMAT_XBOX_ADPCM == m_pSettings->m_fmt.wFormatTag)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0000d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00011	83 fa 69	 cmp	 edx, 105		; 00000069H
  00014	75 12		 jne	 SHORT $L34969

; 258  :         {
; 259  :             return (dwSamples >> 6) * m_pSettings->m_fmt.nBlockAlign;

  00016	8b 45 08	 mov	 eax, DWORD PTR _dwSamples$[ebp]
  00019	c1 e8 06	 shr	 eax, 6
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00022	0f af 42 14	 imul	 eax, DWORD PTR [edx+20]
  00026	eb 38		 jmp	 SHORT $L34968
$L34969:

; 260  :         }
; 261  :         else
; 262  :         {
; 263  :             ASSERT(WAVE_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag);

  00028	68 07 01 00 00	 push	 263			; 00000107H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0003d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00041	83 ea 01	 sub	 edx, 1
  00044	f7 da		 neg	 edx
  00046	1b d2		 sbb	 edx, edx
  00048	f7 da		 neg	 edx
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 264  :         
; 265  :             return dwSamples * m_pSettings->m_fmt.nBlockAlign;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00059	8b 45 08	 mov	 eax, DWORD PTR _dwSamples$[ebp]
  0005c	0f af 41 14	 imul	 eax, DWORD PTR [ecx+20]
$L34968:

; 266  :         }
; 267  :     }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ENDP ; DirectSound::CMcpxVoiceClient::SamplesToBytes
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCMcpxAPU@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCMcpxAPU@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L36782

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L36782:

; 72   :         }
; 73   : 
; 74   :         return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCMcpxAPU@1@PAV21@@Z ENDP	; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L36784

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L36784:

; 72   :         }
; 73   : 
; 74   :         return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z ENDP ; DirectSound::__AddRef
DSOUND	ENDS
END
