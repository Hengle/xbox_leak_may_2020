; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\mcpbuf.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@KFIKMGCB@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@PDAHIJCP@m_pSettings?9?$DOm_pvBufferData?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@GFJKICHP@m_pSettings?9?$DOm_dwBufferSize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@NNBHJPBC@m_dwStatus?5?$DN?$DN?5MCPX_VOICESTATUS_A@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@JJLKAIF@?$CBm_pSgeHeapEntry?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEGAJIJC@CMcpxBuffer?3?3MapInputBuffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HB@OFDFMNGN@Out?5of?5scatter?1gather?5entries?4?5?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@JEFDNHJA@?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAP@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@MNMEPOIP@?$CBm_pSettings?9?$DOm_pvBufferData?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FLFJPFNP@?$CBm_pSettings?9?$DOm_dwBufferSize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@KLMOFGEK@CMcpxBuffer?3?3MapEffectsBuffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@OCJDFLHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5mixbin?5?$CFlu?5?$CI@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EB@OMECILEI@?$CB?$CI?$CI?$CIDWORD?$CJm_pSettings?9?$DOm_pvBuffe@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09BNKJGGDH@?$CBdwOffset?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IFMKODNE@m_pSgeHeapEntry?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FA@EBICGIKN@dwSgeIndex?5?$DM?5?$CIDWORD?$CJm_pSgeHeapEn@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@EPINDCIM@dwOffset?5?$DM?5PAGE_SIZE?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@BEKIPBPF@dwEndBufferOffset?5?$DO?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@PCBCKLFL@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@INCMHKLI@?$CB?$CIdwFlags?5?$CG?5DSBPLAY_FROMSTART?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@BLILGGLP@dwPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IMLMJOKF@?$CI10?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METH@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@IAEIMMLB@dwPlayCursor?5?$DM?$DN?5m_pSettings?9?$DOm_d@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EPMNGKBE@CMcpxBuffer?3?3SetCurrentPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@CCAPGDDI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5setting?5current?5bu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKPGDKCI@m_pSettings?9?$DOm_paNotifies?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@LGHHDKBB@SUCCEEDED?$CIhr?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GKBFFOIC@m_pSettings?9?$DOm_dwNotifyCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FCHNGNOJ@CMcpxBuffer?3?3ScheduleDeferredCom@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@OBJGLBKC@CMcpxBuffer?3?3RemoveDeferredComma@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?and@@YIXPCGG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?or@@YIXPCGG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxBuffer@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundBufferSettings@1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxBuffer@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxBuffer@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetBufferData@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseBufferData@CMcpxBuffer@DirectSound@@QAEJH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapInputBuffer@CMcpxBuffer@DirectSound@@IAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapEffectsBuffer@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Play@CMcpxBuffer@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayFromCurrent@CMcpxBuffer@DirectSound@@IAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayFromPosition@CMcpxBuffer@DirectSound@@IAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPlayRegion@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLoopRegion@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Stop@CMcpxBuffer@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CMcpxBuffer@DirectSound@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceVoiceInterrupt@CMcpxBuffer@DirectSound@@MAEHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetNotificationPositions@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?NotifyStop@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleDeferredCommand@CMcpxBuffer@DirectSound@@MAEHK_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveDeferredCommand@CMcpxBuffer@DirectSound@@MAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceDeferredCommand@CMcpxBuffer@DirectSound@@MAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?OnDeferredTerminate@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundBufferSettings@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMcpxBuffer@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	??0CMcpxBuffer@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundBufferSettings@1@@Z ; DirectSound::CMcpxBuffer::CMcpxBuffer
PUBLIC	?ScheduleDeferredCommand@CMcpxBuffer@DirectSound@@MAEHK_JK@Z ; DirectSound::CMcpxBuffer::ScheduleDeferredCommand
PUBLIC	?RemoveDeferredCommand@CMcpxBuffer@DirectSound@@MAEXK@Z ; DirectSound::CMcpxBuffer::RemoveDeferredCommand
PUBLIC	?ServiceDeferredCommand@CMcpxBuffer@DirectSound@@MAEXKK@Z ; DirectSound::CMcpxBuffer::ServiceDeferredCommand
PUBLIC	?ServiceVoiceInterrupt@CMcpxBuffer@DirectSound@@MAEHXZ ; DirectSound::CMcpxBuffer::ServiceVoiceInterrupt
PUBLIC	??_7CMcpxBuffer@DirectSound@@6B@		; DirectSound::CMcpxBuffer::`vftable'
PUBLIC	??_GCMcpxBuffer@DirectSound@@UAEPAXI@Z		; DirectSound::CMcpxBuffer::`scalar deleting destructor'
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
PUBLIC	?__AddRef@DirectSound@@YGPAVCDirectSoundBufferSettings@1@PAV21@@Z ; DirectSound::__AddRef
EXTRN	??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z:NEAR ; DirectSound::CMcpxVoiceClient::CMcpxVoiceClient
EXTRN	?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z:NEAR ; DirectSound::CMcpxVoiceClient::Initialize
EXTRN	?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::SetFormat
EXTRN	??_ECMcpxBuffer@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CMcpxBuffer::`vector deleting destructor'
;	COMDAT ??_7CMcpxBuffer@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
CONST	SEGMENT
??_7CMcpxBuffer@DirectSound@@6B@ DD FLAT:??_ECMcpxBuffer@DirectSound@@UAEPAXI@Z ; DirectSound::CMcpxBuffer::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z
	DD	FLAT:?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ
	DD	FLAT:?ServiceVoiceInterrupt@CMcpxBuffer@DirectSound@@MAEHXZ
	DD	FLAT:?ScheduleDeferredCommand@CMcpxBuffer@DirectSound@@MAEHK_JK@Z
	DD	FLAT:?RemoveDeferredCommand@CMcpxBuffer@DirectSound@@MAEXK@Z
	DD	FLAT:?ServiceDeferredCommand@CMcpxBuffer@DirectSound@@MAEXKK@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMcpxBuffer@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundBufferSettings@1@@Z
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
_pMcpxApu$ = 8
_pSettings$ = 12
??0CMcpxBuffer@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundBufferSettings@1@@Z PROC NEAR ; DirectSound::CMcpxBuffer::CMcpxBuffer, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _pSettings$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _pMcpxApu$[ebp]
  00011	51		 push	 ecx
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z ; DirectSound::CMcpxVoiceClient::CMcpxVoiceClient
  0001a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CMcpxBuffer@DirectSound@@6B@

; 42   :     DWORD                   i;
; 43   :     
; 44   :     DPF_ENTER();
; 45   : 
; 46   :     m_pSettings = ADDREF(pSettings);

  00023	8b 45 0c	 mov	 eax, DWORD PTR _pSettings$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCDirectSoundBufferSettings@1@PAV21@@Z ; DirectSound::__AddRef
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 47   : 
; 48   :     //
; 49   :     // Initialize deferred command structures
; 50   :     //
; 51   : 
; 52   :     for(i = 0; i < NUMELMS(m_aDeferredCommands); i++)

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003c	eb 09		 jmp	 SHORT $L35561
$L35562:
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00041	83 c2 01	 add	 edx, 1
  00044	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L35561:
  00047	83 7d fc 05	 cmp	 DWORD PTR _i$[ebp], 5
  0004b	73 68		 jae	 SHORT $L35563

; 53   :     {
; 54   :         InitializeListHead(&m_aDeferredCommands[i].leListEntry);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00050	c1 e0 05	 shl	 eax, 5
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8d 94 01 98 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+152]
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00060	c1 e0 05	 shl	 eax, 5
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	89 94 01 9c 00
	00 00		 mov	 DWORD PTR [ecx+eax+156], edx
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00070	c1 e2 05	 shl	 edx, 5
  00073	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00076	c1 e0 05	 shl	 eax, 5
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  0007f	8b 94 16 9c 00
	00 00		 mov	 edx, DWORD PTR [esi+edx+156]
  00086	89 94 01 98 00
	00 00		 mov	 DWORD PTR [ecx+eax+152], edx

; 55   :         
; 56   :         m_aDeferredCommands[i].pVoice = this;

  0008d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00090	c1 e0 05	 shl	 eax, 5
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00099	89 94 01 a4 00
	00 00		 mov	 DWORD PTR [ecx+eax+164], edx

; 57   :         m_aDeferredCommands[i].dwCommand = i;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a3	c1 e0 05	 shl	 eax, 5
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ac	89 94 01 a8 00
	00 00		 mov	 DWORD PTR [ecx+eax+168], edx

; 58   :     }

  000b3	eb 89		 jmp	 SHORT $L35562
$L35563:

; 59   : 
; 60   :     m_aDeferredCommands[MCPX_DEFERREDCMD_BUFFER_CHECKSTUCK].dwFlags |= MCPX_DEFERREDCMDF_LOWPRIORITY | MCPX_DEFERREDCMDF_PERSIST;

  000b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  000be	83 c9 05	 or	 ecx, 5
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	89 8a a0 00 00
	00		 mov	 DWORD PTR [edx+160], ecx

; 61   :     m_aDeferredCommands[MCPX_DEFERREDCMD_BUFFER_RELEASERESOURCES].dwFlags |= MCPX_DEFERREDCMDF_LOWPRIORITY | MCPX_DEFERREDCMDF_PERSIST;

  000ca	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  000d3	83 c9 05	 or	 ecx, 5
  000d6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	89 8a c0 00 00
	00		 mov	 DWORD PTR [edx+192], ecx

; 62   :     m_aDeferredCommands[MCPX_DEFERREDCMD_BUFFER_POSITIONDELTA].dwFlags |= MCPX_DEFERREDCMDF_LOWPRIORITY | MCPX_DEFERREDCMDF_PERSIST;

  000df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  000e8	83 c9 05	 or	 ecx, 5
  000eb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ee	89 8a e0 00 00
	00		 mov	 DWORD PTR [edx+224], ecx

; 63   : 
; 64   :     DPF_LEAVE_VOID();
; 65   : }

  000f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	5e		 pop	 esi
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
??0CMcpxBuffer@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundBufferSettings@1@@Z ENDP ; DirectSound::CMcpxBuffer::CMcpxBuffer
DSOUND	ENDS
PUBLIC	??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND_RD	SEGMENT
??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T36423 = -8
$T36422 = -4
_this$ = 8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L30406

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L30406

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T36423[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T36423[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T36422[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T36422[ebp], 0
  00058	74 11		 je	 SHORT $L36424
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T36422[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T36422[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L36425
$L36424:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L36425:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L30404
$L30406:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L30404:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
DSOUND	ENDS
PUBLIC	??1CMcpxBuffer@DirectSound@@UAE@XZ		; DirectSound::CMcpxBuffer::~CMcpxBuffer
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxBuffer@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxBuffer@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CMcpxBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxBuffer@DirectSound@@UAE@XZ ; DirectSound::CMcpxBuffer::~CMcpxBuffer
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35567
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35567:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxBuffer@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CMcpxBuffer::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::ReleaseBufferResources
EXTRN	??1CMcpxVoiceClient@DirectSound@@UAE@XZ:NEAR	; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
;	COMDAT ??1CMcpxBuffer@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
??1CMcpxBuffer@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CMcpxBuffer::~CMcpxBuffer, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxBuffer@DirectSound@@6B@

; 91   :     DWORD                   i;
; 92   :     
; 93   :     DPF_ENTER();
; 94   : 
; 95   :     //
; 96   :     // Free buffer resources
; 97   :     //
; 98   : 
; 99   :     ReleaseBufferResources();

  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::ReleaseBufferResources

; 100  : 
; 101  :     //
; 102  :     // Make sure all deferred commands are dequeued
; 103  :     //
; 104  : 
; 105  :     for(i = 0; i < NUMELMS(m_aDeferredCommands); i++)

  0001a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00021	eb 09		 jmp	 SHORT $L35573
$L35574:
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00026	83 c1 01	 add	 ecx, 1
  00029	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35573:
  0002c	83 7d fc 05	 cmp	 DWORD PTR _i$[ebp], 5
  00030	73 0e		 jae	 SHORT $L35575

; 106  :     {
; 107  :         RemoveDeferredCommand(i);

  00032	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00035	52		 push	 edx
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?RemoveDeferredCommand@CMcpxBuffer@DirectSound@@MAEXK@Z ; DirectSound::CMcpxBuffer::RemoveDeferredCommand

; 108  :     }

  0003e	eb e3		 jmp	 SHORT $L35574
$L35575:

; 109  : 
; 110  :     //
; 111  :     // Release the settings object
; 112  :     //
; 113  :     
; 114  :     RELEASE(m_pSettings);

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  0004a	74 25		 je	 SHORT $L35571
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0005e	8b 12		 mov	 edx, DWORD PTR [edx]
  00060	51		 push	 ecx
  00061	ff 52 08	 call	 DWORD PTR [edx+8]
  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0
$L35571:

; 115  : 
; 116  :     DPF_LEAVE_VOID();
; 117  : }

  00071	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ??1CMcpxVoiceClient@DirectSound@@UAE@XZ ; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
??1CMcpxBuffer@DirectSound@@UAE@XZ ENDP			; DirectSound::CMcpxBuffer::~CMcpxBuffer
DSOUND	ENDS
PUBLIC	?Initialize@CMcpxBuffer@DirectSound@@QAEJXZ	; DirectSound::CMcpxBuffer::Initialize
PUBLIC	?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ ; DirectSound::CMcpxBuffer::AllocateBufferResources
; Function compile flags: /Odt
;	COMDAT ?Initialize@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
?Initialize@CMcpxBuffer@DirectSound@@QAEJXZ PROC NEAR	; DirectSound::CMcpxBuffer::Initialize, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 144  :     HRESULT                         hr;
; 145  : 
; 146  :     DPF_ENTER();
; 147  : 
; 148  :     //
; 149  :     // Initialize the base class
; 150  :     //
; 151  : 
; 152  :     hr = CMcpxVoiceClient::Initialize(FALSE);

  00009	6a 00		 push	 0
  0000b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z ; DirectSound::CMcpxVoiceClient::Initialize
  00013	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 153  : 
; 154  :     //
; 155  :     // If the buffer was created without LOCDEFER and we have valid buffer 
; 156  :     // data, allocate resources now.
; 157  :     //
; 158  : 
; 159  :     if(SUCCEEDED(hr) && !(m_pSettings->m_dwFlags & DSBCAPS_LOCDEFER))

  00016	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001a	7c 21		 jl	 SHORT $L35583
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00025	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00028	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  0002e	85 d2		 test	 edx, edx
  00030	75 0b		 jne	 SHORT $L35583

; 160  :     {
; 161  :         hr = AllocateBufferResources();

  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ ; DirectSound::CMcpxBuffer::AllocateBufferResources
  0003a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L35583:

; 162  :     }
; 163  : 
; 164  :     DPF_LEAVE_HRESULT(hr);
; 165  : 
; 166  :     return hr;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 167  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?Initialize@CMcpxBuffer@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxBuffer::Initialize
DSOUND	ENDS
PUBLIC	??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ ; `string'
PUBLIC	?SetBufferData@CMcpxBuffer@DirectSound@@QAEJXZ	; DirectSound::CMcpxBuffer::SetBufferData
PUBLIC	??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CM@KFIKMGCB@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@ ; `string'
PUBLIC	??_C@_0BM@PDAHIJCP@m_pSettings?9?$DOm_pvBufferData?$AA@ ; `string'
PUBLIC	??_C@_0BM@GFJKICHP@m_pSettings?9?$DOm_dwBufferSize?$AA@ ; `string'
;	COMDAT ??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpbuf.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@KFIKMGCB@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
DSOUND_RD	SEGMENT
??_C@_0CM@KFIKMGCB@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@ DB '!('
	DB	'm_dwStatus & ~MCPX_VOICESTATUS_ALLOCATED)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT
??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ DB '!'
	DB	'(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@PDAHIJCP@m_pSettings?9?$DOm_pvBufferData?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@PDAHIJCP@m_pSettings?9?$DOm_pvBufferData?$AA@ DB 'm_pSettings->'
	DB	'm_pvBufferData', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@GFJKICHP@m_pSettings?9?$DOm_dwBufferSize?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@GFJKICHP@m_pSettings?9?$DOm_dwBufferSize?$AA@ DB 'm_pSettings->'
	DB	'm_dwBufferSize', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetBufferData@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
?SetBufferData@CMcpxBuffer@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxBuffer::SetBufferData, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :     HRESULT                 hr  = DS_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 195  : 
; 196  :     DPF_ENTER();
; 197  : 
; 198  :     ASSERT(!(m_dwStatus & ~MCPX_VOICESTATUS_ALLOCATED));

  00010	68 c6 00 00 00	 push	 198			; 000000c6H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@KFIKMGCB@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00026	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00029	f7 d9		 neg	 ecx
  0002b	1b c9		 sbb	 ecx, ecx
  0002d	f7 d9		 neg	 ecx
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 199  :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00038	68 c7 00 00 00	 push	 199			; 000000c7H
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00047	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00050	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00053	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00059	f7 d9		 neg	 ecx
  0005b	1b c9		 sbb	 ecx, ecx
  0005d	f7 d9		 neg	 ecx
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00065	83 c4 10	 add	 esp, 16			; 00000010H

; 200  :     ASSERT(m_pSettings->m_pvBufferData);

  00068	68 c8 00 00 00	 push	 200			; 000000c8H
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PDAHIJCP@m_pSettings?9?$DOm_pvBufferData?$AA@
  00077	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00080	33 c9		 xor	 ecx, ecx
  00082	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  00089	0f 94 c1	 sete	 cl
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00092	83 c4 10	 add	 esp, 16			; 00000010H

; 201  :     ASSERT(m_pSettings->m_dwBufferSize);

  00095	68 c9 00 00 00	 push	 201			; 000000c9H
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GFJKICHP@m_pSettings?9?$DOm_dwBufferSize?$AA@
  000a4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000ad	33 c9		 xor	 ecx, ecx
  000af	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  000b6	0f 94 c1	 sete	 cl
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000bf	83 c4 10	 add	 esp, 16			; 00000010H

; 202  : 
; 203  :     //
; 204  :     // Reset the cached play cursor position
; 205  :     //
; 206  : 
; 207  :     m_dwCachedPlayCursor = 0;

  000c2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	c7 82 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+312], 0

; 208  : 
; 209  :     //
; 210  :     // If we're LOCDEFER, don't do anything.  If we're not, make sure
; 211  :     // resources are allocated.
; 212  :     //
; 213  : 
; 214  :     if(!(m_pSettings->m_dwFlags & DSBCAPS_LOCDEFER))

  000cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000d8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000db	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  000e1	85 d2		 test	 edx, edx
  000e3	75 0b		 jne	 SHORT $L35594

; 215  :     {
; 216  :         hr = AllocateBufferResources();

  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	e8 00 00 00 00	 call	 ?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ ; DirectSound::CMcpxBuffer::AllocateBufferResources
  000ed	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L35594:

; 217  :     }
; 218  : 
; 219  :     DPF_LEAVE_HRESULT(hr);
; 220  : 
; 221  :     return hr;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 222  : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
?SetBufferData@CMcpxBuffer@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxBuffer::SetBufferData
DSOUND	ENDS
PUBLIC	?ReleaseBufferData@CMcpxBuffer@DirectSound@@QAEJH@Z ; DirectSound::CMcpxBuffer::ReleaseBufferData
PUBLIC	?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ	; DirectSound::CMcpxBuffer::UnmapBuffer
; Function compile flags: /Odt
;	COMDAT ?ReleaseBufferData@CMcpxBuffer@DirectSound@@QAEJH@Z
DSOUND	SEGMENT
_this$ = -4
_fChanging$ = 8
?ReleaseBufferData@CMcpxBuffer@DirectSound@@QAEJH@Z PROC NEAR ; DirectSound::CMcpxBuffer::ReleaseBufferData, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :     DPF_ENTER();
; 252  : 
; 253  :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00007	68 fd 00 00 00	 push	 253			; 000000fdH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0001f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00022	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00028	f7 da		 neg	 edx
  0002a	1b d2		 sbb	 edx, edx
  0002c	f7 da		 neg	 edx
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00034	83 c4 10	 add	 esp, 16			; 00000010H

; 254  : 
; 255  :     //
; 256  :     // If we're LOCDEFER, go ahead and free voice resources.  If not, just
; 257  :     // deactivate the voice and unmap the data buffer.
; 258  :     //
; 259  : 
; 260  :     if(!fChanging && (m_pSettings->m_dwFlags & DSBCAPS_LOCDEFER))

  00037	83 7d 08 00	 cmp	 DWORD PTR _fChanging$[ebp], 0
  0003b	75 20		 jne	 SHORT $L35599
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00046	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00049	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  0004f	85 d2		 test	 edx, edx
  00051	74 0a		 je	 SHORT $L35599

; 261  :     {
; 262  :         ReleaseBufferResources();

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::ReleaseBufferResources

; 263  :     }
; 264  :     else

  0005b	eb 08		 jmp	 SHORT $L35600
$L35599:

; 265  :     {
; 266  :         UnmapBuffer();

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::UnmapBuffer
$L35600:

; 267  :     }
; 268  : 
; 269  :     //
; 270  :     // We're not allowing the current position to persist after changing
; 271  :     // the buffer data.
; 272  :     //
; 273  : 
; 274  :     m_dwCachedPlayCursor = 0;

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 80 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+312], 0

; 275  : 
; 276  :     DPF_LEAVE_HRESULT(DS_OK);
; 277  : 
; 278  :     return DS_OK;

  00072	33 c0		 xor	 eax, eax

; 279  : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?ReleaseBufferData@CMcpxBuffer@DirectSound@@QAEJH@Z ENDP ; DirectSound::CMcpxBuffer::ReleaseBufferData
DSOUND	ENDS
PUBLIC	?MapInputBuffer@CMcpxBuffer@DirectSound@@IAEJXZ	; DirectSound::CMcpxBuffer::MapInputBuffer
PUBLIC	?MapEffectsBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::MapEffectsBuffer
EXTRN	?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::AllocateVoiceResources
; Function compile flags: /Odt
;	COMDAT ?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ PROC NEAR ; DirectSound::CMcpxBuffer::AllocateBufferResources, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 306  :     HRESULT                 hr;
; 307  :     
; 308  :     DPF_ENTER();
; 309  : 
; 310  :     //
; 311  :     // Allocate voice resources
; 312  :     //
; 313  :     
; 314  :     hr = AllocateVoiceResources();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ ; DirectSound::CMcpxVoiceClient::AllocateVoiceResources
  00011	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 315  : 
; 316  :     //
; 317  :     // Map the data buffer
; 318  :     //
; 319  : 
; 320  :     if(SUCCEEDED(hr) && !(m_pSettings->m_dwFlags & DSBCAPS_MIXIN))

  00014	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00018	7c 65		 jl	 SHORT $L35608
  0001a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  0002c	85 d2		 test	 edx, edx
  0002e	75 4f		 jne	 SHORT $L35608

; 321  :     {
; 322  :         if(m_pSettings->m_dwFlags & DSBCAPS_FXIN)

  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00039	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003c	81 e2 00 00 08
	00		 and	 edx, 524288		; 00080000H
  00042	85 d2		 test	 edx, edx
  00044	74 0a		 je	 SHORT $L35609

; 323  :         {
; 324  :             MapEffectsBuffer();

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?MapEffectsBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::MapEffectsBuffer

; 325  :         }
; 326  :         else if(m_pSettings->m_pvBufferData && m_pSettings->m_dwBufferSize)

  0004e	eb 2f		 jmp	 SHORT $L35608
$L35609:
  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00059	83 b9 b8 00 00
	00 00		 cmp	 DWORD PTR [ecx+184], 0
  00060	74 1d		 je	 SHORT $L35608
  00062	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0006b	83 b8 bc 00 00
	00 00		 cmp	 DWORD PTR [eax+188], 0
  00072	74 0b		 je	 SHORT $L35608

; 327  :         {
; 328  :             hr = MapInputBuffer();

  00074	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?MapInputBuffer@CMcpxBuffer@DirectSound@@IAEJXZ ; DirectSound::CMcpxBuffer::MapInputBuffer
  0007c	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L35608:

; 329  :         }
; 330  :     }
; 331  : 
; 332  :     DPF_LEAVE_HRESULT(hr);
; 333  : 
; 334  :     return hr;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 335  : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ ENDP ; DirectSound::CMcpxBuffer::AllocateBufferResources
DSOUND	ENDS
PUBLIC	?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z		; DirectSound::CMcpxBuffer::Stop
EXTRN	?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff
EXTRN	?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::ReleaseVoiceResources
; Function compile flags: /Odt
;	COMDAT ?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxBuffer::ReleaseBufferResources, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 362  :     DWORD                   i;
; 363  :     
; 364  :     DPF_ENTER();
; 365  : 
; 366  :     //
; 367  :     // Make sure the voice is stopped
; 368  :     //
; 369  : 
; 370  :     Stop();

  00009	6a 00		 push	 0
  0000b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Stop

; 371  :     WaitForVoiceOff();

  00013	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff

; 372  : 
; 373  :     //
; 374  :     // Unschedule any pending low-priority tasks (including RELEASERESOURCES)
; 375  :     //
; 376  : 
; 377  :     for(i = 0; i < MCPX_DEFERREDCMD_BUFFER_COUNT; i++)

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00022	eb 09		 jmp	 SHORT $L35617
$L35618:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35617:
  0002d	83 7d fc 05	 cmp	 DWORD PTR _i$[ebp], 5
  00031	73 28		 jae	 SHORT $L35619

; 378  :     {
; 379  :         if(m_aDeferredCommands[i].dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY)

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00036	c1 e1 05	 shl	 ecx, 5
  00039	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 84 0a a0 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+160]
  00043	83 e0 01	 and	 eax, 1
  00046	85 c0		 test	 eax, eax
  00048	74 0f		 je	 SHORT $L35620

; 380  :         {
; 381  :             RemoveDeferredCommand(i);

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 50 1c	 call	 DWORD PTR [eax+28]
$L35620:

; 382  :         }
; 383  :     }

  00059	eb c9		 jmp	 SHORT $L35618
$L35619:

; 384  : 
; 385  :     //
; 386  :     // Unmap the buffer.
; 387  :     //
; 388  : 
; 389  :     UnmapBuffer();

  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::UnmapBuffer

; 390  : 
; 391  :     //
; 392  :     // Clear any left-over status bits
; 393  :     //
; 394  : 
; 395  :     and(&m_dwStatus, MCPX_VOICESTATUS_DEACTIVATEMASK);

  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	83 c1 12	 add	 ecx, 18			; 00000012H
  00069	ba 11 01 00 00	 mov	 edx, 273		; 00000111H
  0006e	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and

; 396  : 
; 397  :     //
; 398  :     // Release voice resources
; 399  :     //
; 400  : 
; 401  :     ReleaseVoiceResources();

  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ReleaseVoiceResources

; 402  : 
; 403  :     DPF_LEAVE_VOID();
; 404  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxBuffer::ReleaseBufferResources
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ?and@@YIXPCGG@Z
DSOUND	SEGMENT
_src$ = -8
_dst$ = -4
?and@@YIXPCGG@Z PROC NEAR				; and, COMDAT
; _dst$ = ecx
; _src$ = dx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	66 89 55 f8	 mov	 WORD PTR _src$[ebp], dx
  0000a	89 4d fc	 mov	 DWORD PTR _dst$[ebp], ecx

; 168  :     __asm
; 169  :     {
; 170  :         and word ptr [ecx], dx

  0000d	66 21 11	 and	 WORD PTR [ecx], dx

; 171  :     }
; 172  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?and@@YIXPCGG@Z ENDP					; and
DSOUND	ENDS
PUBLIC	?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ	; DirectSound::CMcpxBuffer::MapBuffer
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0CJ@NNBHJPBC@m_dwStatus?5?$DN?$DN?5MCPX_VOICESTATUS_A@ ; `string'
PUBLIC	??_C@_0BB@JJLKAIF@?$CBm_pSgeHeapEntry?$AA@	; `string'
PUBLIC	??_C@_0BM@IEGAJIJC@CMcpxBuffer?3?3MapInputBuffer?$AA@ ; `string'
PUBLIC	??_C@_0HB@OFDFMNGN@Out?5of?5scatter?1gather?5entries?4?5?5@ ; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	?Alloc@CMcpxBufferSgeHeap@DirectSound@@QAEPAUSGEHEAPRUNMARKER@@PAXK@Z:NEAR ; DirectSound::CMcpxBufferSgeHeap::Alloc
;	COMDAT ??_C@_0CJ@NNBHJPBC@m_dwStatus?5?$DN?$DN?5MCPX_VOICESTATUS_A@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
DSOUND_RD	SEGMENT
??_C@_0CJ@NNBHJPBC@m_dwStatus?5?$DN?$DN?5MCPX_VOICESTATUS_A@ DB 'm_dwStat'
	DB	'us == MCPX_VOICESTATUS_ALLOCATED', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@JJLKAIF@?$CBm_pSgeHeapEntry?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@JJLKAIF@?$CBm_pSgeHeapEntry?$AA@ DB '!m_pSgeHeapEntry', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEGAJIJC@CMcpxBuffer?3?3MapInputBuffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IEGAJIJC@CMcpxBuffer?3?3MapInputBuffer?$AA@ DB 'CMcpxBuffer::Ma'
	DB	'pInputBuffer', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HB@OFDFMNGN@Out?5of?5scatter?1gather?5entries?4?5?5@
DSOUND_RD	SEGMENT
??_C@_0HB@OFDFMNGN@Out?5of?5scatter?1gather?5entries?4?5?5@ DB 'Out of sc'
	DB	'atter/gather entries.  Either your buffer is too big, or too '
	DB	'many buffers have been mapped at one time.', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?MapInputBuffer@CMcpxBuffer@DirectSound@@IAEJXZ
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
?MapInputBuffer@CMcpxBuffer@DirectSound@@IAEJXZ PROC NEAR ; DirectSound::CMcpxBuffer::MapInputBuffer, COMDAT
; _this$ = ecx

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 431  :     HRESULT                 hr  = DS_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 432  :     
; 433  :     DPF_ENTER();
; 434  : 
; 435  :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00010	68 b3 01 00 00	 push	 435			; 000001b3H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00028	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002b	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00031	f7 da		 neg	 edx
  00033	1b d2		 sbb	 edx, edx
  00035	f7 da		 neg	 edx
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 436  :     ASSERT(m_pSettings->m_pvBufferData);

  00040	68 b4 01 00 00	 push	 436			; 000001b4H
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PDAHIJCP@m_pSettings?9?$DOm_pvBufferData?$AA@
  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00058	33 d2		 xor	 edx, edx
  0005a	83 b9 b8 00 00
	00 00		 cmp	 DWORD PTR [ecx+184], 0
  00061	0f 94 c2	 sete	 dl
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0006a	83 c4 10	 add	 esp, 16			; 00000010H

; 437  :     ASSERT(m_pSettings->m_dwBufferSize);

  0006d	68 b5 01 00 00	 push	 437			; 000001b5H
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GFJKICHP@m_pSettings?9?$DOm_dwBufferSize?$AA@
  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00085	33 d2		 xor	 edx, edx
  00087	83 b9 bc 00 00
	00 00		 cmp	 DWORD PTR [ecx+188], 0
  0008e	0f 94 c2	 sete	 dl
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 438  : 
; 439  :     if(!(m_dwStatus & MCPX_VOICESTATUS_BUFFERMAPPED))

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  000a1	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  000a7	85 c9		 test	 ecx, ecx
  000a9	0f 85 f5 00 00
	00		 jne	 $L35627

; 440  :     {
; 441  :         ASSERT(m_dwStatus == MCPX_VOICESTATUS_ALLOCATED);

  000af	68 b9 01 00 00	 push	 441			; 000001b9H
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  000b9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@NNBHJPBC@m_dwStatus?5?$DN?$DN?5MCPX_VOICESTATUS_A@
  000be	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000c1	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  000c5	83 e8 01	 sub	 eax, 1
  000c8	f7 d8		 neg	 eax
  000ca	1b c0		 sbb	 eax, eax
  000cc	f7 d8		 neg	 eax
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d4	83 c4 10	 add	 esp, 16			; 00000010H

; 442  :         ASSERT(!m_pSgeHeapEntry);

  000d7	68 ba 01 00 00	 push	 442			; 000001baH
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JJLKAIF@?$CBm_pSgeHeapEntry?$AA@
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	33 d2		 xor	 edx, edx
  000eb	83 b9 94 00 00
	00 00		 cmp	 DWORD PTR [ecx+148], 0
  000f2	0f 95 c2	 setne	 dl
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000fb	83 c4 10	 add	 esp, 16			; 00000010H

; 443  : 
; 444  :         //
; 445  :         // Set the status bit that shows that the buffer was mapped
; 446  :         //
; 447  : 
; 448  :         or(&m_dwStatus, MCPX_VOICESTATUS_BUFFERMAPPED);

  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	83 c1 12	 add	 ecx, 18			; 00000012H
  00104	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00109	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 449  : 
; 450  :         //
; 451  :         // Allocate a run of SGEs and map the buffer into the global SGE table
; 452  :         //
; 453  : 
; 454  :         if(!(m_pSgeHeapEntry = m_pMcpxApu->m_SgeHeap.Alloc(m_pSettings->m_pvBufferData, m_pSettings->m_dwBufferSize)))

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00117	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  0011d	52		 push	 edx
  0011e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00121	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00127	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  0012d	52		 push	 edx
  0012e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00131	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00134	81 c1 08 03 00
	00		 add	 ecx, 776		; 00000308H
  0013a	e8 00 00 00 00	 call	 ?Alloc@CMcpxBufferSgeHeap@DirectSound@@QAEPAUSGEHEAPRUNMARKER@@PAXK@Z ; DirectSound::CMcpxBufferSgeHeap::Alloc
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  00148	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0014b	83 ba 94 00 00
	00 00		 cmp	 DWORD PTR [edx+148], 0
  00152	75 34		 jne	 SHORT $L35630

; 455  :         {
; 456  :             DPF_RESOURCE("Out of scatter/gather entries.  Either your buffer is too big, or too many buffers have been mapped at one time.");

  00154	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00159	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IEGAJIJC@CMcpxBuffer?3?3MapInputBuffer?$AA@
  0015e	68 c8 01 00 00	 push	 456			; 000001c8H
  00163	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00168	6a 02		 push	 2
  0016a	6a 09		 push	 9
  0016c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00171	83 c4 18	 add	 esp, 24			; 00000018H
  00174	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0HB@OFDFMNGN@Out?5of?5scatter?1gather?5entries?4?5?5@
  00179	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017e	83 c4 04	 add	 esp, 4

; 457  :             hr = DSERR_OUTOFMEMORY;

  00181	c7 45 fc 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
$L35630:

; 458  :         }
; 459  : 
; 460  :         //
; 461  :         // Complete the mapping operation
; 462  :         //
; 463  : 
; 464  :         if(SUCCEEDED(hr))

  00188	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0018c	7c 08		 jl	 SHORT $L35635

; 465  :         {
; 466  :             MapBuffer();

  0018e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	e8 00 00 00 00	 call	 ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::MapBuffer
$L35635:

; 467  :         }
; 468  : 
; 469  :         //
; 470  :         // If anything went wrong, unmap the buffer
; 471  :         //
; 472  : 
; 473  :         if(FAILED(hr))

  00196	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0019a	7d 08		 jge	 SHORT $L35627

; 474  :         {
; 475  :             UnmapBuffer();

  0019c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	e8 00 00 00 00	 call	 ?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::UnmapBuffer
$L35627:

; 476  :         }
; 477  :     }
; 478  : 
; 479  :     DPF_LEAVE_HRESULT(hr);
; 480  : 
; 481  :     return hr;

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 482  : }

  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
?MapInputBuffer@CMcpxBuffer@DirectSound@@IAEJXZ ENDP	; DirectSound::CMcpxBuffer::MapInputBuffer
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ?or@@YIXPCGG@Z
DSOUND	SEGMENT
_src$ = -8
_dst$ = -4
?or@@YIXPCGG@Z PROC NEAR				; or, COMDAT
; _dst$ = ecx
; _src$ = dx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	66 89 55 f8	 mov	 WORD PTR _src$[ebp], dx
  0000a	89 4d fc	 mov	 DWORD PTR _dst$[ebp], ecx

; 176  :     __asm
; 177  :     {
; 178  :         or word ptr [ecx], dx

  0000d	66 09 11	 or	 WORD PTR [ecx], dx

; 179  :     }
; 180  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?or@@YIXPCGG@Z ENDP					; or
DSOUND	ENDS
PUBLIC	?MapBuffer@CMcpxBuffer@DirectSound@@IAEXK@Z	; DirectSound::CMcpxBuffer::MapBuffer
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.h
;	COMDAT ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ PROC NEAR	; DirectSound::CMcpxBuffer::MapBuffer, COMDAT
; _this$ = ecx

; 116  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  :         MapBuffer(m_pSettings->m_dwPlayStart);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00010	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  00016	52		 push	 edx
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXK@Z ; DirectSound::CMcpxBuffer::MapBuffer

; 118  :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ENDP		; DirectSound::CMcpxBuffer::MapBuffer
DSOUND	ENDS
PUBLIC	?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
PUBLIC	??_C@_0DO@JEFDNHJA@?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAP@ ; `string'
PUBLIC	??_C@_0BN@MNMEPOIP@?$CBm_pSettings?9?$DOm_pvBufferData?$AA@ ; `string'
PUBLIC	??_C@_0BN@FLFJPFNP@?$CBm_pSettings?9?$DOm_dwBufferSize?$AA@ ; `string'
PUBLIC	??_C@_0BO@KLMOFGEK@CMcpxBuffer?3?3MapEffectsBuffer?$AA@ ; `string'
PUBLIC	??_C@_0DK@OCJDFLHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5mixbin?5?$CFlu?5?$CI@ ; `string'
EXTRN	?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A:BYTE ; DirectSound::CMcpxCore::m_ctxMemory
EXTRN	?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z:NEAR ; DirectSound::CDirectSoundBufferSettings::SetBufferData
;	COMDAT ??_C@_0DO@JEFDNHJA@?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAP@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
DSOUND_RD	SEGMENT
??_C@_0DO@JEFDNHJA@?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAP@ DB '(m_p'
	DB	'Settings->m_dwFlags & DSBCAPS_SUBMIXMASK) == DSBCAPS_FXIN', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@MNMEPOIP@?$CBm_pSettings?9?$DOm_pvBufferData?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@MNMEPOIP@?$CBm_pSettings?9?$DOm_pvBufferData?$AA@ DB '!m_pSetti'
	DB	'ngs->m_pvBufferData', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FLFJPFNP@?$CBm_pSettings?9?$DOm_dwBufferSize?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@FLFJPFNP@?$CBm_pSettings?9?$DOm_dwBufferSize?$AA@ DB '!m_pSetti'
	DB	'ngs->m_dwBufferSize', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@KLMOFGEK@CMcpxBuffer?3?3MapEffectsBuffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@KLMOFGEK@CMcpxBuffer?3?3MapEffectsBuffer?$AA@ DB 'CMcpxBuffer::'
	DB	'MapEffectsBuffer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@OCJDFLHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5mixbin?5?$CFlu?5?$CI@
DSOUND_RD	SEGMENT
??_C@_0DK@OCJDFLHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5mixbin?5?$CFlu?5?$CI@ DB 'V'
	DB	'oice %x (%x) using mixbin %lu (address %x) as it''s input', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?MapEffectsBuffer@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -16
_pvBufferData$ = -12
_dwBufferSize$ = -8
_dwVoiceIndex$ = -4
?MapEffectsBuffer@CMcpxBuffer@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxBuffer::MapEffectsBuffer, COMDAT
; _this$ = ecx

; 508  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 509  :     DWORD                   dwVoiceIndex;
; 510  :     LPVOID                  pvBufferData;
; 511  :     DWORD                   dwBufferSize;
; 512  :     
; 513  :     DPF_ENTER();
; 514  : 
; 515  :     ASSERT((m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK) == DSBCAPS_FXIN);

  00009	68 03 02 00 00	 push	 515			; 00000203H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@JEFDNHJA@?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCAP@
  00018	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00021	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00024	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  0002a	33 c0		 xor	 eax, eax
  0002c	81 fa 00 00 08
	00		 cmp	 edx, 524288		; 00080000H
  00032	0f 95 c0	 setne	 al
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 516  :     ASSERT(!m_pSgeHeapEntry);

  0003e	68 04 02 00 00	 push	 516			; 00000204H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JJLKAIF@?$CBm_pSgeHeapEntry?$AA@
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	33 d2		 xor	 edx, edx
  00052	83 b9 94 00 00
	00 00		 cmp	 DWORD PTR [ecx+148], 0
  00059	0f 95 c2	 setne	 dl
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00062	83 c4 10	 add	 esp, 16			; 00000010H

; 517  : 
; 518  :     if(!(m_dwStatus & MCPX_VOICESTATUS_BUFFERMAPPED))

  00065	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00068	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0006c	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00072	85 c9		 test	 ecx, ecx
  00074	0f 85 31 01 00
	00		 jne	 $L35641

; 519  :     {
; 520  :         ASSERT(m_dwStatus == MCPX_VOICESTATUS_ALLOCATED);

  0007a	68 08 02 00 00	 push	 520			; 00000208H
  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@NNBHJPBC@m_dwStatus?5?$DN?$DN?5MCPX_VOICESTATUS_A@
  00089	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00090	83 e8 01	 sub	 eax, 1
  00093	f7 d8		 neg	 eax
  00095	1b c0		 sbb	 eax, eax
  00097	f7 d8		 neg	 eax
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0009f	83 c4 10	 add	 esp, 16			; 00000010H

; 521  :         ASSERT(!m_pSettings->m_pvBufferData);

  000a2	68 09 02 00 00	 push	 521			; 00000209H
  000a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@MNMEPOIP@?$CBm_pSettings?9?$DOm_pvBufferData?$AA@
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000ba	33 c0		 xor	 eax, eax
  000bc	83 ba b8 00 00
	00 00		 cmp	 DWORD PTR [edx+184], 0
  000c3	0f 95 c0	 setne	 al
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000cc	83 c4 10	 add	 esp, 16			; 00000010H

; 522  :         ASSERT(!m_pSettings->m_dwBufferSize);

  000cf	68 0a 02 00 00	 push	 522			; 0000020aH
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  000d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@FLFJPFNP@?$CBm_pSettings?9?$DOm_dwBufferSize?$AA@
  000de	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000e7	33 c0		 xor	 eax, eax
  000e9	83 ba bc 00 00
	00 00		 cmp	 DWORD PTR [edx+188], 0
  000f0	0f 95 c0	 setne	 al
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000f9	83 c4 10	 add	 esp, 16			; 00000010H

; 523  : 
; 524  :         //
; 525  :         // Set the status bit that shows that the buffer was mapped
; 526  :         //
; 527  : 
; 528  :         or(&m_dwStatus, MCPX_VOICESTATUS_BUFFERMAPPED);

  000fc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	83 c1 12	 add	 ecx, 18			; 00000012H
  00102	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00107	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 529  : 
; 530  :         //
; 531  :         // The 2047th SGE is reserved for global multipass (i.e. FXIN) buffers.
; 532  :         // It was already set up for us, so all we have to do here is point the
; 533  :         // voice at it.
; 534  :         //
; 535  : 
; 536  :         dwVoiceIndex = m_pSettings->m_dwInputMixBin - DSMIXBIN_FXSEND_FIRST;

  0010c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00115	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0011b	83 e8 0b	 sub	 eax, 11			; 0000000bH
  0011e	89 45 fc	 mov	 DWORD PTR _dwVoiceIndex$[ebp], eax

; 537  : 
; 538  :         dwBufferSize = SamplesToBytes(MCPX_HW_FRAME_SIZE_SAMPLES);

  00121	6a 20		 push	 32			; 00000020H
  00123	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	e8 00 00 00 00	 call	 ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
  0012b	89 45 f8	 mov	 DWORD PTR _dwBufferSize$[ebp], eax

; 539  :         pvBufferData = (LPBYTE)m_pMcpxApu->m_ctxMemory[MCPX_MEM_GPMULTIPASS].VirtualAddress + (dwVoiceIndex * dwBufferSize);

  0012e	8b 4d fc	 mov	 ecx, DWORD PTR _dwVoiceIndex$[ebp]
  00131	0f af 4d f8	 imul	 ecx, DWORD PTR _dwBufferSize$[ebp]
  00135	8b 15 b0 00 00
	00		 mov	 edx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+176
  0013b	03 d1		 add	 edx, ecx
  0013d	89 55 f4	 mov	 DWORD PTR _pvBufferData$[ebp], edx

; 540  : 
; 541  :         m_pSettings->SetBufferData(pvBufferData, dwBufferSize);

  00140	8b 45 f8	 mov	 eax, DWORD PTR _dwBufferSize$[ebp]
  00143	50		 push	 eax
  00144	8b 4d f4	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  00147	51		 push	 ecx
  00148	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0014b	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  00151	e8 00 00 00 00	 call	 ?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z ; DirectSound::CDirectSoundBufferSettings::SetBufferData

; 542  : 
; 543  :         DPF_INFO("Voice %x (%x) using mixbin %lu (address %x) as it's input", this, m_ahVoices[0], m_pSettings->m_dwInputMixBin, pvBufferData);

  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0015b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@KLMOFGEK@CMcpxBuffer?3?3MapEffectsBuffer?$AA@
  00160	68 1f 02 00 00	 push	 543			; 0000021fH
  00165	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0016a	6a 04		 push	 4
  0016c	6a 09		 push	 9
  0016e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00173	83 c4 18	 add	 esp, 24			; 00000018H
  00176	8b 45 f4	 mov	 eax, DWORD PTR _pvBufferData$[ebp]
  00179	50		 push	 eax
  0017a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00183	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00189	50		 push	 eax
  0018a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00191	52		 push	 edx
  00192	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00195	50		 push	 eax
  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@OCJDFLHJ@Voice?5?$CFx?5?$CI?$CFx?$CJ?5using?5mixbin?5?$CFlu?5?$CI@
  0019b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a0	83 c4 14	 add	 esp, 20			; 00000014H

; 544  : 
; 545  :         //
; 546  :         // Complete the mapping operation
; 547  :         //
; 548  : 
; 549  :         MapBuffer();

  001a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a6	e8 00 00 00 00	 call	 ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::MapBuffer
$L35641:

; 550  :     }
; 551  : 
; 552  :     DPF_LEAVE_VOID();
; 553  : }

  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c3		 ret	 0
?MapEffectsBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxBuffer::MapEffectsBuffer
DSOUND	ENDS
PUBLIC	??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@ ; `string'
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.h
DSOUND_RD	SEGMENT
??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpvoice.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT
??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@ DB 'WAVE'
	DB	'_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwSamples$ = 8
?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::SamplesToBytes, COMDAT
; _this$ = ecx

; 256  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 257  : 	    if(WAVE_FORMAT_XBOX_ADPCM == m_pSettings->m_fmt.wFormatTag)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0000d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00011	83 fa 69	 cmp	 edx, 105		; 00000069H
  00014	75 12		 jne	 SHORT $L34969

; 258  :         {
; 259  :             return (dwSamples >> 6) * m_pSettings->m_fmt.nBlockAlign;

  00016	8b 45 08	 mov	 eax, DWORD PTR _dwSamples$[ebp]
  00019	c1 e8 06	 shr	 eax, 6
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00022	0f af 42 14	 imul	 eax, DWORD PTR [edx+20]
  00026	eb 38		 jmp	 SHORT $L34968
$L34969:

; 260  :         }
; 261  :         else
; 262  :         {
; 263  :             ASSERT(WAVE_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag);

  00028	68 07 01 00 00	 push	 263			; 00000107H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0003d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00041	83 ea 01	 sub	 edx, 1
  00044	f7 da		 neg	 edx
  00046	1b d2		 sbb	 edx, edx
  00048	f7 da		 neg	 edx
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 264  :         
; 265  :             return dwSamples * m_pSettings->m_fmt.nBlockAlign;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00059	8b 45 08	 mov	 eax, DWORD PTR _dwSamples$[ebp]
  0005c	0f af 41 14	 imul	 eax, DWORD PTR [ecx+20]
$L34968:

; 266  :         }
; 267  :     }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ENDP ; DirectSound::CMcpxVoiceClient::SamplesToBytes
DSOUND	ENDS
PUBLIC	??0CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::~CAutoIrql
PUBLIC	??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ ; `string'
PUBLIC	??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@ ; `string'
PUBLIC	??_C@_0EB@OMECILEI@?$CB?$CI?$CI?$CIDWORD?$CJm_pSettings?9?$DOm_pvBuffe@ ; `string'
PUBLIC	??_C@_09BNKJGGDH@?$CBdwOffset?$AA@		; `string'
PUBLIC	??_C@_0BA@IFMKODNE@m_pSgeHeapEntry?$AA@		; `string'
PUBLIC	??_C@_0FA@EBICGIKN@dwSgeIndex?5?$DM?5?$CIDWORD?$CJm_pSgeHeapEn@ ; `string'
PUBLIC	??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@ ; `string'
PUBLIC	??_C@_0BF@EPINDCIM@dwOffset?5?$DM?5PAGE_SIZE?$AA@ ; `string'
;	COMDAT ??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
DSOUND_RD	SEGMENT
??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@ DB '!'
	DB	'(m_pSettings->m_dwFlags & DSBCAPS_MIXIN)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
DSOUND_RD	SEGMENT
??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@ DB 'm_dwStatus '
	DB	'& MCPX_VOICESTATUS_ALLOCATED', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EB@OMECILEI@?$CB?$CI?$CI?$CIDWORD?$CJm_pSettings?9?$DOm_pvBuffe@
DSOUND_RD	SEGMENT
??_C@_0EB@OMECILEI@?$CB?$CI?$CI?$CIDWORD?$CJm_pSettings?9?$DOm_pvBuffe@ DB '!'
	DB	'(((DWORD)m_pSettings->m_pvBufferData + dwOffset) % dwAlignmen'
	DB	't)', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_09BNKJGGDH@?$CBdwOffset?$AA@
DSOUND_RD	SEGMENT
??_C@_09BNKJGGDH@?$CBdwOffset?$AA@ DB '!dwOffset', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IFMKODNE@m_pSgeHeapEntry?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@IFMKODNE@m_pSgeHeapEntry?$AA@ DB 'm_pSgeHeapEntry', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FA@EBICGIKN@dwSgeIndex?5?$DM?5?$CIDWORD?$CJm_pSgeHeapEn@
DSOUND_RD	SEGMENT
??_C@_0FA@EBICGIKN@dwSgeIndex?5?$DM?5?$CIDWORD?$CJm_pSgeHeapEn@ DB 'dwSge'
	DB	'Index < (DWORD)m_pSgeHeapEntry->nElement + (DWORD)m_pSgeHeapE'
	DB	'ntry->nLength', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@
DSOUND_RD	SEGMENT
??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@ DB 'dwSgeIndex '
	DB	'< MCPX_HW_MAX_BUFFER_PRDS', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@EPINDCIM@dwOffset?5?$DM?5PAGE_SIZE?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@EPINDCIM@dwOffset?5?$DM?5PAGE_SIZE?$AA@ DB 'dwOffset < PAGE_SIZ'
	DB	'E', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXK@Z
DSOUND	SEGMENT
_this$ = -24
___AutoIrql$ = -20
_dwAlignment$ = -12
_dwSgeIndex$ = -4
_dwOffset$ = 8
?MapBuffer@CMcpxBuffer@DirectSound@@IAEXK@Z PROC NEAR	; DirectSound::CMcpxBuffer::MapBuffer, COMDAT
; _this$ = ecx

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 580  : 
; 581  : #ifdef DEBUG
; 582  : 
; 583  :     DWORD                   dwAlignment;
; 584  : 
; 585  : #endif // DEBUG
; 586  : 
; 587  :     DWORD                   dwSgeIndex;
; 588  :     DWORD                   i;
; 589  :     
; 590  :     DPF_ENTER();
; 591  :     AutoIrql();

  00009	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 592  : 
; 593  :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_MIXIN));

  00011	68 51 02 00 00	 push	 593			; 00000251H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00020	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00032	f7 da		 neg	 edx
  00034	1b d2		 sbb	 edx, edx
  00036	f7 da		 neg	 edx
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 594  :     ASSERT(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  00041	68 52 02 00 00	 push	 594			; 00000252H
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
  00050	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00057	83 e1 01	 and	 ecx, 1
  0005a	f7 d9		 neg	 ecx
  0005c	1b c9		 sbb	 ecx, ecx
  0005e	41		 inc	 ecx
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00065	83 c4 10	 add	 esp, 16			; 00000010H

; 595  : 
; 596  : #ifdef DEBUG
; 597  : 
; 598  :     //
; 599  :     // Validate that the buffer base address and offset are properly aligned
; 600  :     //
; 601  :     
; 602  :     if(WAVE_FORMAT_XBOX_ADPCM == m_pSettings->m_fmt.wFormatTag)

  00068	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00071	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00075	83 f9 69	 cmp	 ecx, 105		; 00000069H
  00078	75 09		 jne	 SHORT $L35662

; 603  :     {
; 604  :         dwAlignment = 4;

  0007a	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _dwAlignment$[ebp], 4

; 605  :     }
; 606  :     else if(8 == m_pSettings->m_fmt.wBitsPerSample)

  00081	eb 61		 jmp	 SHORT $L35663
$L35662:
  00083	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00086	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0008c	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  00090	83 f9 08	 cmp	 ecx, 8
  00093	75 09		 jne	 SHORT $L35664

; 607  :     {
; 608  :         dwAlignment = 1;

  00095	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwAlignment$[ebp], 1

; 609  :     }
; 610  :     else if(16 == m_pSettings->m_fmt.wBitsPerSample)

  0009c	eb 46		 jmp	 SHORT $L35663
$L35664:
  0009e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000a7	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  000ab	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000ae	75 09		 jne	 SHORT $L35666

; 611  :     {
; 612  :         dwAlignment = 2;

  000b0	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwAlignment$[ebp], 2

; 613  :     }
; 614  :     else if((24 == m_pSettings->m_fmt.wBitsPerSample) || (32 == m_pSettings->m_fmt.wBitsPerSample))

  000b7	eb 2b		 jmp	 SHORT $L35663
$L35666:
  000b9	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000c2	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  000c6	83 f9 18	 cmp	 ecx, 24			; 00000018H
  000c9	74 12		 je	 SHORT $L35669
  000cb	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000ce	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000d4	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  000d8	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000db	75 07		 jne	 SHORT $L35663
$L35669:

; 615  :     {
; 616  :         dwAlignment = 4;

  000dd	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _dwAlignment$[ebp], 4
$L35663:

; 617  :     }
; 618  : 
; 619  :     ASSERT(!(((DWORD)m_pSettings->m_pvBufferData + dwOffset) % dwAlignment));

  000e4	68 6b 02 00 00	 push	 619			; 0000026bH
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  000ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@OMECILEI@?$CB?$CI?$CI?$CIDWORD?$CJm_pSettings?9?$DOm_pvBuffe@
  000f3	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000f6	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000fc	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR [eax+184]
  00102	03 45 08	 add	 eax, DWORD PTR _dwOffset$[ebp]
  00105	33 d2		 xor	 edx, edx
  00107	f7 75 f4	 div	 DWORD PTR _dwAlignment$[ebp]
  0010a	f7 da		 neg	 edx
  0010c	1b d2		 sbb	 edx, edx
  0010e	f7 da		 neg	 edx
  00110	52		 push	 edx
  00111	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00116	83 c4 10	 add	 esp, 16			; 00000010H

; 620  : 
; 621  : #endif // DEBUG
; 622  : 
; 623  :     //
; 624  :     // Calculate the proper base SGE index.  For FXIN buffers, it's the 
; 625  :     // reserved 2047th one that's already set up for us.  For standard
; 626  :     // buffers, calculate the proper index based on the offset from the
; 627  :     // start of the base page.
; 628  :     //
; 629  :     
; 630  :     ASSERT(m_pSettings->m_pvBufferData);

  00119	68 76 02 00 00	 push	 630			; 00000276H
  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00123	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PDAHIJCP@m_pSettings?9?$DOm_pvBufferData?$AA@
  00128	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00131	33 c0		 xor	 eax, eax
  00133	83 ba b8 00 00
	00 00		 cmp	 DWORD PTR [edx+184], 0
  0013a	0f 94 c0	 sete	 al
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00143	83 c4 10	 add	 esp, 16			; 00000010H

; 631  :     
; 632  :     if(m_pSettings->m_dwFlags & DSBCAPS_FXIN)

  00146	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0014f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00152	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00157	85 c0		 test	 eax, eax
  00159	74 6b		 je	 SHORT $L35672

; 633  :     {
; 634  :         ASSERT(!m_pSgeHeapEntry);

  0015b	68 7a 02 00 00	 push	 634			; 0000027aH
  00160	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00165	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JJLKAIF@?$CBm_pSgeHeapEntry?$AA@
  0016a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016d	33 d2		 xor	 edx, edx
  0016f	83 b9 94 00 00
	00 00		 cmp	 DWORD PTR [ecx+148], 0
  00176	0f 95 c2	 setne	 dl
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0017f	83 c4 10	 add	 esp, 16			; 00000010H

; 635  :         ASSERT(!dwOffset);

  00182	68 7b 02 00 00	 push	 635			; 0000027bH
  00187	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0018c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09BNKJGGDH@?$CBdwOffset?$AA@
  00191	33 c0		 xor	 eax, eax
  00193	83 7d 08 00	 cmp	 DWORD PTR _dwOffset$[ebp], 0
  00197	0f 95 c0	 setne	 al
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001a0	83 c4 10	 add	 esp, 16			; 00000010H

; 636  :         
; 637  :         dwOffset = BYTE_OFFSET(m_pSettings->m_pvBufferData);

  001a3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a6	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  001ac	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  001b2	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  001b7	89 45 08	 mov	 DWORD PTR _dwOffset$[ebp], eax

; 638  :         dwSgeIndex = MCPX_HW_MAX_BUFFER_PRDS - 1;

  001ba	c7 45 fc ff 07
	00 00		 mov	 DWORD PTR _dwSgeIndex$[ebp], 2047 ; 000007ffH

; 639  :     }
; 640  :     else

  001c1	e9 a8 00 00 00	 jmp	 $L35676
$L35672:

; 641  :     {
; 642  :         ASSERT(m_pSgeHeapEntry);

  001c6	68 82 02 00 00	 push	 642			; 00000282H
  001cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  001d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IFMKODNE@m_pSgeHeapEntry?$AA@
  001d5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d8	33 d2		 xor	 edx, edx
  001da	83 b9 94 00 00
	00 00		 cmp	 DWORD PTR [ecx+148], 0
  001e1	0f 94 c2	 sete	 dl
  001e4	52		 push	 edx
  001e5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001ea	83 c4 10	 add	 esp, 16			; 00000010H

; 643  : 
; 644  :         dwSgeIndex = m_pSgeHeapEntry->nElement;

  001ed	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001f0	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  001f6	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  001fa	89 55 fc	 mov	 DWORD PTR _dwSgeIndex$[ebp], edx

; 645  :         
; 646  :         dwOffset += BYTE_OFFSET(m_pSettings->m_pvBufferData);

  001fd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00200	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00206	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  0020c	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00212	8b 45 08	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00215	03 c2		 add	 eax, edx
  00217	89 45 08	 mov	 DWORD PTR _dwOffset$[ebp], eax

; 647  :         dwSgeIndex += dwOffset >> PAGE_SHIFT;

  0021a	8b 4d 08	 mov	 ecx, DWORD PTR _dwOffset$[ebp]
  0021d	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00220	8b 55 fc	 mov	 edx, DWORD PTR _dwSgeIndex$[ebp]
  00223	03 d1		 add	 edx, ecx
  00225	89 55 fc	 mov	 DWORD PTR _dwSgeIndex$[ebp], edx

; 648  : 
; 649  :         ASSERT(dwSgeIndex < (DWORD)m_pSgeHeapEntry->nElement + (DWORD)m_pSgeHeapEntry->nLength);

  00228	68 89 02 00 00	 push	 649			; 00000289H
  0022d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00232	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FA@EBICGIKN@dwSgeIndex?5?$DM?5?$CIDWORD?$CJm_pSgeHeapEn@
  00237	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0023a	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00240	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  00244	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00247	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0024d	0f b7 41 0a	 movzx	 eax, WORD PTR [ecx+10]
  00251	03 d0		 add	 edx, eax
  00253	39 55 fc	 cmp	 DWORD PTR _dwSgeIndex$[ebp], edx
  00256	1b c9		 sbb	 ecx, ecx
  00258	41		 inc	 ecx
  00259	51		 push	 ecx
  0025a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0025f	83 c4 10	 add	 esp, 16			; 00000010H

; 650  :         
; 651  :         dwOffset &= PAGE_SIZE - 1;

  00262	8b 55 08	 mov	 edx, DWORD PTR _dwOffset$[ebp]
  00265	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0026b	89 55 08	 mov	 DWORD PTR _dwOffset$[ebp], edx
$L35676:

; 652  :     }
; 653  : 
; 654  :     //
; 655  :     // Calculate the buffer address register value.  The low word represents
; 656  :     // the page offset, while the high word represents the entry into the 
; 657  :     // SGE table.
; 658  :     //
; 659  : 
; 660  :     ASSERT(dwSgeIndex < MCPX_HW_MAX_BUFFER_PRDS);

  0026e	68 94 02 00 00	 push	 660			; 00000294H
  00273	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00278	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@MKDGEMOO@dwSgeIndex?5?$DM?5MCPX_HW_MAX_BUFFER_@
  0027d	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _dwSgeIndex$[ebp], 2048 ; 00000800H
  00284	1b c0		 sbb	 eax, eax
  00286	40		 inc	 eax
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0028d	83 c4 10	 add	 esp, 16			; 00000010H

; 661  :     ASSERT(dwOffset < PAGE_SIZE);

  00290	68 95 02 00 00	 push	 661			; 00000295H
  00295	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0029a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@EPINDCIM@dwOffset?5?$DM?5PAGE_SIZE?$AA@
  0029f	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR _dwOffset$[ebp], 4096 ; 00001000H
  002a6	1b c9		 sbb	 ecx, ecx
  002a8	41		 inc	 ecx
  002a9	51		 push	 ecx
  002aa	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002af	83 c4 10	 add	 esp, 16			; 00000010H

; 662  :     
; 663  :     m_dwBufferBase = (dwSgeIndex << PAGE_SHIFT) | dwOffset;

  002b2	8b 55 fc	 mov	 edx, DWORD PTR _dwSgeIndex$[ebp]
  002b5	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  002b8	0b 55 08	 or	 edx, DWORD PTR _dwOffset$[ebp]
  002bb	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002be	89 90 44 01 00
	00		 mov	 DWORD PTR [eax+324], edx

; 664  : 
; 665  :     DPF_LEAVE_VOID();
; 666  : }

  002c4	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  002c7	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  002cc	8b e5		 mov	 esp, ebp
  002ce	5d		 pop	 ebp
  002cf	c2 04 00	 ret	 4
?MapBuffer@CMcpxBuffer@DirectSound@@IAEXK@Z ENDP	; DirectSound::CMcpxBuffer::MapBuffer
DSOUND	ENDS
PUBLIC	??0CIrql@DirectSound@@QAE@XZ			; DirectSound::CIrql::CIrql
PUBLIC	?Raise@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 77   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 78   :         Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 79   :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@DirectSound@@QAE@XZ PROC NEAR			; DirectSound::CIrql::CIrql, COMDAT
; _this$ = ecx

; 40   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   :         m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 42   :     }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Raise, COMDAT
; _this$ = ecx

; 45   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   :         if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L30264

; 47   :         {
; 48   :             m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L30264:

; 49   :         }
; 50   :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	?Lower@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 82   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   :         Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 84   :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::~CAutoIrql
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Lower, COMDAT
; _this$ = ecx

; 53   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :         if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L30269

; 55   :         {
; 56   :             KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 57   :             m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L30269:

; 58   :         }
; 59   :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Lower
DSOUND	ENDS
EXTRN	?Free@CMcpxBufferSgeHeap@DirectSound@@QAEXPAUSGEHEAPRUNMARKER@@@Z:NEAR ; DirectSound::CMcpxBufferSgeHeap::Free
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
;	COMDAT ?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ PROC NEAR	; DirectSound::CMcpxBuffer::UnmapBuffer, COMDAT
; _this$ = ecx

; 692  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 693  :     DPF_ENTER();
; 694  : 
; 695  :     //
; 696  :     // Make sure the voice is stopped
; 697  :     //
; 698  : 
; 699  :     Stop();

  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Stop

; 700  :     WaitForVoiceOff();

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff

; 701  : 
; 702  :     //
; 703  :     // Unmap the buffer
; 704  :     //
; 705  : 
; 706  :     if(m_dwStatus & MCPX_VOICESTATUS_BUFFERMAPPED)

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00020	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00026	85 c9		 test	 ecx, ecx
  00028	74 46		 je	 SHORT $L35689

; 707  :     {
; 708  :         //
; 709  :         // Clear the status bit
; 710  :         //
; 711  : 
; 712  :         and(&m_dwStatus, ~MCPX_VOICESTATUS_BUFFERMAPPED);

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 12	 add	 ecx, 18			; 00000012H
  00030	ba ff fe 00 00	 mov	 edx, 65279		; 0000feffH
  00035	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and

; 713  :         
; 714  :         //
; 715  :         // Release the SGE
; 716  :         //
; 717  : 
; 718  :         if(m_pSgeHeapEntry)

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	83 ba 94 00 00
	00 00		 cmp	 DWORD PTR [edx+148], 0
  00044	74 28		 je	 SHORT $L35690

; 719  :         {
; 720  :             m_pMcpxApu->m_SgeHeap.Free(m_pSgeHeapEntry);

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  0004f	51		 push	 ecx
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00056	81 c1 08 03 00
	00		 add	 ecx, 776		; 00000308H
  0005c	e8 00 00 00 00	 call	 ?Free@CMcpxBufferSgeHeap@DirectSound@@QAEXPAUSGEHEAPRUNMARKER@@@Z ; DirectSound::CMcpxBufferSgeHeap::Free

; 721  :             m_pSgeHeapEntry = NULL;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+148], 0
$L35690:

; 722  :         }
; 723  :     }
; 724  :     else

  0006e	eb 28		 jmp	 SHORT $L35688
$L35689:

; 725  :     {
; 726  :         ASSERT(!(m_dwStatus & ~MCPX_VOICESTATUS_ALLOCATED));

  00070	68 d6 02 00 00	 push	 726			; 000002d6H
  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@KFIKMGCB@?$CB?$CIm_dwStatus?5?$CG?5?$HOMCPX_VOICESTATUS@
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00086	83 e2 fe	 and	 edx, -2			; fffffffeH
  00089	f7 da		 neg	 edx
  0008b	1b d2		 sbb	 edx, edx
  0008d	f7 da		 neg	 edx
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00095	83 c4 10	 add	 esp, 16			; 00000010H
$L35688:

; 727  :     }
; 728  : 
; 729  :     DPF_LEAVE_VOID();
; 730  : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?UnmapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxBuffer::UnmapBuffer
DSOUND	ENDS
PUBLIC	?Play@CMcpxBuffer@DirectSound@@QAEJK@Z		; DirectSound::CMcpxBuffer::Play
PUBLIC	?Play@CMcpxBuffer@DirectSound@@QAEJ_JK@Z	; DirectSound::CMcpxBuffer::Play
; Function compile flags: /Odt
;	COMDAT ?Play@CMcpxBuffer@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_fDeferred$ = -4
_rtTimeStamp$ = 8
_dwFlags$ = 16
?Play@CMcpxBuffer@DirectSound@@QAEJ_JK@Z PROC NEAR	; DirectSound::CMcpxBuffer::Play, COMDAT
; _this$ = ecx

; 758  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 759  :     BOOL                    fDeferred   = FALSE;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fDeferred$[ebp], 0

; 760  :     HRESULT                 hr          = DS_OK;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 761  : 
; 762  :     DPF_ENTER();
; 763  : 
; 764  :     if(rtTimeStamp)

  00017	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0001a	0b 45 0c	 or	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $L35700

; 765  :     {
; 766  :         fDeferred = ScheduleDeferredCommand(MCPX_DEFERREDCMD_BUFFER_PLAY, rtTimeStamp, dwFlags);

  00021	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp+4]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0002c	50		 push	 eax
  0002d	6a 03		 push	 3
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	ff 52 18	 call	 DWORD PTR [edx+24]
  0003a	89 45 fc	 mov	 DWORD PTR _fDeferred$[ebp], eax
$L35700:

; 767  :     }
; 768  : 
; 769  :     if(!fDeferred)

  0003d	83 7d fc 00	 cmp	 DWORD PTR _fDeferred$[ebp], 0
  00041	75 0f		 jne	 SHORT $L35701

; 770  :     {
; 771  :         hr = Play(dwFlags);

  00043	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00046	50		 push	 eax
  00047	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play
  0004f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L35701:

; 772  :     }
; 773  : 
; 774  :     DPF_LEAVE_HRESULT(hr);
; 775  : 
; 776  :     return hr;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 777  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?Play@CMcpxBuffer@DirectSound@@QAEJ_JK@Z ENDP		; DirectSound::CMcpxBuffer::Play
DSOUND	ENDS
PUBLIC	?PlayFromCurrent@CMcpxBuffer@DirectSound@@IAEXK@Z ; DirectSound::CMcpxBuffer::PlayFromCurrent
PUBLIC	?PlayFromPosition@CMcpxBuffer@DirectSound@@IAEXKK@Z ; DirectSound::CMcpxBuffer::PlayFromPosition
EXTRN	?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::ActivateVoice
; Function compile flags: /Odt
;	COMDAT ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_dwCurrentBufferOffset$ = -4
_dwFlags$ = 8
?Play@CMcpxBuffer@DirectSound@@QAEJK@Z PROC NEAR	; DirectSound::CMcpxBuffer::Play, COMDAT
; _this$ = ecx

; 803  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 804  :     DWORD                   dwCurrentBufferOffset;
; 805  :     HRESULT                 hr;
; 806  :     
; 807  :     DPF_ENTER();
; 808  : 
; 809  :     //
; 810  :     // Make sure resources are allocated
; 811  :     //
; 812  : 
; 813  :     hr = AllocateBufferResources();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?AllocateBufferResources@CMcpxBuffer@DirectSound@@IAEJXZ ; DirectSound::CMcpxBuffer::AllocateBufferResources
  00011	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 814  : 
; 815  :     //
; 816  :     // Handle the different modes of playing the buffer:  normal, 
; 817  :     // extra-crispy... no, wait; normal, non-zero position, mixin.
; 818  :     //
; 819  : 
; 820  :     if(SUCCEEDED(hr))

  00014	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00018	0f 8c a6 00 00
	00		 jl	 $L35709

; 821  :     {
; 822  :         if(m_pSettings->m_dwFlags & DSBCAPS_MIXIN)

  0001e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00027	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002a	81 e2 00 20 00
	00		 and	 edx, 8192		; 00002000H
  00030	85 d2		 test	 edx, edx
  00032	74 0d		 je	 SHORT $L35710

; 823  :         {
; 824  :             //
; 825  :             // Just activate the voice.  The hardware takes care of the rest
; 826  :             //
; 827  :             
; 828  :             ActivateVoice();

  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ActivateVoice

; 829  :         }
; 830  :         else 

  0003c	e9 83 00 00 00	 jmp	 $L35709
$L35710:

; 831  :         {
; 832  :             //
; 833  :             // Determine where to start playback from
; 834  :             //
; 835  :             
; 836  :             if(!(dwFlags & DSBPLAY_FROMSTART) && !(m_dwStatus & MCPX_VOICESTATUS_ACTIVE))

  00041	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00044	83 e0 02	 and	 eax, 2
  00047	85 c0		 test	 eax, eax
  00049	75 1c		 jne	 SHORT $L35712
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00052	83 e2 02	 and	 edx, 2
  00055	85 d2		 test	 edx, edx
  00057	75 0e		 jne	 SHORT $L35712

; 837  :             {
; 838  :                 dwCurrentBufferOffset = m_dwCachedPlayCursor;

  00059	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 88 38 01 00
	00		 mov	 ecx, DWORD PTR [eax+312]
  00062	89 4d fc	 mov	 DWORD PTR _dwCurrentBufferOffset$[ebp], ecx

; 839  :             }
; 840  :             else

  00065	eb 07		 jmp	 SHORT $L35713
$L35712:

; 841  :             {
; 842  :                 dwCurrentBufferOffset = 0;

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwCurrentBufferOffset$[ebp], 0
$L35713:

; 843  :             }
; 844  : 
; 845  :             m_dwCachedPlayCursor = 0;

  0006e	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00071	c7 82 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+312], 0

; 846  : 
; 847  :             //
; 848  :             // Hand off to the proper play handler
; 849  :             //
; 850  :             
; 851  :             if(dwCurrentBufferOffset)

  0007b	83 7d fc 00	 cmp	 DWORD PTR _dwCurrentBufferOffset$[ebp], 0
  0007f	74 12		 je	 SHORT $L35714

; 852  :             {
; 853  :                 PlayFromPosition(dwCurrentBufferOffset, dwFlags);

  00081	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _dwCurrentBufferOffset$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?PlayFromPosition@CMcpxBuffer@DirectSound@@IAEXKK@Z ; DirectSound::CMcpxBuffer::PlayFromPosition

; 854  :             }
; 855  :             else

  00091	eb 0c		 jmp	 SHORT $L35715
$L35714:

; 856  :             {
; 857  :                 PlayFromCurrent(dwFlags);

  00093	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00096	52		 push	 edx
  00097	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?PlayFromCurrent@CMcpxBuffer@DirectSound@@IAEXK@Z ; DirectSound::CMcpxBuffer::PlayFromCurrent
$L35715:

; 858  :             }
; 859  : 
; 860  :             //
; 861  :             // Register for position notification callbacks
; 862  :             //
; 863  : 
; 864  :             if(m_pSettings->m_dwNotifyCount)

  0009f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000a8	83 b9 d8 00 00
	00 00		 cmp	 DWORD PTR [ecx+216], 0
  000af	74 13		 je	 SHORT $L35709

; 865  :             {
; 866  :                 ScheduleDeferredCommand(MCPX_DEFERREDCMD_BUFFER_POSITIONDELTA, 0, 0);

  000b1	6a 00		 push	 0
  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	6a 02		 push	 2
  000b9	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	8b 02		 mov	 eax, DWORD PTR [edx]
  000be	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	ff 50 18	 call	 DWORD PTR [eax+24]
$L35709:

; 867  :             }
; 868  :         }
; 869  :     }
; 870  : 
; 871  :     DPF_LEAVE_HRESULT(hr);
; 872  : 
; 873  :     return hr;

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 874  : }

  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 04 00	 ret	 4
?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ENDP		; DirectSound::CMcpxBuffer::Play
DSOUND	ENDS
PUBLIC	?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
PUBLIC	?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
PUBLIC	??_C@_0BG@BEKIPBPF@dwEndBufferOffset?5?$DO?51?$AA@ ; `string'
PUBLIC	??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
;	COMDAT ??_C@_0BG@BEKIPBPF@dwEndBufferOffset?5?$DO?51?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@BEKIPBPF@dwEndBufferOffset?5?$DO?51?$AA@ DB 'dwEndBufferOffset '
	DB	'> 1', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ DB 'Ke'
	DB	'GetCurrentIrql() == DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'8 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?PlayFromCurrent@CMcpxBuffer@DirectSound@@IAEXK@Z
DSOUND	SEGMENT
_this$ = -32
_dwIncrement$ = -28
_dwEndBufferOffset$ = -24
_dwLoopBackOffset$ = -16
_i$ = -12
_irql$ = -8
_dwFlags$ = 8
?PlayFromCurrent@CMcpxBuffer@DirectSound@@IAEXK@Z PROC NEAR ; DirectSound::CMcpxBuffer::PlayFromCurrent, COMDAT
; _this$ = ecx

; 900  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 901  :     DWORD                   dwLoopBackOffset;
; 902  :     DWORD                   dwEndBufferOffset;
; 903  :     DWORD                   dwIncrement;
; 904  :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 905  :     HRESULT                 hr;
; 906  :     DWORD                   i;
; 907  :     
; 908  :     DPF_ENTER();
; 909  : 
; 910  :     ASSERT(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  00011	68 8e 03 00 00	 push	 910			; 0000038eH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
  00020	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00027	83 e1 01	 and	 ecx, 1
  0002a	f7 d9		 neg	 ecx
  0002c	1b c9		 sbb	 ecx, ecx
  0002e	41		 inc	 ecx
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 911  :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_MIXIN));

  00038	68 8f 03 00 00	 push	 911			; 0000038fH
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00047	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00050	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00053	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  00059	f7 d9		 neg	 ecx
  0005b	1b c9		 sbb	 ecx, ecx
  0005d	f7 d9		 neg	 ecx
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00065	83 c4 10	 add	 esp, 16			; 00000010H

; 912  : 
; 913  :     //
; 914  :     // Raise IRQL for synchronization
; 915  :     //
; 916  : 
; 917  :     irql.Raise();

  00068	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0006b	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 918  : 
; 919  :     //
; 920  :     // Calculate the proper starting and ending buffer offsets as well
; 921  :     // as the proper loop region
; 922  :     //
; 923  : 
; 924  :     if(dwFlags & DSBPLAY_LOOPING)

  00070	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00073	83 e2 01	 and	 edx, 1
  00076	85 d2		 test	 edx, edx
  00078	74 6f		 je	 SHORT $L35727

; 925  :     {
; 926  :         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP_ON, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP);

  0007a	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00080	81 e1 ff ff ff
	fd		 and	 ecx, -33554433		; fdffffffH
  00086	81 c9 00 00 00
	02		 or	 ecx, 33554432		; 02000000H
  0008c	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 927  : 
; 928  :         dwLoopBackOffset = BytesToSamples(m_pSettings->m_dwLoopStart);

  00092	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0009b	8b 91 c8 00 00
	00		 mov	 edx, DWORD PTR [ecx+200]
  000a1	52		 push	 edx
  000a2	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
  000aa	89 45 f0	 mov	 DWORD PTR _dwLoopBackOffset$[ebp], eax

; 929  :         dwEndBufferOffset = BytesToSamples(m_pSettings->m_dwLoopStart + m_pSettings->m_dwLoopLength);

  000ad	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000b6	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000b9	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000bf	8b 89 c8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+200]
  000c5	03 88 cc 00 00
	00		 add	 ecx, DWORD PTR [eax+204]
  000cb	51		 push	 ecx
  000cc	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
  000d4	89 45 e8	 mov	 DWORD PTR _dwEndBufferOffset$[ebp], eax

; 930  : 
; 931  :         or(&m_dwStatus, MCPX_VOICESTATUS_LOOPING);

  000d7	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	83 c1 12	 add	 ecx, 18			; 00000012H
  000dd	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  000e2	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 932  :     }
; 933  :     else

  000e7	eb 43		 jmp	 SHORT $L35729
$L35727:

; 934  :     {
; 935  :         m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP_OFF, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP);

  000e9	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ef	25 ff ff ff fd	 and	 eax, -33554433		; fdffffffH
  000f4	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 936  : 
; 937  :         dwLoopBackOffset = 0;

  000fa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwLoopBackOffset$[ebp], 0

; 938  :         dwEndBufferOffset = BytesToSamples(m_pSettings->m_dwPlayLength);

  00101	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00104	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0010a	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  00110	51		 push	 ecx
  00111	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	e8 00 00 00 00	 call	 ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
  00119	89 45 e8	 mov	 DWORD PTR _dwEndBufferOffset$[ebp], eax

; 939  : 
; 940  :         and(&m_dwStatus, ~MCPX_VOICESTATUS_LOOPING);

  0011c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	83 c1 12	 add	 ecx, 18			; 00000012H
  00122	ba ff fd 00 00	 mov	 edx, 65023		; 0000fdffH
  00127	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and
$L35729:

; 941  :     }
; 942  : 
; 943  :     ASSERT(dwEndBufferOffset > 1);

  0012c	68 af 03 00 00	 push	 943			; 000003afH
  00131	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00136	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@BEKIPBPF@dwEndBufferOffset?5?$DO?51?$AA@
  0013b	ba 01 00 00 00	 mov	 edx, 1
  00140	3b 55 e8	 cmp	 edx, DWORD PTR _dwEndBufferOffset$[ebp]
  00143	1b c0		 sbb	 eax, eax
  00145	40		 inc	 eax
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0014c	83 c4 10	 add	 esp, 16			; 00000010H

; 944  :     dwEndBufferOffset--;

  0014f	8b 4d e8	 mov	 ecx, DWORD PTR _dwEndBufferOffset$[ebp]
  00152	83 e9 01	 sub	 ecx, 1
  00155	89 4d e8	 mov	 DWORD PTR _dwEndBufferOffset$[ebp], ecx

; 945  : 
; 946  :     dwIncrement = m_pSettings->m_fmt.wBitsPerSample * 2 / 8;

  00158	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0015b	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00161	0f b6 40 0f	 movzx	 eax, BYTE PTR [eax+15]
  00165	d1 e0		 shl	 eax, 1
  00167	99		 cdq
  00168	83 e2 07	 and	 edx, 7
  0016b	03 c2		 add	 eax, edx
  0016d	c1 f8 03	 sar	 eax, 3
  00170	89 45 e4	 mov	 DWORD PTR _dwIncrement$[ebp], eax

; 947  : 
; 948  :     MCPX_CHECK_VOICE_FIFO(8 * m_bVoiceCount);

  00173	68 b4 03 00 00	 push	 948			; 000003b4H
  00178	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0017d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00182	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00187	0f b6 c8	 movzx	 ecx, al
  0018a	33 d2		 xor	 edx, edx
  0018c	83 f9 02	 cmp	 ecx, 2
  0018f	0f 95 c2	 setne	 dl
  00192	52		 push	 edx
  00193	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00198	83 c4 10	 add	 esp, 16			; 00000010H
  0019b	68 b4 03 00 00	 push	 948			; 000003b4H
  001a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  001a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@GPKHICKB@?$CI8?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  001aa	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001ad	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  001b1	c1 e1 03	 shl	 ecx, 3
  001b4	33 d2		 xor	 edx, edx
  001b6	83 f9 20	 cmp	 ecx, 32			; 00000020H
  001b9	0f 9f c2	 setg	 dl
  001bc	52		 push	 edx
  001bd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001c2	83 c4 10	 add	 esp, 16			; 00000010H
$L35735:
  001c5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001ca	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  001d0	c1 e9 02	 shr	 ecx, 2
  001d3	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  001d6	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  001da	c1 e0 03	 shl	 eax, 3
  001dd	3b c8		 cmp	 ecx, eax
  001df	73 02		 jae	 SHORT $L35736
  001e1	eb e2		 jmp	 SHORT $L35735
$L35736:

; 949  : 
; 950  :     for(i = 0; i < m_bVoiceCount; i++)

  001e3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001ea	eb 09		 jmp	 SHORT $L35739
$L35740:
  001ec	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  001ef	83 c1 01	 add	 ecx, 1
  001f2	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L35739:
  001f5	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  001f8	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  001fc	39 45 f4	 cmp	 DWORD PTR _i$[ebp], eax
  001ff	0f 83 a0 00 00
	00		 jae	 $L35741

; 951  :     {
; 952  :         MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00205	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00208	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0020b	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00210	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00215	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 953  :         MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  0021b	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  00220	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1

; 954  :         MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  0022a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0022d	50		 push	 eax
  0022e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00231	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  00236	b9 04 03 00 00	 mov	 ecx, 772		; 00000304H
  0023b	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 955  :         MCPX_VOICE_WRITE(SetVoiceCfgBufBase, m_dwBufferBase + (dwIncrement * i));

  00241	8b 55 e4	 mov	 edx, DWORD PTR _dwIncrement$[ebp]
  00244	0f af 55 f4	 imul	 edx, DWORD PTR _i$[ebp]
  00248	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0024b	03 90 44 01 00
	00		 add	 edx, DWORD PTR [eax+324]
  00251	b9 a0 03 00 00	 mov	 ecx, 928		; 000003a0H
  00256	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 956  :         MCPX_VOICE_WRITE(SetVoiceCfgBufEBO, dwEndBufferOffset);

  0025c	ba dc 03 00 00	 mov	 edx, 988		; 000003dcH
  00261	8b 45 e8	 mov	 eax, DWORD PTR _dwEndBufferOffset$[ebp]
  00264	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 957  :         MCPX_VOICE_WRITE(SetVoiceCfgBufLBO, dwLoopBackOffset);

  0026a	b9 a4 03 00 00	 mov	 ecx, 932		; 000003a4H
  0026f	8b 55 f0	 mov	 edx, DWORD PTR _dwLoopBackOffset$[ebp]
  00272	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx

; 958  : 
; 959  :         if(dwFlags & DSBPLAY_FROMSTART)

  00278	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0027b	83 e0 02	 and	 eax, 2
  0027e	85 c0		 test	 eax, eax
  00280	74 0f		 je	 SHORT $L35754

; 960  :         {
; 961  :             MCPX_VOICE_WRITE(SetVoiceBufCBO, 0);

  00282	b9 d8 03 00 00	 mov	 ecx, 984		; 000003d8H
  00287	c7 81 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [ecx-25034752], 0
$L35754:

; 962  :         }
; 963  : 
; 964  :         MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  00291	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  00296	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 965  :     }

  002a0	e9 47 ff ff ff	 jmp	 $L35740
$L35741:

; 966  : 
; 967  :     // 
; 968  :     // Lower IRQL
; 969  :     //
; 970  : 
; 971  :     irql.Lower();

  002a5	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  002a8	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 972  : 
; 973  :     //
; 974  :     // Activate the voice
; 975  :     //
; 976  : 
; 977  :     ActivateVoice();

  002ad	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  002b0	e8 00 00 00 00	 call	 ?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ActivateVoice

; 978  : 
; 979  :     //
; 980  :     // By the time we get to this point, any pending SSL or VoiceOff interrupts
; 981  :     // should have happened.  Unschedule any pending RELEASERESOURCES tasks 
; 982  :     // that may have been scheduled.
; 983  :     //
; 984  :     // BUGBUG: unless we're at raised IRQL through this whole function, such
; 985  :     // as when the dmusic sequencer calls us or a deferred Play command happens.
; 986  :     //
; 987  : 
; 988  : #pragma TODO("What impact does this have?")
; 989  : 
; 990  :     RemoveDeferredCommand(MCPX_DEFERREDCMD_BUFFER_RELEASERESOURCES);

  002b5	6a 01		 push	 1
  002b7	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  002ba	8b 10		 mov	 edx, DWORD PTR [eax]
  002bc	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  002bf	ff 52 1c	 call	 DWORD PTR [edx+28]

; 991  : 
; 992  :     DPF_LEAVE_VOID();
; 993  : }

  002c2	8b e5		 mov	 esp, ebp
  002c4	5d		 pop	 ebp
  002c5	c2 04 00	 ret	 4
?PlayFromCurrent@CMcpxBuffer@DirectSound@@IAEXK@Z ENDP	; DirectSound::CMcpxBuffer::PlayFromCurrent
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.h
DSOUND	ENDS
;	COMDAT ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwBytes$ = 8
?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::BytesToSamples, COMDAT
; _this$ = ecx

; 242  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 243  :         if(WAVE_FORMAT_XBOX_ADPCM == m_pSettings->m_fmt.wFormatTag)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0000d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00011	83 fa 69	 cmp	 edx, 105		; 00000069H
  00014	75 13		 jne	 SHORT $L34961

; 244  :         {
; 245  :             return (dwBytes / m_pSettings->m_fmt.nBlockAlign) << 6;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001c	8b 45 08	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	f7 71 14	 div	 DWORD PTR [ecx+20]
  00024	c1 e0 06	 shl	 eax, 6
  00027	eb 39		 jmp	 SHORT $L34960
$L34961:

; 246  :         }
; 247  :         else
; 248  :         {
; 249  :             ASSERT(WAVE_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag);

  00029	68 f9 00 00 00	 push	 249			; 000000f9H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0003e	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00042	83 e9 01	 sub	 ecx, 1
  00045	f7 d9		 neg	 ecx
  00047	1b c9		 sbb	 ecx, ecx
  00049	f7 d9		 neg	 ecx
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 250  :         
; 251  :             return dwBytes / m_pSettings->m_fmt.nBlockAlign;

  00054	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 4a 78	 mov	 ecx, DWORD PTR [edx+120]
  0005a	8b 45 08	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  0005d	33 d2		 xor	 edx, edx
  0005f	f7 71 14	 div	 DWORD PTR [ecx+20]
$L34960:

; 252  :         }
; 253  :     }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ENDP ; DirectSound::CMcpxVoiceClient::BytesToSamples
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT
_this$ = -8
_dwCfgFMT$ = -4
_dwVoiceIndex$ = 8
?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT, COMDAT
; _this$ = ecx

; 270  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :         DWORD                   dwCfgFMT    = m_RegCache.CfgFMT;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000f	89 4d fc	 mov	 DWORD PTR _dwCfgFMT$[ebp], ecx

; 272  : 
; 273  :         if(dwVoiceIndex)

  00012	83 7d 08 00	 cmp	 DWORD PTR _dwVoiceIndex$[ebp], 0
  00016	74 0c		 je	 SHORT $L34976

; 274  :         {
; 275  :             dwCfgFMT |= MCPX_MAKE_REG_VALUE(NV_PAVS_VOICE_CFG_FMT_LINKED_VOICE_ON, NV1BA0_PIO_SET_VOICE_CFG_FMT_LINKED_VOICE);

  00018	8b 55 fc	 mov	 edx, DWORD PTR _dwCfgFMT$[ebp]
  0001b	81 ca 00 00 40
	00		 or	 edx, 4194304		; 00400000H
  00021	89 55 fc	 mov	 DWORD PTR _dwCfgFMT$[ebp], edx
$L34976:

; 276  :         }
; 277  : 
; 278  :         return dwCfgFMT;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _dwCfgFMT$[ebp]

; 279  :     }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ENDP ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
DSOUND	ENDS
PUBLIC	??_C@_0EJ@PCBCKLFL@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@ ; `string'
PUBLIC	??_C@_0BP@INCMHKLI@?$CB?$CIdwFlags?5?$CG?5DSBPLAY_FROMSTART?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0L@BLILGGLP@dwPosition?$AA@		; `string'
PUBLIC	??_C@_0CP@IMLMJOKF@?$CI10?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METH@ ; `string'
PUBLIC	??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
EXTRN	?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z:NEAR ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0EJ@PCBCKLFL@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
DSOUND_RD	SEGMENT
??_C@_0EJ@PCBCKLFL@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@ DB '(m_dwSta'
	DB	'tus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ALLOCA'
	DB	'TED', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@INCMHKLI@?$CB?$CIdwFlags?5?$CG?5DSBPLAY_FROMSTART?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@INCMHKLI@?$CB?$CIdwFlags?5?$CG?5DSBPLAY_FROMSTART?$CJ?$AA@ DB '!'
	DB	'(dwFlags & DSBPLAY_FROMSTART)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@BLILGGLP@dwPosition?$AA@
DSOUND_RD	SEGMENT
??_C@_0L@BLILGGLP@dwPosition?$AA@ DB 'dwPosition', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IMLMJOKF@?$CI10?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METH@
DSOUND_RD	SEGMENT
??_C@_0CP@IMLMJOKF@?$CI10?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METH@ DB '('
	DB	'10 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'7 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?PlayFromPosition@CMcpxBuffer@DirectSound@@IAEXKK@Z
DSOUND	SEGMENT
_this$ = -56
_Volume$ = -52
_i$ = -16
_dwState$ = -12
_irql$ = -8
_dwPosition$ = 8
_dwFlags$ = 12
?PlayFromPosition@CMcpxBuffer@DirectSound@@IAEXKK@Z PROC NEAR ; DirectSound::CMcpxBuffer::PlayFromPosition, COMDAT
; _this$ = ecx

; 1021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 1022 :     MCPX_VOICE_VOLUME       Volume;
; 1023 :     DWORD                   dwState;
; 1024 :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 1025 :     DWORD                   i;
; 1026 :     
; 1027 :     DPF_ENTER();
; 1028 : 
; 1029 :     ASSERT((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ALLOCATED);

  00011	68 05 04 00 00	 push	 1029			; 00000405H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EJ@PCBCKLFL@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@
  00020	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00027	83 e1 03	 and	 ecx, 3
  0002a	83 e9 01	 sub	 ecx, 1
  0002d	f7 d9		 neg	 ecx
  0002f	1b c9		 sbb	 ecx, ecx
  00031	f7 d9		 neg	 ecx
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00039	83 c4 10	 add	 esp, 16			; 00000010H

; 1030 :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_MIXIN));

  0003c	68 06 04 00 00	 push	 1030			; 00000406H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@IAAIJABI@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  0004b	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00054	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00057	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0005d	f7 d9		 neg	 ecx
  0005f	1b c9		 sbb	 ecx, ecx
  00061	f7 d9		 neg	 ecx
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 1031 :     ASSERT(!(dwFlags & DSBPLAY_FROMSTART));

  0006c	68 07 04 00 00	 push	 1031			; 00000407H
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@INCMHKLI@?$CB?$CIdwFlags?5?$CG?5DSBPLAY_FROMSTART?$CJ?$AA@
  0007b	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0007e	83 e2 02	 and	 edx, 2
  00081	f7 da		 neg	 edx
  00083	1b d2		 sbb	 edx, edx
  00085	f7 da		 neg	 edx
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0008d	83 c4 10	 add	 esp, 16			; 00000010H

; 1032 :     ASSERT(dwPosition);

  00090	68 08 04 00 00	 push	 1032			; 00000408H
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@BLILGGLP@dwPosition?$AA@
  0009f	33 c0		 xor	 eax, eax
  000a1	83 7d 08 00	 cmp	 DWORD PTR _dwPosition$[ebp], 0
  000a5	0f 94 c0	 sete	 al
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ae	83 c4 10	 add	 esp, 16			; 00000010H

; 1033 : 
; 1034 :     //
; 1035 :     // The hardware won't let us set the CBO until it's processed the first
; 1036 :     // frame.  Set the buffer up so it plays the first 32 samples in a loop
; 1037 :     // until the NEW_VOICE bit is cleared.
; 1038 :     //
; 1039 : 
; 1040 :     memset(&Volume, 0xFF, sizeof(Volume));

  000b1	6a 24		 push	 36			; 00000024H
  000b3	68 ff 00 00 00	 push	 255			; 000000ffH
  000b8	8d 4d cc	 lea	 ecx, DWORD PTR _Volume$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _memset
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1041 : 
; 1042 :     irql.Raise();

  000c4	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  000c7	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 1043 : 
; 1044 :     m_RegCache.CfgFMT = MCPX_SET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP_ON, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP);

  000cc	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000d2	25 ff ff ff fd	 and	 eax, -33554433		; fdffffffH
  000d7	0d 00 00 00 02	 or	 eax, 33554432		; 02000000H
  000dc	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1045 : 
; 1046 :     MCPX_CHECK_VOICE_FIFO(10 * m_bVoiceCount);

  000e2	68 16 04 00 00	 push	 1046			; 00000416H
  000e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  000ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  000f1	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  000f6	0f b6 d0	 movzx	 edx, al
  000f9	33 c0		 xor	 eax, eax
  000fb	83 fa 02	 cmp	 edx, 2
  000fe	0f 95 c0	 setne	 al
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00107	83 c4 10	 add	 esp, 16			; 00000010H
  0010a	68 16 04 00 00	 push	 1046			; 00000416H
  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00114	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IMLMJOKF@?$CI10?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METH@
  00119	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00120	6b d2 0a	 imul	 edx, 10			; 0000000aH
  00123	33 c0		 xor	 eax, eax
  00125	83 fa 20	 cmp	 edx, 32			; 00000020H
  00128	0f 9f c0	 setg	 al
  0012b	50		 push	 eax
  0012c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00131	83 c4 10	 add	 esp, 16			; 00000010H
$L35774:
  00134	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00139	8b 91 00 00 82
	fe		 mov	 edx, DWORD PTR [ecx-25034752]
  0013f	c1 ea 02	 shr	 edx, 2
  00142	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00145	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00149	6b c9 0a	 imul	 ecx, 10			; 0000000aH
  0014c	3b d1		 cmp	 edx, ecx
  0014e	73 02		 jae	 SHORT $L35775
  00150	eb e2		 jmp	 SHORT $L35774
$L35775:

; 1047 : 
; 1048 :     for(i = 0; i < m_bVoiceCount; i++)

  00152	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00159	eb 09		 jmp	 SHORT $L35778
$L35779:
  0015b	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0015e	83 c2 01	 add	 edx, 1
  00161	89 55 f0	 mov	 DWORD PTR _i$[ebp], edx
$L35778:
  00164	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00167	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  0016b	39 4d f0	 cmp	 DWORD PTR _i$[ebp], ecx
  0016e	0f 83 b8 00 00
	00		 jae	 $L35780

; 1049 :     {
; 1050 :         MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00174	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00177	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0017a	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  0017f	ba f8 02 00 00	 mov	 edx, 760		; 000002f8H
  00184	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 1051 :         MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  0018a	b8 fc 02 00 00	 mov	 eax, 764		; 000002fcH
  0018f	c7 80 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [eax-25034752], 1

; 1052 :         MCPX_VOICE_WRITE(SetVoiceCfgFMT, GetVoiceCfgFMT(i));

  00199	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0019c	51		 push	 ecx
  0019d	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a0	e8 00 00 00 00	 call	 ?GetVoiceCfgFMT@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::GetVoiceCfgFMT
  001a5	ba 04 03 00 00	 mov	 edx, 772		; 00000304H
  001aa	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 1053 :         MCPX_VOICE_WRITE(SetVoiceTarVOLA, Volume.TarVOLA[i]);

  001b0	b8 60 03 00 00	 mov	 eax, 864		; 00000360H
  001b5	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001b8	8b 54 8d cc	 mov	 edx, DWORD PTR _Volume$[ebp+ecx*4]
  001bc	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1054 :         MCPX_VOICE_WRITE(SetVoiceTarVOLB, Volume.TarVOLB[i]);

  001c2	b8 64 03 00 00	 mov	 eax, 868		; 00000364H
  001c7	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001ca	8b 54 8d d8	 mov	 edx, DWORD PTR _Volume$[ebp+ecx*4+12]
  001ce	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1055 :         MCPX_VOICE_WRITE(SetVoiceTarVOLC, Volume.TarVOLC[i]);

  001d4	b8 68 03 00 00	 mov	 eax, 872		; 00000368H
  001d9	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001dc	8b 54 8d e4	 mov	 edx, DWORD PTR _Volume$[ebp+ecx*4+24]
  001e0	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1056 :         MCPX_VOICE_WRITE(SetVoiceCfgBufBase, m_dwBufferBase);

  001e6	b8 a0 03 00 00	 mov	 eax, 928		; 000003a0H
  001eb	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ee	8b 91 44 01 00
	00		 mov	 edx, DWORD PTR [ecx+324]
  001f4	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1057 :         MCPX_VOICE_WRITE(SetVoiceCfgBufEBO, MCPX_HW_FRAME_SIZE_SAMPLES);

  001fa	b8 dc 03 00 00	 mov	 eax, 988		; 000003dcH
  001ff	c7 80 00 00 82
	fe 20 00 00 00	 mov	 DWORD PTR [eax-25034752], 32 ; 00000020H

; 1058 :         MCPX_VOICE_WRITE(SetVoiceCfgBufLBO, 0);

  00209	b9 a4 03 00 00	 mov	 ecx, 932		; 000003a4H
  0020e	c7 81 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [ecx-25034752], 0

; 1059 :         MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  00218	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  0021d	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 1060 :     }

  00227	e9 2f ff ff ff	 jmp	 $L35779
$L35780:

; 1061 : 
; 1062 :     irql.Lower();

  0022c	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0022f	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 1063 : 
; 1064 :     ActivateVoice();

  00234	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00237	e8 00 00 00 00	 call	 ?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ActivateVoice
$L35801:

; 1065 : 
; 1066 :     //
; 1067 :     // Wait for the NEW_VOICE bit to clear so we know the first frame of audio
; 1068 :     // has been processed
; 1069 :     //
; 1070 : 
; 1071 :     do
; 1072 :     {
; 1073 :         MCPX_VOICE_STRUCT_READ(m_ahVoices[m_bVoiceCount - 1], NV_PAVS_VOICE_PAR_STATE, &dwState);

  0023c	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0023f	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00243	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00246	0f b7 44 4a 0a	 movzx	 eax, WORD PTR [edx+ecx*2+10]
  0024b	c1 e0 07	 shl	 eax, 7
  0024e	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  00254	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  00258	89 55 f4	 mov	 DWORD PTR _dwState$[ebp], edx

; 1074 :     }
; 1075 :     while(MCPX_GET_REG_VALUE(dwState, NV_PAVS_VOICE_PAR_STATE_NEW_VOICE));

  0025b	8b 45 f4	 mov	 eax, DWORD PTR _dwState$[ebp]
  0025e	c1 e8 14	 shr	 eax, 20			; 00000014H
  00261	83 e0 01	 and	 eax, 1
  00264	85 c0		 test	 eax, eax
  00266	75 d4		 jne	 SHORT $L35801

; 1076 : 
; 1077 :     //
; 1078 :     // Play the buffer properly
; 1079 :     //
; 1080 : 
; 1081 :     PlayFromCurrent(dwFlags);

  00268	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0026b	51		 push	 ecx
  0026c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0026f	e8 00 00 00 00	 call	 ?PlayFromCurrent@CMcpxBuffer@DirectSound@@IAEXK@Z ; DirectSound::CMcpxBuffer::PlayFromCurrent

; 1082 : 
; 1083 :     //
; 1084 :     // Set the cursor position and restore the volume
; 1085 :     //
; 1086 : 
; 1087 :     irql.Raise();

  00274	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00277	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 1088 : 
; 1089 :     ConvertVolumeValues(&Volume);

  0027c	8d 55 cc	 lea	 edx, DWORD PTR _Volume$[ebp]
  0027f	52		 push	 edx
  00280	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00283	e8 00 00 00 00	 call	 ?ConvertVolumeValues@CMcpxVoiceClient@DirectSound@@IAEXPAUMCPX_VOICE_VOLUME@@@Z ; DirectSound::CMcpxVoiceClient::ConvertVolumeValues

; 1090 : 
; 1091 :     dwPosition = BytesToSamples(dwPosition);

  00288	8b 45 08	 mov	 eax, DWORD PTR _dwPosition$[ebp]
  0028b	50		 push	 eax
  0028c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0028f	e8 00 00 00 00	 call	 ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
  00294	89 45 08	 mov	 DWORD PTR _dwPosition$[ebp], eax

; 1092 : 
; 1093 :     MCPX_CHECK_VOICE_FIFO(7 * m_bVoiceCount);

  00297	68 45 04 00 00	 push	 1093			; 00000445H
  0029c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  002a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  002a6	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  002ab	0f b6 c8	 movzx	 ecx, al
  002ae	33 d2		 xor	 edx, edx
  002b0	83 f9 02	 cmp	 ecx, 2
  002b3	0f 95 c2	 setne	 dl
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	68 45 04 00 00	 push	 1093			; 00000445H
  002c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  002c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@KPEBAGGA@?$CI7?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  002ce	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  002d1	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  002d5	6b c9 07	 imul	 ecx, 7
  002d8	33 d2		 xor	 edx, edx
  002da	83 f9 20	 cmp	 ecx, 32			; 00000020H
  002dd	0f 9f c2	 setg	 dl
  002e0	52		 push	 edx
  002e1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  002e6	83 c4 10	 add	 esp, 16			; 00000010H
$L35809:
  002e9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ee	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  002f4	c1 e9 02	 shr	 ecx, 2
  002f7	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  002fa	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  002fe	6b c0 07	 imul	 eax, 7
  00301	3b c8		 cmp	 ecx, eax
  00303	73 02		 jae	 SHORT $L35810
  00305	eb e2		 jmp	 SHORT $L35809
$L35810:

; 1094 :     
; 1095 :     for(i = 0; i < m_bVoiceCount; i++)

  00307	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0030e	eb 09		 jmp	 SHORT $L35813
$L35814:
  00310	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00313	83 c1 01	 add	 ecx, 1
  00316	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L35813:
  00319	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0031c	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00320	39 45 f0	 cmp	 DWORD PTR _i$[ebp], eax
  00323	73 7d		 jae	 SHORT $L35815

; 1096 :     {
; 1097 :         MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00325	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00328	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0032b	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00330	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00335	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 1098 :         MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  0033b	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  00340	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1

; 1099 :         MCPX_VOICE_WRITE(SetVoiceTarVOLA, Volume.TarVOLA[i]);

  0034a	b8 60 03 00 00	 mov	 eax, 864		; 00000360H
  0034f	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00352	8b 54 8d cc	 mov	 edx, DWORD PTR _Volume$[ebp+ecx*4]
  00356	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1100 :         MCPX_VOICE_WRITE(SetVoiceTarVOLB, Volume.TarVOLB[i]);

  0035c	b8 64 03 00 00	 mov	 eax, 868		; 00000364H
  00361	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00364	8b 54 8d d8	 mov	 edx, DWORD PTR _Volume$[ebp+ecx*4+12]
  00368	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1101 :         MCPX_VOICE_WRITE(SetVoiceTarVOLC, Volume.TarVOLC[i]);

  0036e	b8 68 03 00 00	 mov	 eax, 872		; 00000368H
  00373	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00376	8b 54 8d e4	 mov	 edx, DWORD PTR _Volume$[ebp+ecx*4+24]
  0037a	89 90 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], edx

; 1102 :         MCPX_VOICE_WRITE(SetVoiceBufCBO, dwPosition);

  00380	b8 d8 03 00 00	 mov	 eax, 984		; 000003d8H
  00385	8b 4d 08	 mov	 ecx, DWORD PTR _dwPosition$[ebp]
  00388	89 88 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], ecx

; 1103 :         MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  0038e	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  00393	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 1104 :     }

  0039d	e9 6e ff ff ff	 jmp	 $L35814
$L35815:

; 1105 : 
; 1106 :     irql.Lower();

  003a2	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  003a5	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 1107 : 
; 1108 :     DPF_LEAVE_VOID();
; 1109 : }

  003aa	8b e5		 mov	 esp, ebp
  003ac	5d		 pop	 ebp
  003ad	c2 08 00	 ret	 8
?PlayFromPosition@CMcpxBuffer@DirectSound@@IAEXKK@Z ENDP ; DirectSound::CMcpxBuffer::PlayFromPosition
DSOUND	ENDS
PUBLIC	?SetPlayRegion@CMcpxBuffer@DirectSound@@QAEJXZ	; DirectSound::CMcpxBuffer::SetPlayRegion
; Function compile flags: /Odt
;	COMDAT ?SetPlayRegion@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_dwFlags$ = -4
?SetPlayRegion@CMcpxBuffer@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxBuffer::SetPlayRegion, COMDAT
; _this$ = ecx

; 1135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1136 :     HRESULT                 hr      = DS_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1137 :     DWORD                   dwFlags;
; 1138 :  
; 1139 :     DPF_ENTER();
; 1140 : 
; 1141 :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00010	68 75 04 00 00	 push	 1141			; 00000475H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  0001f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00028	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002b	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00031	f7 da		 neg	 edx
  00033	1b d2		 sbb	 edx, edx
  00035	f7 da		 neg	 edx
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 1142 : 
; 1143 :     //
; 1144 :     // Reset the cached play cursor
; 1145 :     //
; 1146 : 
; 1147 :     m_dwCachedPlayCursor = 0;

  00040	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 80 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+312], 0

; 1148 : 
; 1149 :     //
; 1150 :     // Recalculate the buffer base address
; 1151 :     //
; 1152 : 
; 1153 :     if(m_dwStatus & MCPX_VOICESTATUS_BUFFERMAPPED)

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00054	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  0005a	85 d2		 test	 edx, edx
  0005c	74 08		 je	 SHORT $L35837

; 1154 :     {
; 1155 :         MapBuffer();

  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?MapBuffer@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::MapBuffer
$L35837:

; 1156 :     }
; 1157 : 
; 1158 :     //
; 1159 :     // If we're playing, call Play again.  That will reset the regions
; 1160 :     // based on what was just set.
; 1161 :     //
; 1162 : 
; 1163 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00066	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00069	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0006d	83 e1 03	 and	 ecx, 3
  00070	83 f9 03	 cmp	 ecx, 3
  00073	75 2f		 jne	 SHORT $L35838

; 1164 :     {
; 1165 :         dwFlags = DSBPLAY_FROMSTART;

  00075	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _dwFlags$[ebp], 2

; 1166 : 
; 1167 :         if(m_dwStatus & MCPX_VOICESTATUS_LOOPING)

  0007c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0007f	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00083	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00088	85 c0		 test	 eax, eax
  0008a	74 09		 je	 SHORT $L35839

; 1168 :         {
; 1169 :             dwFlags |= DSBPLAY_LOOPING;

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0008f	83 c9 01	 or	 ecx, 1
  00092	89 4d fc	 mov	 DWORD PTR _dwFlags$[ebp], ecx
$L35839:

; 1170 :         }
; 1171 :         
; 1172 :         hr = Play(dwFlags);

  00095	8b 55 fc	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00098	52		 push	 edx
  00099	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play
  000a1	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L35838:

; 1173 :     }
; 1174 : 
; 1175 :     DPF_LEAVE_HRESULT(hr);
; 1176 : 
; 1177 :     return hr;

  000a4	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1178 : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?SetPlayRegion@CMcpxBuffer@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxBuffer::SetPlayRegion
DSOUND	ENDS
PUBLIC	?SetLoopRegion@CMcpxBuffer@DirectSound@@QAEJXZ	; DirectSound::CMcpxBuffer::SetLoopRegion
; Function compile flags: /Odt
;	COMDAT ?SetLoopRegion@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
?SetLoopRegion@CMcpxBuffer@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxBuffer::SetLoopRegion, COMDAT
; _this$ = ecx

; 1204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1205 :     HRESULT                 hr  = DS_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1206 :  
; 1207 :     DPF_ENTER();
; 1208 : 
; 1209 :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00010	68 b9 04 00 00	 push	 1209			; 000004b9H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00028	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002b	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00031	f7 da		 neg	 edx
  00033	1b d2		 sbb	 edx, edx
  00035	f7 da		 neg	 edx
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 1210 : 
; 1211 :     //
; 1212 :     // If we're playing, call Play again.  That will reset the regions
; 1213 :     // based on what was just set.
; 1214 :     //
; 1215 : 
; 1216 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00047	83 e1 03	 and	 ecx, 3
  0004a	83 f9 03	 cmp	 ecx, 3
  0004d	75 1e		 jne	 SHORT $L35846

; 1217 :     {
; 1218 :         hr = Play((m_dwStatus & MCPX_VOICESTATUS_LOOPING) ? DSBPLAY_LOOPING : 0);

  0004f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00052	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00056	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0005b	f7 d8		 neg	 eax
  0005d	1b c0		 sbb	 eax, eax
  0005f	f7 d8		 neg	 eax
  00061	50		 push	 eax
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play
  0006a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L35846:

; 1219 :     }
; 1220 : 
; 1221 :     DPF_LEAVE_HRESULT(hr);
; 1222 : 
; 1223 :     return hr;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1224 : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?SetLoopRegion@CMcpxBuffer@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxBuffer::SetLoopRegion
DSOUND	ENDS
PUBLIC	?Stop@CMcpxBuffer@DirectSound@@QAEJ_JK@Z	; DirectSound::CMcpxBuffer::Stop
; Function compile flags: /Odt
;	COMDAT ?Stop@CMcpxBuffer@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_fDeferred$ = -4
_rtTimeStamp$ = 8
_dwFlags$ = 16
?Stop@CMcpxBuffer@DirectSound@@QAEJ_JK@Z PROC NEAR	; DirectSound::CMcpxBuffer::Stop, COMDAT
; _this$ = ecx

; 1252 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1253 :     BOOL                    fDeferred   = FALSE;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fDeferred$[ebp], 0

; 1254 :     HRESULT                 hr          = DS_OK;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1255 : 
; 1256 :     DPF_ENTER();
; 1257 : 
; 1258 :     if(rtTimeStamp)

  00017	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0001a	0b 45 0c	 or	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $L35855

; 1259 :     {
; 1260 :         fDeferred = ScheduleDeferredCommand(MCPX_DEFERREDCMD_BUFFER_STOP, rtTimeStamp, dwFlags);

  00021	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp+4]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0002c	50		 push	 eax
  0002d	6a 04		 push	 4
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	ff 52 18	 call	 DWORD PTR [edx+24]
  0003a	89 45 fc	 mov	 DWORD PTR _fDeferred$[ebp], eax
$L35855:

; 1261 :     }
; 1262 : 
; 1263 :     if(!fDeferred)

  0003d	83 7d fc 00	 cmp	 DWORD PTR _fDeferred$[ebp], 0
  00041	75 0f		 jne	 SHORT $L35856

; 1264 :     {
; 1265 :         hr = Stop(dwFlags);

  00043	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00046	50		 push	 eax
  00047	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Stop
  0004f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L35856:

; 1266 :     }
; 1267 : 
; 1268 :     DPF_LEAVE_HRESULT(hr);
; 1269 : 
; 1270 :     return hr;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1271 : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?Stop@CMcpxBuffer@DirectSound@@QAEJ_JK@Z ENDP		; DirectSound::CMcpxBuffer::Stop
DSOUND	ENDS
PUBLIC	?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z ; DirectSound::CMcpxBuffer::GetCurrentPosition
PUBLIC	?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::OnPositionDelta
EXTRN	?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z:NEAR ; DirectSound::CMcpxVoiceClient::DeactivateVoice
EXTRN	?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::ReleaseVoice
; Function compile flags: /Odt
;	COMDAT ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
_dwFlags$ = 8
?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z PROC NEAR	; DirectSound::CMcpxBuffer::Stop, COMDAT
; _this$ = ecx

; 1297 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1298 :     HRESULT                 hr  = DS_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1299 :     
; 1300 :     DPF_ENTER();
; 1301 : 
; 1302 :     //
; 1303 :     // Make sure resources are allocated and we're actually running
; 1304 :     //
; 1305 : 
; 1306 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00017	83 e1 03	 and	 ecx, 3
  0001a	83 f9 03	 cmp	 ecx, 3
  0001d	0f 85 a9 00 00
	00		 jne	 $L35863

; 1307 :     {
; 1308 :         if(dwFlags & DSBSTOPEX_ENVELOPE)

  00023	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00026	83 e2 01	 and	 edx, 1
  00029	85 d2		 test	 edx, edx
  0002b	74 3c		 je	 SHORT $L35864

; 1309 :         {
; 1310 :             //
; 1311 :             // If we're supposed to break out of the loop, just call Play again
; 1312 :             // without the loop flag.
; 1313 :             //
; 1314 : 
; 1315 :             if(dwFlags & DSBSTOPEX_RELEASEWAVEFORM)

  0002d	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00030	83 e0 02	 and	 eax, 2
  00033	85 c0		 test	 eax, eax
  00035	74 22		 je	 SHORT $L35865

; 1316 :             {
; 1317 :                 if((m_dwStatus & MCPX_VOICESTATUS_LOOPINGMASK) == MCPX_VOICESTATUS_LOOPINGMASK)

  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  0003e	81 e2 03 02 00
	00		 and	 edx, 515		; 00000203H
  00044	81 fa 03 02 00
	00		 cmp	 edx, 515		; 00000203H
  0004a	75 0d		 jne	 SHORT $L35865

; 1318 :                 {
; 1319 :                     hr = Play(0);

  0004c	6a 00		 push	 0
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play
  00056	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L35865:

; 1320 :                 }
; 1321 :             }
; 1322 : 
; 1323 :             //
; 1324 :             // Enter the release segment
; 1325 :             //
; 1326 : 
; 1327 :             if(SUCCEEDED(hr))

  00059	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005d	7c 08		 jl	 SHORT $L35868

; 1328 :             {
; 1329 :                 ReleaseVoice();

  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ReleaseVoice
$L35868:

; 1330 :             }
; 1331 :         }
; 1332 :         else

  00067	eb 63		 jmp	 SHORT $L35863
$L35864:

; 1333 :         {
; 1334 :             //
; 1335 :             // Cache the current play cursor position
; 1336 :             //
; 1337 : 
; 1338 :             if(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK))

  00069	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00072	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00075	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  0007b	85 d2		 test	 edx, edx
  0007d	75 13		 jne	 SHORT $L35870

; 1339 :             {
; 1340 :                 GetCurrentPosition(&m_dwCachedPlayCursor, NULL);

  0007f	6a 00		 push	 0
  00081	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00084	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00089	50		 push	 eax
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z ; DirectSound::CMcpxBuffer::GetCurrentPosition
$L35870:

; 1341 :             }
; 1342 : 
; 1343 :             //
; 1344 :             // Stop the voice
; 1345 :             //
; 1346 : 
; 1347 :             DeactivateVoice();

  00092	6a 00		 push	 0
  00094	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice

; 1348 : 
; 1349 :             //
; 1350 :             // Signal positions up to this point
; 1351 :             //
; 1352 : 
; 1353 :             OnPositionDelta();

  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::OnPositionDelta

; 1354 : 
; 1355 :             //
; 1356 :             // If we're LOCDEFER, schedule a deferred command to release voice
; 1357 :             // resources
; 1358 :             //
; 1359 : 
; 1360 :             if(m_pSettings->m_dwFlags & DSBCAPS_LOCDEFER)

  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000ad	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b0	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  000b5	85 c0		 test	 eax, eax
  000b7	74 13		 je	 SHORT $L35863

; 1361 :             {
; 1362 :                 ScheduleDeferredCommand(MCPX_DEFERREDCMD_BUFFER_RELEASERESOURCES, 0, 0);

  000b9	6a 00		 push	 0
  000bb	6a 00		 push	 0
  000bd	6a 00		 push	 0
  000bf	6a 01		 push	 1
  000c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	ff 52 18	 call	 DWORD PTR [edx+24]
$L35863:

; 1363 :             }
; 1364 :         }
; 1365 :     }
; 1366 : 
; 1367 :     DPF_LEAVE_HRESULT(hr);
; 1368 : 
; 1369 :     return hr;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1370 : }

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z ENDP		; DirectSound::CMcpxBuffer::Stop
DSOUND	ENDS
PUBLIC	?GetStatus@CMcpxBuffer@DirectSound@@QAEJPAK@Z	; DirectSound::CMcpxBuffer::GetStatus
; Function compile flags: /Odt
;	COMDAT ?GetStatus@CMcpxBuffer@DirectSound@@QAEJPAK@Z
DSOUND	SEGMENT
_this$ = -16
$T36525 = -12
___AutoIrql$ = -8
_pdwStatus$ = 8
?GetStatus@CMcpxBuffer@DirectSound@@QAEJPAK@Z PROC NEAR	; DirectSound::CMcpxBuffer::GetStatus, COMDAT
; _this$ = ecx

; 1396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1397 :     DPF_ENTER();
; 1398 :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1399 : 
; 1400 :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00011	68 78 05 00 00	 push	 1400			; 00000578H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00020	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00032	f7 da		 neg	 edx
  00034	1b d2		 sbb	 edx, edx
  00036	f7 da		 neg	 edx
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 1401 : 
; 1402 :     //
; 1403 :     // Convert the voice state to buffer status.  We're going to look at
; 1404 :     // the VOICEOFF bit so IDirectSoundBuffer::GetStatus is as accurate as
; 1405 :     // possible.  This will allow a client to spin on GetStatus until the
; 1406 :     // voice is really inactive, preventing us from busy-waiting later.
; 1407 :     //
; 1408 : 
; 1409 :     *pdwStatus = 0;

  00041	8b 45 08	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1410 :     
; 1411 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00051	83 e2 01	 and	 edx, 1
  00054	85 d2		 test	 edx, edx
  00056	74 3b		 je	 SHORT $L35877

; 1412 :     {
; 1413 :         if(m_dwStatus & MCPX_VOICESTATUS_ACTIVEORVOICEOFF)

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0005f	81 e1 02 80 00
	00		 and	 ecx, 32770		; 00008002H
  00065	85 c9		 test	 ecx, ecx
  00067	74 2a		 je	 SHORT $L35877

; 1414 :         {
; 1415 :             *pdwStatus |= DSBSTATUS_PLAYING;

  00069	8b 55 08	 mov	 edx, DWORD PTR _pdwStatus$[ebp]
  0006c	8b 02		 mov	 eax, DWORD PTR [edx]
  0006e	83 c8 01	 or	 eax, 1
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _pdwStatus$[ebp]
  00074	89 01		 mov	 DWORD PTR [ecx], eax

; 1416 : 
; 1417 :             if(m_dwStatus & MCPX_VOICESTATUS_LOOPING)

  00076	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00079	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  0007d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00082	85 c0		 test	 eax, eax
  00084	74 0d		 je	 SHORT $L35877

; 1418 :             {
; 1419 :                 *pdwStatus |= DSBSTATUS_LOOPING;

  00086	8b 4d 08	 mov	 ecx, DWORD PTR _pdwStatus$[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	83 ca 04	 or	 edx, 4
  0008e	8b 45 08	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00091	89 10		 mov	 DWORD PTR [eax], edx
$L35877:

; 1420 :             }
; 1421 :         }
; 1422 :     }
; 1423 : 
; 1424 :     DPF_LEAVE_HRESULT(DS_OK);
; 1425 : 
; 1426 :     return DS_OK;

  00093	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T36525[ebp], 0
  0009a	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0009d	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  000a2	8b 45 f4	 mov	 eax, DWORD PTR $T36525[ebp]

; 1427 : }

  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 04 00	 ret	 4
?GetStatus@CMcpxBuffer@DirectSound@@QAEJPAK@Z ENDP	; DirectSound::CMcpxBuffer::GetStatus
DSOUND	ENDS
EXTRN	?GetSslPosition@CMcpxVoiceClient@DirectSound@@IAEKXZ:NEAR ; DirectSound::CMcpxVoiceClient::GetSslPosition
; Function compile flags: /Odt
;	COMDAT ?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z
DSOUND	SEGMENT
_this$ = -24
$T36529 = -20
___AutoIrql$ = -16
_dwFrameSize$ = -8
_dwPlayCursor$ = -4
_pdwPlayCursor$ = 8
_pdwWriteCursor$ = 12
?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z PROC NEAR ; DirectSound::CMcpxBuffer::GetCurrentPosition, COMDAT
; _this$ = ecx

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1456 :     DWORD                   dwPlayCursor;
; 1457 :     DWORD                   dwFrameSize;
; 1458 :     
; 1459 :     DPF_ENTER();
; 1460 :     AutoIrql();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1461 : 
; 1462 :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00011	68 b6 05 00 00	 push	 1462			; 000005b6H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00020	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00032	f7 da		 neg	 edx
  00034	1b d2		 sbb	 edx, edx
  00036	f7 da		 neg	 edx
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 1463 : 
; 1464 :     //
; 1465 :     // Get the current SSL position if we're playing or used the cached one
; 1466 :     // if we're not.
; 1467 :     //
; 1468 :     // When we're playing, the write cursor is 32 samples ahead of the play 
; 1469 :     // cursor.
; 1470 :     //
; 1471 : 
; 1472 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00041	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00048	83 e1 03	 and	 ecx, 3
  0004b	83 f9 03	 cmp	 ecx, 3
  0004e	0f 85 f6 00 00
	00		 jne	 $L35890

; 1473 :     {
; 1474 :         dwPlayCursor = GetSslPosition();

  00054	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?GetSslPosition@CMcpxVoiceClient@DirectSound@@IAEKXZ ; DirectSound::CMcpxVoiceClient::GetSslPosition
  0005c	89 45 fc	 mov	 DWORD PTR _dwPlayCursor$[ebp], eax

; 1475 : 
; 1476 :         if(pdwPlayCursor)

  0005f	83 7d 08 00	 cmp	 DWORD PTR _pdwPlayCursor$[ebp], 0
  00063	74 08		 je	 SHORT $L35891

; 1477 :         {
; 1478 :             *pdwPlayCursor = dwPlayCursor;

  00065	8b 55 08	 mov	 edx, DWORD PTR _pdwPlayCursor$[ebp]
  00068	8b 45 fc	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  0006b	89 02		 mov	 DWORD PTR [edx], eax
$L35891:

; 1479 :         }
; 1480 : 
; 1481 :         if(pdwWriteCursor)

  0006d	83 7d 0c 00	 cmp	 DWORD PTR _pdwWriteCursor$[ebp], 0
  00071	0f 84 d1 00 00
	00		 je	 $L35892

; 1482 :         {
; 1483 :             dwFrameSize = SamplesToBytes(MCPX_HW_FRAME_SIZE_SAMPLES);

  00077	6a 20		 push	 32			; 00000020H
  00079	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
  00081	89 45 f8	 mov	 DWORD PTR _dwFrameSize$[ebp], eax

; 1484 : 
; 1485 :             if(dwFrameSize < m_pSettings->m_fmt.nBlockAlign)

  00084	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0008d	8b 45 f8	 mov	 eax, DWORD PTR _dwFrameSize$[ebp]
  00090	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  00093	73 0f		 jae	 SHORT $L35893

; 1486 :             {
; 1487 :                 dwFrameSize = m_pSettings->m_fmt.nBlockAlign;

  00095	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0009e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a1	89 45 f8	 mov	 DWORD PTR _dwFrameSize$[ebp], eax
$L35893:

; 1488 :             }
; 1489 :             
; 1490 :             *pdwWriteCursor = dwPlayCursor + dwFrameSize;

  000a4	8b 4d fc	 mov	 ecx, DWORD PTR _dwPlayCursor$[ebp]
  000a7	03 4d f8	 add	 ecx, DWORD PTR _dwFrameSize$[ebp]
  000aa	8b 55 0c	 mov	 edx, DWORD PTR _pdwWriteCursor$[ebp]
  000ad	89 0a		 mov	 DWORD PTR [edx], ecx

; 1491 :     
; 1492 :             if((m_dwStatus & MCPX_VOICESTATUS_LOOPING) && (dwPlayCursor >= m_pSettings->m_dwLoopStart) && (dwPlayCursor < m_pSettings->m_dwLoopStart + m_pSettings->m_dwLoopLength))

  000af	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  000b6	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  000bc	85 c9		 test	 ecx, ecx
  000be	74 6d		 je	 SHORT $L35894
  000c0	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000c3	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _dwPlayCursor$[ebp]
  000cc	3b 88 c8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+200]
  000d2	72 59		 jb	 SHORT $L35894
  000d4	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000dd	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000e6	8b 80 c8 00 00
	00		 mov	 eax, DWORD PTR [eax+200]
  000ec	03 82 cc 00 00
	00		 add	 eax, DWORD PTR [edx+204]
  000f2	39 45 fc	 cmp	 DWORD PTR _dwPlayCursor$[ebp], eax
  000f5	73 36		 jae	 SHORT $L35894

; 1493 :             {
; 1494 :                 *pdwWriteCursor %= m_pSettings->m_dwLoopLength;

  000f7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  00100	8b 55 0c	 mov	 edx, DWORD PTR _pdwWriteCursor$[ebp]
  00103	8b 02		 mov	 eax, DWORD PTR [edx]
  00105	33 d2		 xor	 edx, edx
  00107	f7 b1 cc 00 00
	00		 div	 DWORD PTR [ecx+204]
  0010d	8b 45 0c	 mov	 eax, DWORD PTR _pdwWriteCursor$[ebp]
  00110	89 10		 mov	 DWORD PTR [eax], edx

; 1495 :                 *pdwWriteCursor += m_pSettings->m_dwLoopStart;

  00112	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0011b	8b 45 0c	 mov	 eax, DWORD PTR _pdwWriteCursor$[ebp]
  0011e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00120	03 8a c8 00 00
	00		 add	 ecx, DWORD PTR [edx+200]
  00126	8b 55 0c	 mov	 edx, DWORD PTR _pdwWriteCursor$[ebp]
  00129	89 0a		 mov	 DWORD PTR [edx], ecx

; 1496 :             }
; 1497 :             else

  0012b	eb 1b		 jmp	 SHORT $L35892
$L35894:

; 1498 :             {
; 1499 :                 *pdwWriteCursor %= m_pSettings->m_dwBufferSize;

  0012d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00130	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00136	8b 55 0c	 mov	 edx, DWORD PTR _pdwWriteCursor$[ebp]
  00139	8b 02		 mov	 eax, DWORD PTR [edx]
  0013b	33 d2		 xor	 edx, edx
  0013d	f7 b1 bc 00 00
	00		 div	 DWORD PTR [ecx+188]
  00143	8b 45 0c	 mov	 eax, DWORD PTR _pdwWriteCursor$[ebp]
  00146	89 10		 mov	 DWORD PTR [eax], edx
$L35892:

; 1500 :             }
; 1501 :         }
; 1502 :     }
; 1503 :     else

  00148	eb 28		 jmp	 SHORT $L35896
$L35890:

; 1504 :     {
; 1505 :         if(pdwPlayCursor)

  0014a	83 7d 08 00	 cmp	 DWORD PTR _pdwPlayCursor$[ebp], 0
  0014e	74 0e		 je	 SHORT $L35897

; 1506 :         {
; 1507 :             *pdwPlayCursor = m_dwCachedPlayCursor;

  00150	8b 4d 08	 mov	 ecx, DWORD PTR _pdwPlayCursor$[ebp]
  00153	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00156	8b 82 38 01 00
	00		 mov	 eax, DWORD PTR [edx+312]
  0015c	89 01		 mov	 DWORD PTR [ecx], eax
$L35897:

; 1508 :         }
; 1509 : 
; 1510 :         if(pdwWriteCursor)

  0015e	83 7d 0c 00	 cmp	 DWORD PTR _pdwWriteCursor$[ebp], 0
  00162	74 0e		 je	 SHORT $L35896

; 1511 :         {
; 1512 :             *pdwWriteCursor = m_dwCachedPlayCursor;

  00164	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwWriteCursor$[ebp]
  00167	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0016a	8b 82 38 01 00
	00		 mov	 eax, DWORD PTR [edx+312]
  00170	89 01		 mov	 DWORD PTR [ecx], eax
$L35896:

; 1513 :         }
; 1514 :     }
; 1515 : 
; 1516 :     DPF_LEAVE_HRESULT(DS_OK);
; 1517 : 
; 1518 :     return DS_OK;

  00172	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T36529[ebp], 0
  00179	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0017c	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  00181	8b 45 ec	 mov	 eax, DWORD PTR $T36529[ebp]

; 1519 : }

  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c2 08 00	 ret	 8
?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z ENDP ; DirectSound::CMcpxBuffer::GetCurrentPosition
DSOUND	ENDS
PUBLIC	??_C@_0CM@IAEIMMLB@dwPlayCursor?5?$DM?$DN?5m_pSettings?9?$DOm_d@ ; `string'
PUBLIC	??_C@_0CA@EPMNGKBE@CMcpxBuffer?3?3SetCurrentPosition?$AA@ ; `string'
PUBLIC	??_C@_0DD@CCAPGDDI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5setting?5current?5bu@ ; `string'
PUBLIC	??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
PUBLIC	?SetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::SetCurrentPosition
;	COMDAT ??_C@_0CM@IAEIMMLB@dwPlayCursor?5?$DM?$DN?5m_pSettings?9?$DOm_d@
DSOUND_RD	SEGMENT
??_C@_0CM@IAEIMMLB@dwPlayCursor?5?$DM?$DN?5m_pSettings?9?$DOm_d@ DB 'dwPl'
	DB	'ayCursor <= m_pSettings->m_dwPlayLength', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EPMNGKBE@CMcpxBuffer?3?3SetCurrentPosition?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@EPMNGKBE@CMcpxBuffer?3?3SetCurrentPosition?$AA@ DB 'CMcpxBuffer'
	DB	'::SetCurrentPosition', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@CCAPGDDI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5setting?5current?5bu@
DSOUND_RD	SEGMENT
??_C@_0DD@CCAPGDDI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5setting?5current?5bu@ DB 'V'
	DB	'oice %x (%x) setting current buffer offset to %lu', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'2 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -24
_hr$ = -20
_i$ = -16
_dwState$ = -12
_irql$ = -8
_dwPlayCursor$ = 8
?SetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJK@Z PROC NEAR ; DirectSound::CMcpxBuffer::SetCurrentPosition, COMDAT
; _this$ = ecx

; 1545 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1546 :     HRESULT                 hr      = DS_OK;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1547 :     DWORD                   dwState;
; 1548 :     CIrql                   irql;

  00010	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 1549 :     DWORD                   i;
; 1550 :     
; 1551 :     DPF_ENTER();
; 1552 : 
; 1553 :     ASSERT(!(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK));

  00018	68 11 06 00 00	 push	 1553			; 00000611H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
  00027	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00030	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00033	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00039	f7 da		 neg	 edx
  0003b	1b d2		 sbb	 edx, edx
  0003d	f7 da		 neg	 edx
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00045	83 c4 10	 add	 esp, 16			; 00000010H

; 1554 :     ASSERT(dwPlayCursor <= m_pSettings->m_dwPlayLength);

  00048	68 12 06 00 00	 push	 1554			; 00000612H
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@IAEIMMLB@dwPlayCursor?5?$DM?$DN?5m_pSettings?9?$DOm_d@
  00057	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00060	8b 55 08	 mov	 edx, DWORD PTR _dwPlayCursor$[ebp]
  00063	39 91 c4 00 00
	00		 cmp	 DWORD PTR [ecx+196], edx
  00069	1b c0		 sbb	 eax, eax
  0006b	f7 d8		 neg	 eax
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 1555 : 
; 1556 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00076	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  0007d	83 e2 03	 and	 edx, 3
  00080	83 fa 03	 cmp	 edx, 3
  00083	0f 85 a9 01 00
	00		 jne	 $L35911
$L35912:

; 1557 :     {
; 1558 :         //
; 1559 :         // Wait for the NEW_VOICE bit to clear so we can set the CBO.  The
; 1560 :         // hardware will ignore the CBO until it's processed at least one
; 1561 :         // frame.
; 1562 :         //
; 1563 : 
; 1564 :         do
; 1565 :         {
; 1566 :             MCPX_VOICE_STRUCT_READ(m_ahVoices[m_bVoiceCount - 1], NV_PAVS_VOICE_PAR_STATE, &dwState);

  00089	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00090	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00093	0f b7 44 4a 0a	 movzx	 eax, WORD PTR [edx+ecx*2+10]
  00098	c1 e0 07	 shl	 eax, 7
  0009b	8b 0d 30 00 00
	00		 mov	 ecx, DWORD PTR ?m_ctxMemory@CMcpxCore@DirectSound@@2PAUMCPX_ALLOC_CONTEXT@@A+48
  000a1	8b 54 01 54	 mov	 edx, DWORD PTR [ecx+eax+84]
  000a5	89 55 f4	 mov	 DWORD PTR _dwState$[ebp], edx

; 1567 :         }
; 1568 :         while(MCPX_GET_REG_VALUE(dwState, NV_PAVS_VOICE_PAR_STATE_NEW_VOICE));

  000a8	8b 45 f4	 mov	 eax, DWORD PTR _dwState$[ebp]
  000ab	c1 e8 14	 shr	 eax, 20			; 00000014H
  000ae	83 e0 01	 and	 eax, 1
  000b1	85 c0		 test	 eax, eax
  000b3	75 d4		 jne	 SHORT $L35912

; 1569 : 
; 1570 :         //
; 1571 :         // If the cursor position is outside the loop region, toggle
; 1572 :         // the loop flag.
; 1573 :         //
; 1574 : 
; 1575 :         if((m_dwStatus & MCPX_VOICESTATUS_LOOPINGMASK) == MCPX_VOICESTATUS_LOOPINGMASK)

  000b5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  000bc	81 e2 03 02 00
	00		 and	 edx, 515		; 00000203H
  000c2	81 fa 03 02 00
	00		 cmp	 edx, 515		; 00000203H
  000c8	75 30		 jne	 SHORT $L35918

; 1576 :         {
; 1577 :             if(dwPlayCursor >= m_pSettings->m_dwLoopStart + m_pSettings->m_dwLoopLength)

  000ca	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000d3	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000dc	8b 89 c8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+200]
  000e2	03 88 cc 00 00
	00		 add	 ecx, DWORD PTR [eax+204]
  000e8	39 4d 08	 cmp	 DWORD PTR _dwPlayCursor$[ebp], ecx
  000eb	72 0d		 jb	 SHORT $L35918

; 1578 :             {
; 1579 :                 hr = Play(0);

  000ed	6a 00		 push	 0
  000ef	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play
  000f7	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L35918:

; 1580 :             }
; 1581 :         }
; 1582 : 
; 1583 :         //
; 1584 :         // Set voice position
; 1585 :         //
; 1586 :         
; 1587 :         if(SUCCEEDED(hr))

  000fa	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000fe	0f 8c 2c 01 00
	00		 jl	 $L35921

; 1588 :         {
; 1589 :             dwPlayCursor = BytesToSamples(dwPlayCursor);

  00104	8b 55 08	 mov	 edx, DWORD PTR _dwPlayCursor$[ebp]
  00107	52		 push	 edx
  00108	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	e8 00 00 00 00	 call	 ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
  00110	89 45 08	 mov	 DWORD PTR _dwPlayCursor$[ebp], eax

; 1590 : 
; 1591 :             DPF_INFO("Voice %x (%x) setting current buffer offset to %lu", this, m_ahVoices[0], dwPlayCursor);

  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EPMNGKBE@CMcpxBuffer?3?3SetCurrentPosition?$AA@
  0011d	68 37 06 00 00	 push	 1591			; 00000637H
  00122	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00127	6a 04		 push	 4
  00129	6a 09		 push	 9
  0012b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00130	83 c4 18	 add	 esp, 24			; 00000018H
  00133	8b 45 08	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  00136	50		 push	 eax
  00137	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  0013e	52		 push	 edx
  0013f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00142	50		 push	 eax
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@CCAPGDDI@Voice?5?$CFx?5?$CI?$CFx?$CJ?5setting?5current?5bu@
  00148	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0014d	83 c4 10	 add	 esp, 16			; 00000010H

; 1592 : 
; 1593 :             irql.Raise();

  00150	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00153	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 1594 :         
; 1595 :             MCPX_CHECK_VOICE_FIFO(2 * m_bVoiceCount);

  00158	68 3b 06 00 00	 push	 1595			; 0000063bH
  0015d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00167	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0016c	0f b6 c8	 movzx	 ecx, al
  0016f	33 d2		 xor	 edx, edx
  00171	83 f9 02	 cmp	 ecx, 2
  00174	0f 95 c2	 setne	 dl
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0017d	83 c4 10	 add	 esp, 16			; 00000010H
  00180	68 3b 06 00 00	 push	 1595			; 0000063bH
  00185	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0018a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  0018f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00192	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  00196	d1 e1		 shl	 ecx, 1
  00198	33 d2		 xor	 edx, edx
  0019a	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0019d	0f 9f c2	 setg	 dl
  001a0	52		 push	 edx
  001a1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001a6	83 c4 10	 add	 esp, 16			; 00000010H
$L35926:
  001a9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001ae	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  001b4	c1 e9 02	 shr	 ecx, 2
  001b7	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001ba	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  001be	d1 e0		 shl	 eax, 1
  001c0	3b c8		 cmp	 ecx, eax
  001c2	73 02		 jae	 SHORT $L35927
  001c4	eb e3		 jmp	 SHORT $L35926
$L35927:

; 1596 :             
; 1597 :             for(i = 0; i < m_bVoiceCount; i++)

  001c6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001cd	eb 09		 jmp	 SHORT $L35930
$L35931:
  001cf	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001d2	83 c1 01	 add	 ecx, 1
  001d5	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$L35930:
  001d8	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001db	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  001df	39 45 f0	 cmp	 DWORD PTR _i$[ebp], eax
  001e2	73 44		 jae	 SHORT $L35932

; 1598 :             {
; 1599 :                 MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  001e4	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  001e7	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001ea	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  001ef	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  001f4	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 1600 :                 MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_ON);

  001fa	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  001ff	c7 82 00 00 82
	fe 01 00 00 00	 mov	 DWORD PTR [edx-25034752], 1

; 1601 :                 MCPX_VOICE_WRITE(SetVoiceBufCBO, dwPlayCursor);

  00209	b8 d8 03 00 00	 mov	 eax, 984		; 000003d8H
  0020e	8b 4d 08	 mov	 ecx, DWORD PTR _dwPlayCursor$[ebp]
  00211	89 88 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], ecx

; 1602 :                 MCPX_VOICE_WRITE(VoiceLock, NV1BA0_PIO_VOICE_LOCK_PARAMETER_OFF);

  00217	ba fc 02 00 00	 mov	 edx, 764		; 000002fcH
  0021c	c7 82 00 00 82
	fe 00 00 00 00	 mov	 DWORD PTR [edx-25034752], 0

; 1603 :             }

  00226	eb a7		 jmp	 SHORT $L35931
$L35932:

; 1604 : 
; 1605 :             irql.Lower();

  00228	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0022b	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower
$L35921:

; 1606 :         }
; 1607 :     }
; 1608 :     else

  00230	eb 0c		 jmp	 SHORT $L35941
$L35911:

; 1609 :     {
; 1610 :         //
; 1611 :         // Cache the play cursor for the next time we call Play
; 1612 :         //
; 1613 :         
; 1614 :         m_dwCachedPlayCursor = dwPlayCursor;

  00232	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00235	8b 4d 08	 mov	 ecx, DWORD PTR _dwPlayCursor$[ebp]
  00238	89 88 38 01 00
	00		 mov	 DWORD PTR [eax+312], ecx
$L35941:

; 1615 :     }
; 1616 : 
; 1617 :     //
; 1618 :     // Signal position events
; 1619 :     //
; 1620 : 
; 1621 :     OnPositionDelta();

  0023e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00241	e8 00 00 00 00	 call	 ?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::OnPositionDelta

; 1622 : 
; 1623 :     DPF_LEAVE_HRESULT(hr);
; 1624 : 
; 1625 :     return hr;

  00246	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]

; 1626 : }

  00249	8b e5		 mov	 esp, ebp
  0024b	5d		 pop	 ebp
  0024c	c2 04 00	 ret	 4
?SetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJK@Z ENDP ; DirectSound::CMcpxBuffer::SetCurrentPosition
DSOUND	ENDS
PUBLIC	?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z	; DirectSound::CMcpxNotifier::GetStatus
PUBLIC	?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z	; DirectSound::CMcpxNotifier::SetStatus
; Function compile flags: /Odt
;	COMDAT ?ServiceVoiceInterrupt@CMcpxBuffer@DirectSound@@MAEHXZ
DSOUND	SEGMENT
_this$ = -8
_fHandled$ = -4
?ServiceVoiceInterrupt@CMcpxBuffer@DirectSound@@MAEHXZ PROC NEAR ; DirectSound::CMcpxBuffer::ServiceVoiceInterrupt, COMDAT
; _this$ = ecx

; 1652 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1653 :     BOOL                    fHandled;
; 1654 : 
; 1655 :     DPF_ENTER();
; 1656 : 
; 1657 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 79 06 00 00	 push	 1657			; 00000679H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1658 :     ASSERT(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  00031	68 7a 06 00 00	 push	 1658			; 0000067aH
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
  00040	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00043	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00047	83 e0 01	 and	 eax, 1
  0004a	f7 d8		 neg	 eax
  0004c	1b c0		 sbb	 eax, eax
  0004e	40		 inc	 eax
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 1659 :     
; 1660 :     if(fHandled = m_Notifier.GetStatus(MCPX_NOTIFIER_VOICE_OFF))

  00058	6a 03		 push	 3
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 68	 add	 ecx, 104		; 00000068H
  00060	e8 00 00 00 00	 call	 ?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z ; DirectSound::CMcpxNotifier::GetStatus
  00065	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax
  00068	83 7d fc 00	 cmp	 DWORD PTR _fHandled$[ebp], 0
  0006c	74 41		 je	 SHORT $L35947

; 1661 :     {
; 1662 :         //
; 1663 :         // Reset the notifier
; 1664 :         //
; 1665 :         
; 1666 :         m_Notifier.SetStatus(MCPX_NOTIFIER_VOICE_OFF, FALSE);

  0006e	6a 00		 push	 0
  00070	6a 03		 push	 3
  00072	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	83 c1 68	 add	 ecx, 104		; 00000068H
  00078	e8 00 00 00 00	 call	 ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z ; DirectSound::CMcpxNotifier::SetStatus

; 1667 : 
; 1668 :         //
; 1669 :         // Handle the stop
; 1670 :         //
; 1671 : 
; 1672 :         DeactivateVoice();

  0007d	6a 00		 push	 0
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice

; 1673 : 
; 1674 :         //
; 1675 :         // If we're LOCDEFER, free voice resources
; 1676 :         //
; 1677 : 
; 1678 :         if(m_pSettings->m_dwFlags & DSBCAPS_LOCDEFER)

  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00090	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00093	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00098	85 c0		 test	 eax, eax
  0009a	74 13		 je	 SHORT $L35947

; 1679 :         {
; 1680 :             ScheduleDeferredCommand(MCPX_DEFERREDCMD_BUFFER_RELEASERESOURCES, 0, 0);

  0009c	6a 00		 push	 0
  0009e	6a 00		 push	 0
  000a0	6a 00		 push	 0
  000a2	6a 01		 push	 1
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	ff 52 18	 call	 DWORD PTR [edx+24]
$L35947:

; 1681 :         }
; 1682 :     }
; 1683 : 
; 1684 :     DPF_LEAVE(fHandled);
; 1685 : 
; 1686 :     return fHandled;

  000af	8b 45 fc	 mov	 eax, DWORD PTR _fHandled$[ebp]

; 1687 : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
?ServiceVoiceInterrupt@CMcpxBuffer@DirectSound@@MAEHXZ ENDP ; DirectSound::CMcpxBuffer::ServiceVoiceInterrupt
DSOUND	ENDS
PUBLIC	??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@BMLCBDGO@m_paNotifier?$AA@		; `string'
PUBLIC	??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ ; `string'
PUBLIC	??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@ ; `string'
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpxcore.h
DSOUND_RD	SEGMENT
??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpxcore.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@BMLCBDGO@m_paNotifier?$AA@ DB 'm_paNotifier', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT
??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ DB 'dwNotifierI'
	DB	'ndex < m_dwNotifierCount', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@ DB 'Unexpected notif'
	DB	'ier status', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z
DSOUND	SEGMENT
tv81 = -8
_this$ = -4
_dwNotifierIndex$ = 8
?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z PROC NEAR	; DirectSound::CMcpxNotifier::GetStatus, COMDAT
; _this$ = ecx

; 436  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 437  :         ASSERT(m_paNotifier);

  00009	68 b5 01 00 00	 push	 437			; 000001b5H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	0f 94 c1	 sete	 cl
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 438  :         ASSERT(dwNotifierIndex < m_dwNotifierCount);

  0002c	68 b6 01 00 00	 push	 438			; 000001b6H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00041	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00044	1b c9		 sbb	 ecx, ecx
  00046	41		 inc	 ecx
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 439  :     
; 440  :         switch(m_paNotifier[dwNotifierIndex].Status)
; 441  :         {

  00050	8b 55 08	 mov	 edx, DWORD PTR _dwNotifierIndex$[ebp]
  00053	c1 e2 04	 shl	 edx, 4
  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8a 54 11 0f	 mov	 dl, BYTE PTR [ecx+edx+15]
  0005f	88 55 f8	 mov	 BYTE PTR tv81[ebp], dl
  00062	80 7d f8 01	 cmp	 BYTE PTR tv81[ebp], 1
  00066	74 08		 je	 SHORT $L34189
  00068	80 7d f8 80	 cmp	 BYTE PTR tv81[ebp], 128	; 00000080H
  0006c	74 09		 je	 SHORT $L34190
  0006e	eb 0b		 jmp	 SHORT $L34191
$L34189:

; 442  :             case NV1BA0_NOTIFICATION_STATUS_DONE_SUCCESS:
; 443  :                 return TRUE;

  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	eb 1f		 jmp	 SHORT $L34182
$L34190:

; 444  : 
; 445  :             case NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS:
; 446  :                 return FALSE;

  00077	33 c0		 xor	 eax, eax
  00079	eb 1b		 jmp	 SHORT $L34182
$L34191:

; 447  : 
; 448  :             default:
; 449  :                 ASSERTMSG("Unexpected notifier status");

  0007b	68 c1 01 00 00	 push	 449			; 000001c1H
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
  0008a	6a 01		 push	 1
  0008c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00091	83 c4 10	 add	 esp, 16			; 00000010H

; 450  :                 return FALSE;

  00094	33 c0		 xor	 eax, eax
$L34182:

; 451  :         }
; 452  :     }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z ENDP	; DirectSound::CMcpxNotifier::GetStatus
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z
DSOUND	SEGMENT
_this$ = -4
_dwNotifierIndex$ = 8
_fSignaled$ = 12
?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z PROC NEAR ; DirectSound::CMcpxNotifier::SetStatus, COMDAT
; _this$ = ecx

; 455  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  :         ASSERT(m_paNotifier);

  00007	68 c8 01 00 00	 push	 456			; 000001c8H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	0f 94 c1	 sete	 cl
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 457  :         ASSERT(dwNotifierIndex < m_dwNotifierCount);

  0002a	68 c9 01 00 00	 push	 457			; 000001c9H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  0003f	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00042	1b c9		 sbb	 ecx, ecx
  00044	41		 inc	 ecx
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : 
; 459  :         m_paNotifier[dwNotifierIndex].Status = fSignaled ? NV1BA0_NOTIFICATION_STATUS_DONE_SUCCESS : NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS;

  0004e	8b 55 0c	 mov	 edx, DWORD PTR _fSignaled$[ebp]
  00051	f7 da		 neg	 edx
  00053	1b d2		 sbb	 edx, edx
  00055	83 e2 81	 and	 edx, -127		; ffffff81H
  00058	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0005e	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00061	c1 e0 04	 shl	 eax, 4
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00069	88 54 01 0f	 mov	 BYTE PTR [ecx+eax+15], dl

; 460  :     }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z ENDP	; DirectSound::CMcpxNotifier::SetStatus
DSOUND	ENDS
PUBLIC	?SetNotificationPositions@CMcpxBuffer@DirectSound@@QAEJXZ ; DirectSound::CMcpxBuffer::SetNotificationPositions
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpbuf.cpp
;	COMDAT ?SetNotificationPositions@CMcpxBuffer@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -16
$T36545 = -12
___AutoIrql$ = -8
?SetNotificationPositions@CMcpxBuffer@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxBuffer::SetNotificationPositions, COMDAT
; _this$ = ecx

; 1713 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1714 :     DPF_ENTER();
; 1715 :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1716 : 
; 1717 :     //
; 1718 :     // If we're playing, make sure the position delta event is set up
; 1719 :     //
; 1720 : 
; 1721 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00011	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00014	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00018	83 e1 03	 and	 ecx, 3
  0001b	83 f9 03	 cmp	 ecx, 3
  0001e	75 25		 jne	 SHORT $L35954

; 1722 :     {
; 1723 :         if(m_pSettings->m_dwNotifyCount)

  00020	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00029	83 b8 d8 00 00
	00 00		 cmp	 DWORD PTR [eax+216], 0
  00030	74 13		 je	 SHORT $L35954

; 1724 :         {
; 1725 :             ScheduleDeferredCommand(MCPX_DEFERREDCMD_BUFFER_POSITIONDELTA, 0, 0);

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 02		 push	 2
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 52 18	 call	 DWORD PTR [edx+24]
$L35954:

; 1726 :         }
; 1727 :     }
; 1728 : 
; 1729 :     //
; 1730 :     // Reset the notification index
; 1731 :     //
; 1732 : 
; 1733 :     m_dwLastNotifyPosition = -1;

  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	c7 80 3c 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+316], -1

; 1734 :     m_dwNextNotifyIndex = 0;

  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	c7 81 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+320], 0

; 1735 : 
; 1736 :     DPF_LEAVE_HRESULT(DS_OK);
; 1737 : 
; 1738 :     return DS_OK;

  0005f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T36545[ebp], 0
  00066	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00069	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0006e	8b 45 f4	 mov	 eax, DWORD PTR $T36545[ebp]

; 1739 : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?SetNotificationPositions@CMcpxBuffer@DirectSound@@QAEJXZ ENDP ; DirectSound::CMcpxBuffer::SetNotificationPositions
DSOUND	ENDS
PUBLIC	??_C@_0BK@OKPGDKCI@m_pSettings?9?$DOm_paNotifies?$AA@ ; `string'
PUBLIC	??_C@_0O@LGHHDKBB@SUCCEEDED?$CIhr?$CJ?$AA@	; `string'
PUBLIC	?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z ; DirectSound::CMcpxBuffer::NotifyToPosition
PUBLIC	?NotifyStop@CMcpxBuffer@DirectSound@@IAEXXZ	; DirectSound::CMcpxBuffer::NotifyStop
;	COMDAT ??_C@_0BK@OKPGDKCI@m_pSettings?9?$DOm_paNotifies?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@OKPGDKCI@m_pSettings?9?$DOm_paNotifies?$AA@ DB 'm_pSettings->m_'
	DB	'paNotifies', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@LGHHDKBB@SUCCEEDED?$CIhr?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@LGHHDKBB@SUCCEEDED?$CIhr?$CJ?$AA@ DB 'SUCCEEDED(hr)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -20
_hr$ = -16
_dwStartPosition$ = -12
_dwEndPosition$ = -8
_dwPlayCursor$ = -4
?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxBuffer::OnPositionDelta, COMDAT
; _this$ = ecx

; 1765 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1766 :     DWORD                   dwPlayCursor;
; 1767 :     DWORD                   dwStartPosition;
; 1768 :     DWORD                   dwEndPosition;
; 1769 :     HRESULT                 hr;
; 1770 :     
; 1771 :     DPF_ENTER();
; 1772 : 
; 1773 :     if(m_pSettings->m_dwNotifyCount)

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00012	83 b9 d8 00 00
	00 00		 cmp	 DWORD PTR [ecx+216], 0
  00019	0f 84 55 01 00
	00		 je	 $L35961

; 1774 :     {
; 1775 :         ASSERT(m_pSettings->m_paNotifies);

  0001f	68 ef 06 00 00	 push	 1775			; 000006efH
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@OKPGDKCI@m_pSettings?9?$DOm_paNotifies?$AA@
  0002e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00037	33 c9		 xor	 ecx, ecx
  00039	83 b8 d4 00 00
	00 00		 cmp	 DWORD PTR [eax+212], 0
  00040	0f 94 c1	 sete	 cl
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 1776 : 
; 1777 :         //
; 1778 :         // Compare the current position to the last and signal the events in
; 1779 :         // between
; 1780 :         //
; 1781 : 
; 1782 :         if(NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP_ON == MCPX_GET_REG_VALUE(m_RegCache.CfgFMT, NV1BA0_PIO_SET_VOICE_CFG_FMT_LOOP))

  0004c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00052	c1 e8 19	 shr	 eax, 25			; 00000019H
  00055	83 e0 01	 and	 eax, 1
  00058	83 f8 01	 cmp	 eax, 1
  0005b	75 35		 jne	 SHORT $L35968

; 1783 :         {
; 1784 :             dwStartPosition = m_pSettings->m_dwLoopStart;

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00066	8b 82 c8 00 00
	00		 mov	 eax, DWORD PTR [edx+200]
  0006c	89 45 f4	 mov	 DWORD PTR _dwStartPosition$[ebp], eax

; 1785 :             dwEndPosition = m_pSettings->m_dwLoopStart + m_pSettings->m_dwLoopLength;

  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00081	8b 92 c8 00 00
	00		 mov	 edx, DWORD PTR [edx+200]
  00087	03 91 cc 00 00
	00		 add	 edx, DWORD PTR [ecx+204]
  0008d	89 55 f8	 mov	 DWORD PTR _dwEndPosition$[ebp], edx

; 1786 :         }
; 1787 :         else

  00090	eb 19		 jmp	 SHORT $L35969
$L35968:

; 1788 :         {
; 1789 :             dwStartPosition = 0;

  00092	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwStartPosition$[ebp], 0

; 1790 :             dwEndPosition = m_pSettings->m_dwPlayLength;

  00099	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000a2	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  000a8	89 55 f8	 mov	 DWORD PTR _dwEndPosition$[ebp], edx
$L35969:

; 1791 :         }
; 1792 : 
; 1793 :         hr = GetCurrentPosition(&dwPlayCursor, NULL);

  000ab	6a 00		 push	 0
  000ad	8d 45 fc	 lea	 eax, DWORD PTR _dwPlayCursor$[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	e8 00 00 00 00	 call	 ?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z ; DirectSound::CMcpxBuffer::GetCurrentPosition
  000b9	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 1794 :         ASSERT(SUCCEEDED(hr));

  000bc	68 02 07 00 00	 push	 1794			; 00000702H
  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@LGHHDKBB@SUCCEEDED?$CIhr?$CJ?$AA@
  000cb	33 c9		 xor	 ecx, ecx
  000cd	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d1	0f 9c c1	 setl	 cl
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000da	83 c4 10	 add	 esp, 16			; 00000010H

; 1795 : 
; 1796 :         if((dwPlayCursor > m_dwLastNotifyPosition) || (m_dwLastNotifyPosition > dwEndPosition))

  000dd	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  000e3	3b 82 3c 01 00
	00		 cmp	 eax, DWORD PTR [edx+316]
  000e9	77 0e		 ja	 SHORT $L35973
  000eb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	8b 91 3c 01 00
	00		 mov	 edx, DWORD PTR [ecx+316]
  000f4	3b 55 f8	 cmp	 edx, DWORD PTR _dwEndPosition$[ebp]
  000f7	76 10		 jbe	 SHORT $L35972
$L35973:

; 1797 :         {
; 1798 :             //
; 1799 :             // The play cursor has moved forward.  Signal the events in
; 1800 :             // between where we were and where we are.
; 1801 :             //
; 1802 : 
; 1803 :             NotifyToPosition(dwPlayCursor);

  000f9	6a 01		 push	 1
  000fb	8b 45 fc	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  000fe	50		 push	 eax
  000ff	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	e8 00 00 00 00	 call	 ?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z ; DirectSound::CMcpxBuffer::NotifyToPosition

; 1804 :         }
; 1805 :         else if(dwPlayCursor < m_dwLastNotifyPosition)

  00107	eb 45		 jmp	 SHORT $L35974
$L35972:
  00109	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	8b 55 fc	 mov	 edx, DWORD PTR _dwPlayCursor$[ebp]
  0010f	3b 91 3c 01 00
	00		 cmp	 edx, DWORD PTR [ecx+316]
  00115	73 37		 jae	 SHORT $L35974

; 1806 :         {
; 1807 :             //
; 1808 :             // The play cursor has moved backwards.  We'll assume it's because 
; 1809 :             // we looped.  Signal to the end of the buffer, reset the 
; 1810 :             // notification index to the beginning of the play region, then 
; 1811 :             // signal up to the current position.
; 1812 :             //
; 1813 : 
; 1814 :             NotifyToPosition(dwEndPosition);

  00117	6a 01		 push	 1
  00119	8b 45 f8	 mov	 eax, DWORD PTR _dwEndPosition$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	e8 00 00 00 00	 call	 ?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z ; DirectSound::CMcpxBuffer::NotifyToPosition

; 1815 : 
; 1816 :             m_dwNextNotifyIndex = 0;

  00125	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	c7 81 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+320], 0

; 1817 : 
; 1818 :             NotifyToPosition(dwStartPosition, FALSE);

  00132	6a 00		 push	 0
  00134	8b 55 f4	 mov	 edx, DWORD PTR _dwStartPosition$[ebp]
  00137	52		 push	 edx
  00138	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	e8 00 00 00 00	 call	 ?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z ; DirectSound::CMcpxBuffer::NotifyToPosition

; 1819 :             NotifyToPosition(dwPlayCursor);

  00140	6a 01		 push	 1
  00142	8b 45 fc	 mov	 eax, DWORD PTR _dwPlayCursor$[ebp]
  00145	50		 push	 eax
  00146	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	e8 00 00 00 00	 call	 ?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z ; DirectSound::CMcpxBuffer::NotifyToPosition
$L35974:

; 1820 :         }
; 1821 : 
; 1822 :         //
; 1823 :         // If the buffer isn't playing anymore, signal the stop event and
; 1824 :         // unregister for position delta callbacks.
; 1825 :         //
; 1826 : 
; 1827 :         if(!(m_dwStatus & MCPX_VOICESTATUS_ACTIVEORVOICEOFF))

  0014e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00151	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00155	81 e2 02 80 00
	00		 and	 edx, 32770		; 00008002H
  0015b	85 d2		 test	 edx, edx
  0015d	75 15		 jne	 SHORT $L35961

; 1828 :         {
; 1829 :             RemoveDeferredCommand(MCPX_DEFERREDCMD_BUFFER_POSITIONDELTA);

  0015f	6a 02		 push	 2
  00161	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00164	8b 10		 mov	 edx, DWORD PTR [eax]
  00166	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1830 :             NotifyStop();

  0016c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	e8 00 00 00 00	 call	 ?NotifyStop@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::NotifyStop
$L35961:

; 1831 :         }
; 1832 :     }
; 1833 : 
; 1834 :     DPF_LEAVE_VOID();
; 1835 : }

  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxBuffer::OnPositionDelta
DSOUND	ENDS
PUBLIC	??_C@_0BN@GKBFFOIC@m_pSettings?9?$DOm_dwNotifyCount?$AA@ ; `string'
EXTRN	__imp__NtSetEvent@8:NEAR
;	COMDAT ??_C@_0BN@GKBFFOIC@m_pSettings?9?$DOm_dwNotifyCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@GKBFFOIC@m_pSettings?9?$DOm_dwNotifyCount?$AA@ DB 'm_pSettings-'
	DB	'>m_dwNotifyCount', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z
DSOUND	SEGMENT
_this$ = -4
_dwPlayCursor$ = 8
_fSignal$ = 12
?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z PROC NEAR ; DirectSound::CMcpxBuffer::NotifyToPosition, COMDAT
; _this$ = ecx

; 1864 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1865 :     DPF_ENTER();
; 1866 : 
; 1867 :     ASSERT(m_pSettings->m_dwNotifyCount);

  00007	68 4b 07 00 00	 push	 1867			; 0000074bH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GKBFFOIC@m_pSettings?9?$DOm_dwNotifyCount?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0001f	33 d2		 xor	 edx, edx
  00021	83 b9 d8 00 00
	00 00		 cmp	 DWORD PTR [ecx+216], 0
  00028	0f 94 c2	 sete	 dl
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 1868 :     ASSERT(m_pSettings->m_paNotifies);

  00034	68 4c 07 00 00	 push	 1868			; 0000074cH
  00039	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@OKPGDKCI@m_pSettings?9?$DOm_paNotifies?$AA@
  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0004c	33 d2		 xor	 edx, edx
  0004e	83 b9 d4 00 00
	00 00		 cmp	 DWORD PTR [ecx+212], 0
  00055	0f 94 c2	 sete	 dl
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
$L35984:

; 1869 : 
; 1870 :     while(TRUE)

  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	85 c0		 test	 eax, eax
  00068	0f 84 a6 00 00
	00		 je	 $L35985

; 1871 :     {
; 1872 :         if(m_dwNextNotifyIndex >= m_pSettings->m_dwNotifyCount)

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [eax+320]
  00080	3b 8a d8 00 00
	00		 cmp	 ecx, DWORD PTR [edx+216]
  00086	72 05		 jb	 SHORT $L35986

; 1873 :         {
; 1874 :             break;

  00088	e9 87 00 00 00	 jmp	 $L35985
$L35986:

; 1875 :         }
; 1876 :         else if(DSBPN_OFFSETSTOP == m_pSettings->m_paNotifies[m_dwNextNotifyIndex].dwOffset)

  0008d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00090	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 91 40 01 00
	00		 mov	 edx, DWORD PTR [ecx+320]
  0009f	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [eax+212]
  000a5	83 3c d0 ff	 cmp	 DWORD PTR [eax+edx*8], -1
  000a9	75 02		 jne	 SHORT $L35988

; 1877 :         {
; 1878 :             break;

  000ab	eb 67		 jmp	 SHORT $L35985
$L35988:

; 1879 :         }
; 1880 :         else if(m_pSettings->m_paNotifies[m_dwNextNotifyIndex].dwOffset >= dwPlayCursor)

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [eax+320]
  000bf	8b 92 d4 00 00
	00		 mov	 edx, DWORD PTR [edx+212]
  000c5	8b 04 ca	 mov	 eax, DWORD PTR [edx+ecx*8]
  000c8	3b 45 08	 cmp	 eax, DWORD PTR _dwPlayCursor$[ebp]
  000cb	72 02		 jb	 SHORT $L35987

; 1881 :         {
; 1882 :             break;

  000cd	eb 45		 jmp	 SHORT $L35985
$L35987:

; 1883 :         }
; 1884 : 
; 1885 :         if(fSignal)

  000cf	83 7d 0c 00	 cmp	 DWORD PTR _fSignal$[ebp], 0
  000d3	74 25		 je	 SHORT $L35991

; 1886 :         {
; 1887 :             NtSetEvent(m_pSettings->m_paNotifies[m_dwNextNotifyIndex].hEventNotify, NULL);

  000d5	6a 00		 push	 0
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [eax+320]
  000e9	8b 92 d4 00 00
	00		 mov	 edx, DWORD PTR [edx+212]
  000ef	8b 44 ca 04	 mov	 eax, DWORD PTR [edx+ecx*8+4]
  000f3	50		 push	 eax
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtSetEvent@8
$L35991:

; 1888 :         }
; 1889 : 
; 1890 :         m_dwNextNotifyIndex++;

  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	8b 91 40 01 00
	00		 mov	 edx, DWORD PTR [ecx+320]
  00103	83 c2 01	 add	 edx, 1
  00106	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00109	89 90 40 01 00
	00		 mov	 DWORD PTR [eax+320], edx

; 1891 :     }

  0010f	e9 4d ff ff ff	 jmp	 $L35984
$L35985:

; 1892 : 
; 1893 :     m_dwLastNotifyPosition = dwPlayCursor;

  00114	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	8b 55 08	 mov	 edx, DWORD PTR _dwPlayCursor$[ebp]
  0011a	89 91 3c 01 00
	00		 mov	 DWORD PTR [ecx+316], edx

; 1894 : 
; 1895 :     DPF_LEAVE_VOID();
; 1896 : }

  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
?NotifyToPosition@CMcpxBuffer@DirectSound@@IAEXKH@Z ENDP ; DirectSound::CMcpxBuffer::NotifyToPosition
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?NotifyStop@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
?NotifyStop@CMcpxBuffer@DirectSound@@IAEXXZ PROC NEAR	; DirectSound::CMcpxBuffer::NotifyStop, COMDAT
; _this$ = ecx

; 1922 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1923 :     DWORD                   i;
; 1924 : 
; 1925 :     DPF_ENTER();
; 1926 : 
; 1927 :     ASSERT(m_pSettings->m_dwNotifyCount);

  00009	68 87 07 00 00	 push	 1927			; 00000787H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GKBFFOIC@m_pSettings?9?$DOm_dwNotifyCount?$AA@
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00021	33 d2		 xor	 edx, edx
  00023	83 b9 d8 00 00
	00 00		 cmp	 DWORD PTR [ecx+216], 0
  0002a	0f 94 c2	 sete	 dl
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 1928 :     ASSERT(m_pSettings->m_paNotifies);

  00036	68 88 07 00 00	 push	 1928			; 00000788H
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@OKPGDKCI@m_pSettings?9?$DOm_paNotifies?$AA@
  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0004e	33 d2		 xor	 edx, edx
  00050	83 b9 d4 00 00
	00 00		 cmp	 DWORD PTR [ecx+212], 0
  00057	0f 94 c2	 sete	 dl
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00060	83 c4 10	 add	 esp, 16			; 00000010H

; 1929 : 
; 1930 :     for(i = m_pSettings->m_dwNotifyCount; i > 0; i--)

  00063	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0006c	8b 91 d8 00 00
	00		 mov	 edx, DWORD PTR [ecx+216]
  00072	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00075	eb 09		 jmp	 SHORT $L35997
$L35998:
  00077	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007a	83 e8 01	 sub	 eax, 1
  0007d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35997:
  00080	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00084	76 3c		 jbe	 SHORT $L35995

; 1931 :     {
; 1932 :         if(DSBPN_OFFSETSTOP != m_pSettings->m_paNotifies[i - 1].dwOffset)

  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0008f	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00098	83 7c c8 f8 ff	 cmp	 DWORD PTR [eax+ecx*8-8], -1
  0009d	74 02		 je	 SHORT $L36000

; 1933 :         {
; 1934 :             break;

  0009f	eb 21		 jmp	 SHORT $L35995
$L36000:

; 1935 :         }
; 1936 : 
; 1937 :         NtSetEvent(m_pSettings->m_paNotifies[i - 1].hEventNotify, NULL);

  000a1	6a 00		 push	 0
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000ac	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [eax+212]
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b5	8b 44 d1 fc	 mov	 eax, DWORD PTR [ecx+edx*8-4]
  000b9	50		 push	 eax
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtSetEvent@8

; 1938 :     }

  000c0	eb b5		 jmp	 SHORT $L35998
$L35995:

; 1939 : 
; 1940 :     DPF_LEAVE_VOID();
; 1941 : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
?NotifyStop@CMcpxBuffer@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxBuffer::NotifyStop
DSOUND	ENDS
PUBLIC	??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@ ; `string'
PUBLIC	??_C@_0CF@FCHNGNOJ@CMcpxBuffer?3?3ScheduleDeferredCom@ ; `string'
PUBLIC	??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@ ; `string'
EXTRN	?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z:NEAR ; DirectSound::CMcpxAPU::ScheduleDeferredCommand
;	COMDAT ??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
DSOUND_RD	SEGMENT
??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@ DB 'dwComman'
	DB	'd < NUMELMS(m_aDeferredCommands)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FCHNGNOJ@CMcpxBuffer?3?3ScheduleDeferredCom@
DSOUND_RD	SEGMENT
??_C@_0CF@FCHNGNOJ@CMcpxBuffer?3?3ScheduleDeferredCom@ DB 'CMcpxBuffer::S'
	DB	'cheduleDeferredCommand', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@
DSOUND_RD	SEGMENT
??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@ DB 'V'
	DB	'oice %x (%x) scheduled command %lu', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ScheduleDeferredCommand@CMcpxBuffer@DirectSound@@MAEHK_JK@Z
DSOUND	SEGMENT
_this$ = -12
_fScheduled$ = -8
_pCmd$ = -4
_dwCommand$ = 8
_rtTimeStamp$ = 12
_dwContext$ = 20
?ScheduleDeferredCommand@CMcpxBuffer@DirectSound@@MAEHK_JK@Z PROC NEAR ; DirectSound::CMcpxBuffer::ScheduleDeferredCommand, COMDAT
; _this$ = ecx

; 1973 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1974 :     LPMCPX_DEFERRED_COMMAND pCmd        = &m_aDeferredCommands[dwCommand];

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwCommand$[ebp]
  0000c	c1 e0 05	 shl	 eax, 5
  0000f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8d 94 01 98 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+152]
  00019	89 55 fc	 mov	 DWORD PTR _pCmd$[ebp], edx

; 1975 :     BOOL                    fScheduled;
; 1976 : 
; 1977 :     DPF_ENTER();
; 1978 :     
; 1979 :     ASSERT(dwCommand < NUMELMS(m_aDeferredCommands));

  0001c	68 bb 07 00 00	 push	 1979			; 000007bbH
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
  0002b	83 7d 08 05	 cmp	 DWORD PTR _dwCommand$[ebp], 5
  0002f	1b c0		 sbb	 eax, eax
  00031	40		 inc	 eax
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00038	83 c4 10	 add	 esp, 16			; 00000010H

; 1980 : 
; 1981 :     pCmd->rtTimestamp = rtTimeStamp;

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0003e	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  00041	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  00044	8b 45 10	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  00047	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1982 :     pCmd->dwContext = dwContext;

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0004d	8b 55 14	 mov	 edx, DWORD PTR _dwContext$[ebp]
  00050	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1983 : 
; 1984 :     if(fScheduled = m_pMcpxApu->ScheduleDeferredCommand(pCmd))

  00053	8b 45 fc	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0005d	e8 00 00 00 00	 call	 ?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::ScheduleDeferredCommand
  00062	89 45 f8	 mov	 DWORD PTR _fScheduled$[ebp], eax
  00065	83 7d f8 00	 cmp	 DWORD PTR _fScheduled$[ebp], 0
  00069	74 3d		 je	 SHORT $L36010

; 1985 :     {
; 1986 :         DPF_BLAB("Voice %x (%x) scheduled command %lu", this, m_ahVoices[0], dwCommand);

  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FCHNGNOJ@CMcpxBuffer?3?3ScheduleDeferredCom@
  00075	68 c2 07 00 00	 push	 1986			; 000007c2H
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  0007f	6a 05		 push	 5
  00081	6a 09		 push	 9
  00083	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00088	83 c4 18	 add	 esp, 24			; 00000018H
  0008b	8b 55 08	 mov	 edx, DWORD PTR _dwCommand$[ebp]
  0008e	52		 push	 edx
  0008f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00092	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00096	51		 push	 ecx
  00097	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0009a	52		 push	 edx
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@
  000a0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a5	83 c4 10	 add	 esp, 16			; 00000010H
$L36010:

; 1987 :     }
; 1988 : 
; 1989 :     DPF_LEAVE(fScheduled);
; 1990 : 
; 1991 :     return fScheduled;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _fScheduled$[ebp]

; 1992 : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 10 00	 ret	 16			; 00000010H
?ScheduleDeferredCommand@CMcpxBuffer@DirectSound@@MAEHK_JK@Z ENDP ; DirectSound::CMcpxBuffer::ScheduleDeferredCommand
DSOUND	ENDS
PUBLIC	??_C@_0CD@OBJGLBKC@CMcpxBuffer?3?3RemoveDeferredComma@ ; `string'
PUBLIC	??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@ ; `string'
EXTRN	?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z:NEAR ; DirectSound::CMcpxAPU::RemoveDeferredCommand
;	COMDAT ??_C@_0CD@OBJGLBKC@CMcpxBuffer?3?3RemoveDeferredComma@
DSOUND_RD	SEGMENT
??_C@_0CD@OBJGLBKC@CMcpxBuffer?3?3RemoveDeferredComma@ DB 'CMcpxBuffer::R'
	DB	'emoveDeferredCommand', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@
DSOUND_RD	SEGMENT
??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@ DB 'V'
	DB	'oice %x (%x) unscheduling command %lu', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?RemoveDeferredCommand@CMcpxBuffer@DirectSound@@MAEXK@Z
DSOUND	SEGMENT
_this$ = -4
_dwCommand$ = 8
?RemoveDeferredCommand@CMcpxBuffer@DirectSound@@MAEXK@Z PROC NEAR ; DirectSound::CMcpxBuffer::RemoveDeferredCommand, COMDAT
; _this$ = ecx

; 2018 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2019 :     DPF_ENTER();
; 2020 : 
; 2021 :     ASSERT(dwCommand < NUMELMS(m_aDeferredCommands));

  00007	68 e5 07 00 00	 push	 2021			; 000007e5H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
  00016	83 7d 08 05	 cmp	 DWORD PTR _dwCommand$[ebp], 5
  0001a	1b c0		 sbb	 eax, eax
  0001c	40		 inc	 eax
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 2022 : 
; 2023 :     if(m_aDeferredCommands[dwCommand].dwFlags & MCPX_DEFERREDCMDF_SCHEDULED)

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _dwCommand$[ebp]
  00029	c1 e1 05	 shl	 ecx, 5
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 84 0a a0 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+160]
  00036	83 e0 02	 and	 eax, 2
  00039	85 c0		 test	 eax, eax
  0003b	74 3d		 je	 SHORT $L36017

; 2024 :     {
; 2025 :         DPF_BLAB("Voice %x (%x) unscheduling command %lu", this, m_ahVoices[0], dwCommand);

  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@OBJGLBKC@CMcpxBuffer?3?3RemoveDeferredComma@
  00047	68 e9 07 00 00	 push	 2025			; 000007e9H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00051	6a 05		 push	 5
  00053	6a 09		 push	 9
  00055	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _dwCommand$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00068	50		 push	 eax
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	51		 push	 ecx
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@
  00072	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00077	83 c4 10	 add	 esp, 16			; 00000010H
$L36017:

; 2026 :     }
; 2027 :     
; 2028 :     m_pMcpxApu->RemoveDeferredCommand(&m_aDeferredCommands[dwCommand]);

  0007a	8b 55 08	 mov	 edx, DWORD PTR _dwCommand$[ebp]
  0007d	c1 e2 05	 shl	 edx, 5
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8d 8c 10 98 00
	00 00		 lea	 ecx, DWORD PTR [eax+edx+152]
  0008a	51		 push	 ecx
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00091	e8 00 00 00 00	 call	 ?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommand

; 2029 : 
; 2030 :     DPF_LEAVE_VOID();
; 2031 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?RemoveDeferredCommand@CMcpxBuffer@DirectSound@@MAEXK@Z ENDP ; DirectSound::CMcpxBuffer::RemoveDeferredCommand
DSOUND	ENDS
PUBLIC	??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@ ; `string'
PUBLIC	?OnDeferredTerminate@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::OnDeferredTerminate
EXTRN	?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::CheckStuckVoice
;	COMDAT ??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@
DSOUND_RD	SEGMENT
??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@ DB 'Unexpected de'
	DB	'ferred command identifier', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ServiceDeferredCommand@CMcpxBuffer@DirectSound@@MAEXKK@Z
DSOUND	SEGMENT
tv64 = -8
_this$ = -4
_dwCommand$ = 8
_dwContext$ = 12
?ServiceDeferredCommand@CMcpxBuffer@DirectSound@@MAEXKK@Z PROC NEAR ; DirectSound::CMcpxBuffer::ServiceDeferredCommand, COMDAT
; _this$ = ecx

; 2059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2060 :     DPF_ENTER();
; 2061 :     
; 2062 :     switch(dwCommand)
; 2063 :     {

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwCommand$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d f8 04	 cmp	 DWORD PTR tv64[ebp], 4
  00013	77 44		 ja	 SHORT $L36034
  00015	8b 4d f8	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L36564[ecx*4]
$L36029:

; 2064 :         case MCPX_DEFERREDCMD_BUFFER_PLAY:
; 2065 :             Play(dwContext);

  0001f	8b 55 0c	 mov	 edx, DWORD PTR _dwContext$[ebp]
  00022	52		 push	 edx
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play

; 2066 :             break;

  0002b	eb 45		 jmp	 SHORT $L36024
$L36030:

; 2067 : 
; 2068 :         case MCPX_DEFERREDCMD_BUFFER_STOP:
; 2069 :             Stop(dwContext);

  0002d	8b 45 0c	 mov	 eax, DWORD PTR _dwContext$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Stop

; 2070 :             break;

  00039	eb 37		 jmp	 SHORT $L36024
$L36031:

; 2071 : 
; 2072 :         case MCPX_DEFERREDCMD_BUFFER_POSITIONDELTA:
; 2073 :             OnPositionDelta();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?OnPositionDelta@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::OnPositionDelta

; 2074 :             break;

  00043	eb 2d		 jmp	 SHORT $L36024
$L36032:

; 2075 : 
; 2076 :         case MCPX_DEFERREDCMD_BUFFER_RELEASERESOURCES:
; 2077 :             OnDeferredTerminate();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?OnDeferredTerminate@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::OnDeferredTerminate

; 2078 :             break;

  0004d	eb 23		 jmp	 SHORT $L36024
$L36033:

; 2079 : 
; 2080 :         case MCPX_DEFERREDCMD_BUFFER_CHECKSTUCK:
; 2081 :             CheckStuckVoice();

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::CheckStuckVoice

; 2082 :             break;

  00057	eb 19		 jmp	 SHORT $L36024
$L36034:

; 2083 : 
; 2084 :         default:
; 2085 :             ASSERTMSG("Unexpected deferred command identifier");

  00059	68 25 08 00 00	 push	 2085			; 00000825H
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@GPGOHOEG@c?3?2xbox?2private?2windows?2directx?2@
  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@
  00068	6a 01		 push	 1
  0006a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
$L36024:

; 2086 :             break;
; 2087 :     }
; 2088 : 
; 2089 :     DPF_LEAVE_VOID();
; 2090 : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
$L36564:
  00078	00 00 00 00	 DD	 $L36033
  0007c	00 00 00 00	 DD	 $L36032
  00080	00 00 00 00	 DD	 $L36031
  00084	00 00 00 00	 DD	 $L36029
  00088	00 00 00 00	 DD	 $L36030
?ServiceDeferredCommand@CMcpxBuffer@DirectSound@@MAEXKK@Z ENDP ; DirectSound::CMcpxBuffer::ServiceDeferredCommand
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?OnDeferredTerminate@CMcpxBuffer@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?OnDeferredTerminate@CMcpxBuffer@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxBuffer::OnDeferredTerminate, COMDAT
; _this$ = ecx

; 2116 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2117 :     DPF_ENTER();
; 2118 : 
; 2119 :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0000e	83 e1 01	 and	 ecx, 1
  00011	85 c9		 test	 ecx, ecx
  00013	74 1a		 je	 SHORT $L36040

; 2120 :     {
; 2121 :         if(!(m_dwStatus & MCPX_VOICESTATUS_ACTIVEORVOICEOFF))

  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  0001c	25 02 80 00 00	 and	 eax, 32770		; 00008002H
  00021	85 c0		 test	 eax, eax
  00023	75 08		 jne	 SHORT $L36041

; 2122 :         {
; 2123 :             ReleaseBufferResources();

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?ReleaseBufferResources@CMcpxBuffer@DirectSound@@IAEXXZ ; DirectSound::CMcpxBuffer::ReleaseBufferResources
$L36041:

; 2124 :         }
; 2125 :     }
; 2126 :     else

  0002d	eb 0d		 jmp	 SHORT $L36039
$L36040:

; 2127 :     {
; 2128 :         RemoveDeferredCommand(MCPX_DEFERREDCMD_BUFFER_RELEASERESOURCES);

  0002f	6a 01		 push	 1
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	ff 52 1c	 call	 DWORD PTR [edx+28]
$L36039:

; 2129 :     }
; 2130 : 
; 2131 :     DPF_LEAVE_VOID();
; 2132 : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?OnDeferredTerminate@CMcpxBuffer@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxBuffer::OnDeferredTerminate
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundBufferSettings@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCDirectSoundBufferSettings@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L36098

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L36098:

; 72   :         }
; 73   : 
; 74   :         return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCDirectSoundBufferSettings@1@PAV21@@Z ENDP ; DirectSound::__AddRef
DSOUND	ENDS
END
