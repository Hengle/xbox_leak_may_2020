; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\mcpstrm.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@LHPHBELB@MCPX_PACKET_CONTEXT?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@HIGHGFIM@Unexpected?5sample?5container?5size@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@HKDHLHAP@?$CBIsListEmpty?$CI?$CGm_lstAvailable?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MIJNAGG@CMcpxStream?3?3SubmitPacket?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@GPDDKKDL@Received?5packet?5?$CFx?0?5buffer?5?$CFx?0?5s@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@NBMOFNIK@dwContiguousLength?5?$DM?5pPacketCont@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HL@OKDGGGFB@ADPCM?5stream?5packet?5data?5must?5be@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@PAMEOFF@Invalid?5pause?5state?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@ILPJECNE@dwFlags?5?$CG?5DSSTREAMFLUSHEX_ASYNC?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DBGAONNG@?$CBm_dwMappedSslCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@JKDGJIFE@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@DJKIMAIJ@IsListEmpty?$CI?$CGm_aSslDesc?$FLi?$FN?4lstPa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@NHLICKD@IsListEmpty?$CI?$CGm_lstPending?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GIMEOBHP@CMcpxStream?3?3OnDeferredFlush?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@HJDCEMOA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5not?5stopped?5yet?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@OCGGCOCJ@CMcpxStream?3?3MapPackets?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@NMFNIODD@Mapped?5?$CFlu?5bytes?5into?5SSL?$CFc?5?$CI?$CFlu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@CPGNAGKM@dwSslIndex?5?$DM?5NUMELMS?$CIm_aSslDesc?$CJ@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@JGEINGIE@pPacketContext?9?$DOdwCompletedSize?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@BHFIBNEP@CMcpxStream?3?3MapPacket?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HBDNLGDO@Working?5packet?5offset?5?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@LEMGLMLF@Mapping?5new?5packet?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@EKGEFKKB@?$CB?$CIdwSampleCount?5?$CG?5?$HO0xFFFF?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FJ@JHNNOMDP@Unable?5to?5map?5the?5next?5packet?5be@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@HOOFEICM@CMcpxStream?3?3CommitSsl?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@HDEBDDHM@Commiting?5SSL?$CFc?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@GDKAOANB@m_dwMappedSslCount?5?$DM?5NUMELMS?$CIm_a@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@PBFGKABP@CMcpxStream?3?3ServiceVoiceInterru@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@GNLINAPG@Stream?5completed?5naturally?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@OPHGPAHK@End?9of?9stream?5reached?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@FALLNBNJ@The?5stream?5is?5starving?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@FHEOKNCI@CMcpxStream?3?3CompleteSsl?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@EJIGHGPD@Completing?5SSL?$CFc?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLCGNEHJ@m_dwMappedSslCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@ILKBEBPP@IsListEmpty?$CI?$CGm_aSslDesc?$FLdwSslInd@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@BFLLHMDL@CMcpxStream?3?3CompletePackets?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DM@GONPEOIP@Packet?5?$CFx?5scheduled?5for?5deferred@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@MBGNENCE@XMEDIAPACKET_STATUS_PENDING?5?$CB?$DN?5d@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KIFNFCNL@CMcpxStream?3?3CompletePacket?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@BMJKKMLO@Completing?5packet?5?$CFx?5with?5status@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@NMIKPKBI@CMcpxStream?3?3ScheduleDeferredCom@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@PANJGBEE@CMcpxStream?3?3RemoveDeferredComma@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?and@@YIXPCGG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?or@@YIXPCGG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AllocateStreamResources@CMcpxStream@DirectSound@@IAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?HasPendingData@CMcpxStream@DirectSound@@QAEHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxStream@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundStreamSettings@1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxStream@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxStream@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxStream@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFormat@CMcpxStream@DirectSound@@UAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SubmitPacket@CMcpxStream@DirectSound@@QAEJABU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Discontinuity@CMcpxStream@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Pause@CMcpxStream@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Pause@CMcpxStream@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Stop@CMcpxStream@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Stop@CMcpxStream@DirectSound@@QAEJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Flush@CMcpxStream@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?OnEndOfStream@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?OnDeferredFlush@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Process@CMcpxStream@DirectSound@@IAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapPackets@CMcpxStream@DirectSound@@IAEHK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MapPacket@CMcpxStream@DirectSound@@IAEKKPAUMCPX_PACKET_CONTEXT@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitSsl@CMcpxStream@DirectSound@@IAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceVoiceInterrupt@CMcpxStream@DirectSound@@MAEHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CompleteSsl@CMcpxStream@DirectSound@@IAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CompletePacket@CMcpxStream@DirectSound@@IAEXPAUMCPX_PACKET_CONTEXT@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ScheduleDeferredCommand@CMcpxStream@DirectSound@@MAEHK_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveDeferredCommand@CMcpxStream@DirectSound@@MAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ServiceDeferredCommand@CMcpxStream@DirectSound@@MAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundStreamSettings@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7CMcpxStream@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
PUBLIC	??0CMcpxStream@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundStreamSettings@1@@Z ; DirectSound::CMcpxStream::CMcpxStream
PUBLIC	?SetFormat@CMcpxStream@DirectSound@@UAEJXZ	; DirectSound::CMcpxStream::SetFormat
PUBLIC	?ServiceVoiceInterrupt@CMcpxStream@DirectSound@@MAEHXZ ; DirectSound::CMcpxStream::ServiceVoiceInterrupt
PUBLIC	?ScheduleDeferredCommand@CMcpxStream@DirectSound@@MAEHK_JK@Z ; DirectSound::CMcpxStream::ScheduleDeferredCommand
PUBLIC	?RemoveDeferredCommand@CMcpxStream@DirectSound@@MAEXK@Z ; DirectSound::CMcpxStream::RemoveDeferredCommand
PUBLIC	?ServiceDeferredCommand@CMcpxStream@DirectSound@@MAEXKK@Z ; DirectSound::CMcpxStream::ServiceDeferredCommand
PUBLIC	??_7CMcpxStream@DirectSound@@6B@		; DirectSound::CMcpxStream::`vftable'
PUBLIC	??_GCMcpxStream@DirectSound@@UAEPAXI@Z		; DirectSound::CMcpxStream::`scalar deleting destructor'
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
PUBLIC	?__AddRef@DirectSound@@YGPAVCDirectSoundStreamSettings@1@PAV21@@Z ; DirectSound::__AddRef
EXTRN	??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z:NEAR ; DirectSound::CMcpxVoiceClient::CMcpxVoiceClient
EXTRN	?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z:NEAR ; DirectSound::CMcpxVoiceClient::Initialize
EXTRN	??_ECMcpxStream@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CMcpxStream::`vector deleting destructor'
;	COMDAT ??_7CMcpxStream@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
CONST	SEGMENT
??_7CMcpxStream@DirectSound@@6B@ DD FLAT:??_ECMcpxStream@DirectSound@@UAEPAXI@Z ; DirectSound::CMcpxStream::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z
	DD	FLAT:?SetFormat@CMcpxStream@DirectSound@@UAEJXZ
	DD	FLAT:?ServiceVoiceInterrupt@CMcpxStream@DirectSound@@MAEHXZ
	DD	FLAT:?ScheduleDeferredCommand@CMcpxStream@DirectSound@@MAEHK_JK@Z
	DD	FLAT:?RemoveDeferredCommand@CMcpxStream@DirectSound@@MAEXK@Z
	DD	FLAT:?ServiceDeferredCommand@CMcpxStream@DirectSound@@MAEXKK@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMcpxStream@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundStreamSettings@1@@Z
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
_pMcpxApu$ = 8
_pSettings$ = 12
??0CMcpxStream@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundStreamSettings@1@@Z PROC NEAR ; DirectSound::CMcpxStream::CMcpxStream, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _pSettings$[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _pMcpxApu$[ebp]
  00011	51		 push	 ecx
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CMcpxVoiceClient@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundVoiceSettings@1@@Z ; DirectSound::CMcpxVoiceClient::CMcpxVoiceClient
  0001a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CMcpxStream@DirectSound@@6B@

; 42   :     DWORD                   i;
; 43   :     
; 44   :     DPF_ENTER();
; 45   : 
; 46   :     m_pSettings = ADDREF(pSettings);

  00023	8b 45 0c	 mov	 eax, DWORD PTR _pSettings$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCDirectSoundStreamSettings@1@PAV21@@Z ; DirectSound::__AddRef
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 47   : 
; 48   :     InitializeListHead(&m_lstAvailable);

  00035	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00038	81 c2 c0 00 00
	00		 add	 edx, 192		; 000000c0H
  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	89 90 c4 00 00
	00		 mov	 DWORD PTR [eax+196], edx
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 82 c4 00 00
	00		 mov	 eax, DWORD PTR [edx+196]
  00053	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax

; 49   :     InitializeListHead(&m_lstPending);

  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00062	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00065	89 8a bc 00 00
	00		 mov	 DWORD PTR [edx+188], ecx
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00077	89 90 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edx

; 50   :     InitializeListHead(&m_lstCompleted);

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00080	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	89 81 cc 00 00
	00		 mov	 DWORD PTR [ecx+204], eax
  0008e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00091	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00094	8b 88 cc 00 00
	00		 mov	 ecx, DWORD PTR [eax+204]
  0009a	89 8a c8 00 00
	00		 mov	 DWORD PTR [edx+200], ecx

; 51   : 
; 52   :     for(i = 0; i < NUMELMS(m_aSslDesc); i++)

  000a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a7	eb 09		 jmp	 SHORT $L35561
$L35562:
  000a9	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ac	83 c2 01	 add	 edx, 1
  000af	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L35561:
  000b2	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  000b6	73 42		 jae	 SHORT $L35563

; 53   :     {
; 54   :         InitializeListHead(&m_aSslDesc[i].lstPackets);

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000bb	c1 e0 04	 shl	 eax, 4
  000be	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	8d 94 01 98 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+152]
  000c8	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000cb	c1 e0 04	 shl	 eax, 4
  000ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	89 94 01 9c 00
	00 00		 mov	 DWORD PTR [ecx+eax+156], edx
  000d8	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000db	c1 e2 04	 shl	 edx, 4
  000de	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e1	c1 e0 04	 shl	 eax, 4
  000e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  000ea	8b 94 16 9c 00
	00 00		 mov	 edx, DWORD PTR [esi+edx+156]
  000f1	89 94 01 98 00
	00 00		 mov	 DWORD PTR [ecx+eax+152], edx

; 55   :     }

  000f8	eb af		 jmp	 SHORT $L35562
$L35563:

; 56   : 
; 57   :     //
; 58   :     // Initialize deferred command structures
; 59   :     //
; 60   : 
; 61   :     for(i = 0; i < NUMELMS(m_aDeferredCommands); i++)

  000fa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00101	eb 09		 jmp	 SHORT $L35564
$L35565:
  00103	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00106	83 c0 01	 add	 eax, 1
  00109	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35564:
  0010c	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  00110	73 68		 jae	 SHORT $L35566

; 62   :     {
; 63   :         InitializeListHead(&m_aDeferredCommands[i].leListEntry);

  00112	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00115	c1 e1 05	 shl	 ecx, 5
  00118	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0011b	8d 84 0a e0 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+224]
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00125	c1 e1 05	 shl	 ecx, 5
  00128	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0012b	89 84 0a e4 00
	00 00		 mov	 DWORD PTR [edx+ecx+228], eax
  00132	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00135	c1 e0 05	 shl	 eax, 5
  00138	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0013b	c1 e1 05	 shl	 ecx, 5
  0013e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00141	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  00144	8b 84 06 e4 00
	00 00		 mov	 eax, DWORD PTR [esi+eax+228]
  0014b	89 84 0a e0 00
	00 00		 mov	 DWORD PTR [edx+ecx+224], eax

; 64   :         
; 65   :         m_aDeferredCommands[i].pVoice = this;

  00152	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00155	c1 e1 05	 shl	 ecx, 5
  00158	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0015b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0015e	89 84 0a ec 00
	00 00		 mov	 DWORD PTR [edx+ecx+236], eax

; 66   :         m_aDeferredCommands[i].dwCommand = i;

  00165	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00168	c1 e1 05	 shl	 ecx, 5
  0016b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0016e	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00171	89 84 0a f0 00
	00 00		 mov	 DWORD PTR [edx+ecx+240], eax

; 67   :     }

  00178	eb 89		 jmp	 SHORT $L35565
$L35566:

; 68   : 
; 69   :     m_aDeferredCommands[MCPX_DEFERREDCMD_STREAM_CHECKSTUCK].dwFlags |= MCPX_DEFERREDCMDF_LOWPRIORITY | MCPX_DEFERREDCMDF_PERSIST;

  0017a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  00183	83 ca 05	 or	 edx, 5
  00186	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00189	89 90 e8 00 00
	00		 mov	 DWORD PTR [eax+232], edx

; 70   :     m_aDeferredCommands[MCPX_DEFERREDCMD_STREAM_RELEASERESOURCES].dwFlags |= MCPX_DEFERREDCMDF_LOWPRIORITY;

  0018f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	8b 91 08 01 00
	00		 mov	 edx, DWORD PTR [ecx+264]
  00198	83 ca 01	 or	 edx, 1
  0019b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	89 90 08 01 00
	00		 mov	 DWORD PTR [eax+264], edx

; 71   :     m_aDeferredCommands[MCPX_DEFERREDCMD_STREAM_COMPLETEPACKETS].dwFlags |= MCPX_DEFERREDCMDF_LOWPRIORITY | MCPX_DEFERREDCMDF_PERSIST;

  001a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a7	8b 91 28 01 00
	00		 mov	 edx, DWORD PTR [ecx+296]
  001ad	83 ca 05	 or	 edx, 5
  001b0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b3	89 90 28 01 00
	00		 mov	 DWORD PTR [eax+296], edx

; 72   :     m_aDeferredCommands[MCPX_DEFERREDCMD_STREAM_FLUSH].dwFlags |= MCPX_DEFERREDCMDF_LOWPRIORITY | MCPX_DEFERREDCMDF_PERSIST;

  001b9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001bc	8b 91 48 01 00
	00		 mov	 edx, DWORD PTR [ecx+328]
  001c2	83 ca 05	 or	 edx, 5
  001c5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001c8	89 90 48 01 00
	00		 mov	 DWORD PTR [eax+328], edx

; 73   : 
; 74   :     //
; 75   :     // Set the PERSIST bit in the voice status so we'll only be removed from
; 76   :     // the voice list when we explicitly stop.  This helps us recover from
; 77   :     // starvation.
; 78   :     //
; 79   : 
; 80   :     or(&m_dwStatus, MCPX_VOICESTATUS_PERSIST);

  001ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d1	83 c1 12	 add	 ecx, 18			; 00000012H
  001d4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001d9	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 81   : 
; 82   :     DPF_LEAVE_VOID();
; 83   : }

  001de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001e1	5e		 pop	 esi
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c2 08 00	 ret	 8
??0CMcpxStream@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundStreamSettings@1@@Z ENDP ; DirectSound::CMcpxStream::CMcpxStream
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ?or@@YIXPCGG@Z
DSOUND	SEGMENT
_src$ = -8
_dst$ = -4
?or@@YIXPCGG@Z PROC NEAR				; or, COMDAT
; _dst$ = ecx
; _src$ = dx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	66 89 55 f8	 mov	 WORD PTR _src$[ebp], dx
  0000a	89 4d fc	 mov	 DWORD PTR _dst$[ebp], ecx

; 176  :     __asm
; 177  :     {
; 178  :         or word ptr [ecx], dx

  0000d	66 09 11	 or	 WORD PTR [ecx], dx

; 179  :     }
; 180  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?or@@YIXPCGG@Z ENDP					; or
DSOUND	ENDS
PUBLIC	??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND_RD	SEGMENT
??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T36452 = -8
$T36451 = -4
_this$ = 8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L30406

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L30406

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T36452[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T36452[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T36451[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T36451[ebp], 0
  00058	74 11		 je	 SHORT $L36453
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T36451[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T36451[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L36454
$L36453:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L36454:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L30404
$L30406:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L30404:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
DSOUND	ENDS
PUBLIC	??1CMcpxStream@DirectSound@@UAE@XZ		; DirectSound::CMcpxStream::~CMcpxStream
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxStream@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxStream@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CMcpxStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxStream@DirectSound@@UAE@XZ ; DirectSound::CMcpxStream::~CMcpxStream
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35570
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35570:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxStream@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CMcpxStream::`scalar deleting destructor'
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	?Flush@CMcpxStream@DirectSound@@QAEJXZ		; DirectSound::CMcpxStream::Flush
PUBLIC	?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::ReleaseStreamResources
EXTRN	??1CMcpxVoiceClient@DirectSound@@UAE@XZ:NEAR	; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
;	COMDAT ??1CMcpxStream@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
??1CMcpxStream@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CMcpxStream::~CMcpxStream, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMcpxStream@DirectSound@@6B@

; 109  :     DWORD                   i;
; 110  :     
; 111  :     DPF_ENTER();
; 112  : 
; 113  :     //
; 114  :     // Make sure all deferred commands are dequeued
; 115  :     //
; 116  : 
; 117  :     for(i = 0; i < NUMELMS(m_aDeferredCommands); i++)

  00012	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00019	eb 09		 jmp	 SHORT $L35576
$L35577:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001e	83 c1 01	 add	 ecx, 1
  00021	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35576:
  00024	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  00028	73 0e		 jae	 SHORT $L35578

; 118  :     {
; 119  :         RemoveDeferredCommand(i);

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002d	52		 push	 edx
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?RemoveDeferredCommand@CMcpxStream@DirectSound@@MAEXK@Z ; DirectSound::CMcpxStream::RemoveDeferredCommand

; 120  :     }

  00036	eb e3		 jmp	 SHORT $L35577
$L35578:

; 121  : 
; 122  :     //
; 123  :     // Flush the stream
; 124  :     //
; 125  : 
; 126  :     Flush();

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?Flush@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Flush

; 127  : 
; 128  :     //
; 129  :     // Release hardware resources
; 130  :     //
; 131  : 
; 132  :     ReleaseStreamResources();

  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::ReleaseStreamResources

; 133  : 
; 134  :     //
; 135  :     // Release the settings object
; 136  :     //
; 137  :     
; 138  :     RELEASE(m_pSettings);

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [eax+144], 0
  00052	74 25		 je	 SHORT $L35579
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00066	8b 12		 mov	 edx, DWORD PTR [edx]
  00068	51		 push	 ecx
  00069	ff 52 08	 call	 DWORD PTR [edx+8]
  0006c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+144], 0
$L35579:

; 139  : 
; 140  :     //
; 141  :     // Free memory
; 142  :     //
; 143  : 
; 144  :     MEMFREE(m_paPacketContexts);

  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	83 b9 d0 00 00
	00 00		 cmp	 DWORD PTR [ecx+208], 0
  00083	74 1c		 je	 SHORT $L35574
  00085	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00088	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree
  00094	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	c7 81 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+208], 0
$L35574:

; 145  : 
; 146  :     DPF_LEAVE_VOID();
; 147  : }

  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1CMcpxVoiceClient@DirectSound@@UAE@XZ ; DirectSound::CMcpxVoiceClient::~CMcpxVoiceClient
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
??1CMcpxStream@DirectSound@@UAE@XZ ENDP			; DirectSound::CMcpxStream::~CMcpxStream
DSOUND	ENDS
PUBLIC	?Initialize@CMcpxStream@DirectSound@@QAEJXZ	; DirectSound::CMcpxStream::Initialize
PUBLIC	?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z	; InsertTailListUninit
PUBLIC	?AllocateStreamResources@CMcpxStream@DirectSound@@IAEJXZ ; DirectSound::CMcpxStream::AllocateStreamResources
PUBLIC	??_C@_0BE@LHPHBELB@MCPX_PACKET_CONTEXT?$AA@	; `string'
PUBLIC	??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
EXTRN	?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemAlloc
;	COMDAT ??_C@_0BE@LHPHBELB@MCPX_PACKET_CONTEXT?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@LHPHBELB@MCPX_PACKET_CONTEXT?$AA@ DB 'MCPX_PACKET_CONTEXT', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpstrm.cpp', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxStream@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_i$ = -4
?Initialize@CMcpxStream@DirectSound@@QAEJXZ PROC NEAR	; DirectSound::CMcpxStream::Initialize, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 174  :     HRESULT                         hr;
; 175  :     DWORD                           i;
; 176  :     
; 177  :     DPF_ENTER();
; 178  : 
; 179  :     //
; 180  :     // Call the base class
; 181  :     //
; 182  : 
; 183  :     hr = CMcpxVoiceClient::Initialize(TRUE);

  00009	6a 01		 push	 1
  0000b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Initialize@CMcpxVoiceClient@DirectSound@@UAEJH@Z ; DirectSound::CMcpxVoiceClient::Initialize
  00013	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 184  : 
; 185  :     //
; 186  :     // Allocate a fixed amount of context packets
; 187  :     //
; 188  : 
; 189  :     if(SUCCEEDED(hr))

  00016	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0001a	7c 4f		 jl	 SHORT $L35588

; 190  :     {
; 191  :         hr = HRFROMP(m_paPacketContexts = MEMALLOC(MCPX_PACKET_CONTEXT, m_pSettings->m_dwMaxAttachedPackets));

  0001c	6a 01		 push	 1
  0001e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00027	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  0002d	6b d2 30	 imul	 edx, 48			; 00000030H
  00030	52		 push	 edx
  00031	68 44 53 64 61	 push	 1633964868		; 61645344H
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@LHPHBELB@MCPX_PACKET_CONTEXT?$AA@
  0003b	68 bf 00 00 00	 push	 191			; 000000bfH
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00045	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	89 81 d0 00 00
	00		 mov	 DWORD PTR [ecx+208], eax
  00053	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00056	33 c0		 xor	 eax, eax
  00058	83 ba d0 00 00
	00 00		 cmp	 DWORD PTR [edx+208], 0
  0005f	0f 95 c0	 setne	 al
  00062	48		 dec	 eax
  00063	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  00068	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L35588:

; 192  :     }
; 193  : 
; 194  :     //
; 195  :     // Initialize context lists used to track submitted XMEDIABUFFERS
; 196  :     //
; 197  : 
; 198  :     if(SUCCEEDED(hr))

  0006b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006f	7c 47		 jl	 SHORT $L35596

; 199  :     {
; 200  :         for(i = 0; i < m_pSettings->m_dwMaxAttachedPackets; i++) 

  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00078	eb 09		 jmp	 SHORT $L35597
$L35598:
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007d	83 c1 01	 add	 ecx, 1
  00080	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35597:
  00083	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00086	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008f	3b 88 b8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+184]
  00095	73 21		 jae	 SHORT $L35596

; 201  :         {
; 202  :             InsertTailListUninit(&m_lstAvailable, &m_paPacketContexts[i].leListEntry);

  00097	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009a	6b d2 30	 imul	 edx, 48			; 00000030H
  0009d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	03 90 d0 00 00
	00		 add	 edx, DWORD PTR [eax+208]
  000a6	52		 push	 edx
  000a7	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailListUninit

; 203  :         }

  000b6	eb c2		 jmp	 SHORT $L35598
$L35596:

; 204  :     }
; 205  : 
; 206  :     //
; 207  :     // If the stream was created without LOCDEFER, allocate voice resources now
; 208  :     //
; 209  : 
; 210  :     if(SUCCEEDED(hr) && !(m_pSettings->m_dwFlags & DSSTREAMCAPS_LOCDEFER))

  000b8	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000bc	7c 21		 jl	 SHORT $L35601
  000be	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000c1	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000c7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ca	81 e1 00 00 04
	00		 and	 ecx, 262144		; 00040000H
  000d0	85 c9		 test	 ecx, ecx
  000d2	75 0b		 jne	 SHORT $L35601

; 211  :     {
; 212  :         hr = AllocateStreamResources();

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?AllocateStreamResources@CMcpxStream@DirectSound@@IAEJXZ ; DirectSound::CMcpxStream::AllocateStreamResources
  000dc	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L35601:

; 213  :     }
; 214  : 
; 215  :     DPF_LEAVE_HRESULT(hr);
; 216  : 
; 217  :     return hr;

  000df	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 218  : }

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
?Initialize@CMcpxStream@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxStream::Initialize
DSOUND	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND_RD	SEGMENT
??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailListUninit, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 88 00 00 00	 push	 136			; 00000088H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 137  : 
; 138  :     Entry->Flink = ListHead;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0001e	89 11		 mov	 DWORD PTR [ecx], edx

; 139  :     Entry->Blink = ListHead->Blink;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 140  :     
; 141  :     Entry->Flink->Blink = Entry;

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00034	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 142  :     Entry->Blink->Flink = Entry;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	89 11		 mov	 DWORD PTR [ecx], edx

; 143  : 
; 144  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00042	68 90 00 00 00	 push	 144			; 00000090H
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0004c	6a 01		 push	 1
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 145  : }    

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; InsertTailListUninit
DSOUND	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L30006

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L30005
$L30006:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L30010
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L30009
$L30010:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L30005
$L30009:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L30014
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L30013
$L30014:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L30016
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L30015
$L30016:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L30015:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L30005
$L30013:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L30019

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L30020

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L30020:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L30005
$L30019:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L30005

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L30005

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L30005:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
DSOUND	ENDS
EXTRN	?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::AllocateVoiceResources
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.h
;	COMDAT ?AllocateStreamResources@CMcpxStream@DirectSound@@IAEJXZ
DSOUND	SEGMENT
_this$ = -4
?AllocateStreamResources@CMcpxStream@DirectSound@@IAEJXZ PROC NEAR ; DirectSound::CMcpxStream::AllocateStreamResources, COMDAT
; _this$ = ecx

; 152  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 153  :         return CMcpxVoiceClient::AllocateVoiceResources();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?AllocateVoiceResources@CMcpxVoiceClient@DirectSound@@IAEJXZ ; DirectSound::CMcpxVoiceClient::AllocateVoiceResources

; 154  :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?AllocateStreamResources@CMcpxStream@DirectSound@@IAEJXZ ENDP ; DirectSound::CMcpxStream::AllocateStreamResources
DSOUND	ENDS
PUBLIC	??0CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@DirectSound@@QAE@XZ		; DirectSound::CAutoIrql::~CAutoIrql
PUBLIC	??_C@_0CB@HIGHGFIM@Unexpected?5sample?5container?5size@ ; `string'
PUBLIC	??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@	; `string'
EXTRN	?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::SetFormat
;	COMDAT ??_C@_0CB@HIGHGFIM@Unexpected?5sample?5container?5size@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND_RD	SEGMENT
??_C@_0CB@HIGHGFIM@Unexpected?5sample?5container?5size@ DB 'Unexpected sa'
	DB	'mple container size', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@ DB 'Unexpected format tag'
	DB	00H						; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFormat@CMcpxStream@DirectSound@@UAEJXZ
DSOUND	SEGMENT
tv79 = -28
tv74 = -24
_this$ = -20
$T36479 = -16
___AutoIrql$ = -12
_hr$ = -4
?SetFormat@CMcpxStream@DirectSound@@UAEJXZ PROC NEAR	; DirectSound::CMcpxStream::SetFormat, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 245  :     HRESULT                 hr;
; 246  :     
; 247  :     DPF_ENTER();
; 248  :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 249  : 
; 250  :     //
; 251  :     // Hand off to the base class
; 252  :     //
; 253  : 
; 254  :     hr = CMcpxVoiceClient::SetFormat();

  00011	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetFormat@CMcpxVoiceClient@DirectSound@@UAEJXZ ; DirectSound::CMcpxVoiceClient::SetFormat
  00019	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 255  : 
; 256  :     //
; 257  :     // Setup PRD control
; 258  :     //
; 259  : 
; 260  :     if(SUCCEEDED(hr))

  0001c	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00020	0f 8c 70 01 00
	00		 jl	 $L35609

; 261  :     {
; 262  :         switch(m_pSettings->m_fmt.wFormatTag)
; 263  :         {

  00026	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0002f	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00033	89 55 e8	 mov	 DWORD PTR tv74[ebp], edx
  00036	83 7d e8 01	 cmp	 DWORD PTR tv74[ebp], 1
  0003a	74 0f		 je	 SHORT $L35614
  0003c	83 7d e8 69	 cmp	 DWORD PTR tv74[ebp], 105 ; 00000069H
  00040	0f 84 9d 00 00
	00		 je	 $L35627
  00046	e9 b8 00 00 00	 jmp	 $L35629
$L35614:

; 264  :             case WAVE_FORMAT_PCM:
; 265  :                 switch(m_pSettings->m_fmt.wBitsPerSample)
; 266  :                 {

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00054	8a 51 0f	 mov	 dl, BYTE PTR [ecx+15]
  00057	88 55 e4	 mov	 BYTE PTR tv79[ebp], dl
  0005a	80 7d e4 08	 cmp	 BYTE PTR tv79[ebp], 8
  0005e	74 0e		 je	 SHORT $L35619
  00060	80 7d e4 10	 cmp	 BYTE PTR tv79[ebp], 16	; 00000010H
  00064	74 22		 je	 SHORT $L35621
  00066	80 7d e4 20	 cmp	 BYTE PTR tv79[ebp], 32	; 00000020H
  0006a	74 3c		 je	 SHORT $L35623
  0006c	eb 5a		 jmp	 SHORT $L35625
$L35619:

; 267  :                     case 8:
; 268  :                         m_dwPrdControl = MCPX_SET_REG_VALUE(m_dwPrdControl, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_CONTAINER_SIZE_B8, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_CONTAINER_SIZE);

  0006e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00077	81 e1 ff ff fc
	ff		 and	 ecx, -196609		; fffcffffH
  0007d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00080	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 269  :                         break;

  00086	eb 59		 jmp	 SHORT $L35616
$L35621:

; 270  : 
; 271  :                     case 16:
; 272  :                         m_dwPrdControl = MCPX_SET_REG_VALUE(m_dwPrdControl, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_CONTAINER_SIZE_B16, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_CONTAINER_SIZE);

  00088	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00091	81 e1 ff ff fc
	ff		 and	 ecx, -196609		; fffcffffH
  00097	81 c9 00 00 01
	00		 or	 ecx, 65536		; 00010000H
  0009d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 273  :                         break;

  000a6	eb 39		 jmp	 SHORT $L35616
$L35623:

; 274  : 
; 275  :                     case 32: 
; 276  :                         m_dwPrdControl = MCPX_SET_REG_VALUE(m_dwPrdControl, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_CONTAINER_SIZE_B32, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_CONTAINER_SIZE);

  000a8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000b1	81 e1 ff ff fc
	ff		 and	 ecx, -196609		; fffcffffH
  000b7	81 c9 00 00 03
	00		 or	 ecx, 196608		; 00030000H
  000bd	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 277  :                         break;

  000c6	eb 19		 jmp	 SHORT $L35616
$L35625:

; 278  : 
; 279  :                     default:
; 280  :                         ASSERTMSG("Unexpected sample container size");

  000c8	68 18 01 00 00	 push	 280			; 00000118H
  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@HIGHGFIM@Unexpected?5sample?5container?5size@
  000d7	6a 01		 push	 1
  000d9	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000de	83 c4 10	 add	 esp, 16			; 00000010H
$L35616:

; 281  :                         break;
; 282  :                 }
; 283  : 
; 284  :                 break;

  000e1	eb 39		 jmp	 SHORT $L35611
$L35627:

; 285  : 
; 286  :             case WAVE_FORMAT_XBOX_ADPCM:
; 287  :                 m_dwPrdControl = MCPX_SET_REG_VALUE(m_dwPrdControl, NV1BA0_PIO_SET_VOICE_CFG_FMT_CONTAINER_SIZE_ADPCM, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_CONTAINER_SIZE);

  000e3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  000ec	81 e1 ff ff fc
	ff		 and	 ecx, -196609		; fffcffffH
  000f2	81 c9 00 00 02
	00		 or	 ecx, 131072		; 00020000H
  000f8	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000fb	89 8a 94 00 00
	00		 mov	 DWORD PTR [edx+148], ecx

; 288  :                 break;

  00101	eb 19		 jmp	 SHORT $L35611
$L35629:

; 289  : 
; 290  :             default:
; 291  :                 ASSERTMSG("Unexpected format tag");

  00103	68 23 01 00 00	 push	 291			; 00000123H
  00108	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EABPBKPE@Unexpected?5format?5tag?$AA@
  00112	6a 01		 push	 1
  00114	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00119	83 c4 10	 add	 esp, 16			; 00000010H
$L35611:

; 292  :                 break;
; 293  :         }
; 294  : 
; 295  :         m_dwPrdControl = MCPX_SET_REG_VALUE(m_dwPrdControl, m_pSettings->m_fmt.nChannels - 1, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_SAMPLES_PER_BLOCK);

  0011c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00125	81 e1 ff ff 83
	ff		 and	 ecx, -8126465		; ff83ffffH
  0012b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0012e	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00134	0f b6 50 0e	 movzx	 edx, BYTE PTR [eax+14]
  00138	83 ea 01	 sub	 edx, 1
  0013b	83 e2 1f	 and	 edx, 31			; 0000001fH
  0013e	c1 e2 12	 shl	 edx, 18			; 00000012H
  00141	0b ca		 or	 ecx, edx
  00143	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00146	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx

; 296  : 
; 297  :         if(m_pSettings->m_fmt.nChannels > 1)

  0014c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00155	0f b6 42 0e	 movzx	 eax, BYTE PTR [edx+14]
  00159	83 f8 01	 cmp	 eax, 1
  0015c	7e 20		 jle	 SHORT $L35632

; 298  :         {
; 299  :             m_dwPrdControl = MCPX_SET_REG_VALUE(m_dwPrdControl, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_STEREO_OK, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_STEREO);

  0015e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00167	81 e2 ff ff 7f
	ff		 and	 edx, -8388609		; ff7fffffH
  0016d	81 ca 00 00 80
	00		 or	 edx, 8388608		; 00800000H
  00173	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00176	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx

; 300  :         }
; 301  :         else

  0017c	eb 18		 jmp	 SHORT $L35609
$L35632:

; 302  :         {
; 303  :             m_dwPrdControl = MCPX_SET_REG_VALUE(m_dwPrdControl, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_STEREO_NOTOK, NV1BA0_PIO_SET_SSL_SEGMENT_LENGTH_STEREO);

  0017e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00181	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  00187	81 e2 ff ff 7f
	ff		 and	 edx, -8388609		; ff7fffffH
  0018d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00190	89 90 94 00 00
	00		 mov	 DWORD PTR [eax+148], edx
$L35609:

; 304  :         }
; 305  :     }
; 306  : 
; 307  :     DPF_LEAVE_HRESULT(hr);
; 308  : 
; 309  :     return hr;

  00196	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00199	89 4d f0	 mov	 DWORD PTR $T36479[ebp], ecx
  0019c	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0019f	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  001a4	8b 45 f0	 mov	 eax, DWORD PTR $T36479[ebp]

; 310  : }

  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
?SetFormat@CMcpxStream@DirectSound@@UAEJXZ ENDP		; DirectSound::CMcpxStream::SetFormat
DSOUND	ENDS
PUBLIC	??0CIrql@DirectSound@@QAE@XZ			; DirectSound::CIrql::CIrql
PUBLIC	?Raise@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??0CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 77   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 78   :         Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 79   :     }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CIrql@DirectSound@@QAE@XZ PROC NEAR			; DirectSound::CIrql::CIrql, COMDAT
; _this$ = ecx

; 40   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   :         m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 42   :     }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CIrql::CIrql
DSOUND	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Raise@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Raise, COMDAT
; _this$ = ecx

; 45   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   :         if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L30264

; 47   :         {
; 48   :             m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L30264:

; 49   :         }
; 50   :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	?Lower@CIrql@DirectSound@@QAEXXZ		; DirectSound::CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??1CAutoIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoIrql@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 82   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   :         Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 84   :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoIrql::~CAutoIrql
DSOUND	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Lower@CIrql@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CIrql::Lower, COMDAT
; _this$ = ecx

; 53   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :         if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L30269

; 55   :         {
; 56   :             KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 57   :             m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L30269:

; 58   :         }
; 59   :     }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@DirectSound@@QAEXXZ ENDP			; DirectSound::CIrql::Lower
DSOUND	ENDS
PUBLIC	?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z		; InsertTailList
PUBLIC	?SubmitPacket@CMcpxStream@DirectSound@@QAEJABU_XMEDIAPACKET@@@Z ; DirectSound::CMcpxStream::SubmitPacket
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
PUBLIC	?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z	; XMOAcceptPacket
PUBLIC	?Process@CMcpxStream@DirectSound@@IAEKXZ	; DirectSound::CMcpxStream::Process
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0BO@HKDHLHAP@?$CBIsListEmpty?$CI?$CGm_lstAvailable?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@MIJNAGG@CMcpxStream?3?3SubmitPacket?$AA@ ; `string'
PUBLIC	??_C@_0CI@GPDDKKDL@Received?5packet?5?$CFx?0?5buffer?5?$CFx?0?5s@ ; `string'
PUBLIC	??_C@_0DJ@NBMOFNIK@dwContiguousLength?5?$DM?5pPacketCont@ ; `string'
PUBLIC	??_C@_0HL@OKDGGGFB@ADPCM?5stream?5packet?5data?5must?5be@ ; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	?GetPhysicalMemoryProperties@CMcpxCore@DirectSound@@SGKPAXKPAK1@Z:NEAR ; DirectSound::CMcpxCore::GetPhysicalMemoryProperties
EXTRN	__imp__MmLockUnlockBufferPages@12:NEAR
;	COMDAT ??_C@_0BO@HKDHLHAP@?$CBIsListEmpty?$CI?$CGm_lstAvailable?$CJ?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND_RD	SEGMENT
??_C@_0BO@HKDHLHAP@?$CBIsListEmpty?$CI?$CGm_lstAvailable?$CJ?$AA@ DB '!Is'
	DB	'ListEmpty(&m_lstAvailable)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MIJNAGG@CMcpxStream?3?3SubmitPacket?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@MIJNAGG@CMcpxStream?3?3SubmitPacket?$AA@ DB 'CMcpxStream::Submi'
	DB	'tPacket', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@GPDDKKDL@Received?5packet?5?$CFx?0?5buffer?5?$CFx?0?5s@
DSOUND_RD	SEGMENT
??_C@_0CI@GPDDKKDL@Received?5packet?5?$CFx?0?5buffer?5?$CFx?0?5s@ DB 'Rec'
	DB	'eived packet %x, buffer %x, size %lu', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@NBMOFNIK@dwContiguousLength?5?$DM?5pPacketCont@
DSOUND_RD	SEGMENT
??_C@_0DJ@NBMOFNIK@dwContiguousLength?5?$DM?5pPacketCont@ DB 'dwContiguou'
	DB	'sLength < pPacketContext->xmpPacket.dwMaxSize', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0HL@OKDGGGFB@ADPCM?5stream?5packet?5data?5must?5be@
DSOUND_RD	SEGMENT
??_C@_0HL@OKDGGGFB@ADPCM?5stream?5packet?5data?5must?5be@ DB 'ADPCM strea'
	DB	'm packet data must be allocated using XPhysicalAlloc.  Using '
	DB	'any other allocator will cause unexpected results.', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SubmitPacket@CMcpxStream@DirectSound@@QAEJABU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT
_this$ = -28
_dwContiguousLength$ = -24
_hr$ = -20
_pleEntry$ = -16
_pPacketContext$ = -12
_irql$ = -8
_Packet$ = 8
?SubmitPacket@CMcpxStream@DirectSound@@QAEJABU_XMEDIAPACKET@@@Z PROC NEAR ; DirectSound::CMcpxStream::SubmitPacket, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 337  : 
; 338  : #ifdef DEBUG
; 339  : 
; 340  :     DWORD                   dwContiguousLength;
; 341  : 
; 342  : #endif // DEBUG
; 343  : 
; 344  :     PMCPX_PACKET_CONTEXT    pPacketContext;
; 345  :     PLIST_ENTRY             pleEntry;
; 346  :     CIrql                   irql;

  0000b	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 347  :     HRESULT                 hr;
; 348  : 
; 349  :     DPF_ENTER();
; 350  : 
; 351  :     //
; 352  :     // Set the packet's initial state
; 353  :     //
; 354  :     
; 355  :     XMOAcceptPacket(&Packet);

  00013	8b 45 08	 mov	 eax, DWORD PTR _Packet$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z ; XMOAcceptPacket

; 356  : 
; 357  :     //
; 358  :     // If a discontinuity was signaled, but another packet was attached
; 359  :     // before resources were freed, undo the discontinuity
; 360  :     //
; 361  : 
; 362  :     and(&m_dwStatus, ~MCPX_VOICESTATUS_DISCONTINUITY);

  0001c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 12	 add	 ecx, 18			; 00000012H
  00022	ba ff f7 00 00	 mov	 edx, 63487		; 0000f7ffH
  00027	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and

; 363  : 
; 364  :     RemoveDeferredCommand(MCPX_DEFERREDCMD_STREAM_FLUSH);

  0002c	6a 03		 push	 3
  0002e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	ff 52 1c	 call	 DWORD PTR [edx+28]

; 365  :     RemoveDeferredCommand(MCPX_DEFERREDCMD_STREAM_RELEASERESOURCES);

  00039	6a 01		 push	 1
  0003b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	ff 52 1c	 call	 DWORD PTR [edx+28]

; 366  : 
; 367  :     //
; 368  :     // Make sure resources are allocated
; 369  :     //
; 370  :     
; 371  :     hr = AllocateStreamResources();

  00046	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?AllocateStreamResources@CMcpxStream@DirectSound@@IAEJXZ ; DirectSound::CMcpxStream::AllocateStreamResources
  0004e	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 372  : 
; 373  :     //
; 374  :     // Get a packet context to track this stream packet
; 375  :     //
; 376  : 
; 377  :     if(SUCCEEDED(hr))

  00051	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00055	0f 8c b9 00 00
	00		 jl	 $L35647

; 378  :     {
; 379  :         irql.Raise();

  0005b	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0005e	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 380  :         
; 381  :         ASSERT(!IsListEmpty(&m_lstAvailable));

  00063	68 7d 01 00 00	 push	 381			; 0000017dH
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@HKDHLHAP@?$CBIsListEmpty?$CI?$CGm_lstAvailable?$CJ?$AA@
  00072	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00075	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  0007a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	33 d2		 xor	 edx, edx
  0007f	39 81 c0 00 00
	00		 cmp	 DWORD PTR [ecx+192], eax
  00085	0f 94 c2	 sete	 dl
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0008e	83 c4 10	 add	 esp, 16			; 00000010H

; 382  :         
; 383  :         pleEntry = RemoveHeadList(&m_lstAvailable);

  00091	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00094	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList
  000a0	89 45 f0	 mov	 DWORD PTR _pleEntry$[ebp], eax

; 384  :         pPacketContext = CONTAINING_RECORD(pleEntry, MCPX_PACKET_CONTEXT, leListEntry);

  000a3	8b 55 f0	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  000a6	89 55 f4	 mov	 DWORD PTR _pPacketContext$[ebp], edx

; 385  : 
; 386  :         irql.Lower();

  000a9	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  000ac	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 387  : 
; 388  :         pPacketContext->xmpPacket = Packet;

  000b1	8b 75 08	 mov	 esi, DWORD PTR _Packet$[ebp]
  000b4	8b 7d f4	 mov	 edi, DWORD PTR _pPacketContext$[ebp]
  000b7	83 c7 08	 add	 edi, 8
  000ba	b9 06 00 00 00	 mov	 ecx, 6
  000bf	f3 a5		 rep movsd

; 389  :         pPacketContext->dwCompletedSize = 0;

  000c1	8b 45 f4	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  000c4	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 390  :         pPacketContext->dwStatus = XMEDIAPACKET_STATUS_PENDING;

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  000ce	c7 41 24 0a 00
	00 80		 mov	 DWORD PTR [ecx+36], -2147483638 ; 8000000aH

; 391  :         
; 392  :         DPF_BLAB("Received packet %x, buffer %x, size %lu", pPacketContext, pPacketContext->xmpPacket.pvBuffer, pPacketContext->xmpPacket.dwMaxSize);

  000d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MIJNAGG@CMcpxStream?3?3SubmitPacket?$AA@
  000df	68 88 01 00 00	 push	 392			; 00000188H
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000e9	6a 05		 push	 5
  000eb	6a 09		 push	 9
  000ed	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000f2	83 c4 18	 add	 esp, 24			; 00000018H
  000f5	8b 55 f4	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  000f8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000fb	50		 push	 eax
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  000ff	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00102	52		 push	 edx
  00103	8b 45 f4	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  00106	50		 push	 eax
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@GPDDKKDL@Received?5packet?5?$CFx?0?5buffer?5?$CFx?0?5s@
  0010c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00111	83 c4 10	 add	 esp, 16			; 00000010H
$L35647:

; 393  :     }
; 394  : 
; 395  :     //
; 396  :     // Lock the packet memory
; 397  :     //
; 398  : 
; 399  :     if(SUCCEEDED(hr))

  00114	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00118	7c 16		 jl	 SHORT $L35657

; 400  :     {
; 401  :         MmLockUnlockBufferPages(pPacketContext->xmpPacket.pvBuffer, pPacketContext->xmpPacket.dwMaxSize, FALSE);

  0011a	6a 00		 push	 0
  0011c	8b 4d f4	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  0011f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00122	52		 push	 edx
  00123	8b 45 f4	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  00126	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00129	51		 push	 ecx
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12
$L35657:

; 402  :     }
; 403  : 
; 404  : #ifdef DEBUG
; 405  : 
; 406  :     //
; 407  :     // ADPCM streams require phsycally contiguous memory
; 408  :     //
; 409  : 
; 410  :     if(SUCCEEDED(hr) && (WAVE_FORMAT_XBOX_ADPCM == m_pSettings->m_fmt.wFormatTag))

  00130	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00134	0f 8c 87 00 00
	00		 jl	 $L35659
  0013a	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00143	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00147	83 f9 69	 cmp	 ecx, 105		; 00000069H
  0014a	75 75		 jne	 SHORT $L35659

; 411  :     {
; 412  :         m_pMcpxApu->GetPhysicalMemoryProperties(pPacketContext->xmpPacket.pvBuffer, pPacketContext->xmpPacket.dwMaxSize, NULL, &dwContiguousLength);

  0014c	8d 55 e8	 lea	 edx, DWORD PTR _dwContiguousLength$[ebp]
  0014f	52		 push	 edx
  00150	6a 00		 push	 0
  00152	8b 45 f4	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  00155	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00158	51		 push	 ecx
  00159	8b 55 f4	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  0015c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?GetPhysicalMemoryProperties@CMcpxCore@DirectSound@@SGKPAXKPAK1@Z ; DirectSound::CMcpxCore::GetPhysicalMemoryProperties

; 413  : 
; 414  :         if(dwContiguousLength != pPacketContext->xmpPacket.dwMaxSize)

  00165	8b 4d f4	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  00168	8b 55 e8	 mov	 edx, DWORD PTR _dwContiguousLength$[ebp]
  0016b	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0016e	74 51		 je	 SHORT $L35659

; 415  :         {
; 416  :             ASSERT(dwContiguousLength < pPacketContext->xmpPacket.dwMaxSize);

  00170	68 a0 01 00 00	 push	 416			; 000001a0H
  00175	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0017a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@NBMOFNIK@dwContiguousLength?5?$DM?5pPacketCont@
  0017f	8b 45 f4	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  00182	8b 4d e8	 mov	 ecx, DWORD PTR _dwContiguousLength$[ebp]
  00185	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00188	1b d2		 sbb	 edx, edx
  0018a	42		 inc	 edx
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00191	83 c4 10	 add	 esp, 16			; 00000010H

; 417  :             DPF_ERROR("ADPCM stream packet data must be allocated using XPhysicalAlloc.  Using any other allocator will cause unexpected results.");

  00194	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00199	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MIJNAGG@CMcpxStream?3?3SubmitPacket?$AA@
  0019e	68 a1 01 00 00	 push	 417			; 000001a1H
  001a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  001a8	6a 01		 push	 1
  001aa	6a 09		 push	 9
  001ac	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001b1	83 c4 18	 add	 esp, 24			; 00000018H
  001b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0HL@OKDGGGFB@ADPCM?5stream?5packet?5data?5must?5be@
  001b9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001be	83 c4 04	 add	 esp, 4
$L35659:

; 418  :         }
; 419  :     }
; 420  : 
; 421  : #endif // DEBUG
; 422  : 
; 423  :     //
; 424  :     // Add the packet to the pending queue
; 425  :     //
; 426  : 
; 427  :     if(SUCCEEDED(hr))

  001c1	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c5	7c 23		 jl	 SHORT $L35664

; 428  :     {
; 429  :         irql.Raise();

  001c7	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  001ca	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 430  : 
; 431  :         InsertTailList(&m_lstPending, &pPacketContext->leListEntry);

  001cf	8b 45 f4	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  001d2	50		 push	 eax
  001d3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001d6	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  001dc	51		 push	 ecx
  001dd	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList

; 432  : 
; 433  :         irql.Lower();

  001e2	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  001e5	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower
$L35664:

; 434  :     }
; 435  : 
; 436  :     //
; 437  :     // Queue up as many packets as we can
; 438  :     //
; 439  : 
; 440  :     if(SUCCEEDED(hr))

  001ea	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ee	7c 08		 jl	 SHORT $L35666

; 441  :     {
; 442  :         Process();

  001f0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001f3	e8 00 00 00 00	 call	 ?Process@CMcpxStream@DirectSound@@IAEKXZ ; DirectSound::CMcpxStream::Process
$L35666:

; 443  :     }
; 444  : 
; 445  :     DPF_LEAVE_HRESULT(hr);
; 446  : 
; 447  :     return hr;

  001f8	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]

; 448  : }

  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c2 04 00	 ret	 4
?SubmitPacket@CMcpxStream@DirectSound@@QAEJABU_XMEDIAPACKET@@@Z ENDP ; DirectSound::CMcpxStream::SubmitPacket
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
DSOUND	ENDS
;	COMDAT ?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z
DSOUND	SEGMENT
_pxmp$ = 8
?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z PROC NEAR	; XMOAcceptPacket, COMDAT

; 1440 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1441 :     if(pxmp->pdwCompletedSize)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00006	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000a	74 0c		 je	 SHORT $L27998

; 1442 :     {
; 1443 :         *pxmp->pdwCompletedSize = 0;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L27998:

; 1444 :     }
; 1445 : 
; 1446 :     if(pxmp->pdwStatus)

  00018	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  0001b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0001f	74 0c		 je	 SHORT $L27997

; 1447 :     {
; 1448 :         *pxmp->pdwStatus = XMEDIAPACKET_STATUS_PENDING;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  00024	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00027	c7 02 0a 00 00
	80		 mov	 DWORD PTR [edx], -2147483638 ; 8000000aH
$L27997:

; 1449 :     }
; 1450 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?XMOAcceptPacket@@YGXPBU_XMEDIAPACKET@@@Z ENDP		; XMOAcceptPacket
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailList, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 75		 push	 117			; 00000075H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 118  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 76		 push	 118			; 00000076H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 119  : 
; 120  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 121  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 122  :     
; 123  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 124  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 125  : 
; 126  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7e		 push	 126			; 0000007eH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 127  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ENDP		; InsertTailList
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  00020	74 2c		 je	 SHORT $L30046

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L30046:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
DSOUND	ENDS
;	COMDAT ?and@@YIXPCGG@Z
DSOUND	SEGMENT
_src$ = -8
_dst$ = -4
?and@@YIXPCGG@Z PROC NEAR				; and, COMDAT
; _dst$ = ecx
; _src$ = dx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	66 89 55 f8	 mov	 WORD PTR _src$[ebp], dx
  0000a	89 4d fc	 mov	 DWORD PTR _dst$[ebp], ecx

; 168  :     __asm
; 169  :     {
; 170  :         and word ptr [ecx], dx

  0000d	66 21 11	 and	 WORD PTR [ecx], dx

; 171  :     }
; 172  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?and@@YIXPCGG@Z ENDP					; and
DSOUND	ENDS
PUBLIC	?HasPendingData@CMcpxStream@DirectSound@@QAEHXZ	; DirectSound::CMcpxStream::HasPendingData
PUBLIC	?Discontinuity@CMcpxStream@DirectSound@@QAEJXZ	; DirectSound::CMcpxStream::Discontinuity
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
;	COMDAT ?Discontinuity@CMcpxStream@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -4
?Discontinuity@CMcpxStream@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxStream::Discontinuity, COMDAT
; _this$ = ecx

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 475  :     DPF_ENTER();
; 476  : 
; 477  :     //
; 478  :     // The caller has no more data to supply
; 479  :     //
; 480  : 
; 481  :     if(HasPendingData())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?HasPendingData@CMcpxStream@DirectSound@@QAEHXZ ; DirectSound::CMcpxStream::HasPendingData
  0000f	85 c0		 test	 eax, eax
  00011	74 12		 je	 SHORT $L35671

; 482  :     {
; 483  :         or(&m_dwStatus, MCPX_VOICESTATUS_DISCONTINUITY);

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 12	 add	 ecx, 18			; 00000012H
  00019	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0001e	e8 00 00 00 00	 call	 ?or@@YIXPCGG@Z		; or

; 484  :     }
; 485  :     else

  00023	eb 08		 jmp	 SHORT $L35672
$L35671:

; 486  :     {
; 487  :         Flush();

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Flush@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Flush
$L35672:

; 488  :     }
; 489  : 
; 490  :     DPF_LEAVE_HRESULT(DS_OK);
; 491  : 
; 492  :     return DS_OK;

  0002d	33 c0		 xor	 eax, eax

; 493  : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?Discontinuity@CMcpxStream@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxStream::Discontinuity
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.h
DSOUND	ENDS
;	COMDAT ?HasPendingData@CMcpxStream@DirectSound@@QAEHXZ
DSOUND	SEGMENT
tv70 = -8
_this$ = -4
?HasPendingData@CMcpxStream@DirectSound@@QAEHXZ PROC NEAR ; DirectSound::CMcpxStream::HasPendingData, COMDAT
; _this$ = ecx

; 157  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 158  :         return !(IsListEmpty(&m_lstPending) && !m_dwMappedSslCount);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	39 81 b8 00 00
	00		 cmp	 DWORD PTR [ecx+184], eax
  0001a	75 15		 jne	 SHORT $L36519
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	83 ba a4 01 00
	00 00		 cmp	 DWORD PTR [edx+420], 0
  00026	75 09		 jne	 SHORT $L36519
  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  0002f	eb 07		 jmp	 SHORT $L36520
$L36519:
  00031	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
$L36520:
  00038	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]

; 159  :     }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?HasPendingData@CMcpxStream@DirectSound@@QAEHXZ ENDP	; DirectSound::CMcpxStream::HasPendingData
DSOUND	ENDS
PUBLIC	?Pause@CMcpxStream@DirectSound@@QAEJK@Z		; DirectSound::CMcpxStream::Pause
PUBLIC	??_C@_0BE@PAMEOFF@Invalid?5pause?5state?$AA@	; `string'
EXTRN	?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z:NEAR ; DirectSound::CMcpxVoiceClient::PauseVoice
;	COMDAT ??_C@_0BE@PAMEOFF@Invalid?5pause?5state?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND_RD	SEGMENT
??_C@_0BE@PAMEOFF@Invalid?5pause?5state?$AA@ DB 'Invalid pause state', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Pause@CMcpxStream@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -16
$T36524 = -12
___AutoIrql$ = -8
_dwPause$ = 8
?Pause@CMcpxStream@DirectSound@@QAEJK@Z PROC NEAR	; DirectSound::CMcpxStream::Pause, COMDAT
; _this$ = ecx

; 519  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 520  :     DPF_ENTER();
; 521  :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 522  : 
; 523  :     if(DSSTREAMPAUSE_PAUSE == dwPause)

  00011	83 7d 08 01	 cmp	 DWORD PTR _dwPause$[ebp], 1
  00015	75 15		 jne	 SHORT $L35679

; 524  :     {
; 525  :         PauseVoice(m_dwStatus | MCPX_VOICESTATUS_PAUSED);

  00017	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0001e	83 c9 04	 or	 ecx, 4
  00021	51		 push	 ecx
  00022	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z ; DirectSound::CMcpxVoiceClient::PauseVoice

; 526  :     }
; 527  :     else if(DSSTREAMPAUSE_RESUME == dwPause)

  0002a	eb 34		 jmp	 SHORT $L35680
$L35679:
  0002c	83 7d 08 00	 cmp	 DWORD PTR _dwPause$[ebp], 0
  00030	75 15		 jne	 SHORT $L35681

; 528  :     {
; 529  :         PauseVoice(m_dwStatus & ~MCPX_VOICESTATUS_PAUSED);

  00032	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00035	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00039	83 e0 fb	 and	 eax, -5			; fffffffbH
  0003c	50		 push	 eax
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z ; DirectSound::CMcpxVoiceClient::PauseVoice

; 530  :     }
; 531  :     else

  00045	eb 19		 jmp	 SHORT $L35680
$L35681:

; 532  :     {
; 533  :         ASSERTMSG("Invalid pause state");

  00047	68 15 02 00 00	 push	 533			; 00000215H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@PAMEOFF@Invalid?5pause?5state?$AA@
  00056	6a 01		 push	 1
  00058	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
$L35680:

; 534  :     }
; 535  : 
; 536  :     DPF_LEAVE_HRESULT(DS_OK);
; 537  : 
; 538  :     return DS_OK;

  00060	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T36524[ebp], 0
  00067	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0006a	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0006f	8b 45 f4	 mov	 eax, DWORD PTR $T36524[ebp]

; 539  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?Pause@CMcpxStream@DirectSound@@QAEJK@Z ENDP		; DirectSound::CMcpxStream::Pause
DSOUND	ENDS
PUBLIC	?Pause@CMcpxStream@DirectSound@@QAEJ_JK@Z	; DirectSound::CMcpxStream::Pause
; Function compile flags: /Odt
;	COMDAT ?Pause@CMcpxStream@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_fDeferred$ = -4
_rtTimeStamp$ = 8
_dwPause$ = 16
?Pause@CMcpxStream@DirectSound@@QAEJ_JK@Z PROC NEAR	; DirectSound::CMcpxStream::Pause, COMDAT
; _this$ = ecx

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 568  :     BOOL                    fDeferred   = FALSE;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fDeferred$[ebp], 0

; 569  :     HRESULT                 hr          = DS_OK;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 570  : 
; 571  :     DPF_ENTER();
; 572  : 
; 573  :     if(rtTimeStamp)

  00017	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0001a	0b 45 0c	 or	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $L35694

; 574  :     {
; 575  :         fDeferred = ScheduleDeferredCommand(MCPX_DEFERREDCMD_STREAM_PAUSE, rtTimeStamp, dwPause);

  00021	8b 4d 10	 mov	 ecx, DWORD PTR _dwPause$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp+4]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0002c	50		 push	 eax
  0002d	6a 05		 push	 5
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	ff 52 18	 call	 DWORD PTR [edx+24]
  0003a	89 45 fc	 mov	 DWORD PTR _fDeferred$[ebp], eax
$L35694:

; 576  :     }
; 577  : 
; 578  :     if(!fDeferred)

  0003d	83 7d fc 00	 cmp	 DWORD PTR _fDeferred$[ebp], 0
  00041	75 0f		 jne	 SHORT $L35695

; 579  :     {
; 580  :         hr = Pause(dwPause);

  00043	8b 45 10	 mov	 eax, DWORD PTR _dwPause$[ebp]
  00046	50		 push	 eax
  00047	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Pause@CMcpxStream@DirectSound@@QAEJK@Z ; DirectSound::CMcpxStream::Pause
  0004f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L35695:

; 581  :     }
; 582  : 
; 583  :     DPF_LEAVE_HRESULT(hr);
; 584  : 
; 585  :     return hr;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 586  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?Pause@CMcpxStream@DirectSound@@QAEJ_JK@Z ENDP		; DirectSound::CMcpxStream::Pause
DSOUND	ENDS
PUBLIC	?Stop@CMcpxStream@DirectSound@@QAEJK@Z		; DirectSound::CMcpxStream::Stop
PUBLIC	?Stop@CMcpxStream@DirectSound@@QAEJ_JK@Z	; DirectSound::CMcpxStream::Stop
; Function compile flags: /Odt
;	COMDAT ?Stop@CMcpxStream@DirectSound@@QAEJ_JK@Z
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_fDeferred$ = -4
_rtTimeStamp$ = 8
_dwFlags$ = 16
?Stop@CMcpxStream@DirectSound@@QAEJ_JK@Z PROC NEAR	; DirectSound::CMcpxStream::Stop, COMDAT
; _this$ = ecx

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 615  :     BOOL                    fDeferred   = FALSE;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fDeferred$[ebp], 0

; 616  :     HRESULT                 hr          = DS_OK;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 617  : 
; 618  :     DPF_ENTER();
; 619  : 
; 620  :     if(rtTimeStamp)

  00017	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0001a	0b 45 0c	 or	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  0001d	85 c0		 test	 eax, eax
  0001f	74 1c		 je	 SHORT $L35704

; 621  :     {
; 622  :         fDeferred = ScheduleDeferredCommand(MCPX_DEFERREDCMD_STREAM_STOP, rtTimeStamp, dwFlags);

  00021	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp+4]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  0002c	50		 push	 eax
  0002d	6a 04		 push	 4
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	ff 52 18	 call	 DWORD PTR [edx+24]
  0003a	89 45 fc	 mov	 DWORD PTR _fDeferred$[ebp], eax
$L35704:

; 623  :     }
; 624  : 
; 625  :     if(!fDeferred)

  0003d	83 7d fc 00	 cmp	 DWORD PTR _fDeferred$[ebp], 0
  00041	75 0f		 jne	 SHORT $L35705

; 626  :     {
; 627  :         hr = Stop(dwFlags);

  00043	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00046	50		 push	 eax
  00047	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?Stop@CMcpxStream@DirectSound@@QAEJK@Z ; DirectSound::CMcpxStream::Stop
  0004f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L35705:

; 628  :     }
; 629  : 
; 630  :     DPF_LEAVE_HRESULT(hr);
; 631  : 
; 632  :     return hr;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 633  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?Stop@CMcpxStream@DirectSound@@QAEJ_JK@Z ENDP		; DirectSound::CMcpxStream::Stop
DSOUND	ENDS
PUBLIC	??_C@_0CA@ILPJECNE@dwFlags?5?$CG?5DSSTREAMFLUSHEX_ASYNC?$AA@ ; `string'
EXTRN	?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z:NEAR ; DirectSound::CMcpxVoiceClient::DeactivateVoice
EXTRN	?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::ReleaseVoice
;	COMDAT ??_C@_0CA@ILPJECNE@dwFlags?5?$CG?5DSSTREAMFLUSHEX_ASYNC?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@ILPJECNE@dwFlags?5?$CG?5DSSTREAMFLUSHEX_ASYNC?$AA@ DB 'dwFlags '
	DB	'& DSSTREAMFLUSHEX_ASYNC', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Stop@CMcpxStream@DirectSound@@QAEJK@Z
DSOUND	SEGMENT
_this$ = -20
$T36534 = -16
___AutoIrql$ = -12
_i$ = -4
_dwFlags$ = 8
?Stop@CMcpxStream@DirectSound@@QAEJK@Z PROC NEAR	; DirectSound::CMcpxStream::Stop, COMDAT
; _this$ = ecx

; 659  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 660  :     DWORD                   i;
; 661  :     
; 662  :     DPF_ENTER();
; 663  :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 664  : 
; 665  :     ASSERT(dwFlags & DSSTREAMFLUSHEX_ASYNC);

  00011	68 99 02 00 00	 push	 665			; 00000299H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@ILPJECNE@dwFlags?5?$CG?5DSSTREAMFLUSHEX_ASYNC?$AA@
  00020	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00023	83 e0 01	 and	 eax, 1
  00026	f7 d8		 neg	 eax
  00028	1b c0		 sbb	 eax, eax
  0002a	40		 inc	 eax
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 666  : 
; 667  :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  00034	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  0003b	83 e2 03	 and	 edx, 3
  0003e	83 fa 03	 cmp	 edx, 3
  00041	75 5a		 jne	 SHORT $L35713

; 668  :     {
; 669  :         //
; 670  :         // Cancel all outstanding deferred commands
; 671  :         //
; 672  : 
; 673  :         for(i = 0; i < MCPX_DEFERREDCMD_STREAM_COUNT; i++)

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004a	eb 09		 jmp	 SHORT $L35714
$L35715:
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004f	83 c0 01	 add	 eax, 1
  00052	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L35714:
  00055	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  00059	73 11		 jae	 SHORT $L35716

; 674  :         {
; 675  :             RemoveDeferredCommand(i);

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005e	51		 push	 ecx
  0005f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	ff 50 1c	 call	 DWORD PTR [eax+28]

; 676  :         }

  0006a	eb e0		 jmp	 SHORT $L35715
$L35716:

; 677  : 
; 678  :         //
; 679  :         // Deactivate or release the voice
; 680  :         //
; 681  : 
; 682  :         if(dwFlags & DSSTREAMFLUSHEX_ENVELOPE)

  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0006f	83 e1 02	 and	 ecx, 2
  00072	85 c9		 test	 ecx, ecx
  00074	74 0a		 je	 SHORT $L35717

; 683  :         {
; 684  :             ReleaseVoice();

  00076	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?ReleaseVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ReleaseVoice

; 685  :         }
; 686  :         else

  0007e	eb 0a		 jmp	 SHORT $L35718
$L35717:

; 687  :         {
; 688  :             DeactivateVoice();

  00080	6a 00		 push	 0
  00082	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice
$L35718:

; 689  :         }
; 690  : 
; 691  :         //
; 692  :         // Schedule a deferred flush for when the voice is actually stopped
; 693  :         //
; 694  : 
; 695  :         ScheduleDeferredCommand(MCPX_DEFERREDCMD_STREAM_FLUSH, 0, 0);

  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	6a 03		 push	 3
  00092	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00095	8b 02		 mov	 eax, DWORD PTR [edx]
  00097	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	ff 50 18	 call	 DWORD PTR [eax+24]
$L35713:

; 696  :     }
; 697  : 
; 698  :     DPF_LEAVE_HRESULT(DS_OK);
; 699  : 
; 700  :     return DS_OK;

  0009d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T36534[ebp], 0
  000a4	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  000a7	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  000ac	8b 45 f0	 mov	 eax, DWORD PTR $T36534[ebp]

; 701  : }

  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
?Stop@CMcpxStream@DirectSound@@QAEJK@Z ENDP		; DirectSound::CMcpxStream::Stop
DSOUND	ENDS
PUBLIC	?CompleteSsl@CMcpxStream@DirectSound@@IAEXKK@Z	; DirectSound::CMcpxStream::CompleteSsl
PUBLIC	?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z ; DirectSound::CMcpxStream::CompletePackets
PUBLIC	?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::CompleteDeferredPackets
PUBLIC	??_C@_0BE@DBGAONNG@?$CBm_dwMappedSslCount?$AA@	; `string'
EXTRN	?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff
;	COMDAT ??_C@_0BE@DBGAONNG@?$CBm_dwMappedSslCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DBGAONNG@?$CBm_dwMappedSslCount?$AA@ DB '!m_dwMappedSslCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Flush@CMcpxStream@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -20
_CurrentIrql$ = -13
_i$ = -12
_irql$ = -8
?Flush@CMcpxStream@DirectSound@@QAEJXZ PROC NEAR	; DirectSound::CMcpxStream::Flush, COMDAT
; _this$ = ecx

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 728  :     const KIRQL             CurrentIrql = KeGetCurrentIrql();

  00009	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000e	88 45 f3	 mov	 BYTE PTR _CurrentIrql$[ebp], al

; 729  :     CIrql                   irql;

  00011	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00014	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 730  :     DWORD                   i;
; 731  :     
; 732  :     DPF_ENTER();
; 733  : 
; 734  :     if(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED)

  00019	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00020	83 e1 01	 and	 ecx, 1
  00023	85 c9		 test	 ecx, ecx
  00025	0f 84 21 01 00
	00		 je	 $L35728

; 735  :     {
; 736  :         //
; 737  :         // Raise IRQL for synchronization with the voice interrupt handler
; 738  :         //
; 739  :     
; 740  :         irql.Raise();

  0002b	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0002e	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 741  :     
; 742  :         //
; 743  :         // Cancel any outstanding deferred commands
; 744  :         //
; 745  : 
; 746  :         for(i = 0; i < MCPX_DEFERREDCMD_STREAM_COUNT; i++)

  00033	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003a	eb 09		 jmp	 SHORT $L35729
$L35730:
  0003c	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0003f	83 c2 01	 add	 edx, 1
  00042	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L35729:
  00045	83 7d f4 06	 cmp	 DWORD PTR _i$[ebp], 6
  00049	73 11		 jae	 SHORT $L35731

; 747  :         {
; 748  :             RemoveDeferredCommand(i);

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	ff 52 1c	 call	 DWORD PTR [edx+28]

; 749  :         }

  0005a	eb e0		 jmp	 SHORT $L35730
$L35731:

; 750  : 
; 751  :         //
; 752  :         // Deactivate the voice
; 753  :         //
; 754  : 
; 755  :         DeactivateVoice();

  0005c	6a 00		 push	 0
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice

; 756  : 
; 757  :         //
; 758  :         // Lower IRQL to allow the interrupt handler to run
; 759  :         //
; 760  : 
; 761  :         irql.Lower();

  00066	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00069	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 762  : 
; 763  :         //
; 764  :         // Busy-wait until the voice is really idle
; 765  :         //
; 766  : 
; 767  :         WaitForVoiceOff();

  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?WaitForVoiceOff@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::WaitForVoiceOff

; 768  : 
; 769  :         //
; 770  :         // Clear the SSLs
; 771  :         //
; 772  : 
; 773  :         for(i = 0; i < NUMELMS(m_aSslDesc); i++)

  00076	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007d	eb 09		 jmp	 SHORT $L35732
$L35733:
  0007f	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L35732:
  00088	83 7d f4 02	 cmp	 DWORD PTR _i$[ebp], 2
  0008c	73 13		 jae	 SHORT $L35734

; 774  :         {
; 775  :             CompleteSsl(i, XMEDIAPACKET_STATUS_FLUSHED);

  0008e	68 04 40 00 80	 push	 -2147467260		; 80004004H
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00096	51		 push	 ecx
  00097	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?CompleteSsl@CMcpxStream@DirectSound@@IAEXKK@Z ; DirectSound::CMcpxStream::CompleteSsl

; 776  :         }

  0009f	eb de		 jmp	 SHORT $L35733
$L35734:

; 777  : 
; 778  :         ASSERT(!m_dwMappedSslCount);

  000a1	68 0a 03 00 00	 push	 778			; 0000030aH
  000a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DBGAONNG@?$CBm_dwMappedSslCount?$AA@
  000b0	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000b3	33 c0		 xor	 eax, eax
  000b5	83 ba a4 01 00
	00 00		 cmp	 DWORD PTR [edx+420], 0
  000bc	0f 95 c0	 setne	 al
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000c5	83 c4 10	 add	 esp, 16			; 00000010H

; 779  :         m_dwFirstMappedSslIndex = 0;

  000c8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	c7 81 a0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+416], 0

; 780  : 
; 781  :         //
; 782  :         // Complete any pending packets
; 783  :         //
; 784  : 
; 785  :         CompletePackets(&m_lstPending, XMEDIAPACKET_STATUS_FLUSHED);

  000d5	68 04 40 00 80	 push	 -2147467260		; 80004004H
  000da	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000dd	81 c2 b8 00 00
	00		 add	 edx, 184		; 000000b8H
  000e3	52		 push	 edx
  000e4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	e8 00 00 00 00	 call	 ?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z ; DirectSound::CMcpxStream::CompletePackets

; 786  : 
; 787  :         //
; 788  :         // If we're LOCDEFER, free stream resources
; 789  :         //
; 790  : 
; 791  :         if(m_pSettings->m_dwFlags & DSSTREAMCAPS_LOCDEFER)

  000ec	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ef	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  000f5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000f8	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  000fe	85 d2		 test	 edx, edx
  00100	74 25		 je	 SHORT $L35738

; 792  :         {
; 793  :             if(PASSIVE_LEVEL == CurrentIrql)

  00102	0f b6 45 f3	 movzx	 eax, BYTE PTR _CurrentIrql$[ebp]
  00106	85 c0		 test	 eax, eax
  00108	75 0a		 jne	 SHORT $L35739

; 794  :             {
; 795  :                 ReleaseStreamResources();

  0010a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	e8 00 00 00 00	 call	 ?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::ReleaseStreamResources

; 796  :             }
; 797  :             else

  00112	eb 13		 jmp	 SHORT $L35738
$L35739:

; 798  :             {
; 799  :                 ScheduleDeferredCommand(MCPX_DEFERREDCMD_STREAM_RELEASERESOURCES, 0, 0);

  00114	6a 00		 push	 0
  00116	6a 00		 push	 0
  00118	6a 00		 push	 0
  0011a	6a 01		 push	 1
  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00121	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	ff 52 18	 call	 DWORD PTR [edx+24]
$L35738:

; 800  :             }
; 801  :         }
; 802  : 
; 803  :         //
; 804  :         // Clear the deferred completion list
; 805  :         //
; 806  :         
; 807  :         if(PASSIVE_LEVEL == CurrentIrql)

  00127	0f b6 45 f3	 movzx	 eax, BYTE PTR _CurrentIrql$[ebp]
  0012b	85 c0		 test	 eax, eax
  0012d	75 0a		 jne	 SHORT $L35741

; 808  :         {
; 809  :             CompleteDeferredPackets();

  0012f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	e8 00 00 00 00	 call	 ?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::CompleteDeferredPackets

; 810  :         }
; 811  :         else

  00137	eb 13		 jmp	 SHORT $L35728
$L35741:

; 812  :         {
; 813  :             ScheduleDeferredCommand(MCPX_DEFERREDCMD_STREAM_COMPLETEPACKETS, 0, 0);

  00139	6a 00		 push	 0
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	6a 02		 push	 2
  00141	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	8b 11		 mov	 edx, DWORD PTR [ecx]
  00146	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	ff 52 18	 call	 DWORD PTR [edx+24]
$L35728:

; 814  :         }
; 815  :     }
; 816  : 
; 817  :     DPF_LEAVE_HRESULT(DS_OK);
; 818  : 
; 819  :     return DS_OK;

  0014c	33 c0		 xor	 eax, eax

; 820  : }

  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
?Flush@CMcpxStream@DirectSound@@QAEJXZ ENDP		; DirectSound::CMcpxStream::Flush
DSOUND	ENDS
PUBLIC	?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z	; DirectSound::CMcpxStream::GetStatus
; Function compile flags: /Odt
;	COMDAT ?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z
DSOUND	SEGMENT
_this$ = -16
$T36541 = -12
___AutoIrql$ = -8
_pdwStatus$ = 8
?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z PROC NEAR	; DirectSound::CMcpxStream::GetStatus, COMDAT
; _this$ = ecx

; 846  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 847  :     DPF_ENTER();
; 848  :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 849  : 
; 850  :     *pdwStatus = 0;

  00011	8b 45 08	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 851  : 
; 852  :     if(!IsListEmpty(&m_lstAvailable))

  0001a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  00023	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00026	39 8a c0 00 00
	00		 cmp	 DWORD PTR [edx+192], ecx
  0002c	74 0d		 je	 SHORT $L35749

; 853  :     {
; 854  :         *pdwStatus |= DSSTREAMSTATUS_READY;

  0002e	8b 45 08	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	83 c9 01	 or	 ecx, 1
  00036	8b 55 08	 mov	 edx, DWORD PTR _pdwStatus$[ebp]
  00039	89 0a		 mov	 DWORD PTR [edx], ecx
$L35749:

; 855  :     }
; 856  : 
; 857  :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  0003b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00042	83 e1 03	 and	 ecx, 3
  00045	83 f9 03	 cmp	 ecx, 3
  00048	75 55		 jne	 SHORT $L35750

; 858  :     {
; 859  :         if(m_dwStatus & MCPX_VOICESTATUS_ALLPAUSEDMASK)

  0004a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00051	25 04 04 00 00	 and	 eax, 1028		; 00000404H
  00056	85 c0		 test	 eax, eax
  00058	74 33		 je	 SHORT $L35751

; 860  :         {
; 861  :             *pdwStatus |= DSSTREAMSTATUS_PAUSED;

  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _pdwStatus$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	81 ca 00 00 02
	00		 or	 edx, 131072		; 00020000H
  00065	8b 45 08	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00068	89 10		 mov	 DWORD PTR [eax], edx

; 862  : 
; 863  :             if(m_dwStatus & MCPX_VOICESTATUS_STARVED)

  0006a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  00071	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00077	85 d2		 test	 edx, edx
  00079	74 10		 je	 SHORT $L35752

; 864  :             {
; 865  :                 *pdwStatus |= DSSTREAMSTATUS_STARVED;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	81 c9 00 00 04
	00		 or	 ecx, 262144		; 00040000H
  00086	8b 55 08	 mov	 edx, DWORD PTR _pdwStatus$[ebp]
  00089	89 0a		 mov	 DWORD PTR [edx], ecx
$L35752:

; 866  :             }
; 867  :         }
; 868  :         else

  0008b	eb 10		 jmp	 SHORT $L35753
$L35751:

; 869  :         {
; 870  :             *pdwStatus |= DSSTREAMSTATUS_PLAYING;

  0008d	8b 45 08	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	81 c9 00 00 01
	00		 or	 ecx, 65536		; 00010000H
  00098	8b 55 08	 mov	 edx, DWORD PTR _pdwStatus$[ebp]
  0009b	89 0a		 mov	 DWORD PTR [edx], ecx
$L35753:

; 871  :         }
; 872  :     }
; 873  :     else if((m_dwStatus & MCPX_VOICESTATUS_VOICEOFFMASK) == MCPX_VOICESTATUS_VOICEOFFMASK)

  0009d	eb 24		 jmp	 SHORT $L35754
$L35750:
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  000a6	81 e1 01 80 00
	00		 and	 ecx, 32769		; 00008001H
  000ac	81 f9 01 80 00
	00		 cmp	 ecx, 32769		; 00008001H
  000b2	75 0f		 jne	 SHORT $L35754

; 874  :     {
; 875  :         *pdwStatus |= DSSTREAMSTATUS_PLAYING;

  000b4	8b 55 08	 mov	 edx, DWORD PTR _pdwStatus$[ebp]
  000b7	8b 02		 mov	 eax, DWORD PTR [edx]
  000b9	0d 00 00 01 00	 or	 eax, 65536		; 00010000H
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _pdwStatus$[ebp]
  000c1	89 01		 mov	 DWORD PTR [ecx], eax
$L35754:

; 876  :     }
; 877  : 
; 878  :     DPF_LEAVE_HRESULT(DS_OK);
; 879  : 
; 880  :     return DS_OK;

  000c3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T36541[ebp], 0
  000ca	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  000cd	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  000d2	8b 45 f4	 mov	 eax, DWORD PTR $T36541[ebp]

; 881  : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z ENDP	; DirectSound::CMcpxStream::GetStatus
DSOUND	ENDS
PUBLIC	?OnEndOfStream@CMcpxStream@DirectSound@@IAEXXZ	; DirectSound::CMcpxStream::OnEndOfStream
PUBLIC	??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0EK@JKDGJIFE@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@ ; `string'
PUBLIC	??_C@_0CH@DJKIMAIJ@IsListEmpty?$CI?$CGm_aSslDesc?$FLi?$FN?4lstPa@ ; `string'
PUBLIC	??_C@_0BL@NHLICKD@IsListEmpty?$CI?$CGm_lstPending?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT
??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@ DB 'Ke'
	DB	'GetCurrentIrql() == DISPATCH_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@JKDGJIFE@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@
DSOUND_RD	SEGMENT
??_C@_0EK@JKDGJIFE@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@ DB '(m_dwSta'
	DB	'tus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVE'
	DB	'MASK', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@DJKIMAIJ@IsListEmpty?$CI?$CGm_aSslDesc?$FLi?$FN?4lstPa@
DSOUND_RD	SEGMENT
??_C@_0CH@DJKIMAIJ@IsListEmpty?$CI?$CGm_aSslDesc?$FLi?$FN?4lstPa@ DB 'IsL'
	DB	'istEmpty(&m_aSslDesc[i].lstPackets)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@NHLICKD@IsListEmpty?$CI?$CGm_lstPending?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@NHLICKD@IsListEmpty?$CI?$CGm_lstPending?$CJ?$AA@ DB 'IsListEmpt'
	DB	'y(&m_lstPending)', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?OnEndOfStream@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
?OnEndOfStream@CMcpxStream@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxStream::OnEndOfStream, COMDAT
; _this$ = ecx

; 907  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 908  : 
; 909  : #ifdef DEBUG
; 910  : 
; 911  :     DWORD                   i;
; 912  : 
; 913  : #endif // DEBUG
; 914  : 
; 915  :     DPF_ENTER();
; 916  : 
; 917  :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  0000a	68 95 03 00 00	 push	 917			; 00000395H
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00019	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001e	0f b6 c0	 movzx	 eax, al
  00021	33 c9		 xor	 ecx, ecx
  00023	83 f8 02	 cmp	 eax, 2
  00026	0f 95 c1	 setne	 cl
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 918  :     ASSERT((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK);

  00032	68 96 03 00 00	 push	 918			; 00000396H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EK@JKDGJIFE@?$CIm_dwStatus?5?$CG?5MCPX_VOICESTATUS_A@
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00048	83 e0 03	 and	 eax, 3
  0004b	33 c9		 xor	 ecx, ecx
  0004d	83 f8 03	 cmp	 eax, 3
  00050	0f 95 c1	 setne	 cl
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00059	83 c4 10	 add	 esp, 16			; 00000010H

; 919  : 
; 920  :     //
; 921  :     // Stop the voice
; 922  :     //
; 923  : 
; 924  :     DeactivateVoice();

  0005c	6a 00		 push	 0
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice

; 925  : 
; 926  : #ifdef DEBUG
; 927  : 
; 928  :     //
; 929  :     // Assert that all packets have been completed
; 930  :     //
; 931  : 
; 932  :     for(i = 0; i < NUMELMS(m_aSslDesc); i++)

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006d	eb 09		 jmp	 SHORT $L35765
$L35766:
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00072	83 c2 01	 add	 edx, 1
  00075	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L35765:
  00078	83 7d fc 02	 cmp	 DWORD PTR _i$[ebp], 2
  0007c	73 3f		 jae	 SHORT $L35767

; 933  :     {
; 934  :         ASSERT(IsListEmpty(&m_aSslDesc[i].lstPackets));

  0007e	68 a6 03 00 00	 push	 934			; 000003a6H
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@DJKIMAIJ@IsListEmpty?$CI?$CGm_aSslDesc?$FLi?$FN?4lstPa@
  0008d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00090	c1 e0 04	 shl	 eax, 4
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00096	c1 e1 04	 shl	 ecx, 4
  00099	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0009c	8d 8c 0a 98 00
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+152]
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	33 db		 xor	 ebx, ebx
  000a8	39 8c 02 98 00
	00 00		 cmp	 DWORD PTR [edx+eax+152], ecx
  000af	0f 95 c3	 setne	 bl
  000b2	53		 push	 ebx
  000b3	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b8	83 c4 10	 add	 esp, 16			; 00000010H

; 935  :     }

  000bb	eb b2		 jmp	 SHORT $L35766
$L35767:

; 936  : 
; 937  :     ASSERT(IsListEmpty(&m_lstPending));

  000bd	68 a9 03 00 00	 push	 937			; 000003a9H
  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@NHLICKD@IsListEmpty?$CI?$CGm_lstPending?$CJ?$AA@
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	33 d2		 xor	 edx, edx
  000d9	39 81 b8 00 00
	00		 cmp	 DWORD PTR [ecx+184], eax
  000df	0f 95 c2	 setne	 dl
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 
; 939  : #endif // DEBUG
; 940  : 
; 941  :     //
; 942  :     // Reset the SSL indeces
; 943  :     //
; 944  : 
; 945  :     ASSERT(!m_dwMappedSslCount);

  000eb	68 b1 03 00 00	 push	 945			; 000003b1H
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DBGAONNG@?$CBm_dwMappedSslCount?$AA@
  000fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	33 c9		 xor	 ecx, ecx
  000ff	83 b8 a4 01 00
	00 00		 cmp	 DWORD PTR [eax+420], 0
  00106	0f 95 c1	 setne	 cl
  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0010f	83 c4 10	 add	 esp, 16			; 00000010H

; 946  :     m_dwFirstMappedSslIndex = 0;

  00112	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00115	c7 82 a0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+416], 0

; 947  : 
; 948  :     //
; 949  :     // If we're LOCDEFER, schedule a deferred command to release voice
; 950  :     // resources
; 951  :     //
; 952  : 
; 953  :     if(m_pSettings->m_dwFlags & DSSTREAMCAPS_LOCDEFER)

  0011f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00122	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00128	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0012b	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  00131	85 d2		 test	 edx, edx
  00133	74 13		 je	 SHORT $L35761

; 954  :     {
; 955  :         ScheduleDeferredCommand(MCPX_DEFERREDCMD_STREAM_RELEASERESOURCES, 0, 0);

  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	6a 00		 push	 0
  0013b	6a 01		 push	 1
  0013d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00140	8b 10		 mov	 edx, DWORD PTR [eax]
  00142	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	ff 52 18	 call	 DWORD PTR [edx+24]
$L35761:

; 956  :     }
; 957  : 
; 958  :     DPF_LEAVE_VOID();
; 959  : }

  00148	5b		 pop	 ebx
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
?OnEndOfStream@CMcpxStream@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxStream::OnEndOfStream
DSOUND	ENDS
PUBLIC	?OnDeferredFlush@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::OnDeferredFlush
PUBLIC	??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@ ; `string'
PUBLIC	??_C@_0BN@GIMEOBHP@CMcpxStream?3?3OnDeferredFlush?$AA@ ; `string'
PUBLIC	??_C@_0BO@HJDCEMOA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5not?5stopped?5yet?$AA@ ; `string'
;	COMDAT ??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
DSOUND_RD	SEGMENT
??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@ DB 'm_dwStatus '
	DB	'& MCPX_VOICESTATUS_ALLOCATED', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GIMEOBHP@CMcpxStream?3?3OnDeferredFlush?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@GIMEOBHP@CMcpxStream?3?3OnDeferredFlush?$AA@ DB 'CMcpxStream::O'
	DB	'nDeferredFlush', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@HJDCEMOA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5not?5stopped?5yet?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@HJDCEMOA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5not?5stopped?5yet?$AA@ DB 'V'
	DB	'oice %x (%x) not stopped yet', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?OnDeferredFlush@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?OnDeferredFlush@CMcpxStream@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxStream::OnDeferredFlush, COMDAT
; _this$ = ecx

; 985  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 986  :     DPF_ENTER();
; 987  : 
; 988  :     ASSERT(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  00007	68 dc 03 00 00	 push	 988			; 000003dcH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0001d	83 e1 01	 and	 ecx, 1
  00020	f7 d9		 neg	 ecx
  00022	1b c9		 sbb	 ecx, ecx
  00024	41		 inc	 ecx
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 989  : 
; 990  :     //
; 991  :     // Check the voice status.  If we're still waiting for the VoiceOff, don't
; 992  :     // do the flush yet.
; 993  :     //
; 994  : 
; 995  :     if(m_dwStatus & MCPX_VOICESTATUS_ACTIVEORVOICEOFF)

  0002e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00031	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00035	25 02 80 00 00	 and	 eax, 32770		; 00008002H
  0003a	85 c0		 test	 eax, eax
  0003c	74 3b		 je	 SHORT $L35776

; 996  :     {
; 997  :         DPF_BLAB("Voice %x (%x) not stopped yet", this, m_ahVoices[0]);

  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GIMEOBHP@CMcpxStream?3?3OnDeferredFlush?$AA@
  00048	68 e5 03 00 00	 push	 997			; 000003e5H
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00052	6a 05		 push	 5
  00054	6a 09		 push	 9
  00056	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00065	52		 push	 edx
  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@HJDCEMOA@Voice?5?$CFx?5?$CI?$CFx?$CJ?5not?5stopped?5yet?$AA@
  0006f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 998  :     }
; 999  :     else

  00077	eb 08		 jmp	 SHORT $L35774
$L35776:

; 1000 :     {
; 1001 :         Flush();

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?Flush@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Flush
$L35774:

; 1002 :     }
; 1003 : 
; 1004 :     DPF_LEAVE_VOID();
; 1005 : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?OnDeferredFlush@CMcpxStream@DirectSound@@IAEXXZ ENDP	; DirectSound::CMcpxStream::OnDeferredFlush
DSOUND	ENDS
PUBLIC	?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z	; DirectSound::CMcpxNotifier::GetStatus
PUBLIC	?MapPackets@CMcpxStream@DirectSound@@IAEHK@Z	; DirectSound::CMcpxStream::MapPackets
; Function compile flags: /Odt
;	COMDAT ?Process@CMcpxStream@DirectSound@@IAEKXZ
DSOUND	SEGMENT
_this$ = -32
$T36551 = -28
___AutoIrql$ = -24
_dwSslCount$ = -16
_dwStatus$ = -12
_fContinue$ = -8
_dwSslIndex$ = -4
?Process@CMcpxStream@DirectSound@@IAEKXZ PROC NEAR	; DirectSound::CMcpxStream::Process, COMDAT
; _this$ = ecx

; 1031 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1032 :     DWORD                   dwStatus        = 0;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwStatus$[ebp], 0

; 1033 :     BOOL                    fContinue       = TRUE;

  00010	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fContinue$[ebp], 1

; 1034 :     DWORD                   dwSslIndex;
; 1035 :     DWORD                   dwSslCount;
; 1036 : 
; 1037 :     DPF_ENTER();
; 1038 :     AutoIrql();

  00017	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql
$L35790:

; 1039 : 
; 1040 :     while(fContinue)

  0001f	83 7d f8 00	 cmp	 DWORD PTR _fContinue$[ebp], 0
  00023	0f 84 d9 00 00
	00		 je	 $L35791

; 1041 :     {
; 1042 :         //
; 1043 :         // Check for completed SSLs, starting with the oldest one first
; 1044 :         //
; 1045 : 
; 1046 :         dwSslIndex = m_dwFirstMappedSslIndex;

  00029	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00032	89 4d fc	 mov	 DWORD PTR _dwSslIndex$[ebp], ecx

; 1047 :     
; 1048 :         for(dwSslCount = 0; dwSslCount < NUMELMS(m_aSslDesc); dwSslCount++)

  00035	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwSslCount$[ebp], 0
  0003c	eb 09		 jmp	 SHORT $L35792
$L35793:
  0003e	8b 55 f0	 mov	 edx, DWORD PTR _dwSslCount$[ebp]
  00041	83 c2 01	 add	 edx, 1
  00044	89 55 f0	 mov	 DWORD PTR _dwSslCount$[ebp], edx
$L35792:
  00047	83 7d f0 02	 cmp	 DWORD PTR _dwSslCount$[ebp], 2
  0004b	73 42		 jae	 SHORT $L35794

; 1049 :         {
; 1050 :             if(m_Notifier.GetStatus(dwSslIndex))

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  00050	50		 push	 eax
  00051	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 68	 add	 ecx, 104		; 00000068H
  00057	e8 00 00 00 00	 call	 ?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z ; DirectSound::CMcpxNotifier::GetStatus
  0005c	85 c0		 test	 eax, eax
  0005e	74 19		 je	 SHORT $L35795

; 1051 :             {
; 1052 :                 CompleteSsl(dwSslIndex, XMEDIAPACKET_STATUS_SUCCESS);

  00060	6a 00		 push	 0
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00065	51		 push	 ecx
  00066	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?CompleteSsl@CMcpxStream@DirectSound@@IAEXKK@Z ; DirectSound::CMcpxStream::CompleteSsl

; 1053 : 
; 1054 :                 dwStatus |= MCPX_STREAM_PROCESS_COMPLETEDSSL;

  0006e	8b 55 f4	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  00071	83 ca 01	 or	 edx, 1
  00074	89 55 f4	 mov	 DWORD PTR _dwStatus$[ebp], edx

; 1055 :             }
; 1056 :             else

  00077	eb 02		 jmp	 SHORT $L35797
$L35795:

; 1057 :             {
; 1058 :                 break;

  00079	eb 14		 jmp	 SHORT $L35794
$L35797:

; 1059 :             }
; 1060 : 
; 1061 :             dwSslIndex = (dwSslIndex + 1) % NUMELMS(m_aSslDesc);

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  0007e	83 c0 01	 add	 eax, 1
  00081	33 d2		 xor	 edx, edx
  00083	b9 02 00 00 00	 mov	 ecx, 2
  00088	f7 f1		 div	 ecx
  0008a	89 55 fc	 mov	 DWORD PTR _dwSslIndex$[ebp], edx

; 1062 :         }

  0008d	eb af		 jmp	 SHORT $L35793
$L35794:

; 1063 : 
; 1064 :         //
; 1065 :         // Fill SSLs, starting with the first empty one
; 1066 :         //
; 1067 : 
; 1068 :         dwSslIndex = (m_dwFirstMappedSslIndex + m_dwMappedSslCount) % NUMELMS(m_aSslDesc);

  0008f	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 82 a0 01 00
	00		 mov	 eax, DWORD PTR [edx+416]
  00098	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	03 81 a4 01 00
	00		 add	 eax, DWORD PTR [ecx+420]
  000a1	33 d2		 xor	 edx, edx
  000a3	b9 02 00 00 00	 mov	 ecx, 2
  000a8	f7 f1		 div	 ecx
  000aa	89 55 fc	 mov	 DWORD PTR _dwSslIndex$[ebp], edx

; 1069 :     
; 1070 :         for(dwSslCount = 0; dwSslCount < NUMELMS(m_aSslDesc); dwSslCount++)

  000ad	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwSslCount$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $L35798
$L35799:
  000b6	8b 55 f0	 mov	 edx, DWORD PTR _dwSslCount$[ebp]
  000b9	83 c2 01	 add	 edx, 1
  000bc	89 55 f0	 mov	 DWORD PTR _dwSslCount$[ebp], edx
$L35798:
  000bf	83 7d f0 02	 cmp	 DWORD PTR _dwSslCount$[ebp], 2
  000c3	73 38		 jae	 SHORT $L35800

; 1071 :         {
; 1072 :             if(MapPackets(dwSslIndex))

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  000c8	50		 push	 eax
  000c9	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	e8 00 00 00 00	 call	 ?MapPackets@CMcpxStream@DirectSound@@IAEHK@Z ; DirectSound::CMcpxStream::MapPackets
  000d1	85 c0		 test	 eax, eax
  000d3	74 0b		 je	 SHORT $L35801

; 1073 :             {
; 1074 :                 dwStatus |= MCPX_STREAM_PROCESS_MAPPEDDATA;

  000d5	8b 4d f4	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  000d8	83 c9 02	 or	 ecx, 2
  000db	89 4d f4	 mov	 DWORD PTR _dwStatus$[ebp], ecx

; 1075 :             }
; 1076 :             else

  000de	eb 09		 jmp	 SHORT $L35802
$L35801:

; 1077 :             {
; 1078 :                 fContinue = FALSE;

  000e0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fContinue$[ebp], 0

; 1079 :                 break;

  000e7	eb 14		 jmp	 SHORT $L35800
$L35802:

; 1080 :             }
; 1081 : 
; 1082 :             dwSslIndex = (dwSslIndex + 1) % NUMELMS(m_aSslDesc);

  000e9	8b 45 fc	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	33 d2		 xor	 edx, edx
  000f1	b9 02 00 00 00	 mov	 ecx, 2
  000f6	f7 f1		 div	 ecx
  000f8	89 55 fc	 mov	 DWORD PTR _dwSslIndex$[ebp], edx

; 1083 :         }

  000fb	eb b9		 jmp	 SHORT $L35799
$L35800:

; 1084 :     }

  000fd	e9 1d ff ff ff	 jmp	 $L35790
$L35791:

; 1085 : 
; 1086 :     //
; 1087 :     // If we're providing accurate callbacks, flush the deferred completion 
; 1088 :     // list
; 1089 :     //
; 1090 : 
; 1091 :     if(m_pSettings->m_dwFlags & DSSTREAMCAPS_ACCURATENOTIFY)

  00102	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00105	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0010b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0010e	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  00114	85 c9		 test	 ecx, ecx
  00116	74 08		 je	 SHORT $L35803

; 1092 :     {
; 1093 :         CompleteDeferredPackets();

  00118	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	e8 00 00 00 00	 call	 ?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::CompleteDeferredPackets
$L35803:

; 1094 :     }
; 1095 : 
; 1096 :     DPF_LEAVE(dwStatus);
; 1097 : 
; 1098 :     return dwStatus;

  00120	8b 55 f4	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  00123	89 55 e4	 mov	 DWORD PTR $T36551[ebp], edx
  00126	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00129	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0012e	8b 45 e4	 mov	 eax, DWORD PTR $T36551[ebp]

; 1099 : }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
?Process@CMcpxStream@DirectSound@@IAEKXZ ENDP		; DirectSound::CMcpxStream::Process
DSOUND	ENDS
PUBLIC	??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@BMLCBDGO@m_paNotifier?$AA@		; `string'
PUBLIC	??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ ; `string'
PUBLIC	??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@ ; `string'
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpxcore.h
DSOUND_RD	SEGMENT
??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpxcore.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@BMLCBDGO@m_paNotifier?$AA@ DB 'm_paNotifier', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT
??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@ DB 'dwNotifierI'
	DB	'ndex < m_dwNotifierCount', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@ DB 'Unexpected notif'
	DB	'ier status', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z
DSOUND	SEGMENT
tv81 = -8
_this$ = -4
_dwNotifierIndex$ = 8
?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z PROC NEAR	; DirectSound::CMcpxNotifier::GetStatus, COMDAT
; _this$ = ecx

; 436  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 437  :         ASSERT(m_paNotifier);

  00009	68 b5 01 00 00	 push	 437			; 000001b5H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	0f 94 c1	 sete	 cl
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 438  :         ASSERT(dwNotifierIndex < m_dwNotifierCount);

  0002c	68 b6 01 00 00	 push	 438			; 000001b6H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00041	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00044	1b c9		 sbb	 ecx, ecx
  00046	41		 inc	 ecx
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 439  :     
; 440  :         switch(m_paNotifier[dwNotifierIndex].Status)
; 441  :         {

  00050	8b 55 08	 mov	 edx, DWORD PTR _dwNotifierIndex$[ebp]
  00053	c1 e2 04	 shl	 edx, 4
  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8a 54 11 0f	 mov	 dl, BYTE PTR [ecx+edx+15]
  0005f	88 55 f8	 mov	 BYTE PTR tv81[ebp], dl
  00062	80 7d f8 01	 cmp	 BYTE PTR tv81[ebp], 1
  00066	74 08		 je	 SHORT $L34189
  00068	80 7d f8 80	 cmp	 BYTE PTR tv81[ebp], 128	; 00000080H
  0006c	74 09		 je	 SHORT $L34190
  0006e	eb 0b		 jmp	 SHORT $L34191
$L34189:

; 442  :             case NV1BA0_NOTIFICATION_STATUS_DONE_SUCCESS:
; 443  :                 return TRUE;

  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	eb 1f		 jmp	 SHORT $L34182
$L34190:

; 444  : 
; 445  :             case NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS:
; 446  :                 return FALSE;

  00077	33 c0		 xor	 eax, eax
  00079	eb 1b		 jmp	 SHORT $L34182
$L34191:

; 447  : 
; 448  :             default:
; 449  :                 ASSERTMSG("Unexpected notifier status");

  0007b	68 c1 01 00 00	 push	 449			; 000001c1H
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
  0008a	6a 01		 push	 1
  0008c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00091	83 c4 10	 add	 esp, 16			; 00000010H

; 450  :                 return FALSE;

  00094	33 c0		 xor	 eax, eax
$L34182:

; 451  :         }
; 452  :     }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z ENDP	; DirectSound::CMcpxNotifier::GetStatus
DSOUND	ENDS
PUBLIC	?MapPacket@CMcpxStream@DirectSound@@IAEKKPAUMCPX_PACKET_CONTEXT@@@Z ; DirectSound::CMcpxStream::MapPacket
PUBLIC	?CommitSsl@CMcpxStream@DirectSound@@IAEXK@Z	; DirectSound::CMcpxStream::CommitSsl
PUBLIC	??_C@_0BI@OCGGCOCJ@CMcpxStream?3?3MapPackets?$AA@ ; `string'
PUBLIC	??_C@_0CI@NMFNIODD@Mapped?5?$CFlu?5bytes?5into?5SSL?$CFc?5?$CI?$CFlu@ ; `string'
;	COMDAT ??_C@_0BI@OCGGCOCJ@CMcpxStream?3?3MapPackets?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND_RD	SEGMENT
??_C@_0BI@OCGGCOCJ@CMcpxStream?3?3MapPackets?$AA@ DB 'CMcpxStream::MapPac'
	DB	'kets', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@NMFNIODD@Mapped?5?$CFlu?5bytes?5into?5SSL?$CFc?5?$CI?$CFlu@
DSOUND_RD	SEGMENT
??_C@_0CI@NMFNIODD@Mapped?5?$CFlu?5bytes?5into?5SSL?$CFc?5?$CI?$CFlu@ DB 'M'
	DB	'apped %lu bytes into SSL%c (%lu total)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?MapPackets@CMcpxStream@DirectSound@@IAEHK@Z
DSOUND	SEGMENT
_this$ = -16
_dwBytesMapped$ = -12
_fMapped$ = -8
_pPacketContext$ = -4
_dwSslIndex$ = 8
?MapPackets@CMcpxStream@DirectSound@@IAEHK@Z PROC NEAR	; DirectSound::CMcpxStream::MapPackets, COMDAT
; _this$ = ecx

; 1125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1126 :     BOOL                    fMapped         = FALSE;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fMapped$[ebp], 0

; 1127 :     PMCPX_PACKET_CONTEXT    pPacketContext;
; 1128 :     DWORD                   dwBytesMapped;
; 1129 :     
; 1130 :     DPF_ENTER();
; 1131 : 
; 1132 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00010	68 6c 04 00 00	 push	 1132			; 0000046cH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0001f	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00024	0f b6 c0	 movzx	 eax, al
  00027	33 c9		 xor	 ecx, ecx
  00029	83 f8 02	 cmp	 eax, 2
  0002c	0f 95 c1	 setne	 cl
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 1133 : 
; 1134 :     //
; 1135 :     // Map as many packets as we can into this SSL.  If the user asked
; 1136 :     // for accurate packet completions, we'll only map one packet per
; 1137 :     // SSL.  Mapping any more would cause multiple packets to complete
; 1138 :     // at the same time.
; 1139 :     //
; 1140 : 
; 1141 :     if(!m_aSslDesc[dwSslIndex].dwPrdCount)

  00038	8b 55 08	 mov	 edx, DWORD PTR _dwSslIndex$[ebp]
  0003b	c1 e2 04	 shl	 edx, 4
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 bc 10 a0 00
	00 00 00	 cmp	 DWORD PTR [eax+edx+160], 0
  00049	0f 85 d7 00 00
	00		 jne	 $L35812
$L35814:

; 1142 :     {
; 1143 :         while(m_aSslDesc[dwSslIndex].dwPrdCount < MCPX_HW_MAX_PRD_ENTRIES_PER_SSL)

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00052	c1 e1 04	 shl	 ecx, 4
  00055	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00058	83 bc 0a a0 00
	00 00 10	 cmp	 DWORD PTR [edx+ecx+160], 16 ; 00000010H
  00060	0f 83 ae 00 00
	00		 jae	 $L35815

; 1144 :         {
; 1145 :             if(IsListEmpty(&m_lstPending))

  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	39 81 b8 00 00
	00		 cmp	 DWORD PTR [ecx+184], eax
  00077	75 05		 jne	 SHORT $L35816

; 1146 :             {
; 1147 :                 break;

  00079	e9 96 00 00 00	 jmp	 $L35815
$L35816:

; 1148 :             }
; 1149 : 
; 1150 :             //
; 1151 :             // Get the next packet from the list
; 1152 :             //
; 1153 : 
; 1154 :             pPacketContext = CONTAINING_RECORD(m_lstPending.Flink, MCPX_PACKET_CONTEXT, leListEntry);

  0007e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  00087	89 45 fc	 mov	 DWORD PTR _pPacketContext$[ebp], eax

; 1155 : 
; 1156 :             //
; 1157 :             // Map the packet into the SSL
; 1158 :             //
; 1159 : 
; 1160 :             if(dwBytesMapped = MapPacket(dwSslIndex, pPacketContext))

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 08	 mov	 edx, DWORD PTR _dwSslIndex$[ebp]
  00091	52		 push	 edx
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?MapPacket@CMcpxStream@DirectSound@@IAEKKPAUMCPX_PACKET_CONTEXT@@@Z ; DirectSound::CMcpxStream::MapPacket
  0009a	89 45 f4	 mov	 DWORD PTR _dwBytesMapped$[ebp], eax
  0009d	83 7d f4 00	 cmp	 DWORD PTR _dwBytesMapped$[ebp], 0
  000a1	74 52		 je	 SHORT $L35821

; 1161 :             {
; 1162 :                 DPF_BLAB("Mapped %lu bytes into SSL%c (%lu total)", dwBytesMapped, 'A' + dwSslIndex, m_aSslDesc[dwSslIndex].dwBytesMapped);

  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@OCGGCOCJ@CMcpxStream?3?3MapPackets?$AA@
  000ad	68 8a 04 00 00	 push	 1162			; 0000048aH
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000b7	6a 05		 push	 5
  000b9	6a 09		 push	 9
  000bb	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c0	83 c4 18	 add	 esp, 24			; 00000018H
  000c3	8b 45 08	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  000c6	c1 e0 04	 shl	 eax, 4
  000c9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	8b 94 01 a4 00
	00 00		 mov	 edx, DWORD PTR [ecx+eax+164]
  000d3	52		 push	 edx
  000d4	8b 45 08	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  000d7	83 c0 41	 add	 eax, 65			; 00000041H
  000da	50		 push	 eax
  000db	8b 4d f4	 mov	 ecx, DWORD PTR _dwBytesMapped$[ebp]
  000de	51		 push	 ecx
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@NMFNIODD@Mapped?5?$CFlu?5bytes?5into?5SSL?$CFc?5?$CI?$CFlu@
  000e4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000e9	83 c4 10	 add	 esp, 16			; 00000010H

; 1163 :                 fMapped = TRUE;

  000ec	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fMapped$[ebp], 1

; 1164 :             }
; 1165 :             else

  000f3	eb 02		 jmp	 SHORT $L35824
$L35821:

; 1166 :             {
; 1167 :                 break;

  000f5	eb 1d		 jmp	 SHORT $L35815
$L35824:

; 1168 :             }
; 1169 : 
; 1170 :             //
; 1171 :             // Are we allowed to map more packets?
; 1172 :             //
; 1173 : 
; 1174 :             if(m_pSettings->m_dwFlags & DSSTREAMCAPS_ACCURATENOTIFY)

  000f7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000fa	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00100	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00103	81 e1 00 00 00
	40		 and	 ecx, 1073741824		; 40000000H
  00109	85 c9		 test	 ecx, ecx
  0010b	74 02		 je	 SHORT $L35825

; 1175 :             {
; 1176 :                 break;

  0010d	eb 05		 jmp	 SHORT $L35815
$L35825:

; 1177 :             }
; 1178 :         }

  0010f	e9 3b ff ff ff	 jmp	 $L35814
$L35815:

; 1179 : 
; 1180 :         //
; 1181 :         // Commit the SSL to the hardware.  If we didn't map any packets into 
; 1182 :         // this SSL, we can stop processing.
; 1183 :         //
; 1184 : 
; 1185 :         if(fMapped)

  00114	83 7d f8 00	 cmp	 DWORD PTR _fMapped$[ebp], 0
  00118	74 0c		 je	 SHORT $L35812

; 1186 :         {
; 1187 :             CommitSsl(dwSslIndex);

  0011a	8b 55 08	 mov	 edx, DWORD PTR _dwSslIndex$[ebp]
  0011d	52		 push	 edx
  0011e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00121	e8 00 00 00 00	 call	 ?CommitSsl@CMcpxStream@DirectSound@@IAEXK@Z ; DirectSound::CMcpxStream::CommitSsl
$L35812:

; 1188 :         }
; 1189 :     }
; 1190 : 
; 1191 :     DPF_LEAVE(fMapped);
; 1192 : 
; 1193 :     return fMapped;

  00126	8b 45 f8	 mov	 eax, DWORD PTR _fMapped$[ebp]

; 1194 : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
?MapPackets@CMcpxStream@DirectSound@@IAEHK@Z ENDP	; DirectSound::CMcpxStream::MapPackets
DSOUND	ENDS
PUBLIC	??_C@_0CB@CPGNAGKM@dwSslIndex?5?$DM?5NUMELMS?$CIm_aSslDesc?$CJ@ ; `string'
PUBLIC	??_C@_0CP@JGEINGIE@pPacketContext?9?$DOdwCompletedSize?5@ ; `string'
PUBLIC	??_C@_0BH@BHFIBNEP@CMcpxStream?3?3MapPacket?$AA@ ; `string'
PUBLIC	??_C@_0BK@HBDNLGDO@Working?5packet?5offset?5?$CFlu?$AA@ ; `string'
PUBLIC	??_C@_0BD@LEMGLMLF@Mapping?5new?5packet?$AA@	; `string'
PUBLIC	??_C@_0BL@EKGEFKKB@?$CB?$CIdwSampleCount?5?$CG?5?$HO0xFFFF?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0FJ@JHNNOMDP@Unable?5to?5map?5the?5next?5packet?5be@ ; `string'
PUBLIC	??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
PUBLIC	?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
PUBLIC	?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
PUBLIC	?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z	; MoveEntryTailList
PUBLIC	?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z	; DirectSound::CMcpxStream::GetSslBase
;	COMDAT ??_C@_0CB@CPGNAGKM@dwSslIndex?5?$DM?5NUMELMS?$CIm_aSslDesc?$CJ@
DSOUND_RD	SEGMENT
??_C@_0CB@CPGNAGKM@dwSslIndex?5?$DM?5NUMELMS?$CIm_aSslDesc?$CJ@ DB 'dwSsl'
	DB	'Index < NUMELMS(m_aSslDesc)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@JGEINGIE@pPacketContext?9?$DOdwCompletedSize?5@
DSOUND_RD	SEGMENT
??_C@_0CP@JGEINGIE@pPacketContext?9?$DOdwCompletedSize?5@ DB 'pPacketCont'
	DB	'ext->dwCompletedSize < dwPacketSize', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@BHFIBNEP@CMcpxStream?3?3MapPacket?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@BHFIBNEP@CMcpxStream?3?3MapPacket?$AA@ DB 'CMcpxStream::MapPack'
	DB	'et', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@HBDNLGDO@Working?5packet?5offset?5?$CFlu?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@HBDNLGDO@Working?5packet?5offset?5?$CFlu?$AA@ DB 'Working packe'
	DB	't offset %lu', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@LEMGLMLF@Mapping?5new?5packet?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@LEMGLMLF@Mapping?5new?5packet?$AA@ DB 'Mapping new packet', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@EKGEFKKB@?$CB?$CIdwSampleCount?5?$CG?5?$HO0xFFFF?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@EKGEFKKB@?$CB?$CIdwSampleCount?5?$CG?5?$HO0xFFFF?$CJ?$AA@ DB '!'
	DB	'(dwSampleCount & ~0xFFFF)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FJ@JHNNOMDP@Unable?5to?5map?5the?5next?5packet?5be@
DSOUND_RD	SEGMENT
??_C@_0FJ@JHNNOMDP@Unable?5to?5map?5the?5next?5packet?5be@ DB 'Unable to '
	DB	'map the next packet because it doesn''t contain a full block '
	DB	'of contiguous data', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'3 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?MapPacket@CMcpxStream@DirectSound@@IAEKKPAUMCPX_PACKET_CONTEXT@@@Z
DSOUND	SEGMENT
tv158 = -64
_this$ = -60
_dwLengthAndControl$ = -56
_dwIncrement$ = -52
_dwPacketSize$ = -48
_dwContiguousLength$ = -44
_dwIndex$ = -40
_dwMaxPrdSize$ = -36
_pbPacketData$ = -32
_dwAddress$ = -28
_dwBasePage$ = -24
_dwBytesMapped$ = -20
_pSsl$ = -16
_dwSampleCount$ = -12
_i$ = -8
_dwBase$ = -4
_dwSslIndex$ = 8
_pPacketContext$ = 12
?MapPacket@CMcpxStream@DirectSound@@IAEKKPAUMCPX_PACKET_CONTEXT@@@Z PROC NEAR ; DirectSound::CMcpxStream::MapPacket, COMDAT
; _this$ = ecx

; 1222 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 1223 :     DWORD                   dwBytesMapped       = 0;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwBytesMapped$[ebp], 0

; 1224 :     LPBYTE                  pbPacketData;
; 1225 :     DWORD                   dwPacketSize;
; 1226 :     PMCPX_SSL_DESC          pSsl;
; 1227 :     DWORD                   dwMaxPrdSize;
; 1228 :     DWORD                   dwContiguousLength;
; 1229 :     DWORD                   dwSampleCount;
; 1230 :     DWORD                   dwAddress;
; 1231 :     DWORD                   dwBase;
; 1232 :     DWORD                   dwBasePage;
; 1233 :     DWORD                   dwIndex;
; 1234 :     DWORD                   dwLengthAndControl;
; 1235 :     DWORD                   dwIncrement;
; 1236 :     DWORD                   i;
; 1237 :     
; 1238 :     DPF_ENTER();
; 1239 : 
; 1240 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00010	68 d8 04 00 00	 push	 1240			; 000004d8H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0001f	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00024	0f b6 c0	 movzx	 eax, al
  00027	33 c9		 xor	 ecx, ecx
  00029	83 f8 02	 cmp	 eax, 2
  0002c	0f 95 c1	 setne	 cl
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 1241 :     ASSERT(dwSslIndex < NUMELMS(m_aSslDesc));

  00038	68 d9 04 00 00	 push	 1241			; 000004d9H
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CPGNAGKM@dwSslIndex?5?$DM?5NUMELMS?$CIm_aSslDesc?$CJ@
  00047	83 7d 08 02	 cmp	 DWORD PTR _dwSslIndex$[ebp], 2
  0004b	1b d2		 sbb	 edx, edx
  0004d	42		 inc	 edx
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00054	83 c4 10	 add	 esp, 16			; 00000010H

; 1242 : 
; 1243 :     pSsl = &m_aSslDesc[dwSslIndex];

  00057	8b 45 08	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  0005a	c1 e0 04	 shl	 eax, 4
  0005d	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	8d 94 01 98 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+152]
  00067	89 55 f0	 mov	 DWORD PTR _pSsl$[ebp], edx

; 1244 : 
; 1245 :     //
; 1246 :     // Save a local pointer to the packet data.  If we've already mapped part
; 1247 :     // of this packet into another SSL, the dwCompletedSize member will be 
; 1248 :     // non-zero.
; 1249 :     //
; 1250 :     
; 1251 :     pbPacketData = (LPBYTE)pPacketContext->xmpPacket.pvBuffer;

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  0006d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00070	89 4d e0	 mov	 DWORD PTR _pbPacketData$[ebp], ecx

; 1252 :     dwPacketSize = pPacketContext->xmpPacket.dwMaxSize;

  00073	8b 55 0c	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  00076	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00079	89 45 d0	 mov	 DWORD PTR _dwPacketSize$[ebp], eax

; 1253 : 
; 1254 :     if(pPacketContext->dwCompletedSize)

  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  0007f	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00083	74 72		 je	 SHORT $L35848

; 1255 :     {
; 1256 :         ASSERT(pPacketContext->dwCompletedSize < dwPacketSize);

  00085	68 e8 04 00 00	 push	 1256			; 000004e8H
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@JGEINGIE@pPacketContext?9?$DOdwCompletedSize?5@
  00094	8b 55 0c	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  00097	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0009a	3b 45 d0	 cmp	 eax, DWORD PTR _dwPacketSize$[ebp]
  0009d	1b c9		 sbb	 ecx, ecx
  0009f	41		 inc	 ecx
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a6	83 c4 10	 add	 esp, 16			; 00000010H

; 1257 : 
; 1258 :         pbPacketData += pPacketContext->dwCompletedSize;

  000a9	8b 55 0c	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  000ac	8b 45 e0	 mov	 eax, DWORD PTR _pbPacketData$[ebp]
  000af	03 42 20	 add	 eax, DWORD PTR [edx+32]
  000b2	89 45 e0	 mov	 DWORD PTR _pbPacketData$[ebp], eax

; 1259 :         dwPacketSize -= pPacketContext->dwCompletedSize;

  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  000b8	8b 55 d0	 mov	 edx, DWORD PTR _dwPacketSize$[ebp]
  000bb	2b 51 20	 sub	 edx, DWORD PTR [ecx+32]
  000be	89 55 d0	 mov	 DWORD PTR _dwPacketSize$[ebp], edx

; 1260 : 
; 1261 :         DPF_BLAB("Working packet offset %lu", pPacketContext->dwCompletedSize);

  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@BHFIBNEP@CMcpxStream?3?3MapPacket?$AA@
  000cb	68 ed 04 00 00	 push	 1261			; 000004edH
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000d5	6a 05		 push	 5
  000d7	6a 09		 push	 9
  000d9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000de	83 c4 18	 add	 esp, 24			; 00000018H
  000e1	8b 45 0c	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  000e4	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000e7	51		 push	 ecx
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@HBDNLGDO@Working?5packet?5offset?5?$CFlu?$AA@
  000ed	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f2	83 c4 08	 add	 esp, 8

; 1262 :     }
; 1263 :     else

  000f5	eb 2d		 jmp	 SHORT $L35852
$L35848:

; 1264 :     {
; 1265 :         DPF_BLAB("Mapping new packet");

  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@BHFIBNEP@CMcpxStream?3?3MapPacket?$AA@
  00101	68 f1 04 00 00	 push	 1265			; 000004f1H
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0010b	6a 05		 push	 5
  0010d	6a 09		 push	 9
  0010f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00114	83 c4 18	 add	 esp, 24			; 00000018H
  00117	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@LEMGLMLF@Mapping?5new?5packet?$AA@
  0011c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00121	83 c4 04	 add	 esp, 4
$L35852:

; 1266 :     }
; 1267 : 
; 1268 :     //
; 1269 :     // PRDs can only contain 16-bit addresses
; 1270 :     //
; 1271 : 
; 1272 :     dwMaxPrdSize = SamplesToBytes(0xFFFF);

  00124	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00129	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	e8 00 00 00 00	 call	 ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
  00131	89 45 dc	 mov	 DWORD PTR _dwMaxPrdSize$[ebp], eax
$L35855:

; 1273 : 
; 1274 :     //
; 1275 :     // Map as much of the packet as we can into the SSL
; 1276 :     //
; 1277 : 
; 1278 :     while((dwBytesMapped < dwPacketSize) && (pSsl->dwPrdCount < MCPX_HW_MAX_PRD_ENTRIES_PER_SSL))

  00134	8b 55 ec	 mov	 edx, DWORD PTR _dwBytesMapped$[ebp]
  00137	3b 55 d0	 cmp	 edx, DWORD PTR _dwPacketSize$[ebp]
  0013a	0f 83 29 02 00
	00		 jae	 $L35856
  00140	8b 45 f0	 mov	 eax, DWORD PTR _pSsl$[ebp]
  00143	83 78 08 10	 cmp	 DWORD PTR [eax+8], 16	; 00000010H
  00147	0f 83 1c 02 00
	00		 jae	 $L35856

; 1279 :     {
; 1280 :         //
; 1281 :         // Get physical memory properties of the packet data
; 1282 :         //
; 1283 :         
; 1284 :         dwAddress = m_pMcpxApu->GetPhysicalMemoryProperties(pbPacketData + dwBytesMapped, min(dwPacketSize - dwBytesMapped, dwMaxPrdSize), NULL, &dwContiguousLength);

  0014d	8b 4d d0	 mov	 ecx, DWORD PTR _dwPacketSize$[ebp]
  00150	2b 4d ec	 sub	 ecx, DWORD PTR _dwBytesMapped$[ebp]
  00153	3b 4d dc	 cmp	 ecx, DWORD PTR _dwMaxPrdSize$[ebp]
  00156	73 0b		 jae	 SHORT $L36561
  00158	8b 55 d0	 mov	 edx, DWORD PTR _dwPacketSize$[ebp]
  0015b	2b 55 ec	 sub	 edx, DWORD PTR _dwBytesMapped$[ebp]
  0015e	89 55 c0	 mov	 DWORD PTR tv158[ebp], edx
  00161	eb 06		 jmp	 SHORT $L36562
$L36561:
  00163	8b 45 dc	 mov	 eax, DWORD PTR _dwMaxPrdSize$[ebp]
  00166	89 45 c0	 mov	 DWORD PTR tv158[ebp], eax
$L36562:
  00169	8d 4d d4	 lea	 ecx, DWORD PTR _dwContiguousLength$[ebp]
  0016c	51		 push	 ecx
  0016d	6a 00		 push	 0
  0016f	8b 55 c0	 mov	 edx, DWORD PTR tv158[ebp]
  00172	52		 push	 edx
  00173	8b 45 e0	 mov	 eax, DWORD PTR _pbPacketData$[ebp]
  00176	03 45 ec	 add	 eax, DWORD PTR _dwBytesMapped$[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?GetPhysicalMemoryProperties@CMcpxCore@DirectSound@@SGKPAXKPAK1@Z ; DirectSound::CMcpxCore::GetPhysicalMemoryProperties
  0017f	89 45 e4	 mov	 DWORD PTR _dwAddress$[ebp], eax

; 1285 : 
; 1286 :         //
; 1287 :         // Convert packet length to samples
; 1288 :         //
; 1289 : 
; 1290 :         dwSampleCount = BytesToSamples(dwContiguousLength);

  00182	8b 4d d4	 mov	 ecx, DWORD PTR _dwContiguousLength$[ebp]
  00185	51		 push	 ecx
  00186	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	e8 00 00 00 00	 call	 ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::BytesToSamples
  0018e	89 45 f4	 mov	 DWORD PTR _dwSampleCount$[ebp], eax

; 1291 :         ASSERT(!(dwSampleCount & ~0xFFFF));

  00191	68 0b 05 00 00	 push	 1291			; 0000050bH
  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@EKGEFKKB@?$CB?$CIdwSampleCount?5?$CG?5?$HO0xFFFF?$CJ?$AA@
  001a0	8b 55 f4	 mov	 edx, DWORD PTR _dwSampleCount$[ebp]
  001a3	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  001a9	f7 da		 neg	 edx
  001ab	1b d2		 sbb	 edx, edx
  001ad	f7 da		 neg	 edx
  001af	52		 push	 edx
  001b0	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001b5	83 c4 10	 add	 esp, 16			; 00000010H

; 1292 : 
; 1293 :         //
; 1294 :         // ... and back to bytes
; 1295 :         //
; 1296 : 
; 1297 :         dwContiguousLength = SamplesToBytes(dwSampleCount);

  001b8	8b 45 f4	 mov	 eax, DWORD PTR _dwSampleCount$[ebp]
  001bb	50		 push	 eax
  001bc	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	e8 00 00 00 00	 call	 ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ; DirectSound::CMcpxVoiceClient::SamplesToBytes
  001c4	89 45 d4	 mov	 DWORD PTR _dwContiguousLength$[ebp], eax

; 1298 : 
; 1299 :         //
; 1300 :         // If there's not at least one full block to write, we can't do
; 1301 :         // any more.
; 1302 :         //
; 1303 : 
; 1304 :         if(!dwSampleCount)

  001c7	83 7d f4 00	 cmp	 DWORD PTR _dwSampleCount$[ebp], 0
  001cb	75 32		 jne	 SHORT $L35858

; 1305 :         {
; 1306 :             DPF_ERROR("Unable to map the next packet because it doesn't contain a full block of contiguous data");

  001cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@BHFIBNEP@CMcpxStream?3?3MapPacket?$AA@
  001d7	68 1a 05 00 00	 push	 1306			; 0000051aH
  001dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  001e1	6a 01		 push	 1
  001e3	6a 09		 push	 9
  001e5	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001ea	83 c4 18	 add	 esp, 24			; 00000018H
  001ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FJ@JHNNOMDP@Unable?5to?5map?5the?5next?5packet?5be@
  001f2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001f7	83 c4 04	 add	 esp, 4

; 1307 :             break;

  001fa	e9 6a 01 00 00	 jmp	 $L35856
$L35858:

; 1308 :         }
; 1309 : 
; 1310 :         //
; 1311 :         // If we ever support multiple mono voices (i.e. an n-channel voice uses
; 1312 :         // n mono hardware voices instead of n/2 stereo), the increment value 
; 1313 :         // should be halved.
; 1314 :         //
; 1315 : 
; 1316 :         dwIncrement = m_pSettings->m_fmt.wBitsPerSample * 2 / 8;

  001ff	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00202	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00208	0f b6 42 0f	 movzx	 eax, BYTE PTR [edx+15]
  0020c	d1 e0		 shl	 eax, 1
  0020e	99		 cdq
  0020f	83 e2 07	 and	 edx, 7
  00212	03 c2		 add	 eax, edx
  00214	c1 f8 03	 sar	 eax, 3
  00217	89 45 cc	 mov	 DWORD PTR _dwIncrement$[ebp], eax

; 1317 : 
; 1318 :         //
; 1319 :         // Fill in PRD values
; 1320 :         //
; 1321 : 
; 1322 :         MCPX_CHECK_VOICE_FIFO(3 * m_bVoiceCount);

  0021a	68 2a 05 00 00	 push	 1322			; 0000052aH
  0021f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00224	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00229	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0022e	0f b6 c0	 movzx	 eax, al
  00231	33 c9		 xor	 ecx, ecx
  00233	83 f8 02	 cmp	 eax, 2
  00236	0f 95 c1	 setne	 cl
  00239	51		 push	 ecx
  0023a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0023f	83 c4 10	 add	 esp, 16			; 00000010H
  00242	68 2a 05 00 00	 push	 1322			; 0000052aH
  00247	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0024c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EMIKKNJD@?$CI3?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  00251	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  00254	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00258	6b c0 03	 imul	 eax, 3
  0025b	33 c9		 xor	 ecx, ecx
  0025d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00260	0f 9f c1	 setg	 cl
  00263	51		 push	 ecx
  00264	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00269	83 c4 10	 add	 esp, 16			; 00000010H
$L35862:
  0026c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00271	8b 82 00 00 82
	fe		 mov	 eax, DWORD PTR [edx-25034752]
  00277	c1 e8 02	 shr	 eax, 2
  0027a	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0027d	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  00281	6b d2 03	 imul	 edx, 3
  00284	3b c2		 cmp	 eax, edx
  00286	73 02		 jae	 SHORT $L35863
  00288	eb e2		 jmp	 SHORT $L35862
$L35863:

; 1323 :         
; 1324 :         for(i = 0; i < m_bVoiceCount; i++)

  0028a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00291	eb 09		 jmp	 SHORT $L35866
$L35867:
  00293	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00296	83 c0 01	 add	 eax, 1
  00299	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$L35866:
  0029c	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  0029f	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  002a3	39 55 f8	 cmp	 DWORD PTR _i$[ebp], edx
  002a6	0f 83 91 00 00
	00		 jae	 $L35868

; 1325 :         {
; 1326 :             dwBase = GetSslBase(i, dwSslIndex) + pSsl->dwPrdCount;

  002ac	8b 45 08	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  002af	50		 push	 eax
  002b0	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  002b3	51		 push	 ecx
  002b4	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  002b7	e8 00 00 00 00	 call	 ?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z ; DirectSound::CMcpxStream::GetSslBase
  002bc	8b 55 f0	 mov	 edx, DWORD PTR _pSsl$[ebp]
  002bf	03 42 08	 add	 eax, DWORD PTR [edx+8]
  002c2	89 45 fc	 mov	 DWORD PTR _dwBase$[ebp], eax

; 1327 :             dwBasePage = dwBase / NUMELMS(((LPMCPXVPREGSET)NULL)->SetSSLSegment);

  002c5	8b 45 fc	 mov	 eax, DWORD PTR _dwBase$[ebp]
  002c8	c1 e8 06	 shr	 eax, 6
  002cb	89 45 e8	 mov	 DWORD PTR _dwBasePage$[ebp], eax

; 1328 :             dwIndex = dwBase % NUMELMS(((LPMCPXVPREGSET)NULL)->SetSSLSegment);

  002ce	8b 45 fc	 mov	 eax, DWORD PTR _dwBase$[ebp]
  002d1	33 d2		 xor	 edx, edx
  002d3	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002d8	f7 f1		 div	 ecx
  002da	89 55 d8	 mov	 DWORD PTR _dwIndex$[ebp], edx

; 1329 :             dwLengthAndControl = (m_dwPrdControl & 0xFFFF0000) | dwSampleCount;

  002dd	8b 55 c4	 mov	 edx, DWORD PTR _this$[ebp]
  002e0	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  002e6	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  002eb	0b 45 f4	 or	 eax, DWORD PTR _dwSampleCount$[ebp]
  002ee	89 45 c8	 mov	 DWORD PTR _dwLengthAndControl$[ebp], eax

; 1330 : 
; 1331 :             MCPX_VOICE_WRITE(SetCurrentSSL, MCPX_MAKE_REG_VALUE(dwBasePage, NV1BA0_PIO_SET_CURRENT_SSL_BASE_PAGE));

  002f1	8b 4d e8	 mov	 ecx, DWORD PTR _dwBasePage$[ebp]
  002f4	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002fa	c1 e1 06	 shl	 ecx, 6
  002fd	ba 90 01 00 00	 mov	 edx, 400		; 00000190H
  00302	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 1332 :             MCPX_VOICE_WRITE(SetSSLSegment[dwIndex].Offset, dwAddress);

  00308	b8 00 06 00 00	 mov	 eax, 1536		; 00000600H
  0030d	05 00 00 82 fe	 add	 eax, -25034752		; fe820000H
  00312	8b 4d d8	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  00315	8b 55 e4	 mov	 edx, DWORD PTR _dwAddress$[ebp]
  00318	89 14 c8	 mov	 DWORD PTR [eax+ecx*8], edx

; 1333 :             MCPX_VOICE_WRITE(SetSSLSegment[dwIndex].Length, dwLengthAndControl);

  0031b	b8 00 06 00 00	 mov	 eax, 1536		; 00000600H
  00320	05 00 00 82 fe	 add	 eax, -25034752		; fe820000H
  00325	8b 4d d8	 mov	 ecx, DWORD PTR _dwIndex$[ebp]
  00328	8b 55 c8	 mov	 edx, DWORD PTR _dwLengthAndControl$[ebp]
  0032b	89 54 c8 04	 mov	 DWORD PTR [eax+ecx*8+4], edx

; 1334 : 
; 1335 :             dwAddress += dwIncrement;

  0032f	8b 45 e4	 mov	 eax, DWORD PTR _dwAddress$[ebp]
  00332	03 45 cc	 add	 eax, DWORD PTR _dwIncrement$[ebp]
  00335	89 45 e4	 mov	 DWORD PTR _dwAddress$[ebp], eax

; 1336 :         }

  00338	e9 56 ff ff ff	 jmp	 $L35867
$L35868:

; 1337 : 
; 1338 :         //
; 1339 :         // Increment the count of bytes we've mapped
; 1340 :         //
; 1341 :         
; 1342 :         dwBytesMapped += dwContiguousLength;

  0033d	8b 4d ec	 mov	 ecx, DWORD PTR _dwBytesMapped$[ebp]
  00340	03 4d d4	 add	 ecx, DWORD PTR _dwContiguousLength$[ebp]
  00343	89 4d ec	 mov	 DWORD PTR _dwBytesMapped$[ebp], ecx

; 1343 : 
; 1344 :         pSsl->dwBytesMapped += dwContiguousLength;

  00346	8b 55 f0	 mov	 edx, DWORD PTR _pSsl$[ebp]
  00349	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0034c	03 45 d4	 add	 eax, DWORD PTR _dwContiguousLength$[ebp]
  0034f	8b 4d f0	 mov	 ecx, DWORD PTR _pSsl$[ebp]
  00352	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1345 : 
; 1346 :         //
; 1347 :         // Increment the count of PRDs used in this SSL
; 1348 :         //
; 1349 :         
; 1350 :         pSsl->dwPrdCount++;

  00355	8b 55 f0	 mov	 edx, DWORD PTR _pSsl$[ebp]
  00358	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0035b	83 c0 01	 add	 eax, 1
  0035e	8b 4d f0	 mov	 ecx, DWORD PTR _pSsl$[ebp]
  00361	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1351 :     }

  00364	e9 cb fd ff ff	 jmp	 $L35855
$L35856:

; 1352 : 
; 1353 :     //
; 1354 :     // If we managed to map the whole packet into the SSL, remove it from
; 1355 :     // the pending list and add it to the SSL's list.  If not, leave it
; 1356 :     // in the pending list, but set the completed size so we'll know where
; 1357 :     // to start working next time.
; 1358 :     //
; 1359 : 
; 1360 :     if(dwBytesMapped >= dwPacketSize)

  00369	8b 55 ec	 mov	 edx, DWORD PTR _dwBytesMapped$[ebp]
  0036c	3b 55 d0	 cmp	 edx, DWORD PTR _dwPacketSize$[ebp]
  0036f	72 0f		 jb	 SHORT $L35880

; 1361 :     {
; 1362 :         MoveEntryTailList(&pSsl->lstPackets, &pPacketContext->leListEntry);

  00371	8b 45 0c	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  00374	50		 push	 eax
  00375	8b 4d f0	 mov	 ecx, DWORD PTR _pSsl$[ebp]
  00378	51		 push	 ecx
  00379	e8 00 00 00 00	 call	 ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveEntryTailList

; 1363 :     }
; 1364 :     else

  0037e	eb 0f		 jmp	 SHORT $L35881
$L35880:

; 1365 :     {
; 1366 :         pPacketContext->dwCompletedSize += dwBytesMapped;

  00380	8b 55 0c	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  00383	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00386	03 45 ec	 add	 eax, DWORD PTR _dwBytesMapped$[ebp]
  00389	8b 4d 0c	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  0038c	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$L35881:

; 1367 :     }
; 1368 : 
; 1369 :     DPF_LEAVE(dwBytesMapped);
; 1370 : 
; 1371 :     return dwBytesMapped;

  0038f	8b 45 ec	 mov	 eax, DWORD PTR _dwBytesMapped$[ebp]

; 1372 : }

  00392	8b e5		 mov	 esp, ebp
  00394	5d		 pop	 ebp
  00395	c2 08 00	 ret	 8
?MapPacket@CMcpxStream@DirectSound@@IAEKKPAUMCPX_PACKET_CONTEXT@@@Z ENDP ; DirectSound::CMcpxStream::MapPacket
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z PROC NEAR ; MoveEntryTailList, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 ff 00 00 00	 push	 255			; 000000ffH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 256  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00018	68 00 01 00 00	 push	 256			; 00000100H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 00		 push	 0
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 257  : 
; 258  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 259  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 260  : 
; 261  :     Entry->Flink = ListHead;

  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0004e	89 11		 mov	 DWORD PTR [ecx], edx

; 262  :     Entry->Blink = ListHead->Blink;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00056	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00059	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 263  : 
; 264  :     Entry->Flink->Blink = Entry;

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00064	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 265  :     Entry->Blink->Flink = Entry;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00070	89 11		 mov	 DWORD PTR [ecx], edx

; 266  : 
; 267  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00072	68 0b 01 00 00	 push	 267			; 0000010bH
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0007c	6a 01		 push	 1
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 268  : 
; 269  :     return Entry;

  00087	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]

; 270  : }

  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ENDP	; MoveEntryTailList
DSOUND	ENDS
PUBLIC	??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@ ; `string'
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpvoice.h
DSOUND_RD	SEGMENT
??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\mcpvoice.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT
??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@ DB 'WAVE'
	DB	'_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwBytes$ = 8
?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::BytesToSamples, COMDAT
; _this$ = ecx

; 242  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 243  :         if(WAVE_FORMAT_XBOX_ADPCM == m_pSettings->m_fmt.wFormatTag)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0000d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00011	83 fa 69	 cmp	 edx, 105		; 00000069H
  00014	75 13		 jne	 SHORT $L34961

; 244  :         {
; 245  :             return (dwBytes / m_pSettings->m_fmt.nBlockAlign) << 6;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0001c	8b 45 08	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	f7 71 14	 div	 DWORD PTR [ecx+20]
  00024	c1 e0 06	 shl	 eax, 6
  00027	eb 39		 jmp	 SHORT $L34960
$L34961:

; 246  :         }
; 247  :         else
; 248  :         {
; 249  :             ASSERT(WAVE_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag);

  00029	68 f9 00 00 00	 push	 249			; 000000f9H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  0003e	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00042	83 e9 01	 sub	 ecx, 1
  00045	f7 d9		 neg	 ecx
  00047	1b c9		 sbb	 ecx, ecx
  00049	f7 d9		 neg	 ecx
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 250  :         
; 251  :             return dwBytes / m_pSettings->m_fmt.nBlockAlign;

  00054	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 4a 78	 mov	 ecx, DWORD PTR [edx+120]
  0005a	8b 45 08	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  0005d	33 d2		 xor	 edx, edx
  0005f	f7 71 14	 div	 DWORD PTR [ecx+20]
$L34960:

; 252  :         }
; 253  :     }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?BytesToSamples@CMcpxVoiceClient@DirectSound@@IAEKK@Z ENDP ; DirectSound::CMcpxVoiceClient::BytesToSamples
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwSamples$ = 8
?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z PROC NEAR ; DirectSound::CMcpxVoiceClient::SamplesToBytes, COMDAT
; _this$ = ecx

; 256  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 257  : 	    if(WAVE_FORMAT_XBOX_ADPCM == m_pSettings->m_fmt.wFormatTag)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0000d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00011	83 fa 69	 cmp	 edx, 105		; 00000069H
  00014	75 12		 jne	 SHORT $L34969

; 258  :         {
; 259  :             return (dwSamples >> 6) * m_pSettings->m_fmt.nBlockAlign;

  00016	8b 45 08	 mov	 eax, DWORD PTR _dwSamples$[ebp]
  00019	c1 e8 06	 shr	 eax, 6
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00022	0f af 42 14	 imul	 eax, DWORD PTR [edx+20]
  00026	eb 38		 jmp	 SHORT $L34968
$L34969:

; 260  :         }
; 261  :         else
; 262  :         {
; 263  :             ASSERT(WAVE_FORMAT_PCM == m_pSettings->m_fmt.wFormatTag);

  00028	68 07 01 00 00	 push	 263			; 00000107H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0003d	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  00041	83 ea 01	 sub	 edx, 1
  00044	f7 da		 neg	 edx
  00046	1b d2		 sbb	 edx, edx
  00048	f7 da		 neg	 edx
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 264  :         
; 265  :             return dwSamples * m_pSettings->m_fmt.nBlockAlign;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00059	8b 45 08	 mov	 eax, DWORD PTR _dwSamples$[ebp]
  0005c	0f af 41 14	 imul	 eax, DWORD PTR [ecx+20]
$L34968:

; 266  :         }
; 267  :     }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
?SamplesToBytes@CMcpxVoiceClient@DirectSound@@IAEKK@Z ENDP ; DirectSound::CMcpxVoiceClient::SamplesToBytes
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.h
DSOUND	ENDS
;	COMDAT ?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwVoiceIndex$ = 8
_dwSslIndex$ = 12
?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z PROC NEAR	; DirectSound::CMcpxStream::GetSslBase, COMDAT
; _this$ = ecx

; 147  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 148  :         return ((DWORD)m_ahVoices[dwVoiceIndex] * MCPX_HW_MAX_PRD_ENTRIES_PER_VOICE) + (dwSslIndex * MCPX_HW_MAX_PRD_ENTRIES_PER_SSL);

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwVoiceIndex$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	0f b7 44 41 0c	 movzx	 eax, WORD PTR [ecx+eax*2+12]
  00012	c1 e0 05	 shl	 eax, 5
  00015	8b 55 0c	 mov	 edx, DWORD PTR _dwSslIndex$[ebp]
  00018	c1 e2 04	 shl	 edx, 4
  0001b	03 c2		 add	 eax, edx

; 149  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z ENDP	; DirectSound::CMcpxStream::GetSslBase
DSOUND	ENDS
PUBLIC	??_C@_0BH@HOOFEICM@CMcpxStream?3?3CommitSsl?$AA@ ; `string'
PUBLIC	??_C@_0BA@HDEBDDHM@Commiting?5SSL?$CFc?$AA@	; `string'
PUBLIC	??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ ; `string'
PUBLIC	??_C@_0CJ@GDKAOANB@m_dwMappedSslCount?5?$DM?5NUMELMS?$CIm_a@ ; `string'
PUBLIC	?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z	; DirectSound::CMcpxNotifier::SetStatus
EXTRN	?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::ActivateVoice
;	COMDAT ??_C@_0BH@HOOFEICM@CMcpxStream?3?3CommitSsl?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND_RD	SEGMENT
??_C@_0BH@HOOFEICM@CMcpxStream?3?3CommitSsl?$AA@ DB 'CMcpxStream::CommitS'
	DB	'sl', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@HDEBDDHM@Commiting?5SSL?$CFc?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@HDEBDDHM@Commiting?5SSL?$CFc?$AA@ DB 'Commiting SSL%c', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
DSOUND_RD	SEGMENT
??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@ DB '('
	DB	'2 * m_bVoiceCount) <= PIO_METHOD_QUEUE_CLEAR', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@GDKAOANB@m_dwMappedSslCount?5?$DM?5NUMELMS?$CIm_a@
DSOUND_RD	SEGMENT
??_C@_0CJ@GDKAOANB@m_dwMappedSslCount?5?$DM?5NUMELMS?$CIm_a@ DB 'm_dwMapp'
	DB	'edSslCount < NUMELMS(m_aSslDesc)', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CommitSsl@CMcpxStream@DirectSound@@IAEXK@Z
DSOUND	SEGMENT
_this$ = -16
_dwSslBaseAndCount$ = -12
_dwSslBase$ = -8
_i$ = -4
_dwSslIndex$ = 8
?CommitSsl@CMcpxStream@DirectSound@@IAEXK@Z PROC NEAR	; DirectSound::CMcpxStream::CommitSsl, COMDAT
; _this$ = ecx

; 1398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1399 :     DWORD                   dwSslBase;
; 1400 :     DWORD                   dwSslBaseAndCount;
; 1401 :     DWORD                   i;
; 1402 :     
; 1403 :     DPF_ENTER();
; 1404 : 
; 1405 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 7d 05 00 00	 push	 1405			; 0000057dH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1406 :     ASSERT(dwSslIndex < NUMELMS(m_aSslDesc));

  00031	68 7e 05 00 00	 push	 1406			; 0000057eH
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CPGNAGKM@dwSslIndex?5?$DM?5NUMELMS?$CIm_aSslDesc?$CJ@
  00040	83 7d 08 02	 cmp	 DWORD PTR _dwSslIndex$[ebp], 2
  00044	1b d2		 sbb	 edx, edx
  00046	42		 inc	 edx
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 1407 : 
; 1408 :     DPF_BLAB("Commiting SSL%c", 'A' + dwSslIndex);

  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@HOOFEICM@CMcpxStream?3?3CommitSsl?$AA@
  0005a	68 80 05 00 00	 push	 1408			; 00000580H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00064	6a 05		 push	 5
  00066	6a 09		 push	 9
  00068	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0006d	83 c4 18	 add	 esp, 24			; 00000018H
  00070	8b 45 08	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  00073	83 c0 41	 add	 eax, 65			; 00000041H
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@HDEBDDHM@Commiting?5SSL?$CFc?$AA@
  0007c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00081	83 c4 08	 add	 esp, 8

; 1409 : 
; 1410 :     //
; 1411 :     // Assign the SSL to the voice
; 1412 :     //
; 1413 : 
; 1414 :     MCPX_CHECK_VOICE_FIFO(2 * m_bVoiceCount);

  00084	68 86 05 00 00	 push	 1414			; 00000586H
  00089	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00093	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00098	0f b6 c8	 movzx	 ecx, al
  0009b	33 d2		 xor	 edx, edx
  0009d	83 f9 02	 cmp	 ecx, 2
  000a0	0f 95 c2	 setne	 dl
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	68 86 05 00 00	 push	 1414			; 00000586H
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000be	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  000c2	d1 e1		 shl	 ecx, 1
  000c4	33 d2		 xor	 edx, edx
  000c6	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000c9	0f 9f c2	 setg	 dl
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d2	83 c4 10	 add	 esp, 16			; 00000010H
$L35893:
  000d5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000da	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  000e0	c1 e9 02	 shr	 ecx, 2
  000e3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e6	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  000ea	d1 e0		 shl	 eax, 1
  000ec	3b c8		 cmp	 ecx, eax
  000ee	73 02		 jae	 SHORT $L35894
  000f0	eb e3		 jmp	 SHORT $L35893
$L35894:

; 1415 :     
; 1416 :     for(i = 0; i < m_bVoiceCount; i++)

  000f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000f9	eb 09		 jmp	 SHORT $L35897
$L35898:
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000fe	83 c1 01	 add	 ecx, 1
  00101	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35897:
  00104	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00107	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  0010b	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  0010e	73 7d		 jae	 SHORT $L35899

; 1417 :     {
; 1418 :         dwSslBase = GetSslBase(i, dwSslIndex);

  00110	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00113	51		 push	 ecx
  00114	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00117	52		 push	 edx
  00118	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	e8 00 00 00 00	 call	 ?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z ; DirectSound::CMcpxStream::GetSslBase
  00120	89 45 f8	 mov	 DWORD PTR _dwSslBase$[ebp], eax

; 1419 :         
; 1420 :         dwSslBaseAndCount = MCPX_MAKE_REG_VALUE(dwSslBase, NV1BA0_PIO_SET_VOICE_SSL_A_BASE);

  00123	8b 45 f8	 mov	 eax, DWORD PTR _dwSslBase$[ebp]
  00126	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0012b	c1 e0 08	 shl	 eax, 8
  0012e	89 45 f4	 mov	 DWORD PTR _dwSslBaseAndCount$[ebp], eax

; 1421 :         dwSslBaseAndCount |= MCPX_MAKE_REG_VALUE(m_aSslDesc[dwSslIndex].dwPrdCount, NV1BA0_PIO_SET_VOICE_SSL_A_COUNT);

  00131	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00134	c1 e1 04	 shl	 ecx, 4
  00137	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0013a	8b 84 0a a0 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+160]
  00141	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00146	8b 4d f4	 mov	 ecx, DWORD PTR _dwSslBaseAndCount$[ebp]
  00149	0b c8		 or	 ecx, eax
  0014b	89 4d f4	 mov	 DWORD PTR _dwSslBaseAndCount$[ebp], ecx

; 1422 :         
; 1423 :         MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  0014e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00151	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00154	0f b7 4c 50 0c	 movzx	 ecx, WORD PTR [eax+edx*2+12]
  00159	ba f8 02 00 00	 mov	 edx, 760		; 000002f8H
  0015e	89 8a 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], ecx

; 1424 :         
; 1425 :         if(!dwSslIndex)

  00164	83 7d 08 00	 cmp	 DWORD PTR _dwSslIndex$[ebp], 0
  00168	75 10		 jne	 SHORT $L35904

; 1426 :         {
; 1427 :             MCPX_VOICE_WRITE(SetVoiceSSLA, dwSslBaseAndCount);

  0016a	b8 20 03 00 00	 mov	 eax, 800		; 00000320H
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR _dwSslBaseAndCount$[ebp]
  00172	89 88 00 00 82
	fe		 mov	 DWORD PTR [eax-25034752], ecx

; 1428 :         }
; 1429 :         else

  00178	eb 0e		 jmp	 SHORT $L35907
$L35904:

; 1430 :         {
; 1431 :             MCPX_VOICE_WRITE(SetVoiceSSLB, dwSslBaseAndCount);

  0017a	ba 5c 03 00 00	 mov	 edx, 860		; 0000035cH
  0017f	8b 45 f4	 mov	 eax, DWORD PTR _dwSslBaseAndCount$[ebp]
  00182	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax
$L35907:

; 1432 :         }
; 1433 :     }

  00188	e9 6e ff ff ff	 jmp	 $L35898
$L35899:

; 1434 : 
; 1435 :     //
; 1436 :     // Reset the notifier
; 1437 :     //
; 1438 : 
; 1439 :     m_Notifier.SetStatus(dwSslIndex, FALSE);

  0018d	6a 00		 push	 0
  0018f	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00192	51		 push	 ecx
  00193	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	83 c1 68	 add	 ecx, 104		; 00000068H
  00199	e8 00 00 00 00	 call	 ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z ; DirectSound::CMcpxNotifier::SetStatus

; 1440 : 
; 1441 :     //
; 1442 :     // Increment the count of mapped SSLs
; 1443 :     //
; 1444 : 
; 1445 :     ASSERT(m_dwMappedSslCount < NUMELMS(m_aSslDesc));

  0019e	68 a5 05 00 00	 push	 1445			; 000005a5H
  001a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  001a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@GDKAOANB@m_dwMappedSslCount?5?$DM?5NUMELMS?$CIm_a@
  001ad	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001b0	83 ba a4 01 00
	00 02		 cmp	 DWORD PTR [edx+420], 2
  001b7	1b c0		 sbb	 eax, eax
  001b9	40		 inc	 eax
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001c0	83 c4 10	 add	 esp, 16			; 00000010H

; 1446 : 
; 1447 :     if(!m_dwMappedSslCount++)

  001c3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	8b 91 a4 01 00
	00		 mov	 edx, DWORD PTR [ecx+420]
  001cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001cf	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  001d5	83 c1 01	 add	 ecx, 1
  001d8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001db	89 88 a4 01 00
	00		 mov	 DWORD PTR [eax+420], ecx
  001e1	85 d2		 test	 edx, edx
  001e3	75 0c		 jne	 SHORT $L35911

; 1448 :     {
; 1449 :         m_dwFirstMappedSslIndex = dwSslIndex;

  001e5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	8b 55 08	 mov	 edx, DWORD PTR _dwSslIndex$[ebp]
  001eb	89 91 a0 01 00
	00		 mov	 DWORD PTR [ecx+416], edx
$L35911:

; 1450 :     }
; 1451 : 
; 1452 :     //
; 1453 :     // If we're not providing high-accuracy packet completions, register for
; 1454 :     // deferred completion callbacks.
; 1455 :     //
; 1456 : 
; 1457 :     if(!(m_pSettings->m_dwFlags & DSSTREAMCAPS_ACCURATENOTIFY))

  001f1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f4	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  001fa	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001fd	81 e2 00 00 00
	40		 and	 edx, 1073741824		; 40000000H
  00203	85 d2		 test	 edx, edx
  00205	75 13		 jne	 SHORT $L35912

; 1458 :     {
; 1459 :         ScheduleDeferredCommand(MCPX_DEFERREDCMD_STREAM_COMPLETEPACKETS, 0, 0);

  00207	6a 00		 push	 0
  00209	6a 00		 push	 0
  0020b	6a 00		 push	 0
  0020d	6a 02		 push	 2
  0020f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00212	8b 10		 mov	 edx, DWORD PTR [eax]
  00214	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00217	ff 52 18	 call	 DWORD PTR [edx+24]
$L35912:

; 1460 :     }
; 1461 : 
; 1462 :     //
; 1463 :     // Activate the voice
; 1464 :     //
; 1465 : 
; 1466 :     ActivateVoice();

  0021a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0021d	e8 00 00 00 00	 call	 ?ActivateVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ActivateVoice

; 1467 : 
; 1468 :     //
; 1469 :     // If the voice is starved, unstarve it
; 1470 :     //
; 1471 : 
; 1472 :     PauseVoice(m_dwStatus & ~MCPX_VOICESTATUS_STARVED);

  00222	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00225	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00229	81 e1 ff fb ff
	ff		 and	 ecx, -1025		; fffffbffH
  0022f	51		 push	 ecx
  00230	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00233	e8 00 00 00 00	 call	 ?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z ; DirectSound::CMcpxVoiceClient::PauseVoice

; 1473 : 
; 1474 :     DPF_LEAVE_VOID();
; 1475 : }

  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c2 04 00	 ret	 4
?CommitSsl@CMcpxStream@DirectSound@@IAEXK@Z ENDP	; DirectSound::CMcpxStream::CommitSsl
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpxcore.h
DSOUND	ENDS
;	COMDAT ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z
DSOUND	SEGMENT
_this$ = -4
_dwNotifierIndex$ = 8
_fSignaled$ = 12
?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z PROC NEAR ; DirectSound::CMcpxNotifier::SetStatus, COMDAT
; _this$ = ecx

; 455  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  :         ASSERT(m_paNotifier);

  00007	68 c8 01 00 00	 push	 456			; 000001c8H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	0f 94 c1	 sete	 cl
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 457  :         ASSERT(dwNotifierIndex < m_dwNotifierCount);

  0002a	68 c9 01 00 00	 push	 457			; 000001c9H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  0003f	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00042	1b c9		 sbb	 ecx, ecx
  00044	41		 inc	 ecx
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : 
; 459  :         m_paNotifier[dwNotifierIndex].Status = fSignaled ? NV1BA0_NOTIFICATION_STATUS_DONE_SUCCESS : NV1BA0_NOTIFICATION_STATUS_IN_PROGRESS;

  0004e	8b 55 0c	 mov	 edx, DWORD PTR _fSignaled$[ebp]
  00051	f7 da		 neg	 edx
  00053	1b d2		 sbb	 edx, edx
  00055	83 e2 81	 and	 edx, -127		; ffffff81H
  00058	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0005e	8b 45 08	 mov	 eax, DWORD PTR _dwNotifierIndex$[ebp]
  00061	c1 e0 04	 shl	 eax, 4
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00069	88 54 01 0f	 mov	 BYTE PTR [ecx+eax+15], dl

; 460  :     }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z ENDP	; DirectSound::CMcpxNotifier::SetStatus
DSOUND	ENDS
PUBLIC	??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@ ; `string'
PUBLIC	??_C@_0CD@PBFGKABP@CMcpxStream?3?3ServiceVoiceInterru@ ; `string'
PUBLIC	??_C@_0BL@GNLINAPG@Stream?5completed?5naturally?$AA@ ; `string'
PUBLIC	??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@ ; `string'
PUBLIC	??_C@_0BG@OPHGPAHK@End?9of?9stream?5reached?$AA@ ; `string'
PUBLIC	??_C@_0BH@FALLNBNJ@The?5stream?5is?5starving?$AA@ ; `string'
;	COMDAT ??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND_RD	SEGMENT
??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@ DB 'MCPX_VOI'
	DB	'CELIST_INVALID == m_bVoiceList', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@PBFGKABP@CMcpxStream?3?3ServiceVoiceInterru@
DSOUND_RD	SEGMENT
??_C@_0CD@PBFGKABP@CMcpxStream?3?3ServiceVoiceInterru@ DB 'CMcpxStream::S'
	DB	'erviceVoiceInterrupt', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@GNLINAPG@Stream?5completed?5naturally?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@GNLINAPG@Stream?5completed?5naturally?$AA@ DB 'Stream completed'
	DB	' naturally', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@
DSOUND_RD	SEGMENT
??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@ DB 'm_bVoiceLis'
	DB	't < MCPX_VOICELIST_COUNT', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@OPHGPAHK@End?9of?9stream?5reached?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@OPHGPAHK@End?9of?9stream?5reached?$AA@ DB 'End-of-stream reache'
	DB	'd', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@FALLNBNJ@The?5stream?5is?5starving?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@FALLNBNJ@The?5stream?5is?5starving?$AA@ DB 'The stream is starv'
	DB	'ing', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ServiceVoiceInterrupt@CMcpxStream@DirectSound@@MAEHXZ
DSOUND	SEGMENT
_this$ = -20
_dwStatus$ = -12
?ServiceVoiceInterrupt@CMcpxStream@DirectSound@@MAEHXZ PROC NEAR ; DirectSound::CMcpxStream::ServiceVoiceInterrupt, COMDAT
; _this$ = ecx

; 1501 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1502 :     DWORD                   dwStatus;
; 1503 :     DWORD                   dwSslIndex;
; 1504 :     DWORD                   dwSslCount;
; 1505 :     DWORD                   i;
; 1506 : 
; 1507 :     DPF_ENTER();
; 1508 : 
; 1509 :     ASSERT(KeGetCurrentIrql() == DISPATCH_LEVEL);

  00009	68 e5 05 00 00	 push	 1509			; 000005e5H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	33 c9		 xor	 ecx, ecx
  00022	83 f8 02	 cmp	 eax, 2
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1510 :     ASSERT(m_dwStatus & MCPX_VOICESTATUS_ALLOCATED);

  00031	68 e6 05 00 00	 push	 1510			; 000005e6H
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FIKOPIML@m_dwStatus?5?$CG?5MCPX_VOICESTATUS_AL@
  00040	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00043	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00047	83 e0 01	 and	 eax, 1
  0004a	f7 d8		 neg	 eax
  0004c	1b c0		 sbb	 eax, eax
  0004e	40		 inc	 eax
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 1511 :     
; 1512 :     //
; 1513 :     // The first thing to check is whether the voice is still active or 
; 1514 :     // not.  If we reached the end of the release envelope, the voice will
; 1515 :     // automatically be removed from the voice list.  This should only
; 1516 :     // happen when NoteOff has been called, but may occur either because
; 1517 :     // the envelope ended or because the stream was starved after the 
; 1518 :     // NoteOff was received.  Because we remove the PERSIST bit from the
; 1519 :     // voice format when NoteOff is called, the hardware is free to idle
; 1520 :     // the voice whenever it wants to.  We have no way of knowing why the
; 1521 :     // voice idled, so we just don't worry about it.
; 1522 :     //
; 1523 : 
; 1524 :     if(m_Notifier.GetStatus(MCPX_NOTIFIER_VOICE_OFF))

  00058	6a 03		 push	 3
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	83 c1 68	 add	 ecx, 104		; 00000068H
  00060	e8 00 00 00 00	 call	 ?GetStatus@CMcpxNotifier@DirectSound@@QAEHK@Z ; DirectSound::CMcpxNotifier::GetStatus
  00065	85 c0		 test	 eax, eax
  00067	74 73		 je	 SHORT $L35921

; 1525 :     {
; 1526 :         ASSERT(MCPX_VOICELIST_INVALID == m_bVoiceList);

  00069	68 f6 05 00 00	 push	 1526			; 000005f6H
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@MEDANPGD@MCPX_VOICELIST_INVALID?5?$DN?$DN?5m_bVoi@
  00078	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	0f b6 51 65	 movzx	 edx, BYTE PTR [ecx+101]
  0007f	33 c0		 xor	 eax, eax
  00081	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00087	0f 95 c0	 setne	 al
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H

; 1527 :         
; 1528 :         DPF_INFO("Stream completed naturally");

  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@PBFGKABP@CMcpxStream?3?3ServiceVoiceInterru@
  0009d	68 f8 05 00 00	 push	 1528			; 000005f8H
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000a7	6a 04		 push	 4
  000a9	6a 09		 push	 9
  000ab	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000b0	83 c4 18	 add	 esp, 24			; 00000018H
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@GNLINAPG@Stream?5completed?5naturally?$AA@
  000b8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000bd	83 c4 04	 add	 esp, 4

; 1529 : 
; 1530 :         //
; 1531 :         // Reset the notifier
; 1532 :         //
; 1533 : 
; 1534 :         m_Notifier.SetStatus(MCPX_NOTIFIER_VOICE_OFF, FALSE);

  000c0	6a 00		 push	 0
  000c2	6a 03		 push	 3
  000c4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	83 c1 68	 add	 ecx, 104		; 00000068H
  000ca	e8 00 00 00 00	 call	 ?SetStatus@CMcpxNotifier@DirectSound@@QAEXKH@Z ; DirectSound::CMcpxNotifier::SetStatus

; 1535 : 
; 1536 :         //
; 1537 :         // Flush the stream
; 1538 :         //
; 1539 : 
; 1540 :         Flush();

  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	e8 00 00 00 00	 call	 ?Flush@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Flush

; 1541 :     }
; 1542 :     else if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) == MCPX_VOICESTATUS_ACTIVEMASK)

  000d7	e9 f6 00 00 00	 jmp	 $L35925
$L35921:
  000dc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  000e3	83 e2 03	 and	 edx, 3
  000e6	83 fa 03	 cmp	 edx, 3
  000e9	0f 85 e3 00 00
	00		 jne	 $L35925

; 1543 :     {
; 1544 :         ASSERT(m_bVoiceList < MCPX_VOICELIST_COUNT);

  000ef	68 08 06 00 00	 push	 1544			; 00000608H
  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@FDMGCEKB@m_bVoiceList?5?$DM?5MCPX_VOICELIST_CO@
  000fe	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00101	0f b6 48 65	 movzx	 ecx, BYTE PTR [eax+101]
  00105	33 d2		 xor	 edx, edx
  00107	83 f9 03	 cmp	 ecx, 3
  0010a	0f 9d c2	 setge	 dl
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00113	83 c4 10	 add	 esp, 16			; 00000010H

; 1545 : 
; 1546 :         //
; 1547 :         // An interrupt triggered for voice end or notifier written.  If either
; 1548 :         // of our SSL completion notifiers are set, map some more packets into
; 1549 :         // them.  Note that we're not resetting the notifier status in this
; 1550 :         // function.  We're doing it in Process instead.
; 1551 :         //
; 1552 : 
; 1553 :         dwStatus = Process();

  00116	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?Process@CMcpxStream@DirectSound@@IAEKXZ ; DirectSound::CMcpxStream::Process
  0011e	89 45 f4	 mov	 DWORD PTR _dwStatus$[ebp], eax

; 1554 : 
; 1555 :         //
; 1556 :         // If we handled the interrupt, but no more packets were available
; 1557 :         // to be mapped into an SSL, the stream has been starved by the 
; 1558 :         // user.  If DISCONTINUITY is set in the status, we can flush the
; 1559 :         // stream now.  If not, the voice should be stopped until more 
; 1560 :         // packets arrive.  If we allow the voice to remain active, the 
; 1561 :         // hardware generates an SSL completion interrupt every frame.
; 1562 :         //
; 1563 : 
; 1564 :         if(((dwStatus & MCPX_STREAM_PROCESS_MASK) == MCPX_STREAM_PROCESS_COMPLETEDSSL) && !m_dwMappedSslCount)

  00121	8b 45 f4	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00124	83 e0 03	 and	 eax, 3
  00127	83 f8 01	 cmp	 eax, 1
  0012a	0f 85 a2 00 00
	00		 jne	 $L35925
  00130	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	83 b9 a4 01 00
	00 00		 cmp	 DWORD PTR [ecx+420], 0
  0013a	0f 85 92 00 00
	00		 jne	 $L35925

; 1565 :         {
; 1566 :             if(m_dwStatus & MCPX_VOICESTATUS_DISCONTINUITY)

  00140	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00143	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00147	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0014c	85 c0		 test	 eax, eax
  0014e	74 37		 je	 SHORT $L35929

; 1567 :             {
; 1568 :                 DPF_INFO("End-of-stream reached");

  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00155	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@PBFGKABP@CMcpxStream?3?3ServiceVoiceInterru@
  0015a	68 20 06 00 00	 push	 1568			; 00000620H
  0015f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00164	6a 04		 push	 4
  00166	6a 09		 push	 9
  00168	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0016d	83 c4 18	 add	 esp, 24			; 00000018H
  00170	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@OPHGPAHK@End?9of?9stream?5reached?$AA@
  00175	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017a	83 c4 04	 add	 esp, 4

; 1569 :                 OnEndOfStream();

  0017d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	e8 00 00 00 00	 call	 ?OnEndOfStream@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::OnEndOfStream

; 1570 :             }
; 1571 :             else if(!(m_dwStatus & MCPX_VOICESTATUS_STARVED))

  00185	eb 4b		 jmp	 SHORT $L35925
$L35929:
  00187	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  0018e	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00194	85 d2		 test	 edx, edx
  00196	75 3a		 jne	 SHORT $L35925

; 1572 :             {
; 1573 :                 DPF_WARNING("The stream is starving");

  00198	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0019d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@PBFGKABP@CMcpxStream?3?3ServiceVoiceInterru@
  001a2	68 25 06 00 00	 push	 1573			; 00000625H
  001a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  001ac	6a 03		 push	 3
  001ae	6a 09		 push	 9
  001b0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001b5	83 c4 18	 add	 esp, 24			; 00000018H
  001b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@FALLNBNJ@The?5stream?5is?5starving?$AA@
  001bd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001c2	83 c4 04	 add	 esp, 4

; 1574 :                 PauseVoice(MCPX_VOICESTATUS_STARVED);

  001c5	68 00 04 00 00	 push	 1024			; 00000400H
  001ca	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001cd	e8 00 00 00 00	 call	 ?PauseVoice@CMcpxVoiceClient@DirectSound@@IAEXK@Z ; DirectSound::CMcpxVoiceClient::PauseVoice
$L35925:

; 1575 :             }
; 1576 :         }
; 1577 :     }
; 1578 : 
; 1579 :     DPF_LEAVE(TRUE);
; 1580 : 
; 1581 :     return TRUE;

  001d2	b8 01 00 00 00	 mov	 eax, 1

; 1582 : }

  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
?ServiceVoiceInterrupt@CMcpxStream@DirectSound@@MAEHXZ ENDP ; DirectSound::CMcpxStream::ServiceVoiceInterrupt
DSOUND	ENDS
PUBLIC	??_C@_0BJ@FHEOKNCI@CMcpxStream?3?3CompleteSsl?$AA@ ; `string'
PUBLIC	??_C@_0BB@EJIGHGPD@Completing?5SSL?$CFc?$AA@	; `string'
PUBLIC	??_C@_0BD@JLCGNEHJ@m_dwMappedSslCount?$AA@	; `string'
PUBLIC	??_C@_0DA@ILKBEBPP@IsListEmpty?$CI?$CGm_aSslDesc?$FLdwSslInd@ ; `string'
;	COMDAT ??_C@_0BJ@FHEOKNCI@CMcpxStream?3?3CompleteSsl?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@FHEOKNCI@CMcpxStream?3?3CompleteSsl?$AA@ DB 'CMcpxStream::Compl'
	DB	'eteSsl', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@EJIGHGPD@Completing?5SSL?$CFc?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@EJIGHGPD@Completing?5SSL?$CFc?$AA@ DB 'Completing SSL%c', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLCGNEHJ@m_dwMappedSslCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@JLCGNEHJ@m_dwMappedSslCount?$AA@ DB 'm_dwMappedSslCount', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@ILKBEBPP@IsListEmpty?$CI?$CGm_aSslDesc?$FLdwSslInd@
DSOUND_RD	SEGMENT
??_C@_0DA@ILKBEBPP@IsListEmpty?$CI?$CGm_aSslDesc?$FLdwSslInd@ DB 'IsListE'
	DB	'mpty(&m_aSslDesc[dwSslIndex].lstPackets)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CompleteSsl@CMcpxStream@DirectSound@@IAEXKK@Z
DSOUND	SEGMENT
_this$ = -24
___AutoIrql$ = -20
_dwSslBaseAndCount$ = -12
_dwSslBase$ = -8
_i$ = -4
_dwSslIndex$ = 8
_dwStatus$ = 12
?CompleteSsl@CMcpxStream@DirectSound@@IAEXKK@Z PROC NEAR ; DirectSound::CMcpxStream::CompleteSsl, COMDAT
; _this$ = ecx

; 1610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1611 :     DWORD                   dwSslBase;
; 1612 :     DWORD                   dwSslBaseAndCount;
; 1613 :     DWORD                   i;
; 1614 : 
; 1615 :     DPF_ENTER();
; 1616 :     AutoIrql();

  0000a	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::CAutoIrql

; 1617 : 
; 1618 :     ASSERT(dwSslIndex < NUMELMS(m_aSslDesc));

  00012	68 52 06 00 00	 push	 1618			; 00000652H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CPGNAGKM@dwSslIndex?5?$DM?5NUMELMS?$CIm_aSslDesc?$CJ@
  00021	83 7d 08 02	 cmp	 DWORD PTR _dwSslIndex$[ebp], 2
  00025	1b c0		 sbb	 eax, eax
  00027	40		 inc	 eax
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 1619 : 
; 1620 :     if(m_aSslDesc[dwSslIndex].dwPrdCount)

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00034	c1 e1 04	 shl	 ecx, 4
  00037	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	83 bc 0a a0 00
	00 00 00	 cmp	 DWORD PTR [edx+ecx+160], 0
  00042	0f 84 be 01 00
	00		 je	 $L35943

; 1621 :     {
; 1622 :         DPF_BLAB("Completing SSL%c", 'A' + dwSslIndex);

  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@FHEOKNCI@CMcpxStream?3?3CompleteSsl?$AA@
  00052	68 56 06 00 00	 push	 1622			; 00000656H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0005c	6a 05		 push	 5
  0005e	6a 09		 push	 9
  00060	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	8b 45 08	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  0006b	83 c0 41	 add	 eax, 65			; 00000041H
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@EJIGHGPD@Completing?5SSL?$CFc?$AA@
  00074	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00079	83 c4 08	 add	 esp, 8

; 1623 : 
; 1624 :         //
; 1625 :         // Reset hardware SSL
; 1626 :         //
; 1627 : 
; 1628 :         MCPX_CHECK_VOICE_FIFO(2 * m_bVoiceCount);

  0007c	68 5c 06 00 00	 push	 1628			; 0000065cH
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPOAAKHG@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5DISPATCH_L@
  0008b	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00090	0f b6 c8	 movzx	 ecx, al
  00093	33 d2		 xor	 edx, edx
  00095	83 f9 02	 cmp	 ecx, 2
  00098	0f 95 c2	 setne	 dl
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
  000a4	68 5c 06 00 00	 push	 1628			; 0000065cH
  000a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@OPBMIFNP@?$CI2?5?$CK?5m_bVoiceCount?$CJ?5?$DM?$DN?5PIO_METHO@
  000b3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	0f b6 48 64	 movzx	 ecx, BYTE PTR [eax+100]
  000ba	d1 e1		 shl	 ecx, 1
  000bc	33 d2		 xor	 edx, edx
  000be	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000c1	0f 9f c2	 setg	 dl
  000c4	52		 push	 edx
  000c5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ca	83 c4 10	 add	 esp, 16			; 00000010H
$L35947:
  000cd	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d2	8b 88 00 00 82
	fe		 mov	 ecx, DWORD PTR [eax-25034752]
  000d8	c1 e9 02	 shr	 ecx, 2
  000db	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000de	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  000e2	d1 e0		 shl	 eax, 1
  000e4	3b c8		 cmp	 ecx, eax
  000e6	73 02		 jae	 SHORT $L35948
  000e8	eb e3		 jmp	 SHORT $L35947
$L35948:

; 1629 :     
; 1630 :         for(i = 0; i < m_bVoiceCount; i++)

  000ea	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000f1	eb 09		 jmp	 SHORT $L35951
$L35952:
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000f6	83 c1 01	 add	 ecx, 1
  000f9	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L35951:
  000fc	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00103	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  00106	73 5d		 jae	 SHORT $L35953

; 1631 :         {
; 1632 :             dwSslBase = GetSslBase(i, dwSslIndex);

  00108	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0010f	52		 push	 edx
  00110	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	e8 00 00 00 00	 call	 ?GetSslBase@CMcpxStream@DirectSound@@IAEKKK@Z ; DirectSound::CMcpxStream::GetSslBase
  00118	89 45 f8	 mov	 DWORD PTR _dwSslBase$[ebp], eax

; 1633 :         
; 1634 :             dwSslBaseAndCount = MCPX_MAKE_REG_VALUE(dwSslBase, NV1BA0_PIO_SET_VOICE_SSL_A_BASE);

  0011b	8b 45 f8	 mov	 eax, DWORD PTR _dwSslBase$[ebp]
  0011e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00123	c1 e0 08	 shl	 eax, 8
  00126	89 45 f4	 mov	 DWORD PTR _dwSslBaseAndCount$[ebp], eax

; 1635 :         
; 1636 :             MCPX_VOICE_WRITE(SetCurrentVoice, m_ahVoices[i]);

  00129	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0012c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0012f	0f b7 44 4a 0c	 movzx	 eax, WORD PTR [edx+ecx*2+12]
  00134	b9 f8 02 00 00	 mov	 ecx, 760		; 000002f8H
  00139	89 81 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], eax

; 1637 : 
; 1638 :             if(!dwSslIndex)

  0013f	83 7d 08 00	 cmp	 DWORD PTR _dwSslIndex$[ebp], 0
  00143	75 10		 jne	 SHORT $L35957

; 1639 :             {
; 1640 :                 MCPX_VOICE_WRITE(SetVoiceSSLA, dwSslBaseAndCount);

  00145	ba 20 03 00 00	 mov	 edx, 800		; 00000320H
  0014a	8b 45 f4	 mov	 eax, DWORD PTR _dwSslBaseAndCount$[ebp]
  0014d	89 82 00 00 82
	fe		 mov	 DWORD PTR [edx-25034752], eax

; 1641 :             }
; 1642 :             else

  00153	eb 0e		 jmp	 SHORT $L35960
$L35957:

; 1643 :             {
; 1644 :                 MCPX_VOICE_WRITE(SetVoiceSSLB, dwSslBaseAndCount);

  00155	b9 5c 03 00 00	 mov	 ecx, 860		; 0000035cH
  0015a	8b 55 f4	 mov	 edx, DWORD PTR _dwSslBaseAndCount$[ebp]
  0015d	89 91 00 00 82
	fe		 mov	 DWORD PTR [ecx-25034752], edx
$L35960:

; 1645 :             }
; 1646 :         }

  00163	eb 8e		 jmp	 SHORT $L35952
$L35953:

; 1647 : 
; 1648 :         //
; 1649 :         // Complete all the packets mapped into the SSL
; 1650 :         //
; 1651 : 
; 1652 :         CompletePackets(&m_aSslDesc[dwSslIndex].lstPackets, dwStatus);

  00165	8b 45 0c	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00168	50		 push	 eax
  00169	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  0016c	c1 e1 04	 shl	 ecx, 4
  0016f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00172	8d 84 0a 98 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+152]
  00179	50		 push	 eax
  0017a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	e8 00 00 00 00	 call	 ?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z ; DirectSound::CMcpxStream::CompletePackets

; 1653 : 
; 1654 :         //
; 1655 :         // Reset the SSL data
; 1656 :         //
; 1657 : 
; 1658 :         m_aSslDesc[dwSslIndex].dwPrdCount = 0;

  00182	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00185	c1 e1 04	 shl	 ecx, 4
  00188	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0018b	c7 84 0a a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+160], 0

; 1659 :         m_aSslDesc[dwSslIndex].dwBytesMapped = 0;

  00196	8b 45 08	 mov	 eax, DWORD PTR _dwSslIndex$[ebp]
  00199	c1 e0 04	 shl	 eax, 4
  0019c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	c7 84 01 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+164], 0

; 1660 : 
; 1661 :         //
; 1662 :         // Decrement the count of mapped SSLs
; 1663 :         //
; 1664 : 
; 1665 :         ASSERT(m_dwMappedSslCount);

  001aa	68 81 06 00 00	 push	 1665			; 00000681H
  001af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  001b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@JLCGNEHJ@m_dwMappedSslCount?$AA@
  001b9	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001bc	33 c0		 xor	 eax, eax
  001be	83 ba a4 01 00
	00 00		 cmp	 DWORD PTR [edx+420], 0
  001c5	0f 94 c0	 sete	 al
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001ce	83 c4 10	 add	 esp, 16			; 00000010H

; 1666 :         m_dwMappedSslCount--;

  001d1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	8b 91 a4 01 00
	00		 mov	 edx, DWORD PTR [ecx+420]
  001da	83 ea 01	 sub	 edx, 1
  001dd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	89 90 a4 01 00
	00		 mov	 DWORD PTR [eax+420], edx

; 1667 : 
; 1668 :         m_dwFirstMappedSslIndex = (m_dwFirstMappedSslIndex + 1) % NUMELMS(m_aSslDesc);

  001e6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	8b 81 a0 01 00
	00		 mov	 eax, DWORD PTR [ecx+416]
  001ef	83 c0 01	 add	 eax, 1
  001f2	33 d2		 xor	 edx, edx
  001f4	b9 02 00 00 00	 mov	 ecx, 2
  001f9	f7 f1		 div	 ecx
  001fb	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001fe	89 90 a0 01 00
	00		 mov	 DWORD PTR [eax+416], edx

; 1669 :     }
; 1670 :     else

  00204	eb 3d		 jmp	 SHORT $L35964
$L35943:

; 1671 :     {
; 1672 :         ASSERT(IsListEmpty(&m_aSslDesc[dwSslIndex].lstPackets));

  00206	68 88 06 00 00	 push	 1672			; 00000688H
  0020b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00210	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@ILKBEBPP@IsListEmpty?$CI?$CGm_aSslDesc?$FLdwSslInd@
  00215	8b 4d 08	 mov	 ecx, DWORD PTR _dwSslIndex$[ebp]
  00218	c1 e1 04	 shl	 ecx, 4
  0021b	8b 55 08	 mov	 edx, DWORD PTR _dwSslIndex$[ebp]
  0021e	c1 e2 04	 shl	 edx, 4
  00221	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00224	8d 94 10 98 00
	00 00		 lea	 edx, DWORD PTR [eax+edx+152]
  0022b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0022e	33 db		 xor	 ebx, ebx
  00230	39 94 08 98 00
	00 00		 cmp	 DWORD PTR [eax+ecx+152], edx
  00237	0f 95 c3	 setne	 bl
  0023a	53		 push	 ebx
  0023b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00240	83 c4 10	 add	 esp, 16			; 00000010H
$L35964:

; 1673 :     }
; 1674 : 
; 1675 :     DPF_LEAVE_VOID();
; 1676 : }

  00243	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00246	e8 00 00 00 00	 call	 ??1CAutoIrql@DirectSound@@QAE@XZ ; DirectSound::CAutoIrql::~CAutoIrql
  0024b	5b		 pop	 ebx
  0024c	8b e5		 mov	 esp, ebp
  0024e	5d		 pop	 ebp
  0024f	c2 08 00	 ret	 8
?CompleteSsl@CMcpxStream@DirectSound@@IAEXKK@Z ENDP	; DirectSound::CMcpxStream::CompleteSsl
DSOUND	ENDS
PUBLIC	??_C@_0BN@BFLLHMDL@CMcpxStream?3?3CompletePackets?$AA@ ; `string'
PUBLIC	??_C@_0DM@GONPEOIP@Packet?5?$CFx?5scheduled?5for?5deferred@ ; `string'
PUBLIC	?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z	; MoveHeadTailList
PUBLIC	?CompletePacket@CMcpxStream@DirectSound@@IAEXPAUMCPX_PACKET_CONTEXT@@K@Z ; DirectSound::CMcpxStream::CompletePacket
;	COMDAT ??_C@_0BN@BFLLHMDL@CMcpxStream?3?3CompletePackets?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@BFLLHMDL@CMcpxStream?3?3CompletePackets?$AA@ DB 'CMcpxStream::C'
	DB	'ompletePackets', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DM@GONPEOIP@Packet?5?$CFx?5scheduled?5for?5deferred@
DSOUND_RD	SEGMENT
??_C@_0DM@GONPEOIP@Packet?5?$CFx?5scheduled?5for?5deferred@ DB 'Packet %x'
	DB	' scheduled for deferred completion with status %lu', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z
DSOUND	SEGMENT
_this$ = -16
_pleEntry$ = -12
_irql$ = -8
_pListHead$ = 8
_dwStatus$ = 12
?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z PROC NEAR ; DirectSound::CMcpxStream::CompletePackets, COMDAT
; _this$ = ecx

; 1704 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1705 :     PLIST_ENTRY             pleEntry;
; 1706 :     CIrql                   irql;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CIrql@DirectSound@@QAE@XZ ; DirectSound::CIrql::CIrql

; 1707 : 
; 1708 :     DPF_ENTER();
; 1709 : 
; 1710 :     //
; 1711 :     // Only complete the packets if it's the deferred list.  For everything
; 1712 :     // else, add the packets to the deferred completion list.
; 1713 :     //
; 1714 : 
; 1715 :     if(&m_lstCompleted == pListHead)

  00011	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00014	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  00019	3b 45 08	 cmp	 eax, DWORD PTR _pListHead$[ebp]
  0001c	75 52		 jne	 SHORT $L35973

; 1716 :     {
; 1717 :         irql.Raise();

  0001e	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00021	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise
$L35975:

; 1718 :         
; 1719 :         while((pleEntry = MoveHeadTailList(&m_lstAvailable, pListHead)) != pListHead)

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pListHead$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	81 c2 c0 00 00
	00		 add	 edx, 192		; 000000c0H
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveHeadTailList
  00039	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  0003f	3b 45 08	 cmp	 eax, DWORD PTR _pListHead$[ebp]
  00042	74 22		 je	 SHORT $L35976

; 1720 :         {
; 1721 :             irql.Lower();

  00044	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00047	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 1722 : 
; 1723 :             CompletePacket(CONTAINING_RECORD(pleEntry, MCPX_PACKET_CONTEXT, leListEntry), dwStatus);

  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00053	52		 push	 edx
  00054	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?CompletePacket@CMcpxStream@DirectSound@@IAEXPAUMCPX_PACKET_CONTEXT@@K@Z ; DirectSound::CMcpxStream::CompletePacket

; 1724 : 
; 1725 :             irql.Raise();

  0005c	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  0005f	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise

; 1726 :         }

  00064	eb c0		 jmp	 SHORT $L35975
$L35976:

; 1727 : 
; 1728 :         irql.Lower();

  00066	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00069	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower

; 1729 :     }
; 1730 :     else

  0006e	eb 6e		 jmp	 SHORT $L35970
$L35973:

; 1731 :     {
; 1732 :         irql.Raise();

  00070	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  00073	e8 00 00 00 00	 call	 ?Raise@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Raise
$L35983:

; 1733 :         
; 1734 :         while((pleEntry = MoveHeadTailList(&m_lstCompleted, pListHead)) != pListHead)

  00078	8b 45 08	 mov	 eax, DWORD PTR _pListHead$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveHeadTailList
  0008b	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  0008e	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00091	3b 55 08	 cmp	 edx, DWORD PTR _pListHead$[ebp]
  00094	74 40		 je	 SHORT $L35984

; 1735 :         {
; 1736 :             CONTAINING_RECORD(pleEntry, MCPX_PACKET_CONTEXT, leListEntry)->dwStatus = dwStatus;

  00096	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00099	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  0009c	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 1737 : 
; 1738 :             DPF_BLAB("Packet %x scheduled for deferred completion with status %lu", pleEntry, dwStatus);

  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BFLLHMDL@CMcpxStream?3?3CompletePackets?$AA@
  000a9	68 ca 06 00 00	 push	 1738			; 000006caH
  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  000b3	6a 05		 push	 5
  000b5	6a 09		 push	 9
  000b7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000bc	83 c4 18	 add	 esp, 24			; 00000018H
  000bf	8b 55 0c	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  000c2	52		 push	 edx
  000c3	8b 45 f4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@GONPEOIP@Packet?5?$CFx?5scheduled?5for?5deferred@
  000cc	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1739 :         }

  000d4	eb a2		 jmp	 SHORT $L35983
$L35984:

; 1740 : 
; 1741 :         irql.Lower();

  000d6	8d 4d f8	 lea	 ecx, DWORD PTR _irql$[ebp]
  000d9	e8 00 00 00 00	 call	 ?Lower@CIrql@DirectSound@@QAEXXZ ; DirectSound::CIrql::Lower
$L35970:

; 1742 :     }
; 1743 : 
; 1744 :     DPF_LEAVE_VOID();
; 1745 : }

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z ENDP ; DirectSound::CMcpxStream::CompletePackets
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT
_Entry$ = -4
_DestListHead$ = 8
_SourceListHead$ = 12
?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z PROC NEAR	; MoveHeadTailList, COMDAT

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 274  :     PLIST_ENTRY             Entry;
; 275  :     
; 276  :     AssertValidEntryList(SourceListHead, ASSERT_VALID_ONLY);

  00004	68 14 01 00 00	 push	 276			; 00000114H
  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000e	6a 00		 push	 0
  00010	8b 45 0c	 mov	 eax, DWORD PTR _SourceListHead$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 277  : 
; 278  :     if((Entry = SourceListHead->Flink) != SourceListHead)

  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _SourceListHead$[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	89 55 fc	 mov	 DWORD PTR _Entry$[ebp], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _Entry$[ebp]
  00024	3b 45 0c	 cmp	 eax, DWORD PTR _SourceListHead$[ebp]
  00027	74 0d		 je	 SHORT $L30056

; 279  :     {
; 280  :         MoveEntryTailList(DestListHead, Entry);

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 08	 mov	 edx, DWORD PTR _DestListHead$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ; MoveEntryTailList
$L30056:

; 281  :     }
; 282  :     
; 283  :     return Entry;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _Entry$[ebp]

; 284  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?MoveHeadTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z ENDP	; MoveHeadTailList
DSOUND	ENDS
PUBLIC	??_C@_0CI@MBGNENCE@XMEDIAPACKET_STATUS_PENDING?5?$CB?$DN?5d@ ; `string'
PUBLIC	??_C@_0BM@KIFNFCNL@CMcpxStream?3?3CompletePacket?$AA@ ; `string'
PUBLIC	??_C@_0CF@BMJKKMLO@Completing?5packet?5?$CFx?5with?5status@ ; `string'
PUBLIC	?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z ; XMOCompletePacket
;	COMDAT ??_C@_0CI@MBGNENCE@XMEDIAPACKET_STATUS_PENDING?5?$CB?$DN?5d@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND_RD	SEGMENT
??_C@_0CI@MBGNENCE@XMEDIAPACKET_STATUS_PENDING?5?$CB?$DN?5d@ DB 'XMEDIAPA'
	DB	'CKET_STATUS_PENDING != dwStatus', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KIFNFCNL@CMcpxStream?3?3CompletePacket?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@KIFNFCNL@CMcpxStream?3?3CompletePacket?$AA@ DB 'CMcpxStream::Co'
	DB	'mpletePacket', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@BMJKKMLO@Completing?5packet?5?$CFx?5with?5status@
DSOUND_RD	SEGMENT
??_C@_0CF@BMJKKMLO@Completing?5packet?5?$CFx?5with?5status@ DB 'Completin'
	DB	'g packet %x with status %lu', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CompletePacket@CMcpxStream@DirectSound@@IAEXPAUMCPX_PACKET_CONTEXT@@K@Z
DSOUND	SEGMENT
_this$ = -4
_pPacketContext$ = 8
_dwStatus$ = 12
?CompletePacket@CMcpxStream@DirectSound@@IAEXPAUMCPX_PACKET_CONTEXT@@K@Z PROC NEAR ; DirectSound::CMcpxStream::CompletePacket, COMDAT
; _this$ = ecx

; 1773 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1774 :     DPF_ENTER();
; 1775 : 
; 1776 :     //
; 1777 :     // If the packet has a status value other than PENDING stored in it's
; 1778 :     // context, we'll use that instead of the status value passed in.
; 1779 :     //
; 1780 : 
; 1781 :     if(XMEDIAPACKET_STATUS_PENDING != pPacketContext->dwStatus)

  00007	8b 45 08	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  0000a	81 78 24 0a 00
	00 80		 cmp	 DWORD PTR [eax+36], -2147483638 ; 8000000aH
  00011	74 09		 je	 SHORT $L35997

; 1782 :     {
; 1783 :         dwStatus = pPacketContext->dwStatus;

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  00016	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00019	89 55 0c	 mov	 DWORD PTR _dwStatus$[ebp], edx
$L35997:

; 1784 :     }
; 1785 : 
; 1786 :     ASSERT(XMEDIAPACKET_STATUS_PENDING != dwStatus);

  0001c	68 fa 06 00 00	 push	 1786			; 000006faH
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@MBGNENCE@XMEDIAPACKET_STATUS_PENDING?5?$CB?$DN?5d@
  0002b	33 c0		 xor	 eax, eax
  0002d	81 7d 0c 0a 00
	00 80		 cmp	 DWORD PTR _dwStatus$[ebp], -2147483638 ; 8000000aH
  00034	0f 94 c0	 sete	 al
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 1787 : 
; 1788 :     DPF_BLAB("Completing packet %x with status %lu", pPacketContext, dwStatus);

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KIFNFCNL@CMcpxStream?3?3CompletePacket?$AA@
  0004a	68 fc 06 00 00	 push	 1788			; 000006fcH
  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00054	6a 05		 push	 5
  00056	6a 09		 push	 9
  00058	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 08	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  00067	52		 push	 edx
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@BMJKKMLO@Completing?5packet?5?$CFx?5with?5status@
  0006d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1789 : 
; 1790 :     //
; 1791 :     // Unlock buffer pages
; 1792 :     //
; 1793 : 
; 1794 :     MmLockUnlockBufferPages(pPacketContext->xmpPacket.pvBuffer, pPacketContext->xmpPacket.dwMaxSize, TRUE);

  00075	6a 01		 push	 1
  00077	8b 45 08	 mov	 eax, DWORD PTR _pPacketContext$[ebp]
  0007a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007d	51		 push	 ecx
  0007e	8b 55 08	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  00081	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00084	50		 push	 eax
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmLockUnlockBufferPages@12

; 1795 : 
; 1796 :     //
; 1797 :     // Now call them back so there is at least one available context
; 1798 :     // if they turn around and call process in their callback
; 1799 :     //
; 1800 : 
; 1801 :     XMOCompletePacket(&pPacketContext->xmpPacket, pPacketContext->xmpPacket.dwMaxSize, m_pSettings->m_pfnCallback, m_pSettings->m_pvContext, dwStatus);

  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  0008e	51		 push	 ecx
  0008f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00098	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0009e	51		 push	 ecx
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  000a8	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  000ae	51		 push	 ecx
  000af	8b 55 08	 mov	 edx, DWORD PTR _pPacketContext$[ebp]
  000b2	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000b5	50		 push	 eax
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _pPacketContext$[ebp]
  000b9	83 c1 08	 add	 ecx, 8
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z ; XMOCompletePacket

; 1802 : 
; 1803 :     DPF_LEAVE_VOID();
; 1804 : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
?CompletePacket@CMcpxStream@DirectSound@@IAEXPAUMCPX_PACKET_CONTEXT@@K@Z ENDP ; DirectSound::CMcpxStream::CompletePacket
DSOUND	ENDS
EXTRN	__imp__NtSetEvent@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z
DSOUND	SEGMENT
_pxmp$ = 8
_dwCompletedSize$ = 12
_pfnCallback$ = 16
_pvStreamContext$ = 20
_dwStatus$ = 24
?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z PROC NEAR ; XMOCompletePacket, COMDAT

; 1457 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1458 :     if(pxmp->pdwCompletedSize)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00006	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000a	74 0b		 je	 SHORT $L28009

; 1459 :     {
; 1460 :         *pxmp->pdwCompletedSize = dwCompletedSize;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwCompletedSize$[ebp]
  00015	89 02		 mov	 DWORD PTR [edx], eax
$L28009:

; 1461 :     }
; 1462 : 
; 1463 :     if(pxmp->pdwStatus)

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  0001a	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0001e	74 0b		 je	 SHORT $L28010

; 1464 :     {
; 1465 :         *pxmp->pdwStatus = dwStatus;

  00020	8b 55 08	 mov	 edx, DWORD PTR _pxmp$[ebp]
  00023	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00026	8b 4d 18	 mov	 ecx, DWORD PTR _dwStatus$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
$L28010:

; 1466 :     }
; 1467 : 
; 1468 :     if(pfnCallback)

  0002b	83 7d 10 00	 cmp	 DWORD PTR _pfnCallback$[ebp], 0
  0002f	74 14		 je	 SHORT $L28011

; 1469 :     {
; 1470 :         pfnCallback(pvStreamContext, pxmp->pContext, dwStatus);

  00031	8b 55 18	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  00034	52		 push	 edx
  00035	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00038	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003b	51		 push	 ecx
  0003c	8b 55 14	 mov	 edx, DWORD PTR _pvStreamContext$[ebp]
  0003f	52		 push	 edx
  00040	ff 55 10	 call	 DWORD PTR _pfnCallback$[ebp]

; 1471 :     }
; 1472 :     else if(pxmp->hCompletionEvent)

  00043	eb 18		 jmp	 SHORT $L28008
$L28011:
  00045	8b 45 08	 mov	 eax, DWORD PTR _pxmp$[ebp]
  00048	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004c	74 0f		 je	 SHORT $L28008

; 1473 :     {
; 1474 : 
; 1475 : #ifdef _NTEXAPI_
; 1476 : 
; 1477 :         NtSetEvent(pxmp->hCompletionEvent, NULL);

  0004e	6a 00		 push	 0
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _pxmp$[ebp]
  00053	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtSetEvent@8
$L28008:

; 1478 : 
; 1479 : #else // _NTEXAPI_
; 1480 : 
; 1481 :         SetEvent(pxmp->hCompletionEvent);
; 1482 : 
; 1483 : #endif // _NTEXAPI_
; 1484 : 
; 1485 :     }
; 1486 : }

  0005d	5d		 pop	 ebp
  0005e	c2 14 00	 ret	 20			; 00000014H
?XMOCompletePacket@@YGXPBU_XMEDIAPACKET@@KP6GXPAX1K@Z1K@Z ENDP ; XMOCompletePacket
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.cpp
DSOUND	ENDS
;	COMDAT ?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -4
?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxStream::CompleteDeferredPackets, COMDAT
; _this$ = ecx

; 1830 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1831 :     DPF_ENTER();
; 1832 : 
; 1833 :     //
; 1834 :     // If we're not running any more, we can unregister for completion 
; 1835 :     // callbacks
; 1836 :     //
; 1837 : 
; 1838 :     if((m_dwStatus & MCPX_VOICESTATUS_ACTIVEMASK) != MCPX_VOICESTATUS_ACTIVEMASK)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0000e	83 e1 03	 and	 ecx, 3
  00011	83 f9 03	 cmp	 ecx, 3
  00014	74 0d		 je	 SHORT $L36006

; 1839 :     {
; 1840 :         RemoveDeferredCommand(MCPX_DEFERREDCMD_STREAM_COMPLETEPACKETS);

  00016	6a 02		 push	 2
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	ff 50 1c	 call	 DWORD PTR [eax+28]
$L36006:

; 1841 :     }        
; 1842 : 
; 1843 :     //
; 1844 :     // Complete all the packets in the deferred completion list
; 1845 :     //
; 1846 :     
; 1847 :     CompletePackets(&m_lstCompleted, XMEDIAPACKET_STATUS_PENDING);

  00023	68 0a 00 00 80	 push	 -2147483638		; 8000000aH
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  00031	51		 push	 ecx
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?CompletePackets@CMcpxStream@DirectSound@@IAEXPAU_LIST_ENTRY@@K@Z ; DirectSound::CMcpxStream::CompletePackets

; 1848 : 
; 1849 :     DPF_LEAVE_VOID();
; 1850 : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxStream::CompleteDeferredPackets
DSOUND	ENDS
EXTRN	?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::ReleaseVoiceResources
; Function compile flags: /Odt
;	COMDAT ?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ PROC NEAR ; DirectSound::CMcpxStream::ReleaseStreamResources, COMDAT
; _this$ = ecx

; 1876 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1877 :     DWORD                   i;
; 1878 :     
; 1879 :     DPF_ENTER();
; 1880 : 
; 1881 :     //
; 1882 :     // Make sure the voice is stopped
; 1883 :     //
; 1884 : 
; 1885 :     DeactivateVoice(TRUE);

  00009	6a 01		 push	 1
  0000b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?DeactivateVoice@CMcpxVoiceClient@DirectSound@@IAEXH@Z ; DirectSound::CMcpxVoiceClient::DeactivateVoice

; 1886 : 
; 1887 :     //
; 1888 :     // Unschedule any pending low-priority tasks (including RELEASERESOURCES)
; 1889 :     //
; 1890 : 
; 1891 :     for(i = 0; i < MCPX_DEFERREDCMD_STREAM_COUNT; i++)

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001a	eb 09		 jmp	 SHORT $L36013
$L36014:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L36013:
  00025	83 7d fc 06	 cmp	 DWORD PTR _i$[ebp], 6
  00029	73 28		 jae	 SHORT $L36015

; 1892 :     {
; 1893 :         if(m_aDeferredCommands[i].dwFlags & MCPX_DEFERREDCMDF_LOWPRIORITY)

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0002e	c1 e1 05	 shl	 ecx, 5
  00031	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 84 0a e8 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+232]
  0003b	83 e0 01	 and	 eax, 1
  0003e	85 c0		 test	 eax, eax
  00040	74 0f		 je	 SHORT $L36016

; 1894 :         {
; 1895 :             RemoveDeferredCommand(i);

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00049	8b 02		 mov	 eax, DWORD PTR [edx]
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	ff 50 1c	 call	 DWORD PTR [eax+28]
$L36016:

; 1896 :         }
; 1897 :     }

  00051	eb c9		 jmp	 SHORT $L36014
$L36015:

; 1898 : 
; 1899 :     //
; 1900 :     // Clear any left-over status bits
; 1901 :     //
; 1902 : 
; 1903 :     and(&m_dwStatus, MCPX_VOICESTATUS_DEACTIVATEMASK);

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 12	 add	 ecx, 18			; 00000012H
  00059	ba 11 01 00 00	 mov	 edx, 273		; 00000111H
  0005e	e8 00 00 00 00	 call	 ?and@@YIXPCGG@Z		; and

; 1904 : 
; 1905 :     //
; 1906 :     // Release voice resources
; 1907 :     //
; 1908 : 
; 1909 :     ReleaseVoiceResources();

  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?ReleaseVoiceResources@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::ReleaseVoiceResources

; 1910 : 
; 1911 :     DPF_LEAVE_VOID();
; 1912 : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ ENDP ; DirectSound::CMcpxStream::ReleaseStreamResources
DSOUND	ENDS
PUBLIC	??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@ ; `string'
PUBLIC	??_C@_0CF@NMIKPKBI@CMcpxStream?3?3ScheduleDeferredCom@ ; `string'
PUBLIC	??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@ ; `string'
EXTRN	?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z:NEAR ; DirectSound::CMcpxAPU::ScheduleDeferredCommand
;	COMDAT ??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
DSOUND_RD	SEGMENT
??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@ DB 'dwComman'
	DB	'd < NUMELMS(m_aDeferredCommands)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@NMIKPKBI@CMcpxStream?3?3ScheduleDeferredCom@
DSOUND_RD	SEGMENT
??_C@_0CF@NMIKPKBI@CMcpxStream?3?3ScheduleDeferredCom@ DB 'CMcpxStream::S'
	DB	'cheduleDeferredCommand', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@
DSOUND_RD	SEGMENT
??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@ DB 'V'
	DB	'oice %x (%x) scheduled command %lu', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ScheduleDeferredCommand@CMcpxStream@DirectSound@@MAEHK_JK@Z
DSOUND	SEGMENT
_this$ = -12
_fScheduled$ = -8
_pCmd$ = -4
_dwCommand$ = 8
_rtTimeStamp$ = 12
_dwContext$ = 20
?ScheduleDeferredCommand@CMcpxStream@DirectSound@@MAEHK_JK@Z PROC NEAR ; DirectSound::CMcpxStream::ScheduleDeferredCommand, COMDAT
; _this$ = ecx

; 1944 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1945 :     LPMCPX_DEFERRED_COMMAND pCmd        = &m_aDeferredCommands[dwCommand];

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwCommand$[ebp]
  0000c	c1 e0 05	 shl	 eax, 5
  0000f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8d 94 01 e0 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+224]
  00019	89 55 fc	 mov	 DWORD PTR _pCmd$[ebp], edx

; 1946 :     BOOL                    fScheduled;
; 1947 : 
; 1948 :     DPF_ENTER();
; 1949 :     
; 1950 :     ASSERT(dwCommand < NUMELMS(m_aDeferredCommands));

  0001c	68 9e 07 00 00	 push	 1950			; 0000079eH
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
  0002b	83 7d 08 06	 cmp	 DWORD PTR _dwCommand$[ebp], 6
  0002f	1b c0		 sbb	 eax, eax
  00031	40		 inc	 eax
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00038	83 c4 10	 add	 esp, 16			; 00000010H

; 1951 : 
; 1952 :     pCmd->rtTimestamp = rtTimeStamp;

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0003e	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  00041	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  00044	8b 45 10	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  00047	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 1953 :     pCmd->dwContext = dwContext;

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _pCmd$[ebp]
  0004d	8b 55 14	 mov	 edx, DWORD PTR _dwContext$[ebp]
  00050	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1954 : 
; 1955 :     if(fScheduled = m_pMcpxApu->ScheduleDeferredCommand(pCmd))

  00053	8b 45 fc	 mov	 eax, DWORD PTR _pCmd$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0005d	e8 00 00 00 00	 call	 ?ScheduleDeferredCommand@CMcpxAPU@DirectSound@@QAEHPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::ScheduleDeferredCommand
  00062	89 45 f8	 mov	 DWORD PTR _fScheduled$[ebp], eax
  00065	83 7d f8 00	 cmp	 DWORD PTR _fScheduled$[ebp], 0
  00069	74 3d		 je	 SHORT $L36026

; 1956 :     {
; 1957 :         DPF_BLAB("Voice %x (%x) scheduled command %lu", this, m_ahVoices[0], dwCommand);

  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@NMIKPKBI@CMcpxStream?3?3ScheduleDeferredCom@
  00075	68 a5 07 00 00	 push	 1957			; 000007a5H
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0007f	6a 05		 push	 5
  00081	6a 09		 push	 9
  00083	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00088	83 c4 18	 add	 esp, 24			; 00000018H
  0008b	8b 55 08	 mov	 edx, DWORD PTR _dwCommand$[ebp]
  0008e	52		 push	 edx
  0008f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00092	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00096	51		 push	 ecx
  00097	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0009a	52		 push	 edx
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@PCBBDIIB@Voice?5?$CFx?5?$CI?$CFx?$CJ?5scheduled?5command?5@
  000a0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a5	83 c4 10	 add	 esp, 16			; 00000010H
$L36026:

; 1958 :     }
; 1959 : 
; 1960 :     DPF_LEAVE(fScheduled);
; 1961 : 
; 1962 :     return fScheduled;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _fScheduled$[ebp]

; 1963 : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 10 00	 ret	 16			; 00000010H
?ScheduleDeferredCommand@CMcpxStream@DirectSound@@MAEHK_JK@Z ENDP ; DirectSound::CMcpxStream::ScheduleDeferredCommand
DSOUND	ENDS
PUBLIC	??_C@_0CD@PANJGBEE@CMcpxStream?3?3RemoveDeferredComma@ ; `string'
PUBLIC	??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@ ; `string'
EXTRN	?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z:NEAR ; DirectSound::CMcpxAPU::RemoveDeferredCommand
;	COMDAT ??_C@_0CD@PANJGBEE@CMcpxStream?3?3RemoveDeferredComma@
DSOUND_RD	SEGMENT
??_C@_0CD@PANJGBEE@CMcpxStream?3?3RemoveDeferredComma@ DB 'CMcpxStream::R'
	DB	'emoveDeferredCommand', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@
DSOUND_RD	SEGMENT
??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@ DB 'V'
	DB	'oice %x (%x) unscheduling command %lu', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?RemoveDeferredCommand@CMcpxStream@DirectSound@@MAEXK@Z
DSOUND	SEGMENT
_this$ = -4
_dwCommand$ = 8
?RemoveDeferredCommand@CMcpxStream@DirectSound@@MAEXK@Z PROC NEAR ; DirectSound::CMcpxStream::RemoveDeferredCommand, COMDAT
; _this$ = ecx

; 1989 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1990 :     DPF_ENTER();
; 1991 : 
; 1992 :     ASSERT(dwCommand < NUMELMS(m_aDeferredCommands));

  00007	68 c8 07 00 00	 push	 1992			; 000007c8H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@GEJHLKKB@dwCommand?5?$DM?5NUMELMS?$CIm_aDeferredC@
  00016	83 7d 08 06	 cmp	 DWORD PTR _dwCommand$[ebp], 6
  0001a	1b c0		 sbb	 eax, eax
  0001c	40		 inc	 eax
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00023	83 c4 10	 add	 esp, 16			; 00000010H

; 1993 : 
; 1994 :     if(m_aDeferredCommands[dwCommand].dwFlags & MCPX_DEFERREDCMDF_SCHEDULED)

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _dwCommand$[ebp]
  00029	c1 e1 05	 shl	 ecx, 5
  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 84 0a e8 00
	00 00		 mov	 eax, DWORD PTR [edx+ecx+232]
  00036	83 e0 02	 and	 eax, 2
  00039	85 c0		 test	 eax, eax
  0003b	74 3d		 je	 SHORT $L36033

; 1995 :     {
; 1996 :         DPF_BLAB("Voice %x (%x) unscheduling command %lu", this, m_ahVoices[0], dwCommand);

  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@PANJGBEE@CMcpxStream?3?3RemoveDeferredComma@
  00047	68 cc 07 00 00	 push	 1996			; 000007ccH
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  00051	6a 05		 push	 5
  00053	6a 09		 push	 9
  00055	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _dwCommand$[ebp]
  00060	51		 push	 ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00068	50		 push	 eax
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	51		 push	 ecx
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@NOPPBJEG@Voice?5?$CFx?5?$CI?$CFx?$CJ?5unscheduling?5comma@
  00072	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00077	83 c4 10	 add	 esp, 16			; 00000010H
$L36033:

; 1997 :     }
; 1998 :     
; 1999 :     m_pMcpxApu->RemoveDeferredCommand(&m_aDeferredCommands[dwCommand]);

  0007a	8b 55 08	 mov	 edx, DWORD PTR _dwCommand$[ebp]
  0007d	c1 e2 05	 shl	 edx, 5
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8d 8c 10 e0 00
	00 00		 lea	 ecx, DWORD PTR [eax+edx+224]
  0008a	51		 push	 ecx
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00091	e8 00 00 00 00	 call	 ?RemoveDeferredCommand@CMcpxAPU@DirectSound@@QAEXPAUMCPX_DEFERRED_COMMAND@@@Z ; DirectSound::CMcpxAPU::RemoveDeferredCommand

; 2000 : 
; 2001 :     DPF_LEAVE_VOID();
; 2002 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?RemoveDeferredCommand@CMcpxStream@DirectSound@@MAEXK@Z ENDP ; DirectSound::CMcpxStream::RemoveDeferredCommand
DSOUND	ENDS
PUBLIC	??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@ ; `string'
EXTRN	?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxVoiceClient::CheckStuckVoice
;	COMDAT ??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@
DSOUND_RD	SEGMENT
??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@ DB 'Unexpected de'
	DB	'ferred command identifier', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ServiceDeferredCommand@CMcpxStream@DirectSound@@MAEXKK@Z
DSOUND	SEGMENT
tv64 = -8
_this$ = -4
_dwCommand$ = 8
_dwContext$ = 12
?ServiceDeferredCommand@CMcpxStream@DirectSound@@MAEXKK@Z PROC NEAR ; DirectSound::CMcpxStream::ServiceDeferredCommand, COMDAT
; _this$ = ecx

; 2030 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2031 :     DPF_ENTER();
; 2032 :     
; 2033 :     switch(dwCommand)
; 2034 :     {

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwCommand$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d f8 05	 cmp	 DWORD PTR tv64[ebp], 5
  00013	77 4e		 ja	 SHORT $L36051
  00015	8b 4d f8	 mov	 ecx, DWORD PTR tv64[ebp]
  00018	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L36614[ecx*4]
$L36045:

; 2035 :         case MCPX_DEFERREDCMD_STREAM_COMPLETEPACKETS:
; 2036 :             CompleteDeferredPackets();

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?CompleteDeferredPackets@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::CompleteDeferredPackets

; 2037 :             break;

  00027	eb 53		 jmp	 SHORT $L36040
$L36046:

; 2038 : 
; 2039 :         case MCPX_DEFERREDCMD_STREAM_RELEASERESOURCES:
; 2040 :             ReleaseStreamResources();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?ReleaseStreamResources@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::ReleaseStreamResources

; 2041 :             break;

  00031	eb 49		 jmp	 SHORT $L36040
$L36047:

; 2042 : 
; 2043 :         case MCPX_DEFERREDCMD_STREAM_FLUSH:
; 2044 :             OnDeferredFlush();

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?OnDeferredFlush@CMcpxStream@DirectSound@@IAEXXZ ; DirectSound::CMcpxStream::OnDeferredFlush

; 2045 :             break;

  0003b	eb 3f		 jmp	 SHORT $L36040
$L36048:

; 2046 : 
; 2047 :         case MCPX_DEFERREDCMD_STREAM_STOP:
; 2048 :             Stop(dwContext);

  0003d	8b 55 0c	 mov	 edx, DWORD PTR _dwContext$[ebp]
  00040	52		 push	 edx
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?Stop@CMcpxStream@DirectSound@@QAEJK@Z ; DirectSound::CMcpxStream::Stop

; 2049 :             break;

  00049	eb 31		 jmp	 SHORT $L36040
$L36049:

; 2050 : 
; 2051 :         case MCPX_DEFERREDCMD_STREAM_PAUSE:
; 2052 :             Pause(dwContext);

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _dwContext$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?Pause@CMcpxStream@DirectSound@@QAEJK@Z ; DirectSound::CMcpxStream::Pause

; 2053 :             break;

  00057	eb 23		 jmp	 SHORT $L36040
$L36050:

; 2054 : 
; 2055 :         case MCPX_DEFERREDCMD_STREAM_CHECKSTUCK:
; 2056 :             CheckStuckVoice();

  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?CheckStuckVoice@CMcpxVoiceClient@DirectSound@@IAEXXZ ; DirectSound::CMcpxVoiceClient::CheckStuckVoice

; 2057 :             break;

  00061	eb 19		 jmp	 SHORT $L36040
$L36051:

; 2058 : 
; 2059 :         default:
; 2060 :             ASSERTMSG("Unexpected deferred command identifier");

  00063	68 0c 08 00 00	 push	 2060			; 0000080cH
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@DPGMABBH@c?3?2xbox?2private?2windows?2directx?2@
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@NJCJDNBM@Unexpected?5deferred?5command?5iden@
  00072	6a 01		 push	 1
  00074	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00079	83 c4 10	 add	 esp, 16			; 00000010H
$L36040:

; 2061 :             break;
; 2062 :     }
; 2063 : 
; 2064 :     DPF_LEAVE_VOID();
; 2065 : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
$L36614:
  00082	00 00 00 00	 DD	 $L36050
  00086	00 00 00 00	 DD	 $L36046
  0008a	00 00 00 00	 DD	 $L36045
  0008e	00 00 00 00	 DD	 $L36047
  00092	00 00 00 00	 DD	 $L36048
  00096	00 00 00 00	 DD	 $L36049
?ServiceDeferredCommand@CMcpxStream@DirectSound@@MAEXKK@Z ENDP ; DirectSound::CMcpxStream::ServiceDeferredCommand
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundStreamSettings@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCDirectSoundStreamSettings@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L36108

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L36108:

; 72   :         }
; 73   : 
; 74   :         return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCDirectSoundStreamSettings@1@PAV21@@Z ENDP ; DirectSound::__AddRef
DSOUND	ENDS
END
