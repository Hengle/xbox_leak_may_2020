; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\gpdsp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@ILKMEFEP@CMcpxDspImage?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@PNGMNGCG@m_pDspImage?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@MCMIBGDC@CMcpxDspScratchDma?$CITRUE?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@BBNBCNGF@m_pScratchDma?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FH@IHCLHFLG@FALSE?5?$CG?$CG?5?$CCCMcpxDspManager?3?3Initi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@FGGLJBIG@m_pDspImage?9?$DOGetLoaderSize?$CI?$CJ?5?$DM?5D@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FC@FHPIIHBL@dwImageSize?5?$DO?5?$CIDSP_COMMANDBLOCK_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MMJFHDOJ@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@MOADBLC@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@HNLHAKKM@dwImageSize?5?$DM?$DN?5MCPX_GLOBAL_PROC_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@HIAHEHDN@BYTE?$FLdwDescriptorSize?$FN?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@DNFDBHCJ@Keyblock?5decode?5failed?5with?5hr?5?$DN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@KLLIOBPM@code?5block?5decode?5failed?5with?5hr@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@EFLFCOPP@dwDataSize?5?$DO?$DN?5sizeof?$CIDWORD?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FOBFECOE@?$CB?$CIdwDataSize?5?$CG?50x00000003?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@OOBBFLIM@?$CB?$CIdwOffset?5?$CG?50x00000003?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@MNCIICOJ@pFxDesc?9?$DOdwStateSize?5?$DO?$DN?5?$CIdwOffse@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@HBHEJKII@pDescriptor?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@ELMEHHNJ@ppEffectMap?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FL@HIMIHCOK@Zero?9based?5Effect?5Index?5?$CI?$CFd?$CJ?5is?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EB@ONOCOGPO@CommitEffectData?5was?5called?5but?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_U@YAPAXIPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFxScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxDspImage@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetLoader@CMcpxDspImage@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxDspImage@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CMcpxGPDspManager@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CMcpxGPDspManager@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCMcpxDspScratchDma@DirectSound@@QAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxGPDspManager@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DownloadEffectsImage@CMcpxGPDspManager@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RestoreCommandBlock@CMcpxGPDspManager@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ParseEffectImageInfo@CMcpxGPDspManager@DirectSound@@IAEJPBX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetEffectMap@CMcpxGPDspManager@DirectSound@@QAEJKPAPBU_DSEFFECTMAP@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AC3SetOutputBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMultipassBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XBLD$V, DSOUND_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_DSoundBuildNumberD
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RW	SEGMENT
_DefaultExec DD	0bf080H
	DD	0155H
	DD	0300600H
	DD	0310000H
	DD	062f400H
	DD	0800H
	DD	0330600H
	DD	0bf080H
	DD	0dbH
	DD	0301800H
	DD	0310000H
	DD	062f400H
	DD	0800H
	DD	0330600H
	DD	0bf080H
	DD	0ebH
	DD	0bf080H
	DD	09eH
	DD	0301e00H
	DD	061f400H
	DD	01560H
	DD	062f400H
	DD	0b000H
	DD	063f400H
	DD	0280H
	DD	0bf080H
	DD	0ebH
	DD	044f400H
	DD	049e2H
	DD	0200c4H
	DD	0240000H
	DD	0447000H
	DD	07fH
	DD	0447000H
	DD	07eH
	DD	07f432H
	DD	0ffffffH
	DD	07f430H
	DD	01H
	DD	07f431H
	DD	01H
	DD	08f484H
	DD	01H
	DD	0bf080H
	DD	0160H
	DD	044f000H
	DD	0ffffb3H
	DD	0447000H
	DD	07fH
	DD	0bf080H
	DD	05cH
	DD	044f000H
	DD	0ffffb3H
	DD	0447000H
	DD	07dH
	DD	0bf080H
	DD	0171H
	DD	0200013H
	DD	054f000H
	DD	0ffffb3H
	DD	044f000H
	DD	07dH
	DD	0c1ff8H
	DD	059405H
	DD	0218e00H
	DD	0200044H
	DD	0547000H
	DD	07cH
	DD	056f400H
	DD	025H
	DD	0bf080H
	DD	0126H
	DD	056f400H
	DD	01eH
	DD	0bf080H
	DD	0126H
	DD	0200013H
	DD	054f000H
	DD	0ffffb3H
	DD	044f000H
	DD	07fH
	DD	0c1ff8H
	DD	059797H
	DD	0218e00H
	DD	0200044H
	DD	0547000H
	DD	07eH
	DD	044f400H
	DD	019e10H
	DD	0c1ff8H
	DD	05978fH
	DD	050f8eH
	DD	056f400H
	DD	06H
	DD	0bf080H
	DD	0126H
	DD	0448400H
	DD	056f400H
	DD	00H
	DD	0200045H
	DD	0d104aH
	DD	039H
	DD	0a0480H
	DD	084H
	DD	060f400H
	DD	080H
	DD	044f400H
	DD	0f80H
	DD	0bf080H
	DD	0165H
	DD	0bf080H
	DD	0169H
	DD	05f420H
	DD	0ffffffH
	DD	0461a0H
	DD	0462a0H
	DD	0463a0H
	DD	0464a0H
	DD	0465a0H
	DD	060f400H
	DD	012H
	DD	061f400H
	DD	02971H
	DD	062f400H
	DD	0818H
	DD	0638100H
	DD	0bf080H
	DD	0dbH
	DD	056f400H
	DD	012H
	DD	0bf080H
	DD	0126H
	DD	0a0481H
	DD	09dH
	DD	060f400H
	DD	0cH
	DD	056f400H
	DD	080H
	DD	0448000H
	DD	0200040H
	DD	021d100H
	DD	0448200H
	DD	0209200H
	DD	0638300H
	DD	0bf080H
	DD	0dbH
	DD	056f400H
	DD	0cH
	DD	0bf080H
	DD	0126H
	DD	044f400H
	DD	00H
	DD	0440400H
	DD	056f400H
	DD	018H
	DD	0bf080H
	DD	0126H
	DD	0cH
	DD	064f400H
	DD	025H
	DD	044f400H
	DD	08000H
	DD	061f400H
	DD	024H
	DD	0446100H
	DD	056f400H
	DD	02cH
	DD	062f400H
	DD	0ccH
	DD	060690H
	DD	017H
	DD	0565c00H
	DD	0140c0H
	DD	07H
	DD	044f400H
	DD	059d2H
	DD	0445c00H
	DD	044f400H
	DD	020H
	DD	0445c00H
	DD	07da84H
	DD	0445c00H
	DD	044f400H
	DD	00H
	DD	0445c00H
	DD	057e100H
	DD	0575c00H
	DD	0140c8H
	DD	0800H
	DD	0576100H
	DD	044f400H
	DD	07ffH
	DD	0445c00H
	DD	056f400H
	DD	025H
	DD	0bf080H
	DD	0d2H
	DD	0140c0H
	DD	023H
	DD	021d400H
	DD	044f400H
	DD	04000H
	DD	0445c00H
	DD	0cH
	DD	01400H
	DD	01440H
	DD	01420H
	DD	01480H
	DD	014a0H
	DD	01460H
	DD	0d1080H
	DD	038H
	DD	08f497H
	DD	00H
	DD	0140c6H
	DD	03fffH
	DD	08ce15H
	DD	08ce14H
	DD	0cH
	DD	0220e00H
	DD	0140c6H
	DD	03fffH
	DD	0140c2H
	DD	04000H
	DD	02008eH
	DD	056f400H
	DD	059e0H
	DD	0200ceH
	DD	0a7093H
	DD	02H
	DD	0a7091H
	DD	03H
	DD	0a7092H
	DD	04H
	DD	0cH
	DD	0220e00H
	DD	0140c6H
	DD	03fffH
	DD	0140c2H
	DD	04000H
	DD	02008eH
	DD	056f400H
	DD	059e2H
	DD	0200ceH
	DD	0a7093H
	DD	02H
	DD	0a7091H
	DD	03H
	DD	0a7092H
	DD	04H
	DD	0cH
	DD	08f496H
	DD	01H
	DD	0cd604H
	DD	00H
	DD	0cH
	DD	08f496H
	DD	02H
	DD	0cd624H
	DD	00H
	DD	0cH
	DD	08f496H
	DD	03H
	DD	0cd603H
	DD	00H
	DD	0cH
	DD	08f496H
	DD	02H
	DD	0cd624H
	DD	00H
	DD	08f496H
	DD	03H
	DD	0cd603H
	DD	00H
	DD	0cH
	DD	08f496H
	DD	04H
	DD	0cd623H
	DD	00H
	DD	0cH
	DD	08f496H
	DD	04H
	DD	0cd623H
	DD	00H
	DD	08f496H
	DD	01H
	DD	0cd604H
	DD	00H
	DD	0cH
	DD	0cc507H
	DD	00H
	DD	08f485H
	DD	080H
	DD	0cH
	DD	050bc4H
	DD	0140c6H
	DD	0ffdfffH
	DD	08ce14H
	DD	050bceH
	DD	050bd6H
	DD	0cH
	DD	050b9dH
	DD	0140c6H
	DD	0ffdfffH
	DD	08ce14H
	DD	050bc7H
	DD	0cH
	DD	0220e00H
	DD	0140c6H
	DD	03fffH
	DD	0140c2H
	DD	04000H
	DD	02008eH
	DD	056f400H
	DD	05be2H
	DD	0200ceH
	DD	056f400H
	DD	020H
	DD	02088eH
	DD	0a7091H
	DD	03H
	DD	0a7092H
	DD	04H
	DD	0cH
	DD	0220e00H
	DD	0140c6H
	DD	03fffH
	DD	0140c2H
	DD	04000H
	DD	02008eH
	DD	056f400H
	DD	05be0H
	DD	0200ceH
	DD	056f400H
	DD	020H
	DD	02088eH
	DD	0a7091H
	DD	03H
	DD	0a7092H
	DD	04H
	DD	0cH
	DD	08f485H
	DD	0fffH
	DD	060f400H
	DD	00H
	DD	044f400H
	DD	01000H
	DD	0bf080H
	DD	0165H
	DD	0bf080H
	DD	0169H
	DD	0cH
	DD	0a8581H
	DD	0160H
	DD	08f485H
	DD	02H
	DD	0cH
	DD	0200013H
	DD	06c420H
	DD	0565800H
	DD	0cH
	DD	060f400H
	DD	00H
	DD	044f400H
	DD	0800H
	DD	0200013H
	DD	06c420H
	DD	05e5800H
	DD	0cH
	DD	00H
	DD	0cH
DSOUND_RW	ENDS
PUBLIC	?Initialize@CMcpxDspImage@DirectSound@@QAEXXZ	; DirectSound::CMcpxDspImage::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\gpdsp.cpp
;	COMDAT ?Initialize@CMcpxDspImage@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Initialize@CMcpxDspImage@DirectSound@@QAEXXZ PROC NEAR	; DirectSound::CMcpxDspImage::Initialize, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     //
; 45   :     // initialize all the effects here
; 46   :     //
; 47   : 
; 48   :     m_pLoader = (PVOID)DefaultExec;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:_DefaultExec

; 49   :     m_uLoaderSize = sizeof(DefaultExec);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 cc 05
	00 00		 mov	 DWORD PTR [ecx+4], 1484	; 000005ccH

; 50   :    
; 51   : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?Initialize@CMcpxDspImage@DirectSound@@QAEXXZ ENDP	; DirectSound::CMcpxDspImage::Initialize
DSOUND	ENDS
PUBLIC	??0CMcpxGPDspManager@DirectSound@@QAE@XZ	; DirectSound::CMcpxGPDspManager::CMcpxGPDspManager
; Function compile flags: /Odt
;	COMDAT ??0CMcpxGPDspManager@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CMcpxGPDspManager@DirectSound@@QAE@XZ PROC NEAR	; DirectSound::CMcpxGPDspManager::CMcpxGPDspManager, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   :     m_pScratchDma = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 64   :     m_pDspImage = NULL;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 65   :     m_uPMemMaxSize = NV_PAPU_GPPMEM__SIZE_1;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 14 00 10
	00 00		 mov	 DWORD PTR [edx+20], 4096 ; 00001000H

; 66   :     m_uPMemOffset = 0;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 67   : 
; 68   :     m_dwCurrentLowestScratchOffset = MCPX_GLOBAL_PROC_SCRATCH_SIZE;

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	c7 41 18 00 80
	00 00		 mov	 DWORD PTR [ecx+24], 32768 ; 00008000H

; 69   :     m_dwStateSizeToCommit = 0;

  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 70   : 
; 71   : }

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0CMcpxGPDspManager@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxGPDspManager::CMcpxGPDspManager
DSOUND	ENDS
PUBLIC	??_GCMcpxDspScratchDma@DirectSound@@QAEPAXI@Z	; DirectSound::CMcpxDspScratchDma::`scalar deleting destructor'
PUBLIC	??1CMcpxGPDspManager@DirectSound@@QAE@XZ	; DirectSound::CMcpxGPDspManager::~CMcpxGPDspManager
; Function compile flags: /Odt
;	COMDAT ??1CMcpxGPDspManager@DirectSound@@QAE@XZ
DSOUND	SEGMENT
tv71 = -24
_this$ = -20
$T36152 = -16
$T36151 = -12
$T36148 = -8
$T36147 = -4
??1CMcpxGPDspManager@DirectSound@@QAE@XZ PROC NEAR	; DirectSound::CMcpxGPDspManager::~CMcpxGPDspManager, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 75   :     DELETE(m_pScratchDma);

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	74 35		 je	 SHORT $L35566
  00012	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00018	89 55 f8	 mov	 DWORD PTR $T36148[ebp], edx
  0001b	8b 45 f8	 mov	 eax, DWORD PTR $T36148[ebp]
  0001e	89 45 fc	 mov	 DWORD PTR $T36147[ebp], eax
  00021	83 7d fc 00	 cmp	 DWORD PTR $T36147[ebp], 0
  00025	74 0f		 je	 SHORT $L36149
  00027	6a 01		 push	 1
  00029	8b 4d fc	 mov	 ecx, DWORD PTR $T36147[ebp]
  0002c	e8 00 00 00 00	 call	 ??_GCMcpxDspScratchDma@DirectSound@@QAEPAXI@Z
  00031	89 45 e8	 mov	 DWORD PTR tv71[ebp], eax
  00034	eb 07		 jmp	 SHORT $L36150
$L36149:
  00036	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$L36150:
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L35566:

; 76   :     DELETE(m_pDspImage);

  00047	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0004e	74 1f		 je	 SHORT $L35569
  00050	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00056	89 4d f4	 mov	 DWORD PTR $T36151[ebp], ecx
  00059	8b 55 f4	 mov	 edx, DWORD PTR $T36151[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00062	83 c4 04	 add	 esp, 4
  00065	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$L35569:

; 77   : #ifndef MCPX_BOOT_LIB
; 78   :     DELETE(m_pFxDescriptor);

  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00076	74 1f		 je	 SHORT $L35565
  00078	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0007e	89 45 f0	 mov	 DWORD PTR $T36152[ebp], eax
  00081	8b 4d f0	 mov	 ecx, DWORD PTR $T36152[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008a	83 c4 04	 add	 esp, 4
  0008d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00090	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
$L35565:

; 79   : #endif
; 80   : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
??1CMcpxGPDspManager@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxGPDspManager::~CMcpxGPDspManager
DSOUND	ENDS
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
EXTRN	??1CMcpxDspScratchDma@DirectSound@@QAE@XZ:NEAR	; DirectSound::CMcpxDspScratchDma::~CMcpxDspScratchDma
; Function compile flags: /Odt
;	COMDAT ??_GCMcpxDspScratchDma@DirectSound@@QAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCMcpxDspScratchDma@DirectSound@@QAEPAXI@Z PROC NEAR	; DirectSound::CMcpxDspScratchDma::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMcpxDspScratchDma@DirectSound@@QAE@XZ ; DirectSound::CMcpxDspScratchDma::~CMcpxDspScratchDma
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L35576
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L35576:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMcpxDspScratchDma@DirectSound@@QAEPAXI@Z ENDP	; DirectSound::CMcpxDspScratchDma::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??0CMcpxDspImage@DirectSound@@QAE@XZ		; DirectSound::CMcpxDspImage::CMcpxDspImage
PUBLIC	?GetLoader@CMcpxDspImage@DirectSound@@QAEPAXXZ	; DirectSound::CMcpxDspImage::GetLoader
PUBLIC	?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ ; DirectSound::CMcpxDspImage::GetLoaderSize
PUBLIC	?Initialize@CMcpxGPDspManager@DirectSound@@QAEXXZ ; DirectSound::CMcpxGPDspManager::Initialize
PUBLIC	??_C@_0BA@ILKMEFEP@CMcpxDspImage?$CI?$CJ?$AA@	; `string'
PUBLIC	??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0M@PNGMNGCG@m_pDspImage?$AA@		; `string'
PUBLIC	??_C@_0BJ@MCMIBGDC@CMcpxDspScratchDma?$CITRUE?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0O@BBNBCNGF@m_pScratchDma?$AA@		; `string'
PUBLIC	??_C@_0FH@IHCLHFLG@FALSE?5?$CG?$CG?5?$CCCMcpxDspManager?3?3Initi@ ; `string'
PUBLIC	??_C@_0DO@FGGLJBIG@m_pDspImage?9?$DOGetLoaderSize?$CI?$CJ?5?$DM?5D@ ; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
EXTRN	??0CMcpxDspScratchDma@DirectSound@@QAE@H@Z:NEAR	; DirectSound::CMcpxDspScratchDma::CMcpxDspScratchDma
EXTRN	?Initialize@CMcpxDspScratchDma@DirectSound@@QAEXK@Z:NEAR ; DirectSound::CMcpxDspScratchDma::Initialize
EXTRN	?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z:NEAR ; DirectSound::CMcpxDspScratchDma::Copy
;	COMDAT ??_C@_0BA@ILKMEFEP@CMcpxDspImage?$CI?$CJ?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\gpdsp.cpp
DSOUND_RD	SEGMENT
??_C@_0BA@ILKMEFEP@CMcpxDspImage?$CI?$CJ?$AA@ DB 'CMcpxDspImage()', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\gpdsp.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@PNGMNGCG@m_pDspImage?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@PNGMNGCG@m_pDspImage?$AA@ DB 'm_pDspImage', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@MCMIBGDC@CMcpxDspScratchDma?$CITRUE?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@MCMIBGDC@CMcpxDspScratchDma?$CITRUE?$CJ?$AA@ DB 'CMcpxDspScratc'
	DB	'hDma(TRUE)', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@BBNBCNGF@m_pScratchDma?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@BBNBCNGF@m_pScratchDma?$AA@ DB 'm_pScratchDma', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FH@IHCLHFLG@FALSE?5?$CG?$CG?5?$CCCMcpxDspManager?3?3Initi@
DSOUND_RD	SEGMENT
??_C@_0FH@IHCLHFLG@FALSE?5?$CG?$CG?5?$CCCMcpxDspManager?3?3Initi@ DB 'FAL'
	DB	'SE && "CMcpxDspManager::Initialize - one of the objects could'
	DB	' not be constructed\n"', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@FGGLJBIG@m_pDspImage?9?$DOGetLoaderSize?$CI?$CJ?5?$DM?5D@
DSOUND_RD	SEGMENT
??_C@_0DO@FGGLJBIG@m_pDspImage?9?$DOGetLoaderSize?$CI?$CJ?5?$DM?5D@ DB 'm'
	DB	'_pDspImage->GetLoaderSize() < DSP_COMMANDBLOCK_SCRATCHOFFSET', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CMcpxGPDspManager@DirectSound@@QAEXXZ
DSOUND	SEGMENT
tv94 = -24
tv73 = -20
_this$ = -16
$T36165 = -12
$T36162 = -8
_uOffset$ = -4
?Initialize@CMcpxGPDspManager@DirectSound@@QAEXXZ PROC NEAR ; DirectSound::CMcpxGPDspManager::Initialize, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 85   :     //
; 86   :     // create the dsp table class that holds the code for all effects + loader
; 87   :     //
; 88   : 
; 89   :     m_pDspImage = NEW(CMcpxDspImage());

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@ILKMEFEP@CMcpxDspImage?$CI?$CJ?$AA@
  0000e	6a 59		 push	 89			; 00000059H
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00015	6a 08		 push	 8
  00017	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	89 45 f8	 mov	 DWORD PTR $T36162[ebp], eax
  00022	83 7d f8 00	 cmp	 DWORD PTR $T36162[ebp], 0
  00026	74 0d		 je	 SHORT $L36163
  00028	8b 4d f8	 mov	 ecx, DWORD PTR $T36162[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CMcpxDspImage@DirectSound@@QAE@XZ ; DirectSound::CMcpxDspImage::CMcpxDspImage
  00030	89 45 ec	 mov	 DWORD PTR tv73[ebp], eax
  00033	eb 07		 jmp	 SHORT $L36164
$L36163:
  00035	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L36164:
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d ec	 mov	 ecx, DWORD PTR tv73[ebp]
  00042	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 90   :     ASSERT(m_pDspImage);

  00045	6a 5a		 push	 90			; 0000005aH
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@PNGMNGCG@m_pDspImage?$AA@
  00051	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00054	33 c0		 xor	 eax, eax
  00056	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0005a	0f 94 c0	 sete	 al
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00063	83 c4 10	 add	 esp, 16			; 00000010H

; 91   : 
; 92   :     m_pDspImage->Initialize();

  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0006c	e8 00 00 00 00	 call	 ?Initialize@CMcpxDspImage@DirectSound@@QAEXXZ ; DirectSound::CMcpxDspImage::Initialize

; 93   : 
; 94   :     //
; 95   :     // allocate the scratch Dma, telling it we are the GP
; 96   :     //
; 97   : 
; 98   :     m_pScratchDma = NEW(CMcpxDspScratchDma(TRUE));

  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MCMIBGDC@CMcpxDspScratchDma?$CITRUE?$CJ?$AA@
  00076	6a 62		 push	 98			; 00000062H
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0007d	6a 28		 push	 40			; 00000028H
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	89 45 f4	 mov	 DWORD PTR $T36165[ebp], eax
  0008a	83 7d f4 00	 cmp	 DWORD PTR $T36165[ebp], 0
  0008e	74 0f		 je	 SHORT $L36166
  00090	6a 01		 push	 1
  00092	8b 4d f4	 mov	 ecx, DWORD PTR $T36165[ebp]
  00095	e8 00 00 00 00	 call	 ??0CMcpxDspScratchDma@DirectSound@@QAE@H@Z ; DirectSound::CMcpxDspScratchDma::CMcpxDspScratchDma
  0009a	89 45 e8	 mov	 DWORD PTR tv94[ebp], eax
  0009d	eb 07		 jmp	 SHORT $L36167
$L36166:
  0009f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$L36167:
  000a6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	8b 45 e8	 mov	 eax, DWORD PTR tv94[ebp]
  000ac	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 99   :     ASSERT(m_pScratchDma);

  000af	6a 63		 push	 99			; 00000063H
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@BBNBCNGF@m_pScratchDma?$AA@
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	33 d2		 xor	 edx, edx
  000c0	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000c4	0f 94 c2	 sete	 dl
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000cd	83 c4 10	 add	 esp, 16			; 00000010H

; 100  : 
; 101  :     //
; 102  :     // initialize scratch space handler
; 103  :     //
; 104  : 
; 105  :     m_pScratchDma->Initialize(MCPX_HW_AC3_NUM_INPUT_PAGES+MCPX_HW_MULTIPASS_NUM_PAGES+MCPX_HW_MAX_FX_SCRATCH_PAGES);

  000d0	68 04 02 00 00	 push	 516			; 00000204H
  000d5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000db	e8 00 00 00 00	 call	 ?Initialize@CMcpxDspScratchDma@DirectSound@@QAEXK@Z ; DirectSound::CMcpxDspScratchDma::Initialize

; 106  :     
; 107  :     if (!m_pScratchDma)

  000e0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000e7	75 18		 jne	 SHORT $L35589

; 108  :     {
; 109  :         ASSERT(FALSE && "CMcpxDspManager::Initialize - one of the objects could not be constructed\n");

  000e9	6a 6d		 push	 109			; 0000006dH
  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FH@IHCLHFLG@FALSE?5?$CG?$CG?5?$CCCMcpxDspManager?3?3Initi@
  000f5	6a 01		 push	 1
  000f7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000fc	83 c4 10	 add	 esp, 16			; 00000010H

; 110  :         return;

  000ff	eb 56		 jmp	 SHORT $L35579
$L35589:

; 111  :     }
; 112  :     
; 113  :     ULONG uOffset = 0;

  00101	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _uOffset$[ebp], 0

; 114  : 
; 115  :     ASSERT(m_pDspImage->GetLoaderSize() < DSP_COMMANDBLOCK_SCRATCHOFFSET);

  00108	6a 73		 push	 115			; 00000073H
  0010a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@FGGLJBIG@m_pDspImage?9?$DOGetLoaderSize?$CI?$CJ?5?$DM?5D@
  00114	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00117	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0011a	e8 00 00 00 00	 call	 ?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ ; DirectSound::CMcpxDspImage::GetLoaderSize
  0011f	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00124	1b c0		 sbb	 eax, eax
  00126	40		 inc	 eax
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0012d	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 
; 117  :     //
; 118  :     // load a default exec program to get the GP pumping data to system memory
; 119  :     //
; 120  :     
; 121  :     m_pScratchDma->Copy(uOffset,
; 122  :                         (VOID *)m_pDspImage->GetLoader(),
; 123  :                         m_pDspImage->GetLoaderSize());

  00130	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00136	e8 00 00 00 00	 call	 ?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ ; DirectSound::CMcpxDspImage::GetLoaderSize
  0013b	50		 push	 eax
  0013c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00142	e8 00 00 00 00	 call	 ?GetLoader@CMcpxDspImage@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspImage::GetLoader
  00147	50		 push	 eax
  00148	8b 45 fc	 mov	 eax, DWORD PTR _uOffset$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00152	e8 00 00 00 00	 call	 ?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z ; DirectSound::CMcpxDspScratchDma::Copy
$L35579:

; 124  : 
; 125  :     return ;
; 126  : 
; 127  : }

  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
?Initialize@CMcpxGPDspManager@DirectSound@@QAEXXZ ENDP	; DirectSound::CMcpxGPDspManager::Initialize
DSOUND	ENDS
EXTRN	?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemAlloc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  :     return DirectSound::CMemoryManager::TrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc

; 234  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\gpdsp.h
DSOUND	ENDS
;	COMDAT ??0CMcpxDspImage@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CMcpxDspImage@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CMcpxDspImage::CMcpxDspImage, COMDAT
; _this$ = ecx

; 36   :         CMcpxDspImage()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   :         {
; 38   :             m_pLoader = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 39   :             m_uLoaderSize = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 40   :         }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CMcpxDspImage@DirectSound@@QAE@XZ ENDP		; DirectSound::CMcpxDspImage::CMcpxDspImage
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetLoader@CMcpxDspImage@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT
_this$ = -4
?GetLoader@CMcpxDspImage@DirectSound@@QAEPAXXZ PROC NEAR ; DirectSound::CMcpxDspImage::GetLoader, COMDAT
; _this$ = ecx

; 44   :         PVOID       GetLoader() { return m_pLoader; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetLoader@CMcpxDspImage@DirectSound@@QAEPAXXZ ENDP	; DirectSound::CMcpxDspImage::GetLoader
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ
DSOUND	SEGMENT
_this$ = -4
?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ PROC NEAR ; DirectSound::CMcpxDspImage::GetLoaderSize, COMDAT
; _this$ = ecx

; 45   :         ULONG       GetLoaderSize() { return m_uLoaderSize; }    

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ ENDP	; DirectSound::CMcpxDspImage::GetLoaderSize
DSOUND	ENDS
PUBLIC	?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
PUBLIC	?DownloadEffectsImage@CMcpxGPDspManager@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z ; DirectSound::CMcpxGPDspManager::DownloadEffectsImage
PUBLIC	?ParseEffectImageInfo@CMcpxGPDspManager@DirectSound@@IAEJPBX@Z ; DirectSound::CMcpxGPDspManager::ParseEffectImageInfo
PUBLIC	??_C@_0FC@FHPIIHBL@dwImageSize?5?$DO?5?$CIDSP_COMMANDBLOCK_@ ; `string'
PUBLIC	??_C@_0DI@MMJFHDOJ@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@ ; `string'
PUBLIC	??_C@_0DO@MOADBLC@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@ ; `string'
PUBLIC	??_C@_0CN@HNLHAKKM@dwImageSize?5?$DM?$DN?5MCPX_GLOBAL_PROC_@ ; `string'
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0FC@FHPIIHBL@dwImageSize?5?$DO?5?$CIDSP_COMMANDBLOCK_@
; File c:\xbox\private\windows\directx\dsound\dsound\gpdsp.cpp
DSOUND_RD	SEGMENT
??_C@_0FC@FHPIIHBL@dwImageSize?5?$DO?5?$CIDSP_COMMANDBLOCK_@ DB 'dwImageS'
	DB	'ize > (DSP_COMMANDBLOCK_SCRATCHOFFSET + sizeof(HOST_TO_DSP_CO'
	DB	'MMANDBLOCK))', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MMJFHDOJ@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@
DSOUND_RD	SEGMENT
??_C@_0DI@MMJFHDOJ@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@ DB 'pCmdBlo'
	DB	'ck->dwCommandFlags & BIT_H2DCB_COMMAND_LOAD_CODE', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DO@MOADBLC@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@
DSOUND_RD	SEGMENT
??_C@_0DO@MOADBLC@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@ DB 'pCmdBloc'
	DB	'k->dwCommandFlags & BIT_H2DCB_COMMAND_LOAD_XRAM_STATE', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@HNLHAKKM@dwImageSize?5?$DM?$DN?5MCPX_GLOBAL_PROC_@
DSOUND_RD	SEGMENT
??_C@_0CN@HNLHAKKM@dwImageSize?5?$DM?$DN?5MCPX_GLOBAL_PROC_@ DB 'dwImageS'
	DB	'ize <= MCPX_GLOBAL_PROC_SCRATCH_SIZE', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DownloadEffectsImage@CMcpxGPDspManager@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z
DSOUND	SEGMENT
_this$ = -16
_hr$ = -12
_pPrivateCmdBlock$ = -8
_pCmdBlock$ = -4
_pvImageBuffer$ = 8
_dwImageSize$ = 12
_ppImageDesc$ = 16
?DownloadEffectsImage@CMcpxGPDspManager@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::DownloadEffectsImage, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 136  : 
; 137  :     HRESULT hr = DS_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 138  : #ifndef MCPX_BOOT_LIB
; 139  : 
; 140  :     PHOST_TO_DSP_COMMANDBLOCK pCmdBlock;
; 141  : 
; 142  :     //
; 143  :     // do some basic validation of the image
; 144  :     // this should be the image generated by our XPS2 tool..
; 145  :     //
; 146  : 
; 147  :     ASSERT(dwImageSize > (DSP_COMMANDBLOCK_SCRATCHOFFSET + sizeof(HOST_TO_DSP_COMMANDBLOCK)));

  00010	68 93 00 00 00	 push	 147			; 00000093H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FC@FHPIIHBL@dwImageSize?5?$DO?5?$CIDSP_COMMANDBLOCK_@
  0001f	b8 18 08 00 00	 mov	 eax, 2072		; 00000818H
  00024	3b 45 0c	 cmp	 eax, DWORD PTR _dwImageSize$[ebp]
  00027	1b c9		 sbb	 ecx, ecx
  00029	41		 inc	 ecx
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 148  : 
; 149  :     //
; 150  :     // verify that command block is preset for instructing the DSP to download new
; 151  :     // code and state
; 152  :     //
; 153  : 
; 154  :     pCmdBlock = (PHOST_TO_DSP_COMMANDBLOCK) ((PUCHAR)pvImageBuffer + DSP_COMMANDBLOCK_SCRATCHOFFSET);

  00033	8b 55 08	 mov	 edx, DWORD PTR _pvImageBuffer$[ebp]
  00036	81 c2 00 08 00
	00		 add	 edx, 2048		; 00000800H
  0003c	89 55 fc	 mov	 DWORD PTR _pCmdBlock$[ebp], edx

; 155  : 
; 156  :     ASSERT(pCmdBlock->dwCommandFlags & BIT_H2DCB_COMMAND_LOAD_CODE);

  0003f	68 9c 00 00 00	 push	 156			; 0000009cH
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@MMJFHDOJ@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  00051	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00054	83 e1 01	 and	 ecx, 1
  00057	f7 d9		 neg	 ecx
  00059	1b c9		 sbb	 ecx, ecx
  0005b	41		 inc	 ecx
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00062	83 c4 10	 add	 esp, 16			; 00000010H

; 157  :     ASSERT(pCmdBlock->dwCommandFlags & BIT_H2DCB_COMMAND_LOAD_XRAM_STATE);

  00065	68 9d 00 00 00	 push	 157			; 0000009dH
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@MOADBLC@pCmdBlock?9?$DOdwCommandFlags?5?$CG?5BIT_@
  00074	8b 55 fc	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  00077	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0007a	83 e0 02	 and	 eax, 2
  0007d	f7 d8		 neg	 eax
  0007f	1b c0		 sbb	 eax, eax
  00081	40		 inc	 eax
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00088	83 c4 10	 add	 esp, 16			; 00000010H

; 158  : 
; 159  :     ASSERT(dwImageSize <= MCPX_GLOBAL_PROC_SCRATCH_SIZE);

  0008b	68 9f 00 00 00	 push	 159			; 0000009fH
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HNLHAKKM@dwImageSize?5?$DM?$DN?5MCPX_GLOBAL_PROC_@
  0009a	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  0009f	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwImageSize$[ebp]
  000a2	1b d2		 sbb	 edx, edx
  000a4	f7 da		 neg	 edx
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ac	83 c4 10	 add	 esp, 16			; 00000010H

; 160  : 
; 161  :     //
; 162  :     // proceed to copy the buffer they passed us into offset 0 of scratch memory
; 163  :     // first zero out the flags in the command block so the dsp does not attempt
; 164  :     // to download yet
; 165  :     //
; 166  : 
; 167  :     PHOST_TO_DSP_COMMANDBLOCK pPrivateCmdBlock = (PHOST_TO_DSP_COMMANDBLOCK) ((PUCHAR)m_pScratchDma->GetScratchSpaceLinAddr() + DSP_COMMANDBLOCK_SCRATCHOFFSET);

  000af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b5	e8 00 00 00 00	 call	 ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
  000ba	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  000bf	89 45 f8	 mov	 DWORD PTR _pPrivateCmdBlock$[ebp], eax

; 168  :     memset(pPrivateCmdBlock,0,sizeof(HOST_TO_DSP_COMMANDBLOCK));

  000c2	6a 18		 push	 24			; 00000018H
  000c4	6a 00		 push	 0
  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _pPrivateCmdBlock$[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 _memset
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 169  : 
; 170  :     //
; 171  :     // copy their image into two parts: 1st part is the command block, second is the rest
; 172  :     // we dont copy the flags since we want them 0 in the scratch image
; 173  :     //
; 174  : 
; 175  :     pPrivateCmdBlock->dwOffset = pCmdBlock->dwOffset;

  000d2	8b 55 f8	 mov	 edx, DWORD PTR _pPrivateCmdBlock$[ebp]
  000d5	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  000d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000da	89 0a		 mov	 DWORD PTR [edx], ecx

; 176  :     pPrivateCmdBlock->dwCodeLength = pCmdBlock->dwCodeLength;

  000dc	8b 55 f8	 mov	 edx, DWORD PTR _pPrivateCmdBlock$[ebp]
  000df	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  000e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e5	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 177  :     pPrivateCmdBlock->dwStateOffset = pCmdBlock->dwStateOffset;

  000e8	8b 55 f8	 mov	 edx, DWORD PTR _pPrivateCmdBlock$[ebp]
  000eb	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  000ee	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f1	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 178  :     pPrivateCmdBlock->dwStateLength = pCmdBlock->dwStateLength;

  000f4	8b 55 f8	 mov	 edx, DWORD PTR _pPrivateCmdBlock$[ebp]
  000f7	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  000fa	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000fd	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 179  :     pPrivateCmdBlock->dwDspStatus = pCmdBlock->dwDspStatus;

  00100	8b 55 f8	 mov	 edx, DWORD PTR _pPrivateCmdBlock$[ebp]
  00103	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  00106	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00109	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 180  : 
; 181  :     m_pScratchDma->Copy(DSP_COMMANDBLOCK_SCRATCHOFFSET+sizeof(HOST_TO_DSP_COMMANDBLOCK),
; 182  :                         (PUCHAR)pCmdBlock+sizeof(HOST_TO_DSP_COMMANDBLOCK),
; 183  :                         dwImageSize - DSP_COMMANDBLOCK_SCRATCHOFFSET - sizeof(HOST_TO_DSP_COMMANDBLOCK));

  0010c	8b 55 0c	 mov	 edx, DWORD PTR _dwImageSize$[ebp]
  0010f	81 ea 18 08 00
	00		 sub	 edx, 2072		; 00000818H
  00115	52		 push	 edx
  00116	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  00119	83 c0 18	 add	 eax, 24			; 00000018H
  0011c	50		 push	 eax
  0011d	68 18 08 00 00	 push	 2072			; 00000818H
  00122	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00128	e8 00 00 00 00	 call	 ?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z ; DirectSound::CMcpxDspScratchDma::Copy

; 184  : 
; 185  :     //
; 186  :     // parse FX description array, to be used by the SetEffectData api
; 187  :     //
; 188  : 
; 189  :     hr = ParseEffectImageInfo(pvImageBuffer);

  0012d	8b 55 08	 mov	 edx, DWORD PTR _pvImageBuffer$[ebp]
  00130	52		 push	 edx
  00131	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?ParseEffectImageInfo@CMcpxGPDspManager@DirectSound@@IAEJPBX@Z ; DirectSound::CMcpxGPDspManager::ParseEffectImageInfo
  00139	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 190  :     if (FAILED(hr)){

  0013c	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00140	7d 05		 jge	 SHORT $L35622

; 191  :         return hr;

  00142	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
  00145	eb 29		 jmp	 SHORT $L35599
$L35622:

; 192  :     }
; 193  : 
; 194  :     if(ppImageDesc) {

  00147	83 7d 10 00	 cmp	 DWORD PTR _ppImageDesc$[ebp], 0
  0014b	74 0b		 je	 SHORT $L35623

; 195  :         *ppImageDesc = m_pFxDescriptor;

  0014d	8b 45 10	 mov	 eax, DWORD PTR _ppImageDesc$[ebp]
  00150	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00156	89 10		 mov	 DWORD PTR [eax], edx
$L35623:

; 196  :     }
; 197  : 
; 198  :     //
; 199  :     // we need to keep a cached version of the command block associated with this image
; 200  :     // We do this so if the user calls SetEffectData and then a delta panic occurs,
; 201  :     // we can restore the command block and re-download the original code from the
; 202  :     // correct offset
; 203  :     //
; 204  : 
; 205  :     memcpy(&m_InitialCmdBlock,pPrivateCmdBlock,sizeof(m_InitialCmdBlock));

  00158	6a 18		 push	 24			; 00000018H
  0015a	8b 45 f8	 mov	 eax, DWORD PTR _pPrivateCmdBlock$[ebp]
  0015d	50		 push	 eax
  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	83 c1 24	 add	 ecx, 36			; 00000024H
  00164	51		 push	 ecx
  00165	e8 00 00 00 00	 call	 _memcpy
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  : 
; 207  : #endif //MCPX_BOOT_LIB
; 208  : 
; 209  :     return hr;

  0016d	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
$L35599:

; 210  : 
; 211  : 
; 212  : }

  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 0c 00	 ret	 12			; 0000000cH
?DownloadEffectsImage@CMcpxGPDspManager@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z ENDP ; DirectSound::CMcpxGPDspManager::DownloadEffectsImage
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dspdma.h
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT
_this$ = -4
?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ PROC NEAR ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr, COMDAT
; _this$ = ecx

; 40   :         VOID *GetScratchSpaceLinAddr() { return m_pDmaBufferContext->VirtualAddress; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ENDP ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
DSOUND	ENDS
PUBLIC	?RestoreCommandBlock@CMcpxGPDspManager@DirectSound@@QAEXXZ ; DirectSound::CMcpxGPDspManager::RestoreCommandBlock
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\gpdsp.cpp
;	COMDAT ?RestoreCommandBlock@CMcpxGPDspManager@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -8
_pPrivateCmdBlock$ = -4
?RestoreCommandBlock@CMcpxGPDspManager@DirectSound@@QAEXXZ PROC NEAR ; DirectSound::CMcpxGPDspManager::RestoreCommandBlock, COMDAT
; _this$ = ecx

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 216  : 
; 217  :     PHOST_TO_DSP_COMMANDBLOCK pPrivateCmdBlock = (PHOST_TO_DSP_COMMANDBLOCK) ((PUCHAR)m_pScratchDma->GetScratchSpaceLinAddr() + DSP_COMMANDBLOCK_SCRATCHOFFSET);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	e8 00 00 00 00	 call	 ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
  00014	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  00019	89 45 fc	 mov	 DWORD PTR _pPrivateCmdBlock$[ebp], eax

; 218  : 
; 219  :     pPrivateCmdBlock->dwCommandFlags = 0;

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _pPrivateCmdBlock$[ebp]
  0001f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 220  :     memcpy(pPrivateCmdBlock,&m_InitialCmdBlock,sizeof(m_InitialCmdBlock));

  00026	6a 18		 push	 24			; 00000018H
  00028	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	83 c2 24	 add	 edx, 36			; 00000024H
  0002e	52		 push	 edx
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _pPrivateCmdBlock$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _memcpy
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 221  : 
; 222  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?RestoreCommandBlock@CMcpxGPDspManager@DirectSound@@QAEXXZ ENDP ; DirectSound::CMcpxGPDspManager::RestoreCommandBlock
DSOUND	ENDS
PUBLIC	?GetFxScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetFxScratchSpaceLinAddr
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0BH@HIAHEHDN@BYTE?$FLdwDescriptorSize?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CE@DNFDBHCJ@Keyblock?5decode?5failed?5with?5hr?5?$DN@ ; `string'
PUBLIC	??_C@_0CG@KLLIOBPM@code?5block?5decode?5failed?5with?5hr@ ; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	?XAudiopUtility_Decode@@YGHPAE0K0H@Z:NEAR	; XAudiopUtility_Decode
EXTRN	?XAudiopUtility_GenerateKey@@YGXPAE@Z:NEAR	; XAudiopUtility_GenerateKey
EXTRN	?AdjustFxScratch@CMcpxDspScratchDma@DirectSound@@QAEJK@Z:NEAR ; DirectSound::CMcpxDspScratchDma::AdjustFxScratch
;	COMDAT ??_C@_0BH@HIAHEHDN@BYTE?$FLdwDescriptorSize?$FN?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@HIAHEHDN@BYTE?$FLdwDescriptorSize?$FN?$AA@ DB 'BYTE[dwDescripto'
	DB	'rSize]', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@DNFDBHCJ@Keyblock?5decode?5failed?5with?5hr?5?$DN@
DSOUND_RD	SEGMENT
??_C@_0CE@DNFDBHCJ@Keyblock?5decode?5failed?5with?5hr?5?$DN@ DB 'Keyblock'
	DB	' decode failed with hr = %x', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@KLLIOBPM@code?5block?5decode?5failed?5with?5hr@
DSOUND_RD	SEGMENT
??_C@_0CG@KLLIOBPM@code?5block?5decode?5failed?5with?5hr@ DB 'code block '
	DB	'decode failed with hr = %x', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?ParseEffectImageInfo@CMcpxGPDspManager@DirectSound@@IAEJPBX@Z
DSOUND	SEGMENT
tv180 = -72
tv152 = -68
_this$ = -64
$T36193 = -60
$T36192 = -56
_i$35674 = -52
_szKey$ = -48
_dwDescriptorSize$ = -40
_dwValue$ = -36
_err$ = -32
_hr$ = -28
_pKeyBlock$ = -24
_dwFxScratchSize$ = -20
_pdwflags$ = -16
_pDescriptor$ = -12
_pCmdBlock$ = -8
_pCodeBlock$ = -4
_pScratchImage$ = 8
?ParseEffectImageInfo@CMcpxGPDspManager@DirectSound@@IAEJPBX@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::ParseEffectImageInfo, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 226  :     DWORD dwValue;
; 227  :     HRESULT hr = S_OK;

  00009	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 228  : 
; 229  : #ifndef MCPX_BOOT_LIB
; 230  : 
; 231  :     //
; 232  :     // retrieve and cache the FX description array
; 233  :     // We will use it later when the game calls the UpdateEffectParameters API
; 234  :     //
; 235  : 
; 236  :     LPDSEFFECTIMAGEDESC pDescriptor;
; 237  :     UCHAR szKey[8];
; 238  :     int err;
; 239  :     DWORD dwFxScratchSize = 0;

  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwFxScratchSize$[ebp], 0

; 240  : 
; 241  :     PUCHAR pCodeBlock;
; 242  :     PUCHAR pKeyBlock;
; 243  : 
; 244  :     PHOST_TO_DSP_COMMANDBLOCK pCmdBlock = (PHOST_TO_DSP_COMMANDBLOCK) ((PUCHAR)m_pScratchDma->GetScratchSpaceLinAddr() + DSP_COMMANDBLOCK_SCRATCHOFFSET);

  00017	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001d	e8 00 00 00 00	 call	 ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
  00022	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  00027	89 45 f8	 mov	 DWORD PTR _pCmdBlock$[ebp], eax

; 245  : 
; 246  :     pDescriptor = (LPDSEFFECTIMAGEDESC) ((PUCHAR)m_pScratchDma->GetScratchSpaceLinAddr() +
; 247  :         DSP_COMMANDBLOCK_SCRATCHOFFSET +\
; 248  :         sizeof(HOST_TO_DSP_COMMANDBLOCK) +\
; 249  :         (pCmdBlock->dwCodeLength*sizeof(DWORD)) +\
; 250  :         (pCmdBlock->dwStateLength*sizeof(DWORD)) );

  0002a	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00030	e8 00 00 00 00	 call	 ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
  00035	8b 55 f8	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  00038	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0003b	8d 94 88 18 08
	00 00		 lea	 edx, DWORD PTR [eax+ecx*4+2072]
  00042	8b 45 f8	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  00045	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00048	8d 14 8a	 lea	 edx, DWORD PTR [edx+ecx*4]
  0004b	89 55 f4	 mov	 DWORD PTR _pDescriptor$[ebp], edx

; 251  : 
; 252  : 
; 253  : 	//
; 254  : 	// initialize descriptor
; 255  : 	//
; 256  : 
; 257  : 	DWORD dwDescriptorSize = sizeof(DSEFFECTIMAGEDESC) + 
; 258  : 		sizeof(DSEFFECTMAP)*(pDescriptor->dwEffectCount-1);

  0004e	8b 45 f4	 mov	 eax, DWORD PTR _pDescriptor$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	83 e9 01	 sub	 ecx, 1
  00056	c1 e1 05	 shl	 ecx, 5
  00059	83 c1 28	 add	 ecx, 40			; 00000028H
  0005c	89 4d d8	 mov	 DWORD PTR _dwDescriptorSize$[ebp], ecx

; 259  : 
; 260  : 
; 261  :     if (m_pFxDescriptor != NULL) {

  0005f	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00062	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  00066	74 28		 je	 SHORT $L35654

; 262  : 
; 263  :         DELETE(m_pFxDescriptor);

  00068	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0006f	74 1f		 je	 SHORT $L35654
  00071	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00077	89 55 c8	 mov	 DWORD PTR $T36192[ebp], edx
  0007a	8b 45 c8	 mov	 eax, DWORD PTR $T36192[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00083	83 c4 04	 add	 esp, 4
  00086	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
$L35654:

; 264  :         
; 265  :     }
; 266  : 
; 267  :     m_pFxDescriptor = (LPDSEFFECTIMAGEDESC) NEW(BYTE[dwDescriptorSize]);

  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@HIAHEHDN@BYTE?$FLdwDescriptorSize?$FN?$AA@
  00095	68 0b 01 00 00	 push	 267			; 0000010bH
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0009f	8b 55 d8	 mov	 edx, DWORD PTR _dwDescriptorSize$[ebp]
  000a2	52		 push	 edx
  000a3	e8 00 00 00 00	 call	 ??_U@YAPAXIPBDK0@Z	; operator new[]
  000a8	83 c4 10	 add	 esp, 16			; 00000010H
  000ab	89 45 c4	 mov	 DWORD PTR $T36193[ebp], eax
  000ae	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 4d c4	 mov	 ecx, DWORD PTR $T36193[ebp]
  000b4	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 268  : 
; 269  :     if (m_pFxDescriptor == NULL) {

  000b7	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  000be	75 0a		 jne	 SHORT $L35661

; 270  :         return E_OUTOFMEMORY;

  000c0	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000c5	e9 c7 02 00 00	 jmp	 $L35633
$L35661:

; 271  :     }
; 272  : 
; 273  :     //
; 274  :     // check the scratch space usage for the FX chain
; 275  :     // adjust our ram allocation if required
; 276  :     //
; 277  : 
; 278  :     if (FAILED(hr = m_pScratchDma->AdjustFxScratch(pDescriptor->dwTotalScratchSize))){

  000ca	8b 45 f4	 mov	 eax, DWORD PTR _pDescriptor$[ebp]
  000cd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d0	51		 push	 ecx
  000d1	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000d4	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000d7	e8 00 00 00 00	 call	 ?AdjustFxScratch@CMcpxDspScratchDma@DirectSound@@QAEJK@Z ; DirectSound::CMcpxDspScratchDma::AdjustFxScratch
  000dc	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
  000df	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e3	7d 08		 jge	 SHORT $L35664

; 279  :         return hr;

  000e5	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
  000e8	e9 a4 02 00 00	 jmp	 $L35633
$L35664:

; 280  :     }
; 281  : 
; 282  :     //
; 283  :     // we will have to decode the dsp code words since each one
; 284  :     // is encrypted, using a different dsp dev supplied key.
; 285  :     // we do in-place decryption
; 286  :     //
; 287  : 
; 288  :     pCodeBlock = (PUCHAR)pCmdBlock + sizeof(HOST_TO_DSP_COMMANDBLOCK);

  000ed	8b 45 f8	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  000f0	83 c0 18	 add	 eax, 24			; 00000018H
  000f3	89 45 fc	 mov	 DWORD PTR _pCodeBlock$[ebp], eax

; 289  :     pKeyBlock = (PUCHAR)pDescriptor + dwDescriptorSize;

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  000f9	03 4d d8	 add	 ecx, DWORD PTR _dwDescriptorSize$[ebp]
  000fc	89 4d e8	 mov	 DWORD PTR _pKeyBlock$[ebp], ecx

; 290  : 
; 291  :     //
; 292  :     // decode keys used to encrypt block
; 293  :     //
; 294  : 
; 295  : 	XAudiopUtility_GenerateKey(szKey);

  000ff	8d 55 d0	 lea	 edx, DWORD PTR _szKey$[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 ?XAudiopUtility_GenerateKey@@YGXPAE@Z ; XAudiopUtility_GenerateKey

; 296  : 
; 297  : 	err = XAudiopUtility_Decode(szKey,
; 298  : 		pKeyBlock,
; 299  : 		KEY_SIZE*pDescriptor->dwEffectCount,
; 300  : 		pKeyBlock,
; 301  : 		FALSE);

  00108	6a 00		 push	 0
  0010a	8b 45 e8	 mov	 eax, DWORD PTR _pKeyBlock$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  00111	8b 11		 mov	 edx, DWORD PTR [ecx]
  00113	c1 e2 03	 shl	 edx, 3
  00116	52		 push	 edx
  00117	8b 45 e8	 mov	 eax, DWORD PTR _pKeyBlock$[ebp]
  0011a	50		 push	 eax
  0011b	8d 4d d0	 lea	 ecx, DWORD PTR _szKey$[ebp]
  0011e	51		 push	 ecx
  0011f	e8 00 00 00 00	 call	 ?XAudiopUtility_Decode@@YGHPAE0K0H@Z ; XAudiopUtility_Decode
  00124	89 45 e0	 mov	 DWORD PTR _err$[ebp], eax

; 302  : 	
; 303  :     hr = HRESULT_FROM_WIN32(err);

  00127	83 7d e0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0012b	7f 08		 jg	 SHORT $L36194
  0012d	8b 55 e0	 mov	 edx, DWORD PTR _err$[ebp]
  00130	89 55 bc	 mov	 DWORD PTR tv152[ebp], edx
  00133	eb 15		 jmp	 SHORT $L36195
$L36194:
  00135	8b 45 e0	 mov	 eax, DWORD PTR _err$[ebp]
  00138	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0013d	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  00142	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00147	89 45 bc	 mov	 DWORD PTR tv152[ebp], eax
$L36195:
  0014a	8b 4d bc	 mov	 ecx, DWORD PTR tv152[ebp]
  0014d	89 4d e4	 mov	 DWORD PTR _hr$[ebp], ecx

; 304  :     if (FAILED(hr)) {

  00150	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00154	7d 36		 jge	 SHORT $L35672

; 305  :         DPF_ERROR("Keyblock decode failed with hr = %x",hr);

  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0015b	6a 00		 push	 0
  0015d	68 31 01 00 00	 push	 305			; 00000131H
  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00167	6a 01		 push	 1
  00169	6a 09		 push	 9
  0016b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00170	83 c4 18	 add	 esp, 24			; 00000018H
  00173	8b 55 e4	 mov	 edx, DWORD PTR _hr$[ebp]
  00176	52		 push	 edx
  00177	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@DNFDBHCJ@Keyblock?5decode?5failed?5with?5hr?5?$DN@
  0017c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00181	83 c4 08	 add	 esp, 8

; 306  :         return hr;

  00184	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
  00187	e9 05 02 00 00	 jmp	 $L35633
$L35672:

; 307  :     }
; 308  : 
; 309  :     //
; 310  :     // we need to convert all offsets in FX description elements
; 311  :     // from relative (the tool creates relative offsets) to absolute
; 312  :     // This way the caller can treat the LPVOIDs into State, Ymem, Code
; 313  :     // as normal virtual memory pointers. 
; 314  :     //
; 315  : 
; 316  :     for (ULONG i=0;i<pDescriptor->dwEffectCount;i++) {

  0018c	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _i$35674[ebp], 0
  00193	eb 09		 jmp	 SHORT $L35675
$L35676:
  00195	8b 45 cc	 mov	 eax, DWORD PTR _i$35674[ebp]
  00198	83 c0 01	 add	 eax, 1
  0019b	89 45 cc	 mov	 DWORD PTR _i$35674[ebp], eax
$L35675:
  0019e	8b 4d f4	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  001a1	8b 55 cc	 mov	 edx, DWORD PTR _i$35674[ebp]
  001a4	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001a6	0f 83 af 01 00
	00		 jae	 $L35677

; 317  : 
; 318  :         //
; 319  :         // decode key block in place using appropriate key
; 320  :         //
; 321  : 
; 322  :         err = XAudiopUtility_Decode((pKeyBlock+i*KEY_SIZE),
; 323  :             pCodeBlock,
; 324  :             pDescriptor->aEffectMaps[i].dwCodeSize,
; 325  :             pCodeBlock,
; 326  :             FALSE);

  001ac	6a 00		 push	 0
  001ae	8b 45 fc	 mov	 eax, DWORD PTR _pCodeBlock$[ebp]
  001b1	50		 push	 eax
  001b2	8b 4d cc	 mov	 ecx, DWORD PTR _i$35674[ebp]
  001b5	c1 e1 05	 shl	 ecx, 5
  001b8	8b 55 f4	 mov	 edx, DWORD PTR _pDescriptor$[ebp]
  001bb	8b 44 0a 0c	 mov	 eax, DWORD PTR [edx+ecx+12]
  001bf	50		 push	 eax
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _pCodeBlock$[ebp]
  001c3	51		 push	 ecx
  001c4	8b 55 cc	 mov	 edx, DWORD PTR _i$35674[ebp]
  001c7	8b 45 e8	 mov	 eax, DWORD PTR _pKeyBlock$[ebp]
  001ca	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 ?XAudiopUtility_Decode@@YGHPAE0K0H@Z ; XAudiopUtility_Decode
  001d3	89 45 e0	 mov	 DWORD PTR _err$[ebp], eax

; 327  :         
; 328  :         hr = HRESULT_FROM_WIN32(err);

  001d6	83 7d e0 00	 cmp	 DWORD PTR _err$[ebp], 0
  001da	7f 08		 jg	 SHORT $L36196
  001dc	8b 55 e0	 mov	 edx, DWORD PTR _err$[ebp]
  001df	89 55 b8	 mov	 DWORD PTR tv180[ebp], edx
  001e2	eb 15		 jmp	 SHORT $L36197
$L36196:
  001e4	8b 45 e0	 mov	 eax, DWORD PTR _err$[ebp]
  001e7	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001ec	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  001f1	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  001f6	89 45 b8	 mov	 DWORD PTR tv180[ebp], eax
$L36197:
  001f9	8b 4d b8	 mov	 ecx, DWORD PTR tv180[ebp]
  001fc	89 4d e4	 mov	 DWORD PTR _hr$[ebp], ecx

; 329  :         if (FAILED(hr)) {

  001ff	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00203	7d 36		 jge	 SHORT $L35682

; 330  :             DPF_ERROR("code block decode failed with hr = %x",hr);

  00205	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0020a	6a 00		 push	 0
  0020c	68 4a 01 00 00	 push	 330			; 0000014aH
  00211	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00216	6a 01		 push	 1
  00218	6a 09		 push	 9
  0021a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0021f	83 c4 18	 add	 esp, 24			; 00000018H
  00222	8b 55 e4	 mov	 edx, DWORD PTR _hr$[ebp]
  00225	52		 push	 edx
  00226	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@KLLIOBPM@code?5block?5decode?5failed?5with?5hr@
  0022b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00230	83 c4 08	 add	 esp, 8

; 331  :             return hr;

  00233	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
  00236	e9 56 01 00 00	 jmp	 $L35633
$L35682:

; 332  :         }
; 333  : 
; 334  :         pCodeBlock += pDescriptor->aEffectMaps[i].dwCodeSize;

  0023b	8b 45 cc	 mov	 eax, DWORD PTR _i$35674[ebp]
  0023e	c1 e0 05	 shl	 eax, 5
  00241	8b 4d f4	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  00244	8b 55 fc	 mov	 edx, DWORD PTR _pCodeBlock$[ebp]
  00247	03 54 01 0c	 add	 edx, DWORD PTR [ecx+eax+12]
  0024b	89 55 fc	 mov	 DWORD PTR _pCodeBlock$[ebp], edx

; 335  : 
; 336  :         //
; 337  :         // convert code first
; 338  :         //
; 339  : 
; 340  :         dwValue = (DWORD) pDescriptor->aEffectMaps[i].lpvCodeSegment;

  0024e	8b 45 cc	 mov	 eax, DWORD PTR _i$35674[ebp]
  00251	c1 e0 05	 shl	 eax, 5
  00254	8b 4d f4	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  00257	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  0025b	89 55 dc	 mov	 DWORD PTR _dwValue$[ebp], edx

; 341  : 
; 342  :         //
; 343  :         // create a P-memory absolute address in bytes
; 344  :         //
; 345  : 
; 346  :         dwValue -= (DSP_COMMANDBLOCK_SCRATCHOFFSET+sizeof(HOST_TO_DSP_COMMANDBLOCK));

  0025e	8b 45 dc	 mov	 eax, DWORD PTR _dwValue$[ebp]
  00261	2d 18 08 00 00	 sub	 eax, 2072		; 00000818H
  00266	89 45 dc	 mov	 DWORD PTR _dwValue$[ebp], eax

; 347  : 
; 348  :         //
; 349  :         // the fx start after the default engine P-words
; 350  :         //
; 351  : 
; 352  :         dwValue += m_pDspImage->GetLoaderSize();

  00269	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0026c	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0026f	e8 00 00 00 00	 call	 ?GetLoaderSize@CMcpxDspImage@DirectSound@@QAEKXZ ; DirectSound::CMcpxDspImage::GetLoaderSize
  00274	8b 55 dc	 mov	 edx, DWORD PTR _dwValue$[ebp]
  00277	03 d0		 add	 edx, eax
  00279	89 55 dc	 mov	 DWORD PTR _dwValue$[ebp], edx

; 353  : 
; 354  :         //
; 355  :         // convert P-memory address to a MCPX base register space address
; 356  :         //
; 357  : 
; 358  :         dwValue += MCPX_HW_GPPMEM_REG_OFFSET;

  0027c	8b 45 dc	 mov	 eax, DWORD PTR _dwValue$[ebp]
  0027f	2d 00 60 7c 01	 sub	 eax, 24928256		; 017c6000H
  00284	89 45 dc	 mov	 DWORD PTR _dwValue$[ebp], eax

; 359  : 
; 360  :         pDescriptor->aEffectMaps[i].lpvCodeSegment = (LPVOID)dwValue;

  00287	8b 4d cc	 mov	 ecx, DWORD PTR _i$35674[ebp]
  0028a	c1 e1 05	 shl	 ecx, 5
  0028d	8b 55 f4	 mov	 edx, DWORD PTR _pDescriptor$[ebp]
  00290	8b 45 dc	 mov	 eax, DWORD PTR _dwValue$[ebp]
  00293	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax

; 361  : 
; 362  :         //
; 363  :         // do the same for Y memory. The tool creates absolute Ymem addresses
; 364  :         // so all we need to do is add the register space offset
; 365  :         //
; 366  : 
; 367  :         dwValue = (DWORD) pDescriptor->aEffectMaps[i].lpvYMemorySegment;

  00297	8b 4d cc	 mov	 ecx, DWORD PTR _i$35674[ebp]
  0029a	c1 e1 05	 shl	 ecx, 5
  0029d	8b 55 f4	 mov	 edx, DWORD PTR _pDescriptor$[ebp]
  002a0	8b 44 0a 18	 mov	 eax, DWORD PTR [edx+ecx+24]
  002a4	89 45 dc	 mov	 DWORD PTR _dwValue$[ebp], eax

; 368  : 
; 369  :         //
; 370  :         // convert Y-memory address to a MCPX base register space address
; 371  :         //
; 372  : 
; 373  :         dwValue += MCPX_HW_GPYMEM_REG_OFFSET;

  002a7	8b 4d dc	 mov	 ecx, DWORD PTR _dwValue$[ebp]
  002aa	81 e9 00 a0 7c
	01		 sub	 ecx, 24944640		; 017ca000H
  002b0	89 4d dc	 mov	 DWORD PTR _dwValue$[ebp], ecx

; 374  :         pDescriptor->aEffectMaps[i].lpvYMemorySegment = (LPVOID)dwValue;

  002b3	8b 55 cc	 mov	 edx, DWORD PTR _i$35674[ebp]
  002b6	c1 e2 05	 shl	 edx, 5
  002b9	8b 45 f4	 mov	 eax, DWORD PTR _pDescriptor$[ebp]
  002bc	8b 4d dc	 mov	 ecx, DWORD PTR _dwValue$[ebp]
  002bf	89 4c 10 18	 mov	 DWORD PTR [eax+edx+24], ecx

; 375  : 
; 376  :         //
; 377  :         // now convert X-memory relative address
; 378  :         //
; 379  : 
; 380  :         dwValue = (DWORD) pDescriptor->aEffectMaps[i].lpvStateSegment;

  002c3	8b 55 cc	 mov	 edx, DWORD PTR _i$35674[ebp]
  002c6	c1 e2 05	 shl	 edx, 5
  002c9	8b 45 f4	 mov	 eax, DWORD PTR _pDescriptor$[ebp]
  002cc	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  002d0	89 4d dc	 mov	 DWORD PTR _dwValue$[ebp], ecx

; 381  : 
; 382  :         //
; 383  :         // create a X-memory absolute address in bytes
; 384  :         //
; 385  : 
; 386  :         dwValue -= (DSP_COMMANDBLOCK_SCRATCHOFFSET+sizeof(HOST_TO_DSP_COMMANDBLOCK));

  002d3	8b 55 dc	 mov	 edx, DWORD PTR _dwValue$[ebp]
  002d6	81 ea 18 08 00
	00		 sub	 edx, 2072		; 00000818H
  002dc	89 55 dc	 mov	 DWORD PTR _dwValue$[ebp], edx

; 387  :         dwValue -= pCmdBlock->dwCodeLength*sizeof(DWORD);

  002df	8b 45 f8	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  002e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002e5	c1 e1 02	 shl	 ecx, 2
  002e8	8b 55 dc	 mov	 edx, DWORD PTR _dwValue$[ebp]
  002eb	2b d1		 sub	 edx, ecx
  002ed	89 55 dc	 mov	 DWORD PTR _dwValue$[ebp], edx

; 388  :         dwValue += DSP_FX_STATE_XMEMORY_BASE_OFFSET;

  002f0	8b 45 dc	 mov	 eax, DWORD PTR _dwValue$[ebp]
  002f3	05 00 02 00 00	 add	 eax, 512		; 00000200H
  002f8	89 45 dc	 mov	 DWORD PTR _dwValue$[ebp], eax

; 389  : 
; 390  :         //
; 391  :         // convert X-memory address to a MCPX base register space address
; 392  :         //
; 393  : 
; 394  :         dwValue += MCPX_HW_GPXMEM_REG_OFFSET;

  002fb	8b 4d dc	 mov	 ecx, DWORD PTR _dwValue$[ebp]
  002fe	81 e9 00 00 7d
	01		 sub	 ecx, 24969216		; 017d0000H
  00304	89 4d dc	 mov	 DWORD PTR _dwValue$[ebp], ecx

; 395  :         pDescriptor->aEffectMaps[i].lpvStateSegment = (LPVOID)dwValue;

  00307	8b 55 cc	 mov	 edx, DWORD PTR _i$35674[ebp]
  0030a	c1 e2 05	 shl	 edx, 5
  0030d	8b 45 f4	 mov	 eax, DWORD PTR _pDescriptor$[ebp]
  00310	8b 4d dc	 mov	 ecx, DWORD PTR _dwValue$[ebp]
  00313	89 4c 10 10	 mov	 DWORD PTR [eax+edx+16], ecx

; 396  : 
; 397  :         //
; 398  :         // finally fixup scratch space offset to point to a real VA, not
; 399  :         // just a relative scratch offset
; 400  :         //
; 401  : 
; 402  :         dwValue = (DWORD)pDescriptor->aEffectMaps[i].lpvScratchSegment;

  00317	8b 55 cc	 mov	 edx, DWORD PTR _i$35674[ebp]
  0031a	c1 e2 05	 shl	 edx, 5
  0031d	8b 45 f4	 mov	 eax, DWORD PTR _pDescriptor$[ebp]
  00320	8b 4c 10 20	 mov	 ecx, DWORD PTR [eax+edx+32]
  00324	89 4d dc	 mov	 DWORD PTR _dwValue$[ebp], ecx

; 403  :         dwValue += (DWORD) m_pScratchDma->GetFxScratchSpaceLinAddr();

  00327	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  0032a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0032d	e8 00 00 00 00	 call	 ?GetFxScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetFxScratchSpaceLinAddr
  00332	8b 4d dc	 mov	 ecx, DWORD PTR _dwValue$[ebp]
  00335	03 c8		 add	 ecx, eax
  00337	89 4d dc	 mov	 DWORD PTR _dwValue$[ebp], ecx

; 404  : 
; 405  :         //
; 406  :         // subtract the fx delay line base offset
; 407  :         //
; 408  : 
; 409  :         dwValue -= DSP_FX_DELAY_DATA_SCRATCHOFFSET;

  0033a	8b 55 dc	 mov	 edx, DWORD PTR _dwValue$[ebp]
  0033d	81 ea 00 c0 00
	00		 sub	 edx, 49152		; 0000c000H
  00343	89 55 dc	 mov	 DWORD PTR _dwValue$[ebp], edx

; 410  : 
; 411  :         pDescriptor->aEffectMaps[i].lpvScratchSegment = (LPVOID) dwValue;

  00346	8b 45 cc	 mov	 eax, DWORD PTR _i$35674[ebp]
  00349	c1 e0 05	 shl	 eax, 5
  0034c	8b 4d f4	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  0034f	8b 55 dc	 mov	 edx, DWORD PTR _dwValue$[ebp]
  00352	89 54 01 20	 mov	 DWORD PTR [ecx+eax+32], edx

; 412  :         
; 413  :     }

  00356	e9 3a fe ff ff	 jmp	 $L35676
$L35677:

; 414  : 
; 415  :     memcpy(m_pFxDescriptor,pDescriptor,dwDescriptorSize);

  0035b	8b 45 d8	 mov	 eax, DWORD PTR _dwDescriptorSize$[ebp]
  0035e	50		 push	 eax
  0035f	8b 4d f4	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  00362	51		 push	 ecx
  00363	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00366	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00369	50		 push	 eax
  0036a	e8 00 00 00 00	 call	 _memcpy
  0036f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  : 
; 417  :     //
; 418  :     // the dsp will automagically DMA in the new FX dsp code and state when its done with the
; 419  :     // current 32 sample block processing...
; 420  :     //
; 421  : 
; 422  :     pCmdBlock->dwCommandFlags = BIT_H2DCB_COMMAND_LOAD_CODE | BIT_H2DCB_COMMAND_LOAD_XRAM_STATE;

  00372	8b 4d f8	 mov	 ecx, DWORD PTR _pCmdBlock$[ebp]
  00375	c7 41 10 03 00
	00 00		 mov	 DWORD PTR [ecx+16], 3

; 423  : 
; 424  :     volatile DWORD *pdwflags = &pCmdBlock->dwCommandFlags;

  0037c	8b 55 f8	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  0037f	83 c2 10	 add	 edx, 16			; 00000010H
  00382	89 55 f0	 mov	 DWORD PTR _pdwflags$[ebp], edx
$L35702:

; 425  :     while(*pdwflags != 0);

  00385	8b 45 f0	 mov	 eax, DWORD PTR _pdwflags$[ebp]
  00388	83 38 00	 cmp	 DWORD PTR [eax], 0
  0038b	74 02		 je	 SHORT $L35703
  0038d	eb f6		 jmp	 SHORT $L35702
$L35703:

; 426  : 
; 427  : #endif // MCPX_BOOT_LIB
; 428  : 
; 429  :     return S_OK;

  0038f	33 c0		 xor	 eax, eax
$L35633:

; 430  : 
; 431  : }

  00391	8b e5		 mov	 esp, ebp
  00393	5d		 pop	 ebp
  00394	c2 04 00	 ret	 4
?ParseEffectImageInfo@CMcpxGPDspManager@DirectSound@@IAEJPBX@Z ENDP ; DirectSound::CMcpxGPDspManager::ParseEffectImageInfo
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
DSOUND	ENDS
;	COMDAT ??_U@YAPAXIPBDK0@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??_U@YAPAXIPBDK0@Z PROC NEAR				; operator new[], COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  :     return DirectSound::CMemoryManager::TrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc

; 239  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??_U@YAPAXIPBDK0@Z ENDP					; operator new[]
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dspdma.h
DSOUND	ENDS
;	COMDAT ?GetFxScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT
_this$ = -4
?GetFxScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ PROC NEAR ; DirectSound::CMcpxDspScratchDma::GetFxScratchSpaceLinAddr, COMDAT
; _this$ = ecx

; 41   :         VOID *GetFxScratchSpaceLinAddr() { return m_ctxFxScratch.VirtualAddress; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetFxScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ENDP ; DirectSound::CMcpxDspScratchDma::GetFxScratchSpaceLinAddr
DSOUND	ENDS
PUBLIC	?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxGPDspManager::SetEffectData
PUBLIC	?GetEffectMap@CMcpxGPDspManager@DirectSound@@QAEJKPAPBU_DSEFFECTMAP@@@Z ; DirectSound::CMcpxGPDspManager::GetEffectMap
PUBLIC	??_C@_0BM@EFLFCOPP@dwDataSize?5?$DO?$DN?5sizeof?$CIDWORD?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BL@FOBFECOE@?$CB?$CIdwDataSize?5?$CG?50x00000003?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OOBBFLIM@?$CB?$CIdwOffset?5?$CG?50x00000003?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CO@MNCIICOJ@pFxDesc?9?$DOdwStateSize?5?$DO?$DN?5?$CIdwOffse@ ; `string'
;	COMDAT ??_C@_0BM@EFLFCOPP@dwDataSize?5?$DO?$DN?5sizeof?$CIDWORD?$CJ?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\gpdsp.cpp
DSOUND_RD	SEGMENT
??_C@_0BM@EFLFCOPP@dwDataSize?5?$DO?$DN?5sizeof?$CIDWORD?$CJ?$AA@ DB 'dwD'
	DB	'ataSize >= sizeof(DWORD)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FOBFECOE@?$CB?$CIdwDataSize?5?$CG?50x00000003?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@FOBFECOE@?$CB?$CIdwDataSize?5?$CG?50x00000003?$CJ?$AA@ DB '!(dw'
	DB	'DataSize & 0x00000003)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@OOBBFLIM@?$CB?$CIdwOffset?5?$CG?50x00000003?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@OOBBFLIM@?$CB?$CIdwOffset?5?$CG?50x00000003?$CJ?$AA@ DB '!(dwOf'
	DB	'fset & 0x00000003)', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@MNCIICOJ@pFxDesc?9?$DOdwStateSize?5?$DO?$DN?5?$CIdwOffse@
DSOUND_RD	SEGMENT
??_C@_0CO@MNCIICOJ@pFxDesc?9?$DOdwStateSize?5?$DO?$DN?5?$CIdwOffse@ DB 'p'
	DB	'FxDesc->dwStateSize >= (dwOffset+dwDataSize)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z
DSOUND	SEGMENT
tv172 = -28
_this$ = -24
_pFxDesc$ = -20
_hr$ = -16
_pvXramBuffer$ = -12
_dwScratchOffset$ = -8
_pCmdBlock$ = -4
_dwEffectIndex$ = 8
_dwOffset$ = 12
_pvData$ = 16
_dwDataSize$ = 20
_dwFlags$ = 24
?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::SetEffectData, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 444  :     LPCDSEFFECTMAP pFxDesc;
; 445  :     PHOST_TO_DSP_COMMANDBLOCK pCmdBlock;
; 446  :     DWORD dwScratchOffset;
; 447  :     LPVOID pvXramBuffer;
; 448  :     HRESULT hr;
; 449  : 
; 450  :     ASSERT(dwDataSize >= sizeof(DWORD));

  00009	68 c2 01 00 00	 push	 450			; 000001c2H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@EFLFCOPP@dwDataSize?5?$DO?$DN?5sizeof?$CIDWORD?$CJ?$AA@
  00018	83 7d 14 04	 cmp	 DWORD PTR _dwDataSize$[ebp], 4
  0001c	1b c0		 sbb	 eax, eax
  0001e	f7 d8		 neg	 eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 451  : 
; 452  :     //
; 453  :     // FX offset and size must be dword aligned
; 454  :     //
; 455  : 
; 456  :     ASSERT(!(dwDataSize & 0x00000003));

  00029	68 c8 01 00 00	 push	 456			; 000001c8H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@FOBFECOE@?$CB?$CIdwDataSize?5?$CG?50x00000003?$CJ?$AA@
  00038	8b 4d 14	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  0003b	83 e1 03	 and	 ecx, 3
  0003e	f7 d9		 neg	 ecx
  00040	1b c9		 sbb	 ecx, ecx
  00042	f7 d9		 neg	 ecx
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 457  :     ASSERT(!(dwOffset & 0x00000003));

  0004d	68 c9 01 00 00	 push	 457			; 000001c9H
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@OOBBFLIM@?$CB?$CIdwOffset?5?$CG?50x00000003?$CJ?$AA@
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _dwOffset$[ebp]
  0005f	83 e2 03	 and	 edx, 3
  00062	f7 da		 neg	 edx
  00064	1b d2		 sbb	 edx, edx
  00066	f7 da		 neg	 edx
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 458  : 
; 459  :     //
; 460  :     // get effect map
; 461  :     //
; 462  : 
; 463  :     hr = GetEffectMap(dwEffectIndex, &pFxDesc);

  00071	8d 45 ec	 lea	 eax, DWORD PTR _pFxDesc$[ebp]
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _dwEffectIndex$[ebp]
  00078	51		 push	 ecx
  00079	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?GetEffectMap@CMcpxGPDspManager@DirectSound@@QAEJKPAPBU_DSEFFECTMAP@@@Z ; DirectSound::CMcpxGPDspManager::GetEffectMap
  00081	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 464  :     if (FAILED(hr)) {

  00084	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00088	7d 08		 jge	 SHORT $L35723

; 465  :         return hr;

  0008a	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]
  0008d	e9 58 01 00 00	 jmp	 $L35712
$L35723:

; 466  :     }
; 467  : 
; 468  :     //
; 469  :     // validate fx specific parameters
; 470  :     //
; 471  : 
; 472  :     ASSERT(pFxDesc->dwStateSize >= (dwOffset+dwDataSize));

  00092	68 d8 01 00 00	 push	 472			; 000001d8H
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MNCIICOJ@pFxDesc?9?$DOdwStateSize?5?$DO?$DN?5?$CIdwOffse@
  000a1	8b 55 0c	 mov	 edx, DWORD PTR _dwOffset$[ebp]
  000a4	03 55 14	 add	 edx, DWORD PTR _dwDataSize$[ebp]
  000a7	8b 45 ec	 mov	 eax, DWORD PTR _pFxDesc$[ebp]
  000aa	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  000ad	1b c9		 sbb	 ecx, ecx
  000af	f7 d9		 neg	 ecx
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b7	83 c4 10	 add	 esp, 16			; 00000010H

; 473  : 
; 474  :     //
; 475  :     // copy in the data they want to update
; 476  :     // figure a scratch offset, from the mcpx base register space offset
; 477  :     //
; 478  : 
; 479  :     pCmdBlock = (PHOST_TO_DSP_COMMANDBLOCK) ((PUCHAR)m_pScratchDma->GetScratchSpaceLinAddr() + DSP_COMMANDBLOCK_SCRATCHOFFSET);

  000ba	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000c0	e8 00 00 00 00	 call	 ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
  000c5	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  000ca	89 45 fc	 mov	 DWORD PTR _pCmdBlock$[ebp], eax

; 480  : 
; 481  :     //
; 482  :     // we reverse-engineer the scratch offset we stomped on in SetFxDescriptor..
; 483  :     // needless to say this is magic so if you plan to change make sure you change
; 484  :     // xgpimage AND SetFxDescriptor correctly as well
; 485  :     //
; 486  : 
; 487  :     dwScratchOffset = (DWORD)pFxDesc->lpvStateSegment;

  000cd	8b 45 ec	 mov	 eax, DWORD PTR _pFxDesc$[ebp]
  000d0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000d3	89 4d f8	 mov	 DWORD PTR _dwScratchOffset$[ebp], ecx

; 488  :     dwScratchOffset -= MCPX_HW_GPXMEM_REG_OFFSET;

  000d6	8b 55 f8	 mov	 edx, DWORD PTR _dwScratchOffset$[ebp]
  000d9	81 c2 00 00 7d
	01		 add	 edx, 24969216		; 017d0000H
  000df	89 55 f8	 mov	 DWORD PTR _dwScratchOffset$[ebp], edx

; 489  :     dwScratchOffset -= DSP_FX_STATE_XMEMORY_BASE_OFFSET;

  000e2	8b 45 f8	 mov	 eax, DWORD PTR _dwScratchOffset$[ebp]
  000e5	2d 00 02 00 00	 sub	 eax, 512		; 00000200H
  000ea	89 45 f8	 mov	 DWORD PTR _dwScratchOffset$[ebp], eax

; 490  :     dwScratchOffset += (DSP_COMMANDBLOCK_SCRATCHOFFSET+sizeof(HOST_TO_DSP_COMMANDBLOCK));

  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _dwScratchOffset$[ebp]
  000f0	81 c1 18 08 00
	00		 add	 ecx, 2072		; 00000818H
  000f6	89 4d f8	 mov	 DWORD PTR _dwScratchOffset$[ebp], ecx

; 491  :     dwScratchOffset += pCmdBlock->dwCodeLength*sizeof(DWORD);

  000f9	8b 55 fc	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  000fc	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ff	8b 4d f8	 mov	 ecx, DWORD PTR _dwScratchOffset$[ebp]
  00102	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00105	89 55 f8	 mov	 DWORD PTR _dwScratchOffset$[ebp], edx

; 492  : 
; 493  :     dwScratchOffset += dwOffset;

  00108	8b 45 f8	 mov	 eax, DWORD PTR _dwScratchOffset$[ebp]
  0010b	03 45 0c	 add	 eax, DWORD PTR _dwOffset$[ebp]
  0010e	89 45 f8	 mov	 DWORD PTR _dwScratchOffset$[ebp], eax

; 494  :        
; 495  :     //
; 496  :     // copy in the data they want to update
; 497  :     //
; 498  : 
; 499  :     m_pScratchDma->Copy(dwScratchOffset,
; 500  :                         (PVOID)pvData,
; 501  :                         dwDataSize);

  00111	8b 4d 14	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  00114	51		 push	 ecx
  00115	8b 55 10	 mov	 edx, DWORD PTR _pvData$[ebp]
  00118	52		 push	 edx
  00119	8b 45 f8	 mov	 eax, DWORD PTR _dwScratchOffset$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00123	e8 00 00 00 00	 call	 ?Copy@CMcpxDspScratchDma@DirectSound@@QAEXKPAXK@Z ; DirectSound::CMcpxDspScratchDma::Copy

; 502  : 
; 503  :     if (dwFlags & DSFX_DEFERRED) {        

  00128	8b 55 18	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0012b	83 e2 01	 and	 edx, 1
  0012e	85 d2		 test	 edx, edx
  00130	0f 84 92 00 00
	00		 je	 $L35732

; 504  : 
; 505  :         //
; 506  :         // based on where the offset they are updating is, we might have to update
; 507  :         // our scratch image to deal with sparse memory pokes. If somebody calls
; 508  :         // SetEffectData(FALSE) twice but the two memory blocks they are updating are
; 509  :         // non-contigious, we need to fill in the in between memory with latest state
; 510  :         // from the dsp. Then at commit time, we can commit one big block all at once
; 511  :         //
; 512  : 
; 513  :         if (m_dwCurrentLowestScratchOffset != MCPX_GLOBAL_PROC_SCRATCH_SIZE) {

  00136	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00139	81 78 18 00 80
	00 00		 cmp	 DWORD PTR [eax+24], 32768 ; 00008000H
  00140	74 50		 je	 SHORT $L35736

; 514  : 
; 515  :             //
; 516  :             // this is not the first deferred SetEffectData command
; 517  :             // so we can go ahead and do the sparse checks
; 518  :             //
; 519  : 
; 520  :             if ((m_dwCurrentLowestScratchOffset+m_dwStateSizeToCommit) < dwScratchOffset) {

  00142	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00148	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	03 50 1c	 add	 edx, DWORD PTR [eax+28]
  0014e	3b 55 f8	 cmp	 edx, DWORD PTR _dwScratchOffset$[ebp]
  00151	73 1b		 jae	 SHORT $L35737

; 521  :     
; 522  :                 //
; 523  :                 // sparse update, on the high end...
; 524  :                 //
; 525  :     
; 526  :                 dwDataSize += dwScratchOffset - (m_dwCurrentLowestScratchOffset+m_dwStateSizeToCommit);

  00153	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00159	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	03 50 1c	 add	 edx, DWORD PTR [eax+28]
  0015f	8b 4d f8	 mov	 ecx, DWORD PTR _dwScratchOffset$[ebp]
  00162	2b ca		 sub	 ecx, edx
  00164	8b 55 14	 mov	 edx, DWORD PTR _dwDataSize$[ebp]
  00167	03 d1		 add	 edx, ecx
  00169	89 55 14	 mov	 DWORD PTR _dwDataSize$[ebp], edx

; 527  :     
; 528  :             } else if (m_dwCurrentLowestScratchOffset > (dwScratchOffset+dwDataSize)){

  0016c	eb 24		 jmp	 SHORT $L35736
$L35737:
  0016e	8b 45 f8	 mov	 eax, DWORD PTR _dwScratchOffset$[ebp]
  00171	03 45 14	 add	 eax, DWORD PTR _dwDataSize$[ebp]
  00174	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  0017a	76 16		 jbe	 SHORT $L35736

; 529  :     
; 530  :                 //
; 531  :                 // sparse update below the last block updated
; 532  :                 //
; 533  :     
; 534  :                 dwDataSize += m_dwCurrentLowestScratchOffset-(dwScratchOffset+dwDataSize);

  0017c	8b 55 f8	 mov	 edx, DWORD PTR _dwScratchOffset$[ebp]
  0017f	03 55 14	 add	 edx, DWORD PTR _dwDataSize$[ebp]
  00182	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00188	2b ca		 sub	 ecx, edx
  0018a	8b 55 14	 mov	 edx, DWORD PTR _dwDataSize$[ebp]
  0018d	03 d1		 add	 edx, ecx
  0018f	89 55 14	 mov	 DWORD PTR _dwDataSize$[ebp], edx
$L35736:

; 535  :     
; 536  :             }
; 537  : 
; 538  :         }
; 539  : 
; 540  :         m_dwCurrentLowestScratchOffset = min(m_dwCurrentLowestScratchOffset,dwScratchOffset);

  00192	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00195	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00198	3b 4d f8	 cmp	 ecx, DWORD PTR _dwScratchOffset$[ebp]
  0019b	73 0b		 jae	 SHORT $L36207
  0019d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001a0	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001a3	89 45 e4	 mov	 DWORD PTR tv172[ebp], eax
  001a6	eb 06		 jmp	 SHORT $L36208
$L36207:
  001a8	8b 4d f8	 mov	 ecx, DWORD PTR _dwScratchOffset$[ebp]
  001ab	89 4d e4	 mov	 DWORD PTR tv172[ebp], ecx
$L36208:
  001ae	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001b1	8b 45 e4	 mov	 eax, DWORD PTR tv172[ebp]
  001b4	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 541  :         m_dwStateSizeToCommit += dwDataSize;

  001b7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ba	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  001bd	03 55 14	 add	 edx, DWORD PTR _dwDataSize$[ebp]
  001c0	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001c3	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 542  : 
; 543  :     } else {

  001c6	eb 20		 jmp	 SHORT $L35740
$L35732:

; 544  : 
; 545  :         //
; 546  :         // if they want to commit now, poke directly the XRAM offset
; 547  :         //
; 548  : 
; 549  :         pvXramBuffer = (LPVOID) ((DWORD)pFxDesc->lpvStateSegment + dwOffset);

  001c8	8b 4d ec	 mov	 ecx, DWORD PTR _pFxDesc$[ebp]
  001cb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001ce	03 55 0c	 add	 edx, DWORD PTR _dwOffset$[ebp]
  001d1	89 55 f4	 mov	 DWORD PTR _pvXramBuffer$[ebp], edx

; 550  :         memcpy(pvXramBuffer,pvData,dwDataSize);

  001d4	8b 45 14	 mov	 eax, DWORD PTR _dwDataSize$[ebp]
  001d7	50		 push	 eax
  001d8	8b 4d 10	 mov	 ecx, DWORD PTR _pvData$[ebp]
  001db	51		 push	 ecx
  001dc	8b 55 f4	 mov	 edx, DWORD PTR _pvXramBuffer$[ebp]
  001df	52		 push	 edx
  001e0	e8 00 00 00 00	 call	 _memcpy
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$L35740:

; 551  :     }
; 552  : 
; 553  :     return DS_OK;

  001e8	33 c0		 xor	 eax, eax
$L35712:

; 554  : 
; 555  : }

  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c2 14 00	 ret	 20			; 00000014H
?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z ENDP ; DirectSound::CMcpxGPDspManager::SetEffectData
DSOUND	ENDS
PUBLIC	?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxGPDspManager::GetEffectData
; Function compile flags: /Odt
;	COMDAT ?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z
DSOUND	SEGMENT
_this$ = -24
_pFxDesc$ = -20
_hr$ = -16
_pvXramBuffer$ = -12
_dwEffectIndex$ = 8
_dwOffset$ = 12
_pvData$ = 16
_dwDataSize$ = 20
?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::GetEffectData, COMDAT
; _this$ = ecx

; 566  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 567  :     LPCDSEFFECTMAP pFxDesc;
; 568  :     PHOST_TO_DSP_COMMANDBLOCK pCmdBlock;
; 569  :     DWORD dwScratchOffset;
; 570  :     LPVOID pvXramBuffer;
; 571  :     HRESULT hr;
; 572  : 
; 573  :     ASSERT(dwDataSize >= sizeof(DWORD));

  00009	68 3d 02 00 00	 push	 573			; 0000023dH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@EFLFCOPP@dwDataSize?5?$DO?$DN?5sizeof?$CIDWORD?$CJ?$AA@
  00018	83 7d 14 04	 cmp	 DWORD PTR _dwDataSize$[ebp], 4
  0001c	1b c0		 sbb	 eax, eax
  0001e	f7 d8		 neg	 eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 574  : 
; 575  :     //
; 576  :     // FX offset and size must be dword aligned
; 577  :     //
; 578  : 
; 579  :     ASSERT(!(dwDataSize & 0x00000003));

  00029	68 43 02 00 00	 push	 579			; 00000243H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@FOBFECOE@?$CB?$CIdwDataSize?5?$CG?50x00000003?$CJ?$AA@
  00038	8b 4d 14	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  0003b	83 e1 03	 and	 ecx, 3
  0003e	f7 d9		 neg	 ecx
  00040	1b c9		 sbb	 ecx, ecx
  00042	f7 d9		 neg	 ecx
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 580  :     ASSERT(!(dwOffset & 0x00000003));

  0004d	68 44 02 00 00	 push	 580			; 00000244H
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@OOBBFLIM@?$CB?$CIdwOffset?5?$CG?50x00000003?$CJ?$AA@
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _dwOffset$[ebp]
  0005f	83 e2 03	 and	 edx, 3
  00062	f7 da		 neg	 edx
  00064	1b d2		 sbb	 edx, edx
  00066	f7 da		 neg	 edx
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 581  : 
; 582  :     //
; 583  :     // get effect map
; 584  :     //
; 585  : 
; 586  :     hr = GetEffectMap(dwEffectIndex, &pFxDesc);

  00071	8d 45 ec	 lea	 eax, DWORD PTR _pFxDesc$[ebp]
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _dwEffectIndex$[ebp]
  00078	51		 push	 ecx
  00079	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?GetEffectMap@CMcpxGPDspManager@DirectSound@@QAEJKPAPBU_DSEFFECTMAP@@@Z ; DirectSound::CMcpxGPDspManager::GetEffectMap
  00081	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 587  :     if (FAILED(hr)) {

  00084	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00088	7d 05		 jge	 SHORT $L35758

; 588  :         return hr;

  0008a	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]
  0008d	eb 4a		 jmp	 SHORT $L35750
$L35758:

; 589  :     }
; 590  : 
; 591  :     //
; 592  :     // validate fx specific parameters
; 593  :     //
; 594  : 
; 595  :     ASSERT(pFxDesc->dwStateSize >= (dwOffset+dwDataSize));

  0008f	68 53 02 00 00	 push	 595			; 00000253H
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MNCIICOJ@pFxDesc?9?$DOdwStateSize?5?$DO?$DN?5?$CIdwOffse@
  0009e	8b 55 0c	 mov	 edx, DWORD PTR _dwOffset$[ebp]
  000a1	03 55 14	 add	 edx, DWORD PTR _dwDataSize$[ebp]
  000a4	8b 45 ec	 mov	 eax, DWORD PTR _pFxDesc$[ebp]
  000a7	39 50 0c	 cmp	 DWORD PTR [eax+12], edx
  000aa	1b c9		 sbb	 ecx, ecx
  000ac	f7 d9		 neg	 ecx
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b4	83 c4 10	 add	 esp, 16			; 00000010H

; 596  : 
; 597  :     //
; 598  :     // copy fx data
; 599  :     //
; 600  : 
; 601  :     pvXramBuffer = (LPVOID) ((DWORD)pFxDesc->lpvStateSegment + dwOffset);

  000b7	8b 55 ec	 mov	 edx, DWORD PTR _pFxDesc$[ebp]
  000ba	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000bd	03 45 0c	 add	 eax, DWORD PTR _dwOffset$[ebp]
  000c0	89 45 f4	 mov	 DWORD PTR _pvXramBuffer$[ebp], eax

; 602  :     memcpy(pvData,pvXramBuffer,dwDataSize);

  000c3	8b 4d 14	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  000c6	51		 push	 ecx
  000c7	8b 55 f4	 mov	 edx, DWORD PTR _pvXramBuffer$[ebp]
  000ca	52		 push	 edx
  000cb	8b 45 10	 mov	 eax, DWORD PTR _pvData$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memcpy
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 603  : 
; 604  :     return DS_OK;

  000d7	33 c0		 xor	 eax, eax
$L35750:

; 605  : 
; 606  : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 10 00	 ret	 16			; 00000010H
?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z ENDP ; DirectSound::CMcpxGPDspManager::GetEffectData
DSOUND	ENDS
PUBLIC	??_C@_0M@HBHEJKII@pDescriptor?$AA@		; `string'
PUBLIC	??_C@_0M@ELMEHHNJ@ppEffectMap?$AA@		; `string'
PUBLIC	??_C@_0FL@HIMIHCOK@Zero?9based?5Effect?5Index?5?$CI?$CFd?$CJ?5is?5@ ; `string'
;	COMDAT ??_C@_0M@HBHEJKII@pDescriptor?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@HBHEJKII@pDescriptor?$AA@ DB 'pDescriptor', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@ELMEHHNJ@ppEffectMap?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@ELMEHHNJ@ppEffectMap?$AA@ DB 'ppEffectMap', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FL@HIMIHCOK@Zero?9based?5Effect?5Index?5?$CI?$CFd?$CJ?5is?5@
DSOUND_RD	SEGMENT
??_C@_0FL@HIMIHCOK@Zero?9based?5Effect?5Index?5?$CI?$CFd?$CJ?5is?5@ DB 'Z'
	DB	'ero-based Effect Index (%d) is larger than number of Effects '
	DB	'(%d) currently loaded in DSP', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetEffectMap@CMcpxGPDspManager@DirectSound@@QAEJKPAPBU_DSEFFECTMAP@@@Z
DSOUND	SEGMENT
_this$ = -8
_pDescriptor$ = -4
_dwEffectIndex$ = 8
_ppEffectMap$ = 12
?GetEffectMap@CMcpxGPDspManager@DirectSound@@QAEJKPAPBU_DSEFFECTMAP@@@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::GetEffectMap, COMDAT
; _this$ = ecx

; 615  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 616  :     DSEFFECTIMAGEDESC* pDescriptor = m_pFxDescriptor;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	89 4d fc	 mov	 DWORD PTR _pDescriptor$[ebp], ecx

; 617  : 
; 618  :     ASSERT(pDescriptor);

  00012	68 6a 02 00 00	 push	 618			; 0000026aH
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@HBHEJKII@pDescriptor?$AA@
  00021	33 d2		 xor	 edx, edx
  00023	83 7d fc 00	 cmp	 DWORD PTR _pDescriptor$[ebp], 0
  00027	0f 94 c2	 sete	 dl
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 619  :     ASSERT(ppEffectMap);

  00033	68 6b 02 00 00	 push	 619			; 0000026bH
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@ELMEHHNJ@ppEffectMap?$AA@
  00042	33 c0		 xor	 eax, eax
  00044	83 7d 0c 00	 cmp	 DWORD PTR _ppEffectMap$[ebp], 0
  00048	0f 94 c0	 sete	 al
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 620  : 
; 621  :     //
; 622  :     // validate params
; 623  :     //
; 624  : 
; 625  :     if (dwEffectIndex > pDescriptor->dwEffectCount-1) {

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	83 ea 01	 sub	 edx, 1
  0005c	39 55 08	 cmp	 DWORD PTR _dwEffectIndex$[ebp], edx
  0005f	76 3e		 jbe	 SHORT $L35770

; 626  : 
; 627  :         DPF_ERROR("Zero-based Effect Index (%d) is larger than number of Effects (%d) currently loaded in DSP",
; 628  :                   dwEffectIndex,
; 629  :                   pDescriptor->dwEffectCount-1);

  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00066	6a 00		 push	 0
  00068	68 73 02 00 00	 push	 627			; 00000273H
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00072	6a 01		 push	 1
  00074	6a 09		 push	 9
  00076	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0007b	83 c4 18	 add	 esp, 24			; 00000018H
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _pDescriptor$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	83 e9 01	 sub	 ecx, 1
  00086	51		 push	 ecx
  00087	8b 55 08	 mov	 edx, DWORD PTR _dwEffectIndex$[ebp]
  0008a	52		 push	 edx
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FL@HIMIHCOK@Zero?9based?5Effect?5Index?5?$CI?$CFd?$CJ?5is?5@
  00090	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH

; 630  : 
; 631  :         return DSERR_INVALIDCALL;

  00098	b8 32 00 78 88	 mov	 eax, -2005401550	; 88780032H
  0009d	eb 14		 jmp	 SHORT $L35766
$L35770:

; 632  : 
; 633  :     }
; 634  : 
; 635  :     //
; 636  :     // retrieve the effect they want to modify
; 637  :     //
; 638  : 
; 639  :     *ppEffectMap = &pDescriptor->aEffectMaps[dwEffectIndex];

  0009f	8b 45 08	 mov	 eax, DWORD PTR _dwEffectIndex$[ebp]
  000a2	c1 e0 05	 shl	 eax, 5
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _pDescriptor$[ebp]
  000a8	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  000ac	8b 45 0c	 mov	 eax, DWORD PTR _ppEffectMap$[ebp]
  000af	89 10		 mov	 DWORD PTR [eax], edx

; 640  : 
; 641  :     return DS_OK;

  000b1	33 c0		 xor	 eax, eax
$L35766:

; 642  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
?GetEffectMap@CMcpxGPDspManager@DirectSound@@QAEJKPAPBU_DSEFFECTMAP@@@Z ENDP ; DirectSound::CMcpxGPDspManager::GetEffectMap
DSOUND	ENDS
PUBLIC	?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z ; DirectSound::CMcpxGPDspManager::CommitChanges
PUBLIC	??_C@_0EB@ONOCOGPO@CommitEffectData?5was?5called?5but?5@ ; `string'
;	COMDAT ??_C@_0EB@ONOCOGPO@CommitEffectData?5was?5called?5but?5@
DSOUND_RD	SEGMENT
??_C@_0EB@ONOCOGPO@CommitEffectData?5was?5called?5but?5@ DB 'CommitEffect'
	DB	'Data was called but there were no deferred changes!!', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT
_this$ = -12
_pdwflags$ = -8
_pCmdBlock$ = -4
_dwScratchOffset$ = 8
_dwDataSize$ = 12
?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::CommitChanges, COMDAT
; _this$ = ecx

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 648  : 
; 649  :     PHOST_TO_DSP_COMMANDBLOCK pCmdBlock;
; 650  : 
; 651  :     if (dwDataSize == 0) {

  00009	83 7d 0c 00	 cmp	 DWORD PTR _dwDataSize$[ebp], 0
  0000d	75 4d		 jne	 SHORT $L35783

; 652  : 
; 653  :         //
; 654  :         // use internal members for deferred state update
; 655  :         //
; 656  : 
; 657  :         dwDataSize = m_dwStateSizeToCommit;

  0000f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00015	89 4d 0c	 mov	 DWORD PTR _dwDataSize$[ebp], ecx

; 658  :         dwScratchOffset = m_dwCurrentLowestScratchOffset;

  00018	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001e	89 45 08	 mov	 DWORD PTR _dwScratchOffset$[ebp], eax

; 659  : 
; 660  :         if ((dwScratchOffset == MCPX_GLOBAL_PROC_SCRATCH_SIZE) ||
; 661  :             (dwDataSize == 0)) {

  00021	81 7d 08 00 80
	00 00		 cmp	 DWORD PTR _dwScratchOffset$[ebp], 32768 ; 00008000H
  00028	74 06		 je	 SHORT $L35788
  0002a	83 7d 0c 00	 cmp	 DWORD PTR _dwDataSize$[ebp], 0
  0002e	75 2c		 jne	 SHORT $L35783
$L35788:

; 662  : 
; 663  :             //
; 664  :             // no changes to commit
; 665  :             //
; 666  : 
; 667  :             DPF_WARNING("CommitEffectData was called but there were no deferred changes!!");

  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00035	6a 00		 push	 0
  00037	68 9b 02 00 00	 push	 667			; 0000029bH
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@HKGLIPMO@c?3?2xbox?2private?2windows?2directx?2@
  00041	6a 03		 push	 3
  00043	6a 09		 push	 9
  00045	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0004a	83 c4 18	 add	 esp, 24			; 00000018H
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@ONOCOGPO@CommitEffectData?5was?5called?5but?5@
  00052	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00057	83 c4 04	 add	 esp, 4

; 668  :             return;

  0005a	eb 75		 jmp	 SHORT $L35781
$L35783:

; 669  : 
; 670  :         }
; 671  :     }
; 672  : 
; 673  : 
; 674  :     //
; 675  :     // the caller wants to update internal DSP state with this call
; 676  :     // set up the command block, to signal the DSP to DMA in the new state
; 677  :     //
; 678  : 
; 679  :     pCmdBlock = (PHOST_TO_DSP_COMMANDBLOCK) ((PUCHAR)m_pScratchDma->GetScratchSpaceLinAddr() + DSP_COMMANDBLOCK_SCRATCHOFFSET);

  0005c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00062	e8 00 00 00 00	 call	 ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ ; DirectSound::CMcpxDspScratchDma::GetScratchSpaceLinAddr
  00067	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  0006c	89 45 fc	 mov	 DWORD PTR _pCmdBlock$[ebp], eax

; 680  : 
; 681  :     //
; 682  :     // before we go stomping on the existing command block
; 683  :     // make sure there is no other pending command
; 684  :     //
; 685  : 
; 686  :     volatile DWORD *pdwflags = &pCmdBlock->dwCommandFlags;

  0006f	8b 55 fc	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  00072	83 c2 10	 add	 edx, 16			; 00000010H
  00075	89 55 f8	 mov	 DWORD PTR _pdwflags$[ebp], edx
$L35794:

; 687  :     while(*pdwflags != 0);

  00078	8b 45 f8	 mov	 eax, DWORD PTR _pdwflags$[ebp]
  0007b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007e	74 02		 je	 SHORT $L35795
  00080	eb f6		 jmp	 SHORT $L35794
$L35795:

; 688  : 
; 689  :     //
; 690  :     // create xram offset
; 691  :     // the original base offset can be calculated from the code size
; 692  :     // the DSP default engine will add this offset to the base offset where the concatenated state blocks live
; 693  :     //
; 694  : 
; 695  :     
; 696  :     pCmdBlock->dwOffset = dwScratchOffset/sizeof(DWORD) - 
; 697  :         (pCmdBlock->dwCodeLength+sizeof(HOST_TO_DSP_COMMANDBLOCK)/sizeof(DWORD)) -
; 698  :         (DSP_COMMANDBLOCK_SCRATCHOFFSET/sizeof(DWORD));

  00082	8b 4d 08	 mov	 ecx, DWORD PTR _dwScratchOffset$[ebp]
  00085	c1 e9 02	 shr	 ecx, 2
  00088	8b 55 fc	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  0008b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008e	83 c0 06	 add	 eax, 6
  00091	2b c8		 sub	 ecx, eax
  00093	81 e9 00 02 00
	00		 sub	 ecx, 512		; 00000200H
  00099	8b 55 fc	 mov	 edx, DWORD PTR _pCmdBlock$[ebp]
  0009c	89 0a		 mov	 DWORD PTR [edx], ecx

; 699  : 
; 700  :     pCmdBlock->dwStateOffset = dwScratchOffset;

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _dwScratchOffset$[ebp]
  000a4	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 701  :     pCmdBlock->dwStateLength = dwDataSize/sizeof(DWORD);

  000a7	8b 55 0c	 mov	 edx, DWORD PTR _dwDataSize$[ebp]
  000aa	c1 ea 02	 shr	 edx, 2
  000ad	8b 45 fc	 mov	 eax, DWORD PTR _pCmdBlock$[ebp]
  000b0	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 702  : 
; 703  :     pCmdBlock->dwCommandFlags = BIT_H2DCB_COMMAND_LOAD_XRAM_STATE;

  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _pCmdBlock$[ebp]
  000b6	c7 41 10 02 00
	00 00		 mov	 DWORD PTR [ecx+16], 2

; 704  : 
; 705  :     //
; 706  :     // set internal member to signal deferred state updates have been flushed
; 707  :     //
; 708  : 
; 709  :     m_dwCurrentLowestScratchOffset = MCPX_GLOBAL_PROC_SCRATCH_SIZE;

  000bd	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H

; 710  :     m_dwStateSizeToCommit = 0;

  000c7	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
$L35781:

; 711  : 
; 712  : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 08 00	 ret	 8
?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z ENDP ; DirectSound::CMcpxGPDspManager::CommitChanges
DSOUND	ENDS
PUBLIC	?AC3SetOutputBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z ; DirectSound::CMcpxGPDspManager::AC3SetOutputBuffer
EXTRN	?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z:NEAR ; DirectSound::CMcpxDspScratchDma::AddPages
; Function compile flags: /Odt
;	COMDAT ?AC3SetOutputBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z
DSOUND	SEGMENT
_this$ = -4
_pMem$ = 8
_uNumOfPages$ = 12
?AC3SetOutputBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::AC3SetOutputBuffer, COMDAT
; _this$ = ecx

; 716  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 717  :     //
; 718  :     // we need to add these pages to the GP dma table
; 719  :     //
; 720  : 
; 721  :     m_pScratchDma->AddPages(pMem, uNumOfPages, &m_uAC3BufferOffset);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _uNumOfPages$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _pMem$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00019	e8 00 00 00 00	 call	 ?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z ; DirectSound::CMcpxDspScratchDma::AddPages

; 722  : 
; 723  :     return;
; 724  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?AC3SetOutputBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z ENDP ; DirectSound::CMcpxGPDspManager::AC3SetOutputBuffer
DSOUND	ENDS
PUBLIC	?SetMultipassBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z ; DirectSound::CMcpxGPDspManager::SetMultipassBuffer
; Function compile flags: /Odt
;	COMDAT ?SetMultipassBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z
DSOUND	SEGMENT
_this$ = -4
_pMem$ = 8
_uNumOfPages$ = 12
?SetMultipassBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z PROC NEAR ; DirectSound::CMcpxGPDspManager::SetMultipassBuffer, COMDAT
; _this$ = ecx

; 728  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 729  :     //
; 730  :     // we need to add these pages to the GP dma table
; 731  :     //
; 732  : 
; 733  :     m_pScratchDma->AddPages(pMem, uNumOfPages, &m_uMultipassBufferOffset);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	50		 push	 eax
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _uNumOfPages$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 08	 mov	 edx, DWORD PTR _pMem$[ebp]
  00015	52		 push	 edx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001c	e8 00 00 00 00	 call	 ?AddPages@CMcpxDspScratchDma@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@KPAK@Z ; DirectSound::CMcpxDspScratchDma::AddPages

; 734  : 
; 735  :     return;
; 736  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?SetMultipassBuffer@CMcpxGPDspManager@DirectSound@@QAEXPAUMCPX_ALLOC_CONTEXT@@K@Z ENDP ; DirectSound::CMcpxGPDspManager::SetMultipassBuffer
DSOUND	ENDS
END
