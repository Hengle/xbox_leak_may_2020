; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\dsapi.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
DSOUND_URW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_URW	ENDS
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_09GPGAJHPD@?$CIunknown?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06GGPOMPNM@?$CInone?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@PGACJKHL@?$CB?$CIx?5?$CG?5?$CIx?5?9?51?$CJ?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@KHLJBLPM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@MLMBNMPN@nLength?5?$DO?5sizeof?$CI?$CKpRunMarker?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DF@GEBIDJGO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@DHEFJAIP@IsValidAlgorithm?$CI?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@FFGMCHMA@m_pfnGetFilterPair?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@JNKFENGM@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@JCBGLFIF@?$CBm_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@JLKNBNJM@?$CBm_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@BMLCBDGO@m_paNotifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@ELEAODJN@dwNotifierIndex?5?$DM?5m_dwNotifierCo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MEDKFNKN@Unexpected?5notifier?5status?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@NHNIONPC@m_dwNotifierCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IECLLDN@m_dwVoiceMapLock?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@FFOHIBNC@m_dwVoiceMapLock?5?$DO?$DN?51?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@MEFGGIAF@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@IBOGJEGG@WAVE_FORMAT_PCM?5?$DN?$DN?5m_pSettings?9?$DO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@IDFLDLJM@?$CB?$CIm_pSettings?9?$DOm_dwFlags?5?$CG?5DSBCA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EJ@DJPLDOLH@m_pSettings?9?$DOm_pMixinBuffer?9?$DOm_p@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@MBLALCOP@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@CELCEBLE@CAc97MediaObject?3?3AddRef?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@OKDMHHHN@CAc97MediaObject?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@HOMJKBAH@pDirectSound?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@POCBACBD@ppvInterface?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_07KCKPANJI@pStream?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@MEHKCAOG@CDirectSound?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@GKIGDBEH@DirectSoundCreate?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@JFIBKPKF@NULL?5or?5GUID_NULL?5is?5the?5only?5su@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HEGINMCG@Failed?5to?5supply?5an?5LPDIRECTSOUN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@KMLCCGBC@Aggregation?5is?5not?5supported?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@LBFJNDGF@DirectSoundDoWork?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0GI@CGAOMMDK@A?5breakpoint?5occurred?5at?5raised?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@POMALHBG@DirectSoundUseFullHRTF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@JIANJPJE@Using?5full?5HRTF?53D?5algorithm?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MFNLOELL@DirectSoundUseLightHRTF?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@HCIBBNHJ@Using?5light?5HRTF?53D?5algorithm?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@CNGMJOFG@DirectSoundOverrideSpeakerConfig@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@FIHBIBCP@Invalid?5speaker?5configuration?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@NKDHKHKO@Can?8t?5set?5encoder?5bits?5in?5the?5sp@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FK@NPLJHMGG@Can?8t?5call?5DirectSoundOverrideSp@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@LFFHOEJA@DirectSoundLoadEncoder?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FE@KMLIIFLK@You?5must?5call?5DirectSoundLoadEnc@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@BPPLJCKL@XAudioCalculatePitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IPPIOPAN@Invalid?5frequency?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@KEPMOGMH@No?5image?5name?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0GA@HGPLGPOH@The?5DirectSound?5object?5must?5have@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@MLCKJCNB@Can?8t?5find?5image?5section?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@HCGENJOL@Can?8t?5get?5image?5size?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@OLHLOOOG@Can?8t?5read?5image?5section?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GIBIPBEG@Can?8t?5find?5image?5file?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EJGPJOEN@Can?8t?5read?5image?5file?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@KKIBJCHH@XWaveFileCreateMediaObject?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@CHEELPJG@No?5file?5name?5specified?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EMKKKBHF@No?5media?5object?5pointer?5supplied@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JHBNNOBF@CWaveFileMediaObject?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@OPMIALAN@XWaveFileCreateMediaObjectEx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@DOHCIFPB@No?5file?5name?5or?5handle?5specified@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@DEIACGD@Both?5file?5name?5and?5handle?5specif@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@FGJODPMK@CFileMediaObject?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@JLDLGICF@CDirectSound?3?3Release?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@FJJJKECJ@m_apKeepAliveBuffers?$FLi?$FN?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@BILKPJIE@?$CBdwRefCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@GBDPHPNJ@CDirectSoundSettings?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@LPBBNBKB@CMcpxAPU?$CIm_pSettings?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@BALKAGLG@CDirectSound?3?3GetCaps?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@FGNBHMGB@DSCAPS?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@GPJEHCOH@Failed?5to?5supply?5an?5LPDIRECTSOUN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@EJCJDDEP@CDirectSoundBuffer?$CIthis?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@PAHKAPDB@Failed?5to?5supply?5an?5LPDIRECTSOUN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@LGHCHOLO@CDirectSoundStream?$CIthis?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@BPPCBFOG@CDirectSound?3?3GetSpeakerConfig?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@HMIKHCKH@Failed?5to?5supply?5speaker?5config?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@IMEPOPKJ@Failed?5to?5supply?5an?5image?5buffer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@BGOMCCDB@Invalid?5image?5size?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@BHOEKAGO@Offset?5must?5be?5DWORD?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JDIKGDBB@Failed?5to?5supply?5a?5data?5buffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@DFMMBJFB@Invalid?5data?5size?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@BEEJHJJ@Data?5size?5must?5be?5DWORD?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@BANNDMNP@CDirectSound?3?3CommitEffectData?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@NEKPABJB@Invalid?5mixbin?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@DDEKMEPM@Invalid?5headroom?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@GEFIHGFG@Buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@BIBJPPFF@Structure?5size?5too?5small?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@FGABALFI@Invalid?5orientation?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@NBPMIOHF@CDirectSound?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@LDNJGHJI@CDirectSound?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@OHFOFNJM@Failed?5to?5supply?5properties?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@BFGOEDGP@Invalid?5lRoom?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@INCPBGEM@Invalid?5lRoomHF?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@MMCGGFDN@Invalid?5flRoomRolloffFactor?5valu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@JLJBHPAG@Invalid?5flDecayTime?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@DIPMFMJF@Invalid?5flDecayHFRatio?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@HHFHHHAL@Invalid?5lReflections?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@MLJGFPIP@Invalid?5flReflectionsDelay?5value@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GHFHGCHH@Invalid?5lReverb?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@HKPBDOAD@Invalid?5flReverbDelay?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@POIFFNNC@Invalid?5flDiffusion?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@BDIIEOGO@Invalid?5flDensity?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IOADAE@Invalid?5flHFReference?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@OHHHODMJ@Can?8t?5set?5I3DL2?5listener?5propert@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CKEHDPPH@CDirectSound?3?3CommitDeferredSett@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@PKIOADP@CDirectSound?3?3GetTime?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@ELGHAIJL@Failed?5to?5specify?5a?5time?5buffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@BALLHIEJ@CDirectSound?3?3GetOutputLevels?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@PAFGHEFI@Failed?5to?5specify?5an?5output?5leve@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@OCNAGGAG@CDirectSound?3?3DoWork?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@KBFKHNOD@CDirectSound?3?3EnableHeadphones?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0L@LIGCIMFC@pwfxFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@NHKDKHEC@DS3DSOURCEPARAMS?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@JONOPIML@m_lVolume?5?$DM?$DN?5DSBVOLUME_MAX?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_08IANEAGJN@pMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@JINADBML@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EH@JCOOJHLK@pMixBins?9?$DOlpMixBinVolumePairs?$FLi?$FN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@DPOBGDIP@m_fmt?4nChannels?5?1?52?5?$DM?5NUMELMS?$CIap@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@LJNAAHGK@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@BAAJMADF@pMixBins?9?$DOlpMixBinVolumePairs?$FLm_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DM@GGCHOGPP@m_pMixinBuffer?9?$DOm_pSettings?9?$DOm_d@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@EMNMBDPN@CDirectSoundVoiceSettings?3?3SetMi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FJ@BNFDLODI@One?5mixbin?5slot?5must?5be?5kept?5fre@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@BLOGINIO@pOutputBuffer?5?$CB?$DN?5m_pMixinBuffer?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@OIHPMIHL@m_dwMixBinCount?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@BNCGKMNJ@m_abMixBins?$FLm_dwMixBinCount?5?9?51?$FN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@PCLFAJDB@Failed?5to?5specify?5a?5buffer?5forma@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@MLGENCEK@Invalid?5voice?5format?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@DNJAKINH@3D?5voices?5must?5be?5mono?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@NOELHIK@Can?8t?5call?5SetFormat?5on?5MIXIN?5or@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@KGMCDICN@CDirectSoundVoice?3?3SetFrequency?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@HJLAICEL@CDirectSoundVoice?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@GGKNKICF@Invalid?5pitch?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GPFNHHLE@CDirectSoundVoice?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@JLPGLIJE@Volume?5value?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@PNGPHNPI@LFO?5description?5not?5provided?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@FMFOPPHB@Invalid?5LFO?5delay?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@BFFHNCNB@Invalid?5LFO?5delta?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DDJCPJHN@Invalid?5LFO?5pitch?5modulation?5val@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@NLOIDDNF@Invalid?5LFO?5filter?5cutoff?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BNNNECFA@Invalid?5LFO?5amplitude?5modulation@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@CDBMGOGN@The?5pitch?5LFO?5doesn?5not?5support?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@BKPMJGEL@Envelope?5description?5not?5provide@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@BJPMKGB@Invalid?5envelope?5generator?5ident@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IIDKFKNJ@Invalid?5envelope?5generator?5mode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@PCBMIHMK@Invalid?5envelope?5delay?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@CHAGBIOL@Invalid?5envelope?5attack?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@DICEDIB@Invalid?5envelope?5hold?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@DBHNMEH@Invalid?5envelope?5decay?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@DBLEBMF@Invalid?5envelope?5release?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@FPGDLLFG@Invalid?5envelope?5sustain?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@NBKAHFMI@Invalid?5envelope?5pitch?5scale?5val@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CHEONPI@Invalid?5envelope?5filter?5cutoff?5v@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EG@HJNFDHAI@The?5amplitude?5envelope?5doesn?5not@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@HHPMHMGE@Filter?5description?5not?5provided?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@EGGJIDJA@Invalid?5filter?5mode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@MNKBDPOF@Invalid?5Q?9coefficient?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@HIEOAAID@Invalid?5coefficient?5value?5?$CIindex@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@KJELMDOG@The?5filter?5can?8t?5be?5bypassed?5on?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@NELHDLCP@Only?5the?5first?52?5coefficients?5ar@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@MICKMGL@CDirectSoundVoice?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@KGGOOANK@Headroom?5value?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@MGDJOPFN@Output?5buffer?5specified?5is?5not?5a@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DC@CBOOEPFA@Can?8t?5set?5the?5output?5buffer?5on?5M@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FC@OCBCMFK@Can?8t?5submix?5a?53D?5buffer?4?5?5Creat@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@EGCNJDOL@Can?5only?5submix?5mono?5source?5voic@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@KABIHIFJ@Submixed?5voices?5must?5leave?5one?5m@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EH@LBEFOPJD@The?5headroom?5for?5the?5mixbin?5your@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EE@DOPHHMBJ@non?9zero?4?5?5This?5will?5be?5additive@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@LOELFEDP@destination?5is?5reading?5to?0?5possi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@LMMJOHBD@You?5will?5only?5see?5this?5warning?5o@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT ??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@JHLFCOCA@No?5voice?5can?5be?5assigned?5to?5more@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@NDMJBELB@The?5mixbin?5count?5must?5be?5a?5multi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IOBMOJLJ@Specified?5an?5invalid?5mixbin?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EI@MJPKEPAI@MixBin?5count?5doesn?8t?5include?5eno@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@EJEOPAOD@MixBin?5array?5does?5not?5include?5th@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PELGAILP@Failed?5to?5supply?5any?5volume?5data@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@HLJGNGGL@Invalid?5mixbin?5count?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@CCNEIJPJ@Specified?5a?5mixbin?5the?5voice?5is?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@BIDAHOAG@Invalid?5volume?5at?5index?5?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@JLMLOOEB@Parameters?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@KBEADHF@Invalid?5structure?5size?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@NCIONLNI@Invalid?5cone?5angle?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@BHNOOMMA@Inside?5cone?5angle?5can?8t?5be?5great@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@NEIBCMFO@Invalid?5cone?5orientation?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@DLKDHIFC@Invalid?5volume?5level?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@NHMANPEN@Minimum?5and?5maximum?5distance?5mus@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@HLFHGGIB@Invalid?5mode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@GFAMGMJN@CDirectSoundVoice?3?3SetConeOrient@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@PFHMKJGP@CDirectSoundVoice?3?3SetConeOutsid@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@ODHMFJI@Invalid?5max?5distance?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@FELEFEMJ@flMaxDistance?5must?5be?5?$DO?$DN?5flMinDi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@KJADEFOB@Invalid?5min?5distance?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HBGDLNMF@MinDistance?5must?5be?5?$DM?$DN?5MaxDistan@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@NIDEAOHK@CDirectSoundVoice?3?3SetMode?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@EHIDDHEM@CDirectSoundVoice?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@CFKGNOKB@CDirectSoundVoice?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@EDNENMKI@CDirectSoundVoice?3?3SetDistanceFa@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@BPMLICEL@CDirectSoundVoice?3?3SetDopplerFac@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@GAOLLPH@CDirectSoundVoice?3?3SetRolloffFac@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@NCGGFELK@CDirectSoundVoice?3?3SetRolloffCur@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@MFPFNDEA@Rolloff?5curve?5points?5must?5be?5bet@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@MCCEBEEE@Point?5array?5and?5count?5most?5both?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@LINKIFON@Failed?5to?5supply?5parameters?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@MHAJELON@Invalid?5lDirect?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IKEBLGNA@Invalid?5lDirectHF?5value?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@FCCLMHMN@Invalid?5Obstruction?4lHFLevel?5val@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@OBCELHCF@Invalid?5Obstruction?4flLFRatio?5va@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@OAHBFPJJ@Invalid?5Occlusion?4lHFLevel?5value@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@INJAHIFA@Invalid?5Occlusion?4flLFRatio?5valu@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@GDLOIFBF@dwPlayStart?5?$CL?5dwPlayLength?5?$DM?$DN?5m_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@DHEINPGA@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@JJDLFACJ@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@FAIDNDCA@DSBPOSITIONNOTIFY?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@FJGLMMBO@DSBUFFERDESC?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JKLCLPIK@DSBUFFERDESC?5size?5not?5valid?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GPLLBHKB@Specified?5invalid?5flags?5?$CI?$CFlx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@IDMAODDE@MIXIN?1FXIN?5buffers?5can?8t?5be?5LOCD@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@PBBNEOHK@MIXIN?1FXIN?5buffers?5can?8t?5have?5CT@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@OJHIJBPN@lpwfxFormat?5for?5MIXIN?1FXIN?5buffe@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@MDAGNMFI@dwBufferBytes?5for?5MIXIN?1FXIN?5buf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EBJBIGK@Invalid?5buffer?5format?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@LGHHILEA@Buffer?5size?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@MCFCIGDO@Buffer?5size?5not?5a?5multiple?5of?5th@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0KC@MENNIMHB@You?5must?5call?5one?5of?5the?53D?5algo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@MJHAJPJB@Specifying?5mixbins?5will?5override@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EI@PCDOEANA@Don?8t?5assign?5a?5voice?5to?5DSMIXBIN@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EE@DNMPLJCN@The?5input?5mixbin?5for?5an?5FXIN?5buf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@HAPJOIIA@CDirectSoundBufferSettings?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@ODMOHDOO@CMcpxBuffer?$CIm_pDirectSound?9?$DOm_pD@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@KFNPIFOI@Buffer?5size?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@MFOHFKJL@Can?8t?5call?5SetBufferData?5on?5MIXI@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@NMHIIO@0?9sized?5buffer?5with?5non?9NULL?5buf@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@PFGHNCIF@NULL?5buffer?5with?5non?9zero?5buffer@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@DPDMNBCJ@Reserved?5parameters?5must?5be?50?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@PHNJAOLG@Can?8t?5call?5Play?5on?5a?5MIXIN?1FXIN?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@MCLPOMMM@No?5data?5to?5play?$CB?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@IGPNGPGI@CDirectSoundBuffer?3?3Stop?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@IKIGIHPK@Can?8t?5call?5Stop?5on?5a?5MIXIN?1FXIN?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@CDHJLAHH@Failed?5to?5specify?5a?5status?5buffe@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@LBMBMFPG@Can?8t?5call?5GetStatus?5on?5a?5MIXIN?1@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@OOPJNDDC@Can?8t?5call?5SetPlayRegion?5on?5MIXI@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@DPLKNCLL@Play?5offset?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@EAGIFABL@Play?5length?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@GHNNCDPI@Play?5region?5extends?5past?5the?5end@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@BMHLNDEN@Can?8t?5call?5SetLoopRegion?5on?5MIXI@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IHLGDMJJ@Loop?5offset?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PIGELODJ@Loop?5length?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@HMEEMDGC@Loop?5region?5extends?5past?5the?5end@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@EAEJCEAG@CDirectSoundBuffer?3?3GetCurrentPo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@EDKDODNO@Can?8t?5call?5GetCurrentPosition?5on@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PKJFODPD@Missing?5first?5set?5of?5lock?5parame@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@JGMHEDHM@Missing?5one?5of?5the?5second?5set?5of@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@BEMGHNMF@Specified?5unsupported?5or?5invalid@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IAOKMPNH@Can?8t?5lock?5MIXIN?1FXIN?5buffers?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@MKDABCIF@Lock?5position?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@BEKBLCB@Lock?5position?5not?5block?5aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@JHOKEDLB@Lock?5size?5can?8t?5be?50?5without?5spe@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@ILPPJOBN@Lock?5size?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@NMCIIKAJ@Lock?5size?5not?5block?5aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KLDMGNIL@Position?5not?5sample?9aligned?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@POOJFMA@Can?8t?5call?5SetCurrentPosition?5on@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@EJDFOLMC@Play?5cursor?5position?5out?9of?9boun@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@OOGNPNNJ@Buffer?5does?5not?5have?5CTRLPOSITIO@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FJHCJHCJ@Offset?5at?5index?5?$CFlu?5not?5block?9al@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@JNMEBNPI@Offset?5at?5index?5?$CFlu?5past?5the?5end@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@ICKCNNOB@Invalid?5event?5at?5index?5?$CFlu?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@OBGPHDFP@Can?8t?5call?5SetNotificationPositi@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@KMCOCBOP@DSSTREAMDESC?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@DIPAJAPG@Failed?5to?5specify?5a?5stream?5forma@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@MOFMIBKN@Invalid?5stream?5format?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MKKMDBFH@3D?5streams?5must?5be?5mono?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0KC@IDKOPAEA@You?5must?5call?5one?5of?5the?53D?5algo@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@DAKNOCIC@dwMaxAttachedPackets?5must?5be?5at?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@HFDDPKAK@CDirectSoundStreamSettings?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@HMPJBIGK@CMcpxStream?$CIm_pDirectSound?9?$DOm_pD@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@ODHLADDF@CDirectSoundStream?3?3GetInfo?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@FAPKLLAJ@No?5XMEDIAINFO?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@HBPPFBBE@CDirectSoundStream?3?3Discontinuit@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@BKOHCKKE@CDirectSoundStream?3?3Flush?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@DJMLBOAK@CDirectSoundStream?3?3GetStatus?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@MFMIGPGP@Timestamps?5are?5not?5supported?5on?5@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EP@IPABPLMJ@DirectSound?5streams?5are?5input?5on@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@PFPDLHIF@The?5stream?5is?5not?5ready?5to?5accep@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@ICFGHBNO@CDirectSoundStream?3?3Pause?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MANMHDNL@Invalid?5stream?5pause?5state?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KJAOJHLI@CDirectSoundStream?3?3PauseEx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GEPHEJGF@ENVELOPE?5flag?5requires?5ASYNC?5fla@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@IFFHOGAL@Timestamped?5flush?5requires?5ASYNC@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _==@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT @InterlockedExchange@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_AddRef@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_Release@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_BeginScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_EndScene@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPalette_Unlock@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _log10f@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _sqrtf@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Play@IDirectSoundBuffer@@QAGJKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Stop@IDirectSoundBuffer@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _wmemchr@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?InsertHeadListUninit@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CIrql@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Raise@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lower@CIrql@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetFormat@CWaveFile@WaveLoader@@QAEJPAPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FloatToLong@Math@DirectSound@@YGJM@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetAlgorithm_FullHrtf@CHrtfSource@DirectSound@@SGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetAlgorithm_LightHrtf@CHrtfSource@DirectSound@@SGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister8@CAc97Device@DirectSound@@KGEK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister8@CAc97Device@DirectSound@@KGXKE@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister16@CAc97Device@DirectSound@@KGGK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister16@CAc97Device@DirectSound@@KGXKG@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PeekAciRegister32@CAc97Device@DirectSound@@KGKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PokeAciRegister32@CAc97Device@DirectSound@@KGXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?ReleaseChannel@CAc97Device@DirectSound@@QAEXPAVCAc97Channel@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CDirectSound@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Force3dRecalc@CDirectSound@DirectSound@@QAGXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CDirectSoundBuffer@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CDirectSoundBuffer@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFormat@CDirectSoundBuffer@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFrequency@CDirectSoundBuffer@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVolume@CDirectSoundBuffer@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPitch@CDirectSoundBuffer@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLFO@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEG@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFilter@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetHeadroom@CDirectSoundBuffer@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundBuffer@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBins@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetAllParameters@CDirectSoundBuffer@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeAngles@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeOrientation@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeOutsideVolume@CDirectSoundBuffer@DirectSound@@QAGJJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMaxDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMinDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMode@CDirectSoundBuffer@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPosition@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVelocity@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetRolloffCurve@CDirectSoundBuffer@DirectSound@@QAGJPBMKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetI3DL2Source@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?AddRef@CDirectSoundStream@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CDirectSoundStream@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFormat@CDirectSoundStream@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFrequency@CDirectSoundStream@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPitch@CDirectSoundStream@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVolume@CDirectSoundStream@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLFO@CDirectSoundStream@DirectSound@@QAGJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEG@CDirectSoundStream@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFilter@CDirectSoundStream@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetHeadroom@CDirectSoundStream@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundStream@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBins@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetAllParameters@CDirectSoundStream@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeAngles@CDirectSoundStream@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeOrientation@CDirectSoundStream@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeOutsideVolume@CDirectSoundStream@DirectSound@@QAGJJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMaxDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMinDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMode@CDirectSoundStream@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPosition@CDirectSoundStream@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVelocity@CDirectSoundStream@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetRolloffCurve@CDirectSoundStream@DirectSound@@QAGJPBMKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetI3DL2Source@CDirectSoundStream@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CMcpxNotifier@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Free@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Reset@CMcpxNotifier@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetScratchSpaceLinAddr@CMcpxDspScratchDma@DirectSound@@QAEPAXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DownloadEffectsImage@CMcpxAPU@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DoWork@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetLowWatermark@CMcpxStream@DirectSound@@QAEKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPBD@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CFileMediaObject@DirectSound@@QAGJPBDKKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CFileMediaObject@DirectSound@@QAGJPAX@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_QueryInterfaceC@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_QueryInterface@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetCooperativeLevel@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_Compact@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_AddRef@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_Release@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_GetCaps@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_CreateSoundBuffer@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_CreateSoundStream@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_GetSpeakerConfig@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_DownloadEffectsImage@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_GetEffectData@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetEffectData@24
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_CommitEffectData@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_EnableHeadphones@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetMixBinHeadroom@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetAllParameters@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetDistanceFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetDopplerFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetOrientation@32
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetPosition@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetRolloffFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetVelocity@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_CommitDeferredSettings@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_SetI3DL2Listener@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_GetTime@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSound_GetOutputLevels@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_QueryInterface@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_QueryInterfaceC@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_Unlock@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_Restore@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_AddRef@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_Release@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetFormat@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetFrequency@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetVolume@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetPitch@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetLFO@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetEG@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetFilter@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetHeadroom@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetOutputBuffer@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetMixBins@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetMixBinVolumes@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetAllParameters@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetConeAngles@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetConeOrientation@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetConeOutsideVolume@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetMaxDistance@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetMinDistance@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetMode@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetPosition@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetVelocity@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetDistanceFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetDopplerFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetRolloffFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetRolloffCurve@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetI3DL2Source@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_Play@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_PlayEx@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_Stop@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_StopEx@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetPlayRegion@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetLoopRegion@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_GetStatus@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_GetCurrentPosition@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetCurrentPosition@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetBufferData@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_Lock@32
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_SetNotificationPositions@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_QueryInterface@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_QueryInterfaceC@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetFormat@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetFrequency@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetVolume@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetPitch@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetLFO@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetEG@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetFilter@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetHeadroom@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetOutputBuffer@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetMixBins@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetMixBinVolumes@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetAllParameters@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetConeAngles@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetConeOrientation@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetConeOutsideVolume@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetMaxDistance@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetMinDistance@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetMode@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetPosition@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetVelocity@20
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetDistanceFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetDopplerFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetRolloffFactor@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetRolloffCurve@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_SetI3DL2Source@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_Pause@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_PauseEx@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _IDirectSoundStream_FlushEx@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundCreate@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundCreateBuffer@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundCreateStream@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundDoWork@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundGetSampleTime@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundUseFullHRTF@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundUseLightHRTF@0
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundOverrideSpeakerConfig@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundLoadEncoder@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XAudioCalculatePitch@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XAudioCreatePcmFormat@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XAudioCreateAdpcmFormat@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XAudioDownloadEffectsImage@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XWaveFileCreateMediaObject@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XWaveFileCreateMediaObjectEx@12
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XFileCreateMediaObject@24
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _XFileCreateMediaObjectEx@8
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _Ac97CreateMediaObject@16
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _DirectSoundDumpMemoryUsage@4
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSoundSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSoundSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0DS3DLISTENERPARAMS@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0_DS3DLISTENER@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSoundSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEffectImageLocations@CDirectSoundSettings@DirectSound@@QAEXPBU_DSEFFECTIMAGELOC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSound@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSound@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSound@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CDirectSound@DirectSound@@UAGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CDirectSound@DirectSound@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetCaps@CDirectSound@DirectSound@@QAGJPAU_DSCAPS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CreateSoundStream@CDirectSound@DirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetSpeakerConfig@CDirectSound@DirectSound@@QAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DownloadEffectsImage@CDirectSound@DirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEffectData@CDirectSound@DirectSound@@QAGJKKPBXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetEffectData@CDirectSound@DirectSound@@QAGJKKPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitEffectData@CDirectSound@DirectSound@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBinHeadroom@CDirectSound@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetAllParameters@CDirectSound@DirectSound@@QAGJPBU_DS3DLISTENER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSound@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSound@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSound@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOrientation@CDirectSound@DirectSound@@QAGJMMMMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPosition@CDirectSound@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVelocity@CDirectSound@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetI3DL2Listener@CDirectSound@DirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetTime@CDirectSound@DirectSound@@QAGJPA_J@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetOutputLevels@CDirectSound@DirectSound@@QAGJPAU_DSOUTPUTLEVELS@@H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?DoWork@CDirectSound@DirectSound@@QAGXXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?EnableHeadphones@CDirectSound@DirectSound@@QAGJH@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSoundVoiceSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSoundVoiceSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CDirectSoundVoiceSettings@DirectSound@@QAEJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFormat@CDirectSoundVoiceSettings@DirectSound@@QAEHPBUtWAVEFORMATEX@@H@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVolume@CDirectSoundVoiceSettings@DirectSound@@QAEXJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetHeadroom@CDirectSoundVoiceSettings@DirectSound@@QAEXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundVoiceSettings@DirectSound@@QAEXPAVCDirectSoundBuffer@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSoundVoice@DirectSound@@QAE@PAVCDirectSound@1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSoundVoice@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSoundVoice@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CDirectSoundVoice@DirectSound@@QAGXPAVCMcpxVoiceClient@2@PAVCDirectSoundVoiceSettings@2@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFormat@CDirectSoundVoice@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFrequency@CDirectSoundVoice@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVolume@CDirectSoundVoice@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLFO@CDirectSoundVoice@DirectSound@@QAGJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetEG@CDirectSoundVoice@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetFilter@CDirectSoundVoice@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetHeadroom@CDirectSoundVoice@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBins@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetAllParameters@CDirectSoundVoice@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeAngles@CDirectSoundVoice@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeOrientation@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetConeOutsideVolume@CDirectSoundVoice@DirectSound@@QAGJJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMaxDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMinDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetMode@CDirectSoundVoice@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPosition@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetVelocity@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetRolloffCurve@CDirectSoundVoice@DirectSound@@QAGJPBMKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetI3DL2Source@CDirectSoundVoice@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSoundBufferSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSoundBufferSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSoundBufferSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CDirectSoundBufferSettings@DirectSound@@QAEJPBU_DSBUFFERDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPlayRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLoopRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetNotificationPositions@CDirectSoundBufferSettings@DirectSound@@QAEJKPBU_DSBPOSITIONNOTIFY@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSoundBuffer@DirectSound@@QAE@PAVCDirectSound@1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSoundBuffer@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSoundBuffer@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSBUFFERDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetBufferData@CDirectSoundBuffer@DirectSound@@QAGJPAXK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Play@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PlayEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Stop@CDirectSoundBuffer@DirectSound@@QAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?StopEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CDirectSoundBuffer@DirectSound@@QAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetPlayRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetLoopRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJPAK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Lock@CDirectSoundBuffer@DirectSound@@QAGJKKPAPAXPAK01K@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?SetNotificationPositions@CDirectSoundBuffer@DirectSound@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSoundStreamSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSoundStreamSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSoundStreamSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CDirectSoundStreamSettings@DirectSound@@QAEJPBU_DSSTREAMDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0CDirectSoundStream@DirectSound@@QAE@PAVCDirectSound@1@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_GCDirectSoundStream@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0IDirectSoundStream@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1CDirectSoundStream@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Initialize@CDirectSoundStream@DirectSound@@QAGJPBU_DSSTREAMDESC@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetInfo@CDirectSoundStream@DirectSound@@UAGJPAU_XMEDIAINFO@@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Discontinuity@CDirectSoundStream@DirectSound@@UAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Flush@CDirectSoundStream@DirectSound@@UAGJXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?GetStatus@CDirectSoundStream@DirectSound@@UAGJPAK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Process@CDirectSoundStream@DirectSound@@UAGJPBU_XMEDIAPACKET@@0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Pause@CDirectSoundStream@DirectSound@@QAGJK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?PauseEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?FlushEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0?$CValidObject@$0EEFDEOEE@@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0?$CValidObject@$0EEFDECCA@@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??0?$CValidObject@$0EEFDFDCA@@DirectSound@@QAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EBEDDJDH@@DirectSound@@UAE@XZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EBEDDJDH@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSound@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCWaveFileMediaObject@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCFileMediaObject@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCAc97MediaObject@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundBuffer@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCMcpxVoiceClient@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EBEDDJDH@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ??_ECDirectSound@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECDirectSoundBuffer@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECDirectSoundStream@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CDirectSoundStream@DirectSound@@WM@AGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT ?Release@CDirectSoundStream@DirectSound@@WM@AGKXZ
DSOUND	SEGMENT PARA USE32 PUBLIC ''
DSOUND	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7IDirectSoundStream@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?wfxSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4UtWAVEFORMATEX@@B
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT DWORD USE32 PUBLIC ''
XBLD$V	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7XMediaObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?fSubMixHeadroom@?1??SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z@4HA
DSOUND_RW	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RW	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ?asSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4QBFB
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundStreamSettings@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSound@DirectSound@@6BCRefCount@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundSettings@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundVoiceSettings@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundVoice@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EBEDDJDH@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundBuffer@DirectSound@@6BCDirectSoundVoice@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundStream@DirectSound@@6BIDirectSoundStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundStream@DirectSound@@6B?$CValidObject@$0EEFDFDCA@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSound@DirectSound@@6B?$CValidObject@$0EEFDEOEE@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundBufferSettings@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundStream@DirectSound@@6BCDirectSoundVoice@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CDirectSoundBuffer@DirectSound@@6B?$CValidObject@$0EEFDECCA@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?apDefaultMixBins@?1??SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z@4QBQBU4@B
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT DWORD USE32 PUBLIC ''
DSOUND_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, DSOUND_RW, XBLD$V
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A ; DirectSound::CDirectSound::m_pDirectSound
PUBLIC	?m_pvEncoderImageData@CDirectSound@DirectSound@@2PAXA ; DirectSound::CDirectSound::m_pvEncoderImageData
PUBLIC	?m_dwEncoderImageSize@CDirectSound@DirectSound@@2KA ; DirectSound::CDirectSound::m_dwEncoderImageSize
PUBLIC	?m_wfxMixDest@CDirectSoundBufferSettings@DirectSound@@2UtWAVEFORMATEX@@B ; DirectSound::CDirectSoundBufferSettings::m_wfxMixDest
PUBLIC	_DSoundBuildNumberD
DSOUND_URW	SEGMENT
?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A DD 01H DUP (?) ; DirectSound::CDirectSound::m_pDirectSound
?m_pvEncoderImageData@CDirectSound@DirectSound@@2PAXA DD 01H DUP (?) ; DirectSound::CDirectSound::m_pvEncoderImageData
?m_dwEncoderImageSize@CDirectSound@DirectSound@@2KA DD 01H DUP (?) ; DirectSound::CDirectSound::m_dwEncoderImageSize
DSOUND_URW	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
DSOUND_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
DSOUND_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
DSOUND_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
DSOUND_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
DSOUND_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
DSOUND_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
DSOUND_RD	ENDS
;	COMDAT _DSoundBuildNumberD
XBLD$V	SEGMENT
_DSoundBuildNumberD DW 05344H
	DW	0554fH
	DW	0444eH
	DW	044H
	DW	01H
	DW	00H
	DW	01130H
	DW	08001H
XBLD$V	ENDS
DSOUND_RD	SEGMENT
?m_wfxMixDest@CDirectSoundBufferSettings@DirectSound@@2UtWAVEFORMATEX@@B DW 01H ; DirectSound::CDirectSoundBufferSettings::m_wfxMixDest
	DW	01H
	DD	0bb80H
	DD	02ee00H
	DW	04H
	DW	018H
	DW	00H
DSOUND_RD	ENDS
PUBLIC	_IDirectSound_AddRef@4
PUBLIC	_IDirectSound_QueryInterfaceC@12
PUBLIC	??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@HOMJKBAH@pDirectSound?$AA@		; `string'
PUBLIC	??_C@_0N@POCBACBD@ppvInterface?$AA@		; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\dsapi.cpp', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@HOMJKBAH@pDirectSound?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@HOMJKBAH@pDirectSound?$AA@ DB 'pDirectSound', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@POCBACBD@ppvInterface?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@POCBACBD@ppvInterface?$AA@ DB 'ppvInterface', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _IDirectSound_QueryInterfaceC@12
DSOUND	SEGMENT
_pDirectSound$ = 8
_iid$ = 12
_ppvInterface$ = 16
_IDirectSound_QueryInterfaceC@12 PROC NEAR		; COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     ASSERT(pDirectSound);

  00003	6a 5a		 push	 90			; 0000005aH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HOMJKBAH@pDirectSound?$AA@
  0000f	33 c0		 xor	 eax, eax
  00011	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00015	0f 94 c0	 sete	 al
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 91   :     ASSERT(ppvInterface);

  00021	6a 5b		 push	 91			; 0000005bH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@POCBACBD@ppvInterface?$AA@
  0002d	33 c9		 xor	 ecx, ecx
  0002f	83 7d 10 00	 cmp	 DWORD PTR _ppvInterface$[ebp], 0
  00033	0f 94 c1	 sete	 cl
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003c	83 c4 10	 add	 esp, 16			; 00000010H

; 92   : 
; 93   :     IDirectSound_AddRef(pDirectSound);

  0003f	8b 55 08	 mov	 edx, DWORD PTR _pDirectSound$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _IDirectSound_AddRef@4

; 94   :     *ppvInterface = pDirectSound;

  00048	8b 45 10	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _pDirectSound$[ebp]
  0004e	89 08		 mov	 DWORD PTR [eax], ecx

; 95   : 
; 96   :     return DS_OK;

  00050	33 c0		 xor	 eax, eax

; 97   : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_QueryInterfaceC@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_QueryInterface@12
; Function compile flags: /Odt
;	COMDAT _IDirectSound_QueryInterface@12
DSOUND	SEGMENT
_pDirectSound$ = 8
_iid$ = 12
_ppvInterface$ = 16
_IDirectSound_QueryInterface@12 PROC NEAR		; COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  :     ASSERT(pDirectSound);

  00003	6a 65		 push	 101			; 00000065H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HOMJKBAH@pDirectSound?$AA@
  0000f	33 c0		 xor	 eax, eax
  00011	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00015	0f 94 c0	 sete	 al
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 102  :     ASSERT(ppvInterface);

  00021	6a 66		 push	 102			; 00000066H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@POCBACBD@ppvInterface?$AA@
  0002d	33 c9		 xor	 ecx, ecx
  0002f	83 7d 10 00	 cmp	 DWORD PTR _ppvInterface$[ebp], 0
  00033	0f 94 c1	 sete	 cl
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003c	83 c4 10	 add	 esp, 16			; 00000010H

; 103  : 
; 104  :     IDirectSound_AddRef(pDirectSound);

  0003f	8b 55 08	 mov	 edx, DWORD PTR _pDirectSound$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 _IDirectSound_AddRef@4

; 105  :     *ppvInterface = pDirectSound;

  00048	8b 45 10	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _pDirectSound$[ebp]
  0004e	89 08		 mov	 DWORD PTR [eax], ecx

; 106  : 
; 107  :     return DS_OK;

  00050	33 c0		 xor	 eax, eax

; 108  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_QueryInterface@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetCooperativeLevel@12
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetCooperativeLevel@12
DSOUND	SEGMENT
_pDirectSound$ = 8
_hWnd$ = 12
_dwLevel$ = 16
_IDirectSound_SetCooperativeLevel@12 PROC NEAR		; COMDAT

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 112  :     UNREFERENCED_PARAMETER(pDirectSound);
; 113  :     UNREFERENCED_PARAMETER(hWnd);
; 114  :     UNREFERENCED_PARAMETER(dwLevel);
; 115  :     return DS_OK;

  00003	33 c0		 xor	 eax, eax

; 116  : }

  00005	5d		 pop	 ebp
  00006	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_SetCooperativeLevel@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_Compact@4
; Function compile flags: /Odt
;	COMDAT _IDirectSound_Compact@4
DSOUND	SEGMENT
_pDirectSound$ = 8
_IDirectSound_Compact@4 PROC NEAR			; COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  :     UNREFERENCED_PARAMETER(pDirectSound);
; 121  :     return DS_OK;

  00003	33 c0		 xor	 eax, eax

; 122  : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
_IDirectSound_Compact@4 ENDP
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT _IDirectSound_AddRef@4
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_IDirectSound_AddRef@4 PROC NEAR			; COMDAT

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 126  :     return ((CDirectSound *)pDirectSound)->AddRef();

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39413
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39414
$L39413:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39414:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	51		 push	 ecx
  00029	ff 50 04	 call	 DWORD PTR [eax+4]

; 127  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_IDirectSound_AddRef@4 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_Release@4
; Function compile flags: /Odt
;	COMDAT _IDirectSound_Release@4
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_IDirectSound_Release@4 PROC NEAR			; COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 131  :     return ((CDirectSound *)pDirectSound)->Release();

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39418
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39419
$L39418:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39419:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	51		 push	 ecx
  00029	ff 50 08	 call	 DWORD PTR [eax+8]

; 132  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_IDirectSound_Release@4 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_GetCaps@8
PUBLIC	?GetCaps@CDirectSound@DirectSound@@QAGJPAU_DSCAPS@@@Z ; DirectSound::CDirectSound::GetCaps
; Function compile flags: /Odt
;	COMDAT _IDirectSound_GetCaps@8
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pdsc$ = 12
_IDirectSound_GetCaps@8 PROC NEAR			; COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 136  :     return ((CDirectSound *)pDirectSound)->GetCaps(pdsc);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39423
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39424
$L39423:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39424:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsc$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?GetCaps@CDirectSound@DirectSound@@QAGJPAU_DSCAPS@@@Z ; DirectSound::CDirectSound::GetCaps

; 137  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSound_GetCaps@8 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_CreateSoundBuffer@16
PUBLIC	?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ; DirectSound::CDirectSound::CreateSoundBuffer
; Function compile flags: /Odt
;	COMDAT _IDirectSound_CreateSoundBuffer@16
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pdsbd$ = 12
_ppBuffer$ = 16
_pUnkOuter$ = 20
_IDirectSound_CreateSoundBuffer@16 PROC NEAR		; COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 141  :     return ((CDirectSound *)pDirectSound)->CreateSoundBuffer(pdsbd, ppBuffer, pUnkOuter);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39428
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39429
$L39428:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39429:
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _pUnkOuter$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 10	 mov	 edx, DWORD PTR _ppBuffer$[ebp]
  00023	52		 push	 edx
  00024	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ; DirectSound::CDirectSound::CreateSoundBuffer

; 142  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
_IDirectSound_CreateSoundBuffer@16 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_CreateSoundStream@16
PUBLIC	?CreateSoundStream@CDirectSound@DirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z ; DirectSound::CDirectSound::CreateSoundStream
; Function compile flags: /Odt
;	COMDAT _IDirectSound_CreateSoundStream@16
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pdssd$ = 12
_ppStream$ = 16
_pUnkOuter$ = 20
_IDirectSound_CreateSoundStream@16 PROC NEAR		; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 148  :     return ((CDirectSound *)pDirectSound)->CreateSoundStream(pdssd, ppStream, pUnkOuter);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39433
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39434
$L39433:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39434:
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _pUnkOuter$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 10	 mov	 edx, DWORD PTR _ppStream$[ebp]
  00023	52		 push	 edx
  00024	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?CreateSoundStream@CDirectSound@DirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z ; DirectSound::CDirectSound::CreateSoundStream

; 149  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
_IDirectSound_CreateSoundStream@16 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_GetSpeakerConfig@8
PUBLIC	?GetSpeakerConfig@CDirectSound@DirectSound@@QAGJPAK@Z ; DirectSound::CDirectSound::GetSpeakerConfig
; Function compile flags: /Odt
;	COMDAT _IDirectSound_GetSpeakerConfig@8
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pdwSpeakerConfig$ = 12
_IDirectSound_GetSpeakerConfig@8 PROC NEAR		; COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 155  :     return ((CDirectSound *)pDirectSound)->GetSpeakerConfig(pdwSpeakerConfig);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39438
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39439
$L39438:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39439:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwSpeakerConfig$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?GetSpeakerConfig@CDirectSound@DirectSound@@QAGJPAK@Z ; DirectSound::CDirectSound::GetSpeakerConfig

; 156  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSound_GetSpeakerConfig@8 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_DownloadEffectsImage@20
PUBLIC	?DownloadEffectsImage@CDirectSound@DirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z ; DirectSound::CDirectSound::DownloadEffectsImage
; Function compile flags: /Odt
;	COMDAT _IDirectSound_DownloadEffectsImage@20
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pvImageBuffer$ = 12
_dwImageSize$ = 16
_pImageLoc$ = 20
_ppImageDesc$ = 24
_IDirectSound_DownloadEffectsImage@20 PROC NEAR		; COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 162  : 
; 163  : #ifdef DSAPI_DISABLE_EFFECTS
; 164  : 
; 165  :     return DS_OK;
; 166  : 
; 167  : #else // DSAPI_DISABLE_EFFECTS
; 168  : 
; 169  :     return ((CDirectSound *)pDirectSound)->DownloadEffectsImage(pvImageBuffer, dwImageSize, pImageLoc, ppImageDesc);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39443
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39444
$L39443:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39444:
  0001c	8b 4d 18	 mov	 ecx, DWORD PTR _ppImageDesc$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 14	 mov	 edx, DWORD PTR _pImageLoc$[ebp]
  00023	52		 push	 edx
  00024	8b 45 10	 mov	 eax, DWORD PTR _dwImageSize$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _pvImageBuffer$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?DownloadEffectsImage@CDirectSound@DirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z ; DirectSound::CDirectSound::DownloadEffectsImage

; 170  : 
; 171  : #endif // DSAPI_DISABLE_EFFECTS
; 172  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 14 00	 ret	 20			; 00000014H
_IDirectSound_DownloadEffectsImage@20 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_GetEffectData@20
PUBLIC	?GetEffectData@CDirectSound@DirectSound@@QAGJKKPAXK@Z ; DirectSound::CDirectSound::GetEffectData
; Function compile flags: /Odt
;	COMDAT _IDirectSound_GetEffectData@20
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_dwEffectIndex$ = 12
_dwOffset$ = 16
_pvData$ = 20
_dwDataSize$ = 24
_IDirectSound_GetEffectData@20 PROC NEAR		; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 178  : 
; 179  : #ifdef DSAPI_DISABLE_EFFECTS
; 180  : 
; 181  :     ZeroMemory(pvData, dwDataSize);
; 182  : 
; 183  :     return DS_OK;
; 184  : 
; 185  : #else // DSAPI_DISABLE_EFFECTS
; 186  : 
; 187  :     return ((CDirectSound *)pDirectSound)->GetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39448
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39449
$L39448:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39449:
  0001c	8b 4d 18	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 14	 mov	 edx, DWORD PTR _pvData$[ebp]
  00023	52		 push	 edx
  00024	8b 45 10	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _dwEffectIndex$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?GetEffectData@CDirectSound@DirectSound@@QAGJKKPAXK@Z ; DirectSound::CDirectSound::GetEffectData

; 188  : 
; 189  : #endif // DSAPI_DISABLE_EFFECTS
; 190  : 
; 191  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 14 00	 ret	 20			; 00000014H
_IDirectSound_GetEffectData@20 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetEffectData@24
PUBLIC	?SetEffectData@CDirectSound@DirectSound@@QAGJKKPBXKK@Z ; DirectSound::CDirectSound::SetEffectData
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetEffectData@24
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_dwEffectIndex$ = 12
_dwOffset$ = 16
_pvData$ = 20
_dwDataSize$ = 24
_dwFlags$ = 28
_IDirectSound_SetEffectData@24 PROC NEAR		; COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 195  : 
; 196  : #ifdef DSAPI_DISABLE_EFFECTS
; 197  : 
; 198  :     return DS_OK;
; 199  : 
; 200  : #else // DSAPI_DISABLE_EFFECTS
; 201  : 
; 202  :     return ((CDirectSound *)pDirectSound)->SetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39453
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39454
$L39453:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39454:
  0001c	8b 4d 1c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 18	 mov	 edx, DWORD PTR _dwDataSize$[ebp]
  00023	52		 push	 edx
  00024	8b 45 14	 mov	 eax, DWORD PTR _pvData$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 10	 mov	 ecx, DWORD PTR _dwOffset$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 0c	 mov	 edx, DWORD PTR _dwEffectIndex$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?SetEffectData@CDirectSound@DirectSound@@QAGJKKPBXKK@Z ; DirectSound::CDirectSound::SetEffectData

; 203  : 
; 204  : #endif // DSAPI_DISABLE_EFFECTS
; 205  : 
; 206  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 18 00	 ret	 24			; 00000018H
_IDirectSound_SetEffectData@24 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_CommitEffectData@4
PUBLIC	?CommitEffectData@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitEffectData
; Function compile flags: /Odt
;	COMDAT _IDirectSound_CommitEffectData@4
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_IDirectSound_CommitEffectData@4 PROC NEAR		; COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 210  : 
; 211  : #ifdef DSAPI_DISABLE_EFFECTS
; 212  : 
; 213  :     return DS_OK;
; 214  : 
; 215  : #else // DSAPI_DISABLE_EFFECTS
; 216  : 
; 217  :     return ((CDirectSound *)pDirectSound)->CommitEffectData();

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39458
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39459
$L39458:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39459:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ?CommitEffectData@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitEffectData

; 218  : 
; 219  : #endif // DSAPI_DISABLE_EFFECTS
; 220  : 
; 221  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
_IDirectSound_CommitEffectData@4 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_EnableHeadphones@8
PUBLIC	?EnableHeadphones@CDirectSound@DirectSound@@QAGJH@Z ; DirectSound::CDirectSound::EnableHeadphones
; Function compile flags: /Odt
;	COMDAT _IDirectSound_EnableHeadphones@8
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_fEnabled$ = 12
_IDirectSound_EnableHeadphones@8 PROC NEAR		; COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 227  :     return ((CDirectSound *)pDirectSound)->EnableHeadphones(fEnabled);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39463
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39464
$L39463:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39464:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _fEnabled$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?EnableHeadphones@CDirectSound@DirectSound@@QAGJH@Z ; DirectSound::CDirectSound::EnableHeadphones

; 228  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSound_EnableHeadphones@8 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetMixBinHeadroom@12
PUBLIC	?SetMixBinHeadroom@CDirectSound@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSound::SetMixBinHeadroom
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetMixBinHeadroom@12
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_dwMixBin$ = 12
_dwHeadroom$ = 16
_IDirectSound_SetMixBinHeadroom@12 PROC NEAR		; COMDAT

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 234  :     return ((CDirectSound *)pDirectSound)->SetMixBinHeadroom(dwMixBin, dwHeadroom);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39468
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39469
$L39468:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39469:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwHeadroom$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _dwMixBin$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetMixBinHeadroom@CDirectSound@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSound::SetMixBinHeadroom

; 235  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_SetMixBinHeadroom@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetAllParameters@12
PUBLIC	?SetAllParameters@CDirectSound@DirectSound@@QAGJPBU_DS3DLISTENER@@K@Z ; DirectSound::CDirectSound::SetAllParameters
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetAllParameters@12
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pds3dl$ = 12
_dwFlags$ = 16
_IDirectSound_SetAllParameters@12 PROC NEAR		; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 241  : 
; 242  : #ifdef DSAPI_DISABLE_LISTENER
; 243  : 
; 244  :     return DS_OK;
; 245  : 
; 246  : #else // DSAPI_DISABLE_LISTENER
; 247  : 
; 248  :     return ((CDirectSound *)pDirectSound)->SetAllParameters(pds3dl, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39473
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39474
$L39473:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39474:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _pds3dl$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetAllParameters@CDirectSound@DirectSound@@QAGJPBU_DS3DLISTENER@@K@Z ; DirectSound::CDirectSound::SetAllParameters

; 249  : 
; 250  : #endif // DSAPI_DISABLE_LISTENER
; 251  : 
; 252  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_SetAllParameters@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetDistanceFactor@12
PUBLIC	?SetDistanceFactor@CDirectSound@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSound::SetDistanceFactor
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetDistanceFactor@12
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_flDistanceFactor$ = 12
_dwFlags$ = 16
_IDirectSound_SetDistanceFactor@12 PROC NEAR		; COMDAT

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 256  : 
; 257  : #ifdef DSAPI_DISABLE_LISTENER
; 258  : 
; 259  :     return DS_OK;
; 260  : 
; 261  : #else // DSAPI_DISABLE_LISTENER
; 262  : 
; 263  :     return ((CDirectSound *)pDirectSound)->SetDistanceFactor(flDistanceFactor, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39478
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39479
$L39478:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39479:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flDistanceFactor$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetDistanceFactor@CDirectSound@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSound::SetDistanceFactor

; 264  : 
; 265  : #endif // DSAPI_DISABLE_LISTENER
; 266  : 
; 267  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_SetDistanceFactor@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetDopplerFactor@12
PUBLIC	?SetDopplerFactor@CDirectSound@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSound::SetDopplerFactor
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetDopplerFactor@12
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_flDopplerFactor$ = 12
_dwFlags$ = 16
_IDirectSound_SetDopplerFactor@12 PROC NEAR		; COMDAT

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 271  : 
; 272  : #ifdef DSAPI_DISABLE_LISTENER
; 273  : 
; 274  :     return DS_OK;
; 275  : 
; 276  : #else // DSAPI_DISABLE_LISTENER
; 277  : 
; 278  :     return ((CDirectSound *)pDirectSound)->SetDopplerFactor(flDopplerFactor, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39484
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39485
$L39484:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39485:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flDopplerFactor$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetDopplerFactor@CDirectSound@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSound::SetDopplerFactor

; 279  : 
; 280  : #endif // DSAPI_DISABLE_LISTENER
; 281  : 
; 282  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_SetDopplerFactor@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetOrientation@32
PUBLIC	?SetOrientation@CDirectSound@DirectSound@@QAGJMMMMMMK@Z ; DirectSound::CDirectSound::SetOrientation
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetOrientation@32
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_xFront$ = 12
_yFront$ = 16
_zFront$ = 20
_xTop$ = 24
_yTop$ = 28
_zTop$ = 32
_dwFlags$ = 36
_IDirectSound_SetOrientation@32 PROC NEAR		; COMDAT

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 286  : 
; 287  : #ifdef DSAPI_DISABLE_LISTENER
; 288  : 
; 289  :     return DS_OK;
; 290  : 
; 291  : #else // DSAPI_DISABLE_LISTENER
; 292  : 
; 293  :     return ((CDirectSound *)pDirectSound)->SetOrientation(xFront, yFront, zFront, xTop, yTop, zTop, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39489
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39490
$L39489:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39490:
  0001c	8b 4d 24	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 20	 mov	 edx, DWORD PTR _zTop$[ebp]
  00023	52		 push	 edx
  00024	8b 45 1c	 mov	 eax, DWORD PTR _yTop$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 18	 mov	 ecx, DWORD PTR _xTop$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 14	 mov	 edx, DWORD PTR _zFront$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 10	 mov	 eax, DWORD PTR _yFront$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _xFront$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?SetOrientation@CDirectSound@DirectSound@@QAGJMMMMMMK@Z ; DirectSound::CDirectSound::SetOrientation

; 294  : 
; 295  : #endif // DSAPI_DISABLE_LISTENER
; 296  : 
; 297  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 20 00	 ret	 32			; 00000020H
_IDirectSound_SetOrientation@32 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetPosition@20
PUBLIC	?SetPosition@CDirectSound@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSound::SetPosition
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetPosition@20
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSound_SetPosition@20 PROC NEAR			; COMDAT

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 301  : 
; 302  : #ifdef DSAPI_DISABLE_LISTENER
; 303  : 
; 304  :     return DS_OK;
; 305  : 
; 306  : #else // DSAPI_DISABLE_LISTENER
; 307  : 
; 308  :     return ((CDirectSound *)pDirectSound)->SetPosition(x, y, z, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39494
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39495
$L39494:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39495:
  0001c	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00023	52		 push	 edx
  00024	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?SetPosition@CDirectSound@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSound::SetPosition

; 309  : 
; 310  : #endif // DSAPI_DISABLE_LISTENER
; 311  : 
; 312  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 14 00	 ret	 20			; 00000014H
_IDirectSound_SetPosition@20 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetRolloffFactor@12
PUBLIC	?SetRolloffFactor@CDirectSound@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSound::SetRolloffFactor
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetRolloffFactor@12
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_flRolloffFactor$ = 12
_dwFlags$ = 16
_IDirectSound_SetRolloffFactor@12 PROC NEAR		; COMDAT

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 316  : 
; 317  : #ifdef DSAPI_DISABLE_LISTENER
; 318  : 
; 319  :     return DS_OK;
; 320  : 
; 321  : #else // DSAPI_DISABLE_LISTENER
; 322  : 
; 323  :     return ((CDirectSound *)pDirectSound)->SetRolloffFactor(flRolloffFactor, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39499
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39500
$L39499:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39500:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flRolloffFactor$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetRolloffFactor@CDirectSound@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSound::SetRolloffFactor

; 324  : 
; 325  : #endif // DSAPI_DISABLE_LISTENER
; 326  : 
; 327  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_SetRolloffFactor@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetVelocity@20
PUBLIC	?SetVelocity@CDirectSound@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSound::SetVelocity
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetVelocity@20
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSound_SetVelocity@20 PROC NEAR			; COMDAT

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 331  : 
; 332  : #ifdef DSAPI_DISABLE_LISTENER
; 333  : 
; 334  :     return DS_OK;
; 335  : 
; 336  : #else // DSAPI_DISABLE_LISTENER
; 337  : 
; 338  :     return ((CDirectSound *)pDirectSound)->SetVelocity(x, y, z, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39504
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39505
$L39504:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39505:
  0001c	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00023	52		 push	 edx
  00024	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?SetVelocity@CDirectSound@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSound::SetVelocity

; 339  : 
; 340  : #endif // DSAPI_DISABLE_LISTENER
; 341  : 
; 342  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 14 00	 ret	 20			; 00000014H
_IDirectSound_SetVelocity@20 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_CommitDeferredSettings@4
PUBLIC	?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
; Function compile flags: /Odt
;	COMDAT _IDirectSound_CommitDeferredSettings@4
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_IDirectSound_CommitDeferredSettings@4 PROC NEAR	; COMDAT

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 346  : 
; 347  : #ifdef DSAPI_DISABLE_LISTENER
; 348  : 
; 349  :     return DS_OK;
; 350  : 
; 351  : #else // DSAPI_DISABLE_LISTENER
; 352  : 
; 353  :     return ((CDirectSound *)pDirectSound)->CommitDeferredSettings();

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39509
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39510
$L39509:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39510:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings

; 354  : 
; 355  : #endif // DSAPI_DISABLE_LISTENER
; 356  : 
; 357  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
_IDirectSound_CommitDeferredSettings@4 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_SetI3DL2Listener@12
PUBLIC	?SetI3DL2Listener@CDirectSound@DirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z ; DirectSound::CDirectSound::SetI3DL2Listener
; Function compile flags: /Odt
;	COMDAT _IDirectSound_SetI3DL2Listener@12
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pds3dl$ = 12
_dwFlags$ = 16
_IDirectSound_SetI3DL2Listener@12 PROC NEAR		; COMDAT

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 361  : 
; 362  : #ifdef DSAPI_DISABLE_LISTENER
; 363  : 
; 364  :     return DS_OK;
; 365  : 
; 366  : #else // DSAPI_DISABLE_LISTENER
; 367  : 
; 368  :     return ((CDirectSound *)pDirectSound)->SetI3DL2Listener(pds3dl, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39514
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39515
$L39514:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39515:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _pds3dl$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetI3DL2Listener@CDirectSound@DirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z ; DirectSound::CDirectSound::SetI3DL2Listener

; 369  : 
; 370  : #endif // DSAPI_DISABLE_LISTENER
; 371  : 
; 372  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_SetI3DL2Listener@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_GetTime@8
PUBLIC	?GetTime@CDirectSound@DirectSound@@QAGJPA_J@Z	; DirectSound::CDirectSound::GetTime
; Function compile flags: /Odt
;	COMDAT _IDirectSound_GetTime@8
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_prtCurrent$ = 12
_IDirectSound_GetTime@8 PROC NEAR			; COMDAT

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 378  :     return ((CDirectSound *)pDirectSound)->GetTime(prtCurrent);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39519
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39520
$L39519:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39520:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _prtCurrent$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?GetTime@CDirectSound@DirectSound@@QAGJPA_J@Z ; DirectSound::CDirectSound::GetTime

; 379  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSound_GetTime@8 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSound_GetOutputLevels@12
PUBLIC	?GetOutputLevels@CDirectSound@DirectSound@@QAGJPAU_DSOUTPUTLEVELS@@H@Z ; DirectSound::CDirectSound::GetOutputLevels
; Function compile flags: /Odt
;	COMDAT _IDirectSound_GetOutputLevels@12
DSOUND	SEGMENT
tv66 = -4
_pDirectSound$ = 8
_pOutputLevels$ = 12
_bReset$ = 16
_IDirectSound_GetOutputLevels@12 PROC NEAR		; COMDAT

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 384  :     return ((CDirectSound *)pDirectSound)->GetOutputLevels(pOutputLevels,bReset);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00008	74 0b		 je	 SHORT $L39524
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39525
$L39524:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39525:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _bReset$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _pOutputLevels$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?GetOutputLevels@CDirectSound@DirectSound@@QAGJPAU_DSOUTPUTLEVELS@@H@Z ; DirectSound::CDirectSound::GetOutputLevels

; 385  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSound_GetOutputLevels@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_QueryInterface@12
PUBLIC	_IDirectSoundBuffer_AddRef@4
PUBLIC	??_C@_07OFNMHBKJ@pBuffer?$AA@			; `string'
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
DSOUND_RD	SEGMENT
??_C@_07OFNMHBKJ@pBuffer?$AA@ DB 'pBuffer', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _IDirectSoundBuffer_QueryInterface@12
DSOUND	SEGMENT
_pBuffer$ = 8
_iid$ = 12
_ppvInterface$ = 16
_IDirectSoundBuffer_QueryInterface@12 PROC NEAR		; COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 390  :     ASSERT(pBuffer);

  00003	68 86 01 00 00	 push	 390			; 00000186H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OFNMHBKJ@pBuffer?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 391  :     ASSERT(ppvInterface);

  00024	68 87 01 00 00	 push	 391			; 00000187H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@POCBACBD@ppvInterface?$AA@
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 10 00	 cmp	 DWORD PTR _ppvInterface$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 392  : 
; 393  :     IDirectSoundBuffer_AddRef(pBuffer);

  00045	8b 55 08	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _IDirectSoundBuffer_AddRef@4

; 394  :     *ppvInterface = pBuffer;

  0004e	8b 45 10	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00054	89 08		 mov	 DWORD PTR [eax], ecx

; 395  : 
; 396  :     return DS_OK;

  00056	33 c0		 xor	 eax, eax

; 397  : }

  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_QueryInterface@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_QueryInterfaceC@12
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_QueryInterfaceC@12
DSOUND	SEGMENT
_pBuffer$ = 8
_iid$ = 12
_ppvInterface$ = 16
_IDirectSoundBuffer_QueryInterfaceC@12 PROC NEAR	; COMDAT

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 401  :     ASSERT(pBuffer);

  00003	68 91 01 00 00	 push	 401			; 00000191H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OFNMHBKJ@pBuffer?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 402  :     ASSERT(ppvInterface);

  00024	68 92 01 00 00	 push	 402			; 00000192H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@POCBACBD@ppvInterface?$AA@
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 10 00	 cmp	 DWORD PTR _ppvInterface$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 403  : 
; 404  :     IDirectSoundBuffer_AddRef(pBuffer);

  00045	8b 55 08	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _IDirectSoundBuffer_AddRef@4

; 405  :     *ppvInterface = pBuffer;

  0004e	8b 45 10	 mov	 eax, DWORD PTR _ppvInterface$[ebp]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00054	89 08		 mov	 DWORD PTR [eax], ecx

; 406  : 
; 407  :     return DS_OK;

  00056	33 c0		 xor	 eax, eax

; 408  : }

  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_QueryInterfaceC@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_Unlock@20
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_Unlock@20
DSOUND	SEGMENT
_pBuffer$ = 8
_pvLock1$ = 12
_dwLockSize1$ = 16
_pvLock2$ = 20
_dwLockSize2$ = 24
_IDirectSoundBuffer_Unlock@20 PROC NEAR			; COMDAT

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  :     return DS_OK;

  00003	33 c0		 xor	 eax, eax

; 413  : }

  00005	5d		 pop	 ebp
  00006	c2 14 00	 ret	 20			; 00000014H
_IDirectSoundBuffer_Unlock@20 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_Restore@4
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_Restore@4
DSOUND	SEGMENT
_pBuffer$ = 8
_IDirectSoundBuffer_Restore@4 PROC NEAR			; COMDAT

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  :     return DS_OK;

  00003	33 c0		 xor	 eax, eax

; 418  : }

  00005	5d		 pop	 ebp
  00006	c2 04 00	 ret	 4
_IDirectSoundBuffer_Restore@4 ENDP
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT _IDirectSoundBuffer_AddRef@4
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_IDirectSoundBuffer_AddRef@4 PROC NEAR			; COMDAT

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 422  :     return ((CDirectSoundBuffer *)pBuffer)->AddRef();

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39541
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39542
$L39541:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39542:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	51		 push	 ecx
  00029	ff 50 04	 call	 DWORD PTR [eax+4]

; 423  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_IDirectSoundBuffer_AddRef@4 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_Release@4
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_Release@4
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_IDirectSoundBuffer_Release@4 PROC NEAR			; COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 427  :     return ((CDirectSoundBuffer *)pBuffer)->Release();

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39546
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39547
$L39546:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39547:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	51		 push	 ecx
  00029	ff 50 08	 call	 DWORD PTR [eax+8]

; 428  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_IDirectSoundBuffer_Release@4 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetFormat@8
PUBLIC	?SetFormat@CDirectSoundBuffer@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ; DirectSound::CDirectSoundBuffer::SetFormat
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_SetFormat@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pwfxFormat$ = 12
_IDirectSoundBuffer_SetFormat@8 PROC NEAR		; COMDAT

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 432  :     return ((CDirectSoundBuffer *)pBuffer)->SetFormat(pwfxFormat);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39551
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39552
$L39551:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39552:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetFormat@CDirectSoundBuffer@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ; DirectSound::CDirectSoundBuffer::SetFormat

; 433  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetFormat@8 ENDP
DSOUND	ENDS
PUBLIC	??0CAutoLock@DirectSound@@QAE@XZ		; DirectSound::CAutoLock::CAutoLock
PUBLIC	??1CAutoLock@DirectSound@@QAE@XZ		; DirectSound::CAutoLock::~CAutoLock
PUBLIC	??_C@_06JAKMBBHB@DSOUND?$AA@			; `string'
PUBLIC	??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@ ; `string'
PUBLIC	?SetFormat@CDirectSoundVoice@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ; DirectSound::CDirectSoundVoice::SetFormat
PUBLIC	?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject
PUBLIC	??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@ ; `string'
EXTRN	_g_fDirectSoundInFinalRelease:DWORD
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
;	COMDAT ??_C@_06JAKMBBHB@DSOUND?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_06JAKMBBHB@DSOUND?$AA@ DB 'DSOUND', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
DSOUND_RD	SEGMENT
??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\dsapi.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
DSOUND_RD	SEGMENT
??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@ DB 'DirectSound'
	DB	' is in the final stages of shutting down.  No more API calls '
	DB	'are allowed.', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@ DB 'CDirectSoundB'
	DB	'uffer::SetFormat', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFormat@CDirectSoundBuffer@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT
$T39557 = -12
$T39556 = -8
___AutoLock$ = -4
_this$ = 8
_pwfxFormat$ = 12
?SetFormat@CDirectSoundBuffer@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetFormat, COMDAT

; 592  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 593  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetFormat");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32759
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 51 02 00 00	 push	 593			; 00000251H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39556[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39556[ebp]
  00053	eb 35		 jmp	 SHORT $L32757
$L32759:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@PKKBNDKL@CDirectSoundBuffer?3?3SetFormat?$AA@
  0005a	68 51 02 00 00	 push	 593			; 00000251H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 594  :         return CDirectSoundVoice::SetFormat(pwfxFormat);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetFormat@CDirectSoundVoice@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ; DirectSound::CDirectSoundVoice::SetFormat
  0007c	89 45 f4	 mov	 DWORD PTR $T39557[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39557[ebp]
$L32757:

; 595  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetFormat@CDirectSoundBuffer@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetFormat
DSOUND	ENDS
PUBLIC	?DirectSoundEnterCriticalSection@@YGHXZ		; DirectSoundEnterCriticalSection
; Function compile flags: /Odt
;	COMDAT ??0CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoLock@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoLock::CAutoLock, COMDAT
; _this$ = ecx

; 146  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 147  :         m_fLocked = (BOOLEAN)DirectSoundEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?DirectSoundEnterCriticalSection@@YGHXZ ; DirectSoundEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 148  :     }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLock@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoLock::CAutoLock
DSOUND	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_DirectSoundCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?DirectSoundEnterCriticalSection@@YGHXZ
DSOUND	SEGMENT
?DirectSoundEnterCriticalSection@@YGHXZ PROC NEAR	; DirectSoundEnterCriticalSection, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L32169

; 43   :     {
; 44   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L32168
$L32169:

; 45   :     }
; 46   : 
; 47   :     EnterCriticalSection(&g_DirectSoundCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_DirectSoundCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 48   : 
; 49   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L32168:

; 50   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?DirectSoundEnterCriticalSection@@YGHXZ ENDP		; DirectSoundEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeGetCurrentIrql@0
DSOUND	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
DSOUND	ENDS
PUBLIC	?DirectSoundLeaveCriticalSection@@YGXXZ		; DirectSoundLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
;	COMDAT ??1CAutoLock@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoLock@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx

; 151  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 152  :         if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L32224

; 153  :         {
; 154  :             DirectSoundLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?DirectSoundLeaveCriticalSection@@YGXXZ ; DirectSoundLeaveCriticalSection
$L32224:

; 155  :         }
; 156  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLock@DirectSound@@QAE@XZ ENDP			; DirectSound::CAutoLock::~CAutoLock
DSOUND	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?DirectSoundLeaveCriticalSection@@YGXXZ
DSOUND	SEGMENT
?DirectSoundLeaveCriticalSection@@YGXXZ PROC NEAR	; DirectSoundLeaveCriticalSection, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   :     LeaveCriticalSection(&g_DirectSoundCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_DirectSoundCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 55   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?DirectSoundLeaveCriticalSection@@YGXXZ ENDP		; DirectSoundLeaveCriticalSection
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetFrequency@8
PUBLIC	?SetFrequency@CDirectSoundBuffer@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundBuffer::SetFrequency
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetFrequency@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwFrequency$ = 12
_IDirectSoundBuffer_SetFrequency@8 PROC NEAR		; COMDAT

; 436  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 437  : 
; 438  : #ifdef DSAPI_DISABLE_PITCH
; 439  : 
; 440  :     return DS_OK;
; 441  : 
; 442  : #else // DSAPI_DISABLE_PITCH
; 443  : 
; 444  :     return ((CDirectSoundBuffer *)pBuffer)->SetFrequency(dwFrequency);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39576
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39577
$L39576:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39577:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFrequency$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetFrequency@CDirectSoundBuffer@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundBuffer::SetFrequency

; 445  : 
; 446  : #endif // DSAPI_DISABLE_PITCH
; 447  : 
; 448  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetFrequency@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@ ; `string'
PUBLIC	?SetFrequency@CDirectSoundVoice@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundVoice::SetFrequency
;	COMDAT ??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@ DB 'CDirectSoundBu'
	DB	'ffer::SetFrequency', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFrequency@CDirectSoundBuffer@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
$T39582 = -12
$T39581 = -8
___AutoLock$ = -4
_this$ = 8
_dwFrequency$ = 12
?SetFrequency@CDirectSoundBuffer@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetFrequency, COMDAT

; 598  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 599  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetFrequency");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32769
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 57 02 00 00	 push	 599			; 00000257H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39581[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39581[ebp]
  00053	eb 35		 jmp	 SHORT $L32767
$L32769:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@PPDEBFDO@CDirectSoundBuffer?3?3SetFrequency@
  0005a	68 57 02 00 00	 push	 599			; 00000257H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 600  :         return CDirectSoundVoice::SetFrequency(dwFrequency);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetFrequency@CDirectSoundVoice@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundVoice::SetFrequency
  0007c	89 45 f4	 mov	 DWORD PTR $T39582[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39582[ebp]
$L32767:

; 601  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetFrequency@CDirectSoundBuffer@DirectSound@@QAGJK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetFrequency
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetVolume@8
PUBLIC	?SetVolume@CDirectSoundBuffer@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundBuffer::SetVolume
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetVolume@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_lVolume$ = 12
_IDirectSoundBuffer_SetVolume@8 PROC NEAR		; COMDAT

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 452  : 
; 453  : #ifdef DSAPI_DISABLE_VOLUME
; 454  : 
; 455  :     return DS_OK;
; 456  : 
; 457  : #else // DSAPI_DISABLE_VOLUME
; 458  : 
; 459  :     return ((CDirectSoundBuffer *)pBuffer)->SetVolume(lVolume);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39586
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39587
$L39586:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39587:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _lVolume$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetVolume@CDirectSoundBuffer@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundBuffer::SetVolume

; 460  : 
; 461  : #endif // DSAPI_DISABLE_VOLUME
; 462  : 
; 463  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetVolume@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@ ; `string'
PUBLIC	?SetVolume@CDirectSoundVoice@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundVoice::SetVolume
;	COMDAT ??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@ DB 'CDirectSoundB'
	DB	'uffer::SetVolume', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVolume@CDirectSoundBuffer@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT
$T39592 = -12
$T39591 = -8
___AutoLock$ = -4
_this$ = 8
_lVolume$ = 12
?SetVolume@CDirectSoundBuffer@DirectSound@@QAGJJ@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetVolume, COMDAT

; 604  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 605  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetVolume");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32779
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 5d 02 00 00	 push	 605			; 0000025dH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39591[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39591[ebp]
  00053	eb 35		 jmp	 SHORT $L32777
$L32779:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@INMBMDIC@CDirectSoundBuffer?3?3SetVolume?$AA@
  0005a	68 5d 02 00 00	 push	 605			; 0000025dH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 606  :         return CDirectSoundVoice::SetVolume(lVolume);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _lVolume$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetVolume@CDirectSoundVoice@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundVoice::SetVolume
  0007c	89 45 f4	 mov	 DWORD PTR $T39592[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39592[ebp]
$L32777:

; 607  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetVolume@CDirectSoundBuffer@DirectSound@@QAGJJ@Z ENDP	; DirectSound::CDirectSoundBuffer::SetVolume
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetPitch@8
PUBLIC	?SetPitch@CDirectSoundBuffer@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundBuffer::SetPitch
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetPitch@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_lPitch$ = 12
_IDirectSoundBuffer_SetPitch@8 PROC NEAR		; COMDAT

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 467  : 
; 468  : #ifdef DSAPI_DISABLE_PITCH
; 469  : 
; 470  :     return DS_OK;
; 471  : 
; 472  : #else // DSAPI_DISABLE_PITCH
; 473  : 
; 474  :     return ((CDirectSoundBuffer *)pBuffer)->SetPitch(lPitch);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39596
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39597
$L39596:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39597:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _lPitch$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetPitch@CDirectSoundBuffer@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundBuffer::SetPitch

; 475  : 
; 476  : #endif // DSAPI_DISABLE_PITCH
; 477  : 
; 478  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetPitch@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@ ; `string'
PUBLIC	?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundVoice::SetPitch
;	COMDAT ??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@ DB 'CDirectSoundBu'
	DB	'ffer::SetPitch', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPitch@CDirectSoundBuffer@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT
$T39602 = -12
$T39601 = -8
___AutoLock$ = -4
_this$ = 8
_lPitch$ = 12
?SetPitch@CDirectSoundBuffer@DirectSound@@QAGJJ@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetPitch, COMDAT

; 610  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 611  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetPitch");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32789
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 63 02 00 00	 push	 611			; 00000263H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39601[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39601[ebp]
  00053	eb 35		 jmp	 SHORT $L32787
$L32789:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@FNHOKAIC@CDirectSoundBuffer?3?3SetPitch?$AA@
  0005a	68 63 02 00 00	 push	 611			; 00000263H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 612  :         return CDirectSoundVoice::SetPitch(lPitch);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _lPitch$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundVoice::SetPitch
  0007c	89 45 f4	 mov	 DWORD PTR $T39602[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39602[ebp]
$L32787:

; 613  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetPitch@CDirectSoundBuffer@DirectSound@@QAGJJ@Z ENDP	; DirectSound::CDirectSoundBuffer::SetPitch
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetLFO@8
PUBLIC	?SetLFO@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSLFODESC@@@Z ; DirectSound::CDirectSoundBuffer::SetLFO
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetLFO@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pLFODesc$ = 12
_IDirectSoundBuffer_SetLFO@8 PROC NEAR			; COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 482  : 
; 483  : #ifdef DSAPI_DISABLE_LFO
; 484  : 
; 485  :     return DS_OK;
; 486  : 
; 487  : #else // DSAPI_DISABLE_LFO
; 488  : 
; 489  :     return ((CDirectSoundBuffer *)pBuffer)->SetLFO(pLFODesc);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39606
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39607
$L39606:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39607:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pLFODesc$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetLFO@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSLFODESC@@@Z ; DirectSound::CDirectSoundBuffer::SetLFO

; 490  : 
; 491  : #endif // DSAPI_DISABLE_LFO
; 492  : 
; 493  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetLFO@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@ ; `string'
PUBLIC	?SetLFO@CDirectSoundVoice@DirectSound@@QAGJPBU_DSLFODESC@@@Z ; DirectSound::CDirectSoundVoice::SetLFO
;	COMDAT ??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@ DB 'CDirectSoundBuff'
	DB	'er::SetLFO', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetLFO@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT
$T39612 = -12
$T39611 = -8
___AutoLock$ = -4
_this$ = 8
_pLFODesc$ = 12
?SetLFO@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSLFODESC@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetLFO, COMDAT

; 616  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 617  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetLFO");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32799
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 69 02 00 00	 push	 617			; 00000269H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39611[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39611[ebp]
  00053	eb 35		 jmp	 SHORT $L32797
$L32799:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@BGJIIJJH@CDirectSoundBuffer?3?3SetLFO?$AA@
  0005a	68 69 02 00 00	 push	 617			; 00000269H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 618  :         return CDirectSoundVoice::SetLFO(pLFODesc);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pLFODesc$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetLFO@CDirectSoundVoice@DirectSound@@QAGJPBU_DSLFODESC@@@Z ; DirectSound::CDirectSoundVoice::SetLFO
  0007c	89 45 f4	 mov	 DWORD PTR $T39612[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39612[ebp]
$L32797:

; 619  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetLFO@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSLFODESC@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetLFO
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetEG@8
PUBLIC	?SetEG@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CDirectSoundBuffer::SetEG
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetEG@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pEnvelopeDesc$ = 12
_IDirectSoundBuffer_SetEG@8 PROC NEAR			; COMDAT

; 496  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 497  : 
; 498  : #ifdef DSAPI_DISABLE_EG
; 499  : 
; 500  :     return DS_OK;
; 501  : 
; 502  : #else // DSAPI_DISABLE_EG
; 503  : 
; 504  :     return ((CDirectSoundBuffer *)pBuffer)->SetEG(pEnvelopeDesc);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39616
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39617
$L39616:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39617:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnvelopeDesc$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetEG@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CDirectSoundBuffer::SetEG

; 505  : 
; 506  : #endif // DSAPI_DISABLE_EG
; 507  : 
; 508  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetEG@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@ ; `string'
PUBLIC	?SetEG@CDirectSoundVoice@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CDirectSoundVoice::SetEG
;	COMDAT ??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@ DB 'CDirectSoundBuffer'
	DB	'::SetEG', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEG@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT
$T39622 = -12
$T39621 = -8
___AutoLock$ = -4
_this$ = 8
_pEnvelopeDesc$ = 12
?SetEG@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetEG, COMDAT

; 622  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 623  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetEG");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32809
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 6f 02 00 00	 push	 623			; 0000026fH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39621[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39621[ebp]
  00053	eb 35		 jmp	 SHORT $L32807
$L32809:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@EOPIEBA@CDirectSoundBuffer?3?3SetEG?$AA@
  0005a	68 6f 02 00 00	 push	 623			; 0000026fH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 624  :         return CDirectSoundVoice::SetEG(pEnvelopeDesc);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pEnvelopeDesc$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetEG@CDirectSoundVoice@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CDirectSoundVoice::SetEG
  0007c	89 45 f4	 mov	 DWORD PTR $T39622[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39622[ebp]
$L32807:

; 625  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetEG@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetEG
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetFilter@8
PUBLIC	?SetFilter@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ; DirectSound::CDirectSoundBuffer::SetFilter
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetFilter@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pFilter$ = 12
_IDirectSoundBuffer_SetFilter@8 PROC NEAR		; COMDAT

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 512  : 
; 513  : #ifdef DSAPI_DISABLE_FILTER
; 514  : 
; 515  :     return DS_OK;
; 516  : 
; 517  : #else // DSAPI_DISABLE_FILTER
; 518  : 
; 519  :     return ((CDirectSoundBuffer *)pBuffer)->SetFilter(pFilter);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39626
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39627
$L39626:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39627:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pFilter$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetFilter@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ; DirectSound::CDirectSoundBuffer::SetFilter

; 520  : 
; 521  : #endif // DSAPI_DISABLE_FILTER
; 522  : 
; 523  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetFilter@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@ ; `string'
PUBLIC	?SetFilter@CDirectSoundVoice@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ; DirectSound::CDirectSoundVoice::SetFilter
;	COMDAT ??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@ DB 'CDirectSoundB'
	DB	'uffer::SetFilter', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFilter@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT
$T39632 = -12
$T39631 = -8
___AutoLock$ = -4
_this$ = 8
_pFilterDesc$ = 12
?SetFilter@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetFilter, COMDAT

; 628  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 629  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetFilter");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32819
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 75 02 00 00	 push	 629			; 00000275H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39631[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39631[ebp]
  00053	eb 35		 jmp	 SHORT $L32817
$L32819:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IPGKAOBK@CDirectSoundBuffer?3?3SetFilter?$AA@
  0005a	68 75 02 00 00	 push	 629			; 00000275H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 630  :         return CDirectSoundVoice::SetFilter(pFilterDesc);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pFilterDesc$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetFilter@CDirectSoundVoice@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ; DirectSound::CDirectSoundVoice::SetFilter
  0007c	89 45 f4	 mov	 DWORD PTR $T39632[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39632[ebp]
$L32817:

; 631  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetFilter@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetFilter
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetHeadroom@8
PUBLIC	?SetHeadroom@CDirectSoundBuffer@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundBuffer::SetHeadroom
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetHeadroom@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwHeadroom$ = 12
_IDirectSoundBuffer_SetHeadroom@8 PROC NEAR		; COMDAT

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 527  : 
; 528  : #ifdef DSAPI_DISABLE_VOLUME
; 529  : 
; 530  :     return DS_OK;
; 531  : 
; 532  : #else // DSAPI_DISABLE_VOLUME
; 533  : 
; 534  :     return ((CDirectSoundBuffer *)pBuffer)->SetHeadroom(dwHeadroom);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39636
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39637
$L39636:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39637:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwHeadroom$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetHeadroom@CDirectSoundBuffer@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundBuffer::SetHeadroom

; 535  : 
; 536  : #endif // DSAPI_DISABLE_VOLUME
; 537  : 
; 538  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetHeadroom@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@ ; `string'
PUBLIC	?SetHeadroom@CDirectSoundVoice@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundVoice::SetHeadroom
;	COMDAT ??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@ DB 'CDirectSoun'
	DB	'dBuffer::SetHeadroom', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetHeadroom@CDirectSoundBuffer@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
$T39642 = -12
$T39641 = -8
___AutoLock$ = -4
_this$ = 8
_dwHeadroom$ = 12
?SetHeadroom@CDirectSoundBuffer@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetHeadroom, COMDAT

; 634  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 635  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetHeadroom");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32829
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 7b 02 00 00	 push	 635			; 0000027bH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39641[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39641[ebp]
  00053	eb 35		 jmp	 SHORT $L32827
$L32829:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@EJJCKIBH@CDirectSoundBuffer?3?3SetHeadroom?$AA@
  0005a	68 7b 02 00 00	 push	 635			; 0000027bH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 636  :         return CDirectSoundVoice::SetHeadroom(dwHeadroom);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _dwHeadroom$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetHeadroom@CDirectSoundVoice@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundVoice::SetHeadroom
  0007c	89 45 f4	 mov	 DWORD PTR $T39642[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39642[ebp]
$L32827:

; 637  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetHeadroom@CDirectSoundBuffer@DirectSound@@QAGJK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetHeadroom
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetOutputBuffer@8
PUBLIC	?SetOutputBuffer@CDirectSoundBuffer@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ; DirectSound::CDirectSoundBuffer::SetOutputBuffer
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetOutputBuffer@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pOutputBuffer$ = 12
_IDirectSoundBuffer_SetOutputBuffer@8 PROC NEAR		; COMDAT

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 542  : 
; 543  : #ifdef DSAPI_DISABLE_SUBMIX
; 544  : 
; 545  :     return DS_OK;
; 546  : 
; 547  : #else // DSAPI_DISABLE_SUBMIX
; 548  : 
; 549  :     return ((CDirectSoundBuffer *)pBuffer)->SetOutputBuffer(pOutputBuffer);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39646
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39647
$L39646:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39647:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pOutputBuffer$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetOutputBuffer@CDirectSoundBuffer@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ; DirectSound::CDirectSoundBuffer::SetOutputBuffer

; 550  : 
; 551  : #endif // DSAPI_DISABLE_SUBMIX
; 552  : 
; 553  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetOutputBuffer@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@ ; `string'
PUBLIC	?SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ; DirectSound::CDirectSoundVoice::SetOutputBuffer
;	COMDAT ??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@ DB 'CDirectSoundBu'
	DB	'ffer::SetOutputBuffer', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundBuffer@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT
$T39652 = -12
$T39651 = -8
___AutoLock$ = -4
_this$ = 8
_pOutputBuffer$ = 12
?SetOutputBuffer@CDirectSoundBuffer@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetOutputBuffer, COMDAT

; 640  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 641  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetOutputBuffer");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32839
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 81 02 00 00	 push	 641			; 00000281H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39651[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39651[ebp]
  00053	eb 35		 jmp	 SHORT $L32837
$L32839:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@IJCIHAHO@CDirectSoundBuffer?3?3SetOutputBuf@
  0005a	68 81 02 00 00	 push	 641			; 00000281H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 642  :         return CDirectSoundVoice::SetOutputBuffer(pOutputBuffer);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ; DirectSound::CDirectSoundVoice::SetOutputBuffer
  0007c	89 45 f4	 mov	 DWORD PTR $T39652[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39652[ebp]
$L32837:

; 643  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetOutputBuffer@CDirectSoundBuffer@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetOutputBuffer
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetMixBins@8
PUBLIC	?SetMixBins@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundBuffer::SetMixBins
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetMixBins@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pMixBins$ = 12
_IDirectSoundBuffer_SetMixBins@8 PROC NEAR		; COMDAT

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 557  : 
; 558  : #ifdef DSAPI_DISABLE_MIXBINS
; 559  : 
; 560  :     return DS_OK;
; 561  : 
; 562  : #else // DSAPI_DISABLE_MIXBINS
; 563  : 
; 564  :     return ((CDirectSoundBuffer *)pBuffer)->SetMixBins(pMixBins);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39656
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39657
$L39656:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39657:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetMixBins@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundBuffer::SetMixBins

; 565  : 
; 566  : #endif // DSAPI_DISABLE_SUBMIX
; 567  : 
; 568  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetMixBins@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@ ; `string'
PUBLIC	?SetMixBins@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoice::SetMixBins
;	COMDAT ??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@ DB 'CDirectSound'
	DB	'Buffer::SetMixBins', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBins@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
$T39662 = -12
$T39661 = -8
___AutoLock$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBins@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetMixBins, COMDAT

; 646  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 647  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetMixBins");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32849
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 87 02 00 00	 push	 647			; 00000287H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39661[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39661[ebp]
  00053	eb 35		 jmp	 SHORT $L32847
$L32849:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@ENFJENBA@CDirectSoundBuffer?3?3SetMixBins?$AA@
  0005a	68 87 02 00 00	 push	 647			; 00000287H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 648  :         return CDirectSoundVoice::SetMixBins(pMixBins);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetMixBins@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoice::SetMixBins
  0007c	89 45 f4	 mov	 DWORD PTR $T39662[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39662[ebp]
$L32847:

; 649  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetMixBins@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetMixBins
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetMixBinVolumes@8
PUBLIC	?SetMixBinVolumes@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundBuffer::SetMixBinVolumes
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetMixBinVolumes@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pMixBins$ = 12
_IDirectSoundBuffer_SetMixBinVolumes@8 PROC NEAR	; COMDAT

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 572  : 
; 573  : #ifdef DSAPI_DISABLE_VOLUME
; 574  : 
; 575  :     return DS_OK;
; 576  : 
; 577  : #else // DSAPI_DISABLE_VOLUME
; 578  : 
; 579  :     return ((CDirectSoundBuffer *)pBuffer)->SetMixBinVolumes(pMixBins);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39666
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39667
$L39666:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39667:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetMixBinVolumes@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundBuffer::SetMixBinVolumes

; 580  : 
; 581  : #endif // DSAPI_DISABLE_VOLUME
; 582  : 
; 583  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetMixBinVolumes@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@ ; `string'
PUBLIC	?SetMixBinVolumes@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoice::SetMixBinVolumes
;	COMDAT ??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@ DB 'CDirectSoundBu'
	DB	'ffer::SetMixBinVolumes', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
$T39672 = -12
$T39671 = -8
___AutoLock$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetMixBinVolumes, COMDAT

; 652  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 653  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetMixBinVolumes");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32859
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 8d 02 00 00	 push	 653			; 0000028dH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39671[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39671[ebp]
  00053	eb 35		 jmp	 SHORT $L32857
$L32859:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@GMNMDMFI@CDirectSoundBuffer?3?3SetMixBinVol@
  0005a	68 8d 02 00 00	 push	 653			; 0000028dH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 654  :         return CDirectSoundVoice::SetMixBinVolumes(pMixBins);

  0006c	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	83 c1 08	 add	 ecx, 8
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?SetMixBinVolumes@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoice::SetMixBinVolumes
  0007c	89 45 f4	 mov	 DWORD PTR $T39672[ebp], eax
  0007f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00082	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00087	8b 45 f4	 mov	 eax, DWORD PTR $T39672[ebp]
$L32857:

; 655  :     }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
?SetMixBinVolumes@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetMixBinVolumes
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetAllParameters@12
PUBLIC	?SetAllParameters@CDirectSoundBuffer@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ; DirectSound::CDirectSoundBuffer::SetAllParameters
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetAllParameters@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pds3db$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetAllParameters@12 PROC NEAR	; COMDAT

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 589  : 
; 590  : #ifdef DSAPI_DISABLE_3DSOURCE
; 591  : 
; 592  :     return DS_OK;
; 593  : 
; 594  : #else // DSAPI_DISABLE_3DSOURCE
; 595  : 
; 596  :     return ((CDirectSoundBuffer *)pBuffer)->SetAllParameters(pds3db, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39676
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39677
$L39676:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39677:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _pds3db$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetAllParameters@CDirectSoundBuffer@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ; DirectSound::CDirectSoundBuffer::SetAllParameters

; 597  : 
; 598  : #endif // DSAPI_DISABLE_3DSOURCE
; 599  : 
; 600  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetAllParameters@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@ ; `string'
PUBLIC	?SetAllParameters@CDirectSoundVoice@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ; DirectSound::CDirectSoundVoice::SetAllParameters
;	COMDAT ??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@ DB 'CDirectSoundBu'
	DB	'ffer::SetAllParameters', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetAllParameters@CDirectSoundBuffer@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z
DSOUND	SEGMENT
$T39682 = -12
$T39681 = -8
___AutoLock$ = -4
_this$ = 8
_pds3db$ = 12
_dwFlags$ = 16
?SetAllParameters@CDirectSoundBuffer@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetAllParameters, COMDAT

; 658  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 659  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetAllParameters");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32870
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 93 02 00 00	 push	 659			; 00000293H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39681[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39681[ebp]
  00053	eb 39		 jmp	 SHORT $L32868
$L32870:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CFIEOKFB@CDirectSoundBuffer?3?3SetAllParame@
  0005a	68 93 02 00 00	 push	 659			; 00000293H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 660  :         return CDirectSoundVoice::SetAllParameters(pds3db, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetAllParameters@CDirectSoundVoice@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ; DirectSound::CDirectSoundVoice::SetAllParameters
  00080	89 45 f4	 mov	 DWORD PTR $T39682[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39682[ebp]
$L32868:

; 661  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@CDirectSoundBuffer@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ENDP ; DirectSound::CDirectSoundBuffer::SetAllParameters
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetConeAngles@16
PUBLIC	?SetConeAngles@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundBuffer::SetConeAngles
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetConeAngles@16
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwInsideConeAngle$ = 12
_dwOutsideConeAngle$ = 16
_dwFlags$ = 20
_IDirectSoundBuffer_SetConeAngles@16 PROC NEAR		; COMDAT

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 604  : 
; 605  : #ifdef DSAPI_DISABLE_3DSOURCE
; 606  : 
; 607  :     return DS_OK;
; 608  : 
; 609  : #else // DSAPI_DISABLE_3DSOURCE
; 610  : 
; 611  :     return ((CDirectSoundBuffer *)pBuffer)->SetConeAngles(dwInsideConeAngle, dwOutsideConeAngle, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39686
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39687
$L39686:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39687:
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 10	 mov	 edx, DWORD PTR _dwOutsideConeAngle$[ebp]
  00023	52		 push	 edx
  00024	8b 45 0c	 mov	 eax, DWORD PTR _dwInsideConeAngle$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?SetConeAngles@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundBuffer::SetConeAngles

; 612  : 
; 613  : #endif // DSAPI_DISABLE_3DSOURCE
; 614  : 
; 615  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundBuffer_SetConeAngles@16 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@ ; `string'
PUBLIC	?SetConeAngles@CDirectSoundVoice@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundVoice::SetConeAngles
;	COMDAT ??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@ DB 'CDirectSoundBu'
	DB	'ffer::SetConeAngles', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeAngles@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT
$T39692 = -12
$T39691 = -8
___AutoLock$ = -4
_this$ = 8
_dwInsideConeAngle$ = 12
_dwOutsideConeAngle$ = 16
_dwFlags$ = 20
?SetConeAngles@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetConeAngles, COMDAT

; 664  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 665  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetConeAngles");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32882
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 99 02 00 00	 push	 665			; 00000299H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39691[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39691[ebp]
  00053	eb 3d		 jmp	 SHORT $L32880
$L32882:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@GKILFNCM@CDirectSoundBuffer?3?3SetConeAngle@
  0005a	68 99 02 00 00	 push	 665			; 00000299H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 666  :         return CDirectSoundVoice::SetConeAngles(dwInsideConeAngle, dwOutsideConeAngle, dwFlags);

  0006c	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 10	 mov	 ecx, DWORD PTR _dwOutsideConeAngle$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 0c	 mov	 edx, DWORD PTR _dwInsideConeAngle$[ebp]
  00077	52		 push	 edx
  00078	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	83 c0 08	 add	 eax, 8
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?SetConeAngles@CDirectSoundVoice@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundVoice::SetConeAngles
  00084	89 45 f4	 mov	 DWORD PTR $T39692[ebp], eax
  00087	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008a	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008f	8b 45 f4	 mov	 eax, DWORD PTR $T39692[ebp]
$L32880:

; 667  :     }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 10 00	 ret	 16			; 00000010H
?SetConeAngles@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetConeAngles
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetConeOrientation@20
PUBLIC	?SetConeOrientation@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundBuffer::SetConeOrientation
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetConeOrientation@20
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSoundBuffer_SetConeOrientation@20 PROC NEAR	; COMDAT

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 619  : 
; 620  : #ifdef DSAPI_DISABLE_3DSOURCE
; 621  : 
; 622  :     return DS_OK;
; 623  : 
; 624  : #else // DSAPI_DISABLE_3DSOURCE
; 625  : 
; 626  :     return ((CDirectSoundBuffer *)pBuffer)->SetConeOrientation(x, y, z, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39696
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39697
$L39696:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39697:
  0001c	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00023	52		 push	 edx
  00024	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?SetConeOrientation@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundBuffer::SetConeOrientation

; 627  : 
; 628  : #endif // DSAPI_DISABLE_3DSOURCE
; 629  : 
; 630  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 14 00	 ret	 20			; 00000014H
_IDirectSoundBuffer_SetConeOrientation@20 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@ ; `string'
PUBLIC	?SetConeOrientation@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetConeOrientation
;	COMDAT ??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@ DB 'CDirectSoundBu'
	DB	'ffer::SetConeOrientation', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeOrientation@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T39702 = -12
$T39701 = -8
___AutoLock$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
?SetConeOrientation@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetConeOrientation, COMDAT

; 670  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 671  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetConeOrientation");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32895
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 9f 02 00 00	 push	 671			; 0000029fH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39701[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39701[ebp]
  00053	eb 41		 jmp	 SHORT $L32893
$L32895:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@BJHPKLFJ@CDirectSoundBuffer?3?3SetConeOrien@
  0005a	68 9f 02 00 00	 push	 671			; 0000029fH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 672  :         return CDirectSoundVoice::SetConeOrientation(x, y, z, dwFlags);

  0006c	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  00077	52		 push	 edx
  00078	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 08	 add	 ecx, 8
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?SetConeOrientation@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetConeOrientation
  00088	89 45 f4	 mov	 DWORD PTR $T39702[ebp], eax
  0008b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00093	8b 45 f4	 mov	 eax, DWORD PTR $T39702[ebp]
$L32893:

; 673  :     }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 14 00	 ret	 20			; 00000014H
?SetConeOrientation@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetConeOrientation
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetConeOutsideVolume@12
PUBLIC	?SetConeOutsideVolume@CDirectSoundBuffer@DirectSound@@QAGJJK@Z ; DirectSound::CDirectSoundBuffer::SetConeOutsideVolume
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetConeOutsideVolume@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_lConeOutsideVolume$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetConeOutsideVolume@12 PROC NEAR	; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 634  : 
; 635  : #ifdef DSAPI_DISABLE_3DSOURCE
; 636  : 
; 637  :     return DS_OK;
; 638  : 
; 639  : #else // DSAPI_DISABLE_3DSOURCE
; 640  : 
; 641  :     return ((CDirectSoundBuffer *)pBuffer)->SetConeOutsideVolume(lConeOutsideVolume, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39706
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39707
$L39706:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39707:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _lConeOutsideVolume$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetConeOutsideVolume@CDirectSoundBuffer@DirectSound@@QAGJJK@Z ; DirectSound::CDirectSoundBuffer::SetConeOutsideVolume

; 642  : 
; 643  : #endif // DSAPI_DISABLE_3DSOURCE
; 644  : 
; 645  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetConeOutsideVolume@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@ ; `string'
PUBLIC	?SetConeOutsideVolume@CDirectSoundVoice@DirectSound@@QAGJJK@Z ; DirectSound::CDirectSoundVoice::SetConeOutsideVolume
;	COMDAT ??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@ DB 'CDirectSoundBu'
	DB	'ffer::SetConeOutsideVolume', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeOutsideVolume@CDirectSoundBuffer@DirectSound@@QAGJJK@Z
DSOUND	SEGMENT
$T39712 = -12
$T39711 = -8
___AutoLock$ = -4
_this$ = 8
_lConeOutsideVolume$ = 12
_dwFlags$ = 16
?SetConeOutsideVolume@CDirectSoundBuffer@DirectSound@@QAGJJK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetConeOutsideVolume, COMDAT

; 676  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 677  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetConeOutsideVolume");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32906
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 a5 02 00 00	 push	 677			; 000002a5H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39711[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39711[ebp]
  00053	eb 39		 jmp	 SHORT $L32904
$L32906:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@FPOKJAEF@CDirectSoundBuffer?3?3SetConeOutsi@
  0005a	68 a5 02 00 00	 push	 677			; 000002a5H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 678  :         return CDirectSoundVoice::SetConeOutsideVolume(lConeOutsideVolume, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _lConeOutsideVolume$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetConeOutsideVolume@CDirectSoundVoice@DirectSound@@QAGJJK@Z ; DirectSound::CDirectSoundVoice::SetConeOutsideVolume
  00080	89 45 f4	 mov	 DWORD PTR $T39712[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39712[ebp]
$L32904:

; 679  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetConeOutsideVolume@CDirectSoundBuffer@DirectSound@@QAGJJK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetConeOutsideVolume
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetMaxDistance@12
PUBLIC	?SetMaxDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetMaxDistance
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetMaxDistance@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_flMaxDistance$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetMaxDistance@12 PROC NEAR		; COMDAT

; 648  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 649  : 
; 650  : #ifdef DSAPI_DISABLE_3DSOURCE
; 651  : 
; 652  :     return DS_OK;
; 653  : 
; 654  : #else // DSAPI_DISABLE_3DSOURCE
; 655  : 
; 656  :     return ((CDirectSoundBuffer *)pBuffer)->SetMaxDistance(flMaxDistance, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39716
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39717
$L39716:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39717:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flMaxDistance$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetMaxDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetMaxDistance

; 657  : 
; 658  : #endif // DSAPI_DISABLE_3DSOURCE
; 659  : 
; 660  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetMaxDistance@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@ ; `string'
PUBLIC	?SetMaxDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetMaxDistance
;	COMDAT ??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@ DB 'CDirectSoundBu'
	DB	'ffer::SetMaxDistance', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMaxDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T39722 = -12
$T39721 = -8
___AutoLock$ = -4
_this$ = 8
_flMaxDistance$ = 12
_dwFlags$ = 16
?SetMaxDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetMaxDistance, COMDAT

; 682  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 683  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetMaxDistance");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32917
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 ab 02 00 00	 push	 683			; 000002abH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39721[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39721[ebp]
  00053	eb 39		 jmp	 SHORT $L32915
$L32917:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@LECKPDBD@CDirectSoundBuffer?3?3SetMaxDistan@
  0005a	68 ab 02 00 00	 push	 683			; 000002abH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 684  :         return CDirectSoundVoice::SetMaxDistance(flMaxDistance, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _flMaxDistance$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetMaxDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetMaxDistance
  00080	89 45 f4	 mov	 DWORD PTR $T39722[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39722[ebp]
$L32915:

; 685  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetMaxDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetMaxDistance
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetMinDistance@12
PUBLIC	?SetMinDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetMinDistance
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetMinDistance@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_flMinDistance$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetMinDistance@12 PROC NEAR		; COMDAT

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 664  : 
; 665  : #ifdef DSAPI_DISABLE_3DSOURCE
; 666  : 
; 667  :     return DS_OK;
; 668  : 
; 669  : #else // DSAPI_DISABLE_3DSOURCE
; 670  : 
; 671  :     return ((CDirectSoundBuffer *)pBuffer)->SetMinDistance(flMinDistance, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39726
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39727
$L39726:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39727:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flMinDistance$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetMinDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetMinDistance

; 672  : 
; 673  : #endif // DSAPI_DISABLE_3DSOURCE
; 674  : 
; 675  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetMinDistance@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@ ; `string'
PUBLIC	?SetMinDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetMinDistance
;	COMDAT ??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@ DB 'CDirectSoundBu'
	DB	'ffer::SetMinDistance', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMinDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T39732 = -12
$T39731 = -8
___AutoLock$ = -4
_this$ = 8
_flMinDistance$ = 12
_dwFlags$ = 16
?SetMinDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetMinDistance, COMDAT

; 688  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 689  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetMinDistance");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32928
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 b1 02 00 00	 push	 689			; 000002b1H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39731[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39731[ebp]
  00053	eb 39		 jmp	 SHORT $L32926
$L32928:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@CEFJODPJ@CDirectSoundBuffer?3?3SetMinDistan@
  0005a	68 b1 02 00 00	 push	 689			; 000002b1H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 690  :         return CDirectSoundVoice::SetMinDistance(flMinDistance, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _flMinDistance$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetMinDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetMinDistance
  00080	89 45 f4	 mov	 DWORD PTR $T39732[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39732[ebp]
$L32926:

; 691  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetMinDistance@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetMinDistance
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetMode@12
PUBLIC	?SetMode@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundBuffer::SetMode
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetMode@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwMode$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetMode@12 PROC NEAR		; COMDAT

; 678  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 679  : 
; 680  : #ifdef DSAPI_DISABLE_3DSOURCE
; 681  : 
; 682  :     return DS_OK;
; 683  : 
; 684  : #else // DSAPI_DISABLE_3DSOURCE
; 685  : 
; 686  :     return ((CDirectSoundBuffer *)pBuffer)->SetMode(dwMode, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39736
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39737
$L39736:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39737:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _dwMode$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetMode@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundBuffer::SetMode

; 687  : 
; 688  : #endif // DSAPI_DISABLE_3DSOURCE
; 689  : 
; 690  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetMode@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@ ; `string'
PUBLIC	?SetMode@CDirectSoundVoice@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundVoice::SetMode
;	COMDAT ??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@ DB 'CDirectSoundBuf'
	DB	'fer::SetMode', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMode@CDirectSoundBuffer@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT
$T39742 = -12
$T39741 = -8
___AutoLock$ = -4
_this$ = 8
_dwMode$ = 12
_dwFlags$ = 16
?SetMode@CDirectSoundBuffer@DirectSound@@QAGJKK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetMode, COMDAT

; 694  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 695  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetMode");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32939
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 b7 02 00 00	 push	 695			; 000002b7H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39741[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39741[ebp]
  00053	eb 39		 jmp	 SHORT $L32937
$L32939:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KCLFGBIJ@CDirectSoundBuffer?3?3SetMode?$AA@
  0005a	68 b7 02 00 00	 push	 695			; 000002b7H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 696  :         return CDirectSoundVoice::SetMode(dwMode, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMode$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetMode@CDirectSoundVoice@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundVoice::SetMode
  00080	89 45 f4	 mov	 DWORD PTR $T39742[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39742[ebp]
$L32937:

; 697  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetMode@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ENDP	; DirectSound::CDirectSoundBuffer::SetMode
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetPosition@20
PUBLIC	?SetPosition@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundBuffer::SetPosition
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetPosition@20
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSoundBuffer_SetPosition@20 PROC NEAR		; COMDAT

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 694  : 
; 695  : #ifdef DSAPI_DISABLE_3DSOURCE
; 696  : 
; 697  :     return DS_OK;
; 698  : 
; 699  : #else // DSAPI_DISABLE_3DSOURCE
; 700  : 
; 701  :     return ((CDirectSoundBuffer *)pBuffer)->SetPosition(x, y, z, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39746
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39747
$L39746:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39747:
  0001c	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00023	52		 push	 edx
  00024	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?SetPosition@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundBuffer::SetPosition

; 702  : 
; 703  : #endif // DSAPI_DISABLE_3DSOURCE
; 704  : 
; 705  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 14 00	 ret	 20			; 00000014H
_IDirectSoundBuffer_SetPosition@20 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@ ; `string'
PUBLIC	?SetPosition@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetPosition
;	COMDAT ??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@ DB 'CDirectSound'
	DB	'Buffer::SetPosition', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPosition@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T39752 = -12
$T39751 = -8
___AutoLock$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
?SetPosition@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetPosition, COMDAT

; 700  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 701  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetPosition");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32952
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 bd 02 00 00	 push	 701			; 000002bdH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39751[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39751[ebp]
  00053	eb 41		 jmp	 SHORT $L32950
$L32952:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@CJDDDDA@CDirectSoundBuffer?3?3SetPosition?$AA@
  0005a	68 bd 02 00 00	 push	 701			; 000002bdH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 702  :         return CDirectSoundVoice::SetPosition(x, y, z, dwFlags);

  0006c	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  00077	52		 push	 edx
  00078	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 08	 add	 ecx, 8
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?SetPosition@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetPosition
  00088	89 45 f4	 mov	 DWORD PTR $T39752[ebp], eax
  0008b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00093	8b 45 f4	 mov	 eax, DWORD PTR $T39752[ebp]
$L32950:

; 703  :     }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 14 00	 ret	 20			; 00000014H
?SetPosition@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetPosition
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetVelocity@20
PUBLIC	?SetVelocity@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundBuffer::SetVelocity
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetVelocity@20
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSoundBuffer_SetVelocity@20 PROC NEAR		; COMDAT

; 708  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 709  : 
; 710  : #ifdef DSAPI_DISABLE_3DSOURCE
; 711  : 
; 712  :     return DS_OK;
; 713  : 
; 714  : #else // DSAPI_DISABLE_3DSOURCE
; 715  : 
; 716  :     return ((CDirectSoundBuffer *)pBuffer)->SetVelocity(x, y, z, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39756
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39757
$L39756:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39757:
  0001c	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00023	52		 push	 edx
  00024	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?SetVelocity@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundBuffer::SetVelocity

; 717  : 
; 718  : #endif // DSAPI_DISABLE_3DSOURCE
; 719  : 
; 720  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 14 00	 ret	 20			; 00000014H
_IDirectSoundBuffer_SetVelocity@20 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@ ; `string'
PUBLIC	?SetVelocity@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetVelocity
;	COMDAT ??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@ DB 'CDirectSoun'
	DB	'dBuffer::SetVelocity', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVelocity@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T39762 = -12
$T39761 = -8
___AutoLock$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
?SetVelocity@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetVelocity, COMDAT

; 706  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 707  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetVelocity");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32965
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 c3 02 00 00	 push	 707			; 000002c3H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39761[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39761[ebp]
  00053	eb 41		 jmp	 SHORT $L32963
$L32965:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@GALGNKNN@CDirectSoundBuffer?3?3SetVelocity?$AA@
  0005a	68 c3 02 00 00	 push	 707			; 000002c3H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 708  :         return CDirectSoundVoice::SetVelocity(x, y, z, dwFlags);

  0006c	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  00077	52		 push	 edx
  00078	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 08	 add	 ecx, 8
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?SetVelocity@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetVelocity
  00088	89 45 f4	 mov	 DWORD PTR $T39762[ebp], eax
  0008b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00093	8b 45 f4	 mov	 eax, DWORD PTR $T39762[ebp]
$L32963:

; 709  :     }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@CDirectSoundBuffer@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetVelocity
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetDistanceFactor@12
PUBLIC	?SetDistanceFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetDistanceFactor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetDistanceFactor@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_flDistanceFactor$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetDistanceFactor@12 PROC NEAR	; COMDAT

; 723  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 724  : 
; 725  : #ifdef DSAPI_DISABLE_3DSOURCE
; 726  : 
; 727  :     return DS_OK;
; 728  : 
; 729  : #else // DSAPI_DISABLE_3DSOURCE
; 730  : 
; 731  :     return ((CDirectSoundBuffer *)pBuffer)->SetDistanceFactor(flDistanceFactor, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39766
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39767
$L39766:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39767:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flDistanceFactor$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetDistanceFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetDistanceFactor

; 732  : 
; 733  : #endif // DSAPI_DISABLE_3DSOURCE
; 734  : 
; 735  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetDistanceFactor@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@ ; `string'
PUBLIC	?SetDistanceFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetDistanceFactor
;	COMDAT ??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@ DB 'CDirectSoundBu'
	DB	'ffer::SetDistanceFactor', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T39772 = -12
$T39771 = -8
___AutoLock$ = -4
_this$ = 8
_flDistanceFactor$ = 12
_dwFlags$ = 16
?SetDistanceFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetDistanceFactor, COMDAT

; 712  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 713  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetDistanceFactor");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32976
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 c9 02 00 00	 push	 713			; 000002c9H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39771[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39771[ebp]
  00053	eb 39		 jmp	 SHORT $L32974
$L32976:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@OMPMKPGG@CDirectSoundBuffer?3?3SetDistanceF@
  0005a	68 c9 02 00 00	 push	 713			; 000002c9H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 714  :         return CDirectSoundVoice::SetDistanceFactor(flDistanceFactor, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _flDistanceFactor$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetDistanceFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetDistanceFactor
  00080	89 45 f4	 mov	 DWORD PTR $T39772[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39772[ebp]
$L32974:

; 715  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetDistanceFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetDistanceFactor
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetDopplerFactor@12
PUBLIC	?SetDopplerFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetDopplerFactor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetDopplerFactor@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_flDopplerFactor$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetDopplerFactor@12 PROC NEAR	; COMDAT

; 738  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 739  : 
; 740  : #ifdef DSAPI_DISABLE_3DSOURCE
; 741  : 
; 742  :     return DS_OK;
; 743  : 
; 744  : #else // DSAPI_DISABLE_3DSOURCE
; 745  : 
; 746  :     return ((CDirectSoundBuffer *)pBuffer)->SetDopplerFactor(flDopplerFactor, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39776
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39777
$L39776:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39777:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flDopplerFactor$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetDopplerFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetDopplerFactor

; 747  : 
; 748  : #endif // DSAPI_DISABLE_3DSOURCE
; 749  : 
; 750  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetDopplerFactor@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@ ; `string'
PUBLIC	?SetDopplerFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetDopplerFactor
;	COMDAT ??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@ DB 'CDirectSoundBu'
	DB	'ffer::SetDopplerFactor', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T39782 = -12
$T39781 = -8
___AutoLock$ = -4
_this$ = 8
_flDopplerFactor$ = 12
_dwFlags$ = 16
?SetDopplerFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetDopplerFactor, COMDAT

; 718  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 719  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetDopplerFactor");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32987
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 cf 02 00 00	 push	 719			; 000002cfH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39781[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39781[ebp]
  00053	eb 39		 jmp	 SHORT $L32985
$L32987:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@DNKDAAOC@CDirectSoundBuffer?3?3SetDopplerFa@
  0005a	68 cf 02 00 00	 push	 719			; 000002cfH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 720  :         return CDirectSoundVoice::SetDopplerFactor(flDopplerFactor, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _flDopplerFactor$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetDopplerFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetDopplerFactor
  00080	89 45 f4	 mov	 DWORD PTR $T39782[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39782[ebp]
$L32985:

; 721  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetDopplerFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetDopplerFactor
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetRolloffFactor@12
PUBLIC	?SetRolloffFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetRolloffFactor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetRolloffFactor@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_flRolloffFactor$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetRolloffFactor@12 PROC NEAR	; COMDAT

; 753  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 754  : 
; 755  : #ifdef DSAPI_DISABLE_3DSOURCE
; 756  : 
; 757  :     return DS_OK;
; 758  : 
; 759  : #else // DSAPI_DISABLE_3DSOURCE
; 760  : 
; 761  :     return ((CDirectSoundBuffer *)pBuffer)->SetRolloffFactor(flRolloffFactor, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39786
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39787
$L39786:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39787:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _flRolloffFactor$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetRolloffFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundBuffer::SetRolloffFactor

; 762  : 
; 763  : #endif // DSAPI_DISABLE_3DSOURCE
; 764  : 
; 765  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetRolloffFactor@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@ ; `string'
PUBLIC	?SetRolloffFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetRolloffFactor
;	COMDAT ??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@ DB 'CDirectSoundBu'
	DB	'ffer::SetRolloffFactor', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T39792 = -12
$T39791 = -8
___AutoLock$ = -4
_this$ = 8
_flRolloffFactor$ = 12
_dwFlags$ = 16
?SetRolloffFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetRolloffFactor, COMDAT

; 724  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 725  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetRolloffFactor");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32998
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 d5 02 00 00	 push	 725			; 000002d5H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39791[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39791[ebp]
  00053	eb 39		 jmp	 SHORT $L32996
$L32998:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CEGGDJFO@CDirectSoundBuffer?3?3SetRolloffFa@
  0005a	68 d5 02 00 00	 push	 725			; 000002d5H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 726  :         return CDirectSoundVoice::SetRolloffFactor(flRolloffFactor, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _flRolloffFactor$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetRolloffFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetRolloffFactor
  00080	89 45 f4	 mov	 DWORD PTR $T39792[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39792[ebp]
$L32996:

; 727  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetRolloffFactor@CDirectSoundBuffer@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetRolloffFactor
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetRolloffCurve@16
PUBLIC	?SetRolloffCurve@CDirectSoundBuffer@DirectSound@@QAGJPBMKK@Z ; DirectSound::CDirectSoundBuffer::SetRolloffCurve
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetRolloffCurve@16
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pflPoints$ = 12
_dwPointCount$ = 16
_dwFlags$ = 20
_IDirectSoundBuffer_SetRolloffCurve@16 PROC NEAR	; COMDAT

; 768  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 769  : 
; 770  : #ifdef DSAPI_DISABLE_3DSOURCE
; 771  : 
; 772  :     return DS_OK;
; 773  : 
; 774  : #else // DSAPI_DISABLE_3DSOURCE
; 775  : 
; 776  :     return ((CDirectSoundBuffer *)pBuffer)->SetRolloffCurve(pflPoints, dwPointCount, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39796
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39797
$L39796:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39797:
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 10	 mov	 edx, DWORD PTR _dwPointCount$[ebp]
  00023	52		 push	 edx
  00024	8b 45 0c	 mov	 eax, DWORD PTR _pflPoints$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?SetRolloffCurve@CDirectSoundBuffer@DirectSound@@QAGJPBMKK@Z ; DirectSound::CDirectSoundBuffer::SetRolloffCurve

; 777  : 
; 778  : #endif // DSAPI_DISABLE_3DSOURCE
; 779  : 
; 780  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundBuffer_SetRolloffCurve@16 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@ ; `string'
PUBLIC	?SetRolloffCurve@CDirectSoundVoice@DirectSound@@QAGJPBMKK@Z ; DirectSound::CDirectSoundVoice::SetRolloffCurve
;	COMDAT ??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@ DB 'CDirectSoundBu'
	DB	'ffer::SetRolloffCurve', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetRolloffCurve@CDirectSoundBuffer@DirectSound@@QAGJPBMKK@Z
DSOUND	SEGMENT
$T39802 = -12
$T39801 = -8
___AutoLock$ = -4
_this$ = 8
_pflPoints$ = 12
_dwPointCount$ = 16
_dwApply$ = 20
?SetRolloffCurve@CDirectSoundBuffer@DirectSound@@QAGJPBMKK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetRolloffCurve, COMDAT

; 730  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 731  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetRolloffCurve");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33010
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 db 02 00 00	 push	 731			; 000002dbH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39801[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39801[ebp]
  00053	eb 3d		 jmp	 SHORT $L33008
$L33010:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@LIPCEEAM@CDirectSoundBuffer?3?3SetRolloffCu@
  0005a	68 db 02 00 00	 push	 731			; 000002dbH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 732  :         return CDirectSoundVoice::SetRolloffCurve(pflPoints, dwPointCount, dwApply);

  0006c	8b 45 14	 mov	 eax, DWORD PTR _dwApply$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 10	 mov	 ecx, DWORD PTR _dwPointCount$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 0c	 mov	 edx, DWORD PTR _pflPoints$[ebp]
  00077	52		 push	 edx
  00078	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	83 c0 08	 add	 eax, 8
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?SetRolloffCurve@CDirectSoundVoice@DirectSound@@QAGJPBMKK@Z ; DirectSound::CDirectSoundVoice::SetRolloffCurve
  00084	89 45 f4	 mov	 DWORD PTR $T39802[ebp], eax
  00087	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008a	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008f	8b 45 f4	 mov	 eax, DWORD PTR $T39802[ebp]
$L33008:

; 733  :     }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 10 00	 ret	 16			; 00000010H
?SetRolloffCurve@CDirectSoundBuffer@DirectSound@@QAGJPBMKK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetRolloffCurve
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetI3DL2Source@12
PUBLIC	?SetI3DL2Source@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; DirectSound::CDirectSoundBuffer::SetI3DL2Source
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_SetI3DL2Source@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pds3db$ = 12
_dwFlags$ = 16
_IDirectSoundBuffer_SetI3DL2Source@12 PROC NEAR		; COMDAT

; 783  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 784  : 
; 785  : #ifdef DSAPI_DISABLE_3DSOURCE
; 786  : 
; 787  :     return DS_OK;
; 788  : 
; 789  : #else // DSAPI_DISABLE_3DSOURCE
; 790  : 
; 791  :     return ((CDirectSoundBuffer *)pBuffer)->SetI3DL2Source(pds3db, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39806
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39807
$L39806:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39807:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _pds3db$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetI3DL2Source@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; DirectSound::CDirectSoundBuffer::SetI3DL2Source

; 792  : 
; 793  : #endif // DSAPI_DISABLE_3DSOURCE
; 794  : 
; 795  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetI3DL2Source@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@ ; `string'
PUBLIC	?SetI3DL2Source@CDirectSoundVoice@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; DirectSound::CDirectSoundVoice::SetI3DL2Source
;	COMDAT ??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@ DB 'CDirectSoundBu'
	DB	'ffer::SetI3DL2Source', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetI3DL2Source@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z
DSOUND	SEGMENT
$T39812 = -12
$T39811 = -8
___AutoLock$ = -4
_this$ = 8
_pds3db$ = 12
_dwFlags$ = 16
?SetI3DL2Source@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetI3DL2Source, COMDAT

; 736  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 737  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::SetI3DL2Source");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33021
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 e1 02 00 00	 push	 737			; 000002e1H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39811[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39811[ebp]
  00053	eb 39		 jmp	 SHORT $L33019
$L33021:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@HPKGJBBG@CDirectSoundBuffer?3?3SetI3DL2Sour@
  0005a	68 e1 02 00 00	 push	 737			; 000002e1H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 738  :         return CDirectSoundVoice::SetI3DL2Source(pds3db, dwFlags);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 c2 08	 add	 edx, 8
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?SetI3DL2Source@CDirectSoundVoice@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; DirectSound::CDirectSoundVoice::SetI3DL2Source
  00080	89 45 f4	 mov	 DWORD PTR $T39812[ebp], eax
  00083	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f4	 mov	 eax, DWORD PTR $T39812[ebp]
$L33019:

; 739  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Source@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ENDP ; DirectSound::CDirectSoundBuffer::SetI3DL2Source
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_Play@16
PUBLIC	?Play@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z	; DirectSound::CDirectSoundBuffer::Play
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundBuffer_Play@16
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwReserved1$ = 12
_dwReserved2$ = 16
_dwFlags$ = 20
_IDirectSoundBuffer_Play@16 PROC NEAR			; COMDAT

; 800  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 801  :     return ((CDirectSoundBuffer *)pBuffer)->Play(dwReserved1, dwReserved2, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39816
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39817
$L39816:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39817:
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 10	 mov	 edx, DWORD PTR _dwReserved2$[ebp]
  00023	52		 push	 edx
  00024	8b 45 0c	 mov	 eax, DWORD PTR _dwReserved1$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?Play@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundBuffer::Play

; 802  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundBuffer_Play@16 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_PlayEx@16
PUBLIC	?PlayEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundBuffer::PlayEx
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_PlayEx@16
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
_IDirectSoundBuffer_PlayEx@16 PROC NEAR			; COMDAT

; 805  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 806  :     return ((CDirectSoundBuffer *)pBuffer)->PlayEx(rtTimeStamp, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39821
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39822
$L39821:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39822:
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 10	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp+4]
  00023	52		 push	 edx
  00024	8b 45 0c	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?PlayEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundBuffer::PlayEx

; 807  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundBuffer_PlayEx@16 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_Stop@4
PUBLIC	?Stop@CDirectSoundBuffer@DirectSound@@QAGJXZ	; DirectSound::CDirectSoundBuffer::Stop
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_Stop@4
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_IDirectSoundBuffer_Stop@4 PROC NEAR			; COMDAT

; 810  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 811  :     return ((CDirectSoundBuffer *)pBuffer)->Stop();

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39826
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39827
$L39826:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39827:
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ?Stop@CDirectSoundBuffer@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundBuffer::Stop

; 812  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
_IDirectSoundBuffer_Stop@4 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_StopEx@16
PUBLIC	?StopEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundBuffer::StopEx
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_StopEx@16
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
_IDirectSoundBuffer_StopEx@16 PROC NEAR			; COMDAT

; 815  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 816  : 
; 817  : #ifdef DSAPI_DISABLE_NOTEOFF
; 818  : 
; 819  :     dwFlags = 0;
; 820  : 
; 821  : #endif // DSAPI_DISABLE_NOTEOFF
; 822  : 
; 823  :     return ((CDirectSoundBuffer *)pBuffer)->StopEx(rtTimeStamp, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39831
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39832
$L39831:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39832:
  0001c	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 10	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp+4]
  00023	52		 push	 edx
  00024	8b 45 0c	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv66[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?StopEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundBuffer::StopEx

; 824  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundBuffer_StopEx@16 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetPlayRegion@12
PUBLIC	?SetPlayRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundBuffer::SetPlayRegion
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_SetPlayRegion@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwPlayStart$ = 12
_dwPlayLength$ = 16
_IDirectSoundBuffer_SetPlayRegion@12 PROC NEAR		; COMDAT

; 827  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 828  :     return ((CDirectSoundBuffer *)pBuffer)->SetPlayRegion(dwPlayStart, dwPlayLength);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39836
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39837
$L39836:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39837:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwPlayLength$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _dwPlayStart$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetPlayRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundBuffer::SetPlayRegion

; 829  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetPlayRegion@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetLoopRegion@12
PUBLIC	?SetLoopRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundBuffer::SetLoopRegion
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_SetLoopRegion@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwLoopStart$ = 12
_dwLoopLength$ = 16
_IDirectSoundBuffer_SetLoopRegion@12 PROC NEAR		; COMDAT

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 833  :     return ((CDirectSoundBuffer *)pBuffer)->SetLoopRegion(dwLoopStart, dwLoopLength);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39841
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39842
$L39841:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39842:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwLoopLength$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _dwLoopStart$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetLoopRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundBuffer::SetLoopRegion

; 834  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetLoopRegion@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_GetStatus@8
PUBLIC	?GetStatus@CDirectSoundBuffer@DirectSound@@QAGJPAK@Z ; DirectSound::CDirectSoundBuffer::GetStatus
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_GetStatus@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pdwStatus$ = 12
_IDirectSoundBuffer_GetStatus@8 PROC NEAR		; COMDAT

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 838  :     return ((CDirectSoundBuffer *)pBuffer)->GetStatus(pdwStatus);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39846
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39847
$L39846:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39847:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwStatus$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?GetStatus@CDirectSoundBuffer@DirectSound@@QAGJPAK@Z ; DirectSound::CDirectSoundBuffer::GetStatus

; 839  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_GetStatus@8 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_GetCurrentPosition@12
PUBLIC	?GetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJPAK0@Z ; DirectSound::CDirectSoundBuffer::GetCurrentPosition
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_GetCurrentPosition@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pdwPlayCursor$ = 12
_pdwWriteCursor$ = 16
_IDirectSoundBuffer_GetCurrentPosition@12 PROC NEAR	; COMDAT

; 842  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 843  :     return ((CDirectSoundBuffer *)pBuffer)->GetCurrentPosition(pdwPlayCursor, pdwWriteCursor);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39851
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39852
$L39851:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39852:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _pdwWriteCursor$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _pdwPlayCursor$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?GetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJPAK0@Z ; DirectSound::CDirectSoundBuffer::GetCurrentPosition

; 844  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_GetCurrentPosition@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetCurrentPosition@8
PUBLIC	?SetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundBuffer::SetCurrentPosition
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_SetCurrentPosition@8
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwPlayCursor$ = 12
_IDirectSoundBuffer_SetCurrentPosition@8 PROC NEAR	; COMDAT

; 847  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 848  :     return ((CDirectSoundBuffer *)pBuffer)->SetCurrentPosition(dwPlayCursor);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39856
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39857
$L39856:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39857:
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwPlayCursor$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ?SetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundBuffer::SetCurrentPosition

; 849  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
_IDirectSoundBuffer_SetCurrentPosition@8 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetBufferData@12
PUBLIC	?SetBufferData@CDirectSoundBuffer@DirectSound@@QAGJPAXK@Z ; DirectSound::CDirectSoundBuffer::SetBufferData
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_SetBufferData@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_pvBufferData$ = 12
_dwBufferBytes$ = 16
_IDirectSoundBuffer_SetBufferData@12 PROC NEAR		; COMDAT

; 852  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 853  :     return ((CDirectSoundBuffer *)pBuffer)->SetBufferData(pvBufferData, dwBufferBytes);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39861
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39862
$L39861:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39862:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _dwBufferBytes$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _pvBufferData$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetBufferData@CDirectSoundBuffer@DirectSound@@QAGJPAXK@Z ; DirectSound::CDirectSoundBuffer::SetBufferData

; 854  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetBufferData@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_Lock@32
PUBLIC	?Lock@CDirectSoundBuffer@DirectSound@@QAGJKKPAPAXPAK01K@Z ; DirectSound::CDirectSoundBuffer::Lock
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_Lock@32
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwOffset$ = 12
_dwBytes$ = 16
_ppvAudioPtr1$ = 20
_pdwAudioBytes1$ = 24
_ppvAudioPtr2$ = 28
_pdwAudioBytes2$ = 32
_dwFlags$ = 36
_IDirectSoundBuffer_Lock@32 PROC NEAR			; COMDAT

; 857  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 858  :     return ((CDirectSoundBuffer *)pBuffer)->Lock(dwOffset, dwBytes, ppvAudioPtr1, pdwAudioBytes1, ppvAudioPtr2, pdwAudioBytes2, dwFlags);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39866
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39867
$L39866:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39867:
  0001c	8b 4d 24	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 20	 mov	 edx, DWORD PTR _pdwAudioBytes2$[ebp]
  00023	52		 push	 edx
  00024	8b 45 1c	 mov	 eax, DWORD PTR _ppvAudioPtr2$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 18	 mov	 ecx, DWORD PTR _pdwAudioBytes1$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 14	 mov	 edx, DWORD PTR _ppvAudioPtr1$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 10	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _dwOffset$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?Lock@CDirectSoundBuffer@DirectSound@@QAGJKKPAPAXPAK01K@Z ; DirectSound::CDirectSoundBuffer::Lock

; 859  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 20 00	 ret	 32			; 00000020H
_IDirectSoundBuffer_Lock@32 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundBuffer_SetNotificationPositions@12
PUBLIC	?SetNotificationPositions@CDirectSoundBuffer@DirectSound@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z ; DirectSound::CDirectSoundBuffer::SetNotificationPositions
; Function compile flags: /Odt
;	COMDAT _IDirectSoundBuffer_SetNotificationPositions@12
DSOUND	SEGMENT
tv66 = -4
_pBuffer$ = 8
_dwNotifyCount$ = 12
_paNotifies$ = 16
_IDirectSoundBuffer_SetNotificationPositions@12 PROC NEAR ; COMDAT

; 862  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 863  :     return ((CDirectSoundBuffer *)pBuffer)->SetNotificationPositions(dwNotifyCount, paNotifies);

  00004	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  00008	74 0b		 je	 SHORT $L39871
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  0000d	83 e8 24	 sub	 eax, 36			; 00000024H
  00010	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00013	eb 07		 jmp	 SHORT $L39872
$L39871:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L39872:
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _paNotifies$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 0c	 mov	 edx, DWORD PTR _dwNotifyCount$[ebp]
  00023	52		 push	 edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?SetNotificationPositions@CDirectSoundBuffer@DirectSound@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z ; DirectSound::CDirectSoundBuffer::SetNotificationPositions

; 864  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundBuffer_SetNotificationPositions@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_QueryInterface@12
PUBLIC	??_C@_07KCKPANJI@pStream?$AA@			; `string'
;	COMDAT ??_C@_07KCKPANJI@pStream?$AA@
DSOUND_RD	SEGMENT
??_C@_07KCKPANJI@pStream?$AA@ DB 'pStream', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _IDirectSoundStream_QueryInterface@12
DSOUND	SEGMENT
_pStream$ = 8
_iid$ = 12
_ppvInterface$ = 16
_IDirectSoundStream_QueryInterface@12 PROC NEAR		; COMDAT

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 870  :     ASSERT(pStream);

  00003	68 66 03 00 00	 push	 870			; 00000366H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KCKPANJI@pStream?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 871  :     ASSERT(ppvInterface);

  00024	68 67 03 00 00	 push	 871			; 00000367H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@POCBACBD@ppvInterface?$AA@
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 10 00	 cmp	 DWORD PTR _ppvInterface$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 872  : 
; 873  :     IDirectSoundStream_AddRef(pStream);

  00045	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0004d	51		 push	 ecx
  0004e	ff 10		 call	 DWORD PTR [eax]

; 874  :     *ppvInterface = pStream;

  00050	8b 55 10	 mov	 edx, DWORD PTR _ppvInterface$[ebp]
  00053	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00056	89 02		 mov	 DWORD PTR [edx], eax

; 875  : 
; 876  :     return DS_OK;

  00058	33 c0		 xor	 eax, eax

; 877  : }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_QueryInterface@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_QueryInterfaceC@12
; Function compile flags: /Odt
;	COMDAT _IDirectSoundStream_QueryInterfaceC@12
DSOUND	SEGMENT
_pStream$ = 8
_iid$ = 12
_ppvInterface$ = 16
_IDirectSoundStream_QueryInterfaceC@12 PROC NEAR	; COMDAT

; 880  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 881  :     ASSERT(pStream);

  00003	68 71 03 00 00	 push	 881			; 00000371H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KCKPANJI@pStream?$AA@
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 882  :     ASSERT(ppvInterface);

  00024	68 72 03 00 00	 push	 882			; 00000372H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@POCBACBD@ppvInterface?$AA@
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 10 00	 cmp	 DWORD PTR _ppvInterface$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 883  : 
; 884  :     IDirectSoundStream_AddRef(pStream);

  00045	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0004d	51		 push	 ecx
  0004e	ff 10		 call	 DWORD PTR [eax]

; 885  :     *ppvInterface = pStream;

  00050	8b 55 10	 mov	 edx, DWORD PTR _ppvInterface$[ebp]
  00053	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00056	89 02		 mov	 DWORD PTR [edx], eax

; 886  : 
; 887  :     return DS_OK;

  00058	33 c0		 xor	 eax, eax

; 888  : }

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_QueryInterfaceC@12 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetFormat@8
PUBLIC	?SetFormat@CDirectSoundStream@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ; DirectSound::CDirectSoundStream::SetFormat
; Function compile flags: /Odt
;	COMDAT _IDirectSoundStream_SetFormat@8
DSOUND	SEGMENT
_pStream$ = 8
_pwfxFormat$ = 12
_IDirectSoundStream_SetFormat@8 PROC NEAR		; COMDAT

; 891  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 892  :     return ((CDirectSoundStream *)pStream)->SetFormat(pwfxFormat);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetFormat@CDirectSoundStream@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ; DirectSound::CDirectSoundStream::SetFormat

; 893  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetFormat@8 ENDP
DSOUND	ENDS
PUBLIC	?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject
PUBLIC	??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@ ; `string'
;	COMDAT ??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@ DB 'CDirectSoundS'
	DB	'tream::SetFormat', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFormat@CDirectSoundStream@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT
$T39886 = -12
$T39885 = -8
___AutoLock$ = -4
_this$ = 8
_pwfxFormat$ = 12
?SetFormat@CDirectSoundStream@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetFormat, COMDAT

; 855  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 856  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetFormat");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33208
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 58 03 00 00	 push	 856			; 00000358H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39885[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39885[ebp]
  00053	eb 38		 jmp	 SHORT $L33206
$L33208:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@BFEGBGIF@CDirectSoundStream?3?3SetFormat?$AA@
  0005a	68 58 03 00 00	 push	 856			; 00000358H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 857  :         return CDirectSoundVoice::SetFormat(pwfxFormat);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetFormat@CDirectSoundVoice@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ; DirectSound::CDirectSoundVoice::SetFormat
  0007f	89 45 f4	 mov	 DWORD PTR $T39886[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39886[ebp]
$L33206:

; 858  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetFormat@CDirectSoundStream@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ENDP ; DirectSound::CDirectSoundStream::SetFormat
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetFrequency@8
PUBLIC	?SetFrequency@CDirectSoundStream@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundStream::SetFrequency
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetFrequency@8
DSOUND	SEGMENT
_pStream$ = 8
_dwFrequency$ = 12
_IDirectSoundStream_SetFrequency@8 PROC NEAR		; COMDAT

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 897  : 
; 898  : #ifdef DSAPI_DISABLE_PITCH
; 899  : 
; 900  :     return DS_OK;
; 901  : 
; 902  : #else // DSAPI_DISABLE_PITCH
; 903  : 
; 904  :     return ((CDirectSoundStream *)pStream)->SetFrequency(dwFrequency);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetFrequency@CDirectSoundStream@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundStream::SetFrequency

; 905  : 
; 906  : #endif // DSAPI_DISABLE_PITCH
; 907  : 
; 908  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetFrequency@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@ ; `string'
;	COMDAT ??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@ DB 'CDirectSoundSt'
	DB	'ream::SetFrequency', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFrequency@CDirectSoundStream@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
$T39894 = -12
$T39893 = -8
___AutoLock$ = -4
_this$ = 8
_dwFrequency$ = 12
?SetFrequency@CDirectSoundStream@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetFrequency, COMDAT

; 861  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 862  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetFrequency");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33218
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 5e 03 00 00	 push	 862			; 0000035eH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39893[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39893[ebp]
  00053	eb 38		 jmp	 SHORT $L33216
$L33218:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@EFAECKOL@CDirectSoundStream?3?3SetFrequency@
  0005a	68 5e 03 00 00	 push	 862			; 0000035eH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 863  :         return CDirectSoundVoice::SetFrequency(dwFrequency);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetFrequency@CDirectSoundVoice@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundVoice::SetFrequency
  0007f	89 45 f4	 mov	 DWORD PTR $T39894[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39894[ebp]
$L33216:

; 864  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetFrequency@CDirectSoundStream@DirectSound@@QAGJK@Z ENDP ; DirectSound::CDirectSoundStream::SetFrequency
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetVolume@8
PUBLIC	?SetVolume@CDirectSoundStream@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundStream::SetVolume
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetVolume@8
DSOUND	SEGMENT
_pStream$ = 8
_lVolume$ = 12
_IDirectSoundStream_SetVolume@8 PROC NEAR		; COMDAT

; 911  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 912  : 
; 913  : #ifdef DSAPI_DISABLE_VOLUME
; 914  : 
; 915  :     return DS_OK;
; 916  : 
; 917  : #else // DSAPI_DISABLE_VOLUME
; 918  : 
; 919  :     return ((CDirectSoundStream *)pStream)->SetVolume(lVolume);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lVolume$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetVolume@CDirectSoundStream@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundStream::SetVolume

; 920  : 
; 921  : #endif // DSAPI_DISABLE_VOLUME
; 922  : 
; 923  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetVolume@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@ ; `string'
;	COMDAT ??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@ DB 'CDirectSoundS'
	DB	'tream::SetVolume', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVolume@CDirectSoundStream@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT
$T39902 = -12
$T39901 = -8
___AutoLock$ = -4
_this$ = 8
_lVolume$ = 12
?SetVolume@CDirectSoundStream@DirectSound@@QAGJJ@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetVolume, COMDAT

; 873  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 874  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetVolume");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33238
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 6a 03 00 00	 push	 874			; 0000036aH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39901[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39901[ebp]
  00053	eb 38		 jmp	 SHORT $L33236
$L33238:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GCCGAGKM@CDirectSoundStream?3?3SetVolume?$AA@
  0005a	68 6a 03 00 00	 push	 874			; 0000036aH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 875  :         return CDirectSoundVoice::SetVolume(lVolume);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _lVolume$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetVolume@CDirectSoundVoice@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundVoice::SetVolume
  0007f	89 45 f4	 mov	 DWORD PTR $T39902[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39902[ebp]
$L33236:

; 876  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetVolume@CDirectSoundStream@DirectSound@@QAGJJ@Z ENDP	; DirectSound::CDirectSoundStream::SetVolume
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetPitch@8
PUBLIC	?SetPitch@CDirectSoundStream@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundStream::SetPitch
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetPitch@8
DSOUND	SEGMENT
_pStream$ = 8
_lPitch$ = 12
_IDirectSoundStream_SetPitch@8 PROC NEAR		; COMDAT

; 926  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 927  : 
; 928  : #ifdef DSAPI_DISABLE_PITCH
; 929  : 
; 930  :     return DS_OK;
; 931  : 
; 932  : #else // DSAPI_DISABLE_PITCH
; 933  : 
; 934  :     return ((CDirectSoundStream *)pStream)->SetPitch(lPitch);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lPitch$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetPitch@CDirectSoundStream@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundStream::SetPitch

; 935  : 
; 936  : #endif // DSAPI_DISABLE_PITCH
; 937  : 
; 938  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetPitch@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@ ; `string'
;	COMDAT ??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@ DB 'CDirectSoundSt'
	DB	'ream::SetPitch', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPitch@CDirectSoundStream@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT
$T39910 = -12
$T39909 = -8
___AutoLock$ = -4
_this$ = 8
_lPitch$ = 12
?SetPitch@CDirectSoundStream@DirectSound@@QAGJJ@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetPitch, COMDAT

; 867  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 868  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetPitch");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33228
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 64 03 00 00	 push	 868			; 00000364H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39909[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39909[ebp]
  00053	eb 38		 jmp	 SHORT $L33226
$L33228:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GPKLKEMB@CDirectSoundStream?3?3SetPitch?$AA@
  0005a	68 64 03 00 00	 push	 868			; 00000364H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 869  :         return CDirectSoundVoice::SetPitch(lPitch);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _lPitch$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundVoice::SetPitch
  0007f	89 45 f4	 mov	 DWORD PTR $T39910[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39910[ebp]
$L33226:

; 870  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetPitch@CDirectSoundStream@DirectSound@@QAGJJ@Z ENDP	; DirectSound::CDirectSoundStream::SetPitch
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetLFO@8
PUBLIC	?SetLFO@CDirectSoundStream@DirectSound@@QAGJPBU_DSLFODESC@@@Z ; DirectSound::CDirectSoundStream::SetLFO
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetLFO@8
DSOUND	SEGMENT
_pStream$ = 8
_pLFODesc$ = 12
_IDirectSoundStream_SetLFO@8 PROC NEAR			; COMDAT

; 941  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 942  : 
; 943  : #ifdef DSAPI_DISABLE_LFO
; 944  : 
; 945  :     return DS_OK;
; 946  : 
; 947  : #else // DSAPI_DISABLE_LFO
; 948  : 
; 949  :     return ((CDirectSoundStream *)pStream)->SetLFO(pLFODesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pLFODesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetLFO@CDirectSoundStream@DirectSound@@QAGJPBU_DSLFODESC@@@Z ; DirectSound::CDirectSoundStream::SetLFO

; 950  : 
; 951  : #endif // DSAPI_DISABLE_LFO
; 952  : 
; 953  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetLFO@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@ ; `string'
;	COMDAT ??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@ DB 'CDirectSoundStre'
	DB	'am::SetLFO', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetLFO@CDirectSoundStream@DirectSound@@QAGJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT
$T39918 = -12
$T39917 = -8
___AutoLock$ = -4
_this$ = 8
_pLFODesc$ = 12
?SetLFO@CDirectSoundStream@DirectSound@@QAGJPBU_DSLFODESC@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetLFO, COMDAT

; 879  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 880  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetLFO");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33248
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 70 03 00 00	 push	 880			; 00000370H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39917[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39917[ebp]
  00053	eb 38		 jmp	 SHORT $L33246
$L33248:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@BDFCJLBN@CDirectSoundStream?3?3SetLFO?$AA@
  0005a	68 70 03 00 00	 push	 880			; 00000370H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 881  :         return CDirectSoundVoice::SetLFO(pLFODesc);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pLFODesc$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetLFO@CDirectSoundVoice@DirectSound@@QAGJPBU_DSLFODESC@@@Z ; DirectSound::CDirectSoundVoice::SetLFO
  0007f	89 45 f4	 mov	 DWORD PTR $T39918[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39918[ebp]
$L33246:

; 882  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetLFO@CDirectSoundStream@DirectSound@@QAGJPBU_DSLFODESC@@@Z ENDP ; DirectSound::CDirectSoundStream::SetLFO
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetEG@8
PUBLIC	?SetEG@CDirectSoundStream@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CDirectSoundStream::SetEG
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetEG@8
DSOUND	SEGMENT
_pStream$ = 8
_pEnvelopeDesc$ = 12
_IDirectSoundStream_SetEG@8 PROC NEAR			; COMDAT

; 956  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 957  : 
; 958  : #ifdef DSAPI_DISABLE_EG
; 959  : 
; 960  :     return DS_OK;
; 961  : 
; 962  : #else // DSAPI_DISABLE_EG
; 963  : 
; 964  :     return ((CDirectSoundStream *)pStream)->SetEG(pEnvelopeDesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pEnvelopeDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetEG@CDirectSoundStream@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CDirectSoundStream::SetEG

; 965  : 
; 966  : #endif // DSAPI_DISABLE_EG
; 967  : 
; 968  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetEG@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@ ; `string'
;	COMDAT ??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@ DB 'CDirectSoundStrea'
	DB	'm::SetEG', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEG@CDirectSoundStream@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT
$T39926 = -12
$T39925 = -8
___AutoLock$ = -4
_this$ = 8
_pEnvelopeDesc$ = 12
?SetEG@CDirectSoundStream@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetEG, COMDAT

; 885  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 886  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetEG");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33258
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 76 03 00 00	 push	 886			; 00000376H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39925[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39925[ebp]
  00053	eb 38		 jmp	 SHORT $L33256
$L33258:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MOKKBNNH@CDirectSoundStream?3?3SetEG?$AA@
  0005a	68 76 03 00 00	 push	 886			; 00000376H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 887  :         return CDirectSoundVoice::SetEG(pEnvelopeDesc);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pEnvelopeDesc$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetEG@CDirectSoundVoice@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CDirectSoundVoice::SetEG
  0007f	89 45 f4	 mov	 DWORD PTR $T39926[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39926[ebp]
$L33256:

; 888  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetEG@CDirectSoundStream@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ENDP ; DirectSound::CDirectSoundStream::SetEG
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetFilter@8
PUBLIC	?SetFilter@CDirectSoundStream@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ; DirectSound::CDirectSoundStream::SetFilter
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetFilter@8
DSOUND	SEGMENT
_pStream$ = 8
_pFilter$ = 12
_IDirectSoundStream_SetFilter@8 PROC NEAR		; COMDAT

; 971  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 972  : 
; 973  : #ifdef DSAPI_DISABLE_FILTER
; 974  : 
; 975  :     return DS_OK;
; 976  : 
; 977  : #else // DSAPI_DISABLE_FILTER
; 978  : 
; 979  :     return ((CDirectSoundStream *)pStream)->SetFilter(pFilter);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pFilter$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetFilter@CDirectSoundStream@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ; DirectSound::CDirectSoundStream::SetFilter

; 980  : 
; 981  : #endif // DSAPI_DISABLE_FILTER
; 982  : 
; 983  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetFilter@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@ ; `string'
;	COMDAT ??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@ DB 'CDirectSoundS'
	DB	'tream::SetFilter', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFilter@CDirectSoundStream@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT
$T39934 = -12
$T39933 = -8
___AutoLock$ = -4
_this$ = 8
_pFilterDesc$ = 12
?SetFilter@CDirectSoundStream@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetFilter, COMDAT

; 891  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 892  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetFilter");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33268
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 7c 03 00 00	 push	 892			; 0000037cH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39933[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39933[ebp]
  00053	eb 38		 jmp	 SHORT $L33266
$L33268:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GAINMLDE@CDirectSoundStream?3?3SetFilter?$AA@
  0005a	68 7c 03 00 00	 push	 892			; 0000037cH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 893  :         return CDirectSoundVoice::SetFilter(pFilterDesc);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pFilterDesc$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetFilter@CDirectSoundVoice@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ; DirectSound::CDirectSoundVoice::SetFilter
  0007f	89 45 f4	 mov	 DWORD PTR $T39934[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39934[ebp]
$L33266:

; 894  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetFilter@CDirectSoundStream@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ENDP ; DirectSound::CDirectSoundStream::SetFilter
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetHeadroom@8
PUBLIC	?SetHeadroom@CDirectSoundStream@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundStream::SetHeadroom
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetHeadroom@8
DSOUND	SEGMENT
_pStream$ = 8
_dwHeadroom$ = 12
_IDirectSoundStream_SetHeadroom@8 PROC NEAR		; COMDAT

; 986  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 987  : 
; 988  : #ifdef DSAPI_DISABLE_VOLUME
; 989  : 
; 990  :     return DS_OK;
; 991  : 
; 992  : #else // DSAPI_DISABLE_VOLUME
; 993  : 
; 994  :     return ((CDirectSoundStream *)pStream)->SetHeadroom(dwHeadroom);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwHeadroom$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetHeadroom@CDirectSoundStream@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundStream::SetHeadroom

; 995  : 
; 996  : #endif // DSAPI_DISABLE_VOLUME
; 997  : 
; 998  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetHeadroom@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@ ; `string'
;	COMDAT ??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@ DB 'CDirectSoun'
	DB	'dStream::SetHeadroom', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetHeadroom@CDirectSoundStream@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
$T39942 = -12
$T39941 = -8
___AutoLock$ = -4
_this$ = 8
_dwHeadroom$ = 12
?SetHeadroom@CDirectSoundStream@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetHeadroom, COMDAT

; 897  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 898  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetHeadroom");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33278
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 82 03 00 00	 push	 898			; 00000382H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39941[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39941[ebp]
  00053	eb 38		 jmp	 SHORT $L33276
$L33278:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@KJJLHIOD@CDirectSoundStream?3?3SetHeadroom?$AA@
  0005a	68 82 03 00 00	 push	 898			; 00000382H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 899  :         return CDirectSoundVoice::SetHeadroom(dwHeadroom);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _dwHeadroom$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetHeadroom@CDirectSoundVoice@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundVoice::SetHeadroom
  0007f	89 45 f4	 mov	 DWORD PTR $T39942[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39942[ebp]
$L33276:

; 900  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetHeadroom@CDirectSoundStream@DirectSound@@QAGJK@Z ENDP ; DirectSound::CDirectSoundStream::SetHeadroom
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetOutputBuffer@8
PUBLIC	?SetOutputBuffer@CDirectSoundStream@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ; DirectSound::CDirectSoundStream::SetOutputBuffer
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetOutputBuffer@8
DSOUND	SEGMENT
_pStream$ = 8
_pOutputBuffer$ = 12
_IDirectSoundStream_SetOutputBuffer@8 PROC NEAR		; COMDAT

; 1001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1002 : 
; 1003 : #ifdef DSAPI_DISABLE_SUBMIX
; 1004 : 
; 1005 :     return DS_OK;
; 1006 : 
; 1007 : #else // DSAPI_DISABLE_SUBMIX
; 1008 : 
; 1009 :     return ((CDirectSoundStream *)pStream)->SetOutputBuffer(pOutputBuffer);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetOutputBuffer@CDirectSoundStream@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ; DirectSound::CDirectSoundStream::SetOutputBuffer

; 1010 : 
; 1011 : #endif // DSAPI_DISABLE_SUBMIX
; 1012 : 
; 1013 : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetOutputBuffer@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@ ; `string'
;	COMDAT ??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@ DB 'CDirectSoundSt'
	DB	'ream::SetOutputBuffer', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundStream@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT
$T39950 = -12
$T39949 = -8
___AutoLock$ = -4
_this$ = 8
_pOutputBuffer$ = 12
?SetOutputBuffer@CDirectSoundStream@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetOutputBuffer, COMDAT

; 903  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 904  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetOutputBuffer");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33288
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 88 03 00 00	 push	 904			; 00000388H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39949[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39949[ebp]
  00053	eb 38		 jmp	 SHORT $L33286
$L33288:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HMGNJNIP@CDirectSoundStream?3?3SetOutputBuf@
  0005a	68 88 03 00 00	 push	 904			; 00000388H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 905  :         return CDirectSoundVoice::SetOutputBuffer(pOutputBuffer);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ; DirectSound::CDirectSoundVoice::SetOutputBuffer
  0007f	89 45 f4	 mov	 DWORD PTR $T39950[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39950[ebp]
$L33286:

; 906  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetOutputBuffer@CDirectSoundStream@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ENDP ; DirectSound::CDirectSoundStream::SetOutputBuffer
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetMixBins@8
PUBLIC	?SetMixBins@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundStream::SetMixBins
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetMixBins@8
DSOUND	SEGMENT
_pStream$ = 8
_pMixBins$ = 12
_IDirectSoundStream_SetMixBins@8 PROC NEAR		; COMDAT

; 1016 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1017 : 
; 1018 : #ifdef DSAPI_DISABLE_MIXBINS
; 1019 : 
; 1020 :     return DS_OK;
; 1021 : 
; 1022 : #else // DSAPI_DISABLE_MIXBINS
; 1023 : 
; 1024 :     return ((CDirectSoundStream *)pStream)->SetMixBins(pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetMixBins@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundStream::SetMixBins

; 1025 : 
; 1026 : #endif // DSAPI_DISABLE_MIXBINS
; 1027 : 
; 1028 : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetMixBins@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@ ; `string'
;	COMDAT ??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@ DB 'CDirectSound'
	DB	'Stream::SetMixBins', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBins@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
$T39958 = -12
$T39957 = -8
___AutoLock$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBins@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetMixBins, COMDAT

; 909  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 910  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetMixBins");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33298
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 8e 03 00 00	 push	 910			; 0000038eH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39957[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39957[ebp]
  00053	eb 38		 jmp	 SHORT $L33296
$L33298:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@JBGAKHBK@CDirectSoundStream?3?3SetMixBins?$AA@
  0005a	68 8e 03 00 00	 push	 910			; 0000038eH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 911  :         return CDirectSoundVoice::SetMixBins(pMixBins);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetMixBins@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoice::SetMixBins
  0007f	89 45 f4	 mov	 DWORD PTR $T39958[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39958[ebp]
$L33296:

; 912  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetMixBins@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundStream::SetMixBins
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetMixBinVolumes@8
PUBLIC	?SetMixBinVolumes@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundStream::SetMixBinVolumes
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetMixBinVolumes@8
DSOUND	SEGMENT
_pStream$ = 8
_pMixBins$ = 12
_IDirectSoundStream_SetMixBinVolumes@8 PROC NEAR	; COMDAT

; 1031 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1032 : 
; 1033 : #ifdef DSAPI_DISABLE_VOLUME
; 1034 : 
; 1035 :     return DS_OK;
; 1036 : 
; 1037 : #else // DSAPI_DISABLE_VOLUME
; 1038 : 
; 1039 :     return ((CDirectSoundStream *)pStream)->SetMixBinVolumes(pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?SetMixBinVolumes@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundStream::SetMixBinVolumes

; 1040 : 
; 1041 : #endif // DSAPI_DISABLE_VOLUME
; 1042 : 
; 1043 : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_SetMixBinVolumes@8 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@ ; `string'
;	COMDAT ??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@ DB 'CDirectSoundSt'
	DB	'ream::SetMixBinVolumes', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
$T39966 = -12
$T39965 = -8
___AutoLock$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetMixBinVolumes, COMDAT

; 915  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 916  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetMixBinVolumes");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33308
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 94 03 00 00	 push	 916			; 00000394H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39965[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39965[ebp]
  00053	eb 38		 jmp	 SHORT $L33306
$L33308:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@KGJDLLDP@CDirectSoundStream?3?3SetMixBinVol@
  0005a	68 94 03 00 00	 push	 916			; 00000394H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 917  :         return CDirectSoundVoice::SetMixBinVolumes(pMixBins);

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?SetMixBinVolumes@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoice::SetMixBinVolumes
  0007f	89 45 f4	 mov	 DWORD PTR $T39966[ebp], eax
  00082	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00085	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008a	8b 45 f4	 mov	 eax, DWORD PTR $T39966[ebp]
$L33306:

; 918  :     }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SetMixBinVolumes@CDirectSoundStream@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundStream::SetMixBinVolumes
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetAllParameters@12
PUBLIC	?SetAllParameters@CDirectSoundStream@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ; DirectSound::CDirectSoundStream::SetAllParameters
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetAllParameters@12
DSOUND	SEGMENT
_pStream$ = 8
_pds3db$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetAllParameters@12 PROC NEAR	; COMDAT

; 1046 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1047 : 
; 1048 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1049 : 
; 1050 :     return DS_OK;
; 1051 : 
; 1052 : #else // DSAPI_DISABLE_3DSOURCE
; 1053 : 
; 1054 :     return ((CDirectSoundStream *)pStream)->SetAllParameters(pds3db, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetAllParameters@CDirectSoundStream@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ; DirectSound::CDirectSoundStream::SetAllParameters

; 1055 : 
; 1056 : #endif // DSAPI_DISABLE_3DSOURCE
; 1057 : 
; 1058 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetAllParameters@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@ ; `string'
;	COMDAT ??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@ DB 'CDirectSoundSt'
	DB	'ream::SetAllParameters', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetAllParameters@CDirectSoundStream@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z
DSOUND	SEGMENT
$T39974 = -12
$T39973 = -8
___AutoLock$ = -4
_this$ = 8
_pds3db$ = 12
_dwFlags$ = 16
?SetAllParameters@CDirectSoundStream@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetAllParameters, COMDAT

; 921  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 922  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetAllParameters");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33319
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 9a 03 00 00	 push	 922			; 0000039aH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39973[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39973[ebp]
  00053	eb 3c		 jmp	 SHORT $L33317
$L33319:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OPMLGNDG@CDirectSoundStream?3?3SetAllParame@
  0005a	68 9a 03 00 00	 push	 922			; 0000039aH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 923  :         return CDirectSoundVoice::SetAllParameters(pds3db, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetAllParameters@CDirectSoundVoice@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ; DirectSound::CDirectSoundVoice::SetAllParameters
  00083	89 45 f4	 mov	 DWORD PTR $T39974[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T39974[ebp]
$L33317:

; 924  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@CDirectSoundStream@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ENDP ; DirectSound::CDirectSoundStream::SetAllParameters
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetConeAngles@16
PUBLIC	?SetConeAngles@CDirectSoundStream@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundStream::SetConeAngles
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetConeAngles@16
DSOUND	SEGMENT
_pStream$ = 8
_dwInsideConeAngle$ = 12
_dwOutsideConeAngle$ = 16
_dwFlags$ = 20
_IDirectSoundStream_SetConeAngles@16 PROC NEAR		; COMDAT

; 1061 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1062 : 
; 1063 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1064 : 
; 1065 :     return DS_OK;
; 1066 : 
; 1067 : #else // DSAPI_DISABLE_3DSOURCE
; 1068 : 
; 1069 :     return ((CDirectSoundStream *)pStream)->SetConeAngles(dwInsideConeAngle, dwOutsideConeAngle, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _dwOutsideConeAngle$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _dwInsideConeAngle$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?SetConeAngles@CDirectSoundStream@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundStream::SetConeAngles

; 1070 : 
; 1071 : #endif // DSAPI_DISABLE_3DSOURCE
; 1072 : 
; 1073 : }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundStream_SetConeAngles@16 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@ ; `string'
;	COMDAT ??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@ DB 'CDirectSoundSt'
	DB	'ream::SetConeAngles', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeAngles@CDirectSoundStream@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT
$T39982 = -12
$T39981 = -8
___AutoLock$ = -4
_this$ = 8
_dwInsideConeAngle$ = 12
_dwOutsideConeAngle$ = 16
_dwFlags$ = 20
?SetConeAngles@CDirectSoundStream@DirectSound@@QAGJKKK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetConeAngles, COMDAT

; 927  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 928  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetConeAngles");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33331
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 a0 03 00 00	 push	 928			; 000003a0H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39981[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39981[ebp]
  00053	eb 40		 jmp	 SHORT $L33329
$L33331:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JMIIELEI@CDirectSoundStream?3?3SetConeAngle@
  0005a	68 a0 03 00 00	 push	 928			; 000003a0H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 929  :         return CDirectSoundVoice::SetConeAngles(dwInsideConeAngle, dwOutsideConeAngle, dwFlags);

  0006f	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 10	 mov	 ecx, DWORD PTR _dwOutsideConeAngle$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 0c	 mov	 edx, DWORD PTR _dwInsideConeAngle$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?SetConeAngles@CDirectSoundVoice@DirectSound@@QAGJKKK@Z ; DirectSound::CDirectSoundVoice::SetConeAngles
  00087	89 45 f4	 mov	 DWORD PTR $T39982[ebp], eax
  0008a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00092	8b 45 f4	 mov	 eax, DWORD PTR $T39982[ebp]
$L33329:

; 930  :     }

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 10 00	 ret	 16			; 00000010H
?SetConeAngles@CDirectSoundStream@DirectSound@@QAGJKKK@Z ENDP ; DirectSound::CDirectSoundStream::SetConeAngles
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetConeOrientation@20
PUBLIC	?SetConeOrientation@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundStream::SetConeOrientation
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetConeOrientation@20
DSOUND	SEGMENT
_pStream$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSoundStream_SetConeOrientation@20 PROC NEAR	; COMDAT

; 1076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1077 : 
; 1078 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1079 : 
; 1080 :     return DS_OK;
; 1081 : 
; 1082 : #else // DSAPI_DISABLE_3DSOURCE
; 1083 : 
; 1084 :     return ((CDirectSoundStream *)pStream)->SetConeOrientation(x, y, z, dwFlags);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?SetConeOrientation@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundStream::SetConeOrientation

; 1085 : 
; 1086 : #endif // DSAPI_DISABLE_3DSOURCE
; 1087 : 
; 1088 : }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
_IDirectSoundStream_SetConeOrientation@20 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@ ; `string'
;	COMDAT ??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@ DB 'CDirectSoundSt'
	DB	'ream::SetConeOrientation', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeOrientation@CDirectSoundStream@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T39990 = -12
$T39989 = -8
___AutoLock$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
?SetConeOrientation@CDirectSoundStream@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetConeOrientation, COMDAT

; 933  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 934  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetConeOrientation");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33344
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 a6 03 00 00	 push	 934			; 000003a6H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39989[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39989[ebp]
  00053	eb 44		 jmp	 SHORT $L33342
$L33344:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@EABPIKPF@CDirectSoundStream?3?3SetConeOrien@
  0005a	68 a6 03 00 00	 push	 934			; 000003a6H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 935  :         return CDirectSoundVoice::SetConeOrientation(x, y, z, dwFlags);

  0006f	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?SetConeOrientation@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetConeOrientation
  0008b	89 45 f4	 mov	 DWORD PTR $T39990[ebp], eax
  0008e	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00091	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00096	8b 45 f4	 mov	 eax, DWORD PTR $T39990[ebp]
$L33342:

; 936  :     }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 14 00	 ret	 20			; 00000014H
?SetConeOrientation@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundStream::SetConeOrientation
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetConeOutsideVolume@12
PUBLIC	?SetConeOutsideVolume@CDirectSoundStream@DirectSound@@QAGJJK@Z ; DirectSound::CDirectSoundStream::SetConeOutsideVolume
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetConeOutsideVolume@12
DSOUND	SEGMENT
_pStream$ = 8
_lConeOutsideVolume$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetConeOutsideVolume@12 PROC NEAR	; COMDAT

; 1091 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1092 : 
; 1093 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1094 : 
; 1095 :     return DS_OK;
; 1096 : 
; 1097 : #else // DSAPI_DISABLE_3DSOURCE
; 1098 : 
; 1099 :     return ((CDirectSoundStream *)pStream)->SetConeOutsideVolume(lConeOutsideVolume, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _lConeOutsideVolume$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetConeOutsideVolume@CDirectSoundStream@DirectSound@@QAGJJK@Z ; DirectSound::CDirectSoundStream::SetConeOutsideVolume

; 1100 : 
; 1101 : #endif // DSAPI_DISABLE_3DSOURCE
; 1102 : 
; 1103 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetConeOutsideVolume@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@ ; `string'
;	COMDAT ??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@ DB 'CDirectSoundSt'
	DB	'ream::SetConeOutsideVolume', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeOutsideVolume@CDirectSoundStream@DirectSound@@QAGJJK@Z
DSOUND	SEGMENT
$T39998 = -12
$T39997 = -8
___AutoLock$ = -4
_this$ = 8
_lConeOutsideVolume$ = 12
_dwFlags$ = 16
?SetConeOutsideVolume@CDirectSoundStream@DirectSound@@QAGJJK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetConeOutsideVolume, COMDAT

; 939  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 940  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetConeOutsideVolume");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33355
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 ac 03 00 00	 push	 940			; 000003acH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T39997[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T39997[ebp]
  00053	eb 3c		 jmp	 SHORT $L33353
$L33355:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@BBDBCKJO@CDirectSoundStream?3?3SetConeOutsi@
  0005a	68 ac 03 00 00	 push	 940			; 000003acH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 941  :         return CDirectSoundVoice::SetConeOutsideVolume(lConeOutsideVolume, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _lConeOutsideVolume$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetConeOutsideVolume@CDirectSoundVoice@DirectSound@@QAGJJK@Z ; DirectSound::CDirectSoundVoice::SetConeOutsideVolume
  00083	89 45 f4	 mov	 DWORD PTR $T39998[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T39998[ebp]
$L33353:

; 942  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetConeOutsideVolume@CDirectSoundStream@DirectSound@@QAGJJK@Z ENDP ; DirectSound::CDirectSoundStream::SetConeOutsideVolume
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetMaxDistance@12
PUBLIC	?SetMaxDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetMaxDistance
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetMaxDistance@12
DSOUND	SEGMENT
_pStream$ = 8
_flMaxDistance$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetMaxDistance@12 PROC NEAR		; COMDAT

; 1106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1107 : 
; 1108 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1109 : 
; 1110 :     return DS_OK;
; 1111 : 
; 1112 : #else // DSAPI_DISABLE_3DSOURCE
; 1113 : 
; 1114 :     return ((CDirectSoundStream *)pStream)->SetMaxDistance(flMaxDistance, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _flMaxDistance$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetMaxDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetMaxDistance

; 1115 : 
; 1116 : #endif // DSAPI_DISABLE_3DSOURCE
; 1117 : 
; 1118 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetMaxDistance@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@ ; `string'
;	COMDAT ??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@ DB 'CDirectSoundSt'
	DB	'ream::SetMaxDistance', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMaxDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40006 = -12
$T40005 = -8
___AutoLock$ = -4
_this$ = 8
_flMaxDistance$ = 12
_dwFlags$ = 16
?SetMaxDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetMaxDistance, COMDAT

; 945  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 946  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetMaxDistance");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33366
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 b2 03 00 00	 push	 946			; 000003b2H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40005[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40005[ebp]
  00053	eb 3c		 jmp	 SHORT $L33364
$L33366:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@POADFFEE@CDirectSoundStream?3?3SetMaxDistan@
  0005a	68 b2 03 00 00	 push	 946			; 000003b2H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 947  :         return CDirectSoundVoice::SetMaxDistance(flMaxDistance, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _flMaxDistance$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetMaxDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetMaxDistance
  00083	89 45 f4	 mov	 DWORD PTR $T40006[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T40006[ebp]
$L33364:

; 948  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetMaxDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundStream::SetMaxDistance
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetMinDistance@12
PUBLIC	?SetMinDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetMinDistance
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetMinDistance@12
DSOUND	SEGMENT
_pStream$ = 8
_flMinDistance$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetMinDistance@12 PROC NEAR		; COMDAT

; 1121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1122 : 
; 1123 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1124 : 
; 1125 :     return DS_OK;
; 1126 : 
; 1127 : #else // DSAPI_DISABLE_3DSOURCE
; 1128 : 
; 1129 :     return ((CDirectSoundStream *)pStream)->SetMinDistance(flMinDistance, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _flMinDistance$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetMinDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetMinDistance

; 1130 : 
; 1131 : #endif // DSAPI_DISABLE_3DSOURCE
; 1132 : 
; 1133 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetMinDistance@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@ ; `string'
;	COMDAT ??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@ DB 'CDirectSoundSt'
	DB	'ream::SetMinDistance', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMinDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40014 = -12
$T40013 = -8
___AutoLock$ = -4
_this$ = 8
_flMinDistance$ = 12
_dwFlags$ = 16
?SetMinDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetMinDistance, COMDAT

; 951  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 952  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetMinDistance");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33377
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 b8 03 00 00	 push	 952			; 000003b8H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40013[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40013[ebp]
  00053	eb 3c		 jmp	 SHORT $L33375
$L33377:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@GOHAEFKO@CDirectSoundStream?3?3SetMinDistan@
  0005a	68 b8 03 00 00	 push	 952			; 000003b8H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 953  :         return CDirectSoundVoice::SetMinDistance(flMinDistance, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _flMinDistance$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetMinDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetMinDistance
  00083	89 45 f4	 mov	 DWORD PTR $T40014[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T40014[ebp]
$L33375:

; 954  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetMinDistance@CDirectSoundStream@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundStream::SetMinDistance
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetMode@12
PUBLIC	?SetMode@CDirectSoundStream@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundStream::SetMode
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetMode@12
DSOUND	SEGMENT
_pStream$ = 8
_dwMode$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetMode@12 PROC NEAR		; COMDAT

; 1136 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1137 : 
; 1138 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1139 : 
; 1140 :     return DS_OK;
; 1141 : 
; 1142 : #else // DSAPI_DISABLE_3DSOURCE
; 1143 : 
; 1144 :     return ((CDirectSoundStream *)pStream)->SetMode(dwMode, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMode$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetMode@CDirectSoundStream@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundStream::SetMode

; 1145 : 
; 1146 : #endif // DSAPI_DISABLE_3DSOURCE
; 1147 : 
; 1148 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetMode@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@ ; `string'
;	COMDAT ??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@ DB 'CDirectSoundStr'
	DB	'eam::SetMode', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMode@CDirectSoundStream@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT
$T40022 = -12
$T40021 = -8
___AutoLock$ = -4
_this$ = 8
_dwMode$ = 12
_dwFlags$ = 16
?SetMode@CDirectSoundStream@DirectSound@@QAGJKK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetMode, COMDAT

; 957  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 958  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetMode");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33388
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 be 03 00 00	 push	 958			; 000003beH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40021[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40021[ebp]
  00053	eb 3c		 jmp	 SHORT $L33386
$L33388:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KPNNMBKF@CDirectSoundStream?3?3SetMode?$AA@
  0005a	68 be 03 00 00	 push	 958			; 000003beH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 959  :         return CDirectSoundVoice::SetMode(dwMode, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMode$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetMode@CDirectSoundVoice@DirectSound@@QAGJKK@Z ; DirectSound::CDirectSoundVoice::SetMode
  00083	89 45 f4	 mov	 DWORD PTR $T40022[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T40022[ebp]
$L33386:

; 960  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetMode@CDirectSoundStream@DirectSound@@QAGJKK@Z ENDP	; DirectSound::CDirectSoundStream::SetMode
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetPosition@20
PUBLIC	?SetPosition@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundStream::SetPosition
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetPosition@20
DSOUND	SEGMENT
_pStream$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSoundStream_SetPosition@20 PROC NEAR		; COMDAT

; 1151 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1152 : 
; 1153 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1154 : 
; 1155 :     return DS_OK;
; 1156 : 
; 1157 : #else // DSAPI_DISABLE_3DSOURCE
; 1158 : 
; 1159 :     return ((CDirectSoundStream *)pStream)->SetPosition(x, y, z, dwFlags);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?SetPosition@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundStream::SetPosition

; 1160 : 
; 1161 : #endif // DSAPI_DISABLE_3DSOURCE
; 1162 : 
; 1163 : }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
_IDirectSoundStream_SetPosition@20 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@ ; `string'
;	COMDAT ??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@ DB 'CDirectSoun'
	DB	'dStream::SetPosition', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPosition@CDirectSoundStream@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T40030 = -12
$T40029 = -8
___AutoLock$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
?SetPosition@CDirectSoundStream@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetPosition, COMDAT

; 963  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 964  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetPosition");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33401
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 c4 03 00 00	 push	 964			; 000003c4H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40029[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40029[ebp]
  00053	eb 44		 jmp	 SHORT $L33399
$L33401:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@OCJKODME@CDirectSoundStream?3?3SetPosition?$AA@
  0005a	68 c4 03 00 00	 push	 964			; 000003c4H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 965  :         return CDirectSoundVoice::SetPosition(x, y, z, dwFlags);

  0006f	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?SetPosition@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetPosition
  0008b	89 45 f4	 mov	 DWORD PTR $T40030[ebp], eax
  0008e	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00091	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00096	8b 45 f4	 mov	 eax, DWORD PTR $T40030[ebp]
$L33399:

; 966  :     }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 14 00	 ret	 20			; 00000014H
?SetPosition@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundStream::SetPosition
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetVelocity@20
PUBLIC	?SetVelocity@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundStream::SetVelocity
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetVelocity@20
DSOUND	SEGMENT
_pStream$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
_IDirectSoundStream_SetVelocity@20 PROC NEAR		; COMDAT

; 1166 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1167 : 
; 1168 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1169 : 
; 1170 :     return DS_OK;
; 1171 : 
; 1172 : #else // DSAPI_DISABLE_3DSOURCE
; 1173 : 
; 1174 :     return ((CDirectSoundStream *)pStream)->SetVelocity(x, y, z, dwFlags);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?SetVelocity@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundStream::SetVelocity

; 1175 : 
; 1176 : #endif // DSAPI_DISABLE_3DSOURCE
; 1177 : 
; 1178 : }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
_IDirectSoundStream_SetVelocity@20 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@ ; `string'
;	COMDAT ??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@ DB 'CDirectSoun'
	DB	'dStream::SetVelocity', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVelocity@CDirectSoundStream@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T40038 = -12
$T40037 = -8
___AutoLock$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwFlags$ = 24
?SetVelocity@CDirectSoundStream@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetVelocity, COMDAT

; 969  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 970  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetVelocity");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33414
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 ca 03 00 00	 push	 970			; 000003caH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40037[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40037[ebp]
  00053	eb 44		 jmp	 SHORT $L33412
$L33414:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@IALPAKCJ@CDirectSoundStream?3?3SetVelocity?$AA@
  0005a	68 ca 03 00 00	 push	 970			; 000003caH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 971  :         return CDirectSoundVoice::SetVelocity(x, y, z, dwFlags);

  0006f	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?SetVelocity@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ; DirectSound::CDirectSoundVoice::SetVelocity
  0008b	89 45 f4	 mov	 DWORD PTR $T40038[ebp], eax
  0008e	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00091	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00096	8b 45 f4	 mov	 eax, DWORD PTR $T40038[ebp]
$L33412:

; 972  :     }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@CDirectSoundStream@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundStream::SetVelocity
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetDistanceFactor@12
PUBLIC	?SetDistanceFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetDistanceFactor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetDistanceFactor@12
DSOUND	SEGMENT
_pStream$ = 8
_flDistanceFactor$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetDistanceFactor@12 PROC NEAR	; COMDAT

; 1181 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1182 : 
; 1183 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1184 : 
; 1185 :     return DS_OK;
; 1186 : 
; 1187 : #else // DSAPI_DISABLE_3DSOURCE
; 1188 : 
; 1189 :     return ((CDirectSoundStream *)pStream)->SetDistanceFactor(flDistanceFactor, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _flDistanceFactor$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetDistanceFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetDistanceFactor

; 1190 : 
; 1191 : #endif // DSAPI_DISABLE_3DSOURCE
; 1192 : 
; 1193 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetDistanceFactor@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@ ; `string'
;	COMDAT ??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@ DB 'CDirectSoundSt'
	DB	'ream::SetDistanceFactor', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40046 = -12
$T40045 = -8
___AutoLock$ = -4
_this$ = 8
_flDistanceFactor$ = 12
_dwFlags$ = 16
?SetDistanceFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetDistanceFactor, COMDAT

; 975  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 976  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetDistanceFactor");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33425
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 d0 03 00 00	 push	 976			; 000003d0H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40045[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40045[ebp]
  00053	eb 3c		 jmp	 SHORT $L33423
$L33425:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@DPOABEBK@CDirectSoundStream?3?3SetDistanceF@
  0005a	68 d0 03 00 00	 push	 976			; 000003d0H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 977  :         return CDirectSoundVoice::SetDistanceFactor(flDistanceFactor, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _flDistanceFactor$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetDistanceFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetDistanceFactor
  00083	89 45 f4	 mov	 DWORD PTR $T40046[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T40046[ebp]
$L33423:

; 978  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetDistanceFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundStream::SetDistanceFactor
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetDopplerFactor@12
PUBLIC	?SetDopplerFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetDopplerFactor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetDopplerFactor@12
DSOUND	SEGMENT
_pStream$ = 8
_flDopplerFactor$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetDopplerFactor@12 PROC NEAR	; COMDAT

; 1196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1197 : 
; 1198 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1199 : 
; 1200 :     return DS_OK;
; 1201 : 
; 1202 : #else // DSAPI_DISABLE_3DSOURCE
; 1203 : 
; 1204 :     return ((CDirectSoundStream *)pStream)->SetDopplerFactor(flDopplerFactor, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _flDopplerFactor$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetDopplerFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetDopplerFactor

; 1205 : 
; 1206 : #endif // DSAPI_DISABLE_3DSOURCE
; 1207 : 
; 1208 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetDopplerFactor@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@ ; `string'
;	COMDAT ??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@ DB 'CDirectSoundSt'
	DB	'ream::SetDopplerFactor', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40054 = -12
$T40053 = -8
___AutoLock$ = -4
_this$ = 8
_flDopplerFactor$ = 12
_dwFlags$ = 16
?SetDopplerFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetDopplerFactor, COMDAT

; 981  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 982  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetDopplerFactor");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33436
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 d6 03 00 00	 push	 982			; 000003d6H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40053[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40053[ebp]
  00053	eb 3c		 jmp	 SHORT $L33434
$L33436:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@PHOMIHIF@CDirectSoundStream?3?3SetDopplerFa@
  0005a	68 d6 03 00 00	 push	 982			; 000003d6H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 983  :         return CDirectSoundVoice::SetDopplerFactor(flDopplerFactor, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _flDopplerFactor$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetDopplerFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetDopplerFactor
  00083	89 45 f4	 mov	 DWORD PTR $T40054[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T40054[ebp]
$L33434:

; 984  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetDopplerFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundStream::SetDopplerFactor
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetRolloffFactor@12
PUBLIC	?SetRolloffFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetRolloffFactor
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetRolloffFactor@12
DSOUND	SEGMENT
_pStream$ = 8
_flRolloffFactor$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetRolloffFactor@12 PROC NEAR	; COMDAT

; 1211 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1212 : 
; 1213 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1214 : 
; 1215 :     return DS_OK;
; 1216 : 
; 1217 : #else // DSAPI_DISABLE_3DSOURCE
; 1218 : 
; 1219 :     return ((CDirectSoundStream *)pStream)->SetRolloffFactor(flRolloffFactor, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _flRolloffFactor$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetRolloffFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundStream::SetRolloffFactor

; 1220 : 
; 1221 : #endif // DSAPI_DISABLE_3DSOURCE
; 1222 : 
; 1223 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetRolloffFactor@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@ ; `string'
;	COMDAT ??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@ DB 'CDirectSoundSt'
	DB	'ream::SetRolloffFactor', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40062 = -12
$T40061 = -8
___AutoLock$ = -4
_this$ = 8
_flRolloffFactor$ = 12
_dwFlags$ = 16
?SetRolloffFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetRolloffFactor, COMDAT

; 987  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 988  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetRolloffFactor");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33447
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 dc 03 00 00	 push	 988			; 000003dcH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40061[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40061[ebp]
  00053	eb 3c		 jmp	 SHORT $L33445
$L33447:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OOCJLODJ@CDirectSoundStream?3?3SetRolloffFa@
  0005a	68 dc 03 00 00	 push	 988			; 000003dcH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 989  :         return CDirectSoundVoice::SetRolloffFactor(flRolloffFactor, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _flRolloffFactor$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetRolloffFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ; DirectSound::CDirectSoundVoice::SetRolloffFactor
  00083	89 45 f4	 mov	 DWORD PTR $T40062[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T40062[ebp]
$L33445:

; 990  :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetRolloffFactor@CDirectSoundStream@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundStream::SetRolloffFactor
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetRolloffCurve@16
PUBLIC	?SetRolloffCurve@CDirectSoundStream@DirectSound@@QAGJPBMKK@Z ; DirectSound::CDirectSoundStream::SetRolloffCurve
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetRolloffCurve@16
DSOUND	SEGMENT
_pStream$ = 8
_pflPoints$ = 12
_dwPointCount$ = 16
_dwFlags$ = 20
_IDirectSoundStream_SetRolloffCurve@16 PROC NEAR	; COMDAT

; 1226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1227 : 
; 1228 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1229 : 
; 1230 :     return DS_OK;
; 1231 : 
; 1232 : #else // DSAPI_DISABLE_3DSOURCE
; 1233 : 
; 1234 :     return ((CDirectSoundStream *)pStream)->SetRolloffCurve(pflPoints, dwPointCount, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _dwPointCount$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _pflPoints$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?SetRolloffCurve@CDirectSoundStream@DirectSound@@QAGJPBMKK@Z ; DirectSound::CDirectSoundStream::SetRolloffCurve

; 1235 : 
; 1236 : #endif // DSAPI_DISABLE_3DSOURCE
; 1237 : 
; 1238 : }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundStream_SetRolloffCurve@16 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@ ; `string'
;	COMDAT ??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@ DB 'CDirectSoundSt'
	DB	'ream::SetRolloffCurve', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetRolloffCurve@CDirectSoundStream@DirectSound@@QAGJPBMKK@Z
DSOUND	SEGMENT
$T40070 = -12
$T40069 = -8
___AutoLock$ = -4
_this$ = 8
_pflPoints$ = 12
_dwPointCount$ = 16
_dwApply$ = 20
?SetRolloffCurve@CDirectSoundStream@DirectSound@@QAGJPBMKK@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetRolloffCurve, COMDAT

; 993  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 994  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetRolloffCurve");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33459
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 e2 03 00 00	 push	 994			; 000003e2H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40069[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40069[ebp]
  00053	eb 40		 jmp	 SHORT $L33457
$L33459:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@ENLHKJPN@CDirectSoundStream?3?3SetRolloffCu@
  0005a	68 e2 03 00 00	 push	 994			; 000003e2H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 995  :         return CDirectSoundVoice::SetRolloffCurve(pflPoints, dwPointCount, dwApply);

  0006f	8b 45 14	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 10	 mov	 ecx, DWORD PTR _dwPointCount$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 0c	 mov	 edx, DWORD PTR _pflPoints$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?SetRolloffCurve@CDirectSoundVoice@DirectSound@@QAGJPBMKK@Z ; DirectSound::CDirectSoundVoice::SetRolloffCurve
  00087	89 45 f4	 mov	 DWORD PTR $T40070[ebp], eax
  0008a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00092	8b 45 f4	 mov	 eax, DWORD PTR $T40070[ebp]
$L33457:

; 996  :     }

  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 10 00	 ret	 16			; 00000010H
?SetRolloffCurve@CDirectSoundStream@DirectSound@@QAGJPBMKK@Z ENDP ; DirectSound::CDirectSoundStream::SetRolloffCurve
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_SetI3DL2Source@12
PUBLIC	?SetI3DL2Source@CDirectSoundStream@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; DirectSound::CDirectSoundStream::SetI3DL2Source
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_SetI3DL2Source@12
DSOUND	SEGMENT
_pStream$ = 8
_pds3db$ = 12
_dwFlags$ = 16
_IDirectSoundStream_SetI3DL2Source@12 PROC NEAR		; COMDAT

; 1241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1242 : 
; 1243 : #ifdef DSAPI_DISABLE_3DSOURCE
; 1244 : 
; 1245 :     return DS_OK;
; 1246 : 
; 1247 : #else // DSAPI_DISABLE_3DSOURCE
; 1248 : 
; 1249 :     return ((CDirectSoundStream *)pStream)->SetI3DL2Source(pds3db, dwFlags);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetI3DL2Source@CDirectSoundStream@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; DirectSound::CDirectSoundStream::SetI3DL2Source

; 1250 : 
; 1251 : #endif // DSAPI_DISABLE_3DSOURCE
; 1252 : 
; 1253 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
_IDirectSoundStream_SetI3DL2Source@12 ENDP
DSOUND	ENDS
PUBLIC	??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@ ; `string'
;	COMDAT ??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@ DB 'CDirectSoundSt'
	DB	'ream::SetI3DL2Source', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetI3DL2Source@CDirectSoundStream@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z
DSOUND	SEGMENT
$T40078 = -12
$T40077 = -8
___AutoLock$ = -4
_this$ = 8
_pds3db$ = 12
_dwFlags$ = 16
?SetI3DL2Source@CDirectSoundStream@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z PROC NEAR ; DirectSound::CDirectSoundStream::SetI3DL2Source, COMDAT

; 999  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1000 :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::SetI3DL2Source");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33470
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40077[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40077[ebp]
  00053	eb 3c		 jmp	 SHORT $L33468
$L33470:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@DFIPDHEB@CDirectSoundStream?3?3SetI3DL2Sour@
  0005a	68 e8 03 00 00	 push	 1000			; 000003e8H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 1001 :         return CDirectSoundVoice::SetI3DL2Source(pds3db, dwFlags);

  0006f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ?SetI3DL2Source@CDirectSoundVoice@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; DirectSound::CDirectSoundVoice::SetI3DL2Source
  00083	89 45 f4	 mov	 DWORD PTR $T40078[ebp], eax
  00086	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f4	 mov	 eax, DWORD PTR $T40078[ebp]
$L33468:

; 1002 :     }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Source@CDirectSoundStream@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ENDP ; DirectSound::CDirectSoundStream::SetI3DL2Source
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_Pause@8
PUBLIC	?Pause@CDirectSoundStream@DirectSound@@QAGJK@Z	; DirectSound::CDirectSoundStream::Pause
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _IDirectSoundStream_Pause@8
DSOUND	SEGMENT
_pStream$ = 8
_dwPause$ = 12
_IDirectSoundStream_Pause@8 PROC NEAR			; COMDAT

; 1256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1257 :     return ((CDirectSoundStream *)pStream)->Pause(dwPause);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwPause$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?Pause@CDirectSoundStream@DirectSound@@QAGJK@Z ; DirectSound::CDirectSoundStream::Pause

; 1258 : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
_IDirectSoundStream_Pause@8 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_PauseEx@16
PUBLIC	?PauseEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundStream::PauseEx
; Function compile flags: /Odt
;	COMDAT _IDirectSoundStream_PauseEx@16
DSOUND	SEGMENT
_pStream$ = 8
_rtTimestamp$ = 12
_dwPause$ = 20
_IDirectSoundStream_PauseEx@16 PROC NEAR		; COMDAT

; 1261 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1262 :     return ((CDirectSoundStream *)pStream)->PauseEx(rtTimestamp, dwPause);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwPause$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimestamp$[ebp+4]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _rtTimestamp$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?PauseEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundStream::PauseEx

; 1263 : }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundStream_PauseEx@16 ENDP
DSOUND	ENDS
PUBLIC	_IDirectSoundStream_FlushEx@16
PUBLIC	?FlushEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundStream::FlushEx
; Function compile flags: /Odt
;	COMDAT _IDirectSoundStream_FlushEx@16
DSOUND	SEGMENT
_pStream$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
_IDirectSoundStream_FlushEx@16 PROC NEAR		; COMDAT

; 1266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1267 : 
; 1268 : #ifdef DSAPI_DISABLE_NOTEOFF
; 1269 : 
; 1270 :     dwFlags = 0;
; 1271 : 
; 1272 : #endif // DSAPI_DISABLE_NOTEOFF
; 1273 : 
; 1274 :     return ((CDirectSoundStream *)pStream)->FlushEx(rtTimeStamp, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?FlushEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z ; DirectSound::CDirectSoundStream::FlushEx

; 1275 : }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
_IDirectSoundStream_FlushEx@16 ENDP
DSOUND	ENDS
PUBLIC	?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z ; DirectSoundCreateInternal
PUBLIC	?__AddRef@DirectSound@@YGPAVCDirectSound@1@PAV21@@Z ; DirectSound::__AddRef
PUBLIC	??_C@_0N@MEHKCAOG@CDirectSound?$AA@		; `string'
PUBLIC	??0CDirectSound@DirectSound@@QAE@XZ		; DirectSound::CDirectSound::CDirectSound
PUBLIC	?Initialize@CDirectSound@DirectSound@@QAGJXZ	; DirectSound::CDirectSound::Initialize
;	COMDAT ??_C@_0N@MEHKCAOG@CDirectSound?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@MEHKCAOG@CDirectSound?$AA@ DB 'CDirectSound', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z
DSOUND	SEGMENT
tv75 = -16
$T40091 = -12
_hr$ = -8
_pDirectSound$ = -4
_ppDirectSound$ = 8
?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z PROC NEAR ; DirectSoundCreateInternal, COMDAT

; 1304 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1305 :     CDirectSound *          pDirectSound    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0

; 1306 :     HRESULT                 hr              = DS_OK;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1307 :     
; 1308 :     DPF_ENTER();
; 1309 : 
; 1310 :     //
; 1311 :     // Check to see if the DirectSound object already exists
; 1312 :     //
; 1313 : 
; 1314 :     if(CDirectSound::m_pDirectSound)

  00014	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  0001b	74 15		 je	 SHORT $L36157

; 1315 :     {
; 1316 :         *ppDirectSound = ADDREF(CDirectSound::m_pDirectSound);

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A ; DirectSound::CDirectSound::m_pDirectSound
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCDirectSound@1@PAV21@@Z ; DirectSound::__AddRef
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _ppDirectSound$[ebp]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax

; 1317 :     }
; 1318 :     else

  0002d	e9 8d 00 00 00	 jmp	 $L36162
$L36157:

; 1319 :     {
; 1320 :         hr = HRFROMP(pDirectSound = NEW(CDirectSound));

  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@MEHKCAOG@CDirectSound?$AA@
  00037	68 28 05 00 00	 push	 1320			; 00000528H
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00041	6a 30		 push	 48			; 00000030H
  00043	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	89 45 f4	 mov	 DWORD PTR $T40091[ebp], eax
  0004e	83 7d f4 00	 cmp	 DWORD PTR $T40091[ebp], 0
  00052	74 0d		 je	 SHORT $L40092
  00054	8b 4d f4	 mov	 ecx, DWORD PTR $T40091[ebp]
  00057	e8 00 00 00 00	 call	 ??0CDirectSound@DirectSound@@QAE@XZ ; DirectSound::CDirectSound::CDirectSound
  0005c	89 45 f0	 mov	 DWORD PTR tv75[ebp], eax
  0005f	eb 07		 jmp	 SHORT $L40093
$L40092:
  00061	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$L40093:
  00068	8b 55 f0	 mov	 edx, DWORD PTR tv75[ebp]
  0006b	89 55 fc	 mov	 DWORD PTR _pDirectSound$[ebp], edx
  0006e	33 c0		 xor	 eax, eax
  00070	83 7d fc 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00074	0f 95 c0	 setne	 al
  00077	48		 dec	 eax
  00078	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  0007d	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1321 : 
; 1322 :         if(SUCCEEDED(hr))

  00080	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00084	7c 0c		 jl	 SHORT $L36169

; 1323 :         {
; 1324 :             hr = pDirectSound->Initialize();

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _pDirectSound$[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?Initialize@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::Initialize
  0008f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36169:

; 1325 :         }
; 1326 : 
; 1327 :         if(SUCCEEDED(hr))

  00092	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00096	7c 0a		 jl	 SHORT $L36171

; 1328 :         {
; 1329 :             *ppDirectSound = pDirectSound;

  00098	8b 55 08	 mov	 edx, DWORD PTR _ppDirectSound$[ebp]
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0009e	89 02		 mov	 DWORD PTR [edx], eax

; 1330 :         }
; 1331 :         else

  000a0	eb 1d		 jmp	 SHORT $L36162
$L36171:

; 1332 :         {
; 1333 :             RELEASE(pDirectSound);

  000a2	83 7d fc 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  000a6	74 17		 je	 SHORT $L36162
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _pDirectSound$[ebp]
  000ab	83 c1 08	 add	 ecx, 8
  000ae	8b 55 fc	 mov	 edx, DWORD PTR _pDirectSound$[ebp]
  000b1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b4	51		 push	 ecx
  000b5	ff 50 08	 call	 DWORD PTR [eax+8]
  000b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0
$L36162:

; 1334 :         }
; 1335 :     }
; 1336 : 
; 1337 :     DPF_LEAVE_HRESULT(hr);
; 1338 : 
; 1339 :     return hr;

  000bf	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1340 : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 04 00	 ret	 4
?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z ENDP ; DirectSoundCreateInternal
DSOUND	ENDS
EXTRN	?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemAlloc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
DSOUND	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  :     return DirectSound::CMemoryManager::TrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc

; 234  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
DSOUND	ENDS
PUBLIC	_IsEqualGUID@8
PUBLIC	_DirectSoundCreate@12
PUBLIC	??_C@_0BC@GKIGDBEH@DirectSoundCreate?$AA@	; `string'
PUBLIC	??_C@_0DK@JFIBKPKF@NULL?5or?5GUID_NULL?5is?5the?5only?5su@ ; `string'
PUBLIC	??_C@_0CE@HEGINMCG@Failed?5to?5supply?5an?5LPDIRECTSOUN@ ; `string'
PUBLIC	??_C@_0BN@KMLCCGBC@Aggregation?5is?5not?5supported?$AA@ ; `string'
EXTRN	_GUID_NULL:BYTE
;	COMDAT ??_C@_0BC@GKIGDBEH@DirectSoundCreate?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BC@GKIGDBEH@DirectSoundCreate?$AA@ DB 'DirectSoundCreate', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@JFIBKPKF@NULL?5or?5GUID_NULL?5is?5the?5only?5su@
DSOUND_RD	SEGMENT
??_C@_0DK@JFIBKPKF@NULL?5or?5GUID_NULL?5is?5the?5only?5su@ DB 'NULL or GU'
	DB	'ID_NULL is the only supported device identifier', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@HEGINMCG@Failed?5to?5supply?5an?5LPDIRECTSOUN@
DSOUND_RD	SEGMENT
??_C@_0CE@HEGINMCG@Failed?5to?5supply?5an?5LPDIRECTSOUN@ DB 'Failed to su'
	DB	'pply an LPDIRECTSOUND *', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@KMLCCGBC@Aggregation?5is?5not?5supported?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@KMLCCGBC@Aggregation?5is?5not?5supported?$AA@ DB 'Aggregation i'
	DB	's not supported', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DirectSoundCreate@12
DSOUND	SEGMENT
tv132 = -20
$T40102 = -16
___AutoLock$ = -12
_hr$ = -8
_pDirectSound$ = -4
_pguidDeviceId$ = 8
_ppDirectSound$ = 12
_pControllingUnknown$ = 16
_DirectSoundCreate@12 PROC NEAR				; COMDAT

; 1371 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1372 :     CDirectSound *  pDirectSound;
; 1373 :     HRESULT                         hr;
; 1374 :     
; 1375 :     DPF_ENTER();
; 1376 :     ENTER_EXTERNAL_FUNCTION();

  00006	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1377 : 
; 1378 : #ifdef VALIDATE_PARAMETERS
; 1379 : 
; 1380 :     if(!IS_NULL_GUID(*pguidDeviceId))

  0000e	83 7d 08 00	 cmp	 DWORD PTR _pguidDeviceId$[ebp], 0
  00012	74 3f		 je	 SHORT $L36182
  00014	68 00 00 00 00	 push	 OFFSET FLAT:_GUID_NULL
  00019	8b 45 08	 mov	 eax, DWORD PTR _pguidDeviceId$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _IsEqualGUID@8
  00022	85 c0		 test	 eax, eax
  00024	75 2d		 jne	 SHORT $L36182

; 1381 :     {
; 1382 :         DPF_ERROR("NULL or GUID_NULL is the only supported device identifier");

  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@GKIGDBEH@DirectSoundCreate?$AA@
  00030	68 66 05 00 00	 push	 1382			; 00000566H
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0003a	6a 01		 push	 1
  0003c	6a 09		 push	 9
  0003e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00043	83 c4 18	 add	 esp, 24			; 00000018H
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@JFIBKPKF@NULL?5or?5GUID_NULL?5is?5the?5only?5su@
  0004b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00050	83 c4 04	 add	 esp, 4
$L36182:

; 1383 :     }
; 1384 : 
; 1385 :     if(!ppDirectSound)

  00053	83 7d 0c 00	 cmp	 DWORD PTR _ppDirectSound$[ebp], 0
  00057	75 2d		 jne	 SHORT $L36185

; 1386 :     {
; 1387 :         DPF_ERROR("Failed to supply an LPDIRECTSOUND *");

  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@GKIGDBEH@DirectSoundCreate?$AA@
  00063	68 6b 05 00 00	 push	 1387			; 0000056bH
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006d	6a 01		 push	 1
  0006f	6a 09		 push	 9
  00071	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00076	83 c4 18	 add	 esp, 24			; 00000018H
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HEGINMCG@Failed?5to?5supply?5an?5LPDIRECTSOUN@
  0007e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00083	83 c4 04	 add	 esp, 4
$L36185:

; 1388 :     }
; 1389 :     
; 1390 :     if(pControllingUnknown)

  00086	83 7d 10 00	 cmp	 DWORD PTR _pControllingUnknown$[ebp], 0
  0008a	74 2d		 je	 SHORT $L36187

; 1391 :     {
; 1392 :         DPF_ERROR("Aggregation is not supported");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@GKIGDBEH@DirectSoundCreate?$AA@
  00096	68 70 05 00 00	 push	 1392			; 00000570H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a0	6a 01		 push	 1
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@KMLCCGBC@Aggregation?5is?5not?5supported?$AA@
  000b1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b6	83 c4 04	 add	 esp, 4
$L36187:

; 1393 :     }
; 1394 : 
; 1395 : #endif // VALIDATE_PARAMETERS
; 1396 : 
; 1397 :     hr = DirectSoundCreateInternal(&pDirectSound);

  000b9	8d 4d fc	 lea	 ecx, DWORD PTR _pDirectSound$[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z ; DirectSoundCreateInternal
  000c2	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1398 : 
; 1399 :     if(SUCCEEDED(hr))

  000c5	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c9	7c 20		 jl	 SHORT $L36190

; 1400 :     {
; 1401 :         *ppDirectSound = pDirectSound;

  000cb	83 7d fc 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  000cf	74 0b		 je	 SHORT $L40100
  000d1	8b 55 fc	 mov	 edx, DWORD PTR _pDirectSound$[ebp]
  000d4	83 c2 10	 add	 edx, 16			; 00000010H
  000d7	89 55 ec	 mov	 DWORD PTR tv132[ebp], edx
  000da	eb 07		 jmp	 SHORT $L40101
$L40100:
  000dc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$L40101:
  000e3	8b 45 0c	 mov	 eax, DWORD PTR _ppDirectSound$[ebp]
  000e6	8b 4d ec	 mov	 ecx, DWORD PTR tv132[ebp]
  000e9	89 08		 mov	 DWORD PTR [eax], ecx
$L36190:

; 1402 :     }
; 1403 : 
; 1404 :     DPF_LEAVE_HRESULT(hr);
; 1405 : 
; 1406 :     return hr;

  000eb	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  000ee	89 55 f0	 mov	 DWORD PTR $T40102[ebp], edx
  000f1	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000f4	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000f9	8b 45 f0	 mov	 eax, DWORD PTR $T40102[ebp]

; 1407 : }

  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 0c 00	 ret	 12			; 0000000cH
_DirectSoundCreate@12 ENDP
DSOUND	ENDS
EXTRN	_memcmp:NEAR
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\guiddef.h
;	COMDAT _IsEqualGUID@8
DSOUND	SEGMENT
_rguid1$ = 8
_rguid2$ = 12
_IsEqualGUID@8 PROC NEAR				; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00003	6a 10		 push	 16			; 00000010H
  00005	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _memcmp
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	f7 d8		 neg	 eax
  00017	1b c0		 sbb	 eax, eax
  00019	40		 inc	 eax

; 157  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
_IsEqualGUID@8 ENDP
DSOUND	ENDS
PUBLIC	_DirectSoundCreateBuffer@8
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _DirectSoundCreateBuffer@8
DSOUND	SEGMENT
$T40109 = -16
___AutoLock$ = -12
_hr$ = -8
_pDirectSound$ = -4
_pdsbd$ = 8
_ppBuffer$ = 12
_DirectSoundCreateBuffer@8 PROC NEAR			; COMDAT

; 1437 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1438 :     CDirectSound *  pDirectSound    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0

; 1439 :     HRESULT                         hr;
; 1440 :     
; 1441 :     DPF_ENTER();
; 1442 :     ENTER_EXTERNAL_FUNCTION();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1443 : 
; 1444 :     hr = DirectSoundCreateInternal(&pDirectSound);

  00015	8d 45 fc	 lea	 eax, DWORD PTR _pDirectSound$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z ; DirectSoundCreateInternal
  0001e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1445 : 
; 1446 :     if(SUCCEEDED(hr))

  00021	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00025	7c 16		 jl	 SHORT $L36200

; 1447 :     {
; 1448 :         hr = pDirectSound->CreateSoundBuffer(pdsbd, ppBuffer, NULL);

  00027	6a 00		 push	 0
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBuffer$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 08	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00030	52		 push	 edx
  00031	8b 45 fc	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ; DirectSound::CDirectSound::CreateSoundBuffer
  0003a	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36200:

; 1449 :     }
; 1450 : 
; 1451 :     RELEASE(pDirectSound);

  0003d	83 7d fc 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00041	74 17		 je	 SHORT $L36201
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _pDirectSound$[ebp]
  00046	83 c1 08	 add	 ecx, 8
  00049	8b 55 fc	 mov	 edx, DWORD PTR _pDirectSound$[ebp]
  0004c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004f	51		 push	 ecx
  00050	ff 50 08	 call	 DWORD PTR [eax+8]
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0
$L36201:

; 1452 : 
; 1453 :     DPF_LEAVE_HRESULT(hr);
; 1454 : 
; 1455 :     return hr;

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _hr$[ebp]
  0005d	89 4d f0	 mov	 DWORD PTR $T40109[ebp], ecx
  00060	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00063	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00068	8b 45 f0	 mov	 eax, DWORD PTR $T40109[ebp]

; 1456 : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
_DirectSoundCreateBuffer@8 ENDP
DSOUND	ENDS
PUBLIC	_DirectSoundCreateStream@8
; Function compile flags: /Odt
;	COMDAT _DirectSoundCreateStream@8
DSOUND	SEGMENT
$T40113 = -16
___AutoLock$ = -12
_hr$ = -8
_pDirectSound$ = -4
_pdssd$ = 8
_ppStream$ = 12
_DirectSoundCreateStream@8 PROC NEAR			; COMDAT

; 1488 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1489 :     CDirectSound *  pDirectSound    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0

; 1490 :     HRESULT                         hr;
; 1491 :     
; 1492 :     DPF_ENTER();
; 1493 :     ENTER_EXTERNAL_FUNCTION();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1494 : 
; 1495 :     hr = DirectSoundCreateInternal(&pDirectSound);

  00015	8d 45 fc	 lea	 eax, DWORD PTR _pDirectSound$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?DirectSoundCreateInternal@@YGJPAPAVCDirectSound@DirectSound@@@Z ; DirectSoundCreateInternal
  0001e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1496 : 
; 1497 :     if(SUCCEEDED(hr))

  00021	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00025	7c 16		 jl	 SHORT $L36211

; 1498 :     {
; 1499 :         hr = pDirectSound->CreateSoundStream(pdssd, ppStream, NULL);

  00027	6a 00		 push	 0
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _ppStream$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 08	 mov	 edx, DWORD PTR _pdssd$[ebp]
  00030	52		 push	 edx
  00031	8b 45 fc	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?CreateSoundStream@CDirectSound@DirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z ; DirectSound::CDirectSound::CreateSoundStream
  0003a	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36211:

; 1500 :     }
; 1501 : 
; 1502 :     RELEASE(pDirectSound);

  0003d	83 7d fc 00	 cmp	 DWORD PTR _pDirectSound$[ebp], 0
  00041	74 17		 je	 SHORT $L36212
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _pDirectSound$[ebp]
  00046	83 c1 08	 add	 ecx, 8
  00049	8b 55 fc	 mov	 edx, DWORD PTR _pDirectSound$[ebp]
  0004c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004f	51		 push	 ecx
  00050	ff 50 08	 call	 DWORD PTR [eax+8]
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pDirectSound$[ebp], 0
$L36212:

; 1503 : 
; 1504 :     DPF_LEAVE_HRESULT(hr);
; 1505 : 
; 1506 :     return hr;

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _hr$[ebp]
  0005d	89 4d f0	 mov	 DWORD PTR $T40113[ebp], ecx
  00060	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00063	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00068	8b 45 f0	 mov	 eax, DWORD PTR $T40113[ebp]

; 1507 : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
_DirectSoundCreateStream@8 ENDP
DSOUND	ENDS
PUBLIC	_DirectSoundDoWork@0
PUBLIC	??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@ ; `string'
PUBLIC	??_C@_0BC@LBFJNDGF@DirectSoundDoWork?$AA@	; `string'
PUBLIC	??_C@_0GI@CGAOMMDK@A?5breakpoint?5occurred?5at?5raised?5@ ; `string'
PUBLIC	?DoWork@CDirectSound@DirectSound@@QAGXXZ	; DirectSound::CDirectSound::DoWork
EXTRN	_g_fDirectSoundDebugBreak:DWORD
EXTRN	?Break@CDebug@DirectSound@@SAXXZ:NEAR		; DirectSound::CDebug::Break
;	COMDAT ??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
DSOUND_RD	SEGMENT
??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@ DB 'Ke'
	DB	'GetCurrentIrql() == PASSIVE_LEVEL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@LBFJNDGF@DirectSoundDoWork?$AA@
DSOUND_RD	SEGMENT
??_C@_0BC@LBFJNDGF@DirectSoundDoWork?$AA@ DB 'DirectSoundDoWork', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0GI@CGAOMMDK@A?5breakpoint?5occurred?5at?5raised?5@
DSOUND_RD	SEGMENT
??_C@_0GI@CGAOMMDK@A?5breakpoint?5occurred?5at?5raised?5@ DB 'A breakpoin'
	DB	't occurred at raised IRQL.  If you''re running the Visual C d'
	DB	'ebugger, you probably missed it.', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DirectSoundDoWork@0
DSOUND	SEGMENT
___AutoLock$ = -4
_DirectSoundDoWork@0 PROC NEAR				; COMDAT

; 1535 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1536 :     DPF_ENTER();
; 1537 :     ENTER_EXTERNAL_FUNCTION();

  00004	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00007	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1538 : 
; 1539 :     ASSERT(KeGetCurrentIrql() == PASSIVE_LEVEL);

  0000c	68 03 06 00 00	 push	 1539			; 00000603H
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  0001b	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00020	0f b6 c0	 movzx	 eax, al
  00023	f7 d8		 neg	 eax
  00025	1b c0		 sbb	 eax, eax
  00027	f7 d8		 neg	 eax
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 1540 : 
; 1541 : #ifdef DEBUG
; 1542 : 
; 1543 :     //
; 1544 :     // Check for a deferred breakpoint
; 1545 :     //
; 1546 : 
; 1547 :     if(INTERLOCKED_EXCHANGE(g_fDirectSoundDebugBreak, FALSE))

  00032	33 d2		 xor	 edx, edx
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:_g_fDirectSoundDebugBreak
  00039	e8 00 00 00 00	 call	 @InterlockedExchange@8
  0003e	85 c0		 test	 eax, eax
  00040	74 32		 je	 SHORT $L36221

; 1548 :     {
; 1549 :         DPF_ABSOLUTE("A breakpoint occurred at raised IRQL.  If you're running the Visual C debugger, you probably missed it.");

  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@LBFJNDGF@DirectSoundDoWork?$AA@
  0004c	68 0d 06 00 00	 push	 1549			; 0000060dH
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00056	6a 00		 push	 0
  00058	6a 09		 push	 9
  0005a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GI@CGAOMMDK@A?5breakpoint?5occurred?5at?5raised?5@
  00067	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0006c	83 c4 04	 add	 esp, 4

; 1550 :         BREAK();

  0006f	e8 00 00 00 00	 call	 ?Break@CDebug@DirectSound@@SAXXZ ; DirectSound::CDebug::Break
$L36221:

; 1551 :     }
; 1552 : 
; 1553 : #endif // DEBUG
; 1554 : 
; 1555 :     //
; 1556 :     // Workie, workie
; 1557 :     //
; 1558 : 
; 1559 :     if(CDirectSound::m_pDirectSound)

  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  0007b	74 0c		 je	 SHORT $L36224

; 1560 :     {
; 1561 :         CDirectSound::m_pDirectSound->DoWork();

  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A ; DirectSound::CDirectSound::m_pDirectSound
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 ?DoWork@CDirectSound@DirectSound@@QAGXXZ ; DirectSound::CDirectSound::DoWork
$L36224:

; 1562 :     }
; 1563 : 
; 1564 :     DPF_LEAVE_VOID();
; 1565 : }

  00089	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0008c	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
_DirectSoundDoWork@0 ENDP
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT @InterlockedExchange@8
DSOUND	SEGMENT
_Value$ = -8
_Target$ = -4
@InterlockedExchange@8 PROC NEAR			; COMDAT
; _Target$ = ecx
; _Value$ = edx

; 1299 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 55 f8	 mov	 DWORD PTR _Value$[ebp], edx
  00009	89 4d fc	 mov	 DWORD PTR _Target$[ebp], ecx

; 1300 :     __asm {
; 1301 :         mov     edx, Value

  0000c	8b 55 f8	 mov	 edx, DWORD PTR _Value$[ebp]

; 1302 :         mov     ecx, Target

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _Target$[ebp]

; 1303 :         mov     eax, [ecx]

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
$ie$10621:

; 1304 : ie:     cmpxchg [ecx], edx

  00014	0f b1 11	 cmpxchg DWORD PTR [ecx], edx

; 1305 :         jnz     short ie

  00017	75 fb		 jne	 SHORT $ie$10621

; 1306 :     }
; 1307 : }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
@InterlockedExchange@8 ENDP
DSOUND	ENDS
PUBLIC	_DirectSoundGetSampleTime@0
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _DirectSoundGetSampleTime@0
DSOUND	SEGMENT
_dwSampleTime$ = -4
_DirectSoundGetSampleTime@0 PROC NEAR			; COMDAT

; 1591 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1592 :     DWORD                   dwSampleTime;
; 1593 :     
; 1594 :     DPF_ENTER();    
; 1595 : 
; 1596 :     //
; 1597 :     // MASSIVE HACK
; 1598 :     //
; 1599 :     // In order to keep latency and overhead to an absolute minimum, we're 
; 1600 :     // going to read the MCPX sample clock register from here.  This will 
; 1601 :     // prevent us from having to take the critical section or raise IRQL.
; 1602 :     //
; 1603 :     // If the DirectSound object hasn't been created, the sample counter
; 1604 :     // can't be trusted.
; 1605 :     //
; 1606 : 
; 1607 :     if(CDirectSound::m_pDirectSound)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  0000b	74 0a		 je	 SHORT $L36229

; 1608 :     {
; 1609 :         MCPX_REG_READ(NV_PAPU_XGSCNT, &dwSampleTime);

  0000d	a1 0c 20 80 fe	 mov	 eax, DWORD PTR ds:-25157620
  00012	89 45 fc	 mov	 DWORD PTR _dwSampleTime$[ebp], eax

; 1610 :     }
; 1611 :     else

  00015	eb 07		 jmp	 SHORT $L36231
$L36229:

; 1612 :     {
; 1613 :         dwSampleTime = 0;

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwSampleTime$[ebp], 0
$L36231:

; 1614 :     }
; 1615 : 
; 1616 :     DPF_LEAVE(dwSampleTime);
; 1617 : 
; 1618 :     return dwSampleTime;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _dwSampleTime$[ebp]

; 1619 : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_DirectSoundGetSampleTime@0 ENDP
DSOUND	ENDS
PUBLIC	_DirectSoundUseFullHRTF@0
PUBLIC	??_C@_0BH@POMALHBG@DirectSoundUseFullHRTF?$AA@	; `string'
PUBLIC	??_C@_0BN@JIANJPJE@Using?5full?5HRTF?53D?5algorithm?$AA@ ; `string'
PUBLIC	?Force3dRecalc@CDirectSound@DirectSound@@QAGXK@Z ; DirectSound::CDirectSound::Force3dRecalc
PUBLIC	?SetAlgorithm_FullHrtf@CHrtfSource@DirectSound@@SGXXZ ; DirectSound::CHrtfSource::SetAlgorithm_FullHrtf
;	COMDAT ??_C@_0BH@POMALHBG@DirectSoundUseFullHRTF?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@POMALHBG@DirectSoundUseFullHRTF?$AA@ DB 'DirectSoundUseFullHRTF'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@JIANJPJE@Using?5full?5HRTF?53D?5algorithm?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@JIANJPJE@Using?5full?5HRTF?53D?5algorithm?$AA@ DB 'Using full H'
	DB	'RTF 3D algorithm', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DirectSoundUseFullHRTF@0
DSOUND	SEGMENT
___AutoLock$ = -4
_DirectSoundUseFullHRTF@0 PROC NEAR			; COMDAT

; 1647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1648 :     DPF_ENTER();
; 1649 :     ENTER_EXTERNAL_FUNCTION();

  00004	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00007	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1650 : 
; 1651 : #ifndef DS3D_ALLOW_ALGORITHM_SWAP
; 1652 : 
; 1653 :     if(CHrtfSource::IsValidAlgorithm())
; 1654 :     {
; 1655 :         DPF_ERROR("3D algorithms can't be changed once set");
; 1656 :     }
; 1657 :     else
; 1658 : 
; 1659 : #endif // DS3D_ALLOW_ALGORITHM_SWAP
; 1660 : 
; 1661 :     {
; 1662 :         DPF_ABSOLUTE("Using full HRTF 3D algorithm");

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@POMALHBG@DirectSoundUseFullHRTF?$AA@
  00016	68 7e 06 00 00	 push	 1662			; 0000067eH
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00020	6a 00		 push	 0
  00022	6a 09		 push	 9
  00024	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@JIANJPJE@Using?5full?5HRTF?53D?5algorithm?$AA@
  00031	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00036	83 c4 04	 add	 esp, 4

; 1663 :     
; 1664 :         CHrtfSource::SetAlgorithm_FullHrtf();

  00039	e8 00 00 00 00	 call	 ?SetAlgorithm_FullHrtf@CHrtfSource@DirectSound@@SGXXZ ; DirectSound::CHrtfSource::SetAlgorithm_FullHrtf

; 1665 : 
; 1666 : #ifdef DS3D_ALLOW_ALGORITHM_SWAP
; 1667 : 
; 1668 :         if(CDirectSound::m_pDirectSound)

  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  00045	74 0d		 je	 SHORT $L36238

; 1669 :         {
; 1670 :             CDirectSound::m_pDirectSound->Force3dRecalc();

  00047	6a ff		 push	 -1
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A ; DirectSound::CDirectSound::m_pDirectSound
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?Force3dRecalc@CDirectSound@DirectSound@@QAGXK@Z ; DirectSound::CDirectSound::Force3dRecalc
$L36238:

; 1671 :         }
; 1672 : 
; 1673 : #endif // DS3D_ALLOW_ALGORITHM_SWAP
; 1674 : 
; 1675 :     }
; 1676 : 
; 1677 :     DPF_LEAVE_VOID();
; 1678 : }

  00054	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00057	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_DirectSoundUseFullHRTF@0 ENDP
DSOUND	ENDS
EXTRN	?Calculate3d@CFullHrtfSource@DirectSound@@SGXKPAVCHrtfSource@2@@Z:NEAR ; DirectSound::CFullHrtfSource::Calculate3d
EXTRN	?GetHrtfFilterPair@CFullHrtfSource@DirectSound@@SGXPAVCHrtfSource@2@@Z:NEAR ; DirectSound::CFullHrtfSource::GetHrtfFilterPair
EXTRN	?m_nAlgorithm@CHrtfSource@DirectSound@@1IA:DWORD ; DirectSound::CHrtfSource::m_nAlgorithm
EXTRN	?m_pfnCalculate@CHrtfSource@DirectSound@@0P6GXKPAV12@@ZA:DWORD ; DirectSound::CHrtfSource::m_pfnCalculate
EXTRN	?m_pfnGetFilterPair@CHrtfSource@DirectSound@@0P6GXPAV12@@ZA:DWORD ; DirectSound::CHrtfSource::m_pfnGetFilterPair
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\hrtf.h
;	COMDAT ?SetAlgorithm_FullHrtf@CHrtfSource@DirectSound@@SGXXZ
DSOUND	SEGMENT
?SetAlgorithm_FullHrtf@CHrtfSource@DirectSound@@SGXXZ PROC NEAR ; DirectSound::CHrtfSource::SetAlgorithm_FullHrtf, COMDAT

; 368  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 369  :         m_nAlgorithm = CFullHrtfSource::DS3DALG;

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_nAlgorithm@CHrtfSource@DirectSound@@1IA, 0 ; DirectSound::CHrtfSource::m_nAlgorithm

; 370  :         m_pfnCalculate = CFullHrtfSource::Calculate3d;

  0000d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pfnCalculate@CHrtfSource@DirectSound@@0P6GXKPAV12@@ZA, OFFSET FLAT:?Calculate3d@CFullHrtfSource@DirectSound@@SGXKPAVCHrtfSource@2@@Z ; DirectSound::CHrtfSource::m_pfnCalculate, DirectSound::CFullHrtfSource::Calculate3d

; 371  :         m_pfnGetFilterPair = CFullHrtfSource::GetHrtfFilterPair;

  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pfnGetFilterPair@CHrtfSource@DirectSound@@0P6GXPAV12@@ZA, OFFSET FLAT:?GetHrtfFilterPair@CFullHrtfSource@DirectSound@@SGXPAVCHrtfSource@2@@Z ; DirectSound::CHrtfSource::m_pfnGetFilterPair, DirectSound::CFullHrtfSource::GetHrtfFilterPair

; 372  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?SetAlgorithm_FullHrtf@CHrtfSource@DirectSound@@SGXXZ ENDP ; DirectSound::CHrtfSource::SetAlgorithm_FullHrtf
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND	ENDS
;	COMDAT ?Force3dRecalc@CDirectSound@DirectSound@@QAGXK@Z
DSOUND	SEGMENT
_this$ = 8
_dwParameterMask$ = 12
?Force3dRecalc@CDirectSound@DirectSound@@QAGXK@Z PROC NEAR ; DirectSound::CDirectSound::Force3dRecalc, COMDAT

; 340  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  :         m_pSettings->m_3dParams.dwParameterMask |= dwParameterMask;

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00009	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0000f	0b 55 0c	 or	 edx, DWORD PTR _dwParameterMask$[ebp]
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00018	89 91 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], edx

; 342  : 
; 343  :         CommitDeferredSettings();

  0001e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings

; 344  :     }

  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
?Force3dRecalc@CDirectSound@DirectSound@@QAGXK@Z ENDP	; DirectSound::CDirectSound::Force3dRecalc
DSOUND	ENDS
PUBLIC	_DirectSoundUseLightHRTF@0
PUBLIC	??_C@_0BI@MFNLOELL@DirectSoundUseLightHRTF?$AA@	; `string'
PUBLIC	??_C@_0BO@HCIBBNHJ@Using?5light?5HRTF?53D?5algorithm?$AA@ ; `string'
PUBLIC	?SetAlgorithm_LightHrtf@CHrtfSource@DirectSound@@SGXXZ ; DirectSound::CHrtfSource::SetAlgorithm_LightHrtf
;	COMDAT ??_C@_0BI@MFNLOELL@DirectSoundUseLightHRTF?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BI@MFNLOELL@DirectSoundUseLightHRTF?$AA@ DB 'DirectSoundUseLightHR'
	DB	'TF', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@HCIBBNHJ@Using?5light?5HRTF?53D?5algorithm?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@HCIBBNHJ@Using?5light?5HRTF?53D?5algorithm?$AA@ DB 'Using light'
	DB	' HRTF 3D algorithm', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DirectSoundUseLightHRTF@0
DSOUND	SEGMENT
___AutoLock$ = -4
_DirectSoundUseLightHRTF@0 PROC NEAR			; COMDAT

; 1704 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1705 :     DPF_ENTER();
; 1706 :     ENTER_EXTERNAL_FUNCTION();

  00004	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00007	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1707 : 
; 1708 : #ifndef DS3D_ALLOW_ALGORITHM_SWAP
; 1709 : 
; 1710 :     if(CHrtfSource::IsValidAlgorithm())
; 1711 :     {
; 1712 :         DPF_ERROR("3D algorithms can't be changed once set");
; 1713 :     }
; 1714 :     else
; 1715 : 
; 1716 : #endif // DS3D_ALLOW_ALGORITHM_SWAP
; 1717 : 
; 1718 :     {
; 1719 :         DPF_ABSOLUTE("Using light HRTF 3D algorithm");

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MFNLOELL@DirectSoundUseLightHRTF?$AA@
  00016	68 b7 06 00 00	 push	 1719			; 000006b7H
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00020	6a 00		 push	 0
  00022	6a 09		 push	 9
  00024	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@HCIBBNHJ@Using?5light?5HRTF?53D?5algorithm?$AA@
  00031	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00036	83 c4 04	 add	 esp, 4

; 1720 :     
; 1721 :         CHrtfSource::SetAlgorithm_LightHrtf();

  00039	e8 00 00 00 00	 call	 ?SetAlgorithm_LightHrtf@CHrtfSource@DirectSound@@SGXXZ ; DirectSound::CHrtfSource::SetAlgorithm_LightHrtf

; 1722 : 
; 1723 : #ifdef DS3D_ALLOW_ALGORITHM_SWAP
; 1724 : 
; 1725 :         if(CDirectSound::m_pDirectSound)

  0003e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  00045	74 0d		 je	 SHORT $L36245

; 1726 :         {
; 1727 :             CDirectSound::m_pDirectSound->Force3dRecalc();

  00047	6a ff		 push	 -1
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A ; DirectSound::CDirectSound::m_pDirectSound
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?Force3dRecalc@CDirectSound@DirectSound@@QAGXK@Z ; DirectSound::CDirectSound::Force3dRecalc
$L36245:

; 1728 :         }
; 1729 : 
; 1730 : #endif // DS3D_ALLOW_ALGORITHM_SWAP
; 1731 : 
; 1732 :     }
; 1733 : 
; 1734 :     DPF_LEAVE_VOID();
; 1735 : }

  00054	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00057	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_DirectSoundUseLightHRTF@0 ENDP
DSOUND	ENDS
EXTRN	?Calculate3d@CLightHrtfSource@DirectSound@@SGXKPAVCHrtfSource@2@@Z:NEAR ; DirectSound::CLightHrtfSource::Calculate3d
EXTRN	?GetHrtfFilterPair@CLightHrtfSource@DirectSound@@SGXPAVCHrtfSource@2@@Z:NEAR ; DirectSound::CLightHrtfSource::GetHrtfFilterPair
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\hrtf.h
;	COMDAT ?SetAlgorithm_LightHrtf@CHrtfSource@DirectSound@@SGXXZ
DSOUND	SEGMENT
?SetAlgorithm_LightHrtf@CHrtfSource@DirectSound@@SGXXZ PROC NEAR ; DirectSound::CHrtfSource::SetAlgorithm_LightHrtf, COMDAT

; 375  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  :         m_nAlgorithm = CLightHrtfSource::DS3DALG;

  00003	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?m_nAlgorithm@CHrtfSource@DirectSound@@1IA, 1 ; DirectSound::CHrtfSource::m_nAlgorithm

; 377  :         m_pfnCalculate = CLightHrtfSource::Calculate3d;

  0000d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pfnCalculate@CHrtfSource@DirectSound@@0P6GXKPAV12@@ZA, OFFSET FLAT:?Calculate3d@CLightHrtfSource@DirectSound@@SGXKPAVCHrtfSource@2@@Z ; DirectSound::CHrtfSource::m_pfnCalculate, DirectSound::CLightHrtfSource::Calculate3d

; 378  :         m_pfnGetFilterPair = CLightHrtfSource::GetHrtfFilterPair;

  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pfnGetFilterPair@CHrtfSource@DirectSound@@0P6GXPAV12@@ZA, OFFSET FLAT:?GetHrtfFilterPair@CLightHrtfSource@DirectSound@@SGXPAVCHrtfSource@2@@Z ; DirectSound::CHrtfSource::m_pfnGetFilterPair, DirectSound::CLightHrtfSource::GetHrtfFilterPair

; 379  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?SetAlgorithm_LightHrtf@CHrtfSource@DirectSound@@SGXXZ ENDP ; DirectSound::CHrtfSource::SetAlgorithm_LightHrtf
DSOUND	ENDS
PUBLIC	_DirectSoundOverrideSpeakerConfig@4
PUBLIC	??_C@_0CB@CNGMJOFG@DirectSoundOverrideSpeakerConfig@ ; `string'
PUBLIC	??_C@_0BO@FIHBIBCP@Invalid?5speaker?5configuration?$AA@ ; `string'
PUBLIC	??_C@_0CN@NKDHKHKO@Can?8t?5set?5encoder?5bits?5in?5the?5sp@ ; `string'
PUBLIC	??_C@_0FK@NPLJHMGG@Can?8t?5call?5DirectSoundOverrideSp@ ; `string'
EXTRN	_g_dwDirectSoundOverrideSpeakerConfig:DWORD
;	COMDAT ??_C@_0CB@CNGMJOFG@DirectSoundOverrideSpeakerConfig@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0CB@CNGMJOFG@DirectSoundOverrideSpeakerConfig@ DB 'DirectSoundOverr'
	DB	'ideSpeakerConfig', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@FIHBIBCP@Invalid?5speaker?5configuration?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@FIHBIBCP@Invalid?5speaker?5configuration?$AA@ DB 'Invalid speak'
	DB	'er configuration', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@NKDHKHKO@Can?8t?5set?5encoder?5bits?5in?5the?5sp@
DSOUND_RD	SEGMENT
??_C@_0CN@NKDHKHKO@Can?8t?5set?5encoder?5bits?5in?5the?5sp@ DB 'Can''t se'
	DB	't encoder bits in the speaker config', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FK@NPLJHMGG@Can?8t?5call?5DirectSoundOverrideSp@
DSOUND_RD	SEGMENT
??_C@_0FK@NPLJHMGG@Can?8t?5call?5DirectSoundOverrideSp@ DB 'Can''t call D'
	DB	'irectSoundOverrideSpeakerConfig after the DirectSound object '
	DB	'has been created', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DirectSoundOverrideSpeakerConfig@4
DSOUND	SEGMENT
tv135 = -8
___AutoLock$ = -4
_dwSpeakerConfig$ = 8
_DirectSoundOverrideSpeakerConfig@4 PROC NEAR		; COMDAT

; 1822 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1823 :     DPF_ENTER();
; 1824 :     ENTER_EXTERNAL_FUNCTION();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1825 : 
; 1826 : #ifdef VALIDATE_PARAMETERS
; 1827 : 
; 1828 :     if(DSSPEAKER_USE_DEFAULT != dwSpeakerConfig)

  0000e	83 7d 08 ff	 cmp	 DWORD PTR _dwSpeakerConfig$[ebp], -1
  00012	0f 84 a1 00 00
	00		 je	 $L36250

; 1829 :     {
; 1830 :         if(!DSSPEAKER_IS_VALID(dwSpeakerConfig))

  00018	8b 45 08	 mov	 eax, DWORD PTR _dwSpeakerConfig$[ebp]
  0001b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00020	85 c0		 test	 eax, eax
  00022	72 21		 jb	 SHORT $L36255
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _dwSpeakerConfig$[ebp]
  00027	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0002d	83 f9 02	 cmp	 ecx, 2
  00030	77 13		 ja	 SHORT $L36255
  00032	8b 55 08	 mov	 edx, DWORD PTR _dwSpeakerConfig$[ebp]
  00035	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  0003b	81 e2 ff ff fc
	ff		 and	 edx, -196609		; fffcffffH
  00041	85 d2		 test	 edx, edx
  00043	74 2d		 je	 SHORT $L36254
$L36255:

; 1831 :         {
; 1832 :             DPF_ERROR("Invalid speaker configuration");

  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CNGMJOFG@DirectSoundOverrideSpeakerConfig@
  0004f	68 28 07 00 00	 push	 1832			; 00000728H
  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00059	6a 01		 push	 1
  0005b	6a 09		 push	 9
  0005d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00062	83 c4 18	 add	 esp, 24			; 00000018H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@FIHBIBCP@Invalid?5speaker?5configuration?$AA@
  0006a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0006f	83 c4 04	 add	 esp, 4
$L36254:

; 1833 :         }
; 1834 : 
; 1835 :         if(!DSSPEAKER_IS_VALID_BASIC(dwSpeakerConfig))

  00072	8b 45 08	 mov	 eax, DWORD PTR _dwSpeakerConfig$[ebp]
  00075	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0007a	85 c0		 test	 eax, eax
  0007c	72 0e		 jb	 SHORT $L36261
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _dwSpeakerConfig$[ebp]
  00081	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00087	83 f9 02	 cmp	 ecx, 2
  0008a	76 2d		 jbe	 SHORT $L36250
$L36261:

; 1836 :         {
; 1837 :             DPF_ERROR("Can't set encoder bits in the speaker config");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CNGMJOFG@DirectSoundOverrideSpeakerConfig@
  00096	68 2d 07 00 00	 push	 1837			; 0000072dH
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a0	6a 01		 push	 1
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@NKDHKHKO@Can?8t?5set?5encoder?5bits?5in?5the?5sp@
  000b1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b6	83 c4 04	 add	 esp, 4
$L36250:

; 1838 :         }
; 1839 :     }
; 1840 : 
; 1841 :     if(CDirectSound::m_pDirectSound)

  000b9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  000c0	74 2d		 je	 SHORT $L36263

; 1842 :     {
; 1843 :         DPF_ERROR("Can't call " DPF_FNAME " after the DirectSound object has been created");

  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@CNGMJOFG@DirectSoundOverrideSpeakerConfig@
  000cc	68 33 07 00 00	 push	 1843			; 00000733H
  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000d6	6a 01		 push	 1
  000d8	6a 09		 push	 9
  000da	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000df	83 c4 18	 add	 esp, 24			; 00000018H
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FK@NPLJHMGG@Can?8t?5call?5DirectSoundOverrideSp@
  000e7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ec	83 c4 04	 add	 esp, 4
$L36263:

; 1844 :     }
; 1845 : 
; 1846 : #endif // VALIDATE_PARAMETERS
; 1847 : 
; 1848 :     g_dwDirectSoundOverrideSpeakerConfig = (DSSPEAKER_USE_DEFAULT == dwSpeakerConfig) ? DSSPEAKER_USE_DEFAULT : DSSPEAKER_BASIC(dwSpeakerConfig);

  000ef	83 7d 08 ff	 cmp	 DWORD PTR _dwSpeakerConfig$[ebp], -1
  000f3	75 09		 jne	 SHORT $L40141
  000f5	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv135[ebp], -1
  000fc	eb 0c		 jmp	 SHORT $L40142
$L40141:
  000fe	8b 55 08	 mov	 edx, DWORD PTR _dwSpeakerConfig$[ebp]
  00101	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00107	89 55 f8	 mov	 DWORD PTR tv135[ebp], edx
$L40142:
  0010a	8b 45 f8	 mov	 eax, DWORD PTR tv135[ebp]
  0010d	a3 00 00 00 00	 mov	 DWORD PTR _g_dwDirectSoundOverrideSpeakerConfig, eax

; 1849 : 
; 1850 :     DPF_LEAVE_VOID();
; 1851 : }

  00112	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00115	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
_DirectSoundOverrideSpeakerConfig@4 ENDP
DSOUND	ENDS
PUBLIC	_DirectSoundLoadEncoder@16
PUBLIC	??_C@_0BH@LFFHOEJA@DirectSoundLoadEncoder?$AA@	; `string'
PUBLIC	??_C@_0FE@KMLIIFLK@You?5must?5call?5DirectSoundLoadEnc@ ; `string'
;	COMDAT ??_C@_0BH@LFFHOEJA@DirectSoundLoadEncoder?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@LFFHOEJA@DirectSoundLoadEncoder?$AA@ DB 'DirectSoundLoadEncoder'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FE@KMLIIFLK@You?5must?5call?5DirectSoundLoadEnc@
DSOUND_RD	SEGMENT
??_C@_0FE@KMLIIFLK@You?5must?5call?5DirectSoundLoadEnc@ DB 'You must call'
	DB	' DirectSoundLoadEncoder before the DirectSound object has bee'
	DB	'n created', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _DirectSoundLoadEncoder@16
DSOUND	SEGMENT
$T40146 = -12
___AutoLock$ = -8
_hr$ = -4
_pvImageBuffer$ = 8
_dwImageSize$ = 12
_ppvScratchData$ = 16
_ppDirectSound$ = 20
_DirectSoundLoadEncoder@16 PROC NEAR			; COMDAT

; 1886 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1887 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1888 :     
; 1889 :     DPF_ENTER();
; 1890 :     ENTER_EXTERNAL_FUNCTION();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 1891 : 
; 1892 :     //
; 1893 :     // Make sure the DirectSound object doesn't already exist
; 1894 :     //
; 1895 : 
; 1896 :     if(CDirectSound::m_pDirectSound)

  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  0001c	74 34		 je	 SHORT $L36275

; 1897 :     {
; 1898 :         DPF_ERROR("You must call DirectSoundLoadEncoder before the DirectSound object has been created");

  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@LFFHOEJA@DirectSoundLoadEncoder?$AA@
  00028	68 6a 07 00 00	 push	 1898			; 0000076aH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 01		 push	 1
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FE@KMLIIFLK@You?5must?5call?5DirectSoundLoadEnc@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4

; 1899 :         hr = DSERR_INVALIDCALL;

  0004b	c7 45 fc 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L36275:

; 1900 :     }
; 1901 : 
; 1902 :     //
; 1903 :     // Set the global encoder image pointer
; 1904 :     //
; 1905 : 
; 1906 :     if(SUCCEEDED(hr))

  00052	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00056	7c 11		 jl	 SHORT $L36283

; 1907 :     {
; 1908 :         CDirectSound::m_pvEncoderImageData = (LPVOID)pvImageBuffer;

  00058	8b 45 08	 mov	 eax, DWORD PTR _pvImageBuffer$[ebp]
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?m_pvEncoderImageData@CDirectSound@DirectSound@@2PAXA, eax ; DirectSound::CDirectSound::m_pvEncoderImageData

; 1909 :         CDirectSound::m_dwEncoderImageSize = dwImageSize;

  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _dwImageSize$[ebp]
  00063	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_dwEncoderImageSize@CDirectSound@DirectSound@@2KA, ecx ; DirectSound::CDirectSound::m_dwEncoderImageSize
$L36283:

; 1910 :     }
; 1911 : 
; 1912 :     //
; 1913 :     // Create the DirectSound object
; 1914 :     //
; 1915 : 
; 1916 :     if(SUCCEEDED(hr))

  00069	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006d	7c 10		 jl	 SHORT $L36286

; 1917 :     {
; 1918 :         hr = DirectSoundCreate(NULL, ppDirectSound, NULL);

  0006f	6a 00		 push	 0
  00071	8b 55 14	 mov	 edx, DWORD PTR _ppDirectSound$[ebp]
  00074	52		 push	 edx
  00075	6a 00		 push	 0
  00077	e8 00 00 00 00	 call	 _DirectSoundCreate@12
  0007c	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L36286:

; 1919 :     }
; 1920 : 
; 1921 :     //
; 1922 :     // Retrieve the scratch image pointer
; 1923 :     //
; 1924 : 
; 1925 :     if(SUCCEEDED(hr) && ppvScratchData)

  0007f	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00083	7c 11		 jl	 SHORT $L36288
  00085	83 7d 10 00	 cmp	 DWORD PTR _ppvScratchData$[ebp], 0
  00089	74 0b		 je	 SHORT $L36288

; 1926 :     {
; 1927 :         *ppvScratchData = CDirectSound::m_pvEncoderImageData;

  0008b	8b 45 10	 mov	 eax, DWORD PTR _ppvScratchData$[ebp]
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_pvEncoderImageData@CDirectSound@DirectSound@@2PAXA ; DirectSound::CDirectSound::m_pvEncoderImageData
  00094	89 08		 mov	 DWORD PTR [eax], ecx
$L36288:

; 1928 :     }
; 1929 : 
; 1930 :     DPF_LEAVE_HRESULT(hr);
; 1931 : 
; 1932 :     return hr;

  00096	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  00099	89 55 f4	 mov	 DWORD PTR $T40146[ebp], edx
  0009c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0009f	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000a4	8b 45 f4	 mov	 eax, DWORD PTR $T40146[ebp]

; 1933 : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 10 00	 ret	 16			; 00000010H
_DirectSoundLoadEncoder@16 ENDP
DSOUND	ENDS
PUBLIC	__real@37aec33e
PUBLIC	_XAudioCalculatePitch@4
PUBLIC	??_C@_0BF@BPPLJCKL@XAudioCalculatePitch?$AA@	; `string'
PUBLIC	??_C@_0BI@IPPIOPAN@Invalid?5frequency?5value?$AA@ ; `string'
PUBLIC	??0CAutoFpState@DirectSound@@QAE@XZ		; DirectSound::CAutoFpState::CAutoFpState
PUBLIC	??1CAutoFpState@DirectSound@@QAE@XZ		; DirectSound::CAutoFpState::~CAutoFpState
EXTRN	?RatioToPitch@Math@DirectSound@@YGJM@Z:NEAR	; DirectSound::Math::RatioToPitch
;	COMDAT ??_C@_0BF@BPPLJCKL@XAudioCalculatePitch?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@BPPLJCKL@XAudioCalculatePitch?$AA@ DB 'XAudioCalculatePitch', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IPPIOPAN@Invalid?5frequency?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@IPPIOPAN@Invalid?5frequency?5value?$AA@ DB 'Invalid frequency v'
	DB	'alue', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT __real@37aec33e
CONST	SEGMENT
__real@37aec33e DD 037aec33er			; 2.08333e-005
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _XAudioCalculatePitch@4
DSOUND	SEGMENT
tv82 = -20
$T40150 = -12
___AutoFpState$ = -5
_lPitch$ = -4
_dwFrequency$ = 8
_XAudioCalculatePitch@4 PROC NEAR			; COMDAT

; 1963 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1964 :     LONG                    lPitch;
; 1965 :    
; 1966 :     DPF_ENTER();
; 1967 :     AutoFpState();

  00006	8d 4d fb	 lea	 ecx, DWORD PTR ___AutoFpState$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoFpState@DirectSound@@QAE@XZ ; DirectSound::CAutoFpState::CAutoFpState

; 1968 : 
; 1969 : #ifdef VALIDATE_PARAMETERS
; 1970 : 
; 1971 :     if((dwFrequency < DSBFREQUENCY_MIN) || (dwFrequency > DSBFREQUENCY_MAX))

  0000e	81 7d 08 bc 00
	00 00		 cmp	 DWORD PTR _dwFrequency$[ebp], 188 ; 000000bcH
  00015	72 09		 jb	 SHORT $L36296
  00017	81 7d 08 ef ed
	02 00		 cmp	 DWORD PTR _dwFrequency$[ebp], 191983 ; 0002edefH
  0001e	76 2d		 jbe	 SHORT $L36295
$L36296:

; 1972 :     {
; 1973 :         DPF_ERROR("Invalid frequency value");

  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@BPPLJCKL@XAudioCalculatePitch?$AA@
  0002a	68 b5 07 00 00	 push	 1973			; 000007b5H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00034	6a 01		 push	 1
  00036	6a 09		 push	 9
  00038	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IPPIOPAN@Invalid?5frequency?5value?$AA@
  00045	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004a	83 c4 04	 add	 esp, 4
$L36295:

; 1974 :     }
; 1975 : 
; 1976 : #endif // VALIDATE_PARAMETERS
; 1977 : 
; 1978 :     if(MCPX_BASEFREQ == dwFrequency)

  0004d	81 7d 08 80 bb
	00 00		 cmp	 DWORD PTR _dwFrequency$[ebp], 48000 ; 0000bb80H
  00054	75 09		 jne	 SHORT $L36299

; 1979 :     {
; 1980 :         lPitch = 0;

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _lPitch$[ebp], 0

; 1981 :     }
; 1982 :     else

  0005d	eb 22		 jmp	 SHORT $L36300
$L36299:

; 1983 :     {
; 1984 :         lPitch = RatioToPitch((FLOAT)dwFrequency * MCPX_ONEOVERBASEFREQ);

  0005f	8b 45 08	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  00062	89 45 ec	 mov	 DWORD PTR tv82[ebp], eax
  00065	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp+4], 0
  0006c	df 6d ec	 fild	 QWORD PTR tv82[ebp]
  0006f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@37aec33e
  00075	51		 push	 ecx
  00076	d9 1c 24	 fstp	 DWORD PTR [esp]
  00079	e8 00 00 00 00	 call	 ?RatioToPitch@Math@DirectSound@@YGJM@Z ; DirectSound::Math::RatioToPitch
  0007e	89 45 fc	 mov	 DWORD PTR _lPitch$[ebp], eax
$L36300:

; 1985 :     }
; 1986 : 
; 1987 :     DPF_LEAVE(lPitch);
; 1988 : 
; 1989 :     return lPitch;

  00081	8b 4d fc	 mov	 ecx, DWORD PTR _lPitch$[ebp]
  00084	89 4d f4	 mov	 DWORD PTR $T40150[ebp], ecx
  00087	8d 4d fb	 lea	 ecx, DWORD PTR ___AutoFpState$[ebp]
  0008a	e8 00 00 00 00	 call	 ??1CAutoFpState@DirectSound@@QAE@XZ ; DirectSound::CAutoFpState::~CAutoFpState
  0008f	8b 45 f4	 mov	 eax, DWORD PTR $T40150[ebp]

; 1990 : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_XAudioCalculatePitch@4 ENDP
DSOUND	ENDS
PUBLIC	?Save@CFpState@DirectSound@@QAEXXZ		; DirectSound::CFpState::Save
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??0CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CAutoFpState@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoFpState::CAutoFpState, COMDAT
; _this$ = ecx

; 145  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  :         Save();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Save@CFpState@DirectSound@@QAEXXZ ; DirectSound::CFpState::Save

; 147  :     }

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0CAutoFpState@DirectSound@@QAE@XZ ENDP		; DirectSound::CAutoFpState::CAutoFpState
DSOUND	ENDS
EXTRN	__imp__KeSaveFloatingPointState@4:NEAR
EXTRN	?m_dwRefCount@CFpState@DirectSound@@0KA:DWORD	; DirectSound::CFpState::m_dwRefCount
EXTRN	?m_fps@CFpState@DirectSound@@0U_KFLOATING_SAVE@@A:BYTE ; DirectSound::CFpState::m_fps
; Function compile flags: /Odt
;	COMDAT ?Save@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Save@CFpState@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CFpState::Save, COMDAT
; _this$ = ecx

; 108  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 109  :         if(KeIsExecutingDpc())

  00007	e8 00 00 00 00	 call	 _KeIsExecutingDpc@0
  0000c	85 c0		 test	 eax, eax
  0000e	74 23		 je	 SHORT $L30310

; 110  :         {
; 111  :             if(!m_dwRefCount++)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA ; DirectSound::CFpState::m_dwRefCount
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA ; DirectSound::CFpState::m_dwRefCount
  0001b	83 c1 01	 add	 ecx, 1
  0001e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA, ecx ; DirectSound::CFpState::m_dwRefCount
  00024	85 c0		 test	 eax, eax
  00026	75 0b		 jne	 SHORT $L30310

; 112  :             {
; 113  :                 KeSaveFloatingPointState(&m_fps);

  00028	68 00 00 00 00	 push	 OFFSET FLAT:?m_fps@CFpState@DirectSound@@0U_KFLOATING_SAVE@@A ; DirectSound::CFpState::m_fps
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSaveFloatingPointState@4
$L30310:

; 114  :             }
; 115  :         }
; 116  :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Save@CFpState@DirectSound@@QAEXXZ ENDP			; DirectSound::CFpState::Save
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
DSOUND	ENDS
;	COMDAT _KeIsExecutingDpc@0
DSOUND	SEGMENT
_KeIsExecutingDpc@0 PROC NEAR				; COMDAT

; 1524 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1525 : #if defined(_NTSYSTEM_)
; 1526 :     return KeGetCurrentPrcb()->DpcRoutineActive;
; 1527 : #else
; 1528 :     __asm {  mov eax, fs:[0] KPCR.PrcbData.DpcRoutineActive }

  00003	64 a1 58 00 00
	00		 mov	 eax, DWORD PTR fs:88

; 1529 : #endif
; 1530 : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_KeIsExecutingDpc@0 ENDP
DSOUND	ENDS
PUBLIC	?Restore@CFpState@DirectSound@@QAEXXZ		; DirectSound::CFpState::Restore
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\drvhlp.h
;	COMDAT ??1CAutoFpState@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CAutoFpState@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CAutoFpState::~CAutoFpState, COMDAT
; _this$ = ecx

; 150  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 151  :         Restore();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Restore@CFpState@DirectSound@@QAEXXZ ; DirectSound::CFpState::Restore

; 152  :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoFpState@DirectSound@@QAE@XZ ENDP		; DirectSound::CAutoFpState::~CAutoFpState
DSOUND	ENDS
EXTRN	__imp__KeRestoreFloatingPointState@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Restore@CFpState@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?Restore@CFpState@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CFpState::Restore, COMDAT
; _this$ = ecx

; 119  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 120  :         if(KeIsExecutingDpc())

  00007	e8 00 00 00 00	 call	 _KeIsExecutingDpc@0
  0000c	85 c0		 test	 eax, eax
  0000e	74 21		 je	 SHORT $L30316

; 121  :         {
; 122  :             if(!--m_dwRefCount)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA ; DirectSound::CFpState::m_dwRefCount
  00015	83 e8 01	 sub	 eax, 1
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA, eax ; DirectSound::CFpState::m_dwRefCount
  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_dwRefCount@CFpState@DirectSound@@0KA, 0 ; DirectSound::CFpState::m_dwRefCount
  00024	75 0b		 jne	 SHORT $L30316

; 123  :             {
; 124  :                 KeRestoreFloatingPointState(&m_fps);

  00026	68 00 00 00 00	 push	 OFFSET FLAT:?m_fps@CFpState@DirectSound@@0U_KFLOATING_SAVE@@A ; DirectSound::CFpState::m_fps
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRestoreFloatingPointState@4
$L30316:

; 125  :             }
; 126  :         }
; 127  :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?Restore@CFpState@DirectSound@@QAEXXZ ENDP		; DirectSound::CFpState::Restore
DSOUND	ENDS
PUBLIC	_XAudioCreatePcmFormat@16
EXTRN	?CreatePcmFormat@WaveFormat@DirectSound@@YGXGKGPAUtWAVEFORMATEX@@@Z:NEAR ; DirectSound::WaveFormat::CreatePcmFormat
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _XAudioCreatePcmFormat@16
DSOUND	SEGMENT
_nChannels$ = 8
_nSamplesPerSec$ = 12
_wBitsPerSample$ = 16
_pwfx$ = 20
_XAudioCreatePcmFormat@16 PROC NEAR			; COMDAT

; 2022 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2023 :     DPF_ENTER();
; 2024 :     
; 2025 :     CreatePcmFormat(nChannels, nSamplesPerSec, wBitsPerSample, pwfx);

  00003	8b 45 14	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00006	50		 push	 eax
  00007	66 8b 4d 10	 mov	 cx, WORD PTR _wBitsPerSample$[ebp]
  0000b	51		 push	 ecx
  0000c	8b 55 0c	 mov	 edx, DWORD PTR _nSamplesPerSec$[ebp]
  0000f	52		 push	 edx
  00010	66 8b 45 08	 mov	 ax, WORD PTR _nChannels$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?CreatePcmFormat@WaveFormat@DirectSound@@YGXGKGPAUtWAVEFORMATEX@@@Z ; DirectSound::WaveFormat::CreatePcmFormat

; 2026 : 
; 2027 :     DPF_LEAVE_VOID();
; 2028 : }

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
_XAudioCreatePcmFormat@16 ENDP
DSOUND	ENDS
PUBLIC	_XAudioCreateAdpcmFormat@12
EXTRN	?CreateXboxAdpcmFormat@WaveFormat@DirectSound@@YGXGKPAUxbox_adpcmwaveformat_tag@@@Z:NEAR ; DirectSound::WaveFormat::CreateXboxAdpcmFormat
; Function compile flags: /Odt
;	COMDAT _XAudioCreateAdpcmFormat@12
DSOUND	SEGMENT
_nChannels$ = 8
_nSamplesPerSec$ = 12
_pwfx$ = 16
_XAudioCreateAdpcmFormat@12 PROC NEAR			; COMDAT

; 2058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2059 :     DPF_ENTER();
; 2060 :     
; 2061 :     CreateXboxAdpcmFormat(nChannels, nSamplesPerSec, pwfx);

  00003	8b 45 10	 mov	 eax, DWORD PTR _pwfx$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _nSamplesPerSec$[ebp]
  0000a	51		 push	 ecx
  0000b	66 8b 55 08	 mov	 dx, WORD PTR _nChannels$[ebp]
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 ?CreateXboxAdpcmFormat@WaveFormat@DirectSound@@YGXGKPAUxbox_adpcmwaveformat_tag@@@Z ; DirectSound::WaveFormat::CreateXboxAdpcmFormat

; 2062 : 
; 2063 :     DPF_LEAVE_VOID();
; 2064 : }

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
_XAudioCreateAdpcmFormat@12 ENDP
DSOUND	ENDS
PUBLIC	_XAudioDownloadEffectsImage@16
PUBLIC	??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@ ; `string'
PUBLIC	??_C@_0BH@KEPMOGMH@No?5image?5name?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@		; `string'
PUBLIC	??_C@_0GA@HGPLGPOH@The?5DirectSound?5object?5must?5have@ ; `string'
PUBLIC	??_C@_0BJ@MLCKJCNB@Can?8t?5find?5image?5section?$AA@ ; `string'
PUBLIC	??_C@_0BF@HCGENJOL@Can?8t?5get?5image?5size?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OLHLOOOG@Can?8t?5read?5image?5section?$AA@ ; `string'
PUBLIC	??_C@_0BG@GIBIPBEG@Can?8t?5find?5image?5file?$AA@ ; `string'
PUBLIC	??_C@_04ELFAHOMP@BYTE?$AA@			; `string'
PUBLIC	??_C@_0BG@EJGPJOEN@Can?8t?5read?5image?5file?$AA@ ; `string'
EXTRN	_GetLastError@0:NEAR
EXTRN	?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingMemFree
EXTRN	_GetFileSize@8:NEAR
EXTRN	_ReadFile@20:NEAR
EXTRN	_CloseHandle@4:NEAR
EXTRN	_CreateFileA@28:NEAR
EXTRN	_XGetSectionHandleA@4:NEAR
EXTRN	_XLoadSectionByHandle@4:NEAR
EXTRN	_XFreeSectionByHandle@4:NEAR
EXTRN	_XGetSectionSize@4:NEAR
;	COMDAT ??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@ DB 'XAudioDownloadEffe'
	DB	'ctsImage', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@KEPMOGMH@No?5image?5name?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@KEPMOGMH@No?5image?5name?5supplied?$AA@ DB 'No image name suppl'
	DB	'ied', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@ DB 'Invalid flags', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0GA@HGPLGPOH@The?5DirectSound?5object?5must?5have@
DSOUND_RD	SEGMENT
??_C@_0GA@HGPLGPOH@The?5DirectSound?5object?5must?5have@ DB 'The DirectSo'
	DB	'und object must have already been created before calling XAud'
	DB	'ioDownloadEffectsImage', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@MLCKJCNB@Can?8t?5find?5image?5section?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@MLCKJCNB@Can?8t?5find?5image?5section?$AA@ DB 'Can''t find imag'
	DB	'e section', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@HCGENJOL@Can?8t?5get?5image?5size?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@HCGENJOL@Can?8t?5get?5image?5size?$AA@ DB 'Can''t get image siz'
	DB	'e', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@OLHLOOOG@Can?8t?5read?5image?5section?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@OLHLOOOG@Can?8t?5read?5image?5section?$AA@ DB 'Can''t read imag'
	DB	'e section', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GIBIPBEG@Can?8t?5find?5image?5file?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@GIBIPBEG@Can?8t?5find?5image?5file?$AA@ DB 'Can''t find image f'
	DB	'ile', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_04ELFAHOMP@BYTE?$AA@
DSOUND_RD	SEGMENT
??_C@_04ELFAHOMP@BYTE?$AA@ DB 'BYTE', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EJGPJOEN@Can?8t?5read?5image?5file?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@EJGPJOEN@Can?8t?5read?5image?5file?$AA@ DB 'Can''t read image f'
	DB	'ile', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _XAudioDownloadEffectsImage@16
DSOUND	SEGMENT
tv259 = -48
tv226 = -44
tv206 = -40
tv182 = -36
tv163 = -32
tv144 = -28
$T40189 = -24
_pvImageData$ = -20
___AutoLock$ = -16
_hr$ = -12
_hImageFile$ = -8
_dwImageSize$ = -4
_pszImageName$ = 8
_pEffectLoc$ = 12
_dwFlags$ = 16
_ppImageDesc$ = 20
_XAudioDownloadEffectsImage@16 PROC NEAR		; COMDAT

; 2097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 2098 :     HANDLE                  hImageFile      = NULL;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hImageFile$[ebp], 0

; 2099 :     LPVOID                  pvImageData     = NULL;

  0000d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pvImageData$[ebp], 0

; 2100 :     HRESULT                 hr              = DS_OK;

  00014	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2101 :     DWORD                   dwImageSize;
; 2102 : 
; 2103 :     DPF_ENTER();
; 2104 :     ENTER_EXTERNAL_FUNCTION();

  0001b	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 2105 : 
; 2106 : #ifdef VALIDATE_PARAMETERS
; 2107 : 
; 2108 :     if(!pszImageName)

  00023	83 7d 08 00	 cmp	 DWORD PTR _pszImageName$[ebp], 0
  00027	75 2d		 jne	 SHORT $L36326

; 2109 :     {
; 2110 :         DPF_ERROR("No image name supplied");

  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  00033	68 3e 08 00 00	 push	 2110			; 0000083eH
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0003d	6a 01		 push	 1
  0003f	6a 09		 push	 9
  00041	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KEPMOGMH@No?5image?5name?5supplied?$AA@
  0004e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00053	83 c4 04	 add	 esp, 4
$L36326:

; 2111 :     }
; 2112 : 
; 2113 :     if(dwFlags & ~XAUDIO_DOWNLOADFX_VALID)

  00056	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00059	83 e0 fe	 and	 eax, -2			; fffffffeH
  0005c	85 c0		 test	 eax, eax
  0005e	74 2d		 je	 SHORT $L36329

; 2114 :     {
; 2115 :         DPF_ERROR("Invalid flags");

  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  0006a	68 43 08 00 00	 push	 2115			; 00000843H
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00074	6a 01		 push	 1
  00076	6a 09		 push	 9
  00078	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0007d	83 c4 18	 add	 esp, 24			; 00000018H
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@
  00085	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008a	83 c4 04	 add	 esp, 4
$L36329:

; 2116 :     }
; 2117 : 
; 2118 : #endif // VALIDATE_PARAMETERS
; 2119 : 
; 2120 :     if(!CDirectSound::m_pDirectSound)

  0008d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound
  00094	75 34		 jne	 SHORT $L36331

; 2121 :     {
; 2122 :         DPF_ERROR("The DirectSound object must have already been created before calling " DPF_FNAME);

  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  000a0	68 4a 08 00 00	 push	 2122			; 0000084aH
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000aa	6a 01		 push	 1
  000ac	6a 09		 push	 9
  000ae	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000b3	83 c4 18	 add	 esp, 24			; 00000018H
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GA@HGPLGPOH@The?5DirectSound?5object?5must?5have@
  000bb	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000c0	83 c4 04	 add	 esp, 4

; 2123 :         hr = DSERR_INVALIDCALL;

  000c3	c7 45 f4 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L36331:

; 2124 :     }
; 2125 : 
; 2126 :     //
; 2127 :     // Open the image
; 2128 :     //
; 2129 : 
; 2130 :     if(SUCCEEDED(hr))

  000ca	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ce	0f 8c 1a 03 00
	00		 jl	 $L36338

; 2131 :     {
; 2132 :         if(dwFlags & XAUDIO_DOWNLOADFX_XBESECTION)

  000d4	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000d7	83 e1 01	 and	 ecx, 1
  000da	85 c9		 test	 ecx, ecx
  000dc	0f 84 5e 01 00
	00		 je	 $L36339

; 2133 :         {
; 2134 :             if(INVALID_HANDLE_VALUE == (hImageFile = XGetSectionHandle(pszImageName)))

  000e2	8b 55 08	 mov	 edx, DWORD PTR _pszImageName$[ebp]
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 _XGetSectionHandleA@4
  000eb	89 45 f8	 mov	 DWORD PTR _hImageFile$[ebp], eax
  000ee	83 7d f8 ff	 cmp	 DWORD PTR _hImageFile$[ebp], -1
  000f2	75 5d		 jne	 SHORT $L36341

; 2135 :             {
; 2136 :                 DPF_ERROR("Can't find image section");

  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  000fe	68 58 08 00 00	 push	 2136			; 00000858H
  00103	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00108	6a 01		 push	 1
  0010a	6a 09		 push	 9
  0010c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00111	83 c4 18	 add	 esp, 24			; 00000018H
  00114	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MLCKJCNB@Can?8t?5find?5image?5section?$AA@
  00119	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0011e	83 c4 04	 add	 esp, 4

; 2137 :                 hr = HRESULT_FROM_WIN32(GetLastError());

  00121	e8 00 00 00 00	 call	 _GetLastError@0
  00126	85 c0		 test	 eax, eax
  00128	7f 0a		 jg	 SHORT $L40177
  0012a	e8 00 00 00 00	 call	 _GetLastError@0
  0012f	89 45 e4	 mov	 DWORD PTR tv144[ebp], eax
  00132	eb 17		 jmp	 SHORT $L40178
$L40177:
  00134	e8 00 00 00 00	 call	 _GetLastError@0
  00139	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0013e	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  00143	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00148	89 45 e4	 mov	 DWORD PTR tv144[ebp], eax
$L40178:
  0014b	8b 45 e4	 mov	 eax, DWORD PTR tv144[ebp]
  0014e	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36341:

; 2138 :             }
; 2139 : 
; 2140 :             if(SUCCEEDED(hr))

  00151	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00155	7c 6f		 jl	 SHORT $L36347

; 2141 :             {
; 2142 :                 if(!(dwImageSize = XGetSectionSize(hImageFile)))

  00157	8b 4d f8	 mov	 ecx, DWORD PTR _hImageFile$[ebp]
  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 _XGetSectionSize@4
  00160	89 45 fc	 mov	 DWORD PTR _dwImageSize$[ebp], eax
  00163	83 7d fc 00	 cmp	 DWORD PTR _dwImageSize$[ebp], 0
  00167	75 5d		 jne	 SHORT $L36347

; 2143 :                 {
; 2144 :                     DPF_ERROR("Can't get image size");

  00169	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0016e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  00173	68 60 08 00 00	 push	 2144			; 00000860H
  00178	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0017d	6a 01		 push	 1
  0017f	6a 09		 push	 9
  00181	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00186	83 c4 18	 add	 esp, 24			; 00000018H
  00189	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HCGENJOL@Can?8t?5get?5image?5size?$AA@
  0018e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00193	83 c4 04	 add	 esp, 4

; 2145 :                     hr = HRESULT_FROM_WIN32(GetLastError());

  00196	e8 00 00 00 00	 call	 _GetLastError@0
  0019b	85 c0		 test	 eax, eax
  0019d	7f 0a		 jg	 SHORT $L40179
  0019f	e8 00 00 00 00	 call	 _GetLastError@0
  001a4	89 45 e0	 mov	 DWORD PTR tv163[ebp], eax
  001a7	eb 17		 jmp	 SHORT $L40180
$L40179:
  001a9	e8 00 00 00 00	 call	 _GetLastError@0
  001ae	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001b3	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  001b8	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  001bd	89 45 e0	 mov	 DWORD PTR tv163[ebp], eax
$L40180:
  001c0	8b 55 e0	 mov	 edx, DWORD PTR tv163[ebp]
  001c3	89 55 f4	 mov	 DWORD PTR _hr$[ebp], edx
$L36347:

; 2146 :                 }
; 2147 :             }
; 2148 : 
; 2149 :             if(SUCCEEDED(hr))

  001c6	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ca	7c 6f		 jl	 SHORT $L36354

; 2150 :             {
; 2151 :                 if(!(pvImageData = XLoadSectionByHandle(hImageFile)))

  001cc	8b 45 f8	 mov	 eax, DWORD PTR _hImageFile$[ebp]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 _XLoadSectionByHandle@4
  001d5	89 45 ec	 mov	 DWORD PTR _pvImageData$[ebp], eax
  001d8	83 7d ec 00	 cmp	 DWORD PTR _pvImageData$[ebp], 0
  001dc	75 5d		 jne	 SHORT $L36354

; 2152 :                 {
; 2153 :                     DPF_ERROR("Can't read image section");

  001de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  001e8	68 69 08 00 00	 push	 2153			; 00000869H
  001ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001f2	6a 01		 push	 1
  001f4	6a 09		 push	 9
  001f6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001fb	83 c4 18	 add	 esp, 24			; 00000018H
  001fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@OLHLOOOG@Can?8t?5read?5image?5section?$AA@
  00203	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00208	83 c4 04	 add	 esp, 4

; 2154 :                     hr = HRESULT_FROM_WIN32(GetLastError());

  0020b	e8 00 00 00 00	 call	 _GetLastError@0
  00210	85 c0		 test	 eax, eax
  00212	7f 0a		 jg	 SHORT $L40181
  00214	e8 00 00 00 00	 call	 _GetLastError@0
  00219	89 45 dc	 mov	 DWORD PTR tv182[ebp], eax
  0021c	eb 17		 jmp	 SHORT $L40182
$L40181:
  0021e	e8 00 00 00 00	 call	 _GetLastError@0
  00223	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00228	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  0022d	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00232	89 45 dc	 mov	 DWORD PTR tv182[ebp], eax
$L40182:
  00235	8b 4d dc	 mov	 ecx, DWORD PTR tv182[ebp]
  00238	89 4d f4	 mov	 DWORD PTR _hr$[ebp], ecx
$L36354:

; 2155 :                 }
; 2156 :             }
; 2157 :         }
; 2158 :         else

  0023b	e9 ae 01 00 00	 jmp	 $L36338
$L36339:

; 2159 :         {
; 2160 :             if(INVALID_HANDLE_VALUE == (hImageFile = CreateFile(pszImageName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL)))

  00240	6a 00		 push	 0
  00242	6a 00		 push	 0
  00244	6a 03		 push	 3
  00246	6a 00		 push	 0
  00248	6a 01		 push	 1
  0024a	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0024f	8b 55 08	 mov	 edx, DWORD PTR _pszImageName$[ebp]
  00252	52		 push	 edx
  00253	e8 00 00 00 00	 call	 _CreateFileA@28
  00258	89 45 f8	 mov	 DWORD PTR _hImageFile$[ebp], eax
  0025b	83 7d f8 ff	 cmp	 DWORD PTR _hImageFile$[ebp], -1
  0025f	75 5d		 jne	 SHORT $L36362

; 2161 :             {
; 2162 :                 DPF_ERROR("Can't find image file");

  00261	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00266	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  0026b	68 72 08 00 00	 push	 2162			; 00000872H
  00270	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00275	6a 01		 push	 1
  00277	6a 09		 push	 9
  00279	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0027e	83 c4 18	 add	 esp, 24			; 00000018H
  00281	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@GIBIPBEG@Can?8t?5find?5image?5file?$AA@
  00286	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0028b	83 c4 04	 add	 esp, 4

; 2163 :                 hr = HRESULT_FROM_WIN32(GetLastError());

  0028e	e8 00 00 00 00	 call	 _GetLastError@0
  00293	85 c0		 test	 eax, eax
  00295	7f 0a		 jg	 SHORT $L40183
  00297	e8 00 00 00 00	 call	 _GetLastError@0
  0029c	89 45 d8	 mov	 DWORD PTR tv206[ebp], eax
  0029f	eb 17		 jmp	 SHORT $L40184
$L40183:
  002a1	e8 00 00 00 00	 call	 _GetLastError@0
  002a6	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  002ab	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  002b0	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  002b5	89 45 d8	 mov	 DWORD PTR tv206[ebp], eax
$L40184:
  002b8	8b 45 d8	 mov	 eax, DWORD PTR tv206[ebp]
  002bb	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36362:

; 2164 :             }
; 2165 : 
; 2166 :             if(SUCCEEDED(hr))

  002be	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002c2	7c 71		 jl	 SHORT $L36368

; 2167 :             {
; 2168 :                 if(!(dwImageSize = GetFileSize(hImageFile, NULL)))

  002c4	6a 00		 push	 0
  002c6	8b 4d f8	 mov	 ecx, DWORD PTR _hImageFile$[ebp]
  002c9	51		 push	 ecx
  002ca	e8 00 00 00 00	 call	 _GetFileSize@8
  002cf	89 45 fc	 mov	 DWORD PTR _dwImageSize$[ebp], eax
  002d2	83 7d fc 00	 cmp	 DWORD PTR _dwImageSize$[ebp], 0
  002d6	75 5d		 jne	 SHORT $L36368

; 2169 :                 {
; 2170 :                     DPF_ERROR("Can't get image size");

  002d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  002e2	68 7a 08 00 00	 push	 2170			; 0000087aH
  002e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002ec	6a 01		 push	 1
  002ee	6a 09		 push	 9
  002f0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002f5	83 c4 18	 add	 esp, 24			; 00000018H
  002f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HCGENJOL@Can?8t?5get?5image?5size?$AA@
  002fd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00302	83 c4 04	 add	 esp, 4

; 2171 :                     hr = HRESULT_FROM_WIN32(GetLastError());

  00305	e8 00 00 00 00	 call	 _GetLastError@0
  0030a	85 c0		 test	 eax, eax
  0030c	7f 0a		 jg	 SHORT $L40185
  0030e	e8 00 00 00 00	 call	 _GetLastError@0
  00313	89 45 d4	 mov	 DWORD PTR tv226[ebp], eax
  00316	eb 17		 jmp	 SHORT $L40186
$L40185:
  00318	e8 00 00 00 00	 call	 _GetLastError@0
  0031d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00322	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  00327	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  0032c	89 45 d4	 mov	 DWORD PTR tv226[ebp], eax
$L40186:
  0032f	8b 55 d4	 mov	 edx, DWORD PTR tv226[ebp]
  00332	89 55 f4	 mov	 DWORD PTR _hr$[ebp], edx
$L36368:

; 2172 :                 }
; 2173 :             }
; 2174 : 
; 2175 :             if(SUCCEEDED(hr))

  00335	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00339	7c 35		 jl	 SHORT $L36374

; 2176 :             {
; 2177 :                 hr = HRFROMP(pvImageData = MEMALLOC_NOINIT(BYTE, dwImageSize));

  0033b	6a 00		 push	 0
  0033d	8b 45 fc	 mov	 eax, DWORD PTR _dwImageSize$[ebp]
  00340	50		 push	 eax
  00341	68 44 53 64 61	 push	 1633964868		; 61645344H
  00346	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ELFAHOMP@BYTE?$AA@
  0034b	68 81 08 00 00	 push	 2177			; 00000881H
  00350	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00355	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc
  0035a	89 45 ec	 mov	 DWORD PTR _pvImageData$[ebp], eax
  0035d	33 c9		 xor	 ecx, ecx
  0035f	83 7d ec 00	 cmp	 DWORD PTR _pvImageData$[ebp], 0
  00363	0f 95 c1	 setne	 cl
  00366	49		 dec	 ecx
  00367	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  0036d	89 4d f4	 mov	 DWORD PTR _hr$[ebp], ecx
$L36374:

; 2178 :             }
; 2179 : 
; 2180 :             if(SUCCEEDED(hr))

  00370	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00374	7c 78		 jl	 SHORT $L36338

; 2181 :             {
; 2182 :                 if(!ReadFile(hImageFile, pvImageData, dwImageSize, &dwImageSize, NULL))

  00376	6a 00		 push	 0
  00378	8d 55 fc	 lea	 edx, DWORD PTR _dwImageSize$[ebp]
  0037b	52		 push	 edx
  0037c	8b 45 fc	 mov	 eax, DWORD PTR _dwImageSize$[ebp]
  0037f	50		 push	 eax
  00380	8b 4d ec	 mov	 ecx, DWORD PTR _pvImageData$[ebp]
  00383	51		 push	 ecx
  00384	8b 55 f8	 mov	 edx, DWORD PTR _hImageFile$[ebp]
  00387	52		 push	 edx
  00388	e8 00 00 00 00	 call	 _ReadFile@20
  0038d	85 c0		 test	 eax, eax
  0038f	75 5d		 jne	 SHORT $L36338

; 2183 :                 {
; 2184 :                     DPF_ERROR("Can't read image file");

  00391	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00396	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OHILMFNA@XAudioDownloadEffectsImage?$AA@
  0039b	68 88 08 00 00	 push	 2184			; 00000888H
  003a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  003a5	6a 01		 push	 1
  003a7	6a 09		 push	 9
  003a9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  003ae	83 c4 18	 add	 esp, 24			; 00000018H
  003b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EJGPJOEN@Can?8t?5read?5image?5file?$AA@
  003b6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003bb	83 c4 04	 add	 esp, 4

; 2185 :                     hr = HRESULT_FROM_WIN32(GetLastError());

  003be	e8 00 00 00 00	 call	 _GetLastError@0
  003c3	85 c0		 test	 eax, eax
  003c5	7f 0a		 jg	 SHORT $L40187
  003c7	e8 00 00 00 00	 call	 _GetLastError@0
  003cc	89 45 d0	 mov	 DWORD PTR tv259[ebp], eax
  003cf	eb 17		 jmp	 SHORT $L40188
$L40187:
  003d1	e8 00 00 00 00	 call	 _GetLastError@0
  003d6	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  003db	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  003e0	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  003e5	89 45 d0	 mov	 DWORD PTR tv259[ebp], eax
$L40188:
  003e8	8b 45 d0	 mov	 eax, DWORD PTR tv259[ebp]
  003eb	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36338:

; 2186 :                 }
; 2187 :             }
; 2188 :         }
; 2189 :     }
; 2190 : 
; 2191 :     //
; 2192 :     // Download the image
; 2193 :     //
; 2194 :     
; 2195 :     if(SUCCEEDED(hr))

  003ee	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  003f2	7c 1f		 jl	 SHORT $L36388

; 2196 :     {
; 2197 :         hr = CDirectSound::m_pDirectSound->DownloadEffectsImage(pvImageData, dwImageSize, pEffectLoc, ppImageDesc);

  003f4	8b 4d 14	 mov	 ecx, DWORD PTR _ppImageDesc$[ebp]
  003f7	51		 push	 ecx
  003f8	8b 55 0c	 mov	 edx, DWORD PTR _pEffectLoc$[ebp]
  003fb	52		 push	 edx
  003fc	8b 45 fc	 mov	 eax, DWORD PTR _dwImageSize$[ebp]
  003ff	50		 push	 eax
  00400	8b 4d ec	 mov	 ecx, DWORD PTR _pvImageData$[ebp]
  00403	51		 push	 ecx
  00404	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A ; DirectSound::CDirectSound::m_pDirectSound
  0040a	52		 push	 edx
  0040b	e8 00 00 00 00	 call	 ?DownloadEffectsImage@CDirectSound@DirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z ; DirectSound::CDirectSound::DownloadEffectsImage
  00410	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L36388:

; 2198 :     }
; 2199 : 
; 2200 :     //
; 2201 :     // Clean up
; 2202 :     //
; 2203 : 
; 2204 :     if(dwFlags & XAUDIO_DOWNLOADFX_XBESECTION)

  00413	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00416	83 e0 01	 and	 eax, 1
  00419	85 c0		 test	 eax, eax
  0041b	74 17		 je	 SHORT $L36389

; 2205 :     {
; 2206 :         if(IS_VALID_HANDLE_VALUE(hImageFile))

  0041d	83 7d f8 00	 cmp	 DWORD PTR _hImageFile$[ebp], 0
  00421	74 0f		 je	 SHORT $L36391
  00423	83 7d f8 ff	 cmp	 DWORD PTR _hImageFile$[ebp], -1
  00427	74 09		 je	 SHORT $L36391

; 2207 :         {
; 2208 :             XFreeSectionByHandle(hImageFile);

  00429	8b 4d f8	 mov	 ecx, DWORD PTR _hImageFile$[ebp]
  0042c	51		 push	 ecx
  0042d	e8 00 00 00 00	 call	 _XFreeSectionByHandle@4
$L36391:

; 2209 :         }
; 2210 :     }
; 2211 :     else

  00432	eb 32		 jmp	 SHORT $L36392
$L36389:

; 2212 :     {
; 2213 :         MEMFREE(pvImageData);

  00434	83 7d ec 00	 cmp	 DWORD PTR _pvImageData$[ebp], 0
  00438	74 10		 je	 SHORT $L36393
  0043a	8b 55 ec	 mov	 edx, DWORD PTR _pvImageData$[ebp]
  0043d	52		 push	 edx
  0043e	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree
  00443	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pvImageData$[ebp], 0
$L36393:

; 2214 :         CLOSE_HANDLE(hImageFile);

  0044a	83 7d f8 00	 cmp	 DWORD PTR _hImageFile$[ebp], 0
  0044e	74 16		 je	 SHORT $L36392
  00450	83 7d f8 ff	 cmp	 DWORD PTR _hImageFile$[ebp], -1
  00454	74 10		 je	 SHORT $L36392
  00456	8b 45 f8	 mov	 eax, DWORD PTR _hImageFile$[ebp]
  00459	50		 push	 eax
  0045a	e8 00 00 00 00	 call	 _CloseHandle@4
  0045f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hImageFile$[ebp], 0
$L36392:

; 2215 :     }
; 2216 : 
; 2217 :     DPF_LEAVE_HRESULT(hr);
; 2218 : 
; 2219 :     return hr;

  00466	8b 4d f4	 mov	 ecx, DWORD PTR _hr$[ebp]
  00469	89 4d e8	 mov	 DWORD PTR $T40189[ebp], ecx
  0046c	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0046f	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00474	8b 45 e8	 mov	 eax, DWORD PTR $T40189[ebp]

; 2220 : }

  00477	8b e5		 mov	 esp, ebp
  00479	5d		 pop	 ebp
  0047a	c2 10 00	 ret	 16			; 00000010H
_XAudioDownloadEffectsImage@16 ENDP
DSOUND	ENDS
PUBLIC	_XWaveFileCreateMediaObject@12
PUBLIC	?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPBD@Z ; DirectSound::CWaveFileMediaObject::Initialize
PUBLIC	??_C@_0BL@KKIBJCHH@XWaveFileCreateMediaObject?$AA@ ; `string'
PUBLIC	??_C@_0BH@CHEELPJG@No?5file?5name?5specified?$AA@ ; `string'
PUBLIC	??_C@_0CB@EMKKKBHF@No?5media?5object?5pointer?5supplied@ ; `string'
PUBLIC	??_C@_0BF@JHBNNOBF@CWaveFileMediaObject?$AA@	; `string'
PUBLIC	?__AddRef@DirectSound@@YGPAVCWaveFileMediaObject@1@PAV21@@Z ; DirectSound::__AddRef
EXTRN	??0CWaveFileMediaObject@DirectSound@@QAE@XZ:NEAR ; DirectSound::CWaveFileMediaObject::CWaveFileMediaObject
;	COMDAT ??_C@_0BL@KKIBJCHH@XWaveFileCreateMediaObject?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@KKIBJCHH@XWaveFileCreateMediaObject?$AA@ DB 'XWaveFileCreateMed'
	DB	'iaObject', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@CHEELPJG@No?5file?5name?5specified?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@CHEELPJG@No?5file?5name?5specified?$AA@ DB 'No file name specif'
	DB	'ied', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@EMKKKBHF@No?5media?5object?5pointer?5supplied@
DSOUND_RD	SEGMENT
??_C@_0CB@EMKKKBHF@No?5media?5object?5pointer?5supplied@ DB 'No media obj'
	DB	'ect pointer supplied', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@JHBNNOBF@CWaveFileMediaObject?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@JHBNNOBF@CWaveFileMediaObject?$AA@ DB 'CWaveFileMediaObject', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _XWaveFileCreateMediaObject@12
DSOUND	SEGMENT
tv88 = -16
$T40193 = -12
_hr$ = -8
_pMediaObject$ = -4
_pszFileName$ = 8
_ppwfxFormat$ = 12
_ppMediaObject$ = 16
_XWaveFileCreateMediaObject@12 PROC NEAR		; COMDAT

; 2255 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2256 :     CWaveFileMediaObject *  pMediaObject;
; 2257 :     HRESULT                 hr;
; 2258 : 
; 2259 :     DPF_ENTER();
; 2260 : 
; 2261 : #ifdef VALIDATE_PARAMETERS
; 2262 : 
; 2263 :     if(!pszFileName)

  00006	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  0000a	75 2d		 jne	 SHORT $L36404

; 2264 :     {
; 2265 :         DPF_ERROR("No file name specified");

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@KKIBJCHH@XWaveFileCreateMediaObject?$AA@
  00016	68 d9 08 00 00	 push	 2265			; 000008d9H
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00020	6a 01		 push	 1
  00022	6a 09		 push	 9
  00024	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@CHEELPJG@No?5file?5name?5specified?$AA@
  00031	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00036	83 c4 04	 add	 esp, 4
$L36404:

; 2266 :     }
; 2267 : 
; 2268 :     if(!ppMediaObject)

  00039	83 7d 10 00	 cmp	 DWORD PTR _ppMediaObject$[ebp], 0
  0003d	75 2d		 jne	 SHORT $L36407

; 2269 :     {
; 2270 :         DPF_ERROR("No media object pointer supplied");

  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@KKIBJCHH@XWaveFileCreateMediaObject?$AA@
  00049	68 de 08 00 00	 push	 2270			; 000008deH
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00053	6a 01		 push	 1
  00055	6a 09		 push	 9
  00057	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005c	83 c4 18	 add	 esp, 24			; 00000018H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@EMKKKBHF@No?5media?5object?5pointer?5supplied@
  00064	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00069	83 c4 04	 add	 esp, 4
$L36407:

; 2271 :     }
; 2272 : 
; 2273 : #endif // VALIDATE_PARAMETERS
; 2274 :     
; 2275 :     hr = HRFROMP(pMediaObject = NEW(CWaveFileMediaObject));

  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JHBNNOBF@CWaveFileMediaObject?$AA@
  00071	68 e3 08 00 00	 push	 2275			; 000008e3H
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0007b	6a 50		 push	 80			; 00000050H
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00082	83 c4 10	 add	 esp, 16			; 00000010H
  00085	89 45 f4	 mov	 DWORD PTR $T40193[ebp], eax
  00088	83 7d f4 00	 cmp	 DWORD PTR $T40193[ebp], 0
  0008c	74 0d		 je	 SHORT $L40194
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR $T40193[ebp]
  00091	e8 00 00 00 00	 call	 ??0CWaveFileMediaObject@DirectSound@@QAE@XZ ; DirectSound::CWaveFileMediaObject::CWaveFileMediaObject
  00096	89 45 f0	 mov	 DWORD PTR tv88[ebp], eax
  00099	eb 07		 jmp	 SHORT $L40195
$L40194:
  0009b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L40195:
  000a2	8b 45 f0	 mov	 eax, DWORD PTR tv88[ebp]
  000a5	89 45 fc	 mov	 DWORD PTR _pMediaObject$[ebp], eax
  000a8	33 c9		 xor	 ecx, ecx
  000aa	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  000ae	0f 95 c1	 setne	 cl
  000b1	49		 dec	 ecx
  000b2	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  000b8	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 2276 : 
; 2277 :     if(SUCCEEDED(hr))

  000bb	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000bf	7c 10		 jl	 SHORT $L36415

; 2278 :     {
; 2279 :         hr = pMediaObject->Initialize(pszFileName);

  000c1	8b 55 08	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  000c4	52		 push	 edx
  000c5	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPBD@Z ; DirectSound::CWaveFileMediaObject::Initialize
  000ce	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36415:

; 2280 :     }
; 2281 : 
; 2282 :     if(SUCCEEDED(hr) && ppwfxFormat)

  000d1	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d5	7c 19		 jl	 SHORT $L36417
  000d7	83 7d 0c 00	 cmp	 DWORD PTR _ppwfxFormat$[ebp], 0
  000db	74 13		 je	 SHORT $L36417

; 2283 :     {
; 2284 :         hr = pMediaObject->GetFormat(ppwfxFormat);

  000dd	8b 4d 0c	 mov	 ecx, DWORD PTR _ppwfxFormat$[ebp]
  000e0	51		 push	 ecx
  000e1	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  000e4	8b 02		 mov	 eax, DWORD PTR [edx]
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  000e9	51		 push	 ecx
  000ea	ff 50 24	 call	 DWORD PTR [eax+36]
  000ed	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36417:

; 2285 :     }
; 2286 : 
; 2287 :     if(SUCCEEDED(hr))

  000f0	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f4	7c 0e		 jl	 SHORT $L36419

; 2288 :     {
; 2289 :         *ppMediaObject = ADDREF(pMediaObject);

  000f6	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCWaveFileMediaObject@1@PAV21@@Z ; DirectSound::__AddRef
  000ff	8b 4d 10	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  00102	89 01		 mov	 DWORD PTR [ecx], eax
$L36419:

; 2290 :     }
; 2291 : 
; 2292 :     RELEASE(pMediaObject);

  00104	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00108	74 13		 je	 SHORT $L36424
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  0010d	8b 02		 mov	 eax, DWORD PTR [edx]
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00112	51		 push	 ecx
  00113	ff 50 04	 call	 DWORD PTR [eax+4]
  00116	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L36424:

; 2293 : 
; 2294 :     DPF_LEAVE_HRESULT(hr);
; 2295 : 
; 2296 :     return hr;

  0011d	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2297 : }

  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 0c 00	 ret	 12			; 0000000cH
_XWaveFileCreateMediaObject@12 ENDP
DSOUND	ENDS
EXTRN	?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z:NEAR	; WaveLoader::CWaveFile::Open
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\wavexmo.h
;	COMDAT ?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPBD@Z
DSOUND	SEGMENT
_this$ = 8
_pszFileName$ = 12
?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPBD@Z PROC NEAR ; DirectSound::CWaveFileMediaObject::Initialize, COMDAT

; 71   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :         return CWaveFile::Open(pszFileName, NULL);

  00003	6a 00		 push	 0
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z ; WaveLoader::CWaveFile::Open

; 73   :     }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPBD@Z ENDP ; DirectSound::CWaveFileMediaObject::Initialize
DSOUND	ENDS
PUBLIC	_XWaveFileCreateMediaObjectEx@12
PUBLIC	?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPAX@Z ; DirectSound::CWaveFileMediaObject::Initialize
PUBLIC	??_C@_0BN@OPMIALAN@XWaveFileCreateMediaObjectEx?$AA@ ; `string'
PUBLIC	??_C@_0CB@DOHCIFPB@No?5file?5name?5or?5handle?5specified@ ; `string'
PUBLIC	??_C@_0CE@DEIACGD@Both?5file?5name?5and?5handle?5specif@ ; `string'
;	COMDAT ??_C@_0BN@OPMIALAN@XWaveFileCreateMediaObjectEx?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BN@OPMIALAN@XWaveFileCreateMediaObjectEx?$AA@ DB 'XWaveFileCreateM'
	DB	'ediaObjectEx', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@DOHCIFPB@No?5file?5name?5or?5handle?5specified@
DSOUND_RD	SEGMENT
??_C@_0CB@DOHCIFPB@No?5file?5name?5or?5handle?5specified@ DB 'No file nam'
	DB	'e or handle specified', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@DEIACGD@Both?5file?5name?5and?5handle?5specif@
DSOUND_RD	SEGMENT
??_C@_0CE@DEIACGD@Both?5file?5name?5and?5handle?5specif@ DB 'Both file na'
	DB	'me and handle specified', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _XWaveFileCreateMediaObjectEx@12
DSOUND	SEGMENT
tv132 = -16
$T40202 = -12
_hr$ = -8
_pMediaObject$ = -4
_pszFileName$ = 8
_hFile$ = 12
_ppMediaObject$ = 16
_XWaveFileCreateMediaObjectEx@12 PROC NEAR		; COMDAT

; 2330 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2331 :     CWaveFileMediaObject *  pMediaObject;
; 2332 :     HRESULT                 hr;
; 2333 : 
; 2334 :     DPF_ENTER();
; 2335 :     
; 2336 : #ifdef VALIDATE_PARAMETERS
; 2337 : 
; 2338 :     if(!pszFileName && !IS_VALID_HANDLE_VALUE(hFile))

  00006	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  0000a	75 39		 jne	 SHORT $L36433
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00010	74 06		 je	 SHORT $L36434
  00012	83 7d 0c ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00016	75 2d		 jne	 SHORT $L36433
$L36434:

; 2339 :     {
; 2340 :         DPF_ERROR("No file name or handle specified");

  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@OPMIALAN@XWaveFileCreateMediaObjectEx?$AA@
  00022	68 24 09 00 00	 push	 2340			; 00000924H
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002c	6a 01		 push	 1
  0002e	6a 09		 push	 9
  00030	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@DOHCIFPB@No?5file?5name?5or?5handle?5specified@
  0003d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00042	83 c4 04	 add	 esp, 4
$L36433:

; 2341 :     }
; 2342 : 
; 2343 :     if(pszFileName && IS_VALID_HANDLE_VALUE(hFile))

  00045	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  00049	74 39		 je	 SHORT $L36438
  0004b	83 7d 0c 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  0004f	74 33		 je	 SHORT $L36438
  00051	83 7d 0c ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00055	74 2d		 je	 SHORT $L36438

; 2344 :     {
; 2345 :         DPF_ERROR("Both file name and handle specified");

  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@OPMIALAN@XWaveFileCreateMediaObjectEx?$AA@
  00061	68 29 09 00 00	 push	 2345			; 00000929H
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006b	6a 01		 push	 1
  0006d	6a 09		 push	 9
  0006f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00074	83 c4 18	 add	 esp, 24			; 00000018H
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@DEIACGD@Both?5file?5name?5and?5handle?5specif@
  0007c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00081	83 c4 04	 add	 esp, 4
$L36438:

; 2346 :     }
; 2347 : 
; 2348 :     if(!ppMediaObject)

  00084	83 7d 10 00	 cmp	 DWORD PTR _ppMediaObject$[ebp], 0
  00088	75 2d		 jne	 SHORT $L36440

; 2349 :     {
; 2350 :         DPF_ERROR("No media object pointer supplied");

  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@OPMIALAN@XWaveFileCreateMediaObjectEx?$AA@
  00094	68 2e 09 00 00	 push	 2350			; 0000092eH
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0009e	6a 01		 push	 1
  000a0	6a 09		 push	 9
  000a2	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a7	83 c4 18	 add	 esp, 24			; 00000018H
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@EMKKKBHF@No?5media?5object?5pointer?5supplied@
  000af	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b4	83 c4 04	 add	 esp, 4
$L36440:

; 2351 :     }
; 2352 : 
; 2353 : #endif // VALIDATE_PARAMETERS
; 2354 :     
; 2355 :     hr = HRFROMP(pMediaObject = NEW(CWaveFileMediaObject));

  000b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JHBNNOBF@CWaveFileMediaObject?$AA@
  000bc	68 33 09 00 00	 push	 2355			; 00000933H
  000c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c6	6a 50		 push	 80			; 00000050H
  000c8	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  000cd	83 c4 10	 add	 esp, 16			; 00000010H
  000d0	89 45 f4	 mov	 DWORD PTR $T40202[ebp], eax
  000d3	83 7d f4 00	 cmp	 DWORD PTR $T40202[ebp], 0
  000d7	74 0d		 je	 SHORT $L40203
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR $T40202[ebp]
  000dc	e8 00 00 00 00	 call	 ??0CWaveFileMediaObject@DirectSound@@QAE@XZ ; DirectSound::CWaveFileMediaObject::CWaveFileMediaObject
  000e1	89 45 f0	 mov	 DWORD PTR tv132[ebp], eax
  000e4	eb 07		 jmp	 SHORT $L40204
$L40203:
  000e6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$L40204:
  000ed	8b 45 f0	 mov	 eax, DWORD PTR tv132[ebp]
  000f0	89 45 fc	 mov	 DWORD PTR _pMediaObject$[ebp], eax
  000f3	33 c9		 xor	 ecx, ecx
  000f5	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  000f9	0f 95 c1	 setne	 cl
  000fc	49		 dec	 ecx
  000fd	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00103	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 2356 : 
; 2357 :     if(SUCCEEDED(hr))

  00106	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010a	7c 28		 jl	 SHORT $L36446

; 2358 :     {
; 2359 :         if(pszFileName)

  0010c	83 7d 08 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  00110	74 12		 je	 SHORT $L36447

; 2360 :         {
; 2361 :             hr = pMediaObject->Initialize(pszFileName);

  00112	8b 55 08	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  00115	52		 push	 edx
  00116	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPBD@Z ; DirectSound::CWaveFileMediaObject::Initialize
  0011f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2362 :         }
; 2363 :         else

  00122	eb 10		 jmp	 SHORT $L36446
$L36447:

; 2364 :         {
; 2365 :             hr = pMediaObject->Initialize(hFile);

  00124	8b 4d 0c	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00127	51		 push	 ecx
  00128	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  0012b	52		 push	 edx
  0012c	e8 00 00 00 00	 call	 ?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPAX@Z ; DirectSound::CWaveFileMediaObject::Initialize
  00131	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36446:

; 2366 :         }
; 2367 :     }
; 2368 : 
; 2369 :     if(SUCCEEDED(hr))

  00134	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00138	7c 0e		 jl	 SHORT $L36450

; 2370 :     {
; 2371 :         *ppMediaObject = ADDREF(pMediaObject);

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCWaveFileMediaObject@1@PAV21@@Z ; DirectSound::__AddRef
  00143	8b 4d 10	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  00146	89 01		 mov	 DWORD PTR [ecx], eax
$L36450:

; 2372 :     }
; 2373 : 
; 2374 :     RELEASE(pMediaObject);

  00148	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  0014c	74 13		 je	 SHORT $L36454
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00151	8b 02		 mov	 eax, DWORD PTR [edx]
  00153	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00156	51		 push	 ecx
  00157	ff 50 04	 call	 DWORD PTR [eax+4]
  0015a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L36454:

; 2375 : 
; 2376 :     DPF_LEAVE_HRESULT(hr);
; 2377 : 
; 2378 :     return hr;

  00161	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2379 : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 0c 00	 ret	 12			; 0000000cH
_XWaveFileCreateMediaObjectEx@12 ENDP
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\wavexmo.h
DSOUND	ENDS
;	COMDAT ?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPAX@Z
DSOUND	SEGMENT
_this$ = 8
_hFile$ = 12
?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPAX@Z PROC NEAR ; DirectSound::CWaveFileMediaObject::Initialize, COMDAT

; 76   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 77   :         return CWaveFile::Open(NULL, hFile);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _hFile$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z ; WaveLoader::CWaveFile::Open

; 78   :     }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?Initialize@CWaveFileMediaObject@DirectSound@@QAGJPAX@Z ENDP ; DirectSound::CWaveFileMediaObject::Initialize
DSOUND	ENDS
PUBLIC	_XFileCreateMediaObject@24
PUBLIC	?Initialize@CFileMediaObject@DirectSound@@QAGJPBDKKKK@Z ; DirectSound::CFileMediaObject::Initialize
PUBLIC	??_C@_0BB@FGJODPMK@CFileMediaObject?$AA@	; `string'
PUBLIC	?__AddRef@DirectSound@@YGPAVCFileMediaObject@1@PAV21@@Z ; DirectSound::__AddRef
EXTRN	??0CFileMediaObject@DirectSound@@QAE@XZ:NEAR	; DirectSound::CFileMediaObject::CFileMediaObject
;	COMDAT ??_C@_0BB@FGJODPMK@CFileMediaObject?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BB@FGJODPMK@CFileMediaObject?$AA@ DB 'CFileMediaObject', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _XFileCreateMediaObject@24
DSOUND	SEGMENT
tv72 = -16
$T40211 = -12
_hr$ = -8
_pMediaObject$ = -4
_pszFileName$ = 8
_dwDesiredAccess$ = 12
_dwShareMode$ = 16
_dwCreationDisposition$ = 20
_dwFlagsAndAttributes$ = 24
_ppMediaObject$ = 28
_XFileCreateMediaObject@24 PROC NEAR			; COMDAT

; 2416 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2417 :     CFileMediaObject *      pMediaObject;
; 2418 :     HRESULT                 hr;
; 2419 : 
; 2420 :     DPF_ENTER();
; 2421 :     
; 2422 :     hr = HRFROMP(pMediaObject = NEW(CFileMediaObject));

  00006	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@FGJODPMK@CFileMediaObject?$AA@
  0000b	68 76 09 00 00	 push	 2422			; 00000976H
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00015	6a 14		 push	 20			; 00000014H
  00017	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	89 45 f4	 mov	 DWORD PTR $T40211[ebp], eax
  00022	83 7d f4 00	 cmp	 DWORD PTR $T40211[ebp], 0
  00026	74 0d		 je	 SHORT $L40212
  00028	8b 4d f4	 mov	 ecx, DWORD PTR $T40211[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CFileMediaObject@DirectSound@@QAE@XZ ; DirectSound::CFileMediaObject::CFileMediaObject
  00030	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  00033	eb 07		 jmp	 SHORT $L40213
$L40212:
  00035	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L40213:
  0003c	8b 45 f0	 mov	 eax, DWORD PTR tv72[ebp]
  0003f	89 45 fc	 mov	 DWORD PTR _pMediaObject$[ebp], eax
  00042	33 c9		 xor	 ecx, ecx
  00044	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00048	0f 95 c1	 setne	 cl
  0004b	49		 dec	 ecx
  0004c	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00052	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 2423 : 
; 2424 :     if(SUCCEEDED(hr))

  00055	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00059	7c 20		 jl	 SHORT $L36471

; 2425 :     {
; 2426 :         hr = pMediaObject->Initialize(pszFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, dwFlagsAndAttributes);

  0005b	8b 55 18	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 14	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00062	50		 push	 eax
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 0c	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 ?Initialize@CFileMediaObject@DirectSound@@QAGJPBDKKKK@Z ; DirectSound::CFileMediaObject::Initialize
  00078	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36471:

; 2427 :     }
; 2428 : 
; 2429 :     if(SUCCEEDED(hr))

  0007b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007f	7c 0e		 jl	 SHORT $L36473

; 2430 :     {
; 2431 :         *ppMediaObject = ADDREF(pMediaObject);

  00081	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCFileMediaObject@1@PAV21@@Z ; DirectSound::__AddRef
  0008a	8b 4d 1c	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  0008d	89 01		 mov	 DWORD PTR [ecx], eax
$L36473:

; 2432 :     }
; 2433 : 
; 2434 :     RELEASE(pMediaObject);

  0008f	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00093	74 13		 je	 SHORT $L36478
  00095	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00098	8b 02		 mov	 eax, DWORD PTR [edx]
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  0009d	51		 push	 ecx
  0009e	ff 50 04	 call	 DWORD PTR [eax+4]
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L36478:

; 2435 : 
; 2436 :     DPF_LEAVE_HRESULT(hr);
; 2437 : 
; 2438 :     return hr;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2439 : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 18 00	 ret	 24			; 00000018H
_XFileCreateMediaObject@24 ENDP
DSOUND	ENDS
EXTRN	?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z:NEAR ; WaveLoader::CStdFileStream::Open
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\wavexmo.h
;	COMDAT ?Initialize@CFileMediaObject@DirectSound@@QAGJPBDKKKK@Z
DSOUND	SEGMENT
_this$ = 8
_pszFileName$ = 12
_dwDesiredAccess$ = 16
_dwShareMode$ = 20
_dwCreationDisposition$ = 24
_dwFlagsAndAttributes$ = 28
?Initialize@CFileMediaObject@DirectSound@@QAGJPBDKKKK@Z PROC NEAR ; DirectSound::CFileMediaObject::Initialize, COMDAT

; 157  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 158  :         return CStdFileStream::Open(pszFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, dwFlagsAndAttributes);

  00003	8b 45 1c	 mov	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 18	 mov	 ecx, DWORD PTR _dwCreationDisposition$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 14	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 10	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00016	51		 push	 ecx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001d	e8 00 00 00 00	 call	 ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z ; WaveLoader::CStdFileStream::Open

; 159  :     }

  00022	5d		 pop	 ebp
  00023	c2 18 00	 ret	 24			; 00000018H
?Initialize@CFileMediaObject@DirectSound@@QAGJPBDKKKK@Z ENDP ; DirectSound::CFileMediaObject::Initialize
DSOUND	ENDS
PUBLIC	_XFileCreateMediaObjectEx@8
PUBLIC	?Initialize@CFileMediaObject@DirectSound@@QAGJPAX@Z ; DirectSound::CFileMediaObject::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT _XFileCreateMediaObjectEx@8
DSOUND	SEGMENT
tv72 = -16
$T40220 = -12
_hr$ = -8
_pMediaObject$ = -4
_hFile$ = 8
_ppMediaObject$ = 12
_XFileCreateMediaObjectEx@8 PROC NEAR			; COMDAT

; 2468 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2469 :     CFileMediaObject *      pMediaObject;
; 2470 :     HRESULT                 hr;
; 2471 : 
; 2472 :     DPF_ENTER();
; 2473 :     
; 2474 :     hr = HRFROMP(pMediaObject = NEW(CFileMediaObject));

  00006	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@FGJODPMK@CFileMediaObject?$AA@
  0000b	68 aa 09 00 00	 push	 2474			; 000009aaH
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00015	6a 14		 push	 20			; 00000014H
  00017	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	89 45 f4	 mov	 DWORD PTR $T40220[ebp], eax
  00022	83 7d f4 00	 cmp	 DWORD PTR $T40220[ebp], 0
  00026	74 0d		 je	 SHORT $L40221
  00028	8b 4d f4	 mov	 ecx, DWORD PTR $T40220[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CFileMediaObject@DirectSound@@QAE@XZ ; DirectSound::CFileMediaObject::CFileMediaObject
  00030	89 45 f0	 mov	 DWORD PTR tv72[ebp], eax
  00033	eb 07		 jmp	 SHORT $L40222
$L40221:
  00035	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$L40222:
  0003c	8b 45 f0	 mov	 eax, DWORD PTR tv72[ebp]
  0003f	89 45 fc	 mov	 DWORD PTR _pMediaObject$[ebp], eax
  00042	33 c9		 xor	 ecx, ecx
  00044	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00048	0f 95 c1	 setne	 cl
  0004b	49		 dec	 ecx
  0004c	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00052	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 2475 : 
; 2476 :     if(SUCCEEDED(hr))

  00055	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00059	7c 10		 jl	 SHORT $L36490

; 2477 :     {
; 2478 :         hr = pMediaObject->Initialize(hFile);

  0005b	8b 55 08	 mov	 edx, DWORD PTR _hFile$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?Initialize@CFileMediaObject@DirectSound@@QAGJPAX@Z ; DirectSound::CFileMediaObject::Initialize
  00068	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36490:

; 2479 :     }
; 2480 : 
; 2481 :     if(SUCCEEDED(hr))

  0006b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0006f	7c 0e		 jl	 SHORT $L36492

; 2482 :     {
; 2483 :         *ppMediaObject = ADDREF(pMediaObject);

  00071	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCFileMediaObject@1@PAV21@@Z ; DirectSound::__AddRef
  0007a	8b 55 0c	 mov	 edx, DWORD PTR _ppMediaObject$[ebp]
  0007d	89 02		 mov	 DWORD PTR [edx], eax
$L36492:

; 2484 :     }
; 2485 : 
; 2486 :     RELEASE(pMediaObject);

  0007f	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00083	74 13		 je	 SHORT $L36496
  00085	8b 45 fc	 mov	 eax, DWORD PTR _pMediaObject$[ebp]
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  0008d	52		 push	 edx
  0008e	ff 51 04	 call	 DWORD PTR [ecx+4]
  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L36496:

; 2487 : 
; 2488 :     DPF_LEAVE_HRESULT(hr);
; 2489 : 
; 2490 :     return hr;

  00098	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2491 : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8
_XFileCreateMediaObjectEx@8 ENDP
DSOUND	ENDS
EXTRN	?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z:NEAR ; WaveLoader::CStdFileStream::Attach
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\wavexmo.h
;	COMDAT ?Initialize@CFileMediaObject@DirectSound@@QAGJPAX@Z
DSOUND	SEGMENT
_this$ = 8
_hFile$ = 12
?Initialize@CFileMediaObject@DirectSound@@QAGJPAX@Z PROC NEAR ; DirectSound::CFileMediaObject::Initialize, COMDAT

; 162  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  :         CStdFileStream::Attach(hFile);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _hFile$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ?Attach@CStdFileStream@WaveLoader@@QAEXPAX@Z ; WaveLoader::CStdFileStream::Attach

; 164  :         return DS_OK;

  00012	33 c0		 xor	 eax, eax

; 165  :     }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
?Initialize@CFileMediaObject@DirectSound@@QAGJPAX@Z ENDP ; DirectSound::CFileMediaObject::Initialize
DSOUND	ENDS
PUBLIC	_Ac97CreateMediaObject@16
PUBLIC	??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@		; `string'
PUBLIC	?__AddRef@DirectSound@@YGPAVCAc97MediaObject@1@PAV21@@Z ; DirectSound::__AddRef
EXTRN	??0CAc97MediaObject@DirectSound@@QAE@XZ:NEAR	; DirectSound::CAc97MediaObject::CAc97MediaObject
;	COMDAT ??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@ DB 'CAc97MediaObject', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT _Ac97CreateMediaObject@16
DSOUND	SEGMENT
tv75 = -24
$T40232 = -20
$T40229 = -16
___AutoLock$ = -12
_hr$ = -8
_pMediaObject$ = -4
_dwChannel$ = 8
_pfnCallback$ = 12
_pvCallbackContext$ = 16
_ppMediaObject$ = 20
_Ac97CreateMediaObject@16 PROC NEAR			; COMDAT

; 2523 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 2524 :     CAc97MediaObject *          pMediaObject    = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0

; 2525 :     HRESULT                     hr;
; 2526 :     
; 2527 :     DPF_ENTER();
; 2528 :     ENTER_EXTERNAL_FUNCTION();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 2529 : 
; 2530 :     //
; 2531 :     // Create the AC97 media object
; 2532 :     //
; 2533 : 
; 2534 :     hr = HRFROMP(pMediaObject = NEW(CAc97MediaObject));

  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@GBGJNGD@CAc97MediaObject?$AA@
  0001a	68 e6 09 00 00	 push	 2534			; 000009e6H
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00024	6a 38		 push	 56			; 00000038H
  00026	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	89 45 f0	 mov	 DWORD PTR $T40229[ebp], eax
  00031	83 7d f0 00	 cmp	 DWORD PTR $T40229[ebp], 0
  00035	74 0d		 je	 SHORT $L40230
  00037	8b 4d f0	 mov	 ecx, DWORD PTR $T40229[ebp]
  0003a	e8 00 00 00 00	 call	 ??0CAc97MediaObject@DirectSound@@QAE@XZ ; DirectSound::CAc97MediaObject::CAc97MediaObject
  0003f	89 45 e8	 mov	 DWORD PTR tv75[ebp], eax
  00042	eb 07		 jmp	 SHORT $L40231
$L40230:
  00044	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$L40231:
  0004b	8b 45 e8	 mov	 eax, DWORD PTR tv75[ebp]
  0004e	89 45 fc	 mov	 DWORD PTR _pMediaObject$[ebp], eax
  00051	33 c9		 xor	 ecx, ecx
  00053	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  00057	0f 95 c1	 setne	 cl
  0005a	49		 dec	 ecx
  0005b	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00061	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 2535 :    
; 2536 :     if(SUCCEEDED(hr))

  00064	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00068	7c 1b		 jl	 SHORT $L36512

; 2537 :     {
; 2538 :         hr = pMediaObject->Initialize(dwChannel, pfnCallback, pvCallbackContext);

  0006a	8b 55 10	 mov	 edx, DWORD PTR _pvCallbackContext$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _pfnCallback$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _dwChannel$[ebp]
  00075	51		 push	 ecx
  00076	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  00079	8b 02		 mov	 eax, DWORD PTR [edx]
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  0007e	51		 push	 ecx
  0007f	ff 50 24	 call	 DWORD PTR [eax+36]
  00082	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36512:

; 2539 :     }
; 2540 : 
; 2541 :     if(SUCCEEDED(hr))

  00085	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	7c 0e		 jl	 SHORT $L36514

; 2542 :     {
; 2543 :         *ppMediaObject = ADDREF(pMediaObject);

  0008b	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCAc97MediaObject@1@PAV21@@Z ; DirectSound::__AddRef
  00094	8b 4d 14	 mov	 ecx, DWORD PTR _ppMediaObject$[ebp]
  00097	89 01		 mov	 DWORD PTR [ecx], eax
$L36514:

; 2544 :     }
; 2545 : 
; 2546 :     RELEASE(pMediaObject);

  00099	83 7d fc 00	 cmp	 DWORD PTR _pMediaObject$[ebp], 0
  0009d	74 13		 je	 SHORT $L36519
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _pMediaObject$[ebp]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR _pMediaObject$[ebp]
  000a7	51		 push	 ecx
  000a8	ff 50 04	 call	 DWORD PTR [eax+4]
  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pMediaObject$[ebp], 0
$L36519:

; 2547 : 
; 2548 :     DPF_LEAVE_HRESULT(hr);
; 2549 : 
; 2550 :     return hr;

  000b2	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  000b5	89 55 ec	 mov	 DWORD PTR $T40232[ebp], edx
  000b8	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000bb	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000c0	8b 45 ec	 mov	 eax, DWORD PTR $T40232[ebp]

; 2551 : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 10 00	 ret	 16			; 00000010H
_Ac97CreateMediaObject@16 ENDP
DSOUND	ENDS
PUBLIC	_DirectSoundDumpMemoryUsage@4
EXTRN	?DumpMemoryUsage@CMemoryManager@DirectSound@@SGXH@Z:NEAR ; DirectSound::CMemoryManager::DumpMemoryUsage
; Function compile flags: /Odt
;	COMDAT _DirectSoundDumpMemoryUsage@4
DSOUND	SEGMENT
___AutoLock$ = -4
_fAssertNone$ = 8
_DirectSoundDumpMemoryUsage@4 PROC NEAR			; COMDAT

; 2577 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2578 :     DPF_ENTER();
; 2579 :     ENTER_EXTERNAL_FUNCTION();

  00004	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00007	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock

; 2580 : 
; 2581 :     CMemoryManager::DumpMemoryUsage(fAssertNone);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _fAssertNone$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?DumpMemoryUsage@CMemoryManager@DirectSound@@SGXH@Z ; DirectSound::CMemoryManager::DumpMemoryUsage

; 2582 : 
; 2583 :     DPF_LEAVE_VOID();
; 2584 : }

  00015	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00018	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
_DirectSoundDumpMemoryUsage@4 ENDP
DSOUND	ENDS
PUBLIC	??0CDirectSoundSettings@DirectSound@@QAE@XZ	; DirectSound::CDirectSoundSettings::CDirectSoundSettings
PUBLIC	?SetEffectImageLocations@CDirectSoundSettings@DirectSound@@QAEXPBU_DSEFFECTIMAGELOC@@@Z ; DirectSound::CDirectSoundSettings::SetEffectImageLocations
PUBLIC	??_7CDirectSoundSettings@DirectSound@@6B@	; DirectSound::CDirectSoundSettings::`vftable'
PUBLIC	??_GCDirectSoundSettings@DirectSound@@UAEPAXI@Z	; DirectSound::CDirectSoundSettings::`scalar deleting destructor'
PUBLIC	??0DS3DLISTENERPARAMS@@QAE@XZ			; DS3DLISTENERPARAMS::DS3DLISTENERPARAMS
PUBLIC	??0CRefCount@DirectSound@@QAE@K@Z		; DirectSound::CRefCount::CRefCount
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
EXTRN	_XGetAudioFlags@0:NEAR
EXTRN	_DirectSoundDefault3DListener:BYTE
EXTRN	_DirectSoundI3DL2ListenerPreset_Default:BYTE
EXTRN	??_ECDirectSoundSettings@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CDirectSoundSettings::`vector deleting destructor'
;	COMDAT ??_7CDirectSoundSettings@DirectSound@@6B@
CONST	SEGMENT
??_7CDirectSoundSettings@DirectSound@@6B@ DD FLAT:??_ECDirectSoundSettings@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundSettings::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSoundSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
??0CDirectSoundSettings@DirectSound@@QAE@XZ PROC NEAR	; DirectSound::CDirectSoundSettings::CDirectSoundSettings, COMDAT
; _this$ = ecx

; 2609 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0000b	6a 01		 push	 1
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundSettings@DirectSound@@6B@
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 34	 add	 ecx, 52			; 00000034H
  00024	e8 00 00 00 00	 call	 ??0DS3DLISTENERPARAMS@@QAE@XZ

; 2610 :     DWORD                   i;
; 2611 : 
; 2612 :     DPF_ENTER();
; 2613 : 
; 2614 : #ifndef MCPX_BOOT_LIB
; 2615 : 
; 2616 :     m_3dParams.HrtfParams = DirectSoundDefault3DListener;

  00029	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  0002c	83 c7 34	 add	 edi, 52			; 00000034H
  0002f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00034	be 00 00 00 00	 mov	 esi, OFFSET FLAT:_DirectSoundDefault3DListener
  00039	f3 a5		 rep movsd

; 2617 :     m_3dParams.I3dl2Params = DirectSoundI3DL2ListenerPreset_Default;

  0003b	8b 7d f8	 mov	 edi, DWORD PTR _this$[ebp]
  0003e	83 c7 74	 add	 edi, 116		; 00000074H
  00041	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00046	be 00 00 00 00	 mov	 esi, OFFSET FLAT:_DirectSoundI3DL2ListenerPreset_Default
  0004b	f3 a5		 rep movsd

; 2618 : 
; 2619 : #endif // MCPX_BOOT_LIB
; 2620 : 
; 2621 :     //
; 2622 :     // Read the speaker configuration from the EEPROM
; 2623 :     //
; 2624 : 
; 2625 : #ifndef MCPX_BOOT_LIB
; 2626 : 
; 2627 :     if(DSSPEAKER_IS_VALID(g_dwDirectSoundOverrideSpeakerConfig))

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwDirectSoundOverrideSpeakerConfig
  00053	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00059	85 c9		 test	 ecx, ecx
  0005b	72 32		 jb	 SHORT $L36533
  0005d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwDirectSoundOverrideSpeakerConfig
  00063	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00069	83 fa 02	 cmp	 edx, 2
  0006c	77 21		 ja	 SHORT $L36533
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwDirectSoundOverrideSpeakerConfig
  00073	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00078	25 ff ff fc ff	 and	 eax, -196609		; fffcffffH
  0007d	85 c0		 test	 eax, eax
  0007f	75 0e		 jne	 SHORT $L36533

; 2628 :     {
; 2629 :         m_dwSpeakerConfig = g_dwDirectSoundOverrideSpeakerConfig;

  00081	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwDirectSoundOverrideSpeakerConfig
  0008a	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 2630 :     }
; 2631 :     else

  0008d	eb 0b		 jmp	 SHORT $L36534
$L36533:

; 2632 :     {
; 2633 :         m_dwSpeakerConfig = XAudioGetSpeakerConfig();

  0008f	e8 00 00 00 00	 call	 _XGetAudioFlags@0
  00094	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$L36534:

; 2634 :     }
; 2635 : 
; 2636 : #else // MCPX_BOOT_LIB
; 2637 : 
; 2638 :     m_dwSpeakerConfig = DSSPEAKER_STEREO;
; 2639 : 
; 2640 : #endif // MCPX_BOOT_LIB
; 2641 : 
; 2642 :     //
; 2643 :     // Set default mixbin headroom
; 2644 :     //
; 2645 : 
; 2646 :     for(i = 0; i < DSMIXBIN_SUBMIX; i++)

  0009a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a1	eb 09		 jmp	 SHORT $L36535
$L36536:
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000a6	83 c2 01	 add	 edx, 1
  000a9	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L36535:
  000ac	83 7d fc 1f	 cmp	 DWORD PTR _i$[ebp], 31	; 0000001fH
  000b0	73 0c		 jae	 SHORT $L36537

; 2647 :     {
; 2648 :         m_abMixBinHeadroom[i] = DSHEADROOM_DEFAULT;

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	03 45 fc	 add	 eax, DWORD PTR _i$[ebp]
  000b8	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 2649 :     }

  000bc	eb e5		 jmp	 SHORT $L36536
$L36537:

; 2650 : 
; 2651 :     m_abMixBinHeadroom[DSMIXBIN_SUBMIX] = 0;

  000be	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	c6 41 33 00	 mov	 BYTE PTR [ecx+51], 0

; 2652 : 
; 2653 :     //
; 2654 :     // Set default effect locations
; 2655 :     //
; 2656 : 
; 2657 :     SetEffectImageLocations(NULL);

  000c5	6a 00		 push	 0
  000c7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	e8 00 00 00 00	 call	 ?SetEffectImageLocations@CDirectSoundSettings@DirectSound@@QAEXPBU_DSEFFECTIMAGELOC@@@Z ; DirectSound::CDirectSoundSettings::SetEffectImageLocations

; 2658 : 
; 2659 :     DPF_LEAVE_VOID();
; 2660 : }

  000cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
??0CDirectSoundSettings@DirectSound@@QAE@XZ ENDP	; DirectSound::CDirectSoundSettings::CDirectSoundSettings
DSOUND	ENDS
PUBLIC	??_7CRefCount@DirectSound@@6B@			; DirectSound::CRefCount::`vftable'
PUBLIC	??_GCRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
CONST	SEGMENT
??_7CRefCount@DirectSound@@6B@ DD FLAT:??_ECRefCount@DirectSound@@UAEPAXI@Z ; DirectSound::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
DSOUND	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@DirectSound@@QAE@K@Z PROC NEAR		; DirectSound::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 38   :     }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@DirectSound@@QAE@K@Z ENDP			; DirectSound::CRefCount::CRefCount
DSOUND	ENDS
PUBLIC	??1CRefCount@DirectSound@@UAE@XZ		; DirectSound::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@DirectSound@@UAEPAXI@Z PROC NEAR		; DirectSound::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L30389
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L30389:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CRefCount::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
DSOUND	ENDS
;	COMDAT ??3@YAXPAX@Z
DSOUND	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
DSOUND	ENDS
PUBLIC	??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND_RD	SEGMENT
??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\refcount.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CRefCount@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@

; 42   :         ASSERT(!m_dwRefCount);

  00010	6a 2a		 push	 42			; 0000002aH
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 43   :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@DirectSound@@UAE@XZ ENDP			; DirectSound::CRefCount::~CRefCount
DSOUND	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
DSOUND	SEGMENT
tv84 = -12
$T40258 = -8
$T40257 = -4
_this$ = 8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@LDJKBAOD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L30406

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L30406

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T40258[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T40258[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T40257[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T40257[ebp], 0
  00058	74 11		 je	 SHORT $L40259
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T40257[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T40257[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L40260
$L40259:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L40260:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L30404
$L30406:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L30404:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
DSOUND	ENDS
PUBLIC	??1CDirectSoundSettings@DirectSound@@UAE@XZ	; DirectSound::CDirectSoundSettings::~CDirectSoundSettings
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSoundSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSoundSettings@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CDirectSoundSettings::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSoundSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundSettings::~CDirectSoundSettings
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L36541
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L36541:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCDirectSoundSettings@DirectSound@@UAEPAXI@Z ENDP	; DirectSound::CDirectSoundSettings::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??0_DS3DLISTENER@@QAE@XZ			; _DS3DLISTENER::_DS3DLISTENER
; Function compile flags: /Odt
;	COMDAT ??0DS3DLISTENERPARAMS@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0DS3DLISTENERPARAMS@@QAE@XZ PROC NEAR			; DS3DLISTENERPARAMS::DS3DLISTENERPARAMS, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0_DS3DLISTENER@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0DS3DLISTENERPARAMS@@QAE@XZ ENDP			; DS3DLISTENERPARAMS::DS3DLISTENERPARAMS
DSOUND	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odt
;	COMDAT ??0_DS3DLISTENER@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0_DS3DLISTENER@@QAE@XZ PROC NEAR			; _DS3DLISTENER::_DS3DLISTENER, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 10	 add	 ecx, 16			; 00000010H
  00018	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00023	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 28	 add	 ecx, 40			; 00000028H
  0002e	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??0_DS3DLISTENER@@QAE@XZ ENDP				; _DS3DLISTENER::_DS3DLISTENER
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\d3dx8math.h
DSOUND	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0D3DXVECTOR3@@QAE@XZ PROC NEAR			; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 103  :     D3DXVECTOR3() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND	ENDS
;	COMDAT ??1CDirectSoundSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CDirectSoundSettings@DirectSound@@UAE@XZ PROC NEAR	; DirectSound::CDirectSoundSettings::~CDirectSoundSettings, COMDAT
; _this$ = ecx

; 2685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundSettings@DirectSound@@6B@

; 2686 :     DPF_ENTER();
; 2687 :     DPF_LEAVE_VOID();
; 2688 : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CDirectSoundSettings@DirectSound@@UAE@XZ ENDP	; DirectSound::CDirectSoundSettings::~CDirectSoundSettings
DSOUND	ENDS
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetEffectImageLocations@CDirectSoundSettings@DirectSound@@QAEXPBU_DSEFFECTIMAGELOC@@@Z
DSOUND	SEGMENT
_this$ = -4
_pImageLoc$ = 8
?SetEffectImageLocations@CDirectSoundSettings@DirectSound@@QAEXPBU_DSEFFECTIMAGELOC@@@Z PROC NEAR ; DirectSound::CDirectSoundSettings::SetEffectImageLocations, COMDAT
; _this$ = ecx

; 2714 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2715 :     DPF_ENTER();
; 2716 : 
; 2717 :     if(pImageLoc)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pImageLoc$[ebp], 0
  0000b	74 17		 je	 SHORT $L36554

; 2718 :     {
; 2719 :         CopyMemory(&m_EffectLocations, pImageLoc, sizeof(*pImageLoc));

  0000d	6a 08		 push	 8
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pImageLoc$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 _memcpy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2720 :     }
; 2721 :     else

  00022	eb 16		 jmp	 SHORT $L36553
$L36554:

; 2722 :     {
; 2723 :         memset(&m_EffectLocations, 0xFF, sizeof(m_EffectLocations));

  00024	6a 08		 push	 8
  00026	68 ff 00 00 00	 push	 255			; 000000ffH
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	83 c2 0c	 add	 edx, 12			; 0000000cH
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
$L36553:

; 2724 :     }
; 2725 : 
; 2726 :     DPF_LEAVE_VOID();
; 2727 : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?SetEffectImageLocations@CDirectSoundSettings@DirectSound@@QAEXPBU_DSEFFECTIMAGELOC@@@Z ENDP ; DirectSound::CDirectSoundSettings::SetEffectImageLocations
DSOUND	ENDS
PUBLIC	??0?$CValidObject@$0EEFDEOEE@@DirectSound@@QAE@XZ ; DirectSound::CValidObject<1146310212>::CValidObject<1146310212>
PUBLIC	?AddRef@CDirectSound@DirectSound@@UAGKXZ	; DirectSound::CDirectSound::AddRef
PUBLIC	?Release@CDirectSound@DirectSound@@UAGKXZ	; DirectSound::CDirectSound::Release
PUBLIC	??_ECDirectSound@DirectSound@@W7AEPAXI@Z	; DirectSound::CDirectSound::`vector deleting destructor'
PUBLIC	??_7CDirectSound@DirectSound@@6B?$CValidObject@$0EEFDEOEE@@1@@ ; DirectSound::CDirectSound::`vftable'
PUBLIC	??_7CDirectSound@DirectSound@@6BCRefCount@1@@	; DirectSound::CDirectSound::`vftable'
PUBLIC	??_GCDirectSound@DirectSound@@UAEPAXI@Z		; DirectSound::CDirectSound::`scalar deleting destructor'
EXTRN	??_ECDirectSound@DirectSound@@UAEPAXI@Z:NEAR	; DirectSound::CDirectSound::`vector deleting destructor'
;	COMDAT ??_7CDirectSound@DirectSound@@6B?$CValidObject@$0EEFDEOEE@@1@@
CONST	SEGMENT
??_7CDirectSound@DirectSound@@6B?$CValidObject@$0EEFDEOEE@@1@@ DD FLAT:??_ECDirectSound@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSound::`vftable'
CONST	ENDS
;	COMDAT ??_7CDirectSound@DirectSound@@6BCRefCount@1@@
CONST	SEGMENT
??_7CDirectSound@DirectSound@@6BCRefCount@1@@ DD FLAT:??_ECDirectSound@DirectSound@@W7AEPAXI@Z ; DirectSound::CDirectSound::`vftable'
	DD	FLAT:?AddRef@CDirectSound@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CDirectSound@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSound@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CDirectSound@DirectSound@@QAE@XZ PROC NEAR		; DirectSound::CDirectSound::CDirectSound, COMDAT
; _this$ = ecx

; 2768 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$CValidObject@$0EEFDEOEE@@DirectSound@@QAE@XZ ; DirectSound::CValidObject<1146310212>::CValidObject<1146310212>
  0000f	6a 02		 push	 2
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 08	 add	 ecx, 8
  00017	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSound@DirectSound@@6B?$CValidObject@$0EEFDEOEE@@1@@
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:??_7CDirectSound@DirectSound@@6BCRefCount@1@@

; 2769 :     DPF_ENTER();
; 2770 : 
; 2771 :     //
; 2772 :     // Set the global DirectSound object pointer
; 2773 :     //
; 2774 : 
; 2775 :     m_pDirectSound = this;

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	89 15 00 00 00
	00		 mov	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, edx ; DirectSound::CDirectSound::m_pDirectSound

; 2776 : 
; 2777 :     //
; 2778 :     // Initialize defaults
; 2779 :     //
; 2780 : 
; 2781 :     InitializeListHead(&m_lst3dVoices);

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	83 c0 18	 add	 eax, 24			; 00000018H
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0004d	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 2782 : 
; 2783 :     DPF_LEAVE_VOID();
; 2784 : }

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??0CDirectSound@DirectSound@@QAE@XZ ENDP		; DirectSound::CDirectSound::CDirectSound
DSOUND	ENDS
PUBLIC	?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject
PUBLIC	??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@	; `string'
;	COMDAT ??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@ DB 'CDirectSound::AddRef', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CDirectSound@DirectSound@@UAGKXZ
DSOUND	SEGMENT
$T40286 = -12
$T40285 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CDirectSound@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CDirectSound::AddRef, COMDAT

; 322  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 323  :         _ENTER_EXTERNAL_METHOD("CDirectSound::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32389
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 43 01 00 00	 push	 323			; 00000143H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40285[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40285[ebp]
  00053	eb 31		 jmp	 SHORT $L32387
$L32389:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@JCCIJAPA@CDirectSound?3?3AddRef?$AA@
  0005a	68 43 01 00 00	 push	 323			; 00000143H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 e9 08	 sub	 ecx, 8
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 324  :         return CRefCount::AddRef();

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?AddRef@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::AddRef
  00078	89 45 f4	 mov	 DWORD PTR $T40286[ebp], eax
  0007b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0007e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00083	8b 45 f4	 mov	 eax, DWORD PTR $T40286[ebp]
$L32387:

; 325  :     }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?AddRef@CDirectSound@DirectSound@@UAGKXZ ENDP		; DirectSound::CDirectSound::AddRef
DSOUND	ENDS
PUBLIC	??1CDirectSound@DirectSound@@UAE@XZ		; DirectSound::CDirectSound::~CDirectSound
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSound@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSound@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CDirectSound::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSound@DirectSound@@UAE@XZ ; DirectSound::CDirectSound::~CDirectSound
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L36563
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L36563:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCDirectSound@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CDirectSound::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146310212>::~CValidObject<1146310212>
EXTRN	?UnregisterCounters@CPerfMon@DirectSound@@SGXXZ:NEAR ; DirectSound::CPerfMon::UnregisterCounters
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT ??1CDirectSound@DirectSound@@UAE@XZ
DSOUND	SEGMENT
tv68 = -8
_this$ = -4
??1CDirectSound@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CDirectSound::~CDirectSound, COMDAT
; _this$ = ecx

; 2809 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSound@DirectSound@@6B?$CValidObject@$0EEFDEOEE@@1@@
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:??_7CDirectSound@DirectSound@@6BCRefCount@1@@

; 2810 :     DPF_ENTER();
; 2811 : 
; 2812 :     //
; 2813 :     // Release performance counters
; 2814 :     //
; 2815 : 
; 2816 :     CPerfMon::UnregisterCounters();

  0001c	e8 00 00 00 00	 call	 ?UnregisterCounters@CPerfMon@DirectSound@@SGXXZ ; DirectSound::CPerfMon::UnregisterCounters

; 2817 : 
; 2818 :     //
; 2819 :     // Release the global DirectSound object pointer
; 2820 :     //
; 2821 : 
; 2822 :     m_pDirectSound = NULL;

  00021	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pDirectSound@CDirectSound@DirectSound@@2PAV12@A, 0 ; DirectSound::CDirectSound::m_pDirectSound

; 2823 : 
; 2824 :     //
; 2825 :     // Free owned objects
; 2826 :     //
; 2827 : 
; 2828 :     RELEASE(m_pDevice);

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00032	74 1c		 je	 SHORT $L36568
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00040	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00042	50		 push	 eax
  00043	ff 51 08	 call	 DWORD PTR [ecx+8]
  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
$L36568:

; 2829 :     RELEASE(m_pSettings);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00057	74 1c		 je	 SHORT $L36567
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00065	8b 12		 mov	 edx, DWORD PTR [edx]
  00067	51		 push	 ecx
  00068	ff 52 08	 call	 DWORD PTR [edx+8]
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$L36567:

; 2830 : 
; 2831 :     DPF_LEAVE_VOID();
; 2832 : }

  00075	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  00079	74 0b		 je	 SHORT $L40293
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	83 c1 08	 add	 ecx, 8
  00081	89 4d f8	 mov	 DWORD PTR tv68[ebp], ecx
  00084	eb 07		 jmp	 SHORT $L40294
$L40293:
  00086	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L40294:
  0008d	8b 4d f8	 mov	 ecx, DWORD PTR tv68[ebp]
  00090	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146310212>::~CValidObject<1146310212>
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??1CDirectSound@DirectSound@@UAE@XZ ENDP		; DirectSound::CDirectSound::~CDirectSound
DSOUND	ENDS
PUBLIC	??_C@_0BG@JLDLGICF@CDirectSound?3?3Release?$AA@	; `string'
PUBLIC	??_C@_0BI@FJJJKECJ@m_apKeepAliveBuffers?$FLi?$FN?$AA@ ; `string'
PUBLIC	??_C@_0M@BILKPJIE@?$CBdwRefCount?$AA@		; `string'
PUBLIC	?Release@IDirectSoundBuffer@@QAGKXZ		; IDirectSoundBuffer::Release
PUBLIC	?Stop@IDirectSoundBuffer@@QAGJXZ		; IDirectSoundBuffer::Stop
PUBLIC	?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z	; IDirectSoundBuffer::GetStatus
;	COMDAT ??_C@_0BG@JLDLGICF@CDirectSound?3?3Release?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@JLDLGICF@CDirectSound?3?3Release?$AA@ DB 'CDirectSound::Release'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@FJJJKECJ@m_apKeepAliveBuffers?$FLi?$FN?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@FJJJKECJ@m_apKeepAliveBuffers?$FLi?$FN?$AA@ DB 'm_apKeepAliveBu'
	DB	'ffers[i]', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0M@BILKPJIE@?$CBdwRefCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0M@BILKPJIE@?$CBdwRefCount?$AA@ DB '!dwRefCount', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CDirectSound@DirectSound@@UAGKXZ
DSOUND	SEGMENT
$T40299 = -28
$T40298 = -24
___AutoLock$ = -20
_hr$ = -16
_dwStatus$ = -12
_dwRefCount$ = -8
_i$ = -4
_this$ = 8
?Release@CDirectSound@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CDirectSound::Release, COMDAT

; 2860 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 2861 :     DWORD                   dwRefCount;
; 2862 :     DWORD                   dwStatus;
; 2863 :     HRESULT                 hr;
; 2864 :     DWORD                   i;
; 2865 : 
; 2866 :     DPF_ENTER();
; 2867 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36579
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JLDLGICF@CDirectSound?3?3Release?$AA@
  00021	68 33 0b 00 00	 push	 2867			; 00000b33H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 e8 05 40
	00 80		 mov	 DWORD PTR $T40298[ebp], -2147467259 ; 80004005H
  0004b	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 e8	 mov	 eax, DWORD PTR $T40298[ebp]
  00056	e9 67 01 00 00	 jmp	 $L36573
$L36579:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JLDLGICF@CDirectSound?3?3Release?$AA@
  00060	68 33 0b 00 00	 push	 2867			; 00000b33H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 e9 08	 sub	 ecx, 8
  00070	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 2868 : 
; 2869 :     if((dwRefCount = CRefCount::Release()) == NUMELMS(m_apKeepAliveBuffers) + 1)

  00075	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?Release@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::Release
  0007e	89 45 f8	 mov	 DWORD PTR _dwRefCount$[ebp], eax
  00081	83 7d f8 05	 cmp	 DWORD PTR _dwRefCount$[ebp], 5
  00085	0f 85 26 01 00
	00		 jne	 $L36583

; 2870 :     {
; 2871 :         //
; 2872 :         // The only references we have left are the keepalive buffers and the
; 2873 :         // artificial one we added at creation.  Go ahead and shut down.
; 2874 :         //
; 2875 : 
; 2876 :         for(i = 0; i < NUMELMS(m_apKeepAliveBuffers); i++)

  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00092	eb 09		 jmp	 SHORT $L36584
$L36585:
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00097	83 c1 01	 add	 ecx, 1
  0009a	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L36584:
  0009d	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  000a1	73 3a		 jae	 SHORT $L36586

; 2877 :         {
; 2878 :             ASSERT(m_apKeepAliveBuffers[i]);

  000a3	68 3e 0b 00 00	 push	 2878			; 00000b3eH
  000a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@FJJJKECJ@m_apKeepAliveBuffers?$FLi?$FN?$AA@
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	33 c9		 xor	 ecx, ecx
  000ba	83 7c 90 18 00	 cmp	 DWORD PTR [eax+edx*4+24], 0
  000bf	0f 94 c1	 sete	 cl
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000c8	83 c4 10	 add	 esp, 16			; 00000010H

; 2879 : 
; 2880 :             m_apKeepAliveBuffers[i]->Stop();

  000cb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ce	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	8b 4c 90 18	 mov	 ecx, DWORD PTR [eax+edx*4+24]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ?Stop@IDirectSoundBuffer@@QAGJXZ ; IDirectSoundBuffer::Stop

; 2881 :         }

  000db	eb b7		 jmp	 SHORT $L36585
$L36586:

; 2882 : 
; 2883 :         for(i = 0; i < NUMELMS(m_apKeepAliveBuffers); i++)

  000dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000e4	eb 09		 jmp	 SHORT $L36588
$L36589:
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000e9	83 c2 01	 add	 edx, 1
  000ec	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L36588:
  000ef	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  000f3	0f 83 8b 00 00
	00		 jae	 $L36590

; 2884 :         {
; 2885 :             ASSERT(m_apKeepAliveBuffers[i]);

  000f9	68 45 0b 00 00	 push	 2885			; 00000b45H
  000fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00103	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@FJJJKECJ@m_apKeepAliveBuffers?$FLi?$FN?$AA@
  00108	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0010e	33 d2		 xor	 edx, edx
  00110	83 7c 81 18 00	 cmp	 DWORD PTR [ecx+eax*4+24], 0
  00115	0f 94 c2	 sete	 dl
  00118	52		 push	 edx
  00119	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0011e	83 c4 10	 add	 esp, 16			; 00000010H
$L36591:

; 2886 : 
; 2887 :             do
; 2888 :             {
; 2889 :                 DoWork();

  00121	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00124	83 e8 08	 sub	 eax, 8
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?DoWork@CDirectSound@DirectSound@@QAGXXZ ; DirectSound::CDirectSound::DoWork

; 2890 :                 
; 2891 :                 hr = m_apKeepAliveBuffers[i]->GetStatus(&dwStatus);

  0012d	8d 4d f4	 lea	 ecx, DWORD PTR _dwStatus$[ebp]
  00130	51		 push	 ecx
  00131	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00134	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00137	8b 4c 90 18	 mov	 ecx, DWORD PTR [eax+edx*4+24]
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ; IDirectSoundBuffer::GetStatus
  00141	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 2892 :             }
; 2893 :             while(SUCCEEDED(hr) && (dwStatus & DSBSTATUS_PLAYING));

  00144	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00148	7c 0a		 jl	 SHORT $L36593
  0014a	8b 55 f4	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  0014d	83 e2 01	 and	 edx, 1
  00150	85 d2		 test	 edx, edx
  00152	75 cd		 jne	 SHORT $L36591
$L36593:

; 2894 : 
; 2895 :             RELEASE(m_apKeepAliveBuffers[i]);

  00154	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	83 7c 81 18 00	 cmp	 DWORD PTR [ecx+eax*4+24], 0
  0015f	74 1e		 je	 SHORT $L36596
  00161	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00164	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00167	8b 4c 90 18	 mov	 ecx, DWORD PTR [eax+edx*4+24]
  0016b	51		 push	 ecx
  0016c	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
  00171	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00174	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00177	c7 44 90 18 00
	00 00 00	 mov	 DWORD PTR [eax+edx*4+24], 0
$L36596:

; 2896 :         }

  0017f	e9 62 ff ff ff	 jmp	 $L36589
$L36590:

; 2897 : 
; 2898 :         dwRefCount = CRefCount::Release();

  00184	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 ?Release@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::Release
  0018d	89 45 f8	 mov	 DWORD PTR _dwRefCount$[ebp], eax

; 2899 :         ASSERT(!dwRefCount);

  00190	68 53 0b 00 00	 push	 2899			; 00000b53H
  00195	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0019a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@BILKPJIE@?$CBdwRefCount?$AA@
  0019f	33 d2		 xor	 edx, edx
  001a1	83 7d f8 00	 cmp	 DWORD PTR _dwRefCount$[ebp], 0
  001a5	0f 95 c2	 setne	 dl
  001a8	52		 push	 edx
  001a9	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001ae	83 c4 10	 add	 esp, 16			; 00000010H
$L36583:

; 2900 :     }
; 2901 : 
; 2902 :     DPF_LEAVE(dwRefCount);
; 2903 : 
; 2904 :     return dwRefCount;

  001b1	8b 45 f8	 mov	 eax, DWORD PTR _dwRefCount$[ebp]
  001b4	89 45 e4	 mov	 DWORD PTR $T40299[ebp], eax
  001b7	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  001ba	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  001bf	8b 45 e4	 mov	 eax, DWORD PTR $T40299[ebp]
$L36573:

; 2905 : }

  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 04 00	 ret	 4
?Release@CDirectSound@DirectSound@@UAGKXZ ENDP		; DirectSound::CDirectSound::Release
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
DSOUND	ENDS
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
DSOUND	SEGMENT
_this$ = 8
?Release@IDirectSoundBuffer@@QAGKXZ PROC NEAR		; IDirectSoundBuffer::Release, COMDAT

; 1932 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1933 :         return IDirectSoundBuffer_Release(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Release@4

; 1934 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@IDirectSoundBuffer@@QAGKXZ ENDP		; IDirectSoundBuffer::Release
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Stop@IDirectSoundBuffer@@QAGJXZ
DSOUND	SEGMENT
_this$ = 8
?Stop@IDirectSoundBuffer@@QAGJXZ PROC NEAR		; IDirectSoundBuffer::Stop, COMDAT

; 2072 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2073 :         return IDirectSoundBuffer_Stop(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Stop@4

; 2074 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Stop@IDirectSoundBuffer@@QAGJXZ ENDP			; IDirectSoundBuffer::Stop
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
DSOUND	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z PROC NEAR	; IDirectSoundBuffer::GetStatus, COMDAT

; 2092 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2093 :         return IDirectSoundBuffer_GetStatus(this, pdwStatus);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_GetStatus@8

; 2094 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ENDP		; IDirectSoundBuffer::GetStatus
DSOUND	ENDS
PUBLIC	??_C@_0BF@GBDPHPNJ@CDirectSoundSettings?$AA@	; `string'
PUBLIC	??_C@_0BG@LPBBNBKB@CMcpxAPU?$CIm_pSettings?$CJ?$AA@ ; `string'
PUBLIC	?Play@IDirectSoundBuffer@@QAGJKKK@Z		; IDirectSoundBuffer::Play
PUBLIC	?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z	; IDirectSoundBuffer::SetBufferData
EXTRN	?RegisterCounters@CPerfMon@DirectSound@@SGXXZ:NEAR ; DirectSound::CPerfMon::RegisterCounters
EXTRN	??0CMcpxAPU@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z:NEAR ; DirectSound::CMcpxAPU::CMcpxAPU
EXTRN	?Initialize@CMcpxAPU@DirectSound@@QAEJXZ:NEAR	; DirectSound::CMcpxAPU::Initialize
;	COMDAT ??_C@_0BF@GBDPHPNJ@CDirectSoundSettings?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BF@GBDPHPNJ@CDirectSoundSettings?$AA@ DB 'CDirectSoundSettings', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@LPBBNBKB@CMcpxAPU?$CIm_pSettings?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@LPBBNBKB@CMcpxAPU?$CIm_pSettings?$CJ?$AA@ DB 'CMcpxAPU(m_pSetti'
	DB	'ngs)', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ?wfxSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4UtWAVEFORMATEX@@B
DSOUND_RD	SEGMENT
?wfxSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4UtWAVEFORMATEX@@B DW 01H ; `DirectSound::CDirectSound::Initialize'::`2'::wfxSilence
	DW	01H
	DD	0bb80H
	DD	017700H
	DW	02H
	DW	010H
	DW	00H
DSOUND_RD	ENDS
;	COMDAT ?asSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4QBFB
DSOUND_RD	SEGMENT
?asSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4QBFB DW 00H ; `DirectSound::CDirectSound::Initialize'::`2'::asSilence
	ORG $+62
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CDirectSound@DirectSound@@QAGJXZ
DSOUND	SEGMENT
tv88 = -128
tv73 = -124
$T40315 = -120
$T40312 = -116
_MixBins$ = -112
_hr$ = -104
_z$ = -100
_dsbd$ = -96
_MixBinVolumePairs$ = -72
_i$ = -4
_this$ = 8
?Initialize@CDirectSound@DirectSound@@QAGJXZ PROC NEAR	; DirectSound::CDirectSound::Initialize, COMDAT

; 2933 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H

; 2934 : 
; 2935 : #ifdef USE_KEEPALIVE_BUFFERS
; 2936 : 
; 2937 :     static const WAVEFORMATEX   wfxSilence              = INIT_PCM_WAVEFORMAT(1, 48000, 16);
; 2938 :     static const SHORT          asSilence[32]           = { 0 };
; 2939 :     DSBUFFERDESC                dsbd;
; 2940 :     DSMIXBINVOLUMEPAIR          MixBinVolumePairs[8];
; 2941 :     DSMIXBINS                   MixBins;
; 2942 :     DWORD                       i, z;
; 2943 : 
; 2944 : #endif // USE_KEEPALIVE_BUFFERS
; 2945 : 
; 2946 :     HRESULT                     hr;
; 2947 : 
; 2948 :     DPF_ENTER();
; 2949 : 
; 2950 :     //
; 2951 :     // Create the shared settings object
; 2952 :     //
; 2953 : 
; 2954 :     hr = HRFROMP(m_pSettings = NEW(CDirectSoundSettings));

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@GBDPHPNJ@CDirectSoundSettings?$AA@
  0000e	68 8a 0b 00 00	 push	 2954			; 00000b8aH
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 a8 00 00 00	 push	 168			; 000000a8H
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 8c	 mov	 DWORD PTR $T40312[ebp], eax
  00028	83 7d 8c 00	 cmp	 DWORD PTR $T40312[ebp], 0
  0002c	74 0d		 je	 SHORT $L40313
  0002e	8b 4d 8c	 mov	 ecx, DWORD PTR $T40312[ebp]
  00031	e8 00 00 00 00	 call	 ??0CDirectSoundSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundSettings::CDirectSoundSettings
  00036	89 45 84	 mov	 DWORD PTR tv73[ebp], eax
  00039	eb 07		 jmp	 SHORT $L40314
$L40313:
  0003b	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L40314:
  00042	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 4d 84	 mov	 ecx, DWORD PTR tv73[ebp]
  00048	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004b	33 d2		 xor	 edx, edx
  0004d	83 7d 84 00	 cmp	 DWORD PTR tv73[ebp], 0
  00051	0f 95 c2	 setne	 dl
  00054	4a		 dec	 edx
  00055	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  0005b	89 55 98	 mov	 DWORD PTR _hr$[ebp], edx

; 2955 : 
; 2956 :     //
; 2957 :     // Create the device object
; 2958 :     //
; 2959 : 
; 2960 :     if(SUCCEEDED(hr))

  0005e	83 7d 98 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00062	7c 5c		 jl	 SHORT $L36627

; 2961 :     {
; 2962 :         hr = HRFROMP(m_pDevice = NEW(CMcpxAPU(m_pSettings)));

  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@LPBBNBKB@CMcpxAPU?$CIm_pSettings?$CJ?$AA@
  00069	68 92 0b 00 00	 push	 2962			; 00000b92H
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00073	68 e8 07 00 00	 push	 2024			; 000007e8H
  00078	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	89 45 88	 mov	 DWORD PTR $T40315[ebp], eax
  00083	83 7d 88 00	 cmp	 DWORD PTR $T40315[ebp], 0
  00087	74 14		 je	 SHORT $L40316
  00089	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008f	51		 push	 ecx
  00090	8b 4d 88	 mov	 ecx, DWORD PTR $T40315[ebp]
  00093	e8 00 00 00 00	 call	 ??0CMcpxAPU@DirectSound@@QAE@PAVCDirectSoundSettings@1@@Z ; DirectSound::CMcpxAPU::CMcpxAPU
  00098	89 45 80	 mov	 DWORD PTR tv88[ebp], eax
  0009b	eb 07		 jmp	 SHORT $L40317
$L40316:
  0009d	c7 45 80 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L40317:
  000a4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	8b 45 80	 mov	 eax, DWORD PTR tv88[ebp]
  000aa	89 42 14	 mov	 DWORD PTR [edx+20], eax
  000ad	33 c9		 xor	 ecx, ecx
  000af	83 7d 80 00	 cmp	 DWORD PTR tv88[ebp], 0
  000b3	0f 95 c1	 setne	 cl
  000b6	49		 dec	 ecx
  000b7	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  000bd	89 4d 98	 mov	 DWORD PTR _hr$[ebp], ecx
$L36627:

; 2963 :     }
; 2964 : 
; 2965 :     if(SUCCEEDED(hr))

  000c0	83 7d 98 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c4	7c 0e		 jl	 SHORT $L36634

; 2966 :     {
; 2967 :         hr = m_pDevice->Initialize();

  000c6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  000cc	e8 00 00 00 00	 call	 ?Initialize@CMcpxAPU@DirectSound@@QAEJXZ ; DirectSound::CMcpxAPU::Initialize
  000d1	89 45 98	 mov	 DWORD PTR _hr$[ebp], eax
$L36634:

; 2968 :     }
; 2969 : 
; 2970 : #ifdef USE_KEEPALIVE_BUFFERS
; 2971 : 
; 2972 :     //
; 2973 :     // Create dummy buffers.  The MCPX refuses to output any data at least 
; 2974 :     // one voice writes to the speaker mixbins.  We'll burn voices in order 
; 2975 :     // to write silence to all the mixbins all the time.
; 2976 :     //
; 2977 : 
; 2978 :     if(SUCCEEDED(hr))

  000d4	83 7d 98 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d8	0f 8c 01 01 00
	00		 jl	 $L36636

; 2979 :     {
; 2980 :         ZeroMemory(&dsbd, sizeof(dsbd));

  000de	6a 18		 push	 24			; 00000018H
  000e0	6a 00		 push	 0
  000e2	8d 45 a0	 lea	 eax, DWORD PTR _dsbd$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 _memset
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2981 :         ZeroMemory(&MixBinVolumePairs, sizeof(MixBinVolumePairs));

  000ee	6a 40		 push	 64			; 00000040H
  000f0	6a 00		 push	 0
  000f2	8d 4d b8	 lea	 ecx, DWORD PTR _MixBinVolumePairs$[ebp]
  000f5	51		 push	 ecx
  000f6	e8 00 00 00 00	 call	 _memset
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2982 : 
; 2983 :         dsbd.dwSize = sizeof(dsbd);

  000fe	c7 45 a0 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 2984 :         dsbd.lpwfxFormat = (LPWAVEFORMATEX)&wfxSilence;

  00105	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp+12], OFFSET FLAT:?wfxSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4UtWAVEFORMATEX@@B

; 2985 :         dsbd.lpMixBins = &MixBins;

  0010c	8d 55 90	 lea	 edx, DWORD PTR _MixBins$[ebp]
  0010f	89 55 b0	 mov	 DWORD PTR _dsbd$[ebp+16], edx

; 2986 : 
; 2987 :         MixBins.dwMixBinCount = NUMELMS(MixBinVolumePairs);

  00112	c7 45 90 08 00
	00 00		 mov	 DWORD PTR _MixBins$[ebp], 8

; 2988 :         MixBins.lpMixBinVolumePairs = MixBinVolumePairs;

  00119	8d 45 b8	 lea	 eax, DWORD PTR _MixBinVolumePairs$[ebp]
  0011c	89 45 94	 mov	 DWORD PTR _MixBins$[ebp+4], eax

; 2989 : 
; 2990 :         for(i = 0; SUCCEEDED(hr) && (i < NUMELMS(m_apKeepAliveBuffers)); i++)

  0011f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00126	eb 09		 jmp	 SHORT $L36639
$L36640:
  00128	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0012b	83 c1 01	 add	 ecx, 1
  0012e	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L36639:
  00131	83 7d 98 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00135	0f 8c a4 00 00
	00		 jl	 $L36636
  0013b	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  0013f	0f 83 9a 00 00
	00		 jae	 $L36636

; 2991 :         {
; 2992 :             for(z = 0; z < NUMELMS(MixBinVolumePairs); z++)

  00145	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  0014c	eb 09		 jmp	 SHORT $L36642
$L36643:
  0014e	8b 55 9c	 mov	 edx, DWORD PTR _z$[ebp]
  00151	83 c2 01	 add	 edx, 1
  00154	89 55 9c	 mov	 DWORD PTR _z$[ebp], edx
$L36642:
  00157	83 7d 9c 08	 cmp	 DWORD PTR _z$[ebp], 8
  0015b	73 12		 jae	 SHORT $L36644

; 2993 :             {
; 2994 :                 MixBinVolumePairs[z].dwMixBin = (i * NUMELMS(MixBinVolumePairs)) + z;

  0015d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00160	8b 4d 9c	 mov	 ecx, DWORD PTR _z$[ebp]
  00163	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00166	8b 45 9c	 mov	 eax, DWORD PTR _z$[ebp]
  00169	89 54 c5 b8	 mov	 DWORD PTR _MixBinVolumePairs$[ebp+eax*8], edx

; 2995 :             }

  0016d	eb df		 jmp	 SHORT $L36643
$L36644:

; 2996 : 
; 2997 :             if(DSMIXBIN_SUBMIX == MixBinVolumePairs[NUMELMS(MixBinVolumePairs) - 1].dwMixBin)

  0016f	83 7d f0 1f	 cmp	 DWORD PTR _MixBinVolumePairs$[ebp+56], 31 ; 0000001fH
  00173	75 09		 jne	 SHORT $L36645

; 2998 :             {
; 2999 :                 MixBins.dwMixBinCount--;

  00175	8b 4d 90	 mov	 ecx, DWORD PTR _MixBins$[ebp]
  00178	83 e9 01	 sub	 ecx, 1
  0017b	89 4d 90	 mov	 DWORD PTR _MixBins$[ebp], ecx
$L36645:

; 3000 :             }
; 3001 : 
; 3002 :             hr = CreateSoundBuffer(&dsbd, &m_apKeepAliveBuffers[i], NULL);

  0017e	6a 00		 push	 0
  00180	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00183	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00186	8d 4c 90 20	 lea	 ecx, DWORD PTR [eax+edx*4+32]
  0018a	51		 push	 ecx
  0018b	8d 55 a0	 lea	 edx, DWORD PTR _dsbd$[ebp]
  0018e	52		 push	 edx
  0018f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 ?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ; DirectSound::CDirectSound::CreateSoundBuffer
  00198	89 45 98	 mov	 DWORD PTR _hr$[ebp], eax

; 3003 : 
; 3004 :             if(SUCCEEDED(hr))

  0019b	83 7d 98 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0019f	7c 1a		 jl	 SHORT $L36647

; 3005 :             {
; 3006 :                 hr = m_apKeepAliveBuffers[i]->SetBufferData((LPVOID)asSilence, sizeof(asSilence));

  001a1	6a 40		 push	 64			; 00000040H
  001a3	68 00 00 00 00	 push	 OFFSET FLAT:?asSilence@?1??Initialize@CDirectSound@DirectSound@@QAGJXZ@4QBFB
  001a8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001ab	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001ae	8b 44 8a 20	 mov	 eax, DWORD PTR [edx+ecx*4+32]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
  001b8	89 45 98	 mov	 DWORD PTR _hr$[ebp], eax
$L36647:

; 3007 :             }
; 3008 : 
; 3009 :             if(SUCCEEDED(hr))

  001bb	83 7d 98 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001bf	7c 19		 jl	 SHORT $L36650

; 3010 :             {
; 3011 :                 hr = m_apKeepAliveBuffers[i]->Play(0, 0, DSBPLAY_LOOPING);

  001c1	6a 01		 push	 1
  001c3	6a 00		 push	 0
  001c5	6a 00		 push	 0
  001c7	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001ca	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001cd	8b 44 8a 20	 mov	 eax, DWORD PTR [edx+ecx*4+32]
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?Play@IDirectSoundBuffer@@QAGJKKK@Z ; IDirectSoundBuffer::Play
  001d7	89 45 98	 mov	 DWORD PTR _hr$[ebp], eax
$L36650:

; 3012 :             }
; 3013 :         }

  001da	e9 49 ff ff ff	 jmp	 $L36640
$L36636:

; 3014 :     }
; 3015 : 
; 3016 : #endif // USE_KEEPALIVE_BUFFERS
; 3017 : 
; 3018 :     //
; 3019 :     // Set up performance counters
; 3020 :     //
; 3021 : 
; 3022 :     if(SUCCEEDED(hr))

  001df	83 7d 98 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001e3	7c 05		 jl	 SHORT $L36652

; 3023 :     {
; 3024 :         CPerfMon::RegisterCounters();

  001e5	e8 00 00 00 00	 call	 ?RegisterCounters@CPerfMon@DirectSound@@SGXXZ ; DirectSound::CPerfMon::RegisterCounters
$L36652:

; 3025 :     }
; 3026 : 
; 3027 :     DPF_LEAVE_HRESULT(hr);
; 3028 : 
; 3029 :     return hr;

  001ea	8b 45 98	 mov	 eax, DWORD PTR _hr$[ebp]

; 3030 : }

  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 04 00	 ret	 4
?Initialize@CDirectSound@DirectSound@@QAGJXZ ENDP	; DirectSound::CDirectSound::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
DSOUND	ENDS
;	COMDAT ?Play@IDirectSoundBuffer@@QAGJKKK@Z
DSOUND	SEGMENT
_this$ = 8
_dwReserved1$ = 12
_dwReserved2$ = 16
_dwFlags$ = 20
?Play@IDirectSoundBuffer@@QAGJKKK@Z PROC NEAR		; IDirectSoundBuffer::Play, COMDAT

; 2062 :     {   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2063 :         return IDirectSoundBuffer_Play(this, dwReserved1, dwReserved2, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _dwReserved2$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _dwReserved1$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Play@16

; 2064 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?Play@IDirectSoundBuffer@@QAGJKKK@Z ENDP		; IDirectSoundBuffer::Play
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
DSOUND	SEGMENT
_this$ = 8
_pvBufferData$ = 12
_dwBufferBytes$ = 16
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z PROC NEAR	; IDirectSoundBuffer::SetBufferData, COMDAT

; 2107 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2108 :         return IDirectSoundBuffer_SetBufferData(this, pvBufferData, dwBufferBytes);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetBufferData@12

; 2109 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ENDP	; IDirectSoundBuffer::SetBufferData
DSOUND	ENDS
PUBLIC	??_C@_0BG@BALKAGLG@CDirectSound?3?3GetCaps?$AA@	; `string'
PUBLIC	??_C@_0BE@FGNBHMGB@DSCAPS?5not?5supplied?$AA@	; `string'
EXTRN	_g_dwDirectSoundPoolMemoryUsage:DWORD
EXTRN	_g_dwDirectSoundPhysicalMemoryUsage:DWORD
EXTRN	_g_dwDirectSoundFree2dVoices:DWORD
EXTRN	_g_dwDirectSoundFree3dVoices:DWORD
EXTRN	_g_dwDirectSoundFreeBufferSGEs:DWORD
;	COMDAT ??_C@_0BG@BALKAGLG@CDirectSound?3?3GetCaps?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BG@BALKAGLG@CDirectSound?3?3GetCaps?$AA@ DB 'CDirectSound::GetCaps'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@FGNBHMGB@DSCAPS?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@FGNBHMGB@DSCAPS?5not?5supplied?$AA@ DB 'DSCAPS not supplied', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetCaps@CDirectSound@DirectSound@@QAGJPAU_DSCAPS@@@Z
DSOUND	SEGMENT
$T40328 = -12
$T40327 = -8
___AutoLock$ = -4
_this$ = 8
_pdsc$ = 12
?GetCaps@CDirectSound@DirectSound@@QAGJPAU_DSCAPS@@@Z PROC NEAR ; DirectSound::CDirectSound::GetCaps, COMDAT

; 3056 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3057 :     DPF_ENTER();
; 3058 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36658
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@BALKAGLG@CDirectSound?3?3GetCaps?$AA@
  00021	68 f2 0b 00 00	 push	 3058			; 00000bf2H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40327[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40327[ebp]
  00056	e9 8f 00 00 00	 jmp	 $L36656
$L36658:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@BALKAGLG@CDirectSound?3?3GetCaps?$AA@
  00060	68 f2 0b 00 00	 push	 3058			; 00000bf2H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3059 : 
; 3060 : #ifdef VALIDATE_PARAMETERS
; 3061 : 
; 3062 :     if(!pdsc)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _pdsc$[ebp], 0
  00076	75 2d		 jne	 SHORT $L36662

; 3063 :     {
; 3064 :         DPF_ERROR("DSCAPS not supplied");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@BALKAGLG@CDirectSound?3?3GetCaps?$AA@
  00082	68 f8 0b 00 00	 push	 3064			; 00000bf8H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@FGNBHMGB@DSCAPS?5not?5supplied?$AA@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L36662:

; 3065 :     }
; 3066 : 
; 3067 : #endif // VALIDATE_PARAMETERS
; 3068 :     
; 3069 :     pdsc->dwFree2DBuffers = g_dwDirectSoundFree2dVoices;

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pdsc$[ebp]
  000a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwDirectSoundFree2dVoices
  000ae	89 08		 mov	 DWORD PTR [eax], ecx

; 3070 :     pdsc->dwFree3DBuffers = g_dwDirectSoundFree3dVoices;

  000b0	8b 55 0c	 mov	 edx, DWORD PTR _pdsc$[ebp]
  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwDirectSoundFree3dVoices
  000b8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 3071 :     pdsc->dwFreeBufferSGEs = g_dwDirectSoundFreeBufferSGEs;

  000bb	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsc$[ebp]
  000be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwDirectSoundFreeBufferSGEs
  000c4	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 3072 :     pdsc->dwMemoryAllocated = g_dwDirectSoundPoolMemoryUsage + g_dwDirectSoundPhysicalMemoryUsage;

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwDirectSoundPoolMemoryUsage
  000cc	03 05 00 00 00
	00		 add	 eax, DWORD PTR _g_dwDirectSoundPhysicalMemoryUsage
  000d2	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsc$[ebp]
  000d5	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 3073 : 
; 3074 :     DPF_LEAVE_HRESULT(DS_OK);
; 3075 : 
; 3076 :     return DS_OK;

  000d8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40328[ebp], 0
  000df	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000e2	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000e7	8b 45 f4	 mov	 eax, DWORD PTR $T40328[ebp]
$L36656:

; 3077 : }

  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 08 00	 ret	 8
?GetCaps@CDirectSound@DirectSound@@QAGJPAU_DSCAPS@@@Z ENDP ; DirectSound::CDirectSound::GetCaps
DSOUND	ENDS
PUBLIC	??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@ ; `string'
PUBLIC	??_C@_0CK@GPJEHCOH@Failed?5to?5supply?5an?5LPDIRECTSOUN@ ; `string'
PUBLIC	??_C@_0BJ@EJCJDDEP@CDirectSoundBuffer?$CIthis?$CJ?$AA@ ; `string'
PUBLIC	??0CDirectSoundBuffer@DirectSound@@QAE@PAVCDirectSound@1@@Z ; DirectSound::CDirectSoundBuffer::CDirectSoundBuffer
PUBLIC	?Initialize@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSBUFFERDESC@@@Z ; DirectSound::CDirectSoundBuffer::Initialize
;	COMDAT ??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@ DB 'CDirectSoun'
	DB	'd::CreateSoundBuffer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@GPJEHCOH@Failed?5to?5supply?5an?5LPDIRECTSOUN@
DSOUND_RD	SEGMENT
??_C@_0CK@GPJEHCOH@Failed?5to?5supply?5an?5LPDIRECTSOUN@ DB 'Failed to su'
	DB	'pply an LPDIRECTSOUNDBUFFER *', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@EJCJDDEP@CDirectSoundBuffer?$CIthis?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@EJCJDDEP@CDirectSoundBuffer?$CIthis?$CJ?$AA@ DB 'CDirectSoundBu'
	DB	'ffer(this)', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z
DSOUND	SEGMENT
tv146 = -32
tv136 = -28
$T40338 = -24
$T40333 = -20
$T40332 = -16
___AutoLock$ = -12
_hr$ = -8
_pBuffer$ = -4
_this$ = 8
_pdsbd$ = 12
_ppBuffer$ = 16
_pControllingUnknown$ = 20
?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z PROC NEAR ; DirectSound::CDirectSound::CreateSoundBuffer, COMDAT

; 3108 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 3109 :     CDirectSoundBuffer *    pBuffer;
; 3110 :     HRESULT                 hr;
; 3111 : 
; 3112 :     DPF_ENTER();
; 3113 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36675
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@
  00021	68 29 0c 00 00	 push	 3113			; 00000c29H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T40332[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f0	 mov	 eax, DWORD PTR $T40332[ebp]
  00056	e9 3c 01 00 00	 jmp	 $L36671
$L36675:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@
  00060	68 29 0c 00 00	 push	 3113			; 00000c29H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3114 : 
; 3115 : #ifdef VALIDATE_PARAMETERS
; 3116 : 
; 3117 :     if(!ppBuffer)

  00072	83 7d 10 00	 cmp	 DWORD PTR _ppBuffer$[ebp], 0
  00076	75 2d		 jne	 SHORT $L36679

; 3118 :     {
; 3119 :         DPF_ERROR("Failed to supply an LPDIRECTSOUNDBUFFER *");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@
  00082	68 2f 0c 00 00	 push	 3119			; 00000c2fH
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@GPJEHCOH@Failed?5to?5supply?5an?5LPDIRECTSOUN@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L36679:

; 3120 :     }
; 3121 :     
; 3122 :     if(pControllingUnknown)

  000a5	83 7d 14 00	 cmp	 DWORD PTR _pControllingUnknown$[ebp], 0
  000a9	74 2d		 je	 SHORT $L36681

; 3123 :     {
; 3124 :         DPF_ERROR("Aggregation is not supported");

  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BHGIECKP@CDirectSound?3?3CreateSoundBuffer?$AA@
  000b5	68 34 0c 00 00	 push	 3124			; 00000c34H
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000bf	6a 01		 push	 1
  000c1	6a 09		 push	 9
  000c3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c8	83 c4 18	 add	 esp, 24			; 00000018H
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@KMLCCGBC@Aggregation?5is?5not?5supported?$AA@
  000d0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d5	83 c4 04	 add	 esp, 4
$L36681:

; 3125 :     }
; 3126 : 
; 3127 : #endif // VALIDATE_PARAMETERS
; 3128 : 
; 3129 :     hr = HRFROMP(pBuffer = NEW(CDirectSoundBuffer(this)));

  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EJCJDDEP@CDirectSoundBuffer?$CIthis?$CJ?$AA@
  000dd	68 39 0c 00 00	 push	 3129			; 00000c39H
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e7	6a 2c		 push	 44			; 0000002cH
  000e9	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  000ee	83 c4 10	 add	 esp, 16			; 00000010H
  000f1	89 45 ec	 mov	 DWORD PTR $T40333[ebp], eax
  000f4	83 7d ec 00	 cmp	 DWORD PTR $T40333[ebp], 0
  000f8	74 11		 je	 SHORT $L40334
  000fa	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d ec	 mov	 ecx, DWORD PTR $T40333[ebp]
  00101	e8 00 00 00 00	 call	 ??0CDirectSoundBuffer@DirectSound@@QAE@PAVCDirectSound@1@@Z ; DirectSound::CDirectSoundBuffer::CDirectSoundBuffer
  00106	89 45 e4	 mov	 DWORD PTR tv136[ebp], eax
  00109	eb 07		 jmp	 SHORT $L40335
$L40334:
  0010b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$L40335:
  00112	8b 4d e4	 mov	 ecx, DWORD PTR tv136[ebp]
  00115	89 4d fc	 mov	 DWORD PTR _pBuffer$[ebp], ecx
  00118	33 d2		 xor	 edx, edx
  0011a	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0011e	0f 95 c2	 setne	 dl
  00121	4a		 dec	 edx
  00122	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  00128	89 55 f8	 mov	 DWORD PTR _hr$[ebp], edx

; 3130 : 
; 3131 :     if(SUCCEEDED(hr))

  0012b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012f	7c 10		 jl	 SHORT $L36688

; 3132 :     {
; 3133 :         hr = pBuffer->Initialize(pdsbd);

  00131	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  00134	50		 push	 eax
  00135	8b 4d fc	 mov	 ecx, DWORD PTR _pBuffer$[ebp]
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSBUFFERDESC@@@Z ; DirectSound::CDirectSoundBuffer::Initialize
  0013e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36688:

; 3134 :     }
; 3135 : 
; 3136 :     if(SUCCEEDED(hr))

  00141	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00145	7c 22		 jl	 SHORT $L36690

; 3137 :     {
; 3138 :         *ppBuffer = pBuffer;

  00147	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0014b	74 0b		 je	 SHORT $L40336
  0014d	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00150	83 c2 24	 add	 edx, 36			; 00000024H
  00153	89 55 e0	 mov	 DWORD PTR tv146[ebp], edx
  00156	eb 07		 jmp	 SHORT $L40337
$L40336:
  00158	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], 0
$L40337:
  0015f	8b 45 10	 mov	 eax, DWORD PTR _ppBuffer$[ebp]
  00162	8b 4d e0	 mov	 ecx, DWORD PTR tv146[ebp]
  00165	89 08		 mov	 DWORD PTR [eax], ecx

; 3139 :     }
; 3140 :     else

  00167	eb 1d		 jmp	 SHORT $L36691
$L36690:

; 3141 :     {
; 3142 :         RELEASE(pBuffer);

  00169	83 7d fc 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0016d	74 17		 je	 SHORT $L36691
  0016f	8b 55 fc	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00172	83 c2 08	 add	 edx, 8
  00175	8b 45 fc	 mov	 eax, DWORD PTR _pBuffer$[ebp]
  00178	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0017b	52		 push	 edx
  0017c	ff 51 08	 call	 DWORD PTR [ecx+8]
  0017f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBuffer$[ebp], 0
$L36691:

; 3143 :     }
; 3144 : 
; 3145 :     DPF_LEAVE_HRESULT(hr);
; 3146 : 
; 3147 :     return hr;

  00186	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  00189	89 55 e8	 mov	 DWORD PTR $T40338[ebp], edx
  0018c	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0018f	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00194	8b 45 e8	 mov	 eax, DWORD PTR $T40338[ebp]
$L36671:

; 3148 : }

  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 10 00	 ret	 16			; 00000010H
?CreateSoundBuffer@CDirectSound@DirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ENDP ; DirectSound::CDirectSound::CreateSoundBuffer
DSOUND	ENDS
PUBLIC	??0CDirectSoundStream@DirectSound@@QAE@PAVCDirectSound@1@@Z ; DirectSound::CDirectSoundStream::CDirectSoundStream
PUBLIC	?Initialize@CDirectSoundStream@DirectSound@@QAGJPBU_DSSTREAMDESC@@@Z ; DirectSound::CDirectSoundStream::Initialize
PUBLIC	??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@ ; `string'
PUBLIC	??_C@_0CK@PAHKAPDB@Failed?5to?5supply?5an?5LPDIRECTSOUN@ ; `string'
PUBLIC	??_C@_0BJ@LGHCHOLO@CDirectSoundStream?$CIthis?$CJ?$AA@ ; `string'
;	COMDAT ??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@ DB 'CDirectSoun'
	DB	'd::CreateSoundStream', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CK@PAHKAPDB@Failed?5to?5supply?5an?5LPDIRECTSOUN@
DSOUND_RD	SEGMENT
??_C@_0CK@PAHKAPDB@Failed?5to?5supply?5an?5LPDIRECTSOUN@ DB 'Failed to su'
	DB	'pply an LPDIRECTSOUNDSTREAM *', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@LGHCHOLO@CDirectSoundStream?$CIthis?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@LGHCHOLO@CDirectSoundStream?$CIthis?$CJ?$AA@ DB 'CDirectSoundSt'
	DB	'ream(this)', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CreateSoundStream@CDirectSound@DirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z
DSOUND	SEGMENT
tv136 = -28
$T40346 = -24
$T40343 = -20
$T40342 = -16
___AutoLock$ = -12
_hr$ = -8
_pStream$ = -4
_this$ = 8
_pdssd$ = 12
_ppStream$ = 16
_pControllingUnknown$ = 20
?CreateSoundStream@CDirectSound@DirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z PROC NEAR ; DirectSound::CDirectSound::CreateSoundStream, COMDAT

; 3181 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 3182 :     CDirectSoundStream *    pStream;
; 3183 :     HRESULT                 hr;
; 3184 : 
; 3185 :     DPF_ENTER();
; 3186 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36703
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@
  00021	68 72 0c 00 00	 push	 3186			; 00000c72H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T40342[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f0	 mov	 eax, DWORD PTR $T40342[ebp]
  00056	e9 20 01 00 00	 jmp	 $L36699
$L36703:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@
  00060	68 72 0c 00 00	 push	 3186			; 00000c72H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3187 : 
; 3188 : #ifdef VALIDATE_PARAMETERS
; 3189 : 
; 3190 :     if(!ppStream)

  00072	83 7d 10 00	 cmp	 DWORD PTR _ppStream$[ebp], 0
  00076	75 2d		 jne	 SHORT $L36707

; 3191 :     {
; 3192 :         DPF_ERROR("Failed to supply an LPDIRECTSOUNDSTREAM *");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@
  00082	68 78 0c 00 00	 push	 3192			; 00000c78H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@PAHKAPDB@Failed?5to?5supply?5an?5LPDIRECTSOUN@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L36707:

; 3193 :     }
; 3194 :     
; 3195 :     if(pControllingUnknown)

  000a5	83 7d 14 00	 cmp	 DWORD PTR _pControllingUnknown$[ebp], 0
  000a9	74 2d		 je	 SHORT $L36709

; 3196 :     {
; 3197 :         DPF_ERROR("Aggregation is not supported");

  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@FABLDOJO@CDirectSound?3?3CreateSoundStream?$AA@
  000b5	68 7d 0c 00 00	 push	 3197			; 00000c7dH
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000bf	6a 01		 push	 1
  000c1	6a 09		 push	 9
  000c3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c8	83 c4 18	 add	 esp, 24			; 00000018H
  000cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@KMLCCGBC@Aggregation?5is?5not?5supported?$AA@
  000d0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d5	83 c4 04	 add	 esp, 4
$L36709:

; 3198 :     }
; 3199 : 
; 3200 : #endif // VALIDATE_PARAMETERS
; 3201 : 
; 3202 :     hr = HRFROMP(pStream = NEW(CDirectSoundStream(this)));

  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@LGHCHOLO@CDirectSoundStream?$CIthis?$CJ?$AA@
  000dd	68 82 0c 00 00	 push	 3202			; 00000c82H
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e7	6a 30		 push	 48			; 00000030H
  000e9	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  000ee	83 c4 10	 add	 esp, 16			; 00000010H
  000f1	89 45 ec	 mov	 DWORD PTR $T40343[ebp], eax
  000f4	83 7d ec 00	 cmp	 DWORD PTR $T40343[ebp], 0
  000f8	74 11		 je	 SHORT $L40344
  000fa	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	50		 push	 eax
  000fe	8b 4d ec	 mov	 ecx, DWORD PTR $T40343[ebp]
  00101	e8 00 00 00 00	 call	 ??0CDirectSoundStream@DirectSound@@QAE@PAVCDirectSound@1@@Z ; DirectSound::CDirectSoundStream::CDirectSoundStream
  00106	89 45 e4	 mov	 DWORD PTR tv136[ebp], eax
  00109	eb 07		 jmp	 SHORT $L40345
$L40344:
  0010b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$L40345:
  00112	8b 4d e4	 mov	 ecx, DWORD PTR tv136[ebp]
  00115	89 4d fc	 mov	 DWORD PTR _pStream$[ebp], ecx
  00118	33 d2		 xor	 edx, edx
  0011a	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  0011e	0f 95 c2	 setne	 dl
  00121	4a		 dec	 edx
  00122	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  00128	89 55 f8	 mov	 DWORD PTR _hr$[ebp], edx

; 3203 : 
; 3204 :     if(SUCCEEDED(hr))

  0012b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012f	7c 10		 jl	 SHORT $L36716

; 3205 :     {
; 3206 :         hr = pStream->Initialize(pdssd);

  00131	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  00134	50		 push	 eax
  00135	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundStream@DirectSound@@QAGJPBU_DSSTREAMDESC@@@Z ; DirectSound::CDirectSoundStream::Initialize
  0013e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L36716:

; 3207 :     }
; 3208 : 
; 3209 :     if(SUCCEEDED(hr))

  00141	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00145	7c 0a		 jl	 SHORT $L36718

; 3210 :     {
; 3211 :         *ppStream = pStream;

  00147	8b 55 10	 mov	 edx, DWORD PTR _ppStream$[ebp]
  0014a	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  0014d	89 02		 mov	 DWORD PTR [edx], eax

; 3212 :     }
; 3213 :     else

  0014f	eb 19		 jmp	 SHORT $L36719
$L36718:

; 3214 :     {
; 3215 :         RELEASE(pStream);

  00151	83 7d fc 00	 cmp	 DWORD PTR _pStream$[ebp], 0
  00155	74 13		 je	 SHORT $L36719
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _pStream$[ebp]
  0015a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015c	8b 45 fc	 mov	 eax, DWORD PTR _pStream$[ebp]
  0015f	50		 push	 eax
  00160	ff 52 04	 call	 DWORD PTR [edx+4]
  00163	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pStream$[ebp], 0
$L36719:

; 3216 :     }
; 3217 : 
; 3218 :     DPF_LEAVE_HRESULT(hr);
; 3219 : 
; 3220 :     return hr;

  0016a	8b 4d f8	 mov	 ecx, DWORD PTR _hr$[ebp]
  0016d	89 4d e8	 mov	 DWORD PTR $T40346[ebp], ecx
  00170	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00173	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00178	8b 45 e8	 mov	 eax, DWORD PTR $T40346[ebp]
$L36699:

; 3221 : }

  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c2 10 00	 ret	 16			; 00000010H
?CreateSoundStream@CDirectSound@DirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z ENDP ; DirectSound::CDirectSound::CreateSoundStream
DSOUND	ENDS
PUBLIC	??_C@_0BP@BPPCBFOG@CDirectSound?3?3GetSpeakerConfig?$AA@ ; `string'
PUBLIC	??_C@_0CH@HMIKHCKH@Failed?5to?5supply?5speaker?5config?5@ ; `string'
;	COMDAT ??_C@_0BP@BPPCBFOG@CDirectSound?3?3GetSpeakerConfig?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@BPPCBFOG@CDirectSound?3?3GetSpeakerConfig?$AA@ DB 'CDirectSound'
	DB	'::GetSpeakerConfig', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@HMIKHCKH@Failed?5to?5supply?5speaker?5config?5@
DSOUND_RD	SEGMENT
??_C@_0CH@HMIKHCKH@Failed?5to?5supply?5speaker?5config?5@ DB 'Failed to s'
	DB	'upply speaker config buffer', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetSpeakerConfig@CDirectSound@DirectSound@@QAGJPAK@Z
DSOUND	SEGMENT
$T40351 = -12
$T40350 = -8
___AutoLock$ = -4
_this$ = 8
_pdwSpeakerConfig$ = 12
?GetSpeakerConfig@CDirectSound@DirectSound@@QAGJPAK@Z PROC NEAR ; DirectSound::CDirectSound::GetSpeakerConfig, COMDAT

; 3249 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3250 :     DPF_ENTER();
; 3251 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 41		 je	 SHORT $L36727
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BPPCBFOG@CDirectSound?3?3GetSpeakerConfig?$AA@
  00021	68 b3 0c 00 00	 push	 3251			; 00000cb3H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40350[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40350[ebp]
  00056	eb 70		 jmp	 SHORT $L36725
$L36727:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BPPCBFOG@CDirectSound?3?3GetSpeakerConfig?$AA@
  0005d	68 b3 0c 00 00	 push	 3251			; 00000cb3H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3252 : 
; 3253 : #ifdef VALIDATE_PARAMETERS
; 3254 : 
; 3255 :     if(!pdwSpeakerConfig)

  0006f	83 7d 0c 00	 cmp	 DWORD PTR _pdwSpeakerConfig$[ebp], 0
  00073	75 2d		 jne	 SHORT $L36731

; 3256 :     {
; 3257 :         DPF_ERROR("Failed to supply speaker config buffer");

  00075	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BPPCBFOG@CDirectSound?3?3GetSpeakerConfig?$AA@
  0007f	68 b9 0c 00 00	 push	 3257			; 00000cb9H
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00089	6a 01		 push	 1
  0008b	6a 09		 push	 9
  0008d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00092	83 c4 18	 add	 esp, 24			; 00000018H
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@HMIKHCKH@Failed?5to?5supply?5speaker?5config?5@
  0009a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0009f	83 c4 04	 add	 esp, 4
$L36731:

; 3258 :     }
; 3259 : 
; 3260 : #endif // VALIDATE_PARAMETERS
; 3261 : 
; 3262 :     *pdwSpeakerConfig = m_pSettings->m_dwSpeakerConfig & ~DSSPEAKER_ENABLE_HEADPHONES;

  000a2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ab	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  000b1	8b 45 0c	 mov	 eax, DWORD PTR _pdwSpeakerConfig$[ebp]
  000b4	89 10		 mov	 DWORD PTR [eax], edx

; 3263 : 
; 3264 :     DPF_LEAVE_HRESULT(DS_OK);
; 3265 : 
; 3266 :     return DS_OK;

  000b6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40351[ebp], 0
  000bd	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000c0	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000c5	8b 45 f4	 mov	 eax, DWORD PTR $T40351[ebp]
$L36725:

; 3267 : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
?GetSpeakerConfig@CDirectSound@DirectSound@@QAGJPAK@Z ENDP ; DirectSound::CDirectSound::GetSpeakerConfig
DSOUND	ENDS
PUBLIC	?DownloadEffectsImage@CMcpxAPU@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z ; DirectSound::CMcpxAPU::DownloadEffectsImage
PUBLIC	??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@ ; `string'
PUBLIC	??_C@_0CB@IMEPOPKJ@Failed?5to?5supply?5an?5image?5buffer@ ; `string'
PUBLIC	??_C@_0BD@BGOMCCDB@Invalid?5image?5size?$AA@	; `string'
;	COMDAT ??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@
DSOUND_RD	SEGMENT
??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@ DB 'CDirectSound::'
	DB	'DownloadEffectsImage', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@IMEPOPKJ@Failed?5to?5supply?5an?5image?5buffer@
DSOUND_RD	SEGMENT
??_C@_0CB@IMEPOPKJ@Failed?5to?5supply?5an?5image?5buffer@ DB 'Failed to s'
	DB	'upply an image buffer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@BGOMCCDB@Invalid?5image?5size?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@BGOMCCDB@Invalid?5image?5size?$AA@ DB 'Invalid image size', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DownloadEffectsImage@CDirectSound@DirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z
DSOUND	SEGMENT
$T40356 = -16
$T40355 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pvImageBuffer$ = 12
_dwImageSize$ = 16
_pImageLoc$ = 20
_ppImageDesc$ = 24
?DownloadEffectsImage@CDirectSound@DirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z PROC NEAR ; DirectSound::CDirectSound::DownloadEffectsImage, COMDAT

; 3301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3302 :     HRESULT                 hr;
; 3303 : 
; 3304 :     DPF_ENTER();
; 3305 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36744
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@
  00021	68 e9 0c 00 00	 push	 3305			; 00000ce9H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40355[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40355[ebp]
  00056	e9 ba 00 00 00	 jmp	 $L36741
$L36744:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@
  00060	68 e9 0c 00 00	 push	 3305			; 00000ce9H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3306 : 
; 3307 : #ifdef VALIDATE_PARAMETERS
; 3308 : 
; 3309 :     if(!pvImageBuffer)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _pvImageBuffer$[ebp], 0
  00076	75 2d		 jne	 SHORT $L36748

; 3310 :     {
; 3311 :         DPF_ERROR("Failed to supply an image buffer");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@
  00082	68 ef 0c 00 00	 push	 3311			; 00000cefH
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@IMEPOPKJ@Failed?5to?5supply?5an?5image?5buffer@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L36748:

; 3312 :     }
; 3313 : 
; 3314 :     if(dwImageSize <= (DSP_COMMANDBLOCK_SCRATCHOFFSET + sizeof(HOST_TO_DSP_COMMANDBLOCK)))

  000a5	81 7d 10 18 08
	00 00		 cmp	 DWORD PTR _dwImageSize$[ebp], 2072 ; 00000818H
  000ac	77 2d		 ja	 SHORT $L36751

; 3315 :     {
; 3316 :         DPF_ERROR("Invalid image size");

  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@LHHMLIME@CDirectSound?3?3DownloadEffectsIma@
  000b8	68 f4 0c 00 00	 push	 3316			; 00000cf4H
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c2	6a 01		 push	 1
  000c4	6a 09		 push	 9
  000c6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000cb	83 c4 18	 add	 esp, 24			; 00000018H
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@BGOMCCDB@Invalid?5image?5size?$AA@
  000d3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d8	83 c4 04	 add	 esp, 4
$L36751:

; 3317 :     }
; 3318 : 
; 3319 : #endif // VALIDATE_PARAMETERS
; 3320 : 
; 3321 :     //
; 3322 :     // Save the effect locations
; 3323 :     //
; 3324 : 
; 3325 :     m_pSettings->SetEffectImageLocations(pImageLoc);

  000db	8b 45 14	 mov	 eax, DWORD PTR _pImageLoc$[ebp]
  000de	50		 push	 eax
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000e5	e8 00 00 00 00	 call	 ?SetEffectImageLocations@CDirectSoundSettings@DirectSound@@QAEXPBU_DSEFFECTIMAGELOC@@@Z ; DirectSound::CDirectSoundSettings::SetEffectImageLocations

; 3326 : 
; 3327 :     //
; 3328 :     // Download the image
; 3329 :     //
; 3330 : 
; 3331 :     hr = m_pDevice->DownloadEffectsImage(pvImageBuffer, dwImageSize, ppImageDesc);

  000ea	8b 55 18	 mov	 edx, DWORD PTR _ppImageDesc$[ebp]
  000ed	52		 push	 edx
  000ee	8b 45 10	 mov	 eax, DWORD PTR _dwImageSize$[ebp]
  000f1	50		 push	 eax
  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _pvImageBuffer$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  000fc	e8 00 00 00 00	 call	 ?DownloadEffectsImage@CMcpxAPU@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z ; DirectSound::CMcpxAPU::DownloadEffectsImage
  00101	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 3332 : 
; 3333 :     DPF_LEAVE_HRESULT(hr);
; 3334 : 
; 3335 :     return hr;

  00104	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00107	89 45 f0	 mov	 DWORD PTR $T40356[ebp], eax
  0010a	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0010d	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00112	8b 45 f0	 mov	 eax, DWORD PTR $T40356[ebp]
$L36741:

; 3336 : }

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 14 00	 ret	 20			; 00000014H
?DownloadEffectsImage@CDirectSound@DirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z ENDP ; DirectSound::CDirectSound::DownloadEffectsImage
DSOUND	ENDS
PUBLIC	??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@		; `string'
EXTRN	?DownloadEffectsImage@CMcpxGPDspManager@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z:NEAR ; DirectSound::CMcpxGPDspManager::DownloadEffectsImage
;	COMDAT ??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
DSOUND_RD	SEGMENT
??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pri'
	DB	'vate\windows\directx\dsound\dsound\mcpapu.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@ DB 'm_pGpDspManager', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DownloadEffectsImage@CMcpxAPU@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
_pvImageBuffer$ = 8
_dwImageSize$ = 12
_ppImageDesc$ = 16
?DownloadEffectsImage@CMcpxAPU@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z PROC NEAR ; DirectSound::CMcpxAPU::DownloadEffectsImage, COMDAT
; _this$ = ecx

; 193  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :         HRESULT                 hr;
; 195  :     
; 196  :         ASSERT(m_pGpDspManager);

  00009	68 c4 00 00 00	 push	 196			; 000000c4H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00021	0f 94 c1	 sete	 cl
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 197  : 
; 198  :         if(SUCCEEDED(hr = m_pGpDspManager->DownloadEffectsImage(pvImageBuffer, dwImageSize, ppImageDesc)))

  0002d	8b 55 10	 mov	 edx, DWORD PTR _ppImageDesc$[ebp]
  00030	52		 push	 edx
  00031	8b 45 0c	 mov	 eax, DWORD PTR _dwImageSize$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _pvImageBuffer$[ebp]
  00038	51		 push	 ecx
  00039	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0003f	e8 00 00 00 00	 call	 ?DownloadEffectsImage@CMcpxGPDspManager@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z ; DirectSound::CMcpxGPDspManager::DownloadEffectsImage
  00044	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
  00047	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 17		 jl	 SHORT $L34716

; 199  :         {
; 200  :             m_dwState |= MCPX_APUSTATE_GPIMAGE;

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 88 28 03 00
	00		 mov	 ecx, DWORD PTR [eax+808]
  00056	83 c9 01	 or	 ecx, 1
  00059	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	89 8a 28 03 00
	00		 mov	 DWORD PTR [edx+808], ecx

; 201  :         }
; 202  :         else

  00062	eb 15		 jmp	 SHORT $L34717
$L34716:

; 203  :         {
; 204  :             m_dwState &= ~MCPX_APUSTATE_GPIMAGE;

  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 88 28 03 00
	00		 mov	 ecx, DWORD PTR [eax+808]
  0006d	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00070	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00073	89 8a 28 03 00
	00		 mov	 DWORD PTR [edx+808], ecx
$L34717:

; 205  :         }
; 206  : 
; 207  :         return hr;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 208  :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 0c 00	 ret	 12			; 0000000cH
?DownloadEffectsImage@CMcpxAPU@DirectSound@@QAEJPBXKPAPAU_DSEFFECTIMAGEDESC@@@Z ENDP ; DirectSound::CMcpxAPU::DownloadEffectsImage
DSOUND	ENDS
PUBLIC	?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxAPU::SetEffectData
PUBLIC	??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@ ; `string'
PUBLIC	??_C@_0BN@BHOEKAGO@Offset?5must?5be?5DWORD?9aligned?$AA@ ; `string'
PUBLIC	??_C@_0BP@JDIKGDBB@Failed?5to?5supply?5a?5data?5buffer?$AA@ ; `string'
PUBLIC	??_C@_0BC@DFMMBJFB@Invalid?5data?5size?$AA@	; `string'
PUBLIC	??_C@_0CA@BEEJHJJ@Data?5size?5must?5be?5DWORD?9aligned?$AA@ ; `string'
;	COMDAT ??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@ DB 'CDirectSound::S'
	DB	'etEffectData', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@BHOEKAGO@Offset?5must?5be?5DWORD?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@BHOEKAGO@Offset?5must?5be?5DWORD?9aligned?$AA@ DB 'Offset must '
	DB	'be DWORD-aligned', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@JDIKGDBB@Failed?5to?5supply?5a?5data?5buffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@JDIKGDBB@Failed?5to?5supply?5a?5data?5buffer?$AA@ DB 'Failed to'
	DB	' supply a data buffer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BC@DFMMBJFB@Invalid?5data?5size?$AA@
DSOUND_RD	SEGMENT
??_C@_0BC@DFMMBJFB@Invalid?5data?5size?$AA@ DB 'Invalid data size', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@BEEJHJJ@Data?5size?5must?5be?5DWORD?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@BEEJHJJ@Data?5size?5must?5be?5DWORD?9aligned?$AA@ DB 'Data size'
	DB	' must be DWORD-aligned', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEffectData@CDirectSound@DirectSound@@QAGJKKPBXKK@Z
DSOUND	SEGMENT
$T40364 = -16
$T40363 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwEffectIndex$ = 12
_dwOffset$ = 16
_pvData$ = 20
_dwDataSize$ = 24
_dwFlags$ = 28
?SetEffectData@CDirectSound@DirectSound@@QAGJKKPBXKK@Z PROC NEAR ; DirectSound::CDirectSound::SetEffectData, COMDAT

; 3372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3373 :     HRESULT                 hr;
; 3374 : 
; 3375 :     DPF_ENTER();
; 3376 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36764
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
  00021	68 30 0d 00 00	 push	 3376			; 00000d30H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40363[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40363[ebp]
  00056	e9 55 01 00 00	 jmp	 $L36761
$L36764:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
  00060	68 30 0d 00 00	 push	 3376			; 00000d30H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3377 : 
; 3378 : #ifdef VALIDATE_PARAMETERS
; 3379 : 
; 3380 :     if(dwOffset & 3)

  00072	8b 45 10	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00075	83 e0 03	 and	 eax, 3
  00078	85 c0		 test	 eax, eax
  0007a	74 2d		 je	 SHORT $L36768

; 3381 :     {
; 3382 :         DPF_ERROR("Offset must be DWORD-aligned");

  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
  00086	68 36 0d 00 00	 push	 3382			; 00000d36H
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00090	6a 01		 push	 1
  00092	6a 09		 push	 9
  00094	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BHOEKAGO@Offset?5must?5be?5DWORD?9aligned?$AA@
  000a1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a6	83 c4 04	 add	 esp, 4
$L36768:

; 3383 :     }
; 3384 : 
; 3385 :     if(!pvData)

  000a9	83 7d 14 00	 cmp	 DWORD PTR _pvData$[ebp], 0
  000ad	75 2d		 jne	 SHORT $L36770

; 3386 :     {
; 3387 :         DPF_ERROR("Failed to supply a data buffer");

  000af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
  000b9	68 3b 0d 00 00	 push	 3387			; 00000d3bH
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c3	6a 01		 push	 1
  000c5	6a 09		 push	 9
  000c7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000cc	83 c4 18	 add	 esp, 24			; 00000018H
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@JDIKGDBB@Failed?5to?5supply?5a?5data?5buffer?$AA@
  000d4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d9	83 c4 04	 add	 esp, 4
$L36770:

; 3388 :     }
; 3389 : 
; 3390 :     if(!dwDataSize)

  000dc	83 7d 18 00	 cmp	 DWORD PTR _dwDataSize$[ebp], 0
  000e0	75 2d		 jne	 SHORT $L36772

; 3391 :     {
; 3392 :         DPF_ERROR("Invalid data size");

  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
  000ec	68 40 0d 00 00	 push	 3392			; 00000d40H
  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000f6	6a 01		 push	 1
  000f8	6a 09		 push	 9
  000fa	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ff	83 c4 18	 add	 esp, 24			; 00000018H
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@DFMMBJFB@Invalid?5data?5size?$AA@
  00107	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0010c	83 c4 04	 add	 esp, 4
$L36772:

; 3393 :     }
; 3394 : 
; 3395 :     if(dwDataSize & 3)

  0010f	8b 4d 18	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  00112	83 e1 03	 and	 ecx, 3
  00115	85 c9		 test	 ecx, ecx
  00117	74 2d		 je	 SHORT $L36774

; 3396 :     {
; 3397 :         DPF_ERROR("Data size must be DWORD-aligned");

  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
  00123	68 45 0d 00 00	 push	 3397			; 00000d45H
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0012d	6a 01		 push	 1
  0012f	6a 09		 push	 9
  00131	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00136	83 c4 18	 add	 esp, 24			; 00000018H
  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BEEJHJJ@Data?5size?5must?5be?5DWORD?9aligned?$AA@
  0013e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00143	83 c4 04	 add	 esp, 4
$L36774:

; 3398 :     }
; 3399 : 
; 3400 :     if(dwFlags & ~DSFX_VALID)

  00146	8b 55 1c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00149	83 e2 fe	 and	 edx, -2			; fffffffeH
  0014c	85 d2		 test	 edx, edx
  0014e	74 2d		 je	 SHORT $L36776

; 3401 :     {
; 3402 :         DPF_ERROR("Invalid flags");

  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00155	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BGFJIEHG@CDirectSound?3?3SetEffectData?$AA@
  0015a	68 4a 0d 00 00	 push	 3402			; 00000d4aH
  0015f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00164	6a 01		 push	 1
  00166	6a 09		 push	 9
  00168	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0016d	83 c4 18	 add	 esp, 24			; 00000018H
  00170	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@
  00175	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017a	83 c4 04	 add	 esp, 4
$L36776:

; 3403 :     }
; 3404 : 
; 3405 : #endif // VALIDATE_PARAMETERS
; 3406 : 
; 3407 :     hr = m_pDevice->SetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize, dwFlags);

  0017d	8b 45 1c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00180	50		 push	 eax
  00181	8b 4d 18	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  00184	51		 push	 ecx
  00185	8b 55 14	 mov	 edx, DWORD PTR _pvData$[ebp]
  00188	52		 push	 edx
  00189	8b 45 10	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  0018c	50		 push	 eax
  0018d	8b 4d 0c	 mov	 ecx, DWORD PTR _dwEffectIndex$[ebp]
  00190	51		 push	 ecx
  00191	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00194	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00197	e8 00 00 00 00	 call	 ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxAPU::SetEffectData
  0019c	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 3408 : 
; 3409 :     DPF_LEAVE_HRESULT(hr);
; 3410 : 
; 3411 :     return hr;

  0019f	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  001a2	89 45 f0	 mov	 DWORD PTR $T40364[ebp], eax
  001a5	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  001a8	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  001ad	8b 45 f0	 mov	 eax, DWORD PTR $T40364[ebp]
$L36761:

; 3412 : }

  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c2 18 00	 ret	 24			; 00000018H
?SetEffectData@CDirectSound@DirectSound@@QAGJKKPBXKK@Z ENDP ; DirectSound::CDirectSound::SetEffectData
DSOUND	ENDS
PUBLIC	??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@ ; `string'
EXTRN	?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z:NEAR ; DirectSound::CMcpxGPDspManager::SetEffectData
;	COMDAT ??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
DSOUND_RD	SEGMENT
??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@ DB 'm_dwState &'
	DB	' MCPX_APUSTATE_GPIMAGE', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwEffectIndex$ = 8
_dwOffset$ = 12
_pvData$ = 16
_dwDataSize$ = 20
_dwFlags$ = 24
?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z PROC NEAR ; DirectSound::CMcpxAPU::SetEffectData, COMDAT
; _this$ = ecx

; 211  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 212  :         ASSERT(m_pGpDspManager);

  00007	68 d4 00 00 00	 push	 212			; 000000d4H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	0f 94 c1	 sete	 cl
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 213  :         ASSERT(m_dwState & MCPX_APUSTATE_GPIMAGE);

  0002b	68 d5 00 00 00	 push	 213			; 000000d5H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00043	83 e0 01	 and	 eax, 1
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 214  : 
; 215  :         return m_pGpDspManager->SetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize, dwFlags);

  00054	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 14	 mov	 edx, DWORD PTR _dwDataSize$[ebp]
  0005b	52		 push	 edx
  0005c	8b 45 10	 mov	 eax, DWORD PTR _pvData$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _dwOffset$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 08	 mov	 edx, DWORD PTR _dwEffectIndex$[ebp]
  00067	52		 push	 edx
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006e	e8 00 00 00 00	 call	 ?SetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPBXKK@Z ; DirectSound::CMcpxGPDspManager::SetEffectData

; 216  :     }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 14 00	 ret	 20			; 00000014H
?SetEffectData@CMcpxAPU@DirectSound@@QAEJKKPBXKK@Z ENDP	; DirectSound::CMcpxAPU::SetEffectData
DSOUND	ENDS
PUBLIC	?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxAPU::GetEffectData
PUBLIC	??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@ ; `string'
;	COMDAT ??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@ DB 'CDirectSound::G'
	DB	'etEffectData', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetEffectData@CDirectSound@DirectSound@@QAGJKKPAXK@Z
DSOUND	SEGMENT
$T40372 = -16
$T40371 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwEffectIndex$ = 12
_dwOffset$ = 16
_pvData$ = 20
_dwDataSize$ = 24
?GetEffectData@CDirectSound@DirectSound@@QAGJKKPAXK@Z PROC NEAR ; DirectSound::CDirectSound::GetEffectData, COMDAT

; 3444 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3445 :     HRESULT                 hr;
; 3446 : 
; 3447 :     DPF_ENTER();
; 3448 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36787
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
  00021	68 78 0d 00 00	 push	 3448			; 00000d78H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40371[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40371[ebp]
  00056	e9 1a 01 00 00	 jmp	 $L36784
$L36787:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
  00060	68 78 0d 00 00	 push	 3448			; 00000d78H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3449 : 
; 3450 : #ifdef VALIDATE_PARAMETERS
; 3451 : 
; 3452 :     if(dwOffset & 3)

  00072	8b 45 10	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00075	83 e0 03	 and	 eax, 3
  00078	85 c0		 test	 eax, eax
  0007a	74 2d		 je	 SHORT $L36791

; 3453 :     {
; 3454 :         DPF_ERROR("Offset must be DWORD-aligned");

  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
  00086	68 7e 0d 00 00	 push	 3454			; 00000d7eH
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00090	6a 01		 push	 1
  00092	6a 09		 push	 9
  00094	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BHOEKAGO@Offset?5must?5be?5DWORD?9aligned?$AA@
  000a1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a6	83 c4 04	 add	 esp, 4
$L36791:

; 3455 :     }
; 3456 : 
; 3457 :     if(!pvData)

  000a9	83 7d 14 00	 cmp	 DWORD PTR _pvData$[ebp], 0
  000ad	75 2d		 jne	 SHORT $L36792

; 3458 :     {
; 3459 :         DPF_ERROR("Failed to supply a data buffer");

  000af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
  000b9	68 83 0d 00 00	 push	 3459			; 00000d83H
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c3	6a 01		 push	 1
  000c5	6a 09		 push	 9
  000c7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000cc	83 c4 18	 add	 esp, 24			; 00000018H
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@JDIKGDBB@Failed?5to?5supply?5a?5data?5buffer?$AA@
  000d4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d9	83 c4 04	 add	 esp, 4
$L36792:

; 3460 :     }
; 3461 : 
; 3462 :     if(!dwDataSize)

  000dc	83 7d 18 00	 cmp	 DWORD PTR _dwDataSize$[ebp], 0
  000e0	75 2d		 jne	 SHORT $L36793

; 3463 :     {
; 3464 :         DPF_ERROR("Invalid data size");

  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
  000ec	68 88 0d 00 00	 push	 3464			; 00000d88H
  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000f6	6a 01		 push	 1
  000f8	6a 09		 push	 9
  000fa	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ff	83 c4 18	 add	 esp, 24			; 00000018H
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@DFMMBJFB@Invalid?5data?5size?$AA@
  00107	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0010c	83 c4 04	 add	 esp, 4
$L36793:

; 3465 :     }
; 3466 : 
; 3467 :     if(dwDataSize & 3)

  0010f	8b 4d 18	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  00112	83 e1 03	 and	 ecx, 3
  00115	85 c9		 test	 ecx, ecx
  00117	74 2d		 je	 SHORT $L36794

; 3468 :     {
; 3469 :         DPF_ERROR("Data size must be DWORD-aligned");

  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@GJEHDHAB@CDirectSound?3?3GetEffectData?$AA@
  00123	68 8d 0d 00 00	 push	 3469			; 00000d8dH
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0012d	6a 01		 push	 1
  0012f	6a 09		 push	 9
  00131	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00136	83 c4 18	 add	 esp, 24			; 00000018H
  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BEEJHJJ@Data?5size?5must?5be?5DWORD?9aligned?$AA@
  0013e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00143	83 c4 04	 add	 esp, 4
$L36794:

; 3470 :     }
; 3471 : 
; 3472 : #endif // VALIDATE_PARAMETERS
; 3473 : 
; 3474 :     hr = m_pDevice->GetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize);

  00146	8b 55 18	 mov	 edx, DWORD PTR _dwDataSize$[ebp]
  00149	52		 push	 edx
  0014a	8b 45 14	 mov	 eax, DWORD PTR _pvData$[ebp]
  0014d	50		 push	 eax
  0014e	8b 4d 10	 mov	 ecx, DWORD PTR _dwOffset$[ebp]
  00151	51		 push	 ecx
  00152	8b 55 0c	 mov	 edx, DWORD PTR _dwEffectIndex$[ebp]
  00155	52		 push	 edx
  00156	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00159	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0015c	e8 00 00 00 00	 call	 ?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxAPU::GetEffectData
  00161	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 3475 : 
; 3476 :     DPF_LEAVE_HRESULT(hr);
; 3477 : 
; 3478 :     return hr;

  00164	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00167	89 4d f0	 mov	 DWORD PTR $T40372[ebp], ecx
  0016a	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0016d	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00172	8b 45 f0	 mov	 eax, DWORD PTR $T40372[ebp]
$L36784:

; 3479 : }

  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 14 00	 ret	 20			; 00000014H
?GetEffectData@CDirectSound@DirectSound@@QAGJKKPAXK@Z ENDP ; DirectSound::CDirectSound::GetEffectData
DSOUND	ENDS
EXTRN	?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z:NEAR ; DirectSound::CMcpxGPDspManager::GetEffectData
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
;	COMDAT ?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z
DSOUND	SEGMENT
_this$ = -4
_dwEffectIndex$ = 8
_dwOffset$ = 12
_pvData$ = 16
_dwDataSize$ = 20
?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z PROC NEAR ; DirectSound::CMcpxAPU::GetEffectData, COMDAT
; _this$ = ecx

; 219  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  :         ASSERT(m_pGpDspManager);

  00007	68 dc 00 00 00	 push	 220			; 000000dcH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	0f 94 c1	 sete	 cl
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 221  :         ASSERT(m_dwState & MCPX_APUSTATE_GPIMAGE);

  0002b	68 dd 00 00 00	 push	 221			; 000000ddH
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00043	83 e0 01	 and	 eax, 1
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 222  : 
; 223  :         return m_pGpDspManager->GetEffectData(dwEffectIndex, dwOffset, pvData, dwDataSize);

  00054	8b 4d 14	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  00057	51		 push	 ecx
  00058	8b 55 10	 mov	 edx, DWORD PTR _pvData$[ebp]
  0005b	52		 push	 edx
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _dwEffectIndex$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00067	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0006a	e8 00 00 00 00	 call	 ?GetEffectData@CMcpxGPDspManager@DirectSound@@QAEJKKPAXK@Z ; DirectSound::CMcpxGPDspManager::GetEffectData

; 224  :     }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 10 00	 ret	 16			; 00000010H
?GetEffectData@CMcpxAPU@DirectSound@@QAEJKKPAXK@Z ENDP	; DirectSound::CMcpxAPU::GetEffectData
DSOUND	ENDS
PUBLIC	?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ	; DirectSound::CMcpxAPU::CommitEffectData
PUBLIC	??_C@_0BP@BANNDMNP@CDirectSound?3?3CommitEffectData?$AA@ ; `string'
;	COMDAT ??_C@_0BP@BANNDMNP@CDirectSound?3?3CommitEffectData?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BP@BANNDMNP@CDirectSound?3?3CommitEffectData?$AA@ DB 'CDirectSound'
	DB	'::CommitEffectData', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CommitEffectData@CDirectSound@DirectSound@@QAGJXZ
DSOUND	SEGMENT
$T40380 = -16
$T40379 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
?CommitEffectData@CDirectSound@DirectSound@@QAGJXZ PROC NEAR ; DirectSound::CDirectSound::CommitEffectData, COMDAT

; 3505 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3506 :     HRESULT                 hr;
; 3507 : 
; 3508 :     DPF_ENTER();
; 3509 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 41		 je	 SHORT $L36802
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BANNDMNP@CDirectSound?3?3CommitEffectData?$AA@
  00021	68 b5 0d 00 00	 push	 3509			; 00000db5H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40379[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40379[ebp]
  00056	eb 36		 jmp	 SHORT $L36799
$L36802:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@BANNDMNP@CDirectSound?3?3CommitEffectData?$AA@
  0005d	68 b5 0d 00 00	 push	 3509			; 00000db5H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3510 : 
; 3511 :     hr = m_pDevice->CommitEffectData();

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00075	e8 00 00 00 00	 call	 ?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ ; DirectSound::CMcpxAPU::CommitEffectData
  0007a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 3512 : 
; 3513 :     DPF_LEAVE_HRESULT(hr);
; 3514 : 
; 3515 :     return hr;

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00080	89 4d f0	 mov	 DWORD PTR $T40380[ebp], ecx
  00083	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00086	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008b	8b 45 f0	 mov	 eax, DWORD PTR $T40380[ebp]
$L36799:

; 3516 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?CommitEffectData@CDirectSound@DirectSound@@QAGJXZ ENDP	; DirectSound::CDirectSound::CommitEffectData
DSOUND	ENDS
EXTRN	?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z:NEAR ; DirectSound::CMcpxGPDspManager::CommitChanges
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
;	COMDAT ?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ
DSOUND	SEGMENT
_this$ = -4
?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ PROC NEAR ; DirectSound::CMcpxAPU::CommitEffectData, COMDAT
; _this$ = ecx

; 227  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 228  :         ASSERT(m_pGpDspManager);

  00007	68 e4 00 00 00	 push	 228			; 000000e4H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@IANIBDAF@m_pGpDspManager?$AA@
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	0f 94 c1	 sete	 cl
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 229  :         ASSERT(m_dwState & MCPX_APUSTATE_GPIMAGE);

  0002b	68 e5 00 00 00	 push	 229			; 000000e5H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@NBALOMF@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@ONCKHILO@m_dwState?5?$CG?5MCPX_APUSTATE_GPIMAG@
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00043	83 e0 01	 and	 eax, 1
  00046	f7 d8		 neg	 eax
  00048	1b c0		 sbb	 eax, eax
  0004a	40		 inc	 eax
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 230  : 
; 231  :         m_pGpDspManager->CommitChanges(0, 0);

  00054	6a 00		 push	 0
  00056	6a 00		 push	 0
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0005e	e8 00 00 00 00	 call	 ?CommitChanges@CMcpxGPDspManager@DirectSound@@QAEXKK@Z ; DirectSound::CMcpxGPDspManager::CommitChanges

; 232  : 
; 233  :         return DS_OK;

  00063	33 c0		 xor	 eax, eax

; 234  :     }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?CommitEffectData@CMcpxAPU@DirectSound@@QAEJXZ ENDP	; DirectSound::CMcpxAPU::CommitEffectData
DSOUND	ENDS
PUBLIC	??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@ ; `string'
PUBLIC	??_C@_0P@NEKPABJB@Invalid?5mixbin?$AA@		; `string'
PUBLIC	??_C@_0BH@DDEKMEPM@Invalid?5headroom?5value?$AA@ ; `string'
EXTRN	?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z:NEAR ; DirectSound::CMcpxAPU::SetMixBinHeadroom
;	COMDAT ??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@ DB 'CDirectSoun'
	DB	'd::SetMixBinHeadroom', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@NEKPABJB@Invalid?5mixbin?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@NEKPABJB@Invalid?5mixbin?$AA@ DB 'Invalid mixbin', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@DDEKMEPM@Invalid?5headroom?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@DDEKMEPM@Invalid?5headroom?5value?$AA@ DB 'Invalid headroom val'
	DB	'ue', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBinHeadroom@CDirectSound@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT
$T40388 = -16
$T40387 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwMixBin$ = 12
_dwHeadroom$ = 16
?SetMixBinHeadroom@CDirectSound@DirectSound@@QAGJKK@Z PROC NEAR ; DirectSound::CDirectSound::SetMixBinHeadroom, COMDAT

; 3544 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3545 :     HRESULT                 hr;
; 3546 :     
; 3547 :     DPF_ENTER();
; 3548 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36814
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@
  00021	68 dc 0d 00 00	 push	 3548			; 00000ddcH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40387[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40387[ebp]
  00056	e9 b6 00 00 00	 jmp	 $L36811
$L36814:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@
  00060	68 dc 0d 00 00	 push	 3548			; 00000ddcH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3549 : 
; 3550 : #ifdef VALIDATE_PARAMETERS
; 3551 : 
; 3552 :     if(dwMixBin >= DSMIXBIN_COUNT)

  00072	83 7d 0c 20	 cmp	 DWORD PTR _dwMixBin$[ebp], 32 ; 00000020H
  00076	72 2d		 jb	 SHORT $L36818

; 3553 :     {
; 3554 :         DPF_ERROR("Invalid mixbin");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@
  00082	68 e2 0d 00 00	 push	 3554			; 00000de2H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@NEKPABJB@Invalid?5mixbin?$AA@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L36818:

; 3555 :     }
; 3556 : 
; 3557 :     if((dwHeadroom < DSHEADROOM_MIN) || (dwHeadroom > DSHEADROOM_MAX))

  000a5	83 7d 10 00	 cmp	 DWORD PTR _dwHeadroom$[ebp], 0
  000a9	72 06		 jb	 SHORT $L36821
  000ab	83 7d 10 07	 cmp	 DWORD PTR _dwHeadroom$[ebp], 7
  000af	76 2d		 jbe	 SHORT $L36820
$L36821:

; 3558 :     {
; 3559 :         DPF_ERROR("Invalid headroom value");

  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@CKGJKEKA@CDirectSound?3?3SetMixBinHeadroom?$AA@
  000bb	68 e7 0d 00 00	 push	 3559			; 00000de7H
  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c5	6a 01		 push	 1
  000c7	6a 09		 push	 9
  000c9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ce	83 c4 18	 add	 esp, 24			; 00000018H
  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@DDEKMEPM@Invalid?5headroom?5value?$AA@
  000d6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000db	83 c4 04	 add	 esp, 4
$L36820:

; 3560 :     }
; 3561 : 
; 3562 : #endif // VALIDATE_PARAMETERS
; 3563 : 
; 3564 :     //
; 3565 :     // Update the settings object
; 3566 :     //
; 3567 : 
; 3568 :     m_pSettings->m_abMixBinHeadroom[dwMixBin] = (BYTE)dwHeadroom;

  000de	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e4	8b 55 0c	 mov	 edx, DWORD PTR _dwMixBin$[ebp]
  000e7	8a 45 10	 mov	 al, BYTE PTR _dwHeadroom$[ebp]
  000ea	88 44 11 14	 mov	 BYTE PTR [ecx+edx+20], al

; 3569 :     
; 3570 :     //
; 3571 :     // Update the implementation object
; 3572 :     //
; 3573 : 
; 3574 :     hr = m_pDevice->SetMixBinHeadroom(dwMixBin);

  000ee	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMixBin$[ebp]
  000f1	51		 push	 ecx
  000f2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  000f8	e8 00 00 00 00	 call	 ?SetMixBinHeadroom@CMcpxAPU@DirectSound@@QAEJK@Z ; DirectSound::CMcpxAPU::SetMixBinHeadroom
  000fd	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 3575 : 
; 3576 :     DPF_LEAVE_HRESULT(hr);
; 3577 : 
; 3578 :     return hr;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00103	89 45 f0	 mov	 DWORD PTR $T40388[ebp], eax
  00106	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00109	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0010e	8b 45 f0	 mov	 eax, DWORD PTR $T40388[ebp]
$L36811:

; 3579 : }

  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c2 0c 00	 ret	 12			; 0000000cH
?SetMixBinHeadroom@CDirectSound@DirectSound@@QAGJKK@Z ENDP ; DirectSound::CDirectSound::SetMixBinHeadroom
DSOUND	ENDS
PUBLIC	__real@00800000
PUBLIC	__real@7f7fffff
PUBLIC	__real@00000000
PUBLIC	__real@41200000
PUBLIC	??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@ ; `string'
PUBLIC	??_C@_0BE@GEFIHGFG@Buffer?5not?5supplied?$AA@	; `string'
PUBLIC	??_C@_0BJ@BIBJPPFF@Structure?5size?5too?5small?$AA@ ; `string'
PUBLIC	??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@ ; `string'
PUBLIC	??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@ ; `string'
PUBLIC	??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@ ; `string'
PUBLIC	??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@ ; `string'
PUBLIC	??_C@_0BE@FGABALFI@Invalid?5orientation?$AA@	; `string'
EXTRN	?NormalizeFloat@Math@DirectSound@@YGMM@Z:NEAR	; DirectSound::Math::NormalizeFloat
;	COMDAT ??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@ DB 'CDirectSound'
	DB	'::SetAllParameters', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@GEFIHGFG@Buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@GEFIHGFG@Buffer?5not?5supplied?$AA@ DB 'Buffer not supplied', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@BIBJPPFF@Structure?5size?5too?5small?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@BIBJPPFF@Structure?5size?5too?5small?$AA@ DB 'Structure size to'
	DB	'o small', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
DSOUND_RD	SEGMENT
??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@ DB 'Specified inv'
	DB	'alid or unsupported flags (%lx)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-038
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT ??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@ DB 'Distance fa'
	DB	'ctor out of bounds', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT ??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@ DB 'Doppler fact'
	DB	'or out of bounds', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@ DB 'Rolloff fact'
	DB	'or out of bounds', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@FGABALFI@Invalid?5orientation?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@FGABALFI@Invalid?5orientation?$AA@ DB 'Invalid orientation', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetAllParameters@CDirectSound@DirectSound@@QAGJPBU_DS3DLISTENER@@K@Z
DSOUND	SEGMENT
$T40393 = -12
$T40392 = -8
___AutoLock$ = -4
_this$ = 8
_pParams$ = 12
_dwFlags$ = 16
?SetAllParameters@CDirectSound@DirectSound@@QAGJPBU_DS3DLISTENER@@K@Z PROC NEAR ; DirectSound::CDirectSound::SetAllParameters, COMDAT

; 3609 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3610 :     DPF_ENTER();
; 3611 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36831
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  00021	68 1b 0e 00 00	 push	 3611			; 00000e1bH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40392[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40392[ebp]
  00056	e9 d3 03 00 00	 jmp	 $L36829
$L36831:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  00060	68 1b 0e 00 00	 push	 3611			; 00000e1bH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3612 : 
; 3613 : #ifdef VALIDATE_PARAMETERS
; 3614 : 
; 3615 :     if(!pParams)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _pParams$[ebp], 0
  00076	75 2d		 jne	 SHORT $L36835

; 3616 :     {
; 3617 :         DPF_ERROR("Buffer not supplied");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  00082	68 21 0e 00 00	 push	 3617			; 00000e21H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@GEFIHGFG@Buffer?5not?5supplied?$AA@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L36835:

; 3618 :     }
; 3619 : 
; 3620 :     if(pParams->dwSize < sizeof(*pParams))

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  000a8	83 38 40	 cmp	 DWORD PTR [eax], 64	; 00000040H
  000ab	73 2d		 jae	 SHORT $L36837

; 3621 :     {
; 3622 :         DPF_ERROR("Structure size too small");

  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  000b7	68 26 0e 00 00	 push	 3622			; 00000e26H
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c1	6a 01		 push	 1
  000c3	6a 09		 push	 9
  000c5	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ca	83 c4 18	 add	 esp, 24			; 00000018H
  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@BIBJPPFF@Structure?5size?5too?5small?$AA@
  000d2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d7	83 c4 04	 add	 esp, 4
$L36837:

; 3623 :     }
; 3624 : 
; 3625 :     if(dwFlags & ~DS3D_VALID)

  000da	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000dd	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000e0	85 c9		 test	 ecx, ecx
  000e2	74 34		 je	 SHORT $L36839

; 3626 :     {
; 3627 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  000ee	68 2b 0e 00 00	 push	 3627			; 00000e2bH
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000f8	6a 01		 push	 1
  000fa	6a 09		 push	 9
  000fc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00101	83 c4 18	 add	 esp, 24			; 00000018H
  00104	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00107	83 e2 fe	 and	 edx, -2			; fffffffeH
  0010a	52		 push	 edx
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00110	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00115	83 c4 08	 add	 esp, 8
$L36839:

; 3628 :     }
; 3629 : 
; 3630 :     if((pParams->flDistanceFactor < DS3D_MINDISTANCEFACTOR) || (pParams->flDistanceFactor > DS3D_MAXDISTANCEFACTOR))

  00118	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0011b	d9 40 34	 fld	 DWORD PTR [eax+52]
  0011e	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00800000
  00124	df e0		 fnstsw	 ax
  00126	f6 c4 05	 test	 ah, 5
  00129	7b 13		 jnp	 SHORT $L36842
  0012b	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0012e	d9 41 34	 fld	 DWORD PTR [ecx+52]
  00131	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@7f7fffff
  00137	df e0		 fnstsw	 ax
  00139	f6 c4 41	 test	 ah, 65			; 00000041H
  0013c	75 2d		 jne	 SHORT $L36841
$L36842:

; 3631 :     {
; 3632 :         DPF_ERROR("Distance factor out of bounds");

  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  00148	68 30 0e 00 00	 push	 3632			; 00000e30H
  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00152	6a 01		 push	 1
  00154	6a 09		 push	 9
  00156	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0015b	83 c4 18	 add	 esp, 24			; 00000018H
  0015e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@
  00163	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00168	83 c4 04	 add	 esp, 4
$L36841:

; 3633 :     }
; 3634 : 
; 3635 :     if((pParams->flDopplerFactor < DS3D_MINDOPPLERFACTOR) || (pParams->flDopplerFactor > DS3D_MAXDOPPLERFACTOR))

  0016b	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0016e	d9 42 3c	 fld	 DWORD PTR [edx+60]
  00171	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00177	df e0		 fnstsw	 ax
  00179	f6 c4 05	 test	 ah, 5
  0017c	7b 13		 jnp	 SHORT $L36845
  0017e	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00181	d9 40 3c	 fld	 DWORD PTR [eax+60]
  00184	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  0018a	df e0		 fnstsw	 ax
  0018c	f6 c4 41	 test	 ah, 65			; 00000041H
  0018f	75 2d		 jne	 SHORT $L36844
$L36845:

; 3636 :     {
; 3637 :         DPF_ERROR("Doppler factor out of bounds");

  00191	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  0019b	68 35 0e 00 00	 push	 3637			; 00000e35H
  001a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001a5	6a 01		 push	 1
  001a7	6a 09		 push	 9
  001a9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001ae	83 c4 18	 add	 esp, 24			; 00000018H
  001b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@
  001b6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001bb	83 c4 04	 add	 esp, 4
$L36844:

; 3638 :     }
; 3639 : 
; 3640 :     if((pParams->flRolloffFactor < DS3D_MINROLLOFFFACTOR) || (pParams->flRolloffFactor > DS3D_MAXROLLOFFFACTOR))

  001be	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  001c1	d9 41 38	 fld	 DWORD PTR [ecx+56]
  001c4	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  001ca	df e0		 fnstsw	 ax
  001cc	f6 c4 05	 test	 ah, 5
  001cf	7b 13		 jnp	 SHORT $L36848
  001d1	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  001d4	d9 42 38	 fld	 DWORD PTR [edx+56]
  001d7	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  001dd	df e0		 fnstsw	 ax
  001df	f6 c4 41	 test	 ah, 65			; 00000041H
  001e2	75 2d		 jne	 SHORT $L36847
$L36848:

; 3641 :     {
; 3642 :         DPF_ERROR("Rolloff factor out of bounds");

  001e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  001ee	68 3a 0e 00 00	 push	 3642			; 00000e3aH
  001f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001f8	6a 01		 push	 1
  001fa	6a 09		 push	 9
  001fc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00201	83 c4 18	 add	 esp, 24			; 00000018H
  00204	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@
  00209	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0020e	83 c4 04	 add	 esp, 4
$L36847:

; 3643 :     }
; 3644 : 
; 3645 :     if((!pParams->vOrientFront.x && !pParams->vOrientFront.y && !pParams->vOrientFront.z) || (!pParams->vOrientTop.x && !pParams->vOrientTop.y && !pParams->vOrientTop.z))

  00211	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00214	d9 40 1c	 fld	 DWORD PTR [eax+28]
  00217	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0021d	df e0		 fnstsw	 ax
  0021f	f6 c4 44	 test	 ah, 68			; 00000044H
  00222	7a 26		 jp	 SHORT $L36852
  00224	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00227	d9 41 20	 fld	 DWORD PTR [ecx+32]
  0022a	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00230	df e0		 fnstsw	 ax
  00232	f6 c4 44	 test	 ah, 68			; 00000044H
  00235	7a 13		 jp	 SHORT $L36852
  00237	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0023a	d9 42 24	 fld	 DWORD PTR [edx+36]
  0023d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00243	df e0		 fnstsw	 ax
  00245	f6 c4 44	 test	 ah, 68			; 00000044H
  00248	7b 39		 jnp	 SHORT $L36851
$L36852:
  0024a	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0024d	d9 40 28	 fld	 DWORD PTR [eax+40]
  00250	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00256	df e0		 fnstsw	 ax
  00258	f6 c4 44	 test	 ah, 68			; 00000044H
  0025b	7a 53		 jp	 SHORT $L36850
  0025d	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00260	d9 41 2c	 fld	 DWORD PTR [ecx+44]
  00263	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00269	df e0		 fnstsw	 ax
  0026b	f6 c4 44	 test	 ah, 68			; 00000044H
  0026e	7a 40		 jp	 SHORT $L36850
  00270	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00273	d9 42 30	 fld	 DWORD PTR [edx+48]
  00276	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0027c	df e0		 fnstsw	 ax
  0027e	f6 c4 44	 test	 ah, 68			; 00000044H
  00281	7a 2d		 jp	 SHORT $L36850
$L36851:

; 3646 :     {
; 3647 :         DPF_ERROR("Invalid orientation");

  00283	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00288	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LDBBLBOO@CDirectSound?3?3SetAllParameters?$AA@
  0028d	68 3f 0e 00 00	 push	 3647			; 00000e3fH
  00292	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00297	6a 01		 push	 1
  00299	6a 09		 push	 9
  0029b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002a0	83 c4 18	 add	 esp, 24			; 00000018H
  002a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@FGABALFI@Invalid?5orientation?$AA@
  002a8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002ad	83 c4 04	 add	 esp, 4
$L36850:

; 3648 :     }
; 3649 : 
; 3650 : #endif // VALIDATE_PARAMETERS
; 3651 : 
; 3652 :     m_pSettings->m_3dParams.HrtfParams.vPosition.x = NormalizeFloat(pParams->vPosition.x);

  002b0	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  002b3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002b6	51		 push	 ecx
  002b7	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  002bc	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002bf	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002c2	d9 58 38	 fstp	 DWORD PTR [eax+56]

; 3653 :     m_pSettings->m_3dParams.HrtfParams.vPosition.y = NormalizeFloat(pParams->vPosition.y);

  002c5	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  002c8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002cb	52		 push	 edx
  002cc	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  002d1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002d4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002d7	d9 59 3c	 fstp	 DWORD PTR [ecx+60]

; 3654 :     m_pSettings->m_3dParams.HrtfParams.vPosition.z = NormalizeFloat(pParams->vPosition.z);

  002da	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  002dd	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002e0	50		 push	 eax
  002e1	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  002e6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002e9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  002ec	d9 5a 40	 fstp	 DWORD PTR [edx+64]

; 3655 : 
; 3656 :     m_pSettings->m_3dParams.HrtfParams.vVelocity.x = NormalizeFloat(pParams->vVelocity.x);

  002ef	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  002f2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002f5	51		 push	 ecx
  002f6	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  002fb	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002fe	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00301	d9 58 44	 fstp	 DWORD PTR [eax+68]

; 3657 :     m_pSettings->m_3dParams.HrtfParams.vVelocity.y = NormalizeFloat(pParams->vVelocity.y);

  00304	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00307	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0030a	52		 push	 edx
  0030b	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00310	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00313	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00316	d9 59 48	 fstp	 DWORD PTR [ecx+72]

; 3658 :     m_pSettings->m_3dParams.HrtfParams.vVelocity.z = NormalizeFloat(pParams->vVelocity.z);

  00319	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0031c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00325	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00328	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0032b	d9 5a 4c	 fstp	 DWORD PTR [edx+76]

; 3659 : 
; 3660 :     m_pSettings->m_3dParams.HrtfParams.vOrientFront.x = NormalizeFloat(pParams->vOrientFront.x);

  0032e	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00331	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00334	51		 push	 ecx
  00335	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0033a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0033d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00340	d9 58 50	 fstp	 DWORD PTR [eax+80]

; 3661 :     m_pSettings->m_3dParams.HrtfParams.vOrientFront.y = NormalizeFloat(pParams->vOrientFront.y);

  00343	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00346	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00349	52		 push	 edx
  0034a	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0034f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00352	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00355	d9 59 54	 fstp	 DWORD PTR [ecx+84]

; 3662 :     m_pSettings->m_3dParams.HrtfParams.vOrientFront.z = NormalizeFloat(pParams->vOrientFront.z);

  00358	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0035b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00364	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00367	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0036a	d9 5a 58	 fstp	 DWORD PTR [edx+88]

; 3663 :     
; 3664 :     m_pSettings->m_3dParams.HrtfParams.vOrientTop.x = NormalizeFloat(pParams->vOrientTop.x);

  0036d	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00370	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00373	51		 push	 ecx
  00374	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00379	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0037c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0037f	d9 58 5c	 fstp	 DWORD PTR [eax+92]

; 3665 :     m_pSettings->m_3dParams.HrtfParams.vOrientTop.y = NormalizeFloat(pParams->vOrientTop.y);

  00382	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00385	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00388	52		 push	 edx
  00389	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0038e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00391	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00394	d9 59 60	 fstp	 DWORD PTR [ecx+96]

; 3666 :     m_pSettings->m_3dParams.HrtfParams.vOrientTop.z = NormalizeFloat(pParams->vOrientTop.z);

  00397	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0039a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003a3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003a6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003a9	d9 5a 64	 fstp	 DWORD PTR [edx+100]

; 3667 : 
; 3668 :     m_pSettings->m_3dParams.HrtfParams.flDistanceFactor = NormalizeFloat(pParams->flDistanceFactor);

  003ac	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  003af	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  003b2	51		 push	 ecx
  003b3	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003b8	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  003bb	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003be	d9 58 68	 fstp	 DWORD PTR [eax+104]

; 3669 :     m_pSettings->m_3dParams.HrtfParams.flRolloffFactor = NormalizeFloat(pParams->flRolloffFactor);

  003c1	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  003c4	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  003c7	52		 push	 edx
  003c8	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003cd	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  003d0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003d3	d9 59 6c	 fstp	 DWORD PTR [ecx+108]

; 3670 :     m_pSettings->m_3dParams.HrtfParams.flDopplerFactor = NormalizeFloat(pParams->flDopplerFactor);

  003d6	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  003d9	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  003dc	50		 push	 eax
  003dd	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003e2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003e5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003e8	d9 5a 70	 fstp	 DWORD PTR [edx+112]

; 3671 : 
; 3672 :     m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_MASK;

  003eb	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  003ee	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003f1	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  003f7	81 ca ff 02 00
	00		 or	 edx, 767		; 000002ffH
  003fd	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00400	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00403	89 91 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], edx

; 3673 : 
; 3674 :     if(!(dwFlags & DS3D_DEFERRED))

  00409	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0040c	83 e2 01	 and	 edx, 1
  0040f	85 d2		 test	 edx, edx
  00411	75 09		 jne	 SHORT $L36854

; 3675 :     {
; 3676 :         CommitDeferredSettings();

  00413	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00416	50		 push	 eax
  00417	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L36854:

; 3677 :     }
; 3678 : 
; 3679 :     DPF_LEAVE_HRESULT(DS_OK);
; 3680 : 
; 3681 :     return DS_OK;

  0041c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40393[ebp], 0
  00423	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00426	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0042b	8b 45 f4	 mov	 eax, DWORD PTR $T40393[ebp]
$L36829:

; 3682 : }

  0042e	8b e5		 mov	 esp, ebp
  00430	5d		 pop	 ebp
  00431	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@CDirectSound@DirectSound@@QAGJPBU_DS3DLISTENER@@K@Z ENDP ; DirectSound::CDirectSound::SetAllParameters
DSOUND	ENDS
PUBLIC	??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@ ; `string'
;	COMDAT ??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@ DB 'CDirectSoun'
	DB	'd::SetDistanceFactor', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSound@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40406 = -12
$T40405 = -8
___AutoLock$ = -4
_this$ = 8
_flDistanceFactor$ = 12
_dwFlags$ = 16
?SetDistanceFactor@CDirectSound@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSound::SetDistanceFactor, COMDAT

; 3710 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3711 :     DPF_ENTER();
; 3712 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36863
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@
  00021	68 80 0e 00 00	 push	 3712			; 00000e80H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40405[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40405[ebp]
  00056	e9 f4 00 00 00	 jmp	 $L36861
$L36863:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@
  00060	68 80 0e 00 00	 push	 3712			; 00000e80H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3713 : 
; 3714 : #ifdef VALIDATE_PARAMETERS
; 3715 : 
; 3716 :     if((flDistanceFactor < DS3D_MINDISTANCEFACTOR) || (flDistanceFactor > DS3D_MAXDISTANCEFACTOR))

  00072	d9 45 0c	 fld	 DWORD PTR _flDistanceFactor$[ebp]
  00075	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00800000
  0007b	df e0		 fnstsw	 ax
  0007d	f6 c4 05	 test	 ah, 5
  00080	7b 10		 jnp	 SHORT $L36868
  00082	d9 45 0c	 fld	 DWORD PTR _flDistanceFactor$[ebp]
  00085	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@7f7fffff
  0008b	df e0		 fnstsw	 ax
  0008d	f6 c4 41	 test	 ah, 65			; 00000041H
  00090	75 2d		 jne	 SHORT $L36867
$L36868:

; 3717 :     {
; 3718 :         DPF_ERROR("Distance factor out of bounds");

  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@
  0009c	68 86 0e 00 00	 push	 3718			; 00000e86H
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a6	6a 01		 push	 1
  000a8	6a 09		 push	 9
  000aa	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000af	83 c4 18	 add	 esp, 24			; 00000018H
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@
  000b7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000bc	83 c4 04	 add	 esp, 4
$L36867:

; 3719 :     }
; 3720 : 
; 3721 :     if(dwFlags & ~DS3D_VALID)

  000bf	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000c2	83 e0 fe	 and	 eax, -2			; fffffffeH
  000c5	85 c0		 test	 eax, eax
  000c7	74 34		 je	 SHORT $L36869

; 3722 :     {
; 3723 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@LHLEJECA@CDirectSound?3?3SetDistanceFactor?$AA@
  000d3	68 8b 0e 00 00	 push	 3723			; 00000e8bH
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000dd	6a 01		 push	 1
  000df	6a 09		 push	 9
  000e1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e6	83 c4 18	 add	 esp, 24			; 00000018H
  000e9	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000ec	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000ef	51		 push	 ecx
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000fa	83 c4 08	 add	 esp, 8
$L36869:

; 3724 :     }
; 3725 : 
; 3726 : #endif // VALIDATE_PARAMETERS
; 3727 : 
; 3728 :     m_pSettings->m_3dParams.HrtfParams.flDistanceFactor = NormalizeFloat(flDistanceFactor);

  000fd	8b 55 0c	 mov	 edx, DWORD PTR _flDistanceFactor$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00106	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0010c	d9 59 68	 fstp	 DWORD PTR [ecx+104]

; 3729 : 
; 3730 :     m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_DISTANCEFACTOR;

  0010f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00112	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00115	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0011b	83 c9 60	 or	 ecx, 96			; 00000060H
  0011e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00121	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00124	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 3731 : 
; 3732 :     if(!(dwFlags & DS3D_DEFERRED))

  0012a	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0012d	83 e1 01	 and	 ecx, 1
  00130	85 c9		 test	 ecx, ecx
  00132	75 09		 jne	 SHORT $L36870

; 3733 :     {
; 3734 :         CommitDeferredSettings();

  00134	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L36870:

; 3735 :     }
; 3736 : 
; 3737 :     DPF_LEAVE_HRESULT(DS_OK);
; 3738 : 
; 3739 :     return DS_OK;

  0013d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40406[ebp], 0
  00144	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00147	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0014c	8b 45 f4	 mov	 eax, DWORD PTR $T40406[ebp]
$L36861:

; 3740 : }

  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 0c 00	 ret	 12			; 0000000cH
?SetDistanceFactor@CDirectSound@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSound::SetDistanceFactor
DSOUND	ENDS
PUBLIC	??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@ ; `string'
;	COMDAT ??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@ DB 'CDirectSound'
	DB	'::SetDopplerFactor', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSound@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40411 = -12
$T40410 = -8
___AutoLock$ = -4
_this$ = 8
_flDopplerFactor$ = 12
_dwFlags$ = 16
?SetDopplerFactor@CDirectSound@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSound::SetDopplerFactor, COMDAT

; 3768 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3769 :     DPF_ENTER();
; 3770 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36879
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@
  00021	68 ba 0e 00 00	 push	 3770			; 00000ebaH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40410[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40410[ebp]
  00056	e9 f4 00 00 00	 jmp	 $L36877
$L36879:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@
  00060	68 ba 0e 00 00	 push	 3770			; 00000ebaH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3771 : 
; 3772 : #ifdef VALIDATE_PARAMETERS
; 3773 : 
; 3774 :     if((flDopplerFactor < DS3D_MINDOPPLERFACTOR) || (flDopplerFactor > DS3D_MAXDOPPLERFACTOR))

  00072	d9 45 0c	 fld	 DWORD PTR _flDopplerFactor$[ebp]
  00075	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0007b	df e0		 fnstsw	 ax
  0007d	f6 c4 05	 test	 ah, 5
  00080	7b 10		 jnp	 SHORT $L36884
  00082	d9 45 0c	 fld	 DWORD PTR _flDopplerFactor$[ebp]
  00085	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  0008b	df e0		 fnstsw	 ax
  0008d	f6 c4 41	 test	 ah, 65			; 00000041H
  00090	75 2d		 jne	 SHORT $L36883
$L36884:

; 3775 :     {
; 3776 :         DPF_ERROR("Doppler factor out of bounds");

  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@
  0009c	68 c0 0e 00 00	 push	 3776			; 00000ec0H
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a6	6a 01		 push	 1
  000a8	6a 09		 push	 9
  000aa	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000af	83 c4 18	 add	 esp, 24			; 00000018H
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@
  000b7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000bc	83 c4 04	 add	 esp, 4
$L36883:

; 3777 :     }
; 3778 : 
; 3779 :     if(dwFlags & ~DS3D_VALID)

  000bf	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000c2	83 e0 fe	 and	 eax, -2			; fffffffeH
  000c5	85 c0		 test	 eax, eax
  000c7	74 34		 je	 SHORT $L36885

; 3780 :     {
; 3781 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KLDGFLFN@CDirectSound?3?3SetDopplerFactor?$AA@
  000d3	68 c5 0e 00 00	 push	 3781			; 00000ec5H
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000dd	6a 01		 push	 1
  000df	6a 09		 push	 9
  000e1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e6	83 c4 18	 add	 esp, 24			; 00000018H
  000e9	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000ec	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000ef	51		 push	 ecx
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000fa	83 c4 08	 add	 esp, 8
$L36885:

; 3782 :     }
; 3783 : 
; 3784 : #endif // VALIDATE_PARAMETERS
; 3785 : 
; 3786 :     m_pSettings->m_3dParams.HrtfParams.flDopplerFactor = NormalizeFloat(flDopplerFactor);

  000fd	8b 55 0c	 mov	 edx, DWORD PTR _flDopplerFactor$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00106	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0010c	d9 59 70	 fstp	 DWORD PTR [ecx+112]

; 3787 : 
; 3788 :     m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_DOPPLERFACTOR;

  0010f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00112	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00115	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0011b	83 c9 40	 or	 ecx, 64			; 00000040H
  0011e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00121	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00124	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 3789 : 
; 3790 :     if(!(dwFlags & DS3D_DEFERRED))

  0012a	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0012d	83 e1 01	 and	 ecx, 1
  00130	85 c9		 test	 ecx, ecx
  00132	75 09		 jne	 SHORT $L36886

; 3791 :     {
; 3792 :         CommitDeferredSettings();

  00134	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L36886:

; 3793 :     }
; 3794 : 
; 3795 :     DPF_LEAVE_HRESULT(DS_OK);
; 3796 : 
; 3797 :     return DS_OK;

  0013d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40411[ebp], 0
  00144	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00147	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0014c	8b 45 f4	 mov	 eax, DWORD PTR $T40411[ebp]
$L36877:

; 3798 : }

  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 0c 00	 ret	 12			; 0000000cH
?SetDopplerFactor@CDirectSound@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSound::SetDopplerFactor
DSOUND	ENDS
PUBLIC	??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@ ; `string'
;	COMDAT ??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@ DB 'CDirectSound'
	DB	'::SetRolloffFactor', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSound@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
$T40416 = -12
$T40415 = -8
___AutoLock$ = -4
_this$ = 8
_flRolloffFactor$ = 12
_dwFlags$ = 16
?SetRolloffFactor@CDirectSound@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSound::SetRolloffFactor, COMDAT

; 3826 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3827 :     DPF_ENTER();
; 3828 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36895
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@
  00021	68 f4 0e 00 00	 push	 3828			; 00000ef4H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40415[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40415[ebp]
  00056	e9 f4 00 00 00	 jmp	 $L36893
$L36895:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@
  00060	68 f4 0e 00 00	 push	 3828			; 00000ef4H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3829 : 
; 3830 : #ifdef VALIDATE_PARAMETERS
; 3831 : 
; 3832 :     if((flRolloffFactor < DS3D_MINROLLOFFFACTOR) || (flRolloffFactor > DS3D_MAXROLLOFFFACTOR))

  00072	d9 45 0c	 fld	 DWORD PTR _flRolloffFactor$[ebp]
  00075	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0007b	df e0		 fnstsw	 ax
  0007d	f6 c4 05	 test	 ah, 5
  00080	7b 10		 jnp	 SHORT $L36900
  00082	d9 45 0c	 fld	 DWORD PTR _flRolloffFactor$[ebp]
  00085	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  0008b	df e0		 fnstsw	 ax
  0008d	f6 c4 41	 test	 ah, 65			; 00000041H
  00090	75 2d		 jne	 SHORT $L36899
$L36900:

; 3833 :     {
; 3834 :         DPF_ERROR("Rolloff factor out of bounds");

  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@
  0009c	68 fa 0e 00 00	 push	 3834			; 00000efaH
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a6	6a 01		 push	 1
  000a8	6a 09		 push	 9
  000aa	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000af	83 c4 18	 add	 esp, 24			; 00000018H
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@
  000b7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000bc	83 c4 04	 add	 esp, 4
$L36899:

; 3835 :     }
; 3836 : 
; 3837 :     if(dwFlags & ~DS3D_VALID)

  000bf	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000c2	83 e0 fe	 and	 eax, -2			; fffffffeH
  000c5	85 c0		 test	 eax, eax
  000c7	74 34		 je	 SHORT $L36901

; 3838 :     {
; 3839 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LCPDGCOB@CDirectSound?3?3SetRolloffFactor?$AA@
  000d3	68 ff 0e 00 00	 push	 3839			; 00000effH
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000dd	6a 01		 push	 1
  000df	6a 09		 push	 9
  000e1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e6	83 c4 18	 add	 esp, 24			; 00000018H
  000e9	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000ec	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000ef	51		 push	 ecx
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000fa	83 c4 08	 add	 esp, 8
$L36901:

; 3840 :     }
; 3841 : 
; 3842 : #endif // VALIDATE_PARAMETERS
; 3843 : 
; 3844 :     m_pSettings->m_3dParams.HrtfParams.flRolloffFactor = NormalizeFloat(flRolloffFactor);

  000fd	8b 55 0c	 mov	 edx, DWORD PTR _flRolloffFactor$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00106	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0010c	d9 59 6c	 fstp	 DWORD PTR [ecx+108]

; 3845 : 
; 3846 :     m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_ROLLOFFFACTOR;

  0010f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00112	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00115	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  0011b	83 c9 04	 or	 ecx, 4
  0011e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00121	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00124	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 3847 : 
; 3848 :     if(!(dwFlags & DS3D_DEFERRED))

  0012a	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0012d	83 e1 01	 and	 ecx, 1
  00130	85 c9		 test	 ecx, ecx
  00132	75 09		 jne	 SHORT $L36902

; 3849 :     {
; 3850 :         CommitDeferredSettings();

  00134	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L36902:

; 3851 :     }
; 3852 : 
; 3853 :     DPF_LEAVE_HRESULT(DS_OK);
; 3854 : 
; 3855 :     return DS_OK;

  0013d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40416[ebp], 0
  00144	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00147	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0014c	8b 45 f4	 mov	 eax, DWORD PTR $T40416[ebp]
$L36893:

; 3856 : }

  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 0c 00	 ret	 12			; 0000000cH
?SetRolloffFactor@CDirectSound@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSound::SetRolloffFactor
DSOUND	ENDS
PUBLIC	??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@ ; `string'
;	COMDAT ??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@ DB 'CDirectSound::'
	DB	'SetOrientation', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetOrientation@CDirectSound@DirectSound@@QAGJMMMMMMK@Z
DSOUND	SEGMENT
$T40421 = -12
$T40420 = -8
___AutoLock$ = -4
_this$ = 8
_flFrontX$ = 12
_flFrontY$ = 16
_flFrontZ$ = 20
_flTopX$ = 24
_flTopY$ = 28
_flTopZ$ = 32
_dwFlags$ = 36
?SetOrientation@CDirectSound@DirectSound@@QAGJMMMMMMK@Z PROC NEAR ; DirectSound::CDirectSound::SetOrientation, COMDAT

; 3890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3891 :     DPF_ENTER();
; 3892 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36916
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@
  00021	68 34 0f 00 00	 push	 3892			; 00000f34H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40420[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40420[ebp]
  00056	e9 91 01 00 00	 jmp	 $L36914
$L36916:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@
  00060	68 34 0f 00 00	 push	 3892			; 00000f34H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3893 : 
; 3894 : #ifdef VALIDATE_PARAMETERS
; 3895 : 
; 3896 :     if(dwFlags & ~DS3D_VALID)

  00072	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00075	83 e0 fe	 and	 eax, -2			; fffffffeH
  00078	85 c0		 test	 eax, eax
  0007a	74 34		 je	 SHORT $L36920

; 3897 :     {
; 3898 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@
  00086	68 3a 0f 00 00	 push	 3898			; 00000f3aH
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00090	6a 01		 push	 1
  00092	6a 09		 push	 9
  00094	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	8b 4d 24	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0009f	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000a2	51		 push	 ecx
  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000a8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ad	83 c4 08	 add	 esp, 8
$L36920:

; 3899 :     }
; 3900 : 
; 3901 :     if((!flFrontX && !flFrontY && !flFrontZ) || (!flTopX && !flTopY && !flTopZ))

  000b0	d9 45 0c	 fld	 DWORD PTR _flFrontX$[ebp]
  000b3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000b9	df e0		 fnstsw	 ax
  000bb	f6 c4 44	 test	 ah, 68			; 00000044H
  000be	7a 20		 jp	 SHORT $L36923
  000c0	d9 45 10	 fld	 DWORD PTR _flFrontY$[ebp]
  000c3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000c9	df e0		 fnstsw	 ax
  000cb	f6 c4 44	 test	 ah, 68			; 00000044H
  000ce	7a 10		 jp	 SHORT $L36923
  000d0	d9 45 14	 fld	 DWORD PTR _flFrontZ$[ebp]
  000d3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000d9	df e0		 fnstsw	 ax
  000db	f6 c4 44	 test	 ah, 68			; 00000044H
  000de	7b 30		 jnp	 SHORT $L36922
$L36923:
  000e0	d9 45 18	 fld	 DWORD PTR _flTopX$[ebp]
  000e3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000e9	df e0		 fnstsw	 ax
  000eb	f6 c4 44	 test	 ah, 68			; 00000044H
  000ee	7a 4d		 jp	 SHORT $L36921
  000f0	d9 45 1c	 fld	 DWORD PTR _flTopY$[ebp]
  000f3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  000f9	df e0		 fnstsw	 ax
  000fb	f6 c4 44	 test	 ah, 68			; 00000044H
  000fe	7a 3d		 jp	 SHORT $L36921
  00100	d9 45 20	 fld	 DWORD PTR _flTopZ$[ebp]
  00103	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00109	df e0		 fnstsw	 ax
  0010b	f6 c4 44	 test	 ah, 68			; 00000044H
  0010e	7a 2d		 jp	 SHORT $L36921
$L36922:

; 3902 :     {
; 3903 :         DPF_ERROR("Invalid orientation");

  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00115	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@ILJEPEOP@CDirectSound?3?3SetOrientation?$AA@
  0011a	68 3f 0f 00 00	 push	 3903			; 00000f3fH
  0011f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00124	6a 01		 push	 1
  00126	6a 09		 push	 9
  00128	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0012d	83 c4 18	 add	 esp, 24			; 00000018H
  00130	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@FGABALFI@Invalid?5orientation?$AA@
  00135	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0013a	83 c4 04	 add	 esp, 4
$L36921:

; 3904 :     }
; 3905 : 
; 3906 : #endif // VALIDATE_PARAMETERS
; 3907 : 
; 3908 :     m_pSettings->m_3dParams.HrtfParams.vOrientFront.x = NormalizeFloat(flFrontX);

  0013d	8b 55 0c	 mov	 edx, DWORD PTR _flFrontX$[ebp]
  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00146	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00149	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0014c	d9 59 50	 fstp	 DWORD PTR [ecx+80]

; 3909 :     m_pSettings->m_3dParams.HrtfParams.vOrientFront.y = NormalizeFloat(flFrontY);

  0014f	8b 55 10	 mov	 edx, DWORD PTR _flFrontY$[ebp]
  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00158	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0015e	d9 59 54	 fstp	 DWORD PTR [ecx+84]

; 3910 :     m_pSettings->m_3dParams.HrtfParams.vOrientFront.z = NormalizeFloat(flFrontZ);

  00161	8b 55 14	 mov	 edx, DWORD PTR _flFrontZ$[ebp]
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0016a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00170	d9 59 58	 fstp	 DWORD PTR [ecx+88]

; 3911 : 
; 3912 :     m_pSettings->m_3dParams.HrtfParams.vOrientTop.x = NormalizeFloat(flTopX);

  00173	8b 55 18	 mov	 edx, DWORD PTR _flTopX$[ebp]
  00176	52		 push	 edx
  00177	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0017c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0017f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00182	d9 59 5c	 fstp	 DWORD PTR [ecx+92]

; 3913 :     m_pSettings->m_3dParams.HrtfParams.vOrientTop.y = NormalizeFloat(flTopY);

  00185	8b 55 1c	 mov	 edx, DWORD PTR _flTopY$[ebp]
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0018e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00191	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00194	d9 59 60	 fstp	 DWORD PTR [ecx+96]

; 3914 :     m_pSettings->m_3dParams.HrtfParams.vOrientTop.z = NormalizeFloat(flTopZ);

  00197	8b 55 20	 mov	 edx, DWORD PTR _flTopZ$[ebp]
  0019a	52		 push	 edx
  0019b	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  001a0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001a6	d9 59 64	 fstp	 DWORD PTR [ecx+100]

; 3915 : 
; 3916 :     m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_ORIENTATION;

  001a9	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001ac	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001af	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  001b5	81 c9 26 02 00
	00		 or	 ecx, 550		; 00000226H
  001bb	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001be	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001c1	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 3917 : 
; 3918 :     if(!(dwFlags & DS3D_DEFERRED))

  001c7	8b 4d 24	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  001ca	83 e1 01	 and	 ecx, 1
  001cd	85 c9		 test	 ecx, ecx
  001cf	75 09		 jne	 SHORT $L36924

; 3919 :     {
; 3920 :         CommitDeferredSettings();

  001d1	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001d4	52		 push	 edx
  001d5	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L36924:

; 3921 :     }
; 3922 : 
; 3923 :     DPF_LEAVE_HRESULT(DS_OK);
; 3924 : 
; 3925 :     return DS_OK;

  001da	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40421[ebp], 0
  001e1	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  001e4	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  001e9	8b 45 f4	 mov	 eax, DWORD PTR $T40421[ebp]
$L36914:

; 3926 : }

  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 20 00	 ret	 32			; 00000020H
?SetOrientation@CDirectSound@DirectSound@@QAGJMMMMMMK@Z ENDP ; DirectSound::CDirectSound::SetOrientation
DSOUND	ENDS
PUBLIC	??_C@_0BK@NBPMIOHF@CDirectSound?3?3SetPosition?$AA@ ; `string'
;	COMDAT ??_C@_0BK@NBPMIOHF@CDirectSound?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@NBPMIOHF@CDirectSound?3?3SetPosition?$AA@ DB 'CDirectSound::Set'
	DB	'Position', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPosition@CDirectSound@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T40426 = -12
$T40425 = -8
___AutoLock$ = -4
_this$ = 8
_flPositionX$ = 12
_flPositionY$ = 16
_flPositionZ$ = 20
_dwFlags$ = 24
?SetPosition@CDirectSound@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSound::SetPosition, COMDAT

; 3956 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3957 :     DPF_ENTER();
; 3958 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36935
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@NBPMIOHF@CDirectSound?3?3SetPosition?$AA@
  00021	68 76 0f 00 00	 push	 3958			; 00000f76H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40425[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40425[ebp]
  00056	e9 ce 00 00 00	 jmp	 $L36933
$L36935:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@NBPMIOHF@CDirectSound?3?3SetPosition?$AA@
  00060	68 76 0f 00 00	 push	 3958			; 00000f76H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 3959 : 
; 3960 : #ifdef VALIDATE_PARAMETERS
; 3961 : 
; 3962 :     if(dwFlags & ~DS3D_VALID)

  00072	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00075	83 e0 fe	 and	 eax, -2			; fffffffeH
  00078	85 c0		 test	 eax, eax
  0007a	74 34		 je	 SHORT $L36939

; 3963 :     {
; 3964 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@NBPMIOHF@CDirectSound?3?3SetPosition?$AA@
  00086	68 7c 0f 00 00	 push	 3964			; 00000f7cH
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00090	6a 01		 push	 1
  00092	6a 09		 push	 9
  00094	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0009f	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000a2	51		 push	 ecx
  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000a8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ad	83 c4 08	 add	 esp, 8
$L36939:

; 3965 :     }
; 3966 : 
; 3967 : #endif // VALIDATE_PARAMETERS
; 3968 : 
; 3969 :     m_pSettings->m_3dParams.HrtfParams.vPosition.x = NormalizeFloat(flPositionX);

  000b0	8b 55 0c	 mov	 edx, DWORD PTR _flPositionX$[ebp]
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000b9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000bf	d9 59 38	 fstp	 DWORD PTR [ecx+56]

; 3970 :     m_pSettings->m_3dParams.HrtfParams.vPosition.y = NormalizeFloat(flPositionY);

  000c2	8b 55 10	 mov	 edx, DWORD PTR _flPositionY$[ebp]
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000cb	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d1	d9 59 3c	 fstp	 DWORD PTR [ecx+60]

; 3971 :     m_pSettings->m_3dParams.HrtfParams.vPosition.z = NormalizeFloat(flPositionZ);

  000d4	8b 55 14	 mov	 edx, DWORD PTR _flPositionZ$[ebp]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000dd	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e3	d9 59 40	 fstp	 DWORD PTR [ecx+64]

; 3972 : 
; 3973 :     m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_POSITION;

  000e6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000ec	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000f2	81 c9 ff 00 00
	00		 or	 ecx, 255		; 000000ffH
  000f8	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000fb	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000fe	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 3974 : 
; 3975 :     if(!(dwFlags & DS3D_DEFERRED))

  00104	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00107	83 e1 01	 and	 ecx, 1
  0010a	85 c9		 test	 ecx, ecx
  0010c	75 09		 jne	 SHORT $L36940

; 3976 :     {
; 3977 :         CommitDeferredSettings();

  0010e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L36940:

; 3978 :     }
; 3979 : 
; 3980 :     DPF_LEAVE_HRESULT(DS_OK);
; 3981 : 
; 3982 :     return DS_OK;

  00117	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40426[ebp], 0
  0011e	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00121	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00126	8b 45 f4	 mov	 eax, DWORD PTR $T40426[ebp]
$L36933:

; 3983 : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 14 00	 ret	 20			; 00000014H
?SetPosition@CDirectSound@DirectSound@@QAGJMMMK@Z ENDP	; DirectSound::CDirectSound::SetPosition
DSOUND	ENDS
PUBLIC	??_C@_0BK@LDNJGHJI@CDirectSound?3?3SetVelocity?$AA@ ; `string'
;	COMDAT ??_C@_0BK@LDNJGHJI@CDirectSound?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@LDNJGHJI@CDirectSound?3?3SetVelocity?$AA@ DB 'CDirectSound::Set'
	DB	'Velocity', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVelocity@CDirectSound@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
$T40431 = -12
$T40430 = -8
___AutoLock$ = -4
_this$ = 8
_flVelocityX$ = 12
_flVelocityY$ = 16
_flVelocityZ$ = 20
_dwFlags$ = 24
?SetVelocity@CDirectSound@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSound::SetVelocity, COMDAT

; 4013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 4014 :     DPF_ENTER();
; 4015 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L36951
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@LDNJGHJI@CDirectSound?3?3SetVelocity?$AA@
  00021	68 af 0f 00 00	 push	 4015			; 00000fafH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40430[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40430[ebp]
  00056	e9 cb 00 00 00	 jmp	 $L36949
$L36951:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@LDNJGHJI@CDirectSound?3?3SetVelocity?$AA@
  00060	68 af 0f 00 00	 push	 4015			; 00000fafH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 4016 : 
; 4017 : #ifdef VALIDATE_PARAMETERS
; 4018 : 
; 4019 :     if(dwFlags & ~DS3D_VALID)

  00072	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00075	83 e0 fe	 and	 eax, -2			; fffffffeH
  00078	85 c0		 test	 eax, eax
  0007a	74 34		 je	 SHORT $L36955

; 4020 :     {
; 4021 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@LDNJGHJI@CDirectSound?3?3SetVelocity?$AA@
  00086	68 b5 0f 00 00	 push	 4021			; 00000fb5H
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00090	6a 01		 push	 1
  00092	6a 09		 push	 9
  00094	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0009f	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000a2	51		 push	 ecx
  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000a8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ad	83 c4 08	 add	 esp, 8
$L36955:

; 4022 :     }
; 4023 : 
; 4024 : #endif // VALIDATE_PARAMETERS
; 4025 : 
; 4026 :     m_pSettings->m_3dParams.HrtfParams.vVelocity.x = NormalizeFloat(flVelocityX);

  000b0	8b 55 0c	 mov	 edx, DWORD PTR _flVelocityX$[ebp]
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000b9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000bf	d9 59 44	 fstp	 DWORD PTR [ecx+68]

; 4027 :     m_pSettings->m_3dParams.HrtfParams.vVelocity.y = NormalizeFloat(flVelocityY);

  000c2	8b 55 10	 mov	 edx, DWORD PTR _flVelocityY$[ebp]
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000cb	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d1	d9 59 48	 fstp	 DWORD PTR [ecx+72]

; 4028 :     m_pSettings->m_3dParams.HrtfParams.vVelocity.z = NormalizeFloat(flVelocityZ);

  000d4	8b 55 14	 mov	 edx, DWORD PTR _flVelocityZ$[ebp]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000dd	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e3	d9 59 4c	 fstp	 DWORD PTR [ecx+76]

; 4029 : 
; 4030 :     m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_VELOCITY;

  000e6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000ec	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  000f2	83 c9 40	 or	 ecx, 64			; 00000040H
  000f5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000fb	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 4031 : 
; 4032 :     if(!(dwFlags & DS3D_DEFERRED))

  00101	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00104	83 e1 01	 and	 ecx, 1
  00107	85 c9		 test	 ecx, ecx
  00109	75 09		 jne	 SHORT $L36956

; 4033 :     {
; 4034 :         CommitDeferredSettings();

  0010b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0010e	52		 push	 edx
  0010f	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L36956:

; 4035 :     }
; 4036 : 
; 4037 :     DPF_LEAVE_HRESULT(DS_OK);
; 4038 : 
; 4039 :     return DS_OK;

  00114	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40431[ebp], 0
  0011b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0011e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00123	8b 45 f4	 mov	 eax, DWORD PTR $T40431[ebp]
$L36949:

; 4040 : }

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@CDirectSound@DirectSound@@QAGJMMMK@Z ENDP	; DirectSound::CDirectSound::SetVelocity
DSOUND	ENDS
PUBLIC	??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@ ; `string'
PUBLIC	??_C@_0BM@OHFOFNJM@Failed?5to?5supply?5properties?$AA@ ; `string'
PUBLIC	??_C@_0BE@BFGOEDGP@Invalid?5lRoom?5value?$AA@	; `string'
PUBLIC	??_C@_0BG@INCPBGEM@Invalid?5lRoomHF?5value?$AA@	; `string'
PUBLIC	??_C@_0CC@MMCGGFDN@Invalid?5flRoomRolloffFactor?5valu@ ; `string'
PUBLIC	??_C@_0BK@JLJBHPAG@Invalid?5flDecayTime?5value?$AA@ ; `string'
PUBLIC	??_C@_0BN@DIPMFMJF@Invalid?5flDecayHFRatio?5value?$AA@ ; `string'
PUBLIC	??_C@_0BL@HHFHHHAL@Invalid?5lReflections?5value?$AA@ ; `string'
PUBLIC	??_C@_0CB@MLJGFPIP@Invalid?5flReflectionsDelay?5value@ ; `string'
PUBLIC	??_C@_0BG@GHFHGCHH@Invalid?5lReverb?5value?$AA@	; `string'
PUBLIC	??_C@_0BM@HKPBDOAD@Invalid?5flReverbDelay?5value?$AA@ ; `string'
PUBLIC	??_C@_0BK@POIFFNNC@Invalid?5flDiffusion?5value?$AA@ ; `string'
PUBLIC	??_C@_0BI@BDIIEOGO@Invalid?5flDensity?5value?$AA@ ; `string'
PUBLIC	??_C@_0BM@IOADAE@Invalid?5flHFReference?5value?$AA@ ; `string'
PUBLIC	??_C@_0EM@OHHHODMJ@Can?8t?5set?5I3DL2?5listener?5propert@ ; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@41a00000
PUBLIC	__real@40000000
PUBLIC	__real@3e99999a
PUBLIC	__real@42c80000
PUBLIC	__real@469c4000
;	COMDAT ??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@ DB 'CDirectSound:'
	DB	':SetI3DL2Listener', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@OHFOFNJM@Failed?5to?5supply?5properties?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@OHFOFNJM@Failed?5to?5supply?5properties?$AA@ DB 'Failed to supp'
	DB	'ly properties', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@BFGOEDGP@Invalid?5lRoom?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@BFGOEDGP@Invalid?5lRoom?5value?$AA@ DB 'Invalid lRoom value', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@INCPBGEM@Invalid?5lRoomHF?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@INCPBGEM@Invalid?5lRoomHF?5value?$AA@ DB 'Invalid lRoomHF value'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@MMCGGFDN@Invalid?5flRoomRolloffFactor?5valu@
DSOUND_RD	SEGMENT
??_C@_0CC@MMCGGFDN@Invalid?5flRoomRolloffFactor?5valu@ DB 'Invalid flRoom'
	DB	'RolloffFactor value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT ??_C@_0BK@JLJBHPAG@Invalid?5flDecayTime?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@JLJBHPAG@Invalid?5flDecayTime?5value?$AA@ DB 'Invalid flDecayTi'
	DB	'me value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT ??_C@_0BN@DIPMFMJF@Invalid?5flDecayHFRatio?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@DIPMFMJF@Invalid?5flDecayHFRatio?5value?$AA@ DB 'Invalid flDeca'
	DB	'yHFRatio value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@HHFHHHAL@Invalid?5lReflections?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@HHFHHHAL@Invalid?5lReflections?5value?$AA@ DB 'Invalid lReflect'
	DB	'ions value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT ??_C@_0CB@MLJGFPIP@Invalid?5flReflectionsDelay?5value@
DSOUND_RD	SEGMENT
??_C@_0CB@MLJGFPIP@Invalid?5flReflectionsDelay?5value@ DB 'Invalid flRefl'
	DB	'ectionsDelay value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@GHFHGCHH@Invalid?5lReverb?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@GHFHGCHH@Invalid?5lReverb?5value?$AA@ DB 'Invalid lReverb value'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@HKPBDOAD@Invalid?5flReverbDelay?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@HKPBDOAD@Invalid?5flReverbDelay?5value?$AA@ DB 'Invalid flRever'
	DB	'bDelay value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_C@_0BK@POIFFNNC@Invalid?5flDiffusion?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@POIFFNNC@Invalid?5flDiffusion?5value?$AA@ DB 'Invalid flDiffusi'
	DB	'on value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@BDIIEOGO@Invalid?5flDensity?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@BDIIEOGO@Invalid?5flDensity?5value?$AA@ DB 'Invalid flDensity v'
	DB	'alue', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT ??_C@_0BM@IOADAE@Invalid?5flHFReference?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IOADAE@Invalid?5flHFReference?5value?$AA@ DB 'Invalid flHFRefer'
	DB	'ence value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@OHHHODMJ@Can?8t?5set?5I3DL2?5listener?5propert@
DSOUND_RD	SEGMENT
??_C@_0EM@OHHHODMJ@Can?8t?5set?5I3DL2?5listener?5propert@ DB 'Can''t set '
	DB	'I3DL2 listener properties without loading the I3DL2 reverb ef'
	DB	'fect', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetI3DL2Listener@CDirectSound@DirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z
DSOUND	SEGMENT
$T40436 = -16
$T40435 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pParams$ = 12
_dwFlags$ = 16
?SetI3DL2Listener@CDirectSound@DirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z PROC NEAR ; DirectSound::CDirectSound::SetI3DL2Listener, COMDAT

; 4067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4068 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 4069 :     
; 4070 :     DPF_ENTER();    
; 4071 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 44		 je	 SHORT $L36967
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00028	68 e7 0f 00 00	 push	 4071			; 00000fe7H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40435[ebp], -2147467259 ; 80004005H
  00052	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f4	 mov	 eax, DWORD PTR $T40435[ebp]
  0005d	e9 b5 05 00 00	 jmp	 $L36963
$L36967:
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00067	68 e7 0f 00 00	 push	 4071			; 00000fe7H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 4072 : 
; 4073 : #ifdef VALIDATE_PARAMETERS
; 4074 : 
; 4075 :     if(!pParams)

  00079	83 7d 0c 00	 cmp	 DWORD PTR _pParams$[ebp], 0
  0007d	75 2d		 jne	 SHORT $L36971

; 4076 :     {
; 4077 :         DPF_ERROR("Failed to supply properties");

  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00089	68 ed 0f 00 00	 push	 4077			; 00000fedH
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00093	6a 01		 push	 1
  00095	6a 09		 push	 9
  00097	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@OHFOFNJM@Failed?5to?5supply?5properties?$AA@
  000a4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a9	83 c4 04	 add	 esp, 4
$L36971:

; 4078 :     }
; 4079 : 
; 4080 :     if(dwFlags & ~DS3D_VALID)

  000ac	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000af	83 e0 fe	 and	 eax, -2			; fffffffeH
  000b2	85 c0		 test	 eax, eax
  000b4	74 34		 je	 SHORT $L36973

; 4081 :     {
; 4082 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  000c0	68 f2 0f 00 00	 push	 4082			; 00000ff2H
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000ca	6a 01		 push	 1
  000cc	6a 09		 push	 9
  000ce	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000d3	83 c4 18	 add	 esp, 24			; 00000018H
  000d6	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000d9	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000dc	51		 push	 ecx
  000dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000e2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000e7	83 c4 08	 add	 esp, 8
$L36973:

; 4083 :     }
; 4084 : 
; 4085 :     if((pParams->lRoom < DSI3DL2LISTENER_MINROOM) || (pParams->lRoom > DSI3DL2LISTENER_MAXROOM))

  000ea	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  000ed	81 3a f0 d8 ff
	ff		 cmp	 DWORD PTR [edx], -10000	; ffffd8f0H
  000f3	7c 08		 jl	 SHORT $L36975
  000f5	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  000f8	83 38 00	 cmp	 DWORD PTR [eax], 0
  000fb	7e 2d		 jle	 SHORT $L36974
$L36975:

; 4086 :     {
; 4087 :         DPF_ERROR("Invalid lRoom value");

  000fd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00107	68 f7 0f 00 00	 push	 4087			; 00000ff7H
  0010c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00111	6a 01		 push	 1
  00113	6a 09		 push	 9
  00115	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011a	83 c4 18	 add	 esp, 24			; 00000018H
  0011d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@BFGOEDGP@Invalid?5lRoom?5value?$AA@
  00122	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00127	83 c4 04	 add	 esp, 4
$L36974:

; 4088 :     }
; 4089 : 
; 4090 :     if((pParams->lRoomHF < DSI3DL2LISTENER_MINROOMHF) || (pParams->lRoomHF > DSI3DL2LISTENER_MAXROOMHF))

  0012a	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0012d	81 79 04 f0 d8
	ff ff		 cmp	 DWORD PTR [ecx+4], -10000 ; ffffd8f0H
  00134	7c 09		 jl	 SHORT $L36978
  00136	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00139	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0013d	7e 2d		 jle	 SHORT $L36977
$L36978:

; 4091 :     {
; 4092 :         DPF_ERROR("Invalid lRoomHF value");

  0013f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00144	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00149	68 fc 0f 00 00	 push	 4092			; 00000ffcH
  0014e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00153	6a 01		 push	 1
  00155	6a 09		 push	 9
  00157	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0015c	83 c4 18	 add	 esp, 24			; 00000018H
  0015f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@INCPBGEM@Invalid?5lRoomHF?5value?$AA@
  00164	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00169	83 c4 04	 add	 esp, 4
$L36977:

; 4093 :     }
; 4094 : 
; 4095 :     if((pParams->flRoomRolloffFactor < DSI3DL2LISTENER_MINROOMROLLOFFFACTOR) || (pParams->flRoomRolloffFactor > DSI3DL2LISTENER_MAXROOMROLLOFFFACTOR))

  0016c	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0016f	d9 40 08	 fld	 DWORD PTR [eax+8]
  00172	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00178	df e0		 fnstsw	 ax
  0017a	f6 c4 05	 test	 ah, 5
  0017d	7b 13		 jnp	 SHORT $L36981
  0017f	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00182	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00185	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  0018b	df e0		 fnstsw	 ax
  0018d	f6 c4 41	 test	 ah, 65			; 00000041H
  00190	75 2d		 jne	 SHORT $L36980
$L36981:

; 4096 :     {
; 4097 :         DPF_ERROR("Invalid flRoomRolloffFactor value");

  00192	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00197	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  0019c	68 01 10 00 00	 push	 4097			; 00001001H
  001a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001a6	6a 01		 push	 1
  001a8	6a 09		 push	 9
  001aa	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001af	83 c4 18	 add	 esp, 24			; 00000018H
  001b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@MMCGGFDN@Invalid?5flRoomRolloffFactor?5valu@
  001b7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001bc	83 c4 04	 add	 esp, 4
$L36980:

; 4098 :     }
; 4099 : 
; 4100 :     if((pParams->flDecayTime < DSI3DL2LISTENER_MINDECAYTIME) || (pParams->flDecayTime > DSI3DL2LISTENER_MAXDECAYTIME))

  001bf	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  001c2	d9 42 0c	 fld	 DWORD PTR [edx+12]
  001c5	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3dcccccd
  001cb	df e0		 fnstsw	 ax
  001cd	f6 c4 05	 test	 ah, 5
  001d0	7b 13		 jnp	 SHORT $L36984
  001d2	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  001d5	d9 40 0c	 fld	 DWORD PTR [eax+12]
  001d8	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41a00000
  001de	df e0		 fnstsw	 ax
  001e0	f6 c4 41	 test	 ah, 65			; 00000041H
  001e3	75 2d		 jne	 SHORT $L36983
$L36984:

; 4101 :     {
; 4102 :         DPF_ERROR("Invalid flDecayTime value");

  001e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  001ef	68 06 10 00 00	 push	 4102			; 00001006H
  001f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001f9	6a 01		 push	 1
  001fb	6a 09		 push	 9
  001fd	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00202	83 c4 18	 add	 esp, 24			; 00000018H
  00205	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JLJBHPAG@Invalid?5flDecayTime?5value?$AA@
  0020a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0020f	83 c4 04	 add	 esp, 4
$L36983:

; 4103 :     }
; 4104 : 
; 4105 :     if((pParams->flDecayHFRatio < DSI3DL2LISTENER_MINDECAYHFRATIO) || (pParams->flDecayHFRatio > DSI3DL2LISTENER_MAXDECAYHFRATIO))

  00212	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00215	d9 41 10	 fld	 DWORD PTR [ecx+16]
  00218	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3dcccccd
  0021e	df e0		 fnstsw	 ax
  00220	f6 c4 05	 test	 ah, 5
  00223	7b 13		 jnp	 SHORT $L36987
  00225	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00228	d9 42 10	 fld	 DWORD PTR [edx+16]
  0022b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@40000000
  00231	df e0		 fnstsw	 ax
  00233	f6 c4 41	 test	 ah, 65			; 00000041H
  00236	75 2d		 jne	 SHORT $L36986
$L36987:

; 4106 :     {
; 4107 :         DPF_ERROR("Invalid flDecayHFRatio value");

  00238	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0023d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00242	68 0b 10 00 00	 push	 4107			; 0000100bH
  00247	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0024c	6a 01		 push	 1
  0024e	6a 09		 push	 9
  00250	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00255	83 c4 18	 add	 esp, 24			; 00000018H
  00258	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DIPMFMJF@Invalid?5flDecayHFRatio?5value?$AA@
  0025d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00262	83 c4 04	 add	 esp, 4
$L36986:

; 4108 :     }
; 4109 : 
; 4110 :     if((pParams->lReflections < DSI3DL2LISTENER_MINREFLECTIONS) || (pParams->lReflections > DSI3DL2LISTENER_MAXREFLECTIONS))

  00265	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00268	81 78 14 f0 d8
	ff ff		 cmp	 DWORD PTR [eax+20], -10000 ; ffffd8f0H
  0026f	7c 0c		 jl	 SHORT $L36990
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00274	81 79 14 e8 03
	00 00		 cmp	 DWORD PTR [ecx+20], 1000 ; 000003e8H
  0027b	7e 2d		 jle	 SHORT $L36989
$L36990:

; 4111 :     {
; 4112 :         DPF_ERROR("Invalid lReflections value");

  0027d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00282	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00287	68 10 10 00 00	 push	 4112			; 00001010H
  0028c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00291	6a 01		 push	 1
  00293	6a 09		 push	 9
  00295	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0029a	83 c4 18	 add	 esp, 24			; 00000018H
  0029d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HHFHHHAL@Invalid?5lReflections?5value?$AA@
  002a2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002a7	83 c4 04	 add	 esp, 4
$L36989:

; 4113 :     }
; 4114 : 
; 4115 :     if((pParams->flReflectionsDelay < DSI3DL2LISTENER_MINREFLECTIONSDELAY) || (pParams->flReflectionsDelay > DSI3DL2LISTENER_MAXREFLECTIONSDELAY))

  002aa	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  002ad	d9 42 18	 fld	 DWORD PTR [edx+24]
  002b0	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  002b6	df e0		 fnstsw	 ax
  002b8	f6 c4 05	 test	 ah, 5
  002bb	7b 13		 jnp	 SHORT $L36993
  002bd	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  002c0	d9 40 18	 fld	 DWORD PTR [eax+24]
  002c3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3e99999a
  002c9	df e0		 fnstsw	 ax
  002cb	f6 c4 41	 test	 ah, 65			; 00000041H
  002ce	75 2d		 jne	 SHORT $L36992
$L36993:

; 4116 :     {
; 4117 :         DPF_ERROR("Invalid flReflectionsDelay value");

  002d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  002da	68 15 10 00 00	 push	 4117			; 00001015H
  002df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002e4	6a 01		 push	 1
  002e6	6a 09		 push	 9
  002e8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002ed	83 c4 18	 add	 esp, 24			; 00000018H
  002f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@MLJGFPIP@Invalid?5flReflectionsDelay?5value@
  002f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002fa	83 c4 04	 add	 esp, 4
$L36992:

; 4118 :     }
; 4119 : 
; 4120 :     if((pParams->lReverb < DSI3DL2LISTENER_MINREVERB) || (pParams->lReverb > DSI3DL2LISTENER_MAXREVERB))

  002fd	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00300	81 79 1c f0 d8
	ff ff		 cmp	 DWORD PTR [ecx+28], -10000 ; ffffd8f0H
  00307	7c 0c		 jl	 SHORT $L36996
  00309	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0030c	81 7a 1c d0 07
	00 00		 cmp	 DWORD PTR [edx+28], 2000 ; 000007d0H
  00313	7e 2d		 jle	 SHORT $L36995
$L36996:

; 4121 :     {
; 4122 :         DPF_ERROR("Invalid lReverb value");

  00315	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0031a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  0031f	68 1a 10 00 00	 push	 4122			; 0000101aH
  00324	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00329	6a 01		 push	 1
  0032b	6a 09		 push	 9
  0032d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00332	83 c4 18	 add	 esp, 24			; 00000018H
  00335	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@GHFHGCHH@Invalid?5lReverb?5value?$AA@
  0033a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0033f	83 c4 04	 add	 esp, 4
$L36995:

; 4123 :     }
; 4124 : 
; 4125 :     if((pParams->flReverbDelay < DSI3DL2LISTENER_MINREVERBDELAY) || (pParams->flReverbDelay > DSI3DL2LISTENER_MAXREVERBDELAY))

  00342	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00345	d9 40 20	 fld	 DWORD PTR [eax+32]
  00348	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0034e	df e0		 fnstsw	 ax
  00350	f6 c4 05	 test	 ah, 5
  00353	7b 13		 jnp	 SHORT $L36999
  00355	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00358	d9 41 20	 fld	 DWORD PTR [ecx+32]
  0035b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3dcccccd
  00361	df e0		 fnstsw	 ax
  00363	f6 c4 41	 test	 ah, 65			; 00000041H
  00366	75 2d		 jne	 SHORT $L36998
$L36999:

; 4126 :     {
; 4127 :         DPF_ERROR("Invalid flReverbDelay value");

  00368	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0036d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00372	68 1f 10 00 00	 push	 4127			; 0000101fH
  00377	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0037c	6a 01		 push	 1
  0037e	6a 09		 push	 9
  00380	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00385	83 c4 18	 add	 esp, 24			; 00000018H
  00388	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@HKPBDOAD@Invalid?5flReverbDelay?5value?$AA@
  0038d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00392	83 c4 04	 add	 esp, 4
$L36998:

; 4128 :     }
; 4129 : 
; 4130 :     if((pParams->flDiffusion < DSI3DL2LISTENER_MINDIFFUSION) || (pParams->flDiffusion > DSI3DL2LISTENER_MAXDIFFUSION))

  00395	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00398	d9 42 24	 fld	 DWORD PTR [edx+36]
  0039b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  003a1	df e0		 fnstsw	 ax
  003a3	f6 c4 05	 test	 ah, 5
  003a6	7b 13		 jnp	 SHORT $L37002
  003a8	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  003ab	d9 40 24	 fld	 DWORD PTR [eax+36]
  003ae	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@42c80000
  003b4	df e0		 fnstsw	 ax
  003b6	f6 c4 41	 test	 ah, 65			; 00000041H
  003b9	75 2d		 jne	 SHORT $L37001
$L37002:

; 4131 :     {
; 4132 :         DPF_ERROR("Invalid flDiffusion value");

  003bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  003c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  003c5	68 24 10 00 00	 push	 4132			; 00001024H
  003ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  003cf	6a 01		 push	 1
  003d1	6a 09		 push	 9
  003d3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  003d8	83 c4 18	 add	 esp, 24			; 00000018H
  003db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@POIFFNNC@Invalid?5flDiffusion?5value?$AA@
  003e0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003e5	83 c4 04	 add	 esp, 4
$L37001:

; 4133 :     }
; 4134 : 
; 4135 :     if((pParams->flDensity < DSI3DL2LISTENER_MINDENSITY) || (pParams->flDensity > DSI3DL2LISTENER_MAXDENSITY))

  003e8	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  003eb	d9 41 28	 fld	 DWORD PTR [ecx+40]
  003ee	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  003f4	df e0		 fnstsw	 ax
  003f6	f6 c4 05	 test	 ah, 5
  003f9	7b 13		 jnp	 SHORT $L37005
  003fb	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  003fe	d9 42 28	 fld	 DWORD PTR [edx+40]
  00401	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@42c80000
  00407	df e0		 fnstsw	 ax
  00409	f6 c4 41	 test	 ah, 65			; 00000041H
  0040c	75 2d		 jne	 SHORT $L37004
$L37005:

; 4136 :     {
; 4137 :         DPF_ERROR("Invalid flDensity value");

  0040e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00413	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  00418	68 29 10 00 00	 push	 4137			; 00001029H
  0041d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00422	6a 01		 push	 1
  00424	6a 09		 push	 9
  00426	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0042b	83 c4 18	 add	 esp, 24			; 00000018H
  0042e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@BDIIEOGO@Invalid?5flDensity?5value?$AA@
  00433	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00438	83 c4 04	 add	 esp, 4
$L37004:

; 4138 :     }
; 4139 : 
; 4140 :     if((pParams->flHFReference < DSI3DL2LISTENER_MINHFREFERENCE) || (pParams->flHFReference > DSI3DL2LISTENER_MAXHFREFERENCE))

  0043b	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0043e	d9 40 2c	 fld	 DWORD PTR [eax+44]
  00441	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41a00000
  00447	df e0		 fnstsw	 ax
  00449	f6 c4 05	 test	 ah, 5
  0044c	7b 13		 jnp	 SHORT $L37008
  0044e	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00451	d9 41 2c	 fld	 DWORD PTR [ecx+44]
  00454	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@469c4000
  0045a	df e0		 fnstsw	 ax
  0045c	f6 c4 41	 test	 ah, 65			; 00000041H
  0045f	75 2d		 jne	 SHORT $L37007
$L37008:

; 4141 :     {
; 4142 :         DPF_ERROR("Invalid flHFReference value");

  00461	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00466	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  0046b	68 2e 10 00 00	 push	 4142			; 0000102eH
  00470	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00475	6a 01		 push	 1
  00477	6a 09		 push	 9
  00479	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0047e	83 c4 18	 add	 esp, 24			; 00000018H
  00481	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IOADAE@Invalid?5flHFReference?5value?$AA@
  00486	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0048b	83 c4 04	 add	 esp, 4
$L37007:

; 4143 :     }
; 4144 : 
; 4145 : #endif // VALIDATE_PARAMETERS
; 4146 : 
; 4147 :     if(DSFX_IMAGELOC_UNUSED == m_pSettings->m_EffectLocations.dwI3DL2ReverbIndex)

  0048e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00491	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00494	83 78 0c ff	 cmp	 DWORD PTR [eax+12], -1
  00498	75 34		 jne	 SHORT $L37010

; 4148 :     {
; 4149 :         DPF_ERROR("Can't set I3DL2 listener properties without loading the I3DL2 reverb effect");

  0049a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0049f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GMOAAAC@CDirectSound?3?3SetI3DL2Listener?$AA@
  004a4	68 35 10 00 00	 push	 4149			; 00001035H
  004a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  004ae	6a 01		 push	 1
  004b0	6a 09		 push	 9
  004b2	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  004b7	83 c4 18	 add	 esp, 24			; 00000018H
  004ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@OHHHODMJ@Can?8t?5set?5I3DL2?5listener?5propert@
  004bf	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  004c4	83 c4 04	 add	 esp, 4

; 4150 :         hr = DSERR_INVALIDCALL;

  004c7	c7 45 fc 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L37010:

; 4151 :     }
; 4152 : 
; 4153 :     if(SUCCEEDED(hr))

  004ce	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  004d2	0f 8c 2e 01 00
	00		 jl	 $L37017

; 4154 :     {
; 4155 :         m_pSettings->m_3dParams.I3dl2Params.lRoom = pParams->lRoom;

  004d8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  004db	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  004de	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  004e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e3	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 4156 :         m_pSettings->m_3dParams.I3dl2Params.lRoomHF = pParams->lRoomHF;

  004e6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  004e9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004ec	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  004ef	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  004f2	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 4157 :         m_pSettings->m_3dParams.I3dl2Params.flRoomRolloffFactor = NormalizeFloat(pParams->flRoomRolloffFactor);;

  004f5	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  004f8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004fb	51		 push	 ecx
  004fc	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00501	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00504	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00507	d9 58 7c	 fstp	 DWORD PTR [eax+124]

; 4158 :         m_pSettings->m_3dParams.I3dl2Params.flDecayTime = NormalizeFloat(pParams->flDecayTime);

  0050a	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0050d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00510	52		 push	 edx
  00511	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00516	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00519	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0051c	d9 99 80 00 00
	00		 fstp	 DWORD PTR [ecx+128]

; 4159 :         m_pSettings->m_3dParams.I3dl2Params.flDecayHFRatio = NormalizeFloat(pParams->flDecayHFRatio);

  00522	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00525	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00528	50		 push	 eax
  00529	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0052e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00531	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00534	d9 9a 84 00 00
	00		 fstp	 DWORD PTR [edx+132]

; 4160 :         m_pSettings->m_3dParams.I3dl2Params.lReflections = pParams->lReflections;

  0053a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0053d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00540	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00543	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00546	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 4161 :         m_pSettings->m_3dParams.I3dl2Params.flReflectionsDelay = NormalizeFloat(pParams->flReflectionsDelay);

  0054c	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0054f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00552	52		 push	 edx
  00553	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00558	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0055b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0055e	d9 99 8c 00 00
	00		 fstp	 DWORD PTR [ecx+140]

; 4162 :         m_pSettings->m_3dParams.I3dl2Params.lReverb = pParams->lReverb;

  00564	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00567	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0056a	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0056d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00570	89 90 90 00 00
	00		 mov	 DWORD PTR [eax+144], edx

; 4163 :         m_pSettings->m_3dParams.I3dl2Params.flReverbDelay = NormalizeFloat(pParams->flReverbDelay);

  00576	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00579	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0057c	51		 push	 ecx
  0057d	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00582	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00585	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00588	d9 98 94 00 00
	00		 fstp	 DWORD PTR [eax+148]

; 4164 :         m_pSettings->m_3dParams.I3dl2Params.flDiffusion = NormalizeFloat(pParams->flDiffusion);

  0058e	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00591	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00594	52		 push	 edx
  00595	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0059a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0059d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  005a0	d9 99 98 00 00
	00		 fstp	 DWORD PTR [ecx+152]

; 4165 :         m_pSettings->m_3dParams.I3dl2Params.flDensity = NormalizeFloat(pParams->flDensity);

  005a6	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  005a9	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  005ac	50		 push	 eax
  005ad	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  005b2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  005b5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  005b8	d9 9a 9c 00 00
	00		 fstp	 DWORD PTR [edx+156]

; 4166 :         m_pSettings->m_3dParams.I3dl2Params.flHFReference = NormalizeFloat(pParams->flHFReference);

  005be	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  005c1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  005c4	51		 push	 ecx
  005c5	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  005ca	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  005cd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005d0	d9 98 a0 00 00
	00		 fstp	 DWORD PTR [eax+160]

; 4167 : 
; 4168 :         m_pSettings->m_3dParams.dwParameterMask |= DS3DPARAM_LISTENER_I3DL2;

  005d6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  005d9	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  005dc	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  005e2	0d 80 01 00 00	 or	 eax, 384		; 00000180H
  005e7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  005ea	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  005ed	89 82 a4 00 00
	00		 mov	 DWORD PTR [edx+164], eax

; 4169 : 
; 4170 :         if(!(dwFlags & DS3D_DEFERRED))

  005f3	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  005f6	83 e0 01	 and	 eax, 1
  005f9	85 c0		 test	 eax, eax
  005fb	75 09		 jne	 SHORT $L37017

; 4171 :         {
; 4172 :             CommitDeferredSettings();

  005fd	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00600	51		 push	 ecx
  00601	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
$L37017:

; 4173 :         }
; 4174 :     }
; 4175 : 
; 4176 :     DPF_LEAVE_HRESULT(hr);
; 4177 : 
; 4178 :     return hr;

  00606	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  00609	89 55 f0	 mov	 DWORD PTR $T40436[ebp], edx
  0060c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0060f	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00614	8b 45 f0	 mov	 eax, DWORD PTR $T40436[ebp]
$L36963:

; 4179 : }

  00617	8b e5		 mov	 esp, ebp
  00619	5d		 pop	 ebp
  0061a	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Listener@CDirectSound@DirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z ENDP ; DirectSound::CDirectSound::SetI3DL2Listener
DSOUND	ENDS
PUBLIC	??_C@_0CF@CKEHDPPH@CDirectSound?3?3CommitDeferredSett@ ; `string'
PUBLIC	?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
EXTRN	?Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ:NEAR ; DirectSound::CMcpxAPU::Commit3dSettings
;	COMDAT ??_C@_0CF@CKEHDPPH@CDirectSound?3?3CommitDeferredSett@
DSOUND_RD	SEGMENT
??_C@_0CF@CKEHDPPH@CDirectSound?3?3CommitDeferredSett@ DB 'CDirectSound::'
	DB	'CommitDeferredSettings', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ
DSOUND	SEGMENT
$T40453 = -20
$T40452 = -16
___AutoLock$ = -12
_pleEntry$ = -8
_dwParameterMask$ = -4
_this$ = 8
?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ PROC NEAR ; DirectSound::CDirectSound::CommitDeferredSettings, COMDAT

; 4205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 4206 :     DWORD                   dwParameterMask;
; 4207 :     PLIST_ENTRY             pleEntry;
; 4208 : 
; 4209 :     DPF_ENTER();
; 4210 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L37027
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CKEHDPPH@CDirectSound?3?3CommitDeferredSett@
  00021	68 72 10 00 00	 push	 4210			; 00001072H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T40452[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f0	 mov	 eax, DWORD PTR $T40452[ebp]
  00056	e9 82 00 00 00	 jmp	 $L37023
$L37027:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CKEHDPPH@CDirectSound?3?3CommitDeferredSett@
  00060	68 72 10 00 00	 push	 4210			; 00001072H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 4211 : 
; 4212 :     //
; 4213 :     // Recalculate changed 3D listener parameters
; 4214 :     //
; 4215 : 
; 4216 :     dwParameterMask = m_pDevice->Commit3dSettings();

  00072	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00078	e8 00 00 00 00	 call	 ?Commit3dSettings@CMcpxAPU@DirectSound@@QAEKXZ ; DirectSound::CMcpxAPU::Commit3dSettings
  0007d	89 45 fc	 mov	 DWORD PTR _dwParameterMask$[ebp], eax

; 4217 : 
; 4218 :     //
; 4219 :     // Recalculate all 3D voices
; 4220 :     //
; 4221 : 
; 4222 :     for(pleEntry = m_lst3dVoices.Flink; pleEntry != &m_lst3dVoices; pleEntry = pleEntry->Flink)

  00080	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00086	89 55 f8	 mov	 DWORD PTR _pleEntry$[ebp], edx
  00089	eb 08		 jmp	 SHORT $L37031
$L37032:
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	89 4d f8	 mov	 DWORD PTR _pleEntry$[ebp], ecx
$L37031:
  00093	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00096	83 c2 18	 add	 edx, 24			; 00000018H
  00099	39 55 f8	 cmp	 DWORD PTR _pleEntry$[ebp], edx
  0009c	74 0e		 je	 SHORT $L37033

; 4223 :     {
; 4224 :         CONTAINING_RECORD(pleEntry, CDirectSoundVoice, m_le3dVoice)->CommitDeferredSettings();

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  000a1	83 e8 14	 sub	 eax, 20			; 00000014H
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings

; 4225 :     }

  000aa	eb df		 jmp	 SHORT $L37032
$L37033:

; 4226 : 
; 4227 :     //
; 4228 :     // Clear the parameter mask
; 4229 :     //
; 4230 : 
; 4231 :     m_pSettings->m_3dParams.dwParameterMask &= ~dwParameterMask;

  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _dwParameterMask$[ebp]
  000b5	f7 d0		 not	 eax
  000b7	8b 8a a4 00 00
	00		 mov	 ecx, DWORD PTR [edx+164]
  000bd	23 c8		 and	 ecx, eax
  000bf	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000c5	89 88 a4 00 00
	00		 mov	 DWORD PTR [eax+164], ecx

; 4232 : 
; 4233 :     DPF_LEAVE_HRESULT(DS_OK);
; 4234 : 
; 4235 :     return DS_OK;

  000cb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T40453[ebp], 0
  000d2	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000d5	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000da	8b 45 ec	 mov	 eax, DWORD PTR $T40453[ebp]
$L37023:

; 4236 : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ENDP ; DirectSound::CDirectSound::CommitDeferredSettings
DSOUND	ENDS
PUBLIC	??_C@_0BG@PKIOADP@CDirectSound?3?3GetTime?$AA@	; `string'
PUBLIC	??_C@_0CA@ELGHAIJL@Failed?5to?5specify?5a?5time?5buffer?$AA@ ; `string'
EXTRN	__imp__KeQuerySystemTime@4:NEAR
;	COMDAT ??_C@_0BG@PKIOADP@CDirectSound?3?3GetTime?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@PKIOADP@CDirectSound?3?3GetTime?$AA@ DB 'CDirectSound::GetTime', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@ELGHAIJL@Failed?5to?5specify?5a?5time?5buffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@ELGHAIJL@Failed?5to?5specify?5a?5time?5buffer?$AA@ DB 'Failed t'
	DB	'o specify a time buffer', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetTime@CDirectSound@DirectSound@@QAGJPA_J@Z
DSOUND	SEGMENT
_this$ = 8
_prtCurrent$ = 12
?GetTime@CDirectSound@DirectSound@@QAGJPA_J@Z PROC NEAR	; DirectSound::CDirectSound::GetTime, COMDAT

; 4264 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4265 :     DPF_ENTER();    
; 4266 : 
; 4267 : #ifdef VALIDATE_PARAMETERS
; 4268 : 
; 4269 :     if(!prtCurrent)

  00003	83 7d 0c 00	 cmp	 DWORD PTR _prtCurrent$[ebp], 0
  00007	75 2d		 jne	 SHORT $L37044

; 4270 :     {
; 4271 :         DPF_ERROR("Failed to specify a time buffer");

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@PKIOADP@CDirectSound?3?3GetTime?$AA@
  00013	68 af 10 00 00	 push	 4271			; 000010afH
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001d	6a 01		 push	 1
  0001f	6a 09		 push	 9
  00021	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00026	83 c4 18	 add	 esp, 24			; 00000018H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@ELGHAIJL@Failed?5to?5specify?5a?5time?5buffer?$AA@
  0002e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00033	83 c4 04	 add	 esp, 4
$L37044:

; 4272 :     }
; 4273 : 
; 4274 : #endif // VALIDATE_PARAMETERS
; 4275 : 
; 4276 :     KeQuerySystemTime((PLARGE_INTEGER)prtCurrent);

  00036	8b 45 0c	 mov	 eax, DWORD PTR _prtCurrent$[ebp]
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 4277 : 
; 4278 :     DPF_LEAVE_HRESULT(DS_OK);
; 4279 : 
; 4280 :     return DS_OK;

  00040	33 c0		 xor	 eax, eax

; 4281 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?GetTime@CDirectSound@DirectSound@@QAGJPA_J@Z ENDP	; DirectSound::CDirectSound::GetTime
DSOUND	ENDS
PUBLIC	??_C@_0BO@BALLHIEJ@CDirectSound?3?3GetOutputLevels?$AA@ ; `string'
PUBLIC	??_C@_0CJ@PAFGHEFI@Failed?5to?5specify?5an?5output?5leve@ ; `string'
;	COMDAT ??_C@_0BO@BALLHIEJ@CDirectSound?3?3GetOutputLevels?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@BALLHIEJ@CDirectSound?3?3GetOutputLevels?$AA@ DB 'CDirectSound:'
	DB	':GetOutputLevels', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CJ@PAFGHEFI@Failed?5to?5specify?5an?5output?5leve@
DSOUND_RD	SEGMENT
??_C@_0CJ@PAFGHEFI@Failed?5to?5specify?5an?5output?5leve@ DB 'Failed to s'
	DB	'pecify an output level buffer', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetOutputLevels@CDirectSound@DirectSound@@QAGJPAU_DSOUTPUTLEVELS@@H@Z
DSOUND	SEGMENT
_pDspLevels$ = -4
_this$ = 8
_pLevels$ = 12
_bReset$ = 16
?GetOutputLevels@CDirectSound@DirectSound@@QAGJPAU_DSOUTPUTLEVELS@@H@Z PROC NEAR ; DirectSound::CDirectSound::GetOutputLevels, COMDAT

; 4308 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4309 :     PDSOUTPUTLEVELS pDspLevels;
; 4310 :     DPF_ENTER();    
; 4311 : 
; 4312 : #ifdef VALIDATE_PARAMETERS
; 4313 : 
; 4314 :     if(!pLevels)

  00004	83 7d 0c 00	 cmp	 DWORD PTR _pLevels$[ebp], 0
  00008	75 2d		 jne	 SHORT $L37055

; 4315 :     {
; 4316 :         DPF_ERROR("Failed to specify an output level buffer");

  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@BALLHIEJ@CDirectSound?3?3GetOutputLevels?$AA@
  00014	68 dc 10 00 00	 push	 4316			; 000010dcH
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@PAFGHEFI@Failed?5to?5specify?5an?5output?5leve@
  0002f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00034	83 c4 04	 add	 esp, 4
$L37055:

; 4317 :     }
; 4318 : 
; 4319 : #endif // VALIDATE_PARAMETERS
; 4320 : 
; 4321 :     //
; 4322 :     // map a data struct on top the of EP dsp P ram location where
; 4323 :     // the output levels get cached, twice every 5.33ms
; 4324 :     //
; 4325 : 
; 4326 :     pDspLevels = (PDSOUTPUTLEVELS) ((PUCHAR) XPCICFG_APU_MEMORY_REGISTER_BASE_0 + 
; 4327 :         NV_PAPU_EPPMEM(0) +
; 4328 :         EP_OFFSET_OUTPUT_LEVELS_ANALOG_PEAK*sizeof(DWORD));

  00037	b8 00 a0 05 00	 mov	 eax, 368640		; 0005a000H
  0003c	05 ac 06 80 fe	 add	 eax, -25164116		; fe8006acH
  00041	89 45 fc	 mov	 DWORD PTR _pDspLevels$[ebp], eax

; 4329 : 
; 4330 :     //
; 4331 :     // copy levels to caller supplied buffer
; 4332 :     //
; 4333 : 
; 4334 :     memcpy(pLevels, pDspLevels, sizeof(DSOUTPUTLEVELS));

  00044	6a 40		 push	 64			; 00000040H
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _pDspLevels$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 0c	 mov	 edx, DWORD PTR _pLevels$[ebp]
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 _memcpy
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4335 : 
; 4336 :     //
; 4337 :     // if the caller wants to reset the historical max values
; 4338 :     // reset them now
; 4339 :     //
; 4340 : 
; 4341 :     if (bReset) {

  00056	83 7d 10 00	 cmp	 DWORD PTR _bReset$[ebp], 0
  0005a	74 4f		 je	 SHORT $L37062

; 4342 : 
; 4343 :         pDspLevels->dwAnalogLeftTotalPeak = 0;          // analog peak

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _pDspLevels$[ebp]
  0005f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4344 :         pDspLevels->dwAnalogRightTotalPeak = 0;

  00065	8b 4d fc	 mov	 ecx, DWORD PTR _pDspLevels$[ebp]
  00068	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 4345 :         pDspLevels->dwDigitalFrontLeftPeak = 0;         // digital peak levels

  0006f	8b 55 fc	 mov	 edx, DWORD PTR _pDspLevels$[ebp]
  00072	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 4346 :         pDspLevels->dwDigitalFrontCenterPeak = 0;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _pDspLevels$[ebp]
  0007c	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4347 :         pDspLevels->dwDigitalFrontRightPeak = 0;

  00083	8b 4d fc	 mov	 ecx, DWORD PTR _pDspLevels$[ebp]
  00086	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 4348 :         pDspLevels->dwDigitalBackLeftPeak = 0;

  0008d	8b 55 fc	 mov	 edx, DWORD PTR _pDspLevels$[ebp]
  00090	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 4349 :         pDspLevels->dwDigitalBackRightPeak = 0;

  00097	8b 45 fc	 mov	 eax, DWORD PTR _pDspLevels$[ebp]
  0009a	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 4350 :         pDspLevels->dwDigitalLowFrequencyPeak = 0;

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _pDspLevels$[ebp]
  000a4	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
$L37062:

; 4351 : 
; 4352 :     }
; 4353 : 
; 4354 :     DPF_LEAVE_HRESULT(DS_OK);
; 4355 : 
; 4356 :     return DS_OK;

  000ab	33 c0		 xor	 eax, eax

; 4357 : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 0c 00	 ret	 12			; 0000000cH
?GetOutputLevels@CDirectSound@DirectSound@@QAGJPAU_DSOUTPUTLEVELS@@H@Z ENDP ; DirectSound::CDirectSound::GetOutputLevels
DSOUND	ENDS
PUBLIC	??_C@_0BF@OCNAGGAG@CDirectSound?3?3DoWork?$AA@	; `string'
PUBLIC	?DoWork@CMcpxAPU@DirectSound@@QAEXXZ		; DirectSound::CMcpxAPU::DoWork
;	COMDAT ??_C@_0BF@OCNAGGAG@CDirectSound?3?3DoWork?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@OCNAGGAG@CDirectSound?3?3DoWork?$AA@ DB 'CDirectSound::DoWork', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?DoWork@CDirectSound@DirectSound@@QAGXXZ
DSOUND	SEGMENT
___AutoLock$ = -4
_this$ = 8
?DoWork@CDirectSound@DirectSound@@QAGXXZ PROC NEAR	; DirectSound::CDirectSound::DoWork, COMDAT

; 4383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4384 :     DPF_ENTER();
; 4385 :     ENTER_EXTERNAL_METHOD_VOID();

  00004	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00007	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00013	74 37		 je	 SHORT $L37069
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@OCNAGGAG@CDirectSound?3?3DoWork?$AA@
  0001f	68 21 11 00 00	 push	 4385			; 00001121H
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00029	6a 03		 push	 3
  0002b	6a 09		 push	 9
  0002d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00032	83 c4 18	 add	 esp, 24			; 00000018H
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003f	83 c4 04	 add	 esp, 4
  00042	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00045	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0004a	eb 2a		 jmp	 SHORT $L37067
$L37069:
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@OCNAGGAG@CDirectSound?3?3DoWork?$AA@
  00051	68 21 11 00 00	 push	 4385			; 00001121H
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 4386 : 
; 4387 :     m_pDevice->DoWork();

  00063	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00069	e8 00 00 00 00	 call	 ?DoWork@CMcpxAPU@DirectSound@@QAEXXZ ; DirectSound::CMcpxAPU::DoWork

; 4388 : 
; 4389 :     DPF_LEAVE_VOID();
; 4390 : }

  0006e	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00071	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
$L37067:
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?DoWork@CDirectSound@DirectSound@@QAGXXZ ENDP		; DirectSound::CDirectSound::DoWork
DSOUND	ENDS
EXTRN	?ServiceDeferredCommandsLow@CMcpxAPU@DirectSound@@IAEXXZ:NEAR ; DirectSound::CMcpxAPU::ServiceDeferredCommandsLow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpapu.h
;	COMDAT ?DoWork@CMcpxAPU@DirectSound@@QAEXXZ
DSOUND	SEGMENT
_this$ = -4
?DoWork@CMcpxAPU@DirectSound@@QAEXXZ PROC NEAR		; DirectSound::CMcpxAPU::DoWork, COMDAT
; _this$ = ecx

; 259  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 260  :         ServiceDeferredCommandsLow();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?ServiceDeferredCommandsLow@CMcpxAPU@DirectSound@@IAEXXZ ; DirectSound::CMcpxAPU::ServiceDeferredCommandsLow

; 261  :     }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?DoWork@CMcpxAPU@DirectSound@@QAEXXZ ENDP		; DirectSound::CMcpxAPU::DoWork
DSOUND	ENDS
PUBLIC	??_C@_0BP@KBFKHNOD@CDirectSound?3?3EnableHeadphones?$AA@ ; `string'
EXTRN	?SetSpeakerConfig@CMcpxAPU@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxAPU::SetSpeakerConfig
;	COMDAT ??_C@_0BP@KBFKHNOD@CDirectSound?3?3EnableHeadphones?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BP@KBFKHNOD@CDirectSound?3?3EnableHeadphones?$AA@ DB 'CDirectSound'
	DB	'::EnableHeadphones', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?EnableHeadphones@CDirectSound@DirectSound@@QAGJH@Z
DSOUND	SEGMENT
$T40470 = -16
$T40469 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_fEnable$ = 12
?EnableHeadphones@CDirectSound@DirectSound@@QAGJH@Z PROC NEAR ; DirectSound::CDirectSound::EnableHeadphones, COMDAT

; 4418 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4419 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 4420 :     
; 4421 :     DPF_ENTER();
; 4422 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 44		 je	 SHORT $L37078
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KBFKHNOD@CDirectSound?3?3EnableHeadphones?$AA@
  00028	68 46 11 00 00	 push	 4422			; 00001146H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40469[ebp], -2147467259 ; 80004005H
  00052	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f4	 mov	 eax, DWORD PTR $T40469[ebp]
  0005d	e9 b1 00 00 00	 jmp	 $L37074
$L37078:
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KBFKHNOD@CDirectSound?3?3EnableHeadphones?$AA@
  00067	68 46 11 00 00	 push	 4422			; 00001146H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146310212>::__AssertValidObject

; 4423 : 
; 4424 :     if(MAKEBOOL(m_pSettings->m_dwSpeakerConfig & DSSPEAKER_ENABLE_HEADPHONES) != MAKEBOOL(fEnable))

  00079	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0007f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00082	81 e2 00 00 00
	80		 and	 edx, -2147483648	; 80000000H
  00088	f7 da		 neg	 edx
  0008a	1b d2		 sbb	 edx, edx
  0008c	f7 da		 neg	 edx
  0008e	33 c0		 xor	 eax, eax
  00090	83 7d 0c 00	 cmp	 DWORD PTR _fEnable$[ebp], 0
  00094	0f 95 c0	 setne	 al
  00097	3b d0		 cmp	 edx, eax
  00099	74 67		 je	 SHORT $L37082

; 4425 :     {
; 4426 :         //
; 4427 :         // Set the headphone bit in the speaker config
; 4428 :         //
; 4429 : 
; 4430 :         if(fEnable)

  0009b	83 7d 0c 00	 cmp	 DWORD PTR _fEnable$[ebp], 0
  0009f	74 19		 je	 SHORT $L37083

; 4431 :         {
; 4432 :             m_pSettings->m_dwSpeakerConfig |= DSSPEAKER_ENABLE_HEADPHONES;

  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000aa	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000b5	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 4433 :         }
; 4434 :         else

  000b8	eb 18		 jmp	 SHORT $L37084
$L37083:

; 4435 :         {
; 4436 :             m_pSettings->m_dwSpeakerConfig &= ~DSSPEAKER_ENABLE_HEADPHONES;

  000ba	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c3	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  000c9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000cf	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$L37084:

; 4437 :         }
; 4438 : 
; 4439 :         //
; 4440 :         // Update the APU
; 4441 :         //
; 4442 : 
; 4443 :         hr = m_pDevice->SetSpeakerConfig();

  000d2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  000d8	e8 00 00 00 00	 call	 ?SetSpeakerConfig@CMcpxAPU@DirectSound@@QAEJXZ ; DirectSound::CMcpxAPU::SetSpeakerConfig
  000dd	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 4444 : 
; 4445 :         //
; 4446 :         // Recalculate the whole 3D world
; 4447 :         //
; 4448 : 
; 4449 :         if(SUCCEEDED(hr))

  000e0	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e4	7c 1c		 jl	 SHORT $L37082

; 4450 :         {
; 4451 :             m_pSettings->m_3dParams.dwParameterMask = ~0UL;

  000e6	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ec	c7 81 a4 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+164], -1

; 4452 :             
; 4453 :             hr = CommitDeferredSettings();

  000f6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSound@DirectSound@@QAGJXZ ; DirectSound::CDirectSound::CommitDeferredSettings
  000ff	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L37082:

; 4454 :         }
; 4455 :     }
; 4456 : 
; 4457 :     DPF_LEAVE_HRESULT(hr);
; 4458 : 
; 4459 :     return hr;

  00102	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00105	89 45 f0	 mov	 DWORD PTR $T40470[ebp], eax
  00108	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0010b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00110	8b 45 f0	 mov	 eax, DWORD PTR $T40470[ebp]
$L37074:

; 4460 : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
?EnableHeadphones@CDirectSound@DirectSound@@QAGJH@Z ENDP ; DirectSound::CDirectSound::EnableHeadphones
DSOUND	ENDS
PUBLIC	??0CDirectSoundVoiceSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundVoiceSettings::CDirectSoundVoiceSettings
PUBLIC	??_7CDirectSoundVoiceSettings@DirectSound@@6B@	; DirectSound::CDirectSoundVoiceSettings::`vftable'
PUBLIC	??_GCDirectSoundVoiceSettings@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundVoiceSettings::`scalar deleting destructor'
EXTRN	??_ECDirectSoundVoiceSettings@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CDirectSoundVoiceSettings::`vector deleting destructor'
;	COMDAT ??_7CDirectSoundVoiceSettings@DirectSound@@6B@
CONST	SEGMENT
??_7CDirectSoundVoiceSettings@DirectSound@@6B@ DD FLAT:??_ECDirectSoundVoiceSettings@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundVoiceSettings::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSoundVoiceSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CDirectSoundVoiceSettings@DirectSound@@QAE@XZ PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::CDirectSoundVoiceSettings, COMDAT
; _this$ = ecx

; 4487 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundVoiceSettings@DirectSound@@6B@

; 4488 :     DPF_ENTER();
; 4489 :     DPF_LEAVE_VOID();
; 4490 : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CDirectSoundVoiceSettings@DirectSound@@QAE@XZ ENDP	; DirectSound::CDirectSoundVoiceSettings::CDirectSoundVoiceSettings
DSOUND	ENDS
PUBLIC	??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundVoiceSettings::~CDirectSoundVoiceSettings
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSoundVoiceSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSoundVoiceSettings@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundVoiceSettings::~CDirectSoundVoiceSettings
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L37095
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L37095:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCDirectSoundVoiceSettings@DirectSound@@UAEPAXI@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	?SetOutputBuffer@CDirectSoundVoiceSettings@DirectSound@@QAEXPAVCDirectSoundBuffer@2@@Z ; DirectSound::CDirectSoundVoiceSettings::SetOutputBuffer
; Function compile flags: /Odt
;	COMDAT ??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::~CDirectSoundVoiceSettings, COMDAT
; _this$ = ecx

; 4515 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundVoiceSettings@DirectSound@@6B@

; 4516 :     DPF_ENTER();
; 4517 :     
; 4518 :     //
; 4519 :     // Release the output buffer
; 4520 :     //
; 4521 : 
; 4522 :     if(m_pMixinBuffer)

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  0001a	74 0a		 je	 SHORT $L37100

; 4523 :     {
; 4524 :         SetOutputBuffer(NULL);

  0001c	6a 00		 push	 0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?SetOutputBuffer@CDirectSoundVoiceSettings@DirectSound@@QAEXPAVCDirectSoundBuffer@2@@Z ; DirectSound::CDirectSoundVoiceSettings::SetOutputBuffer
$L37100:

; 4525 :     }
; 4526 : 
; 4527 : #ifndef MCPX_BOOT_LIB
; 4528 : 
; 4529 :     //
; 4530 :     // Free memory
; 4531 :     //
; 4532 : 
; 4533 :     MEMFREE(m_p3dParams);

  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	83 ba b4 00 00
	00 00		 cmp	 DWORD PTR [edx+180], 0
  00030	74 1c		 je	 SHORT $L37099
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree
  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	c7 82 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+180], 0
$L37099:

; 4534 : 
; 4535 : #endif // MCPX_BOOT_LIB
; 4536 : 
; 4537 :     DPF_LEAVE_VOID();
; 4538 : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ ENDP	; DirectSound::CDirectSoundVoiceSettings::~CDirectSoundVoiceSettings
DSOUND	ENDS
PUBLIC	??_C@_0L@LIGCIMFC@pwfxFormat?$AA@		; `string'
PUBLIC	??_C@_0BB@NHKDKHEC@DS3DSOURCEPARAMS?$AA@	; `string'
PUBLIC	?Initialize@CDirectSoundVoiceSettings@DirectSound@@QAEJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::Initialize
PUBLIC	?SetFormat@CDirectSoundVoiceSettings@DirectSound@@QAEHPBUtWAVEFORMATEX@@H@Z ; DirectSound::CDirectSoundVoiceSettings::SetFormat
PUBLIC	?SetVolume@CDirectSoundVoiceSettings@DirectSound@@QAEXJ@Z ; DirectSound::CDirectSoundVoiceSettings::SetVolume
PUBLIC	?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::SetMixBins
EXTRN	_DirectSoundDefault3DBuffer:BYTE
EXTRN	_DirectSoundDefaultI3DL2Buffer:BYTE
;	COMDAT ??_C@_0L@LIGCIMFC@pwfxFormat?$AA@
DSOUND_RD	SEGMENT
??_C@_0L@LIGCIMFC@pwfxFormat?$AA@ DB 'pwfxFormat', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@NHKDKHEC@DS3DSOURCEPARAMS?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@NHKDKHEC@DS3DSOURCEPARAMS?$AA@ DB 'DS3DSOURCEPARAMS', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CDirectSoundVoiceSettings@DirectSound@@QAEJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_this$ = -12
_hr$ = -8
_fSetMixBins$ = -4
_dwFlags$ = 8
_pwfxFormat$ = 12
_pMixBins$ = 16
?Initialize@CDirectSoundVoiceSettings@DirectSound@@QAEJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::Initialize, COMDAT
; _this$ = ecx

; 4568 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 4569 :     HRESULT                 hr              = DS_OK;

  0000b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 4570 :     BOOL                    fSetMixBins;
; 4571 : 
; 4572 :     DPF_ENTER();
; 4573 : 
; 4574 :     ASSERT(pwfxFormat);

  00012	68 de 11 00 00	 push	 4574			; 000011deH
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@LIGCIMFC@pwfxFormat?$AA@
  00021	33 c0		 xor	 eax, eax
  00023	83 7d 0c 00	 cmp	 DWORD PTR _pwfxFormat$[ebp], 0
  00027	0f 94 c0	 sete	 al
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 4575 : 
; 4576 :     //
; 4577 :     // Save flags
; 4578 :     //
; 4579 :     
; 4580 :     m_dwFlags = dwFlags;

  00033	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00039	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 4581 : 
; 4582 :     //
; 4583 :     // Set default headroom
; 4584 :     //
; 4585 : 
; 4586 :     if(m_dwFlags & DSBCAPS_SUBMIXMASK)

  0003c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00042	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00048	85 c9		 test	 ecx, ecx
  0004a	74 0c		 je	 SHORT $L37112

; 4587 :     {
; 4588 :         m_dwHeadroom = DSBHEADROOM_DEFAULT_SUBMIX;

  0004c	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 4589 :     }
; 4590 :     else if(m_dwFlags & DSBCAPS_CTRL3D)

  00056	eb 23		 jmp	 SHORT $L37113
$L37112:
  00058	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	83 e1 10	 and	 ecx, 16			; 00000010H
  00061	85 c9		 test	 ecx, ecx
  00063	74 0c		 je	 SHORT $L37114

; 4591 :     {
; 4592 :         m_dwHeadroom = DSBHEADROOM_DEFAULT_3D;

  00065	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00068	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 4593 :     }
; 4594 :     else

  0006f	eb 0a		 jmp	 SHORT $L37113
$L37114:

; 4595 :     {
; 4596 :         m_dwHeadroom = DSBHEADROOM_DEFAULT_2D;

  00071	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 40 20 58 02
	00 00		 mov	 DWORD PTR [eax+32], 600	; 00000258H
$L37113:

; 4597 :     }
; 4598 : 
; 4599 :     //
; 4600 :     // Set format.  If mixbins were specified, we won't allow the format
; 4601 :     // to override them.
; 4602 :     //
; 4603 : 
; 4604 :     fSetMixBins = SetFormat(pwfxFormat, !pMixBins);

  0007b	33 c9		 xor	 ecx, ecx
  0007d	83 7d 10 00	 cmp	 DWORD PTR _pMixBins$[ebp], 0
  00081	0f 94 c1	 sete	 cl
  00084	51		 push	 ecx
  00085	8b 55 0c	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00088	52		 push	 edx
  00089	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?SetFormat@CDirectSoundVoiceSettings@DirectSound@@QAEHPBUtWAVEFORMATEX@@H@Z ; DirectSound::CDirectSoundVoiceSettings::SetFormat
  00091	89 45 fc	 mov	 DWORD PTR _fSetMixBins$[ebp], eax

; 4605 : 
; 4606 :     //
; 4607 :     // If SetFormat didn't set the mixbins for us, we'll need to do it now
; 4608 :     //
; 4609 : 
; 4610 :     if(!fSetMixBins)

  00094	83 7d fc 00	 cmp	 DWORD PTR _fSetMixBins$[ebp], 0
  00098	75 0c		 jne	 SHORT $L37116

; 4611 :     {
; 4612 :         SetMixBins(pMixBins);

  0009a	8b 45 10	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::SetMixBins
$L37116:

; 4613 :     }
; 4614 : 
; 4615 :     //
; 4616 :     // Set default volume
; 4617 :     //
; 4618 : 
; 4619 :     SetVolume(DSBVOLUME_MAX);

  000a6	6a 00		 push	 0
  000a8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ?SetVolume@CDirectSoundVoiceSettings@DirectSound@@QAEXJ@Z ; DirectSound::CDirectSoundVoiceSettings::SetVolume

; 4620 : 
; 4621 : #ifndef MCPX_BOOT_LIB
; 4622 : 
; 4623 :     //
; 4624 :     // Allocate 3D parameter data
; 4625 :     //
; 4626 : 
; 4627 :     if(m_dwFlags & DSBCAPS_CTRL3D)

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b6	83 e2 10	 and	 edx, 16			; 00000010H
  000b9	85 d2		 test	 edx, edx
  000bb	0f 84 81 00 00
	00		 je	 $L37117

; 4628 :     {
; 4629 :         hr = HRFROMP(m_p3dParams = MEMALLOC(DS3DSOURCEPARAMS, 1));

  000c1	6a 01		 push	 1
  000c3	6a 7c		 push	 124			; 0000007cH
  000c5	68 44 53 64 61	 push	 1633964868		; 61645344H
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@NHKDKHEC@DS3DSOURCEPARAMS?$AA@
  000cf	68 15 12 00 00	 push	 4629			; 00001215H
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000d9	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc
  000de	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax
  000e7	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000ea	33 c0		 xor	 eax, eax
  000ec	83 ba b4 00 00
	00 00		 cmp	 DWORD PTR [edx+180], 0
  000f3	0f 95 c0	 setne	 al
  000f6	48		 dec	 eax
  000f7	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  000fc	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 4630 : 
; 4631 :         if(SUCCEEDED(hr))

  000ff	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00103	7c 3d		 jl	 SHORT $L37117

; 4632 :         {
; 4633 :             m_p3dParams->HrtfParams = DirectSoundDefault3DBuffer;

  00105	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	8b b9 b4 00 00
	00		 mov	 edi, DWORD PTR [ecx+180]
  0010e	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00113	be 00 00 00 00	 mov	 esi, OFFSET FLAT:_DirectSoundDefault3DBuffer
  00118	f3 a5		 rep movsd

; 4634 :             m_p3dParams->I3dl2Params = DirectSoundDefaultI3DL2Buffer;

  0011a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0011d	8b ba b4 00 00
	00		 mov	 edi, DWORD PTR [edx+180]
  00123	83 c7 4c	 add	 edi, 76			; 0000004cH
  00126	b9 09 00 00 00	 mov	 ecx, 9
  0012b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:_DirectSoundDefaultI3DL2Buffer
  00130	f3 a5		 rep movsd

; 4635 :             m_p3dParams->dwParameterMask = DS3DPARAM_BUFFER_MASK;

  00132	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00135	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0013b	c7 41 78 ff 00
	00 00		 mov	 DWORD PTR [ecx+120], 255 ; 000000ffH
$L37117:

; 4636 :         }
; 4637 :     }
; 4638 : 
; 4639 : #endif // MCPX_BOOT_LIB
; 4640 : 
; 4641 :     DPF_LEAVE_HRESULT(hr);
; 4642 : 
; 4643 :     return hr;

  00142	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 4644 : }

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 0c 00	 ret	 12			; 0000000cH
?Initialize@CDirectSoundVoiceSettings@DirectSound@@QAEJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::Initialize
DSOUND	ENDS
EXTRN	?CreateInternalFormat@WaveFormat@DirectSound@@YGKPAUDSWAVEFORMAT@@PBUtWAVEFORMATEX@@@Z:NEAR ; DirectSound::WaveFormat::CreateInternalFormat
; Function compile flags: /Odt
;	COMDAT ?SetFormat@CDirectSoundVoiceSettings@DirectSound@@QAEHPBUtWAVEFORMATEX@@H@Z
DSOUND	SEGMENT
_this$ = -84
_dwChannelMask$ = -80
_MixBins$ = -76
_fSetMixBins$ = -68
_MixBinVolumePairs$ = -64
_pwfxFormat$ = 8
_fAllowMixBins$ = 12
?SetFormat@CDirectSoundVoiceSettings@DirectSound@@QAEHPBUtWAVEFORMATEX@@H@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::SetFormat, COMDAT
; _this$ = ecx

; 4672 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx

; 4673 :     BOOL                    fSetMixBins                                     = FALSE;

  00009	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _fSetMixBins$[ebp], 0

; 4674 :     DWORD                   dwChannelMask;
; 4675 :     DSMIXBINS               MixBins;
; 4676 :     DSMIXBINVOLUMEPAIR      MixBinVolumePairs[DSMIXBIN_ASSIGNMENT_MAX];
; 4677 :     
; 4678 :     DPF_ENTER();
; 4679 : 
; 4680 :     ASSERT(pwfxFormat);

  00010	68 48 12 00 00	 push	 4680			; 00001248H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@LIGCIMFC@pwfxFormat?$AA@
  0001f	33 c0		 xor	 eax, eax
  00021	83 7d 08 00	 cmp	 DWORD PTR _pwfxFormat$[ebp], 0
  00025	0f 94 c0	 sete	 al
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 4681 : 
; 4682 :     //
; 4683 :     // Save format.  If MixBins were specified by the format, we'll use those
; 4684 :     // assuming no mixbins were passed to us and the voice is 2D.
; 4685 :     //
; 4686 : 
; 4687 :     if(dwChannelMask = CreateInternalFormat(&m_fmt, pwfxFormat))

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 ac	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 c2 0c	 add	 edx, 12			; 0000000cH
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 ?CreateInternalFormat@WaveFormat@DirectSound@@YGKPAUDSWAVEFORMAT@@PBUtWAVEFORMATEX@@@Z ; DirectSound::WaveFormat::CreateInternalFormat
  00041	89 45 b0	 mov	 DWORD PTR _dwChannelMask$[ebp], eax
  00044	83 7d b0 00	 cmp	 DWORD PTR _dwChannelMask$[ebp], 0
  00048	74 7c		 je	 SHORT $L37134

; 4688 :     {
; 4689 :         if(!(m_dwFlags & DSBCAPS_CTRL3D) && fAllowMixBins)

  0004a	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00050	83 e1 10	 and	 ecx, 16			; 00000010H
  00053	85 c9		 test	 ecx, ecx
  00055	75 6f		 jne	 SHORT $L37134
  00057	83 7d 0c 00	 cmp	 DWORD PTR _fAllowMixBins$[ebp], 0
  0005b	74 69		 je	 SHORT $L37134

; 4690 :         {
; 4691 :             MixBins.dwMixBinCount = 0;

  0005d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _MixBins$[ebp], 0

; 4692 :             MixBins.lpMixBinVolumePairs = MixBinVolumePairs;

  00064	8d 55 c0	 lea	 edx, DWORD PTR _MixBinVolumePairs$[ebp]
  00067	89 55 b8	 mov	 DWORD PTR _MixBins$[ebp+4], edx
$L37137:

; 4693 :             
; 4694 :             while(dwChannelMask && (MixBins.dwMixBinCount < NUMELMS(MixBinVolumePairs)))

  0006a	83 7d b0 00	 cmp	 DWORD PTR _dwChannelMask$[ebp], 0
  0006e	74 43		 je	 SHORT $L37138
  00070	83 7d b4 08	 cmp	 DWORD PTR _MixBins$[ebp], 8
  00074	73 3d		 jae	 SHORT $L37138

; 4695 :             {
; 4696 :                 MixBinVolumePairs[MixBins.dwMixBinCount].dwMixBin = lsb(dwChannelMask);

  00076	8b 4d b0	 mov	 ecx, DWORD PTR _dwChannelMask$[ebp]
  00079	e8 00 00 00 00	 call	 ?lsb@Math@DirectSound@@YIII@Z ; DirectSound::Math::lsb
  0007e	8b 4d b4	 mov	 ecx, DWORD PTR _MixBins$[ebp]
  00081	89 44 cd c0	 mov	 DWORD PTR _MixBinVolumePairs$[ebp+ecx*8], eax

; 4697 :                 MixBinVolumePairs[MixBins.dwMixBinCount].lVolume = 0;

  00085	8b 55 b4	 mov	 edx, DWORD PTR _MixBins$[ebp]
  00088	c7 44 d5 c4 00
	00 00 00	 mov	 DWORD PTR _MixBinVolumePairs$[ebp+edx*8+4], 0

; 4698 : 
; 4699 :                 MixBins.dwMixBinCount++;

  00090	8b 45 b4	 mov	 eax, DWORD PTR _MixBins$[ebp]
  00093	83 c0 01	 add	 eax, 1
  00096	89 45 b4	 mov	 DWORD PTR _MixBins$[ebp], eax

; 4700 : 
; 4701 :                 dwChannelMask &= ~(1UL << MixBinVolumePairs[MixBins.dwMixBinCount].dwMixBin);

  00099	8b 4d b4	 mov	 ecx, DWORD PTR _MixBins$[ebp]
  0009c	ba 01 00 00 00	 mov	 edx, 1
  000a1	8b 4c cd c0	 mov	 ecx, DWORD PTR _MixBinVolumePairs$[ebp+ecx*8]
  000a5	d3 e2		 shl	 edx, cl
  000a7	f7 d2		 not	 edx
  000a9	8b 45 b0	 mov	 eax, DWORD PTR _dwChannelMask$[ebp]
  000ac	23 c2		 and	 eax, edx
  000ae	89 45 b0	 mov	 DWORD PTR _dwChannelMask$[ebp], eax

; 4702 :             }

  000b1	eb b7		 jmp	 SHORT $L37137
$L37138:

; 4703 : 
; 4704 :             SetMixBins(&MixBins);

  000b3	8d 4d b4	 lea	 ecx, DWORD PTR _MixBins$[ebp]
  000b6	51		 push	 ecx
  000b7	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::SetMixBins

; 4705 : 
; 4706 :             fSetMixBins = TRUE;

  000bf	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _fSetMixBins$[ebp], 1
$L37134:

; 4707 :         }
; 4708 :     }
; 4709 : 
; 4710 :     //
; 4711 :     // Set default pitch
; 4712 :     //
; 4713 : 
; 4714 :     m_lPitch = XAudioCalculatePitch(m_fmt.nSamplesPerSec);

  000c6	8b 55 ac	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _XAudioCalculatePitch@4
  000d2	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 4715 : 
; 4716 :     DPF_LEAVE(fSetMixBins);
; 4717 : 
; 4718 :     return fSetMixBins;

  000d8	8b 45 bc	 mov	 eax, DWORD PTR _fSetMixBins$[ebp]

; 4719 : }

  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 08 00	 ret	 8
?SetFormat@CDirectSoundVoiceSettings@DirectSound@@QAEHPBUtWAVEFORMATEX@@H@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::SetFormat
DSOUND	ENDS
PUBLIC	??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
;	COMDAT ??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\dsound\dsmath.h
DSOUND_RD	SEGMENT
??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\dsound\dsmath.h', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
DSOUND_RD	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?lsb@Math@DirectSound@@YIII@Z
DSOUND	SEGMENT
_x$ = -4
?lsb@Math@DirectSound@@YIII@Z PROC NEAR			; DirectSound::Math::lsb, COMDAT
; _x$ = ecx

; 154  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 155  :             ASSERT(x);

  00007	68 9b 00 00 00	 push	 155			; 0000009bH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@IMPCONDJ@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01FJMABOPO@x?$AA@
  00016	33 c0		 xor	 eax, eax
  00018	83 7d fc 00	 cmp	 DWORD PTR _x$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 156  :     
; 157  :             __asm
; 158  :             {
; 159  :                 mov     ecx, x

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]

; 160  :                 bsf     eax, ecx

  0002b	0f bc c1	 bsf	 eax, ecx

; 161  :             }
; 162  :         }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?lsb@Math@DirectSound@@YIII@Z ENDP			; DirectSound::Math::lsb
DSOUND	ENDS
PUBLIC	??_C@_0BL@JONOPIML@m_lVolume?5?$DM?$DN?5DSBVOLUME_MAX?$AA@ ; `string'
;	COMDAT ??_C@_0BL@JONOPIML@m_lVolume?5?$DM?$DN?5DSBVOLUME_MAX?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BL@JONOPIML@m_lVolume?5?$DM?$DN?5DSBVOLUME_MAX?$AA@ DB 'm_lVolume '
	DB	'<= DSBVOLUME_MAX', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVolume@CDirectSoundVoiceSettings@DirectSound@@QAEXJ@Z
DSOUND	SEGMENT
_this$ = -4
_lVolume$ = 8
?SetVolume@CDirectSoundVoiceSettings@DirectSound@@QAEXJ@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::SetVolume, COMDAT
; _this$ = ecx

; 4745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4746 :     DPF_ENTER();
; 4747 : 
; 4748 :     //
; 4749 :     // Apply headroom
; 4750 :     //
; 4751 : 
; 4752 :     m_lVolume = lVolume - m_dwHeadroom;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _lVolume$[ebp]
  0000d	2b 48 20	 sub	 ecx, DWORD PTR [eax+32]
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 4753 :     ASSERT(m_lVolume <= DSBVOLUME_MAX);

  00016	68 91 12 00 00	 push	 4753			; 00001291H
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JONOPIML@m_lVolume?5?$DM?$DN?5DSBVOLUME_MAX?$AA@
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	33 c9		 xor	 ecx, ecx
  0002a	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0002e	0f 9f c1	 setg	 cl
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 4754 : 
; 4755 :     DPF_LEAVE_VOID();
; 4756 : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?SetVolume@CDirectSoundVoiceSettings@DirectSound@@QAEXJ@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::SetVolume
DSOUND	ENDS
PUBLIC	??_C@_08IANEAGJN@pMixBins?$AA@			; `string'
PUBLIC	??_C@_0DG@JINADBML@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@ ; `string'
PUBLIC	??_C@_0EH@JCOOJHLK@pMixBins?9?$DOlpMixBinVolumePairs?$FLi?$FN@ ; `string'
PUBLIC	?SetMixBinVolumes@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::SetMixBinVolumes
;	COMDAT ??_C@_08IANEAGJN@pMixBins?$AA@
DSOUND_RD	SEGMENT
??_C@_08IANEAGJN@pMixBins?$AA@ DB 'pMixBins', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@JINADBML@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@
DSOUND_RD	SEGMENT
??_C@_0DG@JINADBML@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@ DB 'pMix'
	DB	'Bins->dwMixBinCount <= NUMELMS(m_alMixBinVolumes)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EH@JCOOJHLK@pMixBins?9?$DOlpMixBinVolumePairs?$FLi?$FN@
DSOUND_RD	SEGMENT
??_C@_0EH@JCOOJHLK@pMixBins?9?$DOlpMixBinVolumePairs?$FLi?$FN@ DB 'pMixBi'
	DB	'ns->lpMixBinVolumePairs[i].dwMixBin < NUMELMS(m_alMixBinVolum'
	DB	'es)', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
_pMixBins$ = 8
?SetMixBinVolumes@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::SetMixBinVolumes, COMDAT
; _this$ = ecx

; 4782 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4783 :     DWORD                   i;
; 4784 :     
; 4785 :     DPF_ENTER();
; 4786 : 
; 4787 :     ASSERT(pMixBins);

  0000a	68 b3 12 00 00	 push	 4787			; 000012b3H
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IANEAGJN@pMixBins?$AA@
  00019	33 c0		 xor	 eax, eax
  0001b	83 7d 08 00	 cmp	 DWORD PTR _pMixBins$[ebp], 0
  0001f	0f 94 c0	 sete	 al
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 4788 :     ASSERT(pMixBins->dwMixBinCount <= NUMELMS(m_alMixBinVolumes));

  0002b	68 b4 12 00 00	 push	 4788			; 000012b4H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@JINADBML@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  0003d	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00042	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00044	1b c0		 sbb	 eax, eax
  00046	f7 d8		 neg	 eax
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004e	83 c4 10	 add	 esp, 16			; 00000010H

; 4789 : 
; 4790 :     for(i = 0; i < pMixBins->dwMixBinCount; i++)

  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00058	eb 09		 jmp	 SHORT $L37151
$L37152:
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0005d	83 c1 01	 add	 ecx, 1
  00060	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L37151:
  00063	8b 55 08	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  00066	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00069	3b 02		 cmp	 eax, DWORD PTR [edx]
  0006b	73 4a		 jae	 SHORT $L37147

; 4791 :     {
; 4792 :         ASSERT(pMixBins->lpMixBinVolumePairs[i].dwMixBin < NUMELMS(m_alMixBinVolumes));

  0006d	68 b8 12 00 00	 push	 4792			; 000012b8H
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@JCOOJHLK@pMixBins?9?$DOlpMixBinVolumePairs?$FLi?$FN@
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  0007f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00082	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00085	83 3c c2 20	 cmp	 DWORD PTR [edx+eax*8], 32 ; 00000020H
  00089	1b c9		 sbb	 ecx, ecx
  0008b	41		 inc	 ecx
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00092	83 c4 10	 add	 esp, 16			; 00000010H

; 4793 :         
; 4794 :         m_alMixBinVolumes[pMixBins->lpMixBinVolumePairs[i].dwMixBin] = pMixBins->lpMixBinVolumePairs[i].lVolume;

  00095	8b 55 08	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  00098	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  0009e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000a4	8b 14 ca	 mov	 edx, DWORD PTR [edx+ecx*8]
  000a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  000ad	8b 44 f0 04	 mov	 eax, DWORD PTR [eax+esi*8+4]
  000b1	89 44 91 30	 mov	 DWORD PTR [ecx+edx*4+48], eax

; 4795 :     }

  000b5	eb a3		 jmp	 SHORT $L37152
$L37147:

; 4796 : 
; 4797 :     DPF_LEAVE_VOID();
; 4798 : }

  000b7	5e		 pop	 esi
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
?SetMixBinVolumes@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::SetMixBinVolumes
DSOUND	ENDS
PUBLIC	?SetHeadroom@CDirectSoundVoiceSettings@DirectSound@@QAEXK@Z ; DirectSound::CDirectSoundVoiceSettings::SetHeadroom
; Function compile flags: /Odt
;	COMDAT ?SetHeadroom@CDirectSoundVoiceSettings@DirectSound@@QAEXK@Z
DSOUND	SEGMENT
_this$ = -8
_lDiff$ = -4
_dwHeadroom$ = 8
?SetHeadroom@CDirectSoundVoiceSettings@DirectSound@@QAEXK@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::SetHeadroom, COMDAT
; _this$ = ecx

; 4824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4825 :     LONG                    lDiff;
; 4826 :     
; 4827 :     DPF_ENTER();
; 4828 : 
; 4829 :     //
; 4830 :     // Calculate the difference between the old headroom and the new one
; 4831 :     //
; 4832 : 
; 4833 :     lDiff = m_dwHeadroom - dwHeadroom;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	2b 4d 08	 sub	 ecx, DWORD PTR _dwHeadroom$[ebp]
  00012	89 4d fc	 mov	 DWORD PTR _lDiff$[ebp], ecx

; 4834 : 
; 4835 :     //
; 4836 :     // Save the new headroom
; 4837 :     //
; 4838 : 
; 4839 :     m_dwHeadroom = dwHeadroom;

  00015	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _dwHeadroom$[ebp]
  0001b	89 42 20	 mov	 DWORD PTR [edx+32], eax

; 4840 :     
; 4841 :     //
; 4842 :     // Update volume
; 4843 :     //
; 4844 : 
; 4845 :     m_lVolume += lDiff;

  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00024	03 55 fc	 add	 edx, DWORD PTR _lDiff$[ebp]
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 4846 :     ASSERT(m_lVolume <= DSBVOLUME_MAX);

  0002d	68 ee 12 00 00	 push	 4846			; 000012eeH
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JONOPIML@m_lVolume?5?$DM?$DN?5DSBVOLUME_MAX?$AA@
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	33 d2		 xor	 edx, edx
  00041	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00045	0f 9f c2	 setg	 dl
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004e	83 c4 10	 add	 esp, 16			; 00000010H

; 4847 : 
; 4848 :     DPF_LEAVE_VOID();
; 4849 : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?SetHeadroom@CDirectSoundVoiceSettings@DirectSound@@QAEXK@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::SetHeadroom
DSOUND	ENDS
PUBLIC	??_C@_0DA@DPOBGDIP@m_fmt?4nChannels?5?1?52?5?$DM?5NUMELMS?$CIap@ ; `string'
PUBLIC	??_C@_0DA@LJNAAHGK@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@ ; `string'
PUBLIC	??_C@_0FF@BAAJMADF@pMixBins?9?$DOlpMixBinVolumePairs?$FLm_@ ; `string'
PUBLIC	??_C@_0DM@GGCHOGPP@m_pMixinBuffer?9?$DOm_pSettings?9?$DOm_d@ ; `string'
PUBLIC	??_C@_0CG@EMNMBDPN@CDirectSoundVoiceSettings?3?3SetMi@ ; `string'
PUBLIC	??_C@_0FJ@BNFDLODI@One?5mixbin?5slot?5must?5be?5kept?5fre@ ; `string'
EXTRN	_DirectSoundDefaultMixBins_Mono:QWORD
EXTRN	_DirectSoundDefaultMixBins_Stereo:QWORD
EXTRN	_DirectSoundDefaultMixBins_4Channel:QWORD
EXTRN	_DirectSoundDefaultMixBins_6Channel:QWORD
EXTRN	_DirectSoundDefaultMixBins_3D:QWORD
;	COMDAT ??_C@_0DA@DPOBGDIP@m_fmt?4nChannels?5?1?52?5?$DM?5NUMELMS?$CIap@
DSOUND_RD	SEGMENT
??_C@_0DA@DPOBGDIP@m_fmt?4nChannels?5?1?52?5?$DM?5NUMELMS?$CIap@ DB 'm_fm'
	DB	't.nChannels / 2 < NUMELMS(apDefaultMixBins)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ?apDefaultMixBins@?1??SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z@4QBQBU4@B
DSOUND_RD	SEGMENT
?apDefaultMixBins@?1??SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z@4QBQBU4@B DD FLAT:_DirectSoundDefaultMixBins_Mono ; `DirectSound::CDirectSoundVoiceSettings::SetMixBins'::`2'::apDefaultMixBins
	DD	FLAT:_DirectSoundDefaultMixBins_Stereo
	DD	FLAT:_DirectSoundDefaultMixBins_4Channel
	DD	FLAT:_DirectSoundDefaultMixBins_6Channel
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@LJNAAHGK@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@
DSOUND_RD	SEGMENT
??_C@_0DA@LJNAAHGK@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@ DB 'pMix'
	DB	'Bins->dwMixBinCount <= NUMELMS(m_abMixBins)', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FF@BAAJMADF@pMixBins?9?$DOlpMixBinVolumePairs?$FLm_@
DSOUND_RD	SEGMENT
??_C@_0FF@BAAJMADF@pMixBins?9?$DOlpMixBinVolumePairs?$FLm_@ DB 'pMixBins-'
	DB	'>lpMixBinVolumePairs[m_dwMixBinCount].dwMixBin < NUMELMS(m_al'
	DB	'MixBinVolumes)', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DM@GGCHOGPP@m_pMixinBuffer?9?$DOm_pSettings?9?$DOm_d@
DSOUND_RD	SEGMENT
??_C@_0DM@GGCHOGPP@m_pMixinBuffer?9?$DOm_pSettings?9?$DOm_d@ DB 'm_pMixin'
	DB	'Buffer->m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@EMNMBDPN@CDirectSoundVoiceSettings?3?3SetMi@
DSOUND_RD	SEGMENT
??_C@_0CG@EMNMBDPN@CDirectSoundVoiceSettings?3?3SetMi@ DB 'CDirectSoundVo'
	DB	'iceSettings::SetMixBins', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FJ@BNFDLODI@One?5mixbin?5slot?5must?5be?5kept?5fre@
DSOUND_RD	SEGMENT
??_C@_0FJ@BNFDLODI@One?5mixbin?5slot?5must?5be?5kept?5fre@ DB 'One mixbin'
	DB	' slot must be kept free for submixing.  The last mixbin speci'
	DB	'fied will be lost', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_this$ = -8
_i$ = -4
_pMixBins$ = 8
?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::SetMixBins, COMDAT
; _this$ = ecx

; 4875 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4876 :     static const LPCDSMIXBINS   apDefaultMixBins[] =
; 4877 :     {
; 4878 :         &DirectSoundDefaultMixBins_Mono,
; 4879 :         &DirectSoundDefaultMixBins_Stereo,
; 4880 :         &DirectSoundDefaultMixBins_4Channel,
; 4881 :         &DirectSoundDefaultMixBins_6Channel,
; 4882 :     };
; 4883 : 
; 4884 :     DWORD                       i;
; 4885 :     
; 4886 :     DPF_ENTER();
; 4887 : 
; 4888 :     //
; 4889 :     // If no mixbins were supplied, use defaults
; 4890 :     //
; 4891 : 
; 4892 :     if(!pMixBins)

  0000a	83 7d 08 00	 cmp	 DWORD PTR _pMixBins$[ebp], 0
  0000e	75 56		 jne	 SHORT $L37167

; 4893 :     {
; 4894 :         if(m_dwFlags & DSBCAPS_CTRL3D)

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00016	83 e1 10	 and	 ecx, 16			; 00000010H
  00019	85 c9		 test	 ecx, ecx
  0001b	74 09		 je	 SHORT $L37168

; 4895 :         {
; 4896 :             pMixBins = &DirectSoundDefaultMixBins_3D;

  0001d	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pMixBins$[ebp], OFFSET FLAT:_DirectSoundDefaultMixBins_3D

; 4897 :         }
; 4898 :         else

  00024	eb 40		 jmp	 SHORT $L37167
$L37168:

; 4899 :         {
; 4900 :             ASSERT(m_fmt.nChannels / 2 < NUMELMS(apDefaultMixBins));

  00026	68 24 13 00 00	 push	 4900			; 00001324H
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@DPOBGDIP@m_fmt?4nChannels?5?1?52?5?$DM?5NUMELMS?$CIap@
  00035	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00038	0f b6 42 0e	 movzx	 eax, BYTE PTR [edx+14]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	83 f8 04	 cmp	 eax, 4
  00044	1b c0		 sbb	 eax, eax
  00046	40		 inc	 eax
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 4901 :             pMixBins = apDefaultMixBins[m_fmt.nChannels / 2];

  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	0f b6 41 0e	 movzx	 eax, BYTE PTR [ecx+14]
  00057	99		 cdq
  00058	2b c2		 sub	 eax, edx
  0005a	d1 f8		 sar	 eax, 1
  0005c	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?apDefaultMixBins@?1??SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z@4QBQBU4@B[eax*4]
  00063	89 55 08	 mov	 DWORD PTR _pMixBins$[ebp], edx
$L37167:

; 4902 :         }
; 4903 :     }
; 4904 : 
; 4905 :     //
; 4906 :     // Set mixbins and volume
; 4907 :     //
; 4908 : 
; 4909 :     ASSERT(pMixBins);

  00066	68 2d 13 00 00	 push	 4909			; 0000132dH
  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IANEAGJN@pMixBins?$AA@
  00075	33 c0		 xor	 eax, eax
  00077	83 7d 08 00	 cmp	 DWORD PTR _pMixBins$[ebp], 0
  0007b	0f 94 c0	 sete	 al
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00084	83 c4 10	 add	 esp, 16			; 00000010H

; 4910 :     ASSERT(pMixBins->dwMixBinCount <= NUMELMS(m_abMixBins));

  00087	68 2e 13 00 00	 push	 4910			; 0000132eH
  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@LJNAAHGK@pMixBins?9?$DOdwMixBinCount?5?$DM?$DN?5NUMEL@
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00099	ba 08 00 00 00	 mov	 edx, 8
  0009e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a0	1b c0		 sbb	 eax, eax
  000a2	f7 d8		 neg	 eax
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000aa	83 c4 10	 add	 esp, 16			; 00000010H

; 4911 :     
; 4912 :     for(m_dwMixBinCount = 0; m_dwMixBinCount < (BYTE)pMixBins->dwMixBinCount; m_dwMixBinCount++)

  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  000b7	eb 0f		 jmp	 SHORT $L37173
$L37174:
  000b9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000bf	83 c0 01	 add	 eax, 1
  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$L37173:
  000c8	8b 55 08	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  000cb	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	39 41 24	 cmp	 DWORD PTR [ecx+36], eax
  000d4	73 71		 jae	 SHORT $L37175

; 4913 :     {
; 4914 :         ASSERT(pMixBins->lpMixBinVolumePairs[m_dwMixBinCount].dwMixBin < NUMELMS(m_alMixBinVolumes));

  000d6	68 32 13 00 00	 push	 4914			; 00001332H
  000db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@BAAJMADF@pMixBins?9?$DOlpMixBinVolumePairs?$FLm_@
  000e5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e8	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  000ee	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f1	83 3c c2 20	 cmp	 DWORD PTR [edx+eax*8], 32 ; 00000020H
  000f5	1b c0		 sbb	 eax, eax
  000f7	40		 inc	 eax
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000fe	83 c4 10	 add	 esp, 16			; 00000010H

; 4915 :         
; 4916 :         m_abMixBins[m_dwMixBinCount] = (BYTE)pMixBins->lpMixBinVolumePairs[m_dwMixBinCount].dwMixBin;

  00101	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00107	8b 45 08	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  0010a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0010d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00110	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00113	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  00116	8a 0c d1	 mov	 cl, BYTE PTR [ecx+edx*8]
  00119	88 4c 06 28	 mov	 BYTE PTR [esi+eax+40], cl

; 4917 :         m_alMixBinVolumes[m_abMixBins[m_dwMixBinCount]] = pMixBins->lpMixBinVolumePairs[m_dwMixBinCount].lVolume;

  0011d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00120	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00126	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00129	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0012f	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  00132	0f b6 4c 0e 28	 movzx	 ecx, BYTE PTR [esi+ecx+40]
  00137	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  0013a	8b 54 c2 04	 mov	 edx, DWORD PTR [edx+eax*8+4]
  0013e	89 54 8e 30	 mov	 DWORD PTR [esi+ecx*4+48], edx

; 4918 :     }

  00142	e9 72 ff ff ff	 jmp	 $L37174
$L37175:

; 4919 : 
; 4920 :     //
; 4921 :     // If we're submixing, the submix bin must be included.  If it wasn't
; 4922 :     // included in the array, we'll add it automatically for "convenience"
; 4923 :     //
; 4924 : 
; 4925 :     if(m_pMixinBuffer)

  00147	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	83 b8 b0 00 00
	00 00		 cmp	 DWORD PTR [eax+176], 0
  00151	0f 84 0a 01 00
	00		 je	 $L37163

; 4926 :     {
; 4927 :         ASSERT(m_pMixinBuffer->m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK);

  00157	68 3f 13 00 00	 push	 4927			; 0000133fH
  0015c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00161	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@GGCHOGPP@m_pMixinBuffer?9?$DOm_pSettings?9?$DOm_d@
  00166	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  0016f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00172	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00175	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  0017b	f7 d9		 neg	 ecx
  0017d	1b c9		 sbb	 ecx, ecx
  0017f	41		 inc	 ecx
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00186	83 c4 10	 add	 esp, 16			; 00000010H

; 4928 : 
; 4929 :         for(i = 0; i < m_dwMixBinCount; i++)

  00189	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00190	eb 09		 jmp	 SHORT $L37180
$L37181:
  00192	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00195	83 c2 01	 add	 edx, 1
  00198	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L37180:
  0019b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001a1	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  001a4	73 25		 jae	 SHORT $L37182

; 4930 :         {
; 4931 :             if(m_abMixBins[i] == (BYTE)m_pMixinBuffer->m_pSettings->m_dwInputMixBin)

  001a6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001a9	03 55 fc	 add	 edx, DWORD PTR _i$[ebp]
  001ac	0f b6 42 28	 movzx	 eax, BYTE PTR [edx+40]
  001b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b3	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  001b9	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  001bc	0f b6 91 d0 00
	00 00		 movzx	 edx, BYTE PTR [ecx+208]
  001c3	3b c2		 cmp	 eax, edx
  001c5	75 02		 jne	 SHORT $L37184

; 4932 :             {
; 4933 :                 break;

  001c7	eb 02		 jmp	 SHORT $L37182
$L37184:

; 4934 :             }
; 4935 :         }

  001c9	eb c7		 jmp	 SHORT $L37181
$L37182:

; 4936 : 
; 4937 :         if(i >= m_dwMixBinCount)

  001cb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001d1	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  001d4	0f 82 87 00 00
	00		 jb	 $L37163

; 4938 :         {
; 4939 :             if(m_dwMixBinCount >= NUMELMS(m_abMixBins))

  001da	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001dd	83 7a 24 08	 cmp	 DWORD PTR [edx+36], 8
  001e1	72 37		 jb	 SHORT $L37186

; 4940 :             {
; 4941 :                 DPF_ERROR("One mixbin slot must be kept free for submixing.  The last mixbin specified will be lost");

  001e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@EMNMBDPN@CDirectSoundVoiceSettings?3?3SetMi@
  001ed	68 4d 13 00 00	 push	 4941			; 0000134dH
  001f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001f7	6a 01		 push	 1
  001f9	6a 09		 push	 9
  001fb	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00200	83 c4 18	 add	 esp, 24			; 00000018H
  00203	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FJ@BNFDLODI@One?5mixbin?5slot?5must?5be?5kept?5fre@
  00208	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0020d	83 c4 04	 add	 esp, 4

; 4942 :                 m_dwMixBinCount = NUMELMS(m_abMixBins) - 1;

  00210	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00213	c7 40 24 07 00
	00 00		 mov	 DWORD PTR [eax+36], 7
$L37186:

; 4943 :             }
; 4944 : 
; 4945 :             m_abMixBins[m_dwMixBinCount] = (BYTE)m_pMixinBuffer->m_pSettings->m_dwInputMixBin;

  0021a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021d	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00223	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00226	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0022c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0022f	8a 80 d0 00 00
	00		 mov	 al, BYTE PTR [eax+208]
  00235	88 44 11 28	 mov	 BYTE PTR [ecx+edx+40], al

; 4946 :             m_alMixBinVolumes[m_abMixBins[m_dwMixBinCount]] = DSBVOLUME_MAX;

  00239	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0023f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00242	0f b6 4c 10 28	 movzx	 ecx, BYTE PTR [eax+edx+40]
  00247	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0024a	c7 44 8a 30 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+48], 0

; 4947 : 
; 4948 :             m_dwMixBinCount++;

  00252	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00255	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00258	83 c1 01	 add	 ecx, 1
  0025b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0025e	89 4a 24	 mov	 DWORD PTR [edx+36], ecx
$L37163:

; 4949 :         }
; 4950 :     }
; 4951 : 
; 4952 :     DPF_LEAVE_VOID();
; 4953 : }

  00261	5e		 pop	 esi
  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c2 04 00	 ret	 4
?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::SetMixBins
DSOUND	ENDS
PUBLIC	??_C@_0CA@BLOGINIO@pOutputBuffer?5?$CB?$DN?5m_pMixinBuffer?$AA@ ; `string'
PUBLIC	??_C@_0BA@OIHPMIHL@m_dwMixBinCount?$AA@		; `string'
PUBLIC	??_C@_0CN@BNCGKMNJ@m_abMixBins?$FLm_dwMixBinCount?5?9?51?$FN@ ; `string'
PUBLIC	?__AddRef@DirectSound@@YGPAVCDirectSoundBuffer@1@PAV21@@Z ; DirectSound::__AddRef
;	COMDAT ??_C@_0CA@BLOGINIO@pOutputBuffer?5?$CB?$DN?5m_pMixinBuffer?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@BLOGINIO@pOutputBuffer?5?$CB?$DN?5m_pMixinBuffer?$AA@ DB 'pOutp'
	DB	'utBuffer != m_pMixinBuffer', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BA@OIHPMIHL@m_dwMixBinCount?$AA@
DSOUND_RD	SEGMENT
??_C@_0BA@OIHPMIHL@m_dwMixBinCount?$AA@ DB 'm_dwMixBinCount', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@BNCGKMNJ@m_abMixBins?$FLm_dwMixBinCount?5?9?51?$FN@
DSOUND_RD	SEGMENT
??_C@_0CN@BNCGKMNJ@m_abMixBins?$FLm_dwMixBinCount?5?9?51?$FN@ DB 'm_abMix'
	DB	'Bins[m_dwMixBinCount - 1] == dwMixBin', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundVoiceSettings@DirectSound@@QAEXPAVCDirectSoundBuffer@2@@Z
DSOUND	SEGMENT
_this$ = -8
_dwMixBin$ = -4
_pOutputBuffer$ = 8
?SetOutputBuffer@CDirectSoundVoiceSettings@DirectSound@@QAEXPAVCDirectSoundBuffer@2@@Z PROC NEAR ; DirectSound::CDirectSoundVoiceSettings::SetOutputBuffer, COMDAT
; _this$ = ecx

; 4980 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4981 :     DWORD                   dwMixBin;
; 4982 :     
; 4983 :     DPF_ENTER();
; 4984 : 
; 4985 :     ASSERT(pOutputBuffer != m_pMixinBuffer);

  00009	68 79 13 00 00	 push	 4985			; 00001379H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BLOGINIO@pOutputBuffer?5?$CB?$DN?5m_pMixinBuffer?$AA@
  00018	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pOutputBuffer$[ebp]
  0001e	2b 88 b0 00 00
	00		 sub	 ecx, DWORD PTR [eax+176]
  00024	f7 d9		 neg	 ecx
  00026	1b c9		 sbb	 ecx, ecx
  00028	41		 inc	 ecx
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 4986 : 
; 4987 :     //
; 4988 :     // Release the old buffer and update the mixbins
; 4989 :     //
; 4990 : 
; 4991 :     if(m_pMixinBuffer)

  00032	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00035	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  0003c	0f 84 ab 00 00
	00		 je	 $L37196

; 4992 :     {
; 4993 :         dwMixBin = m_pMixinBuffer->m_pSettings->m_dwInputMixBin;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  0004b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0004e	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00054	89 45 fc	 mov	 DWORD PTR _dwMixBin$[ebp], eax

; 4994 : 
; 4995 :         ASSERT(m_dwMixBinCount);

  00057	68 83 13 00 00	 push	 4995			; 00001383H
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@OIHPMIHL@m_dwMixBinCount?$AA@
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	33 d2		 xor	 edx, edx
  0006b	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0006f	0f 94 c2	 sete	 dl
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 4996 :         ASSERT(m_abMixBins[m_dwMixBinCount - 1] == dwMixBin);

  0007b	68 84 13 00 00	 push	 4996			; 00001384H
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@BNCGKMNJ@m_abMixBins?$FLm_dwMixBinCount?5?9?51?$FN@
  0008a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00090	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00093	0f b6 44 0a 27	 movzx	 eax, BYTE PTR [edx+ecx+39]
  00098	33 c9		 xor	 ecx, ecx
  0009a	3b 45 fc	 cmp	 eax, DWORD PTR _dwMixBin$[ebp]
  0009d	0f 95 c1	 setne	 cl
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a6	83 c4 10	 add	 esp, 16			; 00000010H

; 4997 : 
; 4998 :         m_dwMixBinCount--;

  000a9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ac	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000af	83 e8 01	 sub	 eax, 1
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 4999 : 
; 5000 :         RELEASE(m_pMixinBuffer);

  000b8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000bb	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  000c2	74 29		 je	 SHORT $L37196
  000c4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  000cd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d0	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  000d6	83 c0 08	 add	 eax, 8
  000d9	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000dc	50		 push	 eax
  000dd	ff 51 08	 call	 DWORD PTR [ecx+8]
  000e0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e3	c7 82 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+176], 0
$L37196:

; 5001 :     }
; 5002 : 
; 5003 :     //
; 5004 :     // Save a reference to the new buffer and update the mixbins.  We're 
; 5005 :     // automatically resetting the mixbin count to 0 before dropping the
; 5006 :     // submix bin in for "convienence."  If you call SetOutputBuffer(NULL)
; 5007 :     // after this, you'll have lost whatever mixbins you used to be assigned
; 5008 :     // to.
; 5009 :     //
; 5010 : 
; 5011 :     if(m_pMixinBuffer = ADDREF(pOutputBuffer))

  000ed	8b 45 08	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCDirectSoundBuffer@1@PAV21@@Z ; DirectSound::__AddRef
  000f6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax
  000ff	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00102	83 ba b0 00 00
	00 00		 cmp	 DWORD PTR [edx+176], 0
  00109	74 5a		 je	 SHORT $L37193

; 5012 :     {
; 5013 :         dwMixBin = m_pMixinBuffer->m_pSettings->m_dwInputMixBin;

  0010b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	8b 88 b0 00 00
	00		 mov	 ecx, DWORD PTR [eax+176]
  00114	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00117	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  0011d	89 45 fc	 mov	 DWORD PTR _dwMixBin$[ebp], eax

; 5014 : 
; 5015 :         ASSERT(m_pMixinBuffer->m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK);

  00120	68 97 13 00 00	 push	 5015			; 00001397H
  00125	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@GGCHOGPP@m_pMixinBuffer?9?$DOm_pSettings?9?$DOm_d@
  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	8b 91 b0 00 00
	00		 mov	 edx, DWORD PTR [ecx+176]
  00138	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0013b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0013e	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00144	f7 d9		 neg	 ecx
  00146	1b c9		 sbb	 ecx, ecx
  00148	41		 inc	 ecx
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0014f	83 c4 10	 add	 esp, 16			; 00000010H

; 5016 : 
; 5017 :         m_dwMixBinCount = 1;

  00152	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00155	c7 42 24 01 00
	00 00		 mov	 DWORD PTR [edx+36], 1

; 5018 :         m_abMixBins[0] = (BYTE)dwMixBin;

  0015c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0015f	8a 4d fc	 mov	 cl, BYTE PTR _dwMixBin$[ebp]
  00162	88 48 28	 mov	 BYTE PTR [eax+40], cl
$L37193:

; 5019 :     }
; 5020 : 
; 5021 :     DPF_LEAVE_VOID();
; 5022 : }

  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c2 04 00	 ret	 4
?SetOutputBuffer@CDirectSoundVoiceSettings@DirectSound@@QAEXPAVCDirectSoundBuffer@2@@Z ENDP ; DirectSound::CDirectSoundVoiceSettings::SetOutputBuffer
DSOUND	ENDS
PUBLIC	??0CDirectSoundVoice@DirectSound@@QAE@PAVCDirectSound@1@@Z ; DirectSound::CDirectSoundVoice::CDirectSoundVoice
PUBLIC	??_7CDirectSoundVoice@DirectSound@@6B@		; DirectSound::CDirectSoundVoice::`vftable'
PUBLIC	??_GCDirectSoundVoice@DirectSound@@UAEPAXI@Z	; DirectSound::CDirectSoundVoice::`scalar deleting destructor'
EXTRN	??_ECDirectSoundVoice@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CDirectSoundVoice::`vector deleting destructor'
;	COMDAT ??_7CDirectSoundVoice@DirectSound@@6B@
CONST	SEGMENT
??_7CDirectSoundVoice@DirectSound@@6B@ DD FLAT:??_ECDirectSoundVoice@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundVoice::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSoundVoice@DirectSound@@QAE@PAVCDirectSound@1@@Z
DSOUND	SEGMENT
_this$ = -4
_pDirectSound$ = 8
??0CDirectSoundVoice@DirectSound@@QAE@PAVCDirectSound@1@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::CDirectSoundVoice, COMDAT
; _this$ = ecx

; 5047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundVoice@DirectSound@@6B@

; 5048 :     DPF_ENTER();
; 5049 : 
; 5050 :     //
; 5051 :     // Initialize defaults
; 5052 :     //
; 5053 : 
; 5054 :     InitializeListHead(&m_le3dVoice);

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 14	 add	 ecx, 20			; 00000014H
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 5055 : 
; 5056 :     //
; 5057 :     // Save a reference to the DirectSound object
; 5058 :     //
; 5059 : 
; 5060 :     m_pDirectSound = ADDREF(pDirectSound);

  00032	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCDirectSound@1@PAV21@@Z ; DirectSound::__AddRef
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 5061 : 
; 5062 :     DPF_LEAVE_VOID();
; 5063 : }

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??0CDirectSoundVoice@DirectSound@@QAE@PAVCDirectSound@1@@Z ENDP ; DirectSound::CDirectSoundVoice::CDirectSoundVoice
DSOUND	ENDS
PUBLIC	??1CDirectSoundVoice@DirectSound@@UAE@XZ	; DirectSound::CDirectSoundVoice::~CDirectSoundVoice
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSoundVoice@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSoundVoice@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CDirectSoundVoice::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSoundVoice@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundVoice::~CDirectSoundVoice
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L37216
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L37216:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCDirectSoundVoice@DirectSound@@UAEPAXI@Z ENDP	; DirectSound::CDirectSoundVoice::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
; Function compile flags: /Odt
;	COMDAT ??1CDirectSoundVoice@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CDirectSoundVoice@DirectSound@@UAE@XZ PROC NEAR	; DirectSound::CDirectSoundVoice::~CDirectSoundVoice, COMDAT
; _this$ = ecx

; 5088 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundVoice@DirectSound@@6B@

; 5089 :     DPF_ENTER();
; 5090 : 
; 5091 :     //
; 5092 :     // Remove ourselves from the 3D list
; 5093 :     //
; 5094 : 
; 5095 :     RemoveEntryList(&m_le3dVoice);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 14	 add	 ecx, 20			; 00000014H
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 5096 : 
; 5097 :     //
; 5098 :     // Release the voice implementation object
; 5099 :     //
; 5100 : 
; 5101 :     RELEASE(m_pVoice);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00023	74 1c		 je	 SHORT $L37221
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00031	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00033	50		 push	 eax
  00034	ff 51 08	 call	 DWORD PTR [ecx+8]
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
$L37221:

; 5102 : 
; 5103 :     //
; 5104 :     // Release the shared settings object
; 5105 :     //
; 5106 : 
; 5107 :     RELEASE(m_pSettings);

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00048	74 1c		 je	 SHORT $L37222
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00056	8b 12		 mov	 edx, DWORD PTR [edx]
  00058	51		 push	 ecx
  00059	ff 52 08	 call	 DWORD PTR [edx+8]
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$L37222:

; 5108 : 
; 5109 :     //
; 5110 :     // Release the reference to the DirectSound object
; 5111 :     //
; 5112 : 
; 5113 :     RELEASE(m_pDirectSound);

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0006d	74 20		 je	 SHORT $L37220
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0007b	83 c2 08	 add	 edx, 8
  0007e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00081	52		 push	 edx
  00082	ff 50 08	 call	 DWORD PTR [eax+8]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$L37220:

; 5114 : 
; 5115 :     DPF_LEAVE_VOID();
; 5116 : }

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
??1CDirectSoundVoice@DirectSound@@UAE@XZ ENDP		; DirectSound::CDirectSoundVoice::~CDirectSoundVoice
DSOUND	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND_RD	SEGMENT
??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
DSOUND	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  00020	74 2c		 je	 SHORT $L30046

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L30046:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
DSOUND	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
DSOUND_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
DSOUND_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
DSOUND_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
DSOUND	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L30006

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L30005
$L30006:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L30010
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L30009
$L30010:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L30005
$L30009:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L30014
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L30013
$L30014:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L30016
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L30015
$L30016:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L30015:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L30005
$L30013:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L30019

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L30020

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L30020:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L30005
$L30019:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L30005

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L30005

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L30005:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
DSOUND	ENDS
PUBLIC	?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z		; InsertTailList
PUBLIC	?__AddRef@DirectSound@@YGPAVCMcpxVoiceClient@1@PAV21@@Z ; DirectSound::__AddRef
PUBLIC	?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z ; DirectSound::__AddRef
PUBLIC	?Initialize@CDirectSoundVoice@DirectSound@@QAGXPAVCMcpxVoiceClient@2@PAVCDirectSoundVoiceSettings@2@@Z ; DirectSound::CDirectSoundVoice::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT ?Initialize@CDirectSoundVoice@DirectSound@@QAGXPAVCMcpxVoiceClient@2@PAVCDirectSoundVoiceSettings@2@@Z
DSOUND	SEGMENT
_this$ = 8
_pVoice$ = 12
_pSettings$ = 16
?Initialize@CDirectSoundVoice@DirectSound@@QAGXPAVCMcpxVoiceClient@2@PAVCDirectSoundVoiceSettings@2@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::Initialize, COMDAT

; 5144 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5145 :     DPF_ENTER();
; 5146 : 
; 5147 :     //
; 5148 :     // Just save a reference to each
; 5149 :     //
; 5150 : 
; 5151 :     m_pVoice = ADDREF(pVoice);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pVoice$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCMcpxVoiceClient@1@PAV21@@Z ; DirectSound::__AddRef
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 5152 :     m_pSettings = ADDREF(pSettings);

  00012	8b 55 10	 mov	 edx, DWORD PTR _pSettings$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z ; DirectSound::__AddRef
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 5153 : 
; 5154 :     //
; 5155 :     // If we're a 3D voice, add ourselves to the 3D voice list
; 5156 :     //
; 5157 : 
; 5158 :     if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  00021	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00027	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002a	83 e1 10	 and	 ecx, 16			; 00000010H
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 16		 je	 SHORT $L37228

; 5159 :     {
; 5160 :         InsertTailList(&m_pDirectSound->m_lst3dVoices, &m_le3dVoice);

  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	83 c2 14	 add	 edx, 20			; 00000014H
  00037	52		 push	 edx
  00038	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003e	83 c1 18	 add	 ecx, 24			; 00000018H
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList
$L37228:

; 5161 :     }
; 5162 : 
; 5163 :     DPF_LEAVE_VOID();
; 5164 : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?Initialize@CDirectSoundVoice@DirectSound@@QAGXPAVCMcpxVoiceClient@2@PAVCDirectSoundVoiceSettings@2@@Z ENDP ; DirectSound::CDirectSoundVoice::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
DSOUND	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
DSOUND	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailList, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 75		 push	 117			; 00000075H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 118  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 76		 push	 118			; 00000076H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 119  : 
; 120  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 121  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 122  :     
; 123  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 124  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 125  : 
; 126  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7e		 push	 126			; 0000007eH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@HLNMLIHP@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 127  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ENDP		; InsertTailList
DSOUND	ENDS
PUBLIC	??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@ ; `string'
PUBLIC	??_C@_0CC@PCLFAJDB@Failed?5to?5specify?5a?5buffer?5forma@ ; `string'
PUBLIC	??_C@_0BF@MLGENCEK@Invalid?5voice?5format?$AA@	; `string'
PUBLIC	??_C@_0BH@DNJAKINH@3D?5voices?5must?5be?5mono?$AA@ ; `string'
PUBLIC	??_C@_0CO@NOELHIK@Can?8t?5call?5SetFormat?5on?5MIXIN?5or@ ; `string'
EXTRN	?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::SetMixBins
EXTRN	?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::SetPitch
EXTRN	?IsValidFormat@WaveFormat@DirectSound@@YGHPBUtWAVEFORMATEX@@@Z:NEAR ; DirectSound::WaveFormat::IsValidFormat
;	COMDAT ??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@ DB 'CDirectSoundVo'
	DB	'ice::SetFormat', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@PCLFAJDB@Failed?5to?5specify?5a?5buffer?5forma@
DSOUND_RD	SEGMENT
??_C@_0CC@PCLFAJDB@Failed?5to?5specify?5a?5buffer?5forma@ DB 'Failed to s'
	DB	'pecify a buffer format', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@MLGENCEK@Invalid?5voice?5format?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@MLGENCEK@Invalid?5voice?5format?$AA@ DB 'Invalid voice format', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@DNJAKINH@3D?5voices?5must?5be?5mono?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@DNJAKINH@3D?5voices?5must?5be?5mono?$AA@ DB '3D voices must be '
	DB	'mono', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@NOELHIK@Can?8t?5call?5SetFormat?5on?5MIXIN?5or@
DSOUND_RD	SEGMENT
??_C@_0CO@NOELHIK@Can?8t?5call?5SetFormat?5on?5MIXIN?5or@ DB 'Can''t call'
	DB	' SetFormat on MIXIN or FXIN buffers', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFormat@CDirectSoundVoice@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z
DSOUND	SEGMENT
_hr$ = -8
_fSetMixBins$ = -4
_this$ = 8
_pwfxFormat$ = 12
?SetFormat@CDirectSoundVoice@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetFormat, COMDAT

; 5190 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5191 :     BOOL                    fSetMixBins;
; 5192 :     HRESULT                 hr;
; 5193 : 
; 5194 :     DPF_ENTER();
; 5195 : 
; 5196 : #ifdef VALIDATE_PARAMETERS
; 5197 : 
; 5198 :     if(!pwfxFormat)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pwfxFormat$[ebp], 0
  0000a	75 2d		 jne	 SHORT $L37244

; 5199 :     {
; 5200 :         DPF_ERROR("Failed to specify a buffer format");

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@
  00016	68 50 14 00 00	 push	 5200			; 00001450H
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00020	6a 01		 push	 1
  00022	6a 09		 push	 9
  00024	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PCLFAJDB@Failed?5to?5specify?5a?5buffer?5forma@
  00031	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00036	83 c4 04	 add	 esp, 4
$L37244:

; 5201 :     }
; 5202 : 
; 5203 :     if(!IsValidFormat(pwfxFormat))

  00039	8b 45 0c	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?IsValidFormat@WaveFormat@DirectSound@@YGHPBUtWAVEFORMATEX@@@Z ; DirectSound::WaveFormat::IsValidFormat
  00042	85 c0		 test	 eax, eax
  00044	75 2d		 jne	 SHORT $L37247

; 5204 :     {
; 5205 :         DPF_ERROR("Invalid voice format");

  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@
  00050	68 55 14 00 00	 push	 5205			; 00001455H
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005a	6a 01		 push	 1
  0005c	6a 09		 push	 9
  0005e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00063	83 c4 18	 add	 esp, 24			; 00000018H
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@MLGENCEK@Invalid?5voice?5format?$AA@
  0006b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00070	83 c4 04	 add	 esp, 4
$L37247:

; 5206 :     }
; 5207 : 
; 5208 :     if((m_pSettings->m_dwFlags & DSBCAPS_CTRL3D) && (1 != pwfxFormat->nChannels))

  00073	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00079	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0007c	83 e0 10	 and	 eax, 16			; 00000010H
  0007f	85 c0		 test	 eax, eax
  00081	74 39		 je	 SHORT $L37249
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00086	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  0008a	83 fa 01	 cmp	 edx, 1
  0008d	74 2d		 je	 SHORT $L37249

; 5209 :     {
; 5210 :         DPF_ERROR("3D voices must be mono");

  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@
  00099	68 5a 14 00 00	 push	 5210			; 0000145aH
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a3	6a 01		 push	 1
  000a5	6a 09		 push	 9
  000a7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ac	83 c4 18	 add	 esp, 24			; 00000018H
  000af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@DNJAKINH@3D?5voices?5must?5be?5mono?$AA@
  000b4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b9	83 c4 04	 add	 esp, 4
$L37249:

; 5211 :     }
; 5212 : 
; 5213 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000bc	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000c5	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  000cb	85 d2		 test	 edx, edx
  000cd	74 2d		 je	 SHORT $L37251

; 5214 :     {
; 5215 :         DPF_ERROR("Can't call SetFormat on MIXIN or FXIN buffers");

  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@BIDNGHJN@CDirectSoundVoice?3?3SetFormat?$AA@
  000d9	68 5f 14 00 00	 push	 5215			; 0000145fH
  000de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e3	6a 01		 push	 1
  000e5	6a 09		 push	 9
  000e7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ec	83 c4 18	 add	 esp, 24			; 00000018H
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@NOELHIK@Can?8t?5call?5SetFormat?5on?5MIXIN?5or@
  000f4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f9	83 c4 04	 add	 esp, 4
$L37251:

; 5216 :     }
; 5217 : 
; 5218 : #endif // VALIDATE_PARAMETERS
; 5219 : 
; 5220 :     //
; 5221 :     // Update the settings object
; 5222 :     //
; 5223 : 
; 5224 :     fSetMixBins = m_pSettings->SetFormat(pwfxFormat, TRUE);

  000fc	6a 01		 push	 1
  000fe	8b 45 0c	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00101	50		 push	 eax
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00108	e8 00 00 00 00	 call	 ?SetFormat@CDirectSoundVoiceSettings@DirectSound@@QAEHPBUtWAVEFORMATEX@@H@Z ; DirectSound::CDirectSoundVoiceSettings::SetFormat
  0010d	89 45 fc	 mov	 DWORD PTR _fSetMixBins$[ebp], eax

; 5225 : 
; 5226 :     //
; 5227 :     // Update the implementation object
; 5228 :     //
; 5229 : 
; 5230 :     hr = m_pVoice->SetFormat();

  00110	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00113	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0011c	8b 10		 mov	 edx, DWORD PTR [eax]
  0011e	ff 52 10	 call	 DWORD PTR [edx+16]
  00121	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 5231 : 
; 5232 :     //
; 5233 :     // In some cases, the mixbins are defined by the format structure
; 5234 :     //
; 5235 :     
; 5236 :     if(SUCCEEDED(hr) && fSetMixBins)

  00124	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00128	7c 14		 jl	 SHORT $L37254
  0012a	83 7d fc 00	 cmp	 DWORD PTR _fSetMixBins$[ebp], 0
  0012e	74 0e		 je	 SHORT $L37254

; 5237 :     {
; 5238 :         hr = m_pVoice->SetMixBins();

  00130	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00133	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00136	e8 00 00 00 00	 call	 ?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetMixBins
  0013b	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37254:

; 5239 :     }
; 5240 : 
; 5241 :     //
; 5242 :     // Make sure the pitch is updated as well
; 5243 :     //
; 5244 : 
; 5245 :     if(SUCCEEDED(hr))

  0013e	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00142	7c 0b		 jl	 SHORT $L37256

; 5246 :     {
; 5247 :         m_pVoice->SetPitch();

  00144	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0014a	e8 00 00 00 00	 call	 ?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetPitch
$L37256:

; 5248 :     }
; 5249 :     
; 5250 :     DPF_LEAVE_HRESULT(hr);
; 5251 : 
; 5252 :     return hr;

  0014f	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 5253 : }

  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 08 00	 ret	 8
?SetFormat@CDirectSoundVoice@DirectSound@@QAGJPBUtWAVEFORMATEX@@@Z ENDP ; DirectSound::CDirectSoundVoice::SetFormat
DSOUND	ENDS
PUBLIC	??_C@_0CA@KGMCDICN@CDirectSoundVoice?3?3SetFrequency?$AA@ ; `string'
;	COMDAT ??_C@_0CA@KGMCDICN@CDirectSoundVoice?3?3SetFrequency?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@KGMCDICN@CDirectSoundVoice?3?3SetFrequency?$AA@ DB 'CDirectSoun'
	DB	'dVoice::SetFrequency', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFrequency@CDirectSoundVoice@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
_hr$ = -4
_this$ = 8
_dwFrequency$ = 12
?SetFrequency@CDirectSoundVoice@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetFrequency, COMDAT

; 5279 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5280 :     HRESULT                 hr;
; 5281 : 
; 5282 :     DPF_ENTER();
; 5283 : 
; 5284 : #ifdef VALIDATE_PARAMETERS
; 5285 : 
; 5286 :     if(dwFrequency)

  00004	83 7d 0c 00	 cmp	 DWORD PTR _dwFrequency$[ebp], 0
  00008	74 3f		 je	 SHORT $L37262

; 5287 :     {
; 5288 :         if((dwFrequency < DSBFREQUENCY_MIN) || (dwFrequency > DSBFREQUENCY_MAX))

  0000a	81 7d 0c bc 00
	00 00		 cmp	 DWORD PTR _dwFrequency$[ebp], 188 ; 000000bcH
  00011	72 09		 jb	 SHORT $L37264
  00013	81 7d 0c ef ed
	02 00		 cmp	 DWORD PTR _dwFrequency$[ebp], 191983 ; 0002edefH
  0001a	76 2d		 jbe	 SHORT $L37262
$L37264:

; 5289 :         {
; 5290 :             DPF_ERROR("Invalid frequency value");

  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@KGMCDICN@CDirectSoundVoice?3?3SetFrequency?$AA@
  00026	68 aa 14 00 00	 push	 5290			; 000014aaH
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00030	6a 01		 push	 1
  00032	6a 09		 push	 9
  00034	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00039	83 c4 18	 add	 esp, 24			; 00000018H
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IPPIOPAN@Invalid?5frequency?5value?$AA@
  00041	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00046	83 c4 04	 add	 esp, 4
$L37262:

; 5291 :         }
; 5292 :     }
; 5293 : 
; 5294 : #endif // VALIDATE_PARAMETERS
; 5295 : 
; 5296 :     //
; 5297 :     // Convert frequency to pitch.  0 frequency means use the default.
; 5298 :     //
; 5299 : 
; 5300 :     if(!dwFrequency)

  00049	83 7d 0c 00	 cmp	 DWORD PTR _dwFrequency$[ebp], 0
  0004d	75 0c		 jne	 SHORT $L37266

; 5301 :     {
; 5302 :         dwFrequency = m_pSettings->m_fmt.nSamplesPerSec;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00055	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00058	89 55 0c	 mov	 DWORD PTR _dwFrequency$[ebp], edx
$L37266:

; 5303 :     }
; 5304 : 
; 5305 :     hr = SetPitch(XAudioCalculatePitch(dwFrequency));

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _XAudioCalculatePitch@4
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z ; DirectSound::CDirectSoundVoice::SetPitch
  0006e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 5306 : 
; 5307 :     DPF_LEAVE_HRESULT(hr);
; 5308 : 
; 5309 :     return hr;

  00071	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 5310 : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
?SetFrequency@CDirectSoundVoice@DirectSound@@QAGJK@Z ENDP ; DirectSound::CDirectSoundVoice::SetFrequency
DSOUND	ENDS
PUBLIC	??_C@_0BM@HJLAICEL@CDirectSoundVoice?3?3SetPitch?$AA@ ; `string'
PUBLIC	??_C@_0BE@GGKNKICF@Invalid?5pitch?5value?$AA@	; `string'
;	COMDAT ??_C@_0BM@HJLAICEL@CDirectSoundVoice?3?3SetPitch?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@HJLAICEL@CDirectSoundVoice?3?3SetPitch?$AA@ DB 'CDirectSoundVoi'
	DB	'ce::SetPitch', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@GGKNKICF@Invalid?5pitch?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@GGKNKICF@Invalid?5pitch?5value?$AA@ DB 'Invalid pitch value', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT
_hr$ = -4
_this$ = 8
_lPitch$ = 12
?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetPitch, COMDAT

; 5336 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5337 :     HRESULT                 hr;
; 5338 : 
; 5339 :     DPF_ENTER();
; 5340 : 
; 5341 : #ifdef VALIDATE_PARAMETERS
; 5342 : 
; 5343 :     if((lPitch < DSBPITCH_MIN) || (lPitch > DSBPITCH_MAX))

  00004	81 7d 0c 01 80
	ff ff		 cmp	 DWORD PTR _lPitch$[ebp], -32767 ; ffff8001H
  0000b	7c 09		 jl	 SHORT $L37273
  0000d	81 7d 0c ff 1f
	00 00		 cmp	 DWORD PTR _lPitch$[ebp], 8191 ; 00001fffH
  00014	7e 2d		 jle	 SHORT $L37272
$L37273:

; 5344 :     {
; 5345 :         DPF_ERROR("Invalid pitch value");

  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@HJLAICEL@CDirectSoundVoice?3?3SetPitch?$AA@
  00020	68 e1 14 00 00	 push	 5345			; 000014e1H
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002a	6a 01		 push	 1
  0002c	6a 09		 push	 9
  0002e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00033	83 c4 18	 add	 esp, 24			; 00000018H
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@GGKNKICF@Invalid?5pitch?5value?$AA@
  0003b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00040	83 c4 04	 add	 esp, 4
$L37272:

; 5346 :     }
; 5347 : 
; 5348 : #endif // VALIDATE_PARAMETERS
; 5349 : 
; 5350 :     //
; 5351 :     // Update the settings object
; 5352 :     //
; 5353 : 
; 5354 :     m_pSettings->m_lPitch = lPitch;

  00043	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00049	8b 55 0c	 mov	 edx, DWORD PTR _lPitch$[ebp]
  0004c	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 5355 : 
; 5356 :     //
; 5357 :     // Notify the implementation object of the change
; 5358 :     //
; 5359 : 
; 5360 :     hr = m_pVoice->SetPitch();

  0004f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00055	e8 00 00 00 00	 call	 ?SetPitch@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetPitch
  0005a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 5361 : 
; 5362 :     DPF_LEAVE_HRESULT(hr);
; 5363 : 
; 5364 :     return hr;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 5365 : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
?SetPitch@CDirectSoundVoice@DirectSound@@QAGJJ@Z ENDP	; DirectSound::CDirectSoundVoice::SetPitch
DSOUND	ENDS
PUBLIC	??_C@_0BN@GPFNHHLE@CDirectSoundVoice?3?3SetVolume?$AA@ ; `string'
PUBLIC	??_C@_0BL@JLPGLIJE@Volume?5value?5out?9of?9bounds?$AA@ ; `string'
EXTRN	?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::SetVolume
;	COMDAT ??_C@_0BN@GPFNHHLE@CDirectSoundVoice?3?3SetVolume?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@GPFNHHLE@CDirectSoundVoice?3?3SetVolume?$AA@ DB 'CDirectSoundVo'
	DB	'ice::SetVolume', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@JLPGLIJE@Volume?5value?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@JLPGLIJE@Volume?5value?5out?9of?9bounds?$AA@ DB 'Volume value o'
	DB	'ut-of-bounds', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVolume@CDirectSoundVoice@DirectSound@@QAGJJ@Z
DSOUND	SEGMENT
_hr$ = -4
_this$ = 8
_lVolume$ = 12
?SetVolume@CDirectSoundVoice@DirectSound@@QAGJJ@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetVolume, COMDAT

; 5391 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5392 :     HRESULT                 hr;
; 5393 : 
; 5394 :     DPF_ENTER();
; 5395 : 
; 5396 : #ifdef VALIDATE_PARAMETERS
; 5397 : 
; 5398 :     if((lVolume < DSBVOLUME_MIN) || (lVolume > DSBVOLUME_MAX))

  00004	81 7d 0c f0 d8
	ff ff		 cmp	 DWORD PTR _lVolume$[ebp], -10000 ; ffffd8f0H
  0000b	7c 06		 jl	 SHORT $L37282
  0000d	83 7d 0c 00	 cmp	 DWORD PTR _lVolume$[ebp], 0
  00011	7e 2d		 jle	 SHORT $L37281
$L37282:

; 5399 :     {
; 5400 :         DPF_ERROR("Volume value out-of-bounds");

  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GPFNHHLE@CDirectSoundVoice?3?3SetVolume?$AA@
  0001d	68 18 15 00 00	 push	 5400			; 00001518H
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00027	6a 01		 push	 1
  00029	6a 09		 push	 9
  0002b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00030	83 c4 18	 add	 esp, 24			; 00000018H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@JLPGLIJE@Volume?5value?5out?9of?9bounds?$AA@
  00038	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003d	83 c4 04	 add	 esp, 4
$L37281:

; 5401 :     }
; 5402 : 
; 5403 : #endif // VALIDATE_PARAMETERS
; 5404 : 
; 5405 :     //
; 5406 :     // Save the volume to the settings
; 5407 :     //
; 5408 : 
; 5409 :     m_pSettings->SetVolume(lVolume);

  00040	8b 45 0c	 mov	 eax, DWORD PTR _lVolume$[ebp]
  00043	50		 push	 eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004a	e8 00 00 00 00	 call	 ?SetVolume@CDirectSoundVoiceSettings@DirectSound@@QAEXJ@Z ; DirectSound::CDirectSoundVoiceSettings::SetVolume

; 5410 :     
; 5411 :     //
; 5412 :     // Notify the implementation object
; 5413 :     //
; 5414 : 
; 5415 :     hr = m_pVoice->SetVolume();

  0004f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00055	e8 00 00 00 00	 call	 ?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetVolume
  0005a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 5416 : 
; 5417 :     DPF_LEAVE_HRESULT(hr);
; 5418 : 
; 5419 :     return hr;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 5420 : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
?SetVolume@CDirectSoundVoice@DirectSound@@QAGJJ@Z ENDP	; DirectSound::CDirectSoundVoice::SetVolume
DSOUND	ENDS
PUBLIC	??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@ ; `string'
PUBLIC	??_C@_0BN@PNGPHNPI@LFO?5description?5not?5provided?$AA@ ; `string'
PUBLIC	??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@ ; `string'
PUBLIC	??_C@_0BI@FMFOPPHB@Invalid?5LFO?5delay?5value?$AA@ ; `string'
PUBLIC	??_C@_0BI@BFFHNCNB@Invalid?5LFO?5delta?5value?$AA@ ; `string'
PUBLIC	??_C@_0CD@DDJCPJHN@Invalid?5LFO?5pitch?5modulation?5val@ ; `string'
PUBLIC	??_C@_0CA@NLOIDDNF@Invalid?5LFO?5filter?5cutoff?5value?$AA@ ; `string'
PUBLIC	??_C@_0CH@BNNNECFA@Invalid?5LFO?5amplitude?5modulation@ ; `string'
PUBLIC	??_C@_0EN@CDBMGOGN@The?5pitch?5LFO?5doesn?5not?5support?5@ ; `string'
EXTRN	?SetLFO@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSLFODESC@@@Z:NEAR ; DirectSound::CMcpxVoiceClient::SetLFO
;	COMDAT ??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@ DB 'CDirectSoundVoice'
	DB	'::SetLFO', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@PNGPHNPI@LFO?5description?5not?5provided?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@PNGPHNPI@LFO?5description?5not?5provided?$AA@ DB 'LFO descripti'
	DB	'on not provided', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@ DB 'Invalid LFO identifi'
	DB	'er', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@FMFOPPHB@Invalid?5LFO?5delay?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@FMFOPPHB@Invalid?5LFO?5delay?5value?$AA@ DB 'Invalid LFO delay '
	DB	'value', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@BFFHNCNB@Invalid?5LFO?5delta?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@BFFHNCNB@Invalid?5LFO?5delta?5value?$AA@ DB 'Invalid LFO delta '
	DB	'value', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@DDJCPJHN@Invalid?5LFO?5pitch?5modulation?5val@
DSOUND_RD	SEGMENT
??_C@_0CD@DDJCPJHN@Invalid?5LFO?5pitch?5modulation?5val@ DB 'Invalid LFO '
	DB	'pitch modulation value', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@NLOIDDNF@Invalid?5LFO?5filter?5cutoff?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@NLOIDDNF@Invalid?5LFO?5filter?5cutoff?5value?$AA@ DB 'Invalid L'
	DB	'FO filter cutoff value', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@BNNNECFA@Invalid?5LFO?5amplitude?5modulation@
DSOUND_RD	SEGMENT
??_C@_0CH@BNNNECFA@Invalid?5LFO?5amplitude?5modulation@ DB 'Invalid LFO a'
	DB	'mplitude modulation value', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EN@CDBMGOGN@The?5pitch?5LFO?5doesn?5not?5support?5@
DSOUND_RD	SEGMENT
??_C@_0EN@CDBMGOGN@The?5pitch?5LFO?5doesn?5not?5support?5@ DB 'The pitch '
	DB	'LFO doesn not support filter cut-off range or amplitude modul'
	DB	'ation', 00H					; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetLFO@CDirectSoundVoice@DirectSound@@QAGJPBU_DSLFODESC@@@Z
DSOUND	SEGMENT
_hr$ = -4
_this$ = 8
_pLfo$ = 12
?SetLFO@CDirectSoundVoice@DirectSound@@QAGJPBU_DSLFODESC@@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetLFO, COMDAT

; 5446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5447 :     HRESULT                 hr;
; 5448 : 
; 5449 :     DPF_ENTER();
; 5450 : 
; 5451 : #ifdef VALIDATE_PARAMETERS
; 5452 : 
; 5453 :     if(!pLfo)

  00004	83 7d 0c 00	 cmp	 DWORD PTR _pLfo$[ebp], 0
  00008	75 2d		 jne	 SHORT $L37290

; 5454 :     {
; 5455 :         DPF_ERROR("LFO description not provided");

  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  00014	68 4f 15 00 00	 push	 5455			; 0000154fH
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@PNGPHNPI@LFO?5description?5not?5provided?$AA@
  0002f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00034	83 c4 04	 add	 esp, 4
$L37290:

; 5456 :     }
; 5457 : 
; 5458 :     if((pLfo->dwLFO < DSLFO_FIRST) && (pLfo->dwLFO > DSLFO_LAST))

  00037	8b 45 0c	 mov	 eax, DWORD PTR _pLfo$[ebp]
  0003a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003d	73 35		 jae	 SHORT $L37293
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  00042	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00045	76 2d		 jbe	 SHORT $L37293

; 5459 :     {
; 5460 :         DPF_ERROR("Invalid LFO identifier");

  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  00051	68 54 15 00 00	 push	 5460			; 00001554H
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005b	6a 01		 push	 1
  0005d	6a 09		 push	 9
  0005f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00064	83 c4 18	 add	 esp, 24			; 00000018H
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@CNNMEKOD@Invalid?5LFO?5identifier?$AA@
  0006c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00071	83 c4 04	 add	 esp, 4
$L37293:

; 5461 :     }
; 5462 : 
; 5463 :     if((pLfo->dwDelay < DSLFO_DELAY_MIN) || (pLfo->dwDelay > DSLFO_DELAY_MAX))

  00074	8b 55 0c	 mov	 edx, DWORD PTR _pLfo$[ebp]
  00077	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0007b	72 0c		 jb	 SHORT $L37296
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pLfo$[ebp]
  00080	81 78 04 ff ff
	00 00		 cmp	 DWORD PTR [eax+4], 65535 ; 0000ffffH
  00087	76 2d		 jbe	 SHORT $L37295
$L37296:

; 5464 :     {
; 5465 :         DPF_ERROR("Invalid LFO delay value");

  00089	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  00093	68 59 15 00 00	 push	 5465			; 00001559H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0009d	6a 01		 push	 1
  0009f	6a 09		 push	 9
  000a1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a6	83 c4 18	 add	 esp, 24			; 00000018H
  000a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@FMFOPPHB@Invalid?5LFO?5delay?5value?$AA@
  000ae	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b3	83 c4 04	 add	 esp, 4
$L37295:

; 5466 :     }
; 5467 : 
; 5468 :     if((pLfo->dwDelta < DSLFO_DELTA_MIN) || (pLfo->dwDelta > DSLFO_DELTA_MAX))

  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  000b9	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000bd	72 0c		 jb	 SHORT $L37299
  000bf	8b 55 0c	 mov	 edx, DWORD PTR _pLfo$[ebp]
  000c2	81 7a 08 ff 03
	00 00		 cmp	 DWORD PTR [edx+8], 1023	; 000003ffH
  000c9	76 2d		 jbe	 SHORT $L37298
$L37299:

; 5469 :     {
; 5470 :         DPF_ERROR("Invalid LFO delta value");

  000cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  000d5	68 5e 15 00 00	 push	 5470			; 0000155eH
  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000df	6a 01		 push	 1
  000e1	6a 09		 push	 9
  000e3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e8	83 c4 18	 add	 esp, 24			; 00000018H
  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@BFFHNCNB@Invalid?5LFO?5delta?5value?$AA@
  000f0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f5	83 c4 04	 add	 esp, 4
$L37298:

; 5471 :     }
; 5472 : 
; 5473 :     if((pLfo->lPitchModulation < DSLFO_PITCHMOD_MIN) || (pLfo->lPitchModulation > DSLFO_PITCHMOD_MAX))

  000f8	8b 45 0c	 mov	 eax, DWORD PTR _pLfo$[ebp]
  000fb	83 78 0c 80	 cmp	 DWORD PTR [eax+12], -128 ; ffffff80H
  000ff	7c 09		 jl	 SHORT $L37302
  00101	8b 4d 0c	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  00104	83 79 0c 7f	 cmp	 DWORD PTR [ecx+12], 127	; 0000007fH
  00108	7e 2d		 jle	 SHORT $L37301
$L37302:

; 5474 :     {
; 5475 :         DPF_ERROR("Invalid LFO pitch modulation value");

  0010a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  00114	68 63 15 00 00	 push	 5475			; 00001563H
  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0011e	6a 01		 push	 1
  00120	6a 09		 push	 9
  00122	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00127	83 c4 18	 add	 esp, 24			; 00000018H
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@DDJCPJHN@Invalid?5LFO?5pitch?5modulation?5val@
  0012f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00134	83 c4 04	 add	 esp, 4
$L37301:

; 5476 :     }
; 5477 : 
; 5478 :     if((pLfo->lFilterCutOffRange < DSLFO_FCRANGE_MIN) || (pLfo->lFilterCutOffRange > DSLFO_FCRANGE_MAX))

  00137	8b 55 0c	 mov	 edx, DWORD PTR _pLfo$[ebp]
  0013a	83 7a 10 80	 cmp	 DWORD PTR [edx+16], -128 ; ffffff80H
  0013e	7c 09		 jl	 SHORT $L37305
  00140	8b 45 0c	 mov	 eax, DWORD PTR _pLfo$[ebp]
  00143	83 78 10 7f	 cmp	 DWORD PTR [eax+16], 127	; 0000007fH
  00147	7e 2d		 jle	 SHORT $L37304
$L37305:

; 5479 :     {
; 5480 :         DPF_ERROR("Invalid LFO filter cutoff value");

  00149	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0014e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  00153	68 68 15 00 00	 push	 5480			; 00001568H
  00158	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0015d	6a 01		 push	 1
  0015f	6a 09		 push	 9
  00161	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00166	83 c4 18	 add	 esp, 24			; 00000018H
  00169	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@NLOIDDNF@Invalid?5LFO?5filter?5cutoff?5value?$AA@
  0016e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00173	83 c4 04	 add	 esp, 4
$L37304:

; 5481 :     }
; 5482 : 
; 5483 :     if((pLfo->lAmplitudeModulation < DSLFO_AMPMOD_MIN) || (pLfo->lAmplitudeModulation > DSLFO_AMPMOD_MAX))

  00176	8b 4d 0c	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  00179	83 79 14 80	 cmp	 DWORD PTR [ecx+20], -128 ; ffffff80H
  0017d	7c 0c		 jl	 SHORT $L37308
  0017f	8b 55 0c	 mov	 edx, DWORD PTR _pLfo$[ebp]
  00182	81 7a 14 80 00
	00 00		 cmp	 DWORD PTR [edx+20], 128	; 00000080H
  00189	7e 2d		 jle	 SHORT $L37307
$L37308:

; 5484 :     {
; 5485 :         DPF_ERROR("Invalid LFO amplitude modulation value");

  0018b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00190	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  00195	68 6d 15 00 00	 push	 5485			; 0000156dH
  0019a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0019f	6a 01		 push	 1
  001a1	6a 09		 push	 9
  001a3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001a8	83 c4 18	 add	 esp, 24			; 00000018H
  001ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@BNNNECFA@Invalid?5LFO?5amplitude?5modulation@
  001b0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001b5	83 c4 04	 add	 esp, 4
$L37307:

; 5486 :     }
; 5487 : 
; 5488 :     if(pLfo->dwLFO != DSLFO_MULTI)

  001b8	8b 45 0c	 mov	 eax, DWORD PTR _pLfo$[ebp]
  001bb	83 38 00	 cmp	 DWORD PTR [eax], 0
  001be	74 3f		 je	 SHORT $L37310

; 5489 :     {
; 5490 :         if(pLfo->lFilterCutOffRange || pLfo->lAmplitudeModulation)

  001c0	8b 4d 0c	 mov	 ecx, DWORD PTR _pLfo$[ebp]
  001c3	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  001c7	75 09		 jne	 SHORT $L37312
  001c9	8b 55 0c	 mov	 edx, DWORD PTR _pLfo$[ebp]
  001cc	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  001d0	74 2d		 je	 SHORT $L37310
$L37312:

; 5491 :         {
; 5492 :             DPF_WARNING("The pitch LFO doesn not support filter cut-off range or amplitude modulation");

  001d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@PNKNNCBM@CDirectSoundVoice?3?3SetLFO?$AA@
  001dc	68 74 15 00 00	 push	 5492			; 00001574H
  001e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001e6	6a 03		 push	 3
  001e8	6a 09		 push	 9
  001ea	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001ef	83 c4 18	 add	 esp, 24			; 00000018H
  001f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EN@CDBMGOGN@The?5pitch?5LFO?5doesn?5not?5support?5@
  001f7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001fc	83 c4 04	 add	 esp, 4
$L37310:

; 5493 :         }
; 5494 :     }
; 5495 : 
; 5496 : #endif // VALIDATE_PARAMETERS
; 5497 : 
; 5498 :     //
; 5499 :     // Hand off to the implementation object
; 5500 :     //
; 5501 : 
; 5502 :     hr = m_pVoice->SetLFO(pLfo);

  001ff	8b 45 0c	 mov	 eax, DWORD PTR _pLfo$[ebp]
  00202	50		 push	 eax
  00203	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00206	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00209	e8 00 00 00 00	 call	 ?SetLFO@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSLFODESC@@@Z ; DirectSound::CMcpxVoiceClient::SetLFO
  0020e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 5503 : 
; 5504 :     DPF_LEAVE_HRESULT(hr);
; 5505 : 
; 5506 :     return hr;

  00211	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 5507 : }

  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c2 08 00	 ret	 8
?SetLFO@CDirectSoundVoice@DirectSound@@QAGJPBU_DSLFODESC@@@Z ENDP ; DirectSound::CDirectSoundVoice::SetLFO
DSOUND	ENDS
PUBLIC	??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@ ; `string'
PUBLIC	??_C@_0CC@BKPMJGEL@Envelope?5description?5not?5provide@ ; `string'
PUBLIC	??_C@_0CG@BJPMKGB@Invalid?5envelope?5generator?5ident@ ; `string'
PUBLIC	??_C@_0CA@IIDKFKNJ@Invalid?5envelope?5generator?5mode?$AA@ ; `string'
PUBLIC	??_C@_0BN@PCBMIHMK@Invalid?5envelope?5delay?5value?$AA@ ; `string'
PUBLIC	??_C@_0BO@CHAGBIOL@Invalid?5envelope?5attack?5value?$AA@ ; `string'
PUBLIC	??_C@_0BM@DICEDIB@Invalid?5envelope?5hold?5value?$AA@ ; `string'
PUBLIC	??_C@_0BN@DBHNMEH@Invalid?5envelope?5decay?5value?$AA@ ; `string'
PUBLIC	??_C@_0BP@DBLEBMF@Invalid?5envelope?5release?5value?$AA@ ; `string'
PUBLIC	??_C@_0BP@FPGDLLFG@Invalid?5envelope?5sustain?5value?$AA@ ; `string'
PUBLIC	??_C@_0CD@NBKAHFMI@Invalid?5envelope?5pitch?5scale?5val@ ; `string'
PUBLIC	??_C@_0CF@CHEONPI@Invalid?5envelope?5filter?5cutoff?5v@ ; `string'
PUBLIC	??_C@_0EG@HJNFDHAI@The?5amplitude?5envelope?5doesn?5not@ ; `string'
EXTRN	?SetEG@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSENVELOPEDESC@@@Z:NEAR ; DirectSound::CMcpxVoiceClient::SetEG
;	COMDAT ??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@ DB 'CDirectSoundVoice:'
	DB	':SetEG', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@BKPMJGEL@Envelope?5description?5not?5provide@
DSOUND_RD	SEGMENT
??_C@_0CC@BKPMJGEL@Envelope?5description?5not?5provide@ DB 'Envelope desc'
	DB	'ription not provided', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@BJPMKGB@Invalid?5envelope?5generator?5ident@
DSOUND_RD	SEGMENT
??_C@_0CG@BJPMKGB@Invalid?5envelope?5generator?5ident@ DB 'Invalid envelo'
	DB	'pe generator identifier', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@IIDKFKNJ@Invalid?5envelope?5generator?5mode?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@IIDKFKNJ@Invalid?5envelope?5generator?5mode?$AA@ DB 'Invalid en'
	DB	'velope generator mode', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@PCBMIHMK@Invalid?5envelope?5delay?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@PCBMIHMK@Invalid?5envelope?5delay?5value?$AA@ DB 'Invalid envel'
	DB	'ope delay value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@CHAGBIOL@Invalid?5envelope?5attack?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@CHAGBIOL@Invalid?5envelope?5attack?5value?$AA@ DB 'Invalid enve'
	DB	'lope attack value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@DICEDIB@Invalid?5envelope?5hold?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@DICEDIB@Invalid?5envelope?5hold?5value?$AA@ DB 'Invalid envelop'
	DB	'e hold value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@DBHNMEH@Invalid?5envelope?5decay?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@DBHNMEH@Invalid?5envelope?5decay?5value?$AA@ DB 'Invalid envelo'
	DB	'pe decay value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@DBLEBMF@Invalid?5envelope?5release?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@DBLEBMF@Invalid?5envelope?5release?5value?$AA@ DB 'Invalid enve'
	DB	'lope release value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BP@FPGDLLFG@Invalid?5envelope?5sustain?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@FPGDLLFG@Invalid?5envelope?5sustain?5value?$AA@ DB 'Invalid env'
	DB	'elope sustain value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@NBKAHFMI@Invalid?5envelope?5pitch?5scale?5val@
DSOUND_RD	SEGMENT
??_C@_0CD@NBKAHFMI@Invalid?5envelope?5pitch?5scale?5val@ DB 'Invalid enve'
	DB	'lope pitch scale value', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@CHEONPI@Invalid?5envelope?5filter?5cutoff?5v@
DSOUND_RD	SEGMENT
??_C@_0CF@CHEONPI@Invalid?5envelope?5filter?5cutoff?5v@ DB 'Invalid envel'
	DB	'ope filter cutoff value', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EG@HJNFDHAI@The?5amplitude?5envelope?5doesn?5not@
DSOUND_RD	SEGMENT
??_C@_0EG@HJNFDHAI@The?5amplitude?5envelope?5doesn?5not@ DB 'The amplitud'
	DB	'e envelope doesn not support pitch scale or filter cutoff', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetEG@CDirectSoundVoice@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z
DSOUND	SEGMENT
_hr$ = -4
_this$ = 8
_pEnv$ = 12
?SetEG@CDirectSoundVoice@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetEG, COMDAT

; 5533 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5534 :     HRESULT                 hr;
; 5535 : 
; 5536 :     DPF_ENTER();
; 5537 : 
; 5538 : #ifdef VALIDATE_PARAMETERS
; 5539 : 
; 5540 :     if(!pEnv)

  00004	83 7d 0c 00	 cmp	 DWORD PTR _pEnv$[ebp], 0
  00008	75 2d		 jne	 SHORT $L37319

; 5541 :     {
; 5542 :         DPF_ERROR("Envelope description not provided");

  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  00014	68 a6 15 00 00	 push	 5542			; 000015a6H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BKPMJGEL@Envelope?5description?5not?5provide@
  0002f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00034	83 c4 04	 add	 esp, 4
$L37319:

; 5543 :     }
; 5544 : 
; 5545 :     if((pEnv->dwEG < DSEG_FIRST) || (pEnv->dwEG > DSEG_LAST))

  00037	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  0003a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003d	72 08		 jb	 SHORT $L37323
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  00042	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00045	76 2d		 jbe	 SHORT $L37322
$L37323:

; 5546 :     {
; 5547 :         DPF_ERROR("Invalid envelope generator identifier");

  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  00051	68 ab 15 00 00	 push	 5547			; 000015abH
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005b	6a 01		 push	 1
  0005d	6a 09		 push	 9
  0005f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00064	83 c4 18	 add	 esp, 24			; 00000018H
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@BJPMKGB@Invalid?5envelope?5generator?5ident@
  0006c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00071	83 c4 04	 add	 esp, 4
$L37322:

; 5548 :     }
; 5549 : 
; 5550 :     if((pEnv->dwMode < DSEG_MODE_FIRST) || (pEnv->dwMode > DSEG_MODE_LAST))

  00074	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  00077	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0007b	72 09		 jb	 SHORT $L37326
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  00080	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00084	76 2d		 jbe	 SHORT $L37325
$L37326:

; 5551 :     {
; 5552 :         DPF_ERROR("Invalid envelope generator mode");

  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  00090	68 b0 15 00 00	 push	 5552			; 000015b0H
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0009a	6a 01		 push	 1
  0009c	6a 09		 push	 9
  0009e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a3	83 c4 18	 add	 esp, 24			; 00000018H
  000a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@IIDKFKNJ@Invalid?5envelope?5generator?5mode?$AA@
  000ab	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b0	83 c4 04	 add	 esp, 4
$L37325:

; 5553 :     }
; 5554 : 
; 5555 :     if((pEnv->dwDelay < DSEG_DELAY_MIN) || (pEnv->dwDelay > DSEG_DELAY_MAX))

  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  000b6	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000ba	72 0c		 jb	 SHORT $L37329
  000bc	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  000bf	81 7a 08 ff 1f
	00 00		 cmp	 DWORD PTR [edx+8], 8191	; 00001fffH
  000c6	76 2d		 jbe	 SHORT $L37328
$L37329:

; 5556 :     {
; 5557 :         DPF_ERROR("Invalid envelope delay value");

  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  000d2	68 b5 15 00 00	 push	 5557			; 000015b5H
  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000dc	6a 01		 push	 1
  000de	6a 09		 push	 9
  000e0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e5	83 c4 18	 add	 esp, 24			; 00000018H
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@PCBMIHMK@Invalid?5envelope?5delay?5value?$AA@
  000ed	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f2	83 c4 04	 add	 esp, 4
$L37328:

; 5558 :     }
; 5559 : 
; 5560 :     if((pEnv->dwAttack < DSEG_ATTACK_MIN) || (pEnv->dwAttack > DSEG_ATTACK_MAX))

  000f5	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  000f8	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000fc	72 0c		 jb	 SHORT $L37332
  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  00101	81 79 0c ff 1f
	00 00		 cmp	 DWORD PTR [ecx+12], 8191 ; 00001fffH
  00108	76 2d		 jbe	 SHORT $L37331
$L37332:

; 5561 :     {
; 5562 :         DPF_ERROR("Invalid envelope attack value");

  0010a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  00114	68 ba 15 00 00	 push	 5562			; 000015baH
  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0011e	6a 01		 push	 1
  00120	6a 09		 push	 9
  00122	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00127	83 c4 18	 add	 esp, 24			; 00000018H
  0012a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@CHAGBIOL@Invalid?5envelope?5attack?5value?$AA@
  0012f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00134	83 c4 04	 add	 esp, 4
$L37331:

; 5563 :     }
; 5564 : 
; 5565 :     if((pEnv->dwHold < DSEG_HOLD_MIN) || (pEnv->dwHold > DSEG_HOLD_MAX))

  00137	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  0013a	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0013e	72 0c		 jb	 SHORT $L37335
  00140	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  00143	81 78 10 ff 1f
	00 00		 cmp	 DWORD PTR [eax+16], 8191 ; 00001fffH
  0014a	76 2d		 jbe	 SHORT $L37334
$L37335:

; 5566 :     {
; 5567 :         DPF_ERROR("Invalid envelope hold value");

  0014c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00151	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  00156	68 bf 15 00 00	 push	 5567			; 000015bfH
  0015b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00160	6a 01		 push	 1
  00162	6a 09		 push	 9
  00164	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00169	83 c4 18	 add	 esp, 24			; 00000018H
  0016c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@DICEDIB@Invalid?5envelope?5hold?5value?$AA@
  00171	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00176	83 c4 04	 add	 esp, 4
$L37334:

; 5568 :     }
; 5569 : 
; 5570 :     if((pEnv->dwDecay < DSEG_DECAY_MIN) || (pEnv->dwDecay > DSEG_DECAY_MAX))

  00179	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  0017c	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00180	72 0c		 jb	 SHORT $L37338
  00182	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  00185	81 7a 14 ff 1f
	00 00		 cmp	 DWORD PTR [edx+20], 8191 ; 00001fffH
  0018c	76 2d		 jbe	 SHORT $L37337
$L37338:

; 5571 :     {
; 5572 :         DPF_ERROR("Invalid envelope decay value");

  0018e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00193	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  00198	68 c4 15 00 00	 push	 5572			; 000015c4H
  0019d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001a2	6a 01		 push	 1
  001a4	6a 09		 push	 9
  001a6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001ab	83 c4 18	 add	 esp, 24			; 00000018H
  001ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DBHNMEH@Invalid?5envelope?5decay?5value?$AA@
  001b3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001b8	83 c4 04	 add	 esp, 4
$L37337:

; 5573 :     }
; 5574 : 
; 5575 :     if((pEnv->dwRelease < DSEG_RELEASE_MIN) || (pEnv->dwRelease > DSEG_RELEASE_MAX))

  001bb	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  001be	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  001c2	72 0c		 jb	 SHORT $L37341
  001c4	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  001c7	81 79 18 ff 1f
	00 00		 cmp	 DWORD PTR [ecx+24], 8191 ; 00001fffH
  001ce	76 2d		 jbe	 SHORT $L37340
$L37341:

; 5576 :     {
; 5577 :         DPF_ERROR("Invalid envelope release value");

  001d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  001da	68 c9 15 00 00	 push	 5577			; 000015c9H
  001df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001e4	6a 01		 push	 1
  001e6	6a 09		 push	 9
  001e8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001ed	83 c4 18	 add	 esp, 24			; 00000018H
  001f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@DBLEBMF@Invalid?5envelope?5release?5value?$AA@
  001f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001fa	83 c4 04	 add	 esp, 4
$L37340:

; 5578 :     }
; 5579 : 
; 5580 :     if((pEnv->dwSustain < DSEG_SUSTAIN_MIN) || (pEnv->dwSustain > DSEG_SUSTAIN_MAX))

  001fd	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  00200	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  00204	72 0c		 jb	 SHORT $L37344
  00206	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  00209	81 78 1c ff 00
	00 00		 cmp	 DWORD PTR [eax+28], 255	; 000000ffH
  00210	76 2d		 jbe	 SHORT $L37343
$L37344:

; 5581 :     {
; 5582 :         DPF_ERROR("Invalid envelope sustain value");

  00212	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00217	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  0021c	68 ce 15 00 00	 push	 5582			; 000015ceH
  00221	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00226	6a 01		 push	 1
  00228	6a 09		 push	 9
  0022a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0022f	83 c4 18	 add	 esp, 24			; 00000018H
  00232	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@FPGDLLFG@Invalid?5envelope?5sustain?5value?$AA@
  00237	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0023c	83 c4 04	 add	 esp, 4
$L37343:

; 5583 :     }
; 5584 : 
; 5585 :     if((pEnv->lPitchScale < DSEG_PITCHSCALE_MIN) || (pEnv->lPitchScale > DSEG_PITCHSCALE_MAX))

  0023f	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  00242	83 79 20 80	 cmp	 DWORD PTR [ecx+32], -128 ; ffffff80H
  00246	7c 09		 jl	 SHORT $L37347
  00248	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  0024b	83 7a 20 7f	 cmp	 DWORD PTR [edx+32], 127	; 0000007fH
  0024f	7e 2d		 jle	 SHORT $L37346
$L37347:

; 5586 :     {
; 5587 :         DPF_ERROR("Invalid envelope pitch scale value");

  00251	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00256	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  0025b	68 d3 15 00 00	 push	 5587			; 000015d3H
  00260	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00265	6a 01		 push	 1
  00267	6a 09		 push	 9
  00269	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0026e	83 c4 18	 add	 esp, 24			; 00000018H
  00271	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@NBKAHFMI@Invalid?5envelope?5pitch?5scale?5val@
  00276	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0027b	83 c4 04	 add	 esp, 4
$L37346:

; 5588 :     }
; 5589 : 
; 5590 :     if((pEnv->lFilterCutOff < DSEG_FILTERCUTOFF_MIN) || (pEnv->lFilterCutOff > DSEG_FILTERCUTOFF_MAX))

  0027e	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  00281	83 78 24 80	 cmp	 DWORD PTR [eax+36], -128 ; ffffff80H
  00285	7c 09		 jl	 SHORT $L37350
  00287	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  0028a	83 79 24 7f	 cmp	 DWORD PTR [ecx+36], 127	; 0000007fH
  0028e	7e 2d		 jle	 SHORT $L37349
$L37350:

; 5591 :     {
; 5592 :         DPF_ERROR("Invalid envelope filter cutoff value");

  00290	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00295	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  0029a	68 d8 15 00 00	 push	 5592			; 000015d8H
  0029f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002a4	6a 01		 push	 1
  002a6	6a 09		 push	 9
  002a8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002ad	83 c4 18	 add	 esp, 24			; 00000018H
  002b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@CHEONPI@Invalid?5envelope?5filter?5cutoff?5v@
  002b5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002ba	83 c4 04	 add	 esp, 4
$L37349:

; 5593 :     }
; 5594 : 
; 5595 :     if(pEnv->dwEG != DSEG_MULTI)

  002bd	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  002c0	83 3a 00	 cmp	 DWORD PTR [edx], 0
  002c3	74 3f		 je	 SHORT $L37352

; 5596 :     {
; 5597 :         if(pEnv->lPitchScale || pEnv->lFilterCutOff)

  002c5	8b 45 0c	 mov	 eax, DWORD PTR _pEnv$[ebp]
  002c8	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  002cc	75 09		 jne	 SHORT $L37354
  002ce	8b 4d 0c	 mov	 ecx, DWORD PTR _pEnv$[ebp]
  002d1	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  002d5	74 2d		 je	 SHORT $L37352
$L37354:

; 5598 :         {
; 5599 :             DPF_WARNING("The amplitude envelope doesn not support pitch scale or filter cutoff");

  002d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DPICDANF@CDirectSoundVoice?3?3SetEG?$AA@
  002e1	68 df 15 00 00	 push	 5599			; 000015dfH
  002e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002eb	6a 03		 push	 3
  002ed	6a 09		 push	 9
  002ef	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002f4	83 c4 18	 add	 esp, 24			; 00000018H
  002f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EG@HJNFDHAI@The?5amplitude?5envelope?5doesn?5not@
  002fc	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00301	83 c4 04	 add	 esp, 4
$L37352:

; 5600 :         }
; 5601 :     }
; 5602 : 
; 5603 : #endif // VALIDATE_PARAMETERS
; 5604 : 
; 5605 :     //
; 5606 :     // Hand off to the implementation object
; 5607 :     //
; 5608 : 
; 5609 :     hr = m_pVoice->SetEG(pEnv);

  00304	8b 55 0c	 mov	 edx, DWORD PTR _pEnv$[ebp]
  00307	52		 push	 edx
  00308	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0030b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0030e	e8 00 00 00 00	 call	 ?SetEG@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSENVELOPEDESC@@@Z ; DirectSound::CMcpxVoiceClient::SetEG
  00313	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 5610 : 
; 5611 :     DPF_LEAVE_HRESULT(hr);
; 5612 : 
; 5613 :     return hr;

  00316	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 5614 : }

  00319	8b e5		 mov	 esp, ebp
  0031b	5d		 pop	 ebp
  0031c	c2 08 00	 ret	 8
?SetEG@CDirectSoundVoice@DirectSound@@QAGJPBU_DSENVELOPEDESC@@@Z ENDP ; DirectSound::CDirectSoundVoice::SetEG
DSOUND	ENDS
PUBLIC	??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@ ; `string'
PUBLIC	??_C@_0CA@HHPMHMGE@Filter?5description?5not?5provided?$AA@ ; `string'
PUBLIC	??_C@_0BE@EGGJIDJA@Invalid?5filter?5mode?$AA@	; `string'
PUBLIC	??_C@_0BM@MNKBDPOF@Invalid?5Q?9coefficient?5value?$AA@ ; `string'
PUBLIC	??_C@_0CG@HIEOAAID@Invalid?5coefficient?5value?5?$CIindex@ ; `string'
PUBLIC	??_C@_0CL@KJELMDOG@The?5filter?5can?8t?5be?5bypassed?5on?5@ ; `string'
PUBLIC	??_C@_0DG@NELHDLCP@Only?5the?5first?52?5coefficients?5ar@ ; `string'
EXTRN	?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z:NEAR ; DirectSound::CMcpxVoiceClient::SetFilter
;	COMDAT ??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@ DB 'CDirectSoundVo'
	DB	'ice::SetFilter', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@HHPMHMGE@Filter?5description?5not?5provided?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@HHPMHMGE@Filter?5description?5not?5provided?$AA@ DB 'Filter des'
	DB	'cription not provided', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BE@EGGJIDJA@Invalid?5filter?5mode?$AA@
DSOUND_RD	SEGMENT
??_C@_0BE@EGGJIDJA@Invalid?5filter?5mode?$AA@ DB 'Invalid filter mode', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@MNKBDPOF@Invalid?5Q?9coefficient?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@MNKBDPOF@Invalid?5Q?9coefficient?5value?$AA@ DB 'Invalid Q-coef'
	DB	'ficient value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@HIEOAAID@Invalid?5coefficient?5value?5?$CIindex@
DSOUND_RD	SEGMENT
??_C@_0CG@HIEOAAID@Invalid?5coefficient?5value?5?$CIindex@ DB 'Invalid co'
	DB	'efficient value (index %lu)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CL@KJELMDOG@The?5filter?5can?8t?5be?5bypassed?5on?5@
DSOUND_RD	SEGMENT
??_C@_0CL@KJELMDOG@The?5filter?5can?8t?5be?5bypassed?5on?5@ DB 'The filte'
	DB	'r can''t be bypassed on a 3D voice', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DG@NELHDLCP@Only?5the?5first?52?5coefficients?5ar@
DSOUND_RD	SEGMENT
??_C@_0DG@NELHDLCP@Only?5the?5first?52?5coefficients?5ar@ DB 'Only the fi'
	DB	'rst 2 coefficients are valid on a 3D voice', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetFilter@CDirectSoundVoice@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z
DSOUND	SEGMENT
_hr$ = -8
_i$ = -4
_this$ = 8
_pFilter$ = 12
?SetFilter@CDirectSoundVoice@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetFilter, COMDAT

; 5640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5641 :     HRESULT                 hr;
; 5642 : 
; 5643 : #ifdef VALIDATE_PARAMETERS
; 5644 : 
; 5645 :     DWORD                   i;
; 5646 : 
; 5647 : #endif // VALIDATE_PARAMETERS
; 5648 : 
; 5649 :     DPF_ENTER();
; 5650 : 
; 5651 : #ifdef VALIDATE_PARAMETERS
; 5652 : 
; 5653 :     if(!pFilter)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pFilter$[ebp], 0
  0000a	75 2d		 jne	 SHORT $L37362

; 5654 :     {
; 5655 :         DPF_ERROR("Filter description not provided");

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
  00016	68 17 16 00 00	 push	 5655			; 00001617H
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00020	6a 01		 push	 1
  00022	6a 09		 push	 9
  00024	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@HHPMHMGE@Filter?5description?5not?5provided?$AA@
  00031	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00036	83 c4 04	 add	 esp, 4
$L37362:

; 5656 :     }
; 5657 : 
; 5658 :     if((pFilter->dwMode < DSFILTER_MODE_FIRST) || (pFilter->dwMode > DSFILTER_MODE_LAST))

  00039	8b 45 0c	 mov	 eax, DWORD PTR _pFilter$[ebp]
  0003c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003f	72 08		 jb	 SHORT $L37366
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _pFilter$[ebp]
  00044	83 39 03	 cmp	 DWORD PTR [ecx], 3
  00047	76 2d		 jbe	 SHORT $L37365
$L37366:

; 5659 :     {
; 5660 :         DPF_ERROR("Invalid filter mode");

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
  00053	68 1c 16 00 00	 push	 5660			; 0000161cH
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005d	6a 01		 push	 1
  0005f	6a 09		 push	 9
  00061	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@EGGJIDJA@Invalid?5filter?5mode?$AA@
  0006e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00073	83 c4 04	 add	 esp, 4
$L37365:

; 5661 :     }
; 5662 : 
; 5663 :     if(pFilter->dwQCoefficient > 7)

  00076	8b 55 0c	 mov	 edx, DWORD PTR _pFilter$[ebp]
  00079	83 7a 04 07	 cmp	 DWORD PTR [edx+4], 7
  0007d	76 2d		 jbe	 SHORT $L37368

; 5664 :     {
; 5665 :         DPF_ERROR("Invalid Q-coefficient value");

  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
  00089	68 21 16 00 00	 push	 5665			; 00001621H
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00093	6a 01		 push	 1
  00095	6a 09		 push	 9
  00097	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MNKBDPOF@Invalid?5Q?9coefficient?5value?$AA@
  000a4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a9	83 c4 04	 add	 esp, 4
$L37368:

; 5666 :     }
; 5667 : 
; 5668 :     for(i = 0; i < NUMELMS(pFilter->adwCoefficients); i++)

  000ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000b3	eb 09		 jmp	 SHORT $L37370
$L37371:
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b8	83 c0 01	 add	 eax, 1
  000bb	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L37370:
  000be	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  000c2	73 43		 jae	 SHORT $L37372

; 5669 :     {
; 5670 :         if(pFilter->adwCoefficients[i] > 0xFFFF)

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c7	8b 55 0c	 mov	 edx, DWORD PTR _pFilter$[ebp]
  000ca	81 7c 8a 08 ff
	ff 00 00	 cmp	 DWORD PTR [edx+ecx*4+8], 65535 ; 0000ffffH
  000d2	76 31		 jbe	 SHORT $L37373

; 5671 :         {
; 5672 :             DPF_ERROR("Invalid coefficient value (index %lu)", i);

  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
  000de	68 28 16 00 00	 push	 5672			; 00001628H
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e8	6a 01		 push	 1
  000ea	6a 09		 push	 9
  000ec	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000f1	83 c4 18	 add	 esp, 24			; 00000018H
  000f4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f7	50		 push	 eax
  000f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@HIEOAAID@Invalid?5coefficient?5value?5?$CIindex@
  000fd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00102	83 c4 08	 add	 esp, 8
$L37373:

; 5673 :         }
; 5674 :     }

  00105	eb ae		 jmp	 SHORT $L37371
$L37372:

; 5675 : 
; 5676 :     if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  00107	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0010d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00110	83 e0 10	 and	 eax, 16			; 00000010H
  00113	85 c0		 test	 eax, eax
  00115	0f 84 89 00 00
	00		 je	 $L37375

; 5677 :     {
; 5678 :         if(DSFILTER_MODE_BYPASS == pFilter->dwMode)

  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR _pFilter$[ebp]
  0011e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00121	75 2d		 jne	 SHORT $L37376

; 5679 :         {
; 5680 :             DPF_ERROR("The filter can't be bypassed on a 3D voice");

  00123	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
  0012d	68 30 16 00 00	 push	 5680			; 00001630H
  00132	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00137	6a 01		 push	 1
  00139	6a 09		 push	 9
  0013b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00140	83 c4 18	 add	 esp, 24			; 00000018H
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@KJELMDOG@The?5filter?5can?8t?5be?5bypassed?5on?5@
  00148	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0014d	83 c4 04	 add	 esp, 4
$L37376:

; 5681 :         }
; 5682 : 
; 5683 :         for(i = 2; i < NUMELMS(pFilter->adwCoefficients); i++)

  00150	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  00157	eb 09		 jmp	 SHORT $L37378
$L37379:
  00159	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0015c	83 c2 01	 add	 edx, 1
  0015f	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L37378:
  00162	83 7d fc 04	 cmp	 DWORD PTR _i$[ebp], 4
  00166	73 3c		 jae	 SHORT $L37375

; 5684 :         {
; 5685 :             if(pFilter->adwCoefficients[i])

  00168	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0016b	8b 4d 0c	 mov	 ecx, DWORD PTR _pFilter$[ebp]
  0016e	83 7c 81 08 00	 cmp	 DWORD PTR [ecx+eax*4+8], 0
  00173	74 2d		 je	 SHORT $L37381

; 5686 :             {
; 5687 :                 DPF_ERROR("Only the first 2 coefficients are valid on a 3D voice");

  00175	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0017a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@GNPGLKCM@CDirectSoundVoice?3?3SetFilter?$AA@
  0017f	68 37 16 00 00	 push	 5687			; 00001637H
  00184	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00189	6a 01		 push	 1
  0018b	6a 09		 push	 9
  0018d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00192	83 c4 18	 add	 esp, 24			; 00000018H
  00195	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@NELHDLCP@Only?5the?5first?52?5coefficients?5ar@
  0019a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0019f	83 c4 04	 add	 esp, 4
$L37381:

; 5688 :             }
; 5689 :         }

  001a2	eb b5		 jmp	 SHORT $L37379
$L37375:

; 5690 :     }
; 5691 : 
; 5692 : #endif // VALIDATE_PARAMETERS
; 5693 : 
; 5694 :     //
; 5695 :     // Hand off to the implementation object
; 5696 :     //
; 5697 : 
; 5698 :     hr = m_pVoice->SetFilter(pFilter);

  001a4	8b 55 0c	 mov	 edx, DWORD PTR _pFilter$[ebp]
  001a7	52		 push	 edx
  001a8	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001ae	e8 00 00 00 00	 call	 ?SetFilter@CMcpxVoiceClient@DirectSound@@QAEJPBU_DSFILTERDESC@@@Z ; DirectSound::CMcpxVoiceClient::SetFilter
  001b3	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 5699 : 
; 5700 :     DPF_LEAVE_HRESULT(hr);
; 5701 : 
; 5702 :     return hr;

  001b6	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 5703 : }

  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c2 08 00	 ret	 8
?SetFilter@CDirectSoundVoice@DirectSound@@QAGJPBU_DSFILTERDESC@@@Z ENDP ; DirectSound::CDirectSoundVoice::SetFilter
DSOUND	ENDS
PUBLIC	??_C@_0BP@MICKMGL@CDirectSoundVoice?3?3SetHeadroom?$AA@ ; `string'
PUBLIC	??_C@_0BN@KGGOOANK@Headroom?5value?5out?9of?9bounds?$AA@ ; `string'
;	COMDAT ??_C@_0BP@MICKMGL@CDirectSoundVoice?3?3SetHeadroom?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@MICKMGL@CDirectSoundVoice?3?3SetHeadroom?$AA@ DB 'CDirectSoundV'
	DB	'oice::SetHeadroom', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BN@KGGOOANK@Headroom?5value?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BN@KGGOOANK@Headroom?5value?5out?9of?9bounds?$AA@ DB 'Headroom val'
	DB	'ue out-of-bounds', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetHeadroom@CDirectSoundVoice@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
_hr$ = -4
_this$ = 8
_dwHeadroom$ = 12
?SetHeadroom@CDirectSoundVoice@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetHeadroom, COMDAT

; 5729 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5730 :     HRESULT                 hr;
; 5731 : 
; 5732 :     DPF_ENTER();
; 5733 : 
; 5734 : #ifdef VALIDATE_PARAMETERS
; 5735 : 
; 5736 :     if((dwHeadroom < DSBHEADROOM_MIN) || (dwHeadroom > DSBHEADROOM_MAX))

  00004	83 7d 0c 00	 cmp	 DWORD PTR _dwHeadroom$[ebp], 0
  00008	72 09		 jb	 SHORT $L37389
  0000a	81 7d 0c 10 27
	00 00		 cmp	 DWORD PTR _dwHeadroom$[ebp], 10000 ; 00002710H
  00011	76 2d		 jbe	 SHORT $L37388
$L37389:

; 5737 :     {
; 5738 :         DPF_ERROR("Headroom value out-of-bounds");

  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@MICKMGL@CDirectSoundVoice?3?3SetHeadroom?$AA@
  0001d	68 6a 16 00 00	 push	 5738			; 0000166aH
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00027	6a 01		 push	 1
  00029	6a 09		 push	 9
  0002b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00030	83 c4 18	 add	 esp, 24			; 00000018H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@KGGOOANK@Headroom?5value?5out?9of?9bounds?$AA@
  00038	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003d	83 c4 04	 add	 esp, 4
$L37388:

; 5739 :     }
; 5740 : 
; 5741 : #endif // VALIDATE_PARAMETERS
; 5742 : 
; 5743 :     //
; 5744 :     // Save the headroom to the settings
; 5745 :     //
; 5746 : 
; 5747 :     m_pSettings->SetHeadroom(dwHeadroom);

  00040	8b 45 0c	 mov	 eax, DWORD PTR _dwHeadroom$[ebp]
  00043	50		 push	 eax
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0004a	e8 00 00 00 00	 call	 ?SetHeadroom@CDirectSoundVoiceSettings@DirectSound@@QAEXK@Z ; DirectSound::CDirectSoundVoiceSettings::SetHeadroom

; 5748 :     
; 5749 :     //
; 5750 :     // Headroom affects voice volume, so notify the implementation object
; 5751 :     //
; 5752 : 
; 5753 :     hr = m_pVoice->SetVolume();

  0004f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00055	e8 00 00 00 00	 call	 ?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetVolume
  0005a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 5754 : 
; 5755 :     DPF_LEAVE_HRESULT(hr);
; 5756 : 
; 5757 :     return hr;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 5758 : }    

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
?SetHeadroom@CDirectSoundVoice@DirectSound@@QAGJK@Z ENDP ; DirectSound::CDirectSoundVoice::SetHeadroom
DSOUND	ENDS
PUBLIC	??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@ ; `string'
PUBLIC	??_C@_0DD@MGDJOPFN@Output?5buffer?5specified?5is?5not?5a@ ; `string'
PUBLIC	??_C@_0DC@CBOOEPFA@Can?8t?5set?5the?5output?5buffer?5on?5M@ ; `string'
PUBLIC	??_C@_0FC@OCBCMFK@Can?8t?5submix?5a?53D?5buffer?4?5?5Creat@ ; `string'
PUBLIC	??_C@_0CD@EGCNJDOL@Can?5only?5submix?5mono?5source?5voic@ ; `string'
PUBLIC	??_C@_0DA@KABIHIFJ@Submixed?5voices?5must?5leave?5one?5m@ ; `string'
PUBLIC	??_C@_0EH@LBEFOPJD@The?5headroom?5for?5the?5mixbin?5your@ ; `string'
PUBLIC	??_C@_0EE@DOPHHMBJ@non?9zero?4?5?5This?5will?5be?5additive@ ; `string'
PUBLIC	??_C@_0EM@LOELFEDP@destination?5is?5reading?5to?0?5possi@ ; `string'
PUBLIC	??_C@_0CF@LMMJOHBD@You?5will?5only?5see?5this?5warning?5o@ ; `string'
EXTRN	?ConnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::ConnectVoice
EXTRN	?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxVoiceClient::DisconnectVoice
;	COMDAT ??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
DSOUND_RD	SEGMENT
??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@ DB 'CDirectSoundVo'
	DB	'ice::SetOutputBuffer', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@MGDJOPFN@Output?5buffer?5specified?5is?5not?5a@
DSOUND_RD	SEGMENT
??_C@_0DD@MGDJOPFN@Output?5buffer?5specified?5is?5not?5a@ DB 'Output buff'
	DB	'er specified is not a MIXIN/FXIN buffer', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DC@CBOOEPFA@Can?8t?5set?5the?5output?5buffer?5on?5M@
DSOUND_RD	SEGMENT
??_C@_0DC@CBOOEPFA@Can?8t?5set?5the?5output?5buffer?5on?5M@ DB 'Can''t se'
	DB	't the output buffer on MIXIN/FXIN buffers', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0FC@OCBCMFK@Can?8t?5submix?5a?53D?5buffer?4?5?5Creat@
DSOUND_RD	SEGMENT
??_C@_0FC@OCBCMFK@Can?8t?5submix?5a?53D?5buffer?4?5?5Creat@ DB 'Can''t su'
	DB	'bmix a 3D buffer.  Create a 2D source buffer and a 3D destina'
	DB	'tion buffer.', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@EGCNJDOL@Can?5only?5submix?5mono?5source?5voic@
DSOUND_RD	SEGMENT
??_C@_0CD@EGCNJDOL@Can?5only?5submix?5mono?5source?5voic@ DB 'Can only su'
	DB	'bmix mono source voices', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@KABIHIFJ@Submixed?5voices?5must?5leave?5one?5m@
DSOUND_RD	SEGMENT
??_C@_0DA@KABIHIFJ@Submixed?5voices?5must?5leave?5one?5m@ DB 'Submixed vo'
	DB	'ices must leave one mixbin slot free', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ?fSubMixHeadroom@?1??SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z@4HA
DSOUND_RW	SEGMENT
?fSubMixHeadroom@?1??SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z@4HA DD 00H ; `DirectSound::CDirectSoundVoice::SetOutputBuffer'::`2'::fSubMixHeadroom
DSOUND_RW	ENDS
;	COMDAT ??_C@_0EH@LBEFOPJD@The?5headroom?5for?5the?5mixbin?5your@
DSOUND_RD	SEGMENT
??_C@_0EH@LBEFOPJD@The?5headroom?5for?5the?5mixbin?5your@ DB 'The headroo'
	DB	'm for the mixbin your submix destination is reading from is', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EE@DOPHHMBJ@non?9zero?4?5?5This?5will?5be?5additive@
DSOUND_RD	SEGMENT
??_C@_0EE@DOPHHMBJ@non?9zero?4?5?5This?5will?5be?5additive@ DB 'non-zero.'
	DB	'  This will be additive with the headroom that your submix', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EM@LOELFEDP@destination?5is?5reading?5to?0?5possi@
DSOUND_RD	SEGMENT
??_C@_0EM@LOELFEDP@destination?5is?5reading?5to?0?5possi@ DB 'destination'
	DB	' is reading to, possibly giving you more headroom that you wa'
	DB	'nt.', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@LMMJOHBD@You?5will?5only?5see?5this?5warning?5o@
DSOUND_RD	SEGMENT
??_C@_0CF@LMMJOHBD@You?5will?5only?5see?5this?5warning?5o@ DB 'You will o'
	DB	'nly see this warning once.', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z
DSOUND	SEGMENT
tv66 = -16
_hr$ = -12
_pMixinBuffer$ = -8
_this$ = 8
_pOutputBuffer$ = 12
?SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetOutputBuffer, COMDAT

; 5785 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 5786 :     CDirectSoundBuffer *    pMixinBuffer    = (CDirectSoundBuffer *)pOutputBuffer;

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pOutputBuffer$[ebp], 0
  0000a	74 0b		 je	 SHORT $L40552
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  0000f	83 e8 24	 sub	 eax, 36			; 00000024H
  00012	89 45 f0	 mov	 DWORD PTR tv66[ebp], eax
  00015	eb 07		 jmp	 SHORT $L40553
$L40552:
  00017	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L40553:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR tv66[ebp]
  00021	89 4d f8	 mov	 DWORD PTR _pMixinBuffer$[ebp], ecx

; 5787 :     HRESULT                 hr              = DS_OK;

  00024	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 5788 : 
; 5789 : #ifdef VALIDATE_PARAMETERS
; 5790 :     
; 5791 :     static BOOL             fSubMixHeadroom = FALSE;
; 5792 :     DWORD                   i;
; 5793 : 
; 5794 : #endif // VALIDATE_PARAMETERS
; 5795 : 
; 5796 :     DPF_ENTER();
; 5797 : 
; 5798 : #ifdef VALIDATE_PARAMETERS
; 5799 : 
; 5800 :     if(pMixinBuffer)

  0002b	83 7d f8 00	 cmp	 DWORD PTR _pMixinBuffer$[ebp], 0
  0002f	0f 84 1f 02 00
	00		 je	 $L37403

; 5801 :     {
; 5802 :         if(!(pMixinBuffer->m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK))

  00035	8b 55 f8	 mov	 edx, DWORD PTR _pMixinBuffer$[ebp]
  00038	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0003b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003e	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00044	85 c9		 test	 ecx, ecx
  00046	75 2d		 jne	 SHORT $L37404

; 5803 :         {
; 5804 :             DPF_ERROR("Output buffer specified is not a MIXIN/FXIN buffer");

  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  00052	68 ac 16 00 00	 push	 5804			; 000016acH
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005c	6a 01		 push	 1
  0005e	6a 09		 push	 9
  00060	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@MGDJOPFN@Output?5buffer?5specified?5is?5not?5a@
  0006d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00072	83 c4 04	 add	 esp, 4
$L37404:

; 5805 :         }
; 5806 : 
; 5807 :         if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  00075	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00078	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0007b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007e	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00084	85 c9		 test	 ecx, ecx
  00086	74 2d		 je	 SHORT $L37407

; 5808 :         {
; 5809 :             DPF_ERROR("Can't set the output buffer on MIXIN/FXIN buffers");

  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  00092	68 b1 16 00 00	 push	 5809			; 000016b1H
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0009c	6a 01		 push	 1
  0009e	6a 09		 push	 9
  000a0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a5	83 c4 18	 add	 esp, 24			; 00000018H
  000a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DC@CBOOEPFA@Can?8t?5set?5the?5output?5buffer?5on?5M@
  000ad	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b2	83 c4 04	 add	 esp, 4
$L37407:

; 5810 :         }
; 5811 : 
; 5812 :         if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  000b5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000bb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000be	83 e1 10	 and	 ecx, 16			; 00000010H
  000c1	85 c9		 test	 ecx, ecx
  000c3	74 2d		 je	 SHORT $L37409

; 5813 :         {
; 5814 :             DPF_ERROR("Can't submix a 3D buffer.  Create a 2D source buffer and a 3D destination buffer.");

  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  000cf	68 b6 16 00 00	 push	 5814			; 000016b6H
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000d9	6a 01		 push	 1
  000db	6a 09		 push	 9
  000dd	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e2	83 c4 18	 add	 esp, 24			; 00000018H
  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FC@OCBCMFK@Can?8t?5submix?5a?53D?5buffer?4?5?5Creat@
  000ea	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ef	83 c4 04	 add	 esp, 4
$L37409:

; 5815 :         }
; 5816 : 
; 5817 :         if(1 != m_pSettings->m_fmt.nChannels)

  000f2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000f8	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  000fc	83 f9 01	 cmp	 ecx, 1
  000ff	74 2d		 je	 SHORT $L37411

; 5818 :         {
; 5819 :             DPF_ERROR("Can only submix mono source voices");

  00101	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  0010b	68 bb 16 00 00	 push	 5819			; 000016bbH
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00115	6a 01		 push	 1
  00117	6a 09		 push	 9
  00119	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011e	83 c4 18	 add	 esp, 24			; 00000018H
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@EGCNJDOL@Can?5only?5submix?5mono?5source?5voic@
  00126	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0012b	83 c4 04	 add	 esp, 4
$L37411:

; 5820 :         }
; 5821 : 
; 5822 :         if(m_pSettings->m_dwMixBinCount >= NUMELMS(m_pSettings->m_abMixBins))

  0012e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00131	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00134	83 78 24 08	 cmp	 DWORD PTR [eax+36], 8
  00138	72 2d		 jb	 SHORT $L37413

; 5823 :         {
; 5824 :             DPF_ERROR("Submixed voices must leave one mixbin slot free");

  0013a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0013f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  00144	68 c0 16 00 00	 push	 5824			; 000016c0H
  00149	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0014e	6a 01		 push	 1
  00150	6a 09		 push	 9
  00152	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00157	83 c4 18	 add	 esp, 24			; 00000018H
  0015a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@KABIHIFJ@Submixed?5voices?5must?5leave?5one?5m@
  0015f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00164	83 c4 04	 add	 esp, 4
$L37413:

; 5825 :         }
; 5826 : 
; 5827 :         if(!fSubMixHeadroom)

  00167	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?fSubMixHeadroom@?1??SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z@4HA, 0
  0016e	0f 85 e0 00 00
	00		 jne	 $L37403

; 5828 :         {
; 5829 :             if(m_pDirectSound->m_pSettings->m_abMixBinHeadroom[pMixinBuffer->m_pSettings->m_dwInputMixBin])

  00174	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0017a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0017d	8b 4d f8	 mov	 ecx, DWORD PTR _pMixinBuffer$[ebp]
  00180	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00183	8b 8a d0 00 00
	00		 mov	 ecx, DWORD PTR [edx+208]
  00189	0f b6 54 08 14	 movzx	 edx, BYTE PTR [eax+ecx+20]
  0018e	85 d2		 test	 edx, edx
  00190	0f 84 be 00 00
	00		 je	 $L37403

; 5830 :             {
; 5831 :                 DPF_WARNING("The headroom for the mixbin your submix destination is reading from is");

  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  001a0	68 c7 16 00 00	 push	 5831			; 000016c7H
  001a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001aa	6a 03		 push	 3
  001ac	6a 09		 push	 9
  001ae	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001b3	83 c4 18	 add	 esp, 24			; 00000018H
  001b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@LBEFOPJD@The?5headroom?5for?5the?5mixbin?5your@
  001bb	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001c0	83 c4 04	 add	 esp, 4

; 5832 :                 DPF_WARNING("non-zero.  This will be additive with the headroom that your submix");

  001c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  001cd	68 c8 16 00 00	 push	 5832			; 000016c8H
  001d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001d7	6a 03		 push	 3
  001d9	6a 09		 push	 9
  001db	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001e0	83 c4 18	 add	 esp, 24			; 00000018H
  001e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@DOPHHMBJ@non?9zero?4?5?5This?5will?5be?5additive@
  001e8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001ed	83 c4 04	 add	 esp, 4

; 5833 :                 DPF_WARNING("destination is reading to, possibly giving you more headroom that you want.");

  001f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  001fa	68 c9 16 00 00	 push	 5833			; 000016c9H
  001ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00204	6a 03		 push	 3
  00206	6a 09		 push	 9
  00208	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0020d	83 c4 18	 add	 esp, 24			; 00000018H
  00210	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@LOELFEDP@destination?5is?5reading?5to?0?5possi@
  00215	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0021a	83 c4 04	 add	 esp, 4

; 5834 :                 DPF_WARNING("You will only see this warning once.");

  0021d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00222	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@ODLMGAMI@CDirectSoundVoice?3?3SetOutputBuff@
  00227	68 ca 16 00 00	 push	 5834			; 000016caH
  0022c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00231	6a 03		 push	 3
  00233	6a 09		 push	 9
  00235	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0023a	83 c4 18	 add	 esp, 24			; 00000018H
  0023d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@LMMJOHBD@You?5will?5only?5see?5this?5warning?5o@
  00242	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00247	83 c4 04	 add	 esp, 4

; 5835 :                 
; 5836 :                 fSubMixHeadroom = TRUE;

  0024a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?fSubMixHeadroom@?1??SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z@4HA, 1
$L37403:

; 5837 :             }
; 5838 :         }
; 5839 :     }
; 5840 : 
; 5841 : #endif // VALIDATE_PARAMETERS
; 5842 : 
; 5843 :     if(pMixinBuffer != m_pSettings->m_pMixinBuffer)

  00254	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00257	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0025a	8b 55 f8	 mov	 edx, DWORD PTR _pMixinBuffer$[ebp]
  0025d	3b 91 b0 00 00
	00		 cmp	 edx, DWORD PTR [ecx+176]
  00263	74 4c		 je	 SHORT $L37421

; 5844 :     {
; 5845 :         //
; 5846 :         // Disconnect from the current buffer
; 5847 :         //
; 5848 : 
; 5849 :         if(m_pSettings->m_pMixinBuffer)

  00265	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00268	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0026b	83 b9 b0 00 00
	00 00		 cmp	 DWORD PTR [ecx+176], 0
  00272	74 0e		 je	 SHORT $L37422

; 5850 :         {
; 5851 :             hr = m_pVoice->DisconnectVoice();

  00274	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00277	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0027a	e8 00 00 00 00	 call	 ?DisconnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::DisconnectVoice
  0027f	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L37422:

; 5852 :         }
; 5853 :         
; 5854 :         //
; 5855 :         // Update the settings object
; 5856 :         //
; 5857 : 
; 5858 :         if(SUCCEEDED(hr))

  00282	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00286	7c 0f		 jl	 SHORT $L37424

; 5859 :         {
; 5860 :             m_pSettings->SetOutputBuffer(pMixinBuffer);

  00288	8b 45 f8	 mov	 eax, DWORD PTR _pMixinBuffer$[ebp]
  0028b	50		 push	 eax
  0028c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0028f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00292	e8 00 00 00 00	 call	 ?SetOutputBuffer@CDirectSoundVoiceSettings@DirectSound@@QAEXPAVCDirectSoundBuffer@2@@Z ; DirectSound::CDirectSoundVoiceSettings::SetOutputBuffer
$L37424:

; 5861 :         }
; 5862 : 
; 5863 :         //
; 5864 :         // Hand off to the implementation object.  ConnectVoice handles
; 5865 :         // resetting the mixbins and mixbin volumes as well as voice list
; 5866 :         // management.
; 5867 :         //
; 5868 : 
; 5869 :         if(SUCCEEDED(hr) && pMixinBuffer)

  00297	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0029b	7c 14		 jl	 SHORT $L37421
  0029d	83 7d f8 00	 cmp	 DWORD PTR _pMixinBuffer$[ebp], 0
  002a1	74 0e		 je	 SHORT $L37421

; 5870 :         {
; 5871 :             hr = m_pVoice->ConnectVoice();

  002a3	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002a6	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  002a9	e8 00 00 00 00	 call	 ?ConnectVoice@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::ConnectVoice
  002ae	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L37421:

; 5872 :         }
; 5873 :     }
; 5874 : 
; 5875 :     DPF_LEAVE_HRESULT(hr);
; 5876 : 
; 5877 :     return hr;

  002b1	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 5878 : }

  002b4	8b e5		 mov	 esp, ebp
  002b6	5d		 pop	 ebp
  002b7	c2 08 00	 ret	 8
?SetOutputBuffer@CDirectSoundVoice@DirectSound@@QAGJPAUIDirectSoundBuffer@@@Z ENDP ; DirectSound::CDirectSoundVoice::SetOutputBuffer
DSOUND	ENDS
PUBLIC	??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@ ; `string'
PUBLIC	??_C@_0DD@JHLFCOCA@No?5voice?5can?5be?5assigned?5to?5more@ ; `string'
PUBLIC	??_C@_0DJ@NDMJBELB@The?5mixbin?5count?5must?5be?5a?5multi@ ; `string'
PUBLIC	??_C@_0BM@IOBMOJLJ@Specified?5an?5invalid?5mixbin?$AA@ ; `string'
PUBLIC	??_C@_0EI@MJPKEPAI@MixBin?5count?5doesn?8t?5include?5eno@ ; `string'
PUBLIC	??_C@_0DD@EJEOPAOD@MixBin?5array?5does?5not?5include?5th@ ; `string'
EXTRN	_DirectSoundRequiredMixBins_3D:QWORD
;	COMDAT ??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@ DB 'CDirectSoundV'
	DB	'oice::SetMixBins', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@JHLFCOCA@No?5voice?5can?5be?5assigned?5to?5more@
DSOUND_RD	SEGMENT
??_C@_0DD@JHLFCOCA@No?5voice?5can?5be?5assigned?5to?5more@ DB 'No voice c'
	DB	'an be assigned to more than %lu mix bins', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DJ@NDMJBELB@The?5mixbin?5count?5must?5be?5a?5multi@
DSOUND_RD	SEGMENT
??_C@_0DJ@NDMJBELB@The?5mixbin?5count?5must?5be?5a?5multi@ DB 'The mixbin'
	DB	' count must be a multiple of the channel count', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@IOBMOJLJ@Specified?5an?5invalid?5mixbin?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IOBMOJLJ@Specified?5an?5invalid?5mixbin?$AA@ DB 'Specified an i'
	DB	'nvalid mixbin', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EI@MJPKEPAI@MixBin?5count?5doesn?8t?5include?5eno@
DSOUND_RD	SEGMENT
??_C@_0EI@MJPKEPAI@MixBin?5count?5doesn?8t?5include?5eno@ DB 'MixBin coun'
	DB	't doesn''t include enough mixbins to hold all required for 3D'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DD@EJEOPAOD@MixBin?5array?5does?5not?5include?5th@
DSOUND_RD	SEGMENT
??_C@_0DD@EJEOPAOD@MixBin?5array?5does?5not?5include?5th@ DB 'MixBin arra'
	DB	'y does not include the required 3D bins', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBins@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_hr$ = -8
_i$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBins@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetMixBins, COMDAT

; 5904 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 5905 :     HRESULT                 hr;
; 5906 : 
; 5907 : #ifdef VALIDATE_PARAMETERS  
; 5908 : 
; 5909 :     DWORD                   i;
; 5910 :    
; 5911 : #endif // VALIDATE_PARAMETERS    
; 5912 : 
; 5913 :     DPF_ENTER();
; 5914 : 
; 5915 : #ifdef VALIDATE_PARAMETERS
; 5916 : 
; 5917 :     if(pMixBins)

  00007	83 7d 0c 00	 cmp	 DWORD PTR _pMixBins$[ebp], 0
  0000b	0f 84 95 01 00
	00		 je	 $L37433

; 5918 :     {
; 5919 :         if(pMixBins->dwMixBinCount)

  00011	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00014	83 38 00	 cmp	 DWORD PTR [eax], 0
  00017	0f 84 89 01 00
	00		 je	 $L37433

; 5920 :         {
; 5921 :             if(pMixBins->dwMixBinCount > DSMIXBIN_ASSIGNMENT_MAX)

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00020	83 39 08	 cmp	 DWORD PTR [ecx], 8
  00023	76 2f		 jbe	 SHORT $L37435

; 5922 :             {
; 5923 :                 DPF_ERROR("No voice can be assigned to more than %lu mix bins", DSMIXBIN_ASSIGNMENT_MAX);

  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@
  0002f	68 23 17 00 00	 push	 5923			; 00001723H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00039	6a 01		 push	 1
  0003b	6a 09		 push	 9
  0003d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	6a 08		 push	 8
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@JHLFCOCA@No?5voice?5can?5be?5assigned?5to?5more@
  0004c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00051	83 c4 08	 add	 esp, 8
$L37435:

; 5924 :             }
; 5925 :         
; 5926 :             if(pMixBins->dwMixBinCount % m_pSettings->m_fmt.nChannels)

  00054	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0005a	0f b6 48 0e	 movzx	 ecx, BYTE PTR [eax+14]
  0005e	8b 55 0c	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  00061	8b 02		 mov	 eax, DWORD PTR [edx]
  00063	33 d2		 xor	 edx, edx
  00065	f7 f1		 div	 ecx
  00067	85 d2		 test	 edx, edx
  00069	74 2d		 je	 SHORT $L37438

; 5927 :             {
; 5928 :                 DPF_ERROR("The mixbin count must be a multiple of the channel count");

  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@
  00075	68 28 17 00 00	 push	 5928			; 00001728H
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0007f	6a 01		 push	 1
  00081	6a 09		 push	 9
  00083	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00088	83 c4 18	 add	 esp, 24			; 00000018H
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@NDMJBELB@The?5mixbin?5count?5must?5be?5a?5multi@
  00090	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00095	83 c4 04	 add	 esp, 4
$L37438:

; 5929 :             }
; 5930 : 
; 5931 :             for(i = 0; i < pMixBins->dwMixBinCount; i++)

  00098	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0009f	eb 09		 jmp	 SHORT $L37440
$L37441:
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L37440:
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  000ad	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b0	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000b2	73 3e		 jae	 SHORT $L37442

; 5932 :             {
; 5933 :                 if(pMixBins->lpMixBinVolumePairs[i].dwMixBin > DSMIXBIN_LAST)

  000b4	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  000b7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ba	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000bd	83 3c d1 1f	 cmp	 DWORD PTR [ecx+edx*8], 31 ; 0000001fH
  000c1	76 2d		 jbe	 SHORT $L37443

; 5934 :                 {
; 5935 :                     DPF_ERROR("Specified an invalid mixbin");

  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@
  000cd	68 2f 17 00 00	 push	 5935			; 0000172fH
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000d7	6a 01		 push	 1
  000d9	6a 09		 push	 9
  000db	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IOBMOJLJ@Specified?5an?5invalid?5mixbin?$AA@
  000e8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ed	83 c4 04	 add	 esp, 4
$L37443:

; 5936 :                 }
; 5937 :             }

  000f0	eb af		 jmp	 SHORT $L37441
$L37442:

; 5938 : 
; 5939 :             if(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D)

  000f2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000fb	83 e2 10	 and	 edx, 16			; 00000010H
  000fe	85 d2		 test	 edx, edx
  00100	0f 84 a0 00 00
	00		 je	 $L37433

; 5940 :             {
; 5941 :                 if(pMixBins->dwMixBinCount < DirectSoundRequiredMixBins_3D.dwMixBinCount)

  00106	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00109	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010b	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _DirectSoundRequiredMixBins_3D
  00111	73 2d		 jae	 SHORT $L37446

; 5942 :                 {
; 5943 :                     DPF_ERROR("MixBin count doesn't include enough mixbins to hold all required for 3D");

  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@
  0011d	68 37 17 00 00	 push	 5943			; 00001737H
  00122	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00127	6a 01		 push	 1
  00129	6a 09		 push	 9
  0012b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00130	83 c4 18	 add	 esp, 24			; 00000018H
  00133	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@MJPKEPAI@MixBin?5count?5doesn?8t?5include?5eno@
  00138	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0013d	83 c4 04	 add	 esp, 4
$L37446:

; 5944 :                 }
; 5945 :             
; 5946 :                 for(i = 0; i < DirectSoundRequiredMixBins_3D.dwMixBinCount; i++)

  00140	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00147	eb 09		 jmp	 SHORT $L37448
$L37449:
  00149	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0014c	83 c2 01	 add	 edx, 1
  0014f	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L37448:
  00152	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00155	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _DirectSoundRequiredMixBins_3D
  0015b	73 49		 jae	 SHORT $L37433

; 5947 :                 {
; 5948 :                     if(pMixBins->lpMixBinVolumePairs[i].dwMixBin != DirectSoundRequiredMixBins_3D.lpMixBinVolumePairs[i].dwMixBin)

  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00160	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00163	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00166	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00169	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR _DirectSoundRequiredMixBins_3D+4
  0016f	8b 14 c2	 mov	 edx, DWORD PTR [edx+eax*8]
  00172	3b 14 ce	 cmp	 edx, DWORD PTR [esi+ecx*8]
  00175	74 2d		 je	 SHORT $L37451

; 5949 :                     {
; 5950 :                         DPF_ERROR("MixBin array does not include the required 3D bins");

  00177	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0017c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@ICABEEDN@CDirectSoundVoice?3?3SetMixBins?$AA@
  00181	68 3e 17 00 00	 push	 5950			; 0000173eH
  00186	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0018b	6a 01		 push	 1
  0018d	6a 09		 push	 9
  0018f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00194	83 c4 18	 add	 esp, 24			; 00000018H
  00197	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@EJEOPAOD@MixBin?5array?5does?5not?5include?5th@
  0019c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a1	83 c4 04	 add	 esp, 4
$L37451:

; 5951 :                     }
; 5952 :                 }

  001a4	eb a3		 jmp	 SHORT $L37449
$L37433:

; 5953 :             }
; 5954 :         }
; 5955 :     }
; 5956 : 
; 5957 : #endif // VALIDATE_PARAMETERS
; 5958 : 
; 5959 :     //
; 5960 :     // Save settings
; 5961 :     //
; 5962 : 
; 5963 :     m_pSettings->SetMixBins(pMixBins);

  001a6	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  001a9	50		 push	 eax
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001ad	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  001b0	e8 00 00 00 00	 call	 ?SetMixBins@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::SetMixBins

; 5964 : 
; 5965 :     //
; 5966 :     // Hand off to the implementation object
; 5967 :     //
; 5968 : 
; 5969 :     hr = m_pVoice->SetMixBins();

  001b5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001b8	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  001bb	e8 00 00 00 00	 call	 ?SetMixBins@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetMixBins
  001c0	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 5970 : 
; 5971 :     DPF_LEAVE_HRESULT(hr);
; 5972 : 
; 5973 :     return hr;

  001c3	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 5974 : }

  001c6	5e		 pop	 esi
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 08 00	 ret	 8
?SetMixBins@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundVoice::SetMixBins
DSOUND	ENDS
PUBLIC	??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@ ; `string'
PUBLIC	??_C@_0CB@PELGAILP@Failed?5to?5supply?5any?5volume?5data@ ; `string'
PUBLIC	??_C@_0BF@HLJGNGGL@Invalid?5mixbin?5count?$AA@	; `string'
PUBLIC	??_C@_0EK@CCNEIJPJ@Specified?5a?5mixbin?5the?5voice?5is?5@ ; `string'
PUBLIC	??_C@_0BM@BIDAHOAG@Invalid?5volume?5at?5index?5?$CFlu?$AA@ ; `string'
;	COMDAT ??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@
DSOUND_RD	SEGMENT
??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@ DB 'CDirectSoundVo'
	DB	'ice::SetMixBinVolumes', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@PELGAILP@Failed?5to?5supply?5any?5volume?5data@
DSOUND_RD	SEGMENT
??_C@_0CB@PELGAILP@Failed?5to?5supply?5any?5volume?5data@ DB 'Failed to s'
	DB	'upply any volume data', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@HLJGNGGL@Invalid?5mixbin?5count?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@HLJGNGGL@Invalid?5mixbin?5count?$AA@ DB 'Invalid mixbin count', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@CCNEIJPJ@Specified?5a?5mixbin?5the?5voice?5is?5@
DSOUND_RD	SEGMENT
??_C@_0EK@CCNEIJPJ@Specified?5a?5mixbin?5the?5voice?5is?5@ DB 'Specified '
	DB	'a mixbin the voice is not assigned to at index %lu (mixbin %l'
	DB	'u)', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@BIDAHOAG@Invalid?5volume?5at?5index?5?$CFlu?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@BIDAHOAG@Invalid?5volume?5at?5index?5?$CFlu?$AA@ DB 'Invalid vo'
	DB	'lume at index %lu', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMixBinVolumes@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z
DSOUND	SEGMENT
_hr$ = -12
_z$ = -8
_i$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetMixBinVolumes, COMDAT

; 6001 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 6002 :     HRESULT                 hr;
; 6003 : 
; 6004 : #ifdef VALIDATE_PARAMETERS
; 6005 : 
; 6006 :     DWORD                   i, z;
; 6007 : 
; 6008 : #endif // VALIDATE_PARAMETERS
; 6009 : 
; 6010 :     DPF_ENTER();
; 6011 : 
; 6012 : #ifdef VALIDATE_PARAMETERS
; 6013 : 
; 6014 :     if(!pMixBins)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pMixBins$[ebp], 0
  0000a	75 2d		 jne	 SHORT $L37460

; 6015 :     {
; 6016 :         DPF_ERROR("Failed to supply any volume data");

  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@
  00016	68 80 17 00 00	 push	 6016			; 00001780H
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00020	6a 01		 push	 1
  00022	6a 09		 push	 9
  00024	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00029	83 c4 18	 add	 esp, 24			; 00000018H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@PELGAILP@Failed?5to?5supply?5any?5volume?5data@
  00031	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00036	83 c4 04	 add	 esp, 4
$L37460:

; 6017 :     }
; 6018 : 
; 6019 :     if(pMixBins->dwMixBinCount > DSMIXBIN_ASSIGNMENT_MAX)

  00039	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  0003c	83 38 08	 cmp	 DWORD PTR [eax], 8
  0003f	76 2d		 jbe	 SHORT $L37463

; 6020 :     {
; 6021 :         DPF_ERROR("Invalid mixbin count");

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@
  0004b	68 85 17 00 00	 push	 6021			; 00001785H
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00055	6a 01		 push	 1
  00057	6a 09		 push	 9
  00059	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HLJGNGGL@Invalid?5mixbin?5count?$AA@
  00066	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0006b	83 c4 04	 add	 esp, 4
$L37463:

; 6022 :     }
; 6023 :     
; 6024 :     for(i = 0; i < pMixBins->dwMixBinCount; i++)

  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00075	eb 09		 jmp	 SHORT $L37465
$L37466:
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0007a	83 c1 01	 add	 ecx, 1
  0007d	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L37465:
  00080	8b 55 0c	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  00083	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00086	3b 02		 cmp	 eax, DWORD PTR [edx]
  00088	0f 83 e5 00 00
	00		 jae	 $L37467

; 6025 :     {
; 6026 :         for(z = 0; z < m_pSettings->m_dwMixBinCount; z++)

  0008e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _z$[ebp], 0
  00095	eb 09		 jmp	 SHORT $L37468
$L37469:
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  0009a	83 c1 01	 add	 ecx, 1
  0009d	89 4d f8	 mov	 DWORD PTR _z$[ebp], ecx
$L37468:
  000a0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  000a9	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  000ac	73 20		 jae	 SHORT $L37470

; 6027 :         {
; 6028 :             if(pMixBins->lpMixBinVolumePairs[i].dwMixBin == m_pSettings->m_abMixBins[z])

  000ae	8b 55 0c	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  000b1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  000bd	0f b6 54 0a 28	 movzx	 edx, BYTE PTR [edx+ecx+40]
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c5	39 14 c8	 cmp	 DWORD PTR [eax+ecx*8], edx
  000c8	75 02		 jne	 SHORT $L37471

; 6029 :             {
; 6030 :                 break;

  000ca	eb 02		 jmp	 SHORT $L37470
$L37471:

; 6031 :             }
; 6032 :         }

  000cc	eb c9		 jmp	 SHORT $L37469
$L37470:

; 6033 : 
; 6034 :         if(z >= m_pSettings->m_dwMixBinCount)

  000ce	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000d1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _z$[ebp]
  000d7	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  000da	72 3e		 jb	 SHORT $L37472

; 6035 :         {
; 6036 :             DPF_ERROR("Specified a mixbin the voice is not assigned to at index %lu (mixbin %lu)", i, pMixBins->lpMixBinVolumePairs[i].dwMixBin);

  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@
  000e6	68 94 17 00 00	 push	 6036			; 00001794H
  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000f0	6a 01		 push	 1
  000f2	6a 09		 push	 9
  000f4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000f9	83 c4 18	 add	 esp, 24			; 00000018H
  000fc	8b 55 0c	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  000ff	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00102	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00105	8b 14 c8	 mov	 edx, DWORD PTR [eax+ecx*8]
  00108	52		 push	 edx
  00109	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0010c	50		 push	 eax
  0010d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EK@CCNEIJPJ@Specified?5a?5mixbin?5the?5voice?5is?5@
  00112	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
$L37472:

; 6037 :         }
; 6038 :         
; 6039 :         if((pMixBins->lpMixBinVolumePairs[i].lVolume < DSBVOLUME_MIN) || (pMixBins->lpMixBinVolumePairs[i].lVolume > DSBVOLUME_MAX))

  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  0011d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00120	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00123	81 7c c2 04 f0
	d8 ff ff	 cmp	 DWORD PTR [edx+eax*8+4], -10000 ; ffffd8f0H
  0012b	7c 10		 jl	 SHORT $L37475
  0012d	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00130	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00133	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00136	83 7c c2 04 00	 cmp	 DWORD PTR [edx+eax*8+4], 0
  0013b	7e 31		 jle	 SHORT $L37474
$L37475:

; 6040 :         {
; 6041 :             DPF_ERROR("Invalid volume at index %lu", i);

  0013d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00142	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@EOLELOPB@CDirectSoundVoice?3?3SetMixBinVolu@
  00147	68 99 17 00 00	 push	 6041			; 00001799H
  0014c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00151	6a 01		 push	 1
  00153	6a 09		 push	 9
  00155	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0015a	83 c4 18	 add	 esp, 24			; 00000018H
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00160	51		 push	 ecx
  00161	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@BIDAHOAG@Invalid?5volume?5at?5index?5?$CFlu?$AA@
  00166	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0016b	83 c4 08	 add	 esp, 8
$L37474:

; 6042 :         }
; 6043 :     }

  0016e	e9 04 ff ff ff	 jmp	 $L37466
$L37467:

; 6044 : 
; 6045 : #endif // VALIDATE_PARAMETERS
; 6046 : 
; 6047 :     //
; 6048 :     // Update the volume
; 6049 :     //
; 6050 : 
; 6051 :     m_pSettings->SetMixBinVolumes(pMixBins);

  00173	8b 55 0c	 mov	 edx, DWORD PTR _pMixBins$[ebp]
  00176	52		 push	 edx
  00177	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0017a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0017d	e8 00 00 00 00	 call	 ?SetMixBinVolumes@CDirectSoundVoiceSettings@DirectSound@@QAEXPBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::SetMixBinVolumes

; 6052 : 
; 6053 :     //
; 6054 :     // Hand off to the implementation object
; 6055 :     //
; 6056 : 
; 6057 :     hr = m_pVoice->SetVolume();

  00182	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00188	e8 00 00 00 00	 call	 ?SetVolume@CMcpxVoiceClient@DirectSound@@QAEJXZ ; DirectSound::CMcpxVoiceClient::SetVolume
  0018d	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 6058 : 
; 6059 :     DPF_LEAVE_HRESULT(hr);
; 6060 : 
; 6061 :     return hr;

  00190	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 6062 : }

  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 08 00	 ret	 8
?SetMixBinVolumes@CDirectSoundVoice@DirectSound@@QAGJPBU_DSMIXBINS@@@Z ENDP ; DirectSound::CDirectSoundVoice::SetMixBinVolumes
DSOUND	ENDS
PUBLIC	??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@ ; `string'
PUBLIC	??_C@_0BI@JLMLOOEB@Parameters?5not?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BH@KBEADHF@Invalid?5structure?5size?$AA@	; `string'
PUBLIC	??_C@_0BJ@NCIONLNI@Invalid?5cone?5angle?5value?$AA@ ; `string'
PUBLIC	??_C@_0DA@BHNOOMMA@Inside?5cone?5angle?5can?8t?5be?5great@ ; `string'
PUBLIC	??_C@_0BJ@NEIBCMFO@Invalid?5cone?5orientation?$AA@ ; `string'
PUBLIC	??_C@_0BF@DLKDHIFC@Invalid?5volume?5level?$AA@	; `string'
PUBLIC	??_C@_0CO@NHMANPEN@Minimum?5and?5maximum?5distance?5mus@ ; `string'
PUBLIC	??_C@_0N@HLFHGGIB@Invalid?5mode?$AA@		; `string'
PUBLIC	??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@		; `string'
;	COMDAT ??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
DSOUND_RD	SEGMENT
??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@ DB 'CDirectSoundVoi'
	DB	'ce::SetAllParameters', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@JLMLOOEB@Parameters?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@JLMLOOEB@Parameters?5not?5supplied?$AA@ DB 'Parameters not supp'
	DB	'lied', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BH@KBEADHF@Invalid?5structure?5size?$AA@
DSOUND_RD	SEGMENT
??_C@_0BH@KBEADHF@Invalid?5structure?5size?$AA@ DB 'Invalid structure siz'
	DB	'e', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@NCIONLNI@Invalid?5cone?5angle?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@NCIONLNI@Invalid?5cone?5angle?5value?$AA@ DB 'Invalid cone angl'
	DB	'e value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@BHNOOMMA@Inside?5cone?5angle?5can?8t?5be?5great@
DSOUND_RD	SEGMENT
??_C@_0DA@BHNOOMMA@Inside?5cone?5angle?5can?8t?5be?5great@ DB 'Inside con'
	DB	'e angle can''t be greater than outside', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@NEIBCMFO@Invalid?5cone?5orientation?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@NEIBCMFO@Invalid?5cone?5orientation?$AA@ DB 'Invalid cone orien'
	DB	'tation', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@DLKDHIFC@Invalid?5volume?5level?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@DLKDHIFC@Invalid?5volume?5level?$AA@ DB 'Invalid volume level', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@NHMANPEN@Minimum?5and?5maximum?5distance?5mus@
DSOUND_RD	SEGMENT
??_C@_0CO@NHMANPEN@Minimum?5and?5maximum?5distance?5mus@ DB 'Minimum and '
	DB	'maximum distance must be non-zero', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0N@HLFHGGIB@Invalid?5mode?$AA@
DSOUND_RD	SEGMENT
??_C@_0N@HLFHGGIB@Invalid?5mode?$AA@ DB 'Invalid mode', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
DSOUND_RD	SEGMENT
??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@ DB '3D not enabled', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetAllParameters@CDirectSoundVoice@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z
DSOUND	SEGMENT
_this$ = 8
_pParams$ = 12
_dwFlags$ = 16
?SetAllParameters@CDirectSoundVoice@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetAllParameters, COMDAT

; 6092 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6093 :     DPF_ENTER();
; 6094 : 
; 6095 : #ifdef VALIDATE_PARAMETERS
; 6096 : 
; 6097 :     if(!pParams)

  00003	83 7d 0c 00	 cmp	 DWORD PTR _pParams$[ebp], 0
  00007	75 2d		 jne	 SHORT $L37482

; 6098 :     {
; 6099 :         DPF_ERROR("Parameters not supplied");

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00013	68 d3 17 00 00	 push	 6099			; 000017d3H
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001d	6a 01		 push	 1
  0001f	6a 09		 push	 9
  00021	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00026	83 c4 18	 add	 esp, 24			; 00000018H
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@JLMLOOEB@Parameters?5not?5supplied?$AA@
  0002e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00033	83 c4 04	 add	 esp, 4
$L37482:

; 6100 :     }
; 6101 : 
; 6102 :     if(pParams->dwSize < sizeof(*pParams))

  00036	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00039	83 38 4c	 cmp	 DWORD PTR [eax], 76	; 0000004cH
  0003c	73 2d		 jae	 SHORT $L37485

; 6103 :     {
; 6104 :         DPF_ERROR("Invalid structure size");

  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00048	68 d8 17 00 00	 push	 6104			; 000017d8H
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00052	6a 01		 push	 1
  00054	6a 09		 push	 9
  00056	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KBEADHF@Invalid?5structure?5size?$AA@
  00063	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00068	83 c4 04	 add	 esp, 4
$L37485:

; 6105 :     }
; 6106 : 
; 6107 :     if((pParams->dwInsideConeAngle < DS3D_MINCONEANGLE) || (pParams->dwInsideConeAngle > DS3D_MAXCONEANGLE) || (pParams->dwOutsideConeAngle < DS3D_MINCONEANGLE) || (pParams->dwOutsideConeAngle > DS3D_MAXCONEANGLE))

  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0006e	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00072	72 21		 jb	 SHORT $L37488
  00074	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00077	81 7a 1c 68 01
	00 00		 cmp	 DWORD PTR [edx+28], 360	; 00000168H
  0007e	77 15		 ja	 SHORT $L37488
  00080	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00083	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00087	72 0c		 jb	 SHORT $L37488
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0008c	81 79 20 68 01
	00 00		 cmp	 DWORD PTR [ecx+32], 360	; 00000168H
  00093	76 2d		 jbe	 SHORT $L37487
$L37488:

; 6108 :     {
; 6109 :         DPF_ERROR("Invalid cone angle value");

  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  0009f	68 dd 17 00 00	 push	 6109			; 000017ddH
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a9	6a 01		 push	 1
  000ab	6a 09		 push	 9
  000ad	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000b2	83 c4 18	 add	 esp, 24			; 00000018H
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@NCIONLNI@Invalid?5cone?5angle?5value?$AA@
  000ba	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000bf	83 c4 04	 add	 esp, 4
$L37487:

; 6110 :     }
; 6111 : 
; 6112 :     if(pParams->dwInsideConeAngle > pParams->dwOutsideConeAngle)

  000c2	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  000c5	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  000c8	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  000cb	3b 48 20	 cmp	 ecx, DWORD PTR [eax+32]
  000ce	76 2d		 jbe	 SHORT $L37490

; 6113 :     {
; 6114 :         DPF_ERROR("Inside cone angle can't be greater than outside");

  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  000da	68 e2 17 00 00	 push	 6114			; 000017e2H
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e4	6a 01		 push	 1
  000e6	6a 09		 push	 9
  000e8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ed	83 c4 18	 add	 esp, 24			; 00000018H
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@BHNOOMMA@Inside?5cone?5angle?5can?8t?5be?5great@
  000f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000fa	83 c4 04	 add	 esp, 4
$L37490:

; 6115 :     }
; 6116 : 
; 6117 :     if(!pParams->vConeOrientation.x && !pParams->vConeOrientation.y && !pParams->vConeOrientation.z)

  000fd	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00100	d9 42 24	 fld	 DWORD PTR [edx+36]
  00103	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00109	df e0		 fnstsw	 ax
  0010b	f6 c4 44	 test	 ah, 68			; 00000044H
  0010e	7a 53		 jp	 SHORT $L37492
  00110	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00113	d9 40 28	 fld	 DWORD PTR [eax+40]
  00116	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0011c	df e0		 fnstsw	 ax
  0011e	f6 c4 44	 test	 ah, 68			; 00000044H
  00121	7a 40		 jp	 SHORT $L37492
  00123	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00126	d9 41 2c	 fld	 DWORD PTR [ecx+44]
  00129	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0012f	df e0		 fnstsw	 ax
  00131	f6 c4 44	 test	 ah, 68			; 00000044H
  00134	7a 2d		 jp	 SHORT $L37492

; 6118 :     {
; 6119 :         DPF_ERROR("Invalid cone orientation");

  00136	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0013b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00140	68 e7 17 00 00	 push	 6119			; 000017e7H
  00145	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0014a	6a 01		 push	 1
  0014c	6a 09		 push	 9
  0014e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00153	83 c4 18	 add	 esp, 24			; 00000018H
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@NEIBCMFO@Invalid?5cone?5orientation?$AA@
  0015b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00160	83 c4 04	 add	 esp, 4
$L37492:

; 6120 :     }
; 6121 :     
; 6122 :     if((pParams->lConeOutsideVolume < DSBVOLUME_MIN) || (pParams->lConeOutsideVolume > DSBVOLUME_MAX))

  00163	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00166	81 7a 30 f0 d8
	ff ff		 cmp	 DWORD PTR [edx+48], -10000 ; ffffd8f0H
  0016d	7c 09		 jl	 SHORT $L37495
  0016f	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00172	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00176	7e 2d		 jle	 SHORT $L37494
$L37495:

; 6123 :     {
; 6124 :         DPF_ERROR("Invalid volume level");

  00178	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0017d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00182	68 ec 17 00 00	 push	 6124			; 000017ecH
  00187	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0018c	6a 01		 push	 1
  0018e	6a 09		 push	 9
  00190	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00195	83 c4 18	 add	 esp, 24			; 00000018H
  00198	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@DLKDHIFC@Invalid?5volume?5level?$AA@
  0019d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a2	83 c4 04	 add	 esp, 4
$L37494:

; 6125 :     }
; 6126 : 
; 6127 :     if(!pParams->flMinDistance || !pParams->flMaxDistance)

  001a5	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  001a8	d9 41 34	 fld	 DWORD PTR [ecx+52]
  001ab	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  001b1	df e0		 fnstsw	 ax
  001b3	f6 c4 44	 test	 ah, 68			; 00000044H
  001b6	7b 13		 jnp	 SHORT $L37498
  001b8	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  001bb	d9 42 38	 fld	 DWORD PTR [edx+56]
  001be	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  001c4	df e0		 fnstsw	 ax
  001c6	f6 c4 44	 test	 ah, 68			; 00000044H
  001c9	7a 2d		 jp	 SHORT $L37497
$L37498:

; 6128 :     {
; 6129 :         DPF_ERROR("Minimum and maximum distance must be non-zero");

  001cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  001d5	68 f1 17 00 00	 push	 6129			; 000017f1H
  001da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001df	6a 01		 push	 1
  001e1	6a 09		 push	 9
  001e3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001e8	83 c4 18	 add	 esp, 24			; 00000018H
  001eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@NHMANPEN@Minimum?5and?5maximum?5distance?5mus@
  001f0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001f5	83 c4 04	 add	 esp, 4
$L37497:

; 6130 :     }
; 6131 : 
; 6132 :     if((pParams->dwMode < DS3DMODE_FIRST) || (pParams->dwMode > DS3DMODE_LAST))

  001f8	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  001fb	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  001ff	72 09		 jb	 SHORT $L37501
  00201	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00204	83 79 3c 02	 cmp	 DWORD PTR [ecx+60], 2
  00208	76 2d		 jbe	 SHORT $L37500
$L37501:

; 6133 :     {
; 6134 :         DPF_ERROR("Invalid mode");

  0020a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0020f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00214	68 f6 17 00 00	 push	 6134			; 000017f6H
  00219	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0021e	6a 01		 push	 1
  00220	6a 09		 push	 9
  00222	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00227	83 c4 18	 add	 esp, 24			; 00000018H
  0022a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HLFHGGIB@Invalid?5mode?$AA@
  0022f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00234	83 c4 04	 add	 esp, 4
$L37500:

; 6135 :     }
; 6136 : 
; 6137 :     if((pParams->flDistanceFactor < DS3D_MINDISTANCEFACTOR) || (pParams->flDistanceFactor > DS3D_MAXDISTANCEFACTOR))

  00237	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0023a	d9 42 40	 fld	 DWORD PTR [edx+64]
  0023d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00800000
  00243	df e0		 fnstsw	 ax
  00245	f6 c4 05	 test	 ah, 5
  00248	7b 13		 jnp	 SHORT $L37504
  0024a	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0024d	d9 40 40	 fld	 DWORD PTR [eax+64]
  00250	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@7f7fffff
  00256	df e0		 fnstsw	 ax
  00258	f6 c4 41	 test	 ah, 65			; 00000041H
  0025b	75 2d		 jne	 SHORT $L37503
$L37504:

; 6138 :     {
; 6139 :         DPF_ERROR("Distance factor out of bounds");

  0025d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00262	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00267	68 fb 17 00 00	 push	 6139			; 000017fbH
  0026c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00271	6a 01		 push	 1
  00273	6a 09		 push	 9
  00275	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0027a	83 c4 18	 add	 esp, 24			; 00000018H
  0027d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@
  00282	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00287	83 c4 04	 add	 esp, 4
$L37503:

; 6140 :     }
; 6141 : 
; 6142 :     if((pParams->flDopplerFactor < DS3D_MINDOPPLERFACTOR) || (pParams->flDopplerFactor > DS3D_MAXDOPPLERFACTOR))

  0028a	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0028d	d9 41 48	 fld	 DWORD PTR [ecx+72]
  00290	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00296	df e0		 fnstsw	 ax
  00298	f6 c4 05	 test	 ah, 5
  0029b	7b 13		 jnp	 SHORT $L37506
  0029d	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  002a0	d9 42 48	 fld	 DWORD PTR [edx+72]
  002a3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  002a9	df e0		 fnstsw	 ax
  002ab	f6 c4 41	 test	 ah, 65			; 00000041H
  002ae	75 2d		 jne	 SHORT $L37505
$L37506:

; 6143 :     {
; 6144 :         DPF_ERROR("Doppler factor out of bounds");

  002b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  002ba	68 00 18 00 00	 push	 6144			; 00001800H
  002bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002c4	6a 01		 push	 1
  002c6	6a 09		 push	 9
  002c8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002cd	83 c4 18	 add	 esp, 24			; 00000018H
  002d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@
  002d5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002da	83 c4 04	 add	 esp, 4
$L37505:

; 6145 :     }
; 6146 : 
; 6147 :     if((pParams->flRolloffFactor < DS3D_MINROLLOFFFACTOR) || (pParams->flRolloffFactor > DS3D_MAXROLLOFFFACTOR))

  002dd	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  002e0	d9 40 44	 fld	 DWORD PTR [eax+68]
  002e3	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  002e9	df e0		 fnstsw	 ax
  002eb	f6 c4 05	 test	 ah, 5
  002ee	7b 13		 jnp	 SHORT $L37508
  002f0	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  002f3	d9 41 44	 fld	 DWORD PTR [ecx+68]
  002f6	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  002fc	df e0		 fnstsw	 ax
  002fe	f6 c4 41	 test	 ah, 65			; 00000041H
  00301	75 2d		 jne	 SHORT $L37507
$L37508:

; 6148 :     {
; 6149 :         DPF_ERROR("Rolloff factor out of bounds");

  00303	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00308	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  0030d	68 05 18 00 00	 push	 6149			; 00001805H
  00312	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00317	6a 01		 push	 1
  00319	6a 09		 push	 9
  0031b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00320	83 c4 18	 add	 esp, 24			; 00000018H
  00323	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@
  00328	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0032d	83 c4 04	 add	 esp, 4
$L37507:

; 6150 :     }
; 6151 : 
; 6152 :     if(dwFlags & ~DS3D_VALID)

  00330	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00333	83 e2 fe	 and	 edx, -2			; fffffffeH
  00336	85 d2		 test	 edx, edx
  00338	74 34		 je	 SHORT $L37509

; 6153 :     {
; 6154 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0033a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0033f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00344	68 0a 18 00 00	 push	 6154			; 0000180aH
  00349	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0034e	6a 01		 push	 1
  00350	6a 09		 push	 9
  00352	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00357	83 c4 18	 add	 esp, 24			; 00000018H
  0035a	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0035d	83 e0 fe	 and	 eax, -2			; fffffffeH
  00360	50		 push	 eax
  00361	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00366	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0036b	83 c4 08	 add	 esp, 8
$L37509:

; 6155 :     }
; 6156 : 
; 6157 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  0036e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00371	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00374	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00377	83 e0 10	 and	 eax, 16			; 00000010H
  0037a	85 c0		 test	 eax, eax
  0037c	75 2d		 jne	 SHORT $L37510

; 6158 :     {
; 6159 :         DPF_ERROR("3D not enabled");

  0037e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00383	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@HOMGIPI@CDirectSoundVoice?3?3SetAllParamet@
  00388	68 0f 18 00 00	 push	 6159			; 0000180fH
  0038d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00392	6a 01		 push	 1
  00394	6a 09		 push	 9
  00396	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0039b	83 c4 18	 add	 esp, 24			; 00000018H
  0039e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  003a3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003a8	83 c4 04	 add	 esp, 4
$L37510:

; 6160 :     }
; 6161 : 
; 6162 : #endif // VALIDATE_PARAMETERS
; 6163 : 
; 6164 :     m_pSettings->m_p3dParams->HrtfParams.vPosition.x = NormalizeFloat(pParams->vPosition.x);

  003ab	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  003ae	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003b1	52		 push	 edx
  003b2	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003b7	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  003ba	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003bd	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  003c3	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 6165 :     m_pSettings->m_p3dParams->HrtfParams.vPosition.y = NormalizeFloat(pParams->vPosition.y);

  003c6	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  003c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003cc	51		 push	 ecx
  003cd	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003d2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  003d5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003d8	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  003de	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 6166 :     m_pSettings->m_p3dParams->HrtfParams.vPosition.z = NormalizeFloat(pParams->vPosition.z);

  003e1	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  003e4	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003e7	50		 push	 eax
  003e8	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003ed	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003f0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003f3	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  003f9	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 6167 : 
; 6168 :     m_pSettings->m_p3dParams->HrtfParams.vVelocity.x = NormalizeFloat(pParams->vVelocity.x);

  003fc	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  003ff	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00402	52		 push	 edx
  00403	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00408	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0040b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0040e	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00414	d9 5a 10	 fstp	 DWORD PTR [edx+16]

; 6169 :     m_pSettings->m_p3dParams->HrtfParams.vVelocity.y = NormalizeFloat(pParams->vVelocity.y);

  00417	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0041a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00423	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00426	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00429	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0042f	d9 59 14	 fstp	 DWORD PTR [ecx+20]

; 6170 :     m_pSettings->m_p3dParams->HrtfParams.vVelocity.z = NormalizeFloat(pParams->vVelocity.z);

  00432	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00435	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00438	50		 push	 eax
  00439	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0043e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00441	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00444	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0044a	d9 58 18	 fstp	 DWORD PTR [eax+24]

; 6171 : 
; 6172 :     m_pSettings->m_p3dParams->HrtfParams.dwInsideConeAngle = pParams->dwInsideConeAngle;

  0044d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00450	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00453	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00459	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0045c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0045f	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 6173 :     m_pSettings->m_p3dParams->HrtfParams.dwOutsideConeAngle = pParams->dwOutsideConeAngle;

  00462	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00465	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00468	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  0046e	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00471	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00474	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 6174 : 
; 6175 :     m_pSettings->m_p3dParams->HrtfParams.vConeOrientation.x = NormalizeFloat(pParams->vConeOrientation.x);

  00477	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0047a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00483	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00486	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00489	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0048f	d9 58 24	 fstp	 DWORD PTR [eax+36]

; 6176 :     m_pSettings->m_p3dParams->HrtfParams.vConeOrientation.y = NormalizeFloat(pParams->vConeOrientation.y);

  00492	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00495	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00498	52		 push	 edx
  00499	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0049e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  004a1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  004a4	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  004aa	d9 5a 28	 fstp	 DWORD PTR [edx+40]

; 6177 :     m_pSettings->m_p3dParams->HrtfParams.vConeOrientation.z = NormalizeFloat(pParams->vConeOrientation.z);

  004ad	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  004b0	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  004b3	51		 push	 ecx
  004b4	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  004b9	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  004bc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004bf	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  004c5	d9 59 2c	 fstp	 DWORD PTR [ecx+44]

; 6178 : 
; 6179 :     m_pSettings->m_p3dParams->HrtfParams.lConeOutsideVolume = pParams->lConeOutsideVolume;

  004c8	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  004cb	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004ce	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  004d4	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  004d7	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  004da	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 6180 :     
; 6181 :     m_pSettings->m_p3dParams->HrtfParams.flMinDistance = NormalizeFloat(pParams->flMinDistance);

  004dd	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  004e0	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  004e3	52		 push	 edx
  004e4	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  004e9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  004ec	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  004ef	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  004f5	d9 5a 34	 fstp	 DWORD PTR [edx+52]

; 6182 :     m_pSettings->m_p3dParams->HrtfParams.flMaxDistance = NormalizeFloat(pParams->flMaxDistance);

  004f8	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  004fb	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  004fe	51		 push	 ecx
  004ff	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00504	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00507	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0050a	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00510	d9 59 38	 fstp	 DWORD PTR [ecx+56]

; 6183 :     
; 6184 :     m_pSettings->m_p3dParams->HrtfParams.dwMode = pParams->dwMode;

  00513	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00516	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00519	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0051f	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00522	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00525	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 6185 :     
; 6186 :     m_pSettings->m_p3dParams->HrtfParams.flDistanceFactor = NormalizeFloat(pParams->flDistanceFactor);

  00528	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0052b	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0052e	52		 push	 edx
  0052f	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00534	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00537	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0053a	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00540	d9 5a 40	 fstp	 DWORD PTR [edx+64]

; 6187 :     m_pSettings->m_p3dParams->HrtfParams.flRolloffFactor = NormalizeFloat(pParams->flRolloffFactor);

  00543	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00546	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00549	51		 push	 ecx
  0054a	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0054f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00552	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00555	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0055b	d9 59 44	 fstp	 DWORD PTR [ecx+68]

; 6188 :     m_pSettings->m_p3dParams->HrtfParams.flDopplerFactor = NormalizeFloat(pParams->flDopplerFactor);

  0055e	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00561	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0056a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0056d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00570	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00576	d9 58 48	 fstp	 DWORD PTR [eax+72]

; 6189 : 
; 6190 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_MASK;

  00579	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0057c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0057f	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00585	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00588	81 c9 ff 00 00
	00		 or	 ecx, 255		; 000000ffH
  0058e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00591	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00594	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  0059a	89 4a 78	 mov	 DWORD PTR [edx+120], ecx

; 6191 : 
; 6192 :     if(!(dwFlags & DS3D_DEFERRED))

  0059d	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  005a0	83 e0 01	 and	 eax, 1
  005a3	85 c0		 test	 eax, eax
  005a5	75 09		 jne	 SHORT $L37512

; 6193 :     {
; 6194 :         CommitDeferredSettings();

  005a7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  005aa	51		 push	 ecx
  005ab	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37512:

; 6195 :     }
; 6196 : 
; 6197 :     DPF_LEAVE_HRESULT(DS_OK);
; 6198 : 
; 6199 :     return DS_OK;

  005b0	33 c0		 xor	 eax, eax

; 6200 : }

  005b2	5d		 pop	 ebp
  005b3	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@CDirectSoundVoice@DirectSound@@QAGJPBU_DS3DBUFFER@@K@Z ENDP ; DirectSound::CDirectSoundVoice::SetAllParameters
DSOUND	ENDS
PUBLIC	??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@ ; `string'
;	COMDAT ??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@
DSOUND_RD	SEGMENT
??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@ DB 'CDirectSoundVo'
	DB	'ice::SetConeAngles', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeAngles@CDirectSoundVoice@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT
_this$ = 8
_dwInside$ = 12
_dwOutside$ = 16
_dwFlags$ = 20
?SetConeAngles@CDirectSoundVoice@DirectSound@@QAGJKKK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetConeAngles, COMDAT

; 6230 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6231 :     DPF_ENTER();
; 6232 : 
; 6233 : #ifdef VALIDATE_PARAMETERS
; 6234 : 
; 6235 :     if((dwInside < DS3D_MINCONEANGLE) || (dwInside > DS3D_MAXCONEANGLE) || (dwOutside < DS3D_MINCONEANGLE) || (dwOutside > DS3D_MAXCONEANGLE))

  00003	83 7d 0c 00	 cmp	 DWORD PTR _dwInside$[ebp], 0
  00007	72 18		 jb	 SHORT $L37521
  00009	81 7d 0c 68 01
	00 00		 cmp	 DWORD PTR _dwInside$[ebp], 360 ; 00000168H
  00010	77 0f		 ja	 SHORT $L37521
  00012	83 7d 10 00	 cmp	 DWORD PTR _dwOutside$[ebp], 0
  00016	72 09		 jb	 SHORT $L37521
  00018	81 7d 10 68 01
	00 00		 cmp	 DWORD PTR _dwOutside$[ebp], 360 ; 00000168H
  0001f	76 2d		 jbe	 SHORT $L37520
$L37521:

; 6236 :     {
; 6237 :         DPF_ERROR("Invalid cone angle value");

  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@
  0002b	68 5d 18 00 00	 push	 6237			; 0000185dH
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00035	6a 01		 push	 1
  00037	6a 09		 push	 9
  00039	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003e	83 c4 18	 add	 esp, 24			; 00000018H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@NCIONLNI@Invalid?5cone?5angle?5value?$AA@
  00046	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004b	83 c4 04	 add	 esp, 4
$L37520:

; 6238 :     }
; 6239 : 
; 6240 :     if(dwInside > dwOutside)

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _dwInside$[ebp]
  00051	3b 45 10	 cmp	 eax, DWORD PTR _dwOutside$[ebp]
  00054	76 2d		 jbe	 SHORT $L37523

; 6241 :     {
; 6242 :         DPF_ERROR("Inside cone angle can't be greater than outside");

  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@
  00060	68 62 18 00 00	 push	 6242			; 00001862H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	6a 01		 push	 1
  0006c	6a 09		 push	 9
  0006e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@BHNOOMMA@Inside?5cone?5angle?5can?8t?5be?5great@
  0007b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00080	83 c4 04	 add	 esp, 4
$L37523:

; 6243 :     }
; 6244 : 
; 6245 :     if(dwFlags & ~DS3D_VALID)

  00083	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00086	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00089	85 c9		 test	 ecx, ecx
  0008b	74 34		 je	 SHORT $L37524

; 6246 :     {
; 6247 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@
  00097	68 67 18 00 00	 push	 6247			; 00001867H
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a1	6a 01		 push	 1
  000a3	6a 09		 push	 9
  000a5	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000aa	83 c4 18	 add	 esp, 24			; 00000018H
  000ad	8b 55 14	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000b0	83 e2 fe	 and	 edx, -2			; fffffffeH
  000b3	52		 push	 edx
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000b9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000be	83 c4 08	 add	 esp, 8
$L37524:

; 6248 :     }
; 6249 : 
; 6250 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  000c1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ca	83 e2 10	 and	 edx, 16			; 00000010H
  000cd	85 d2		 test	 edx, edx
  000cf	75 2d		 jne	 SHORT $L37525

; 6251 :     {
; 6252 :         DPF_ERROR("3D not enabled");

  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@OOGMOKNP@CDirectSoundVoice?3?3SetConeAngles@
  000db	68 6c 18 00 00	 push	 6252			; 0000186cH
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e5	6a 01		 push	 1
  000e7	6a 09		 push	 9
  000e9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ee	83 c4 18	 add	 esp, 24			; 00000018H
  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  000f6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000fb	83 c4 04	 add	 esp, 4
$L37525:

; 6253 :     }
; 6254 : 
; 6255 : #endif // VALIDATE_PARAMETERS
; 6256 : 
; 6257 :     m_pSettings->m_p3dParams->HrtfParams.dwInsideConeAngle = dwInside;

  000fe	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00101	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00104	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  0010a	8b 45 0c	 mov	 eax, DWORD PTR _dwInside$[ebp]
  0010d	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 6258 :     m_pSettings->m_p3dParams->HrtfParams.dwOutsideConeAngle = dwOutside;

  00110	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00116	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0011c	8b 4d 10	 mov	 ecx, DWORD PTR _dwOutside$[ebp]
  0011f	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 6259 : 
; 6260 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_CONEANGLES;

  00122	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00125	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00128	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0012e	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00131	83 ca 10	 or	 edx, 16			; 00000010H
  00134	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00137	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0013a	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00140	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 6261 : 
; 6262 :     if(!(dwFlags & DS3D_DEFERRED))

  00143	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00146	83 e1 01	 and	 ecx, 1
  00149	85 c9		 test	 ecx, ecx
  0014b	75 09		 jne	 SHORT $L37526

; 6263 :     {
; 6264 :         CommitDeferredSettings();

  0014d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37526:

; 6265 :     }
; 6266 : 
; 6267 :     DPF_LEAVE_HRESULT(DS_OK);
; 6268 : 
; 6269 :     return DS_OK;

  00156	33 c0		 xor	 eax, eax

; 6270 : }

  00158	5d		 pop	 ebp
  00159	c2 10 00	 ret	 16			; 00000010H
?SetConeAngles@CDirectSoundVoice@DirectSound@@QAGJKKK@Z ENDP ; DirectSound::CDirectSoundVoice::SetConeAngles
DSOUND	ENDS
PUBLIC	??_C@_0CG@GFAMGMJN@CDirectSoundVoice?3?3SetConeOrient@ ; `string'
;	COMDAT ??_C@_0CG@GFAMGMJN@CDirectSoundVoice?3?3SetConeOrient@
DSOUND_RD	SEGMENT
??_C@_0CG@GFAMGMJN@CDirectSoundVoice?3?3SetConeOrient@ DB 'CDirectSoundVo'
	DB	'ice::SetConeOrientation', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeOrientation@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
_this$ = 8
_flOrientationX$ = 12
_flOrientationY$ = 16
_flOrientationZ$ = 20
_dwFlags$ = 24
?SetConeOrientation@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetConeOrientation, COMDAT

; 6300 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6301 :     DPF_ENTER();
; 6302 : 
; 6303 : #ifdef VALIDATE_PARAMETERS
; 6304 : 
; 6305 :     if(!flOrientationX && !flOrientationY && !flOrientationZ)

  00003	d9 45 0c	 fld	 DWORD PTR _flOrientationX$[ebp]
  00006	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0000c	df e0		 fnstsw	 ax
  0000e	f6 c4 44	 test	 ah, 68			; 00000044H
  00011	7a 4d		 jp	 SHORT $L37535
  00013	d9 45 10	 fld	 DWORD PTR _flOrientationY$[ebp]
  00016	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0001c	df e0		 fnstsw	 ax
  0001e	f6 c4 44	 test	 ah, 68			; 00000044H
  00021	7a 3d		 jp	 SHORT $L37535
  00023	d9 45 14	 fld	 DWORD PTR _flOrientationZ$[ebp]
  00026	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0002c	df e0		 fnstsw	 ax
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 2d		 jp	 SHORT $L37535

; 6306 :     {
; 6307 :         DPF_ERROR("Invalid cone orientation");

  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@GFAMGMJN@CDirectSoundVoice?3?3SetConeOrient@
  0003d	68 a3 18 00 00	 push	 6307			; 000018a3H
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00047	6a 01		 push	 1
  00049	6a 09		 push	 9
  0004b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00050	83 c4 18	 add	 esp, 24			; 00000018H
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@NEIBCMFO@Invalid?5cone?5orientation?$AA@
  00058	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0005d	83 c4 04	 add	 esp, 4
$L37535:

; 6308 :     }
; 6309 :     
; 6310 :     if(dwFlags & ~DS3D_VALID)

  00060	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00063	83 e0 fe	 and	 eax, -2			; fffffffeH
  00066	85 c0		 test	 eax, eax
  00068	74 34		 je	 SHORT $L37537

; 6311 :     {
; 6312 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@GFAMGMJN@CDirectSoundVoice?3?3SetConeOrient@
  00074	68 a8 18 00 00	 push	 6312			; 000018a8H
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0007e	6a 01		 push	 1
  00080	6a 09		 push	 9
  00082	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00087	83 c4 18	 add	 esp, 24			; 00000018H
  0008a	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0008d	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00090	51		 push	 ecx
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00096	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0009b	83 c4 08	 add	 esp, 8
$L37537:

; 6313 :     }
; 6314 : 
; 6315 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  0009e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a7	83 e1 10	 and	 ecx, 16			; 00000010H
  000aa	85 c9		 test	 ecx, ecx
  000ac	75 2d		 jne	 SHORT $L37538

; 6316 :     {
; 6317 :         DPF_ERROR("3D not enabled");

  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@GFAMGMJN@CDirectSoundVoice?3?3SetConeOrient@
  000b8	68 ad 18 00 00	 push	 6317			; 000018adH
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c2	6a 01		 push	 1
  000c4	6a 09		 push	 9
  000c6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000cb	83 c4 18	 add	 esp, 24			; 00000018H
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  000d3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d8	83 c4 04	 add	 esp, 4
$L37538:

; 6318 :     }
; 6319 : 
; 6320 : #endif // VALIDATE_PARAMETERS
; 6321 : 
; 6322 :     m_pSettings->m_p3dParams->HrtfParams.vConeOrientation.x = NormalizeFloat(flOrientationX);

  000db	8b 55 0c	 mov	 edx, DWORD PTR _flOrientationX$[ebp]
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000e4	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ea	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000f0	d9 5a 24	 fstp	 DWORD PTR [edx+36]

; 6323 :     m_pSettings->m_p3dParams->HrtfParams.vConeOrientation.y = NormalizeFloat(flOrientationY);

  000f3	8b 45 10	 mov	 eax, DWORD PTR _flOrientationY$[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00102	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00108	d9 58 28	 fstp	 DWORD PTR [eax+40]

; 6324 :     m_pSettings->m_p3dParams->HrtfParams.vConeOrientation.z = NormalizeFloat(flOrientationZ);

  0010b	8b 4d 14	 mov	 ecx, DWORD PTR _flOrientationZ$[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00114	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00117	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0011a	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00120	d9 59 2c	 fstp	 DWORD PTR [ecx+44]

; 6325 : 
; 6326 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_CONEORIENTATION;

  00123	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00126	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00129	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  0012f	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00132	83 ca 18	 or	 edx, 24			; 00000018H
  00135	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00138	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0013b	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00141	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 6327 : 
; 6328 :     if(!(dwFlags & DS3D_DEFERRED))

  00144	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00147	83 e1 01	 and	 ecx, 1
  0014a	85 c9		 test	 ecx, ecx
  0014c	75 09		 jne	 SHORT $L37539

; 6329 :     {
; 6330 :         CommitDeferredSettings();

  0014e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00151	52		 push	 edx
  00152	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37539:

; 6331 :     }
; 6332 : 
; 6333 :     DPF_LEAVE_HRESULT(DS_OK);
; 6334 : 
; 6335 :     return DS_OK;

  00157	33 c0		 xor	 eax, eax

; 6336 : }

  00159	5d		 pop	 ebp
  0015a	c2 14 00	 ret	 20			; 00000014H
?SetConeOrientation@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetConeOrientation
DSOUND	ENDS
PUBLIC	??_C@_0CI@PFHMKJGP@CDirectSoundVoice?3?3SetConeOutsid@ ; `string'
;	COMDAT ??_C@_0CI@PFHMKJGP@CDirectSoundVoice?3?3SetConeOutsid@
DSOUND_RD	SEGMENT
??_C@_0CI@PFHMKJGP@CDirectSoundVoice?3?3SetConeOutsid@ DB 'CDirectSoundVo'
	DB	'ice::SetConeOutsideVolume', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetConeOutsideVolume@CDirectSoundVoice@DirectSound@@QAGJJK@Z
DSOUND	SEGMENT
_this$ = 8
_lVolume$ = 12
_dwFlags$ = 16
?SetConeOutsideVolume@CDirectSoundVoice@DirectSound@@QAGJJK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetConeOutsideVolume, COMDAT

; 6364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6365 :     DPF_ENTER();
; 6366 : 
; 6367 : #ifdef VALIDATE_PARAMETERS
; 6368 : 
; 6369 :     if((lVolume < DSBVOLUME_MIN) || (lVolume > DSBVOLUME_MAX))

  00003	81 7d 0c f0 d8
	ff ff		 cmp	 DWORD PTR _lVolume$[ebp], -10000 ; ffffd8f0H
  0000a	7c 06		 jl	 SHORT $L37547
  0000c	83 7d 0c 00	 cmp	 DWORD PTR _lVolume$[ebp], 0
  00010	7e 2d		 jle	 SHORT $L37546
$L37547:

; 6370 :     {
; 6371 :         DPF_ERROR("Invalid volume level");

  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@PFHMKJGP@CDirectSoundVoice?3?3SetConeOutsid@
  0001c	68 e3 18 00 00	 push	 6371			; 000018e3H
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00026	6a 01		 push	 1
  00028	6a 09		 push	 9
  0002a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0002f	83 c4 18	 add	 esp, 24			; 00000018H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@DLKDHIFC@Invalid?5volume?5level?$AA@
  00037	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003c	83 c4 04	 add	 esp, 4
$L37546:

; 6372 :     }
; 6373 : 
; 6374 :     if(dwFlags & ~DS3D_VALID)

  0003f	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00042	83 e0 fe	 and	 eax, -2			; fffffffeH
  00045	85 c0		 test	 eax, eax
  00047	74 34		 je	 SHORT $L37549

; 6375 :     {
; 6376 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@PFHMKJGP@CDirectSoundVoice?3?3SetConeOutsid@
  00053	68 e8 18 00 00	 push	 6376			; 000018e8H
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005d	6a 01		 push	 1
  0005f	6a 09		 push	 9
  00061	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0006c	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0006f	51		 push	 ecx
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00075	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007a	83 c4 08	 add	 esp, 8
$L37549:

; 6377 :     }
; 6378 : 
; 6379 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  0007d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00080	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00083	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00086	83 e1 10	 and	 ecx, 16			; 00000010H
  00089	85 c9		 test	 ecx, ecx
  0008b	75 2d		 jne	 SHORT $L37550

; 6380 :     {
; 6381 :         DPF_ERROR("3D not enabled");

  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@PFHMKJGP@CDirectSoundVoice?3?3SetConeOutsid@
  00097	68 ed 18 00 00	 push	 6381			; 000018edH
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a1	6a 01		 push	 1
  000a3	6a 09		 push	 9
  000a5	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000aa	83 c4 18	 add	 esp, 24			; 00000018H
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  000b2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b7	83 c4 04	 add	 esp, 4
$L37550:

; 6382 :     }
; 6383 : 
; 6384 : #endif // VALIDATE_PARAMETERS
; 6385 : 
; 6386 :     m_pSettings->m_p3dParams->HrtfParams.lConeOutsideVolume = lVolume;

  000ba	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000bd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000c0	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000c6	8b 55 0c	 mov	 edx, DWORD PTR _lVolume$[ebp]
  000c9	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 6387 : 
; 6388 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_CONEOUTSIDEVOLUME;

  000cc	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d2	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000d8	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  000db	83 c8 10	 or	 eax, 16			; 00000010H
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e4	8b 8a b4 00 00
	00		 mov	 ecx, DWORD PTR [edx+180]
  000ea	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 6389 : 
; 6390 :     if(!(dwFlags & DS3D_DEFERRED))

  000ed	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000f0	83 e2 01	 and	 edx, 1
  000f3	85 d2		 test	 edx, edx
  000f5	75 09		 jne	 SHORT $L37551

; 6391 :     {
; 6392 :         CommitDeferredSettings();

  000f7	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37551:

; 6393 :     }
; 6394 : 
; 6395 :     DPF_LEAVE_HRESULT(DS_OK);
; 6396 : 
; 6397 :     return DS_OK;

  00100	33 c0		 xor	 eax, eax

; 6398 : }

  00102	5d		 pop	 ebp
  00103	c2 0c 00	 ret	 12			; 0000000cH
?SetConeOutsideVolume@CDirectSoundVoice@DirectSound@@QAGJJK@Z ENDP ; DirectSound::CDirectSoundVoice::SetConeOutsideVolume
DSOUND	ENDS
PUBLIC	__real@021fffd9
PUBLIC	??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@ ; `string'
PUBLIC	??_C@_0BL@ODHMFJI@Invalid?5max?5distance?5value?$AA@ ; `string'
PUBLIC	??_C@_0CH@FELEFEMJ@flMaxDistance?5must?5be?5?$DO?$DN?5flMinDi@ ; `string'
;	COMDAT __real@021fffd9
CONST	SEGMENT
__real@021fffd9 DD 0021fffd9r			; 1.17549e-037
CONST	ENDS
;	COMDAT ??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@
DSOUND_RD	SEGMENT
??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@ DB 'CDirectSoundVo'
	DB	'ice::SetMaxDistance', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@ODHMFJI@Invalid?5max?5distance?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@ODHMFJI@Invalid?5max?5distance?5value?$AA@ DB 'Invalid max dist'
	DB	'ance value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@FELEFEMJ@flMaxDistance?5must?5be?5?$DO?$DN?5flMinDi@
DSOUND_RD	SEGMENT
??_C@_0CH@FELEFEMJ@flMaxDistance?5must?5be?5?$DO?$DN?5flMinDi@ DB 'flMaxD'
	DB	'istance must be >= flMinDistance', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMaxDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
_this$ = 8
_flMaxDistance$ = 12
_dwFlags$ = 16
?SetMaxDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetMaxDistance, COMDAT

; 6426 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6427 :     DPF_ENTER();
; 6428 : 
; 6429 : #ifdef VALIDATE_PARAMETERS
; 6430 : 
; 6431 :     if((flMaxDistance < DS3D_MINMAXDISTANCE) || (flMaxDistance > DS3D_MAXMAXDISTANCE))

  00003	d9 45 0c	 fld	 DWORD PTR _flMaxDistance$[ebp]
  00006	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@021fffd9
  0000c	df e0		 fnstsw	 ax
  0000e	f6 c4 05	 test	 ah, 5
  00011	7b 10		 jnp	 SHORT $L37559
  00013	d9 45 0c	 fld	 DWORD PTR _flMaxDistance$[ebp]
  00016	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@7f7fffff
  0001c	df e0		 fnstsw	 ax
  0001e	f6 c4 41	 test	 ah, 65			; 00000041H
  00021	75 2d		 jne	 SHORT $L37558
$L37559:

; 6432 :     {
; 6433 :         DPF_ERROR("Invalid max distance value");

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@
  0002d	68 21 19 00 00	 push	 6433			; 00001921H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00037	6a 01		 push	 1
  00039	6a 09		 push	 9
  0003b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00040	83 c4 18	 add	 esp, 24			; 00000018H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ODHMFJI@Invalid?5max?5distance?5value?$AA@
  00048	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004d	83 c4 04	 add	 esp, 4
$L37558:

; 6434 :     }
; 6435 : 
; 6436 :     if(dwFlags & ~DS3D_VALID)

  00050	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00053	83 e0 fe	 and	 eax, -2			; fffffffeH
  00056	85 c0		 test	 eax, eax
  00058	74 34		 je	 SHORT $L37562

; 6437 :     {
; 6438 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@
  00064	68 26 19 00 00	 push	 6438			; 00001926H
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006e	6a 01		 push	 1
  00070	6a 09		 push	 9
  00072	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00077	83 c4 18	 add	 esp, 24			; 00000018H
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0007d	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00086	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008b	83 c4 08	 add	 esp, 8
$L37562:

; 6439 :     }
; 6440 : 
; 6441 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  0008e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00091	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00094	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00097	83 e1 10	 and	 ecx, 16			; 00000010H
  0009a	85 c9		 test	 ecx, ecx
  0009c	75 2d		 jne	 SHORT $L37563

; 6442 :     {
; 6443 :         DPF_ERROR("3D not enabled");

  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@
  000a8	68 2b 19 00 00	 push	 6443			; 0000192bH
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000b2	6a 01		 push	 1
  000b4	6a 09		 push	 9
  000b6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000bb	83 c4 18	 add	 esp, 24			; 00000018H
  000be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  000c3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000c8	83 c4 04	 add	 esp, 4
$L37563:

; 6444 :     }
; 6445 : 
; 6446 :     if(flMaxDistance < m_pSettings->m_p3dParams->HrtfParams.flMinDistance)

  000cb	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ce	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d1	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000d7	d9 45 0c	 fld	 DWORD PTR _flMaxDistance$[ebp]
  000da	d8 59 34	 fcomp	 DWORD PTR [ecx+52]
  000dd	df e0		 fnstsw	 ax
  000df	f6 c4 05	 test	 ah, 5
  000e2	7a 2d		 jp	 SHORT $L37564

; 6447 :     {
; 6448 :         DPF_ERROR("flMaxDistance must be >= flMinDistance");

  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@JABKLHAC@CDirectSoundVoice?3?3SetMaxDistanc@
  000ee	68 30 19 00 00	 push	 6448			; 00001930H
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000f8	6a 01		 push	 1
  000fa	6a 09		 push	 9
  000fc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00101	83 c4 18	 add	 esp, 24			; 00000018H
  00104	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@FELEFEMJ@flMaxDistance?5must?5be?5?$DO?$DN?5flMinDi@
  00109	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0010e	83 c4 04	 add	 esp, 4
$L37564:

; 6449 :     }
; 6450 : 
; 6451 : #endif // VALIDATE_PARAMETERS
; 6452 : 
; 6453 :     m_pSettings->m_p3dParams->HrtfParams.flMaxDistance = NormalizeFloat(flMaxDistance);

  00111	8b 55 0c	 mov	 edx, DWORD PTR _flMaxDistance$[ebp]
  00114	52		 push	 edx
  00115	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0011a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00120	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00126	d9 5a 38	 fstp	 DWORD PTR [edx+56]

; 6454 : 
; 6455 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_MAXDISTANCE;

  00129	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0012c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0012f	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00135	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00138	83 c8 04	 or	 eax, 4
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0013e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00141	8b 8a b4 00 00
	00		 mov	 ecx, DWORD PTR [edx+180]
  00147	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 6456 : 
; 6457 :     if(!(dwFlags & DS3D_DEFERRED))

  0014a	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0014d	83 e2 01	 and	 edx, 1
  00150	85 d2		 test	 edx, edx
  00152	75 09		 jne	 SHORT $L37566

; 6458 :     {
; 6459 :         CommitDeferredSettings();

  00154	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37566:

; 6460 :     }
; 6461 : 
; 6462 :     DPF_LEAVE_HRESULT(DS_OK);
; 6463 : 
; 6464 :     return DS_OK;

  0015d	33 c0		 xor	 eax, eax

; 6465 : }

  0015f	5d		 pop	 ebp
  00160	c2 0c 00	 ret	 12			; 0000000cH
?SetMaxDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetMaxDistance
DSOUND	ENDS
PUBLIC	??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@ ; `string'
PUBLIC	??_C@_0BL@KJADEFOB@Invalid?5min?5distance?5value?$AA@ ; `string'
PUBLIC	??_C@_0CD@HBGDLNMF@MinDistance?5must?5be?5?$DM?$DN?5MaxDistan@ ; `string'
;	COMDAT ??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@
DSOUND_RD	SEGMENT
??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@ DB 'CDirectSoundVoic'
	DB	'e::SetMinDistance', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@KJADEFOB@Invalid?5min?5distance?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@KJADEFOB@Invalid?5min?5distance?5value?$AA@ DB 'Invalid min dis'
	DB	'tance value', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@HBGDLNMF@MinDistance?5must?5be?5?$DM?$DN?5MaxDistan@
DSOUND_RD	SEGMENT
??_C@_0CD@HBGDLNMF@MinDistance?5must?5be?5?$DM?$DN?5MaxDistan@ DB 'MinDis'
	DB	'tance must be <= MaxDistance', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMinDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
_this$ = 8
_flMinDistance$ = 12
_dwFlags$ = 16
?SetMinDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetMinDistance, COMDAT

; 6493 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6494 :     HRESULT                 hr;
; 6495 : 
; 6496 :     DPF_ENTER();
; 6497 : 
; 6498 : #ifdef VALIDATE_PARAMETERS
; 6499 : 
; 6500 :     if((flMinDistance < DS3D_MINMINDISTANCE) || (flMinDistance > DS3D_MAXMINDISTANCE))

  00004	d9 45 0c	 fld	 DWORD PTR _flMinDistance$[ebp]
  00007	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@021fffd9
  0000d	df e0		 fnstsw	 ax
  0000f	f6 c4 05	 test	 ah, 5
  00012	7b 10		 jnp	 SHORT $L37575
  00014	d9 45 0c	 fld	 DWORD PTR _flMinDistance$[ebp]
  00017	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@7f7fffff
  0001d	df e0		 fnstsw	 ax
  0001f	f6 c4 41	 test	 ah, 65			; 00000041H
  00022	75 2d		 jne	 SHORT $L37574
$L37575:

; 6501 :     {
; 6502 :         DPF_ERROR("Invalid min distance value");

  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@
  0002e	68 66 19 00 00	 push	 6502			; 00001966H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00038	6a 01		 push	 1
  0003a	6a 09		 push	 9
  0003c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@KJADEFOB@Invalid?5min?5distance?5value?$AA@
  00049	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004e	83 c4 04	 add	 esp, 4
$L37574:

; 6503 :     }
; 6504 : 
; 6505 :     if(dwFlags & ~DS3D_VALID)

  00051	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00054	83 e0 fe	 and	 eax, -2			; fffffffeH
  00057	85 c0		 test	 eax, eax
  00059	74 34		 je	 SHORT $L37578

; 6506 :     {
; 6507 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@
  00065	68 6b 19 00 00	 push	 6507			; 0000196bH
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006f	6a 01		 push	 1
  00071	6a 09		 push	 9
  00073	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0007e	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00081	51		 push	 ecx
  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00087	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008c	83 c4 08	 add	 esp, 8
$L37578:

; 6508 :     }
; 6509 : 
; 6510 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  0008f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00095	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00098	83 e1 10	 and	 ecx, 16			; 00000010H
  0009b	85 c9		 test	 ecx, ecx
  0009d	75 2d		 jne	 SHORT $L37579

; 6511 :     {
; 6512 :         DPF_ERROR("3D not enabled");

  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@
  000a9	68 70 19 00 00	 push	 6512			; 00001970H
  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000b3	6a 01		 push	 1
  000b5	6a 09		 push	 9
  000b7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000bc	83 c4 18	 add	 esp, 24			; 00000018H
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  000c4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000c9	83 c4 04	 add	 esp, 4
$L37579:

; 6513 :     }
; 6514 : 
; 6515 :     if(flMinDistance > m_pSettings->m_p3dParams->HrtfParams.flMaxDistance)

  000cc	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d2	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000d8	d9 45 0c	 fld	 DWORD PTR _flMinDistance$[ebp]
  000db	d8 59 38	 fcomp	 DWORD PTR [ecx+56]
  000de	df e0		 fnstsw	 ax
  000e0	f6 c4 41	 test	 ah, 65			; 00000041H
  000e3	75 2d		 jne	 SHORT $L37580

; 6516 :     {
; 6517 :         DPF_ERROR("MinDistance must be <= MaxDistance");

  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@GJKHOI@CDirectSoundVoice?3?3SetMinDistanc@
  000ef	68 75 19 00 00	 push	 6517			; 00001975H
  000f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000f9	6a 01		 push	 1
  000fb	6a 09		 push	 9
  000fd	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00102	83 c4 18	 add	 esp, 24			; 00000018H
  00105	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@HBGDLNMF@MinDistance?5must?5be?5?$DM?$DN?5MaxDistan@
  0010a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0010f	83 c4 04	 add	 esp, 4
$L37580:

; 6518 :     }
; 6519 : 
; 6520 : #endif // VALIDATE_PARAMETERS
; 6521 : 
; 6522 :     m_pSettings->m_p3dParams->HrtfParams.flMinDistance = NormalizeFloat(flMinDistance);

  00112	8b 55 0c	 mov	 edx, DWORD PTR _flMinDistance$[ebp]
  00115	52		 push	 edx
  00116	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0011b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00121	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00127	d9 5a 34	 fstp	 DWORD PTR [edx+52]

; 6523 : 
; 6524 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_MINDISTANCE;

  0012a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00130	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00136	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00139	83 c8 04	 or	 eax, 4
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00142	8b 8a b4 00 00
	00		 mov	 ecx, DWORD PTR [edx+180]
  00148	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 6525 : 
; 6526 :     if(!(dwFlags & DS3D_DEFERRED))

  0014b	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0014e	83 e2 01	 and	 edx, 1
  00151	85 d2		 test	 edx, edx
  00153	75 09		 jne	 SHORT $L37582

; 6527 :     {
; 6528 :         CommitDeferredSettings();

  00155	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37582:

; 6529 :     }
; 6530 : 
; 6531 :     DPF_LEAVE_HRESULT(DS_OK);
; 6532 : 
; 6533 :     return DS_OK;

  0015e	33 c0		 xor	 eax, eax

; 6534 : }

  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 0c 00	 ret	 12			; 0000000cH
?SetMinDistance@CDirectSoundVoice@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetMinDistance
DSOUND	ENDS
PUBLIC	??_C@_0BL@NIDEAOHK@CDirectSoundVoice?3?3SetMode?$AA@ ; `string'
;	COMDAT ??_C@_0BL@NIDEAOHK@CDirectSoundVoice?3?3SetMode?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@NIDEAOHK@CDirectSoundVoice?3?3SetMode?$AA@ DB 'CDirectSoundVoic'
	DB	'e::SetMode', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetMode@CDirectSoundVoice@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT
_this$ = 8
_dwMode$ = 12
_dwFlags$ = 16
?SetMode@CDirectSoundVoice@DirectSound@@QAGJKK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetMode, COMDAT

; 6562 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6563 :     DPF_ENTER();
; 6564 : 
; 6565 : #ifdef VALIDATE_PARAMETERS
; 6566 : 
; 6567 :     if((dwMode < DS3DMODE_FIRST) || (dwMode > DS3DMODE_LAST))

  00003	83 7d 0c 00	 cmp	 DWORD PTR _dwMode$[ebp], 0
  00007	72 06		 jb	 SHORT $L37590
  00009	83 7d 0c 02	 cmp	 DWORD PTR _dwMode$[ebp], 2
  0000d	76 2d		 jbe	 SHORT $L37589
$L37590:

; 6568 :     {
; 6569 :         DPF_ERROR("Invalid mode");

  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@NIDEAOHK@CDirectSoundVoice?3?3SetMode?$AA@
  00019	68 a9 19 00 00	 push	 6569			; 000019a9H
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00023	6a 01		 push	 1
  00025	6a 09		 push	 9
  00027	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0002c	83 c4 18	 add	 esp, 24			; 00000018H
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HLFHGGIB@Invalid?5mode?$AA@
  00034	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00039	83 c4 04	 add	 esp, 4
$L37589:

; 6570 :     }
; 6571 :     
; 6572 :     if(dwFlags & ~DS3D_VALID)

  0003c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0003f	83 e0 fe	 and	 eax, -2			; fffffffeH
  00042	85 c0		 test	 eax, eax
  00044	74 34		 je	 SHORT $L37592

; 6573 :     {
; 6574 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@NIDEAOHK@CDirectSoundVoice?3?3SetMode?$AA@
  00050	68 ae 19 00 00	 push	 6574			; 000019aeH
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005a	6a 01		 push	 1
  0005c	6a 09		 push	 9
  0005e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00063	83 c4 18	 add	 esp, 24			; 00000018H
  00066	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00069	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0006c	51		 push	 ecx
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00072	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00077	83 c4 08	 add	 esp, 8
$L37592:

; 6575 :     }
; 6576 : 
; 6577 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  0007a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00080	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00083	83 e1 10	 and	 ecx, 16			; 00000010H
  00086	85 c9		 test	 ecx, ecx
  00088	75 2d		 jne	 SHORT $L37593

; 6578 :     {
; 6579 :         DPF_ERROR("3D not enabled");

  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@NIDEAOHK@CDirectSoundVoice?3?3SetMode?$AA@
  00094	68 b3 19 00 00	 push	 6579			; 000019b3H
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0009e	6a 01		 push	 1
  000a0	6a 09		 push	 9
  000a2	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a7	83 c4 18	 add	 esp, 24			; 00000018H
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  000af	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b4	83 c4 04	 add	 esp, 4
$L37593:

; 6580 :     }
; 6581 : 
; 6582 : #endif // VALIDATE_PARAMETERS
; 6583 : 
; 6584 :     //
; 6585 :     // There is no parameter bit for mode since what's recalculated is based
; 6586 :     // on the mode change
; 6587 :     //
; 6588 :     
; 6589 :     m_pSettings->m_p3dParams->HrtfParams.dwMode = dwMode;

  000b7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000bd	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000c3	8b 55 0c	 mov	 edx, DWORD PTR _dwMode$[ebp]
  000c6	89 51 3c	 mov	 DWORD PTR [ecx+60], edx

; 6590 : 
; 6591 :     if(!(dwFlags & DS3D_DEFERRED))

  000c9	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000cc	83 e0 01	 and	 eax, 1
  000cf	85 c0		 test	 eax, eax
  000d1	75 09		 jne	 SHORT $L37594

; 6592 :     {
; 6593 :         CommitDeferredSettings();

  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	51		 push	 ecx
  000d7	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37594:

; 6594 :     }
; 6595 : 
; 6596 :     DPF_LEAVE_HRESULT(DS_OK);
; 6597 : 
; 6598 :     return DS_OK;

  000dc	33 c0		 xor	 eax, eax

; 6599 : }

  000de	5d		 pop	 ebp
  000df	c2 0c 00	 ret	 12			; 0000000cH
?SetMode@CDirectSoundVoice@DirectSound@@QAGJKK@Z ENDP	; DirectSound::CDirectSoundVoice::SetMode
DSOUND	ENDS
PUBLIC	??_C@_0BP@EHIDDHEM@CDirectSoundVoice?3?3SetPosition?$AA@ ; `string'
;	COMDAT ??_C@_0BP@EHIDDHEM@CDirectSoundVoice?3?3SetPosition?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@EHIDDHEM@CDirectSoundVoice?3?3SetPosition?$AA@ DB 'CDirectSound'
	DB	'Voice::SetPosition', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPosition@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
_this$ = 8
_flPositionX$ = 12
_flPositionY$ = 16
_flPositionZ$ = 20
_dwFlags$ = 24
?SetPosition@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetPosition, COMDAT

; 6629 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6630 :     DPF_ENTER();
; 6631 : 
; 6632 : #ifdef VALIDATE_PARAMETERS
; 6633 : 
; 6634 :     if(dwFlags & ~DS3D_VALID)

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	83 e0 fe	 and	 eax, -2			; fffffffeH
  00009	85 c0		 test	 eax, eax
  0000b	74 34		 je	 SHORT $L37603

; 6635 :     {
; 6636 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@EHIDDHEM@CDirectSoundVoice?3?3SetPosition?$AA@
  00017	68 ec 19 00 00	 push	 6636			; 000019ecH
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00021	6a 01		 push	 1
  00023	6a 09		 push	 9
  00025	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00030	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00033	51		 push	 ecx
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 08	 add	 esp, 8
$L37603:

; 6637 :     }
; 6638 : 
; 6639 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  00041	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00047	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004a	83 e1 10	 and	 ecx, 16			; 00000010H
  0004d	85 c9		 test	 ecx, ecx
  0004f	75 2d		 jne	 SHORT $L37605

; 6640 :     {
; 6641 :         DPF_ERROR("3D not enabled");

  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@EHIDDHEM@CDirectSoundVoice?3?3SetPosition?$AA@
  0005b	68 f1 19 00 00	 push	 6641			; 000019f1H
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00065	6a 01		 push	 1
  00067	6a 09		 push	 9
  00069	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0006e	83 c4 18	 add	 esp, 24			; 00000018H
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  00076	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007b	83 c4 04	 add	 esp, 4
$L37605:

; 6642 :     }
; 6643 : 
; 6644 : #endif // VALIDATE_PARAMETERS
; 6645 : 
; 6646 :     m_pSettings->m_p3dParams->HrtfParams.vPosition.x = NormalizeFloat(flPositionX);

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _flPositionX$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00087	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008d	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00093	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 6647 :     m_pSettings->m_p3dParams->HrtfParams.vPosition.y = NormalizeFloat(flPositionY);

  00096	8b 45 10	 mov	 eax, DWORD PTR _flPositionY$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a5	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  000ab	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 6648 :     m_pSettings->m_p3dParams->HrtfParams.vPosition.z = NormalizeFloat(flPositionZ);

  000ae	8b 4d 14	 mov	 ecx, DWORD PTR _flPositionZ$[ebp]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000b7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000bd	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000c3	d9 59 0c	 fstp	 DWORD PTR [ecx+12]

; 6649 : 
; 6650 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_POSITION;

  000c6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000cc	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000d2	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000d5	81 ca ff 00 00
	00		 or	 edx, 255		; 000000ffH
  000db	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000de	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000e1	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  000e7	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 6651 : 
; 6652 :     if(!(dwFlags & DS3D_DEFERRED))

  000ea	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000ed	83 e1 01	 and	 ecx, 1
  000f0	85 c9		 test	 ecx, ecx
  000f2	75 09		 jne	 SHORT $L37606

; 6653 :     {
; 6654 :         CommitDeferredSettings();

  000f4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37606:

; 6655 :     }
; 6656 : 
; 6657 :     DPF_LEAVE_HRESULT(DS_OK);
; 6658 : 
; 6659 :     return DS_OK;

  000fd	33 c0		 xor	 eax, eax

; 6660 : }

  000ff	5d		 pop	 ebp
  00100	c2 14 00	 ret	 20			; 00000014H
?SetPosition@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetPosition
DSOUND	ENDS
PUBLIC	??_C@_0BP@CFKGNOKB@CDirectSoundVoice?3?3SetVelocity?$AA@ ; `string'
;	COMDAT ??_C@_0BP@CFKGNOKB@CDirectSoundVoice?3?3SetVelocity?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@CFKGNOKB@CDirectSoundVoice?3?3SetVelocity?$AA@ DB 'CDirectSound'
	DB	'Voice::SetVelocity', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetVelocity@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z
DSOUND	SEGMENT
_this$ = 8
_flVelocityX$ = 12
_flVelocityY$ = 16
_flVelocityZ$ = 20
_dwFlags$ = 24
?SetVelocity@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetVelocity, COMDAT

; 6690 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6691 :     DPF_ENTER();
; 6692 : 
; 6693 : #ifdef VALIDATE_PARAMETERS
; 6694 : 
; 6695 :     if(dwFlags & ~DS3D_VALID)

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	83 e0 fe	 and	 eax, -2			; fffffffeH
  00009	85 c0		 test	 eax, eax
  0000b	74 34		 je	 SHORT $L37615

; 6696 :     {
; 6697 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@CFKGNOKB@CDirectSoundVoice?3?3SetVelocity?$AA@
  00017	68 29 1a 00 00	 push	 6697			; 00001a29H
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00021	6a 01		 push	 1
  00023	6a 09		 push	 9
  00025	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00030	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00033	51		 push	 ecx
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 08	 add	 esp, 8
$L37615:

; 6698 :     }
; 6699 : 
; 6700 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  00041	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00047	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004a	83 e1 10	 and	 ecx, 16			; 00000010H
  0004d	85 c9		 test	 ecx, ecx
  0004f	75 2d		 jne	 SHORT $L37617

; 6701 :     {
; 6702 :         DPF_ERROR("3D not enabled");

  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@CFKGNOKB@CDirectSoundVoice?3?3SetVelocity?$AA@
  0005b	68 2e 1a 00 00	 push	 6702			; 00001a2eH
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00065	6a 01		 push	 1
  00067	6a 09		 push	 9
  00069	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0006e	83 c4 18	 add	 esp, 24			; 00000018H
  00071	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  00076	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007b	83 c4 04	 add	 esp, 4
$L37617:

; 6703 :     }
; 6704 : 
; 6705 : #endif // VALIDATE_PARAMETERS
; 6706 : 
; 6707 :     m_pSettings->m_p3dParams->HrtfParams.vVelocity.x = NormalizeFloat(flVelocityX);

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _flVelocityX$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00087	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008d	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00093	d9 5a 10	 fstp	 DWORD PTR [edx+16]

; 6708 :     m_pSettings->m_p3dParams->HrtfParams.vVelocity.y = NormalizeFloat(flVelocityY);

  00096	8b 45 10	 mov	 eax, DWORD PTR _flVelocityY$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a5	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  000ab	d9 58 14	 fstp	 DWORD PTR [eax+20]

; 6709 :     m_pSettings->m_p3dParams->HrtfParams.vVelocity.z = NormalizeFloat(flVelocityZ);

  000ae	8b 4d 14	 mov	 ecx, DWORD PTR _flVelocityZ$[ebp]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  000b7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000bd	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000c3	d9 59 18	 fstp	 DWORD PTR [ecx+24]

; 6710 : 
; 6711 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_VELOCITY;

  000c6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000cc	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  000d2	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000d5	83 ca 40	 or	 edx, 64			; 00000040H
  000d8	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000db	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000de	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  000e4	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 6712 : 
; 6713 :     if(!(dwFlags & DS3D_DEFERRED))

  000e7	8b 4d 18	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000ea	83 e1 01	 and	 ecx, 1
  000ed	85 c9		 test	 ecx, ecx
  000ef	75 09		 jne	 SHORT $L37618

; 6714 :     {
; 6715 :         CommitDeferredSettings();

  000f1	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	52		 push	 edx
  000f5	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37618:

; 6716 :     }
; 6717 : 
; 6718 :     DPF_LEAVE_HRESULT(DS_OK);
; 6719 : 
; 6720 :     return DS_OK;

  000fa	33 c0		 xor	 eax, eax

; 6721 : }

  000fc	5d		 pop	 ebp
  000fd	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@CDirectSoundVoice@DirectSound@@QAGJMMMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetVelocity
DSOUND	ENDS
PUBLIC	??_C@_0CF@EDNENMKI@CDirectSoundVoice?3?3SetDistanceFa@ ; `string'
;	COMDAT ??_C@_0CF@EDNENMKI@CDirectSoundVoice?3?3SetDistanceFa@
DSOUND_RD	SEGMENT
??_C@_0CF@EDNENMKI@CDirectSoundVoice?3?3SetDistanceFa@ DB 'CDirectSoundVo'
	DB	'ice::SetDistanceFactor', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDistanceFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
_this$ = 8
_flDistanceFactor$ = 12
_dwFlags$ = 16
?SetDistanceFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetDistanceFactor, COMDAT

; 6749 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6750 :     DPF_ENTER();
; 6751 : 
; 6752 : #ifdef VALIDATE_PARAMETERS
; 6753 : 
; 6754 :     if((flDistanceFactor < DS3D_MINDISTANCEFACTOR) || (flDistanceFactor > DS3D_MAXDISTANCEFACTOR))

  00003	d9 45 0c	 fld	 DWORD PTR _flDistanceFactor$[ebp]
  00006	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00800000
  0000c	df e0		 fnstsw	 ax
  0000e	f6 c4 05	 test	 ah, 5
  00011	7b 10		 jnp	 SHORT $L37626
  00013	d9 45 0c	 fld	 DWORD PTR _flDistanceFactor$[ebp]
  00016	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@7f7fffff
  0001c	df e0		 fnstsw	 ax
  0001e	f6 c4 41	 test	 ah, 65			; 00000041H
  00021	75 2d		 jne	 SHORT $L37625
$L37626:

; 6755 :     {
; 6756 :         DPF_ERROR("Distance factor out of bounds");

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@EDNENMKI@CDirectSoundVoice?3?3SetDistanceFa@
  0002d	68 64 1a 00 00	 push	 6756			; 00001a64H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00037	6a 01		 push	 1
  00039	6a 09		 push	 9
  0003b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00040	83 c4 18	 add	 esp, 24			; 00000018H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@LCGDMHLP@Distance?5factor?5out?5of?5bounds?$AA@
  00048	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004d	83 c4 04	 add	 esp, 4
$L37625:

; 6757 :     }
; 6758 : 
; 6759 :     if(dwFlags & ~DS3D_VALID)

  00050	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00053	83 e0 fe	 and	 eax, -2			; fffffffeH
  00056	85 c0		 test	 eax, eax
  00058	74 34		 je	 SHORT $L37628

; 6760 :     {
; 6761 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@EDNENMKI@CDirectSoundVoice?3?3SetDistanceFa@
  00064	68 69 1a 00 00	 push	 6761			; 00001a69H
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006e	6a 01		 push	 1
  00070	6a 09		 push	 9
  00072	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00077	83 c4 18	 add	 esp, 24			; 00000018H
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0007d	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00086	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008b	83 c4 08	 add	 esp, 8
$L37628:

; 6762 :     }
; 6763 : 
; 6764 : #endif // VALIDATE_PARAMETERS
; 6765 : 
; 6766 :     m_pSettings->m_p3dParams->HrtfParams.flDistanceFactor = NormalizeFloat(flDistanceFactor);

  0008e	8b 55 0c	 mov	 edx, DWORD PTR _flDistanceFactor$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00097	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009d	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000a3	d9 5a 40	 fstp	 DWORD PTR [edx+64]

; 6767 : 
; 6768 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_DISTANCEFACTOR;

  000a6	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ac	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000b2	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  000b5	83 c8 60	 or	 eax, 96			; 00000060H
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000be	8b 8a b4 00 00
	00		 mov	 ecx, DWORD PTR [edx+180]
  000c4	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 6769 : 
; 6770 :     if(!(dwFlags & DS3D_DEFERRED))

  000c7	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000ca	83 e2 01	 and	 edx, 1
  000cd	85 d2		 test	 edx, edx
  000cf	75 09		 jne	 SHORT $L37629

; 6771 :     {
; 6772 :         CommitDeferredSettings();

  000d1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37629:

; 6773 :     }
; 6774 : 
; 6775 :     DPF_LEAVE_HRESULT(DS_OK);
; 6776 : 
; 6777 :     return DS_OK;

  000da	33 c0		 xor	 eax, eax

; 6778 : }

  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?SetDistanceFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetDistanceFactor
DSOUND	ENDS
PUBLIC	??_C@_0CE@BPMLICEL@CDirectSoundVoice?3?3SetDopplerFac@ ; `string'
;	COMDAT ??_C@_0CE@BPMLICEL@CDirectSoundVoice?3?3SetDopplerFac@
DSOUND_RD	SEGMENT
??_C@_0CE@BPMLICEL@CDirectSoundVoice?3?3SetDopplerFac@ DB 'CDirectSoundVo'
	DB	'ice::SetDopplerFactor', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetDopplerFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
_this$ = 8
_flDopplerFactor$ = 12
_dwFlags$ = 16
?SetDopplerFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetDopplerFactor, COMDAT

; 6806 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6807 :     DPF_ENTER();
; 6808 : 
; 6809 : #ifdef VALIDATE_PARAMETERS
; 6810 : 
; 6811 :     if((flDopplerFactor < DS3D_MINDOPPLERFACTOR) || (flDopplerFactor > DS3D_MAXDOPPLERFACTOR))

  00003	d9 45 0c	 fld	 DWORD PTR _flDopplerFactor$[ebp]
  00006	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0000c	df e0		 fnstsw	 ax
  0000e	f6 c4 05	 test	 ah, 5
  00011	7b 10		 jnp	 SHORT $L37637
  00013	d9 45 0c	 fld	 DWORD PTR _flDopplerFactor$[ebp]
  00016	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  0001c	df e0		 fnstsw	 ax
  0001e	f6 c4 41	 test	 ah, 65			; 00000041H
  00021	75 2d		 jne	 SHORT $L37636
$L37637:

; 6812 :     {
; 6813 :         DPF_ERROR("Doppler factor out of bounds");

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@BPMLICEL@CDirectSoundVoice?3?3SetDopplerFac@
  0002d	68 9d 1a 00 00	 push	 6813			; 00001a9dH
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00037	6a 01		 push	 1
  00039	6a 09		 push	 9
  0003b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00040	83 c4 18	 add	 esp, 24			; 00000018H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@HHJNBFFA@Doppler?5factor?5out?5of?5bounds?$AA@
  00048	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004d	83 c4 04	 add	 esp, 4
$L37636:

; 6814 :     }
; 6815 : 
; 6816 :     if(dwFlags & ~DS3D_VALID)

  00050	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00053	83 e0 fe	 and	 eax, -2			; fffffffeH
  00056	85 c0		 test	 eax, eax
  00058	74 34		 je	 SHORT $L37639

; 6817 :     {
; 6818 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@BPMLICEL@CDirectSoundVoice?3?3SetDopplerFac@
  00064	68 a2 1a 00 00	 push	 6818			; 00001aa2H
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006e	6a 01		 push	 1
  00070	6a 09		 push	 9
  00072	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00077	83 c4 18	 add	 esp, 24			; 00000018H
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0007d	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00086	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008b	83 c4 08	 add	 esp, 8
$L37639:

; 6819 :     }
; 6820 : 
; 6821 : #endif // VALIDATE_PARAMETERS
; 6822 : 
; 6823 :     m_pSettings->m_p3dParams->HrtfParams.flDopplerFactor = NormalizeFloat(flDopplerFactor);

  0008e	8b 55 0c	 mov	 edx, DWORD PTR _flDopplerFactor$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00097	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009d	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000a3	d9 5a 48	 fstp	 DWORD PTR [edx+72]

; 6824 : 
; 6825 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_DOPPLERFACTOR;

  000a6	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ac	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000b2	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  000b5	83 c8 40	 or	 eax, 64			; 00000040H
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000be	8b 8a b4 00 00
	00		 mov	 ecx, DWORD PTR [edx+180]
  000c4	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 6826 : 
; 6827 :     if(!(dwFlags & DS3D_DEFERRED))

  000c7	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000ca	83 e2 01	 and	 edx, 1
  000cd	85 d2		 test	 edx, edx
  000cf	75 09		 jne	 SHORT $L37640

; 6828 :     {
; 6829 :         CommitDeferredSettings();

  000d1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37640:

; 6830 :     }
; 6831 : 
; 6832 :     DPF_LEAVE_HRESULT(DS_OK);
; 6833 : 
; 6834 :     return DS_OK;

  000da	33 c0		 xor	 eax, eax

; 6835 : }

  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?SetDopplerFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetDopplerFactor
DSOUND	ENDS
PUBLIC	??_C@_0CE@GAOLLPH@CDirectSoundVoice?3?3SetRolloffFac@ ; `string'
;	COMDAT ??_C@_0CE@GAOLLPH@CDirectSoundVoice?3?3SetRolloffFac@
DSOUND_RD	SEGMENT
??_C@_0CE@GAOLLPH@CDirectSoundVoice?3?3SetRolloffFac@ DB 'CDirectSoundVoi'
	DB	'ce::SetRolloffFactor', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetRolloffFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z
DSOUND	SEGMENT
_this$ = 8
_flRolloffFactor$ = 12
_dwFlags$ = 16
?SetRolloffFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetRolloffFactor, COMDAT

; 6863 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6864 :     DPF_ENTER();
; 6865 : 
; 6866 : #ifdef VALIDATE_PARAMETERS
; 6867 : 
; 6868 :     if((flRolloffFactor < DS3D_MINROLLOFFFACTOR) || (flRolloffFactor > DS3D_MAXROLLOFFFACTOR))

  00003	d9 45 0c	 fld	 DWORD PTR _flRolloffFactor$[ebp]
  00006	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0000c	df e0		 fnstsw	 ax
  0000e	f6 c4 05	 test	 ah, 5
  00011	7b 10		 jnp	 SHORT $L37648
  00013	d9 45 0c	 fld	 DWORD PTR _flRolloffFactor$[ebp]
  00016	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  0001c	df e0		 fnstsw	 ax
  0001e	f6 c4 41	 test	 ah, 65			; 00000041H
  00021	75 2d		 jne	 SHORT $L37647
$L37648:

; 6869 :     {
; 6870 :         DPF_ERROR("Rolloff factor out of bounds");

  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@GAOLLPH@CDirectSoundVoice?3?3SetRolloffFac@
  0002d	68 d6 1a 00 00	 push	 6870			; 00001ad6H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00037	6a 01		 push	 1
  00039	6a 09		 push	 9
  0003b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00040	83 c4 18	 add	 esp, 24			; 00000018H
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@CELBIGOI@Rolloff?5factor?5out?5of?5bounds?$AA@
  00048	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004d	83 c4 04	 add	 esp, 4
$L37647:

; 6871 :     }
; 6872 : 
; 6873 :     if(dwFlags & ~DS3D_VALID)

  00050	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00053	83 e0 fe	 and	 eax, -2			; fffffffeH
  00056	85 c0		 test	 eax, eax
  00058	74 34		 je	 SHORT $L37650

; 6874 :     {
; 6875 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  0005a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@GAOLLPH@CDirectSoundVoice?3?3SetRolloffFac@
  00064	68 db 1a 00 00	 push	 6875			; 00001adbH
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006e	6a 01		 push	 1
  00070	6a 09		 push	 9
  00072	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00077	83 c4 18	 add	 esp, 24			; 00000018H
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0007d	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00086	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008b	83 c4 08	 add	 esp, 8
$L37650:

; 6876 :     }
; 6877 : 
; 6878 : #endif // VALIDATE_PARAMETERS
; 6879 : 
; 6880 :     m_pSettings->m_p3dParams->HrtfParams.flRolloffFactor = NormalizeFloat(flRolloffFactor);

  0008e	8b 55 0c	 mov	 edx, DWORD PTR _flRolloffFactor$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  00097	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009d	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000a3	d9 5a 44	 fstp	 DWORD PTR [edx+68]

; 6881 : 
; 6882 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_ROLLOFFFACTOR;

  000a6	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000ac	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  000b2	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  000b5	83 c8 04	 or	 eax, 4
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000be	8b 8a b4 00 00
	00		 mov	 ecx, DWORD PTR [edx+180]
  000c4	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 6883 : 
; 6884 :     if(!(dwFlags & DS3D_DEFERRED))

  000c7	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000ca	83 e2 01	 and	 edx, 1
  000cd	85 d2		 test	 edx, edx
  000cf	75 09		 jne	 SHORT $L37651

; 6885 :     {
; 6886 :         CommitDeferredSettings();

  000d1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37651:

; 6887 :     }
; 6888 : 
; 6889 :     DPF_LEAVE_HRESULT(DS_OK);
; 6890 : 
; 6891 :     return DS_OK;

  000da	33 c0		 xor	 eax, eax

; 6892 : }

  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
?SetRolloffFactor@CDirectSoundVoice@DirectSound@@QAGJMK@Z ENDP ; DirectSound::CDirectSoundVoice::SetRolloffFactor
DSOUND	ENDS
PUBLIC	__real@3f800000
PUBLIC	??_C@_0CD@NCGGFELK@CDirectSoundVoice?3?3SetRolloffCur@ ; `string'
PUBLIC	??_C@_0CN@MFPFNDEA@Rolloff?5curve?5points?5must?5be?5bet@ ; `string'
PUBLIC	??_C@_0DB@MCCEBEEE@Point?5array?5and?5count?5most?5both?5@ ; `string'
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0CD@NCGGFELK@CDirectSoundVoice?3?3SetRolloffCur@
DSOUND_RD	SEGMENT
??_C@_0CD@NCGGFELK@CDirectSoundVoice?3?3SetRolloffCur@ DB 'CDirectSoundVo'
	DB	'ice::SetRolloffCurve', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@MFPFNDEA@Rolloff?5curve?5points?5must?5be?5bet@
DSOUND_RD	SEGMENT
??_C@_0CN@MFPFNDEA@Rolloff?5curve?5points?5must?5be?5bet@ DB 'Rolloff cur'
	DB	've points must be between 0 and 1', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@MCCEBEEE@Point?5array?5and?5count?5most?5both?5@
DSOUND_RD	SEGMENT
??_C@_0DB@MCCEBEEE@Point?5array?5and?5count?5most?5both?5@ DB 'Point arra'
	DB	'y and count most both be valid or NULL', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetRolloffCurve@CDirectSoundVoice@DirectSound@@QAGJPBMKK@Z
DSOUND	SEGMENT
_i$ = -4
_this$ = 8
_pflPoints$ = 12
_dwPointCount$ = 16
_dwFlags$ = 20
?SetRolloffCurve@CDirectSoundVoice@DirectSound@@QAGJPBMKK@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetRolloffCurve, COMDAT

; 6922 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6923 : 
; 6924 : #ifdef VALIDATE_PARAMETERS
; 6925 : 
; 6926 :     DWORD                   i;
; 6927 : 
; 6928 : #endif // VALIDATE_PARAMETERS
; 6929 : 
; 6930 :     DPF_ENTER();
; 6931 : 
; 6932 : #ifdef VALIDATE_PARAMETERS
; 6933 : 
; 6934 :     if(pflPoints && dwPointCount)

  00004	83 7d 0c 00	 cmp	 DWORD PTR _pflPoints$[ebp], 0
  00008	74 7d		 je	 SHORT $L37660
  0000a	83 7d 10 00	 cmp	 DWORD PTR _dwPointCount$[ebp], 0
  0000e	74 77		 je	 SHORT $L37660

; 6935 :     {
; 6936 :         for(i = 0; i < dwPointCount; i++)

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00017	eb 09		 jmp	 SHORT $L37661
$L37662:
  00019	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L37661:
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00025	3b 4d 10	 cmp	 ecx, DWORD PTR _dwPointCount$[ebp]
  00028	73 5b		 jae	 SHORT $L37663

; 6937 :         {
; 6938 :             if((pflPoints[i] < 0.0f) || (pflPoints[i] > 1.0f))

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _pflPoints$[ebp]
  00030	d9 04 90	 fld	 DWORD PTR [eax+edx*4]
  00033	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00039	df e0		 fnstsw	 ax
  0003b	f6 c4 05	 test	 ah, 5
  0003e	7b 16		 jnp	 SHORT $L37665
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00043	8b 55 0c	 mov	 edx, DWORD PTR _pflPoints$[ebp]
  00046	d9 04 8a	 fld	 DWORD PTR [edx+ecx*4]
  00049	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  0004f	df e0		 fnstsw	 ax
  00051	f6 c4 41	 test	 ah, 65			; 00000041H
  00054	75 2d		 jne	 SHORT $L37664
$L37665:

; 6939 :             {
; 6940 :                 DPF_ERROR("Rolloff curve points must be between 0 and 1");

  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@NCGGFELK@CDirectSoundVoice?3?3SetRolloffCur@
  00060	68 1c 1b 00 00	 push	 6940			; 00001b1cH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	6a 01		 push	 1
  0006c	6a 09		 push	 9
  0006e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@MFPFNDEA@Rolloff?5curve?5points?5must?5be?5bet@
  0007b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00080	83 c4 04	 add	 esp, 4
$L37664:

; 6941 :             }
; 6942 :         }

  00083	eb 94		 jmp	 SHORT $L37662
$L37663:

; 6943 :     }
; 6944 :     else if((!pflPoints && dwPointCount) || (pflPoints && !dwPointCount))

  00085	eb 45		 jmp	 SHORT $L37668
$L37660:
  00087	83 7d 0c 00	 cmp	 DWORD PTR _pflPoints$[ebp], 0
  0008b	75 06		 jne	 SHORT $L37671
  0008d	83 7d 10 00	 cmp	 DWORD PTR _dwPointCount$[ebp], 0
  00091	75 0c		 jne	 SHORT $L37670
$L37671:
  00093	83 7d 0c 00	 cmp	 DWORD PTR _pflPoints$[ebp], 0
  00097	74 33		 je	 SHORT $L37668
  00099	83 7d 10 00	 cmp	 DWORD PTR _dwPointCount$[ebp], 0
  0009d	75 2d		 jne	 SHORT $L37668
$L37670:

; 6945 :     {
; 6946 :         DPF_ERROR("Point array and count most both be valid or NULL");

  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@NCGGFELK@CDirectSoundVoice?3?3SetRolloffCur@
  000a9	68 22 1b 00 00	 push	 6946			; 00001b22H
  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000b3	6a 01		 push	 1
  000b5	6a 09		 push	 9
  000b7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000bc	83 c4 18	 add	 esp, 24			; 00000018H
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@MCCEBEEE@Point?5array?5and?5count?5most?5both?5@
  000c4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000c9	83 c4 04	 add	 esp, 4
$L37668:

; 6947 :     }
; 6948 : 
; 6949 :     if(dwFlags & ~DS3D_VALID)

  000cc	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000cf	83 e0 fe	 and	 eax, -2			; fffffffeH
  000d2	85 c0		 test	 eax, eax
  000d4	74 34		 je	 SHORT $L37673

; 6950 :     {
; 6951 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@NCGGFELK@CDirectSoundVoice?3?3SetRolloffCur@
  000e0	68 27 1b 00 00	 push	 6951			; 00001b27H
  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000ea	6a 01		 push	 1
  000ec	6a 09		 push	 9
  000ee	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000f3	83 c4 18	 add	 esp, 24			; 00000018H
  000f6	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000f9	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000fc	51		 push	 ecx
  000fd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  00102	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00107	83 c4 08	 add	 esp, 8
$L37673:

; 6952 :     }
; 6953 : 
; 6954 : #endif // VALIDATE_PARAMETERS
; 6955 : 
; 6956 :     m_pSettings->m_p3dParams->paflRolloffPoints = pflPoints;

  0010a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0010d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00110	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00116	8b 55 0c	 mov	 edx, DWORD PTR _pflPoints$[ebp]
  00119	89 51 70	 mov	 DWORD PTR [ecx+112], edx

; 6957 :     m_pSettings->m_p3dParams->dwRolloffPointCount = dwPointCount;

  0011c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00122	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00128	8b 45 10	 mov	 eax, DWORD PTR _dwPointCount$[ebp]
  0012b	89 42 74	 mov	 DWORD PTR [edx+116], eax

; 6958 : 
; 6959 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_ROLLOFFFACTOR;

  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00134	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0013a	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0013d	83 c9 04	 or	 ecx, 4
  00140	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00143	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00146	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  0014c	89 4a 78	 mov	 DWORD PTR [edx+120], ecx

; 6960 : 
; 6961 :     if(!(dwFlags & DS3D_DEFERRED))

  0014f	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00152	83 e0 01	 and	 eax, 1
  00155	85 c0		 test	 eax, eax
  00157	75 09		 jne	 SHORT $L37674

; 6962 :     {
; 6963 :         CommitDeferredSettings();

  00159	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	51		 push	 ecx
  0015d	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37674:

; 6964 :     }
; 6965 : 
; 6966 :     DPF_LEAVE_HRESULT(DS_OK);
; 6967 : 
; 6968 :     return DS_OK;

  00162	33 c0		 xor	 eax, eax

; 6969 : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 10 00	 ret	 16			; 00000010H
?SetRolloffCurve@CDirectSoundVoice@DirectSound@@QAGJPBMKK@Z ENDP ; DirectSound::CDirectSoundVoice::SetRolloffCurve
DSOUND	ENDS
PUBLIC	??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@ ; `string'
PUBLIC	??_C@_0BM@LINKIFON@Failed?5to?5supply?5parameters?$AA@ ; `string'
PUBLIC	??_C@_0BG@MHAJELON@Invalid?5lDirect?5value?$AA@	; `string'
PUBLIC	??_C@_0BI@IKEBLGNA@Invalid?5lDirectHF?5value?$AA@ ; `string'
PUBLIC	??_C@_0CD@FCCLMHMN@Invalid?5Obstruction?4lHFLevel?5val@ ; `string'
PUBLIC	??_C@_0CE@OBCELHCF@Invalid?5Obstruction?4flLFRatio?5va@ ; `string'
PUBLIC	??_C@_0CB@OAHBFPJJ@Invalid?5Occlusion?4lHFLevel?5value@ ; `string'
PUBLIC	??_C@_0CC@INJAHIFA@Invalid?5Occlusion?4flLFRatio?5valu@ ; `string'
;	COMDAT ??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
DSOUND_RD	SEGMENT
??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@ DB 'CDirectSoundVo'
	DB	'ice::SetI3DL2Source', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@LINKIFON@Failed?5to?5supply?5parameters?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@LINKIFON@Failed?5to?5supply?5parameters?$AA@ DB 'Failed to supp'
	DB	'ly parameters', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@MHAJELON@Invalid?5lDirect?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@MHAJELON@Invalid?5lDirect?5value?$AA@ DB 'Invalid lDirect value'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@IKEBLGNA@Invalid?5lDirectHF?5value?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@IKEBLGNA@Invalid?5lDirectHF?5value?$AA@ DB 'Invalid lDirectHF v'
	DB	'alue', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@FCCLMHMN@Invalid?5Obstruction?4lHFLevel?5val@
DSOUND_RD	SEGMENT
??_C@_0CD@FCCLMHMN@Invalid?5Obstruction?4lHFLevel?5val@ DB 'Invalid Obstr'
	DB	'uction.lHFLevel value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@OBCELHCF@Invalid?5Obstruction?4flLFRatio?5va@
DSOUND_RD	SEGMENT
??_C@_0CE@OBCELHCF@Invalid?5Obstruction?4flLFRatio?5va@ DB 'Invalid Obstr'
	DB	'uction.flLFRatio value', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CB@OAHBFPJJ@Invalid?5Occlusion?4lHFLevel?5value@
DSOUND_RD	SEGMENT
??_C@_0CB@OAHBFPJJ@Invalid?5Occlusion?4lHFLevel?5value@ DB 'Invalid Occlu'
	DB	'sion.lHFLevel value', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@INJAHIFA@Invalid?5Occlusion?4flLFRatio?5valu@
DSOUND_RD	SEGMENT
??_C@_0CC@INJAHIFA@Invalid?5Occlusion?4flLFRatio?5valu@ DB 'Invalid Occlu'
	DB	'sion.flLFRatio value', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetI3DL2Source@CDirectSoundVoice@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z
DSOUND	SEGMENT
_this$ = 8
_pParams$ = 12
_dwFlags$ = 16
?SetI3DL2Source@CDirectSoundVoice@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z PROC NEAR ; DirectSound::CDirectSoundVoice::SetI3DL2Source, COMDAT

; 6996 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6997 :     HRESULT                 hr;
; 6998 :     
; 6999 :     DPF_ENTER();
; 7000 : 
; 7001 : #ifdef VALIDATE_PARAMETERS
; 7002 : 
; 7003 :     if(!pParams)

  00004	83 7d 0c 00	 cmp	 DWORD PTR _pParams$[ebp], 0
  00008	75 2d		 jne	 SHORT $L37682

; 7004 :     {
; 7005 :         DPF_ERROR("Failed to supply parameters");

  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  00014	68 5d 1b 00 00	 push	 7005			; 00001b5dH
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@LINKIFON@Failed?5to?5supply?5parameters?$AA@
  0002f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00034	83 c4 04	 add	 esp, 4
$L37682:

; 7006 :     }
; 7007 : 
; 7008 :     if(dwFlags & ~DS3D_VALID)

  00037	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0003a	83 e0 fe	 and	 eax, -2			; fffffffeH
  0003d	85 c0		 test	 eax, eax
  0003f	74 34		 je	 SHORT $L37685

; 7009 :     {
; 7010 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DS3D_VALID);

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  0004b	68 62 1b 00 00	 push	 7010			; 00001b62H
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00055	6a 01		 push	 1
  00057	6a 09		 push	 9
  00059	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00064	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00067	51		 push	 ecx
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  0006d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00072	83 c4 08	 add	 esp, 8
$L37685:

; 7011 :     }
; 7012 : 
; 7013 :     if((pParams->lDirect < DSI3DL2BUFFER_MINDIRECT) || (pParams->lDirect > DSI3DL2BUFFER_MAXDIRECT))

  00075	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00078	81 3a f0 d8 ff
	ff		 cmp	 DWORD PTR [edx], -10000	; ffffd8f0H
  0007e	7c 0b		 jl	 SHORT $L37687
  00080	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00083	81 38 e8 03 00
	00		 cmp	 DWORD PTR [eax], 1000	; 000003e8H
  00089	7e 2d		 jle	 SHORT $L37686
$L37687:

; 7014 :     {
; 7015 :         DPF_ERROR("Invalid lDirect value");

  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  00095	68 67 1b 00 00	 push	 7015			; 00001b67H
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0009f	6a 01		 push	 1
  000a1	6a 09		 push	 9
  000a3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a8	83 c4 18	 add	 esp, 24			; 00000018H
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@MHAJELON@Invalid?5lDirect?5value?$AA@
  000b0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b5	83 c4 04	 add	 esp, 4
$L37686:

; 7016 :     }
; 7017 : 
; 7018 :     if((pParams->lDirectHF < DSI3DL2BUFFER_MINDIRECTHF) || (pParams->lDirectHF > DSI3DL2BUFFER_MAXDIRECTHF))

  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  000bb	81 79 04 f0 d8
	ff ff		 cmp	 DWORD PTR [ecx+4], -10000 ; ffffd8f0H
  000c2	7c 09		 jl	 SHORT $L37690
  000c4	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  000c7	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000cb	7e 2d		 jle	 SHORT $L37689
$L37690:

; 7019 :     {
; 7020 :         DPF_ERROR("Invalid lDirectHF value");

  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  000d7	68 6c 1b 00 00	 push	 7020			; 00001b6cH
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000e1	6a 01		 push	 1
  000e3	6a 09		 push	 9
  000e5	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000ea	83 c4 18	 add	 esp, 24			; 00000018H
  000ed	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IKEBLGNA@Invalid?5lDirectHF?5value?$AA@
  000f2	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f7	83 c4 04	 add	 esp, 4
$L37689:

; 7021 :     }
; 7022 : 
; 7023 :     if((pParams->lRoom < DSI3DL2BUFFER_MINROOM) || (pParams->lRoom > DSI3DL2BUFFER_MAXROOM))

  000fa	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  000fd	81 78 08 f0 d8
	ff ff		 cmp	 DWORD PTR [eax+8], -10000 ; ffffd8f0H
  00104	7c 0c		 jl	 SHORT $L37693
  00106	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00109	81 79 08 e8 03
	00 00		 cmp	 DWORD PTR [ecx+8], 1000	; 000003e8H
  00110	7e 2d		 jle	 SHORT $L37692
$L37693:

; 7024 :     {
; 7025 :         DPF_ERROR("Invalid lRoom value");

  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00117	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  0011c	68 71 1b 00 00	 push	 7025			; 00001b71H
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00126	6a 01		 push	 1
  00128	6a 09		 push	 9
  0012a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0012f	83 c4 18	 add	 esp, 24			; 00000018H
  00132	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@BFGOEDGP@Invalid?5lRoom?5value?$AA@
  00137	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0013c	83 c4 04	 add	 esp, 4
$L37692:

; 7026 :     }
; 7027 : 
; 7028 :     if((pParams->lRoomHF < DSI3DL2BUFFER_MINROOMHF) || (pParams->lRoomHF > DSI3DL2BUFFER_MAXROOMHF))

  0013f	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00142	81 7a 0c f0 d8
	ff ff		 cmp	 DWORD PTR [edx+12], -10000 ; ffffd8f0H
  00149	7c 09		 jl	 SHORT $L37695
  0014b	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0014e	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00152	7e 2d		 jle	 SHORT $L37694
$L37695:

; 7029 :     {
; 7030 :         DPF_ERROR("Invalid lRoomHF value");

  00154	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00159	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  0015e	68 76 1b 00 00	 push	 7030			; 00001b76H
  00163	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00168	6a 01		 push	 1
  0016a	6a 09		 push	 9
  0016c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00171	83 c4 18	 add	 esp, 24			; 00000018H
  00174	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@INCPBGEM@Invalid?5lRoomHF?5value?$AA@
  00179	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017e	83 c4 04	 add	 esp, 4
$L37694:

; 7031 :     }
; 7032 : 
; 7033 :     if((pParams->flRoomRolloffFactor < DSI3DL2BUFFER_MINROOMROLLOFFFACTOR) || (pParams->flRoomRolloffFactor > DSI3DL2BUFFER_MAXROOMROLLOFFFACTOR))

  00181	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00184	d9 41 10	 fld	 DWORD PTR [ecx+16]
  00187	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  0018d	df e0		 fnstsw	 ax
  0018f	f6 c4 05	 test	 ah, 5
  00192	7b 13		 jnp	 SHORT $L37697
  00194	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00197	d9 42 10	 fld	 DWORD PTR [edx+16]
  0019a	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@41200000
  001a0	df e0		 fnstsw	 ax
  001a2	f6 c4 41	 test	 ah, 65			; 00000041H
  001a5	75 2d		 jne	 SHORT $L37696
$L37697:

; 7034 :     {
; 7035 :         DPF_ERROR("Invalid flRoomRolloffFactor value");

  001a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  001b1	68 7b 1b 00 00	 push	 7035			; 00001b7bH
  001b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001bb	6a 01		 push	 1
  001bd	6a 09		 push	 9
  001bf	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001c4	83 c4 18	 add	 esp, 24			; 00000018H
  001c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@MMCGGFDN@Invalid?5flRoomRolloffFactor?5valu@
  001cc	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001d1	83 c4 04	 add	 esp, 4
$L37696:

; 7036 :     }
; 7037 : 
; 7038 :     if((pParams->Obstruction.lHFLevel < DSI3DL2BUFFER_MINOBSTRUCTION) || (pParams->Obstruction.lHFLevel > DSI3DL2BUFFER_MAXOBSTRUCTION))

  001d4	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  001d7	81 78 14 f0 d8
	ff ff		 cmp	 DWORD PTR [eax+20], -10000 ; ffffd8f0H
  001de	7c 09		 jl	 SHORT $L37699
  001e0	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  001e3	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  001e7	7e 2d		 jle	 SHORT $L37698
$L37699:

; 7039 :     {
; 7040 :         DPF_ERROR("Invalid Obstruction.lHFLevel value");

  001e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  001f3	68 80 1b 00 00	 push	 7040			; 00001b80H
  001f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001fd	6a 01		 push	 1
  001ff	6a 09		 push	 9
  00201	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00206	83 c4 18	 add	 esp, 24			; 00000018H
  00209	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@FCCLMHMN@Invalid?5Obstruction?4lHFLevel?5val@
  0020e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00213	83 c4 04	 add	 esp, 4
$L37698:

; 7041 :     }
; 7042 : 
; 7043 :     if((pParams->Obstruction.flLFRatio < DSI3DL2BUFFER_MINOBSTRUCTIONLFRATIO) || (pParams->Obstruction.flLFRatio > DSI3DL2BUFFER_MAXOBSTRUCTIONLFRATIO))

  00216	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00219	d9 42 18	 fld	 DWORD PTR [edx+24]
  0021c	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  00222	df e0		 fnstsw	 ax
  00224	f6 c4 05	 test	 ah, 5
  00227	7b 13		 jnp	 SHORT $L37702
  00229	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  0022c	d9 40 18	 fld	 DWORD PTR [eax+24]
  0022f	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  00235	df e0		 fnstsw	 ax
  00237	f6 c4 41	 test	 ah, 65			; 00000041H
  0023a	75 2d		 jne	 SHORT $L37701
$L37702:

; 7044 :     {
; 7045 :         DPF_ERROR("Invalid Obstruction.flLFRatio value");

  0023c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00241	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  00246	68 85 1b 00 00	 push	 7045			; 00001b85H
  0024b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00250	6a 01		 push	 1
  00252	6a 09		 push	 9
  00254	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00259	83 c4 18	 add	 esp, 24			; 00000018H
  0025c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@OBCELHCF@Invalid?5Obstruction?4flLFRatio?5va@
  00261	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00266	83 c4 04	 add	 esp, 4
$L37701:

; 7046 :     }
; 7047 : 
; 7048 :     if((pParams->Occlusion.lHFLevel < DSI3DL2BUFFER_MINOCCLUSION) || (pParams->Occlusion.lHFLevel > DSI3DL2BUFFER_MAXOCCLUSION))

  00269	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0026c	81 79 1c f0 d8
	ff ff		 cmp	 DWORD PTR [ecx+28], -10000 ; ffffd8f0H
  00273	7c 09		 jl	 SHORT $L37705
  00275	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00278	83 7a 1c 00	 cmp	 DWORD PTR [edx+28], 0
  0027c	7e 2d		 jle	 SHORT $L37704
$L37705:

; 7049 :     {
; 7050 :         DPF_ERROR("Invalid Occlusion.lHFLevel value");

  0027e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00283	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  00288	68 8a 1b 00 00	 push	 7050			; 00001b8aH
  0028d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00292	6a 01		 push	 1
  00294	6a 09		 push	 9
  00296	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0029b	83 c4 18	 add	 esp, 24			; 00000018H
  0029e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@OAHBFPJJ@Invalid?5Occlusion?4lHFLevel?5value@
  002a3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002a8	83 c4 04	 add	 esp, 4
$L37704:

; 7051 :     }
; 7052 : 
; 7053 :     if((pParams->Occlusion.flLFRatio < DSI3DL2BUFFER_MINOCCLUSIONLFRATIO) || (pParams->Occlusion.flLFRatio > DSI3DL2BUFFER_MAXOCCLUSIONLFRATIO))

  002ab	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  002ae	d9 40 20	 fld	 DWORD PTR [eax+32]
  002b1	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@00000000
  002b7	df e0		 fnstsw	 ax
  002b9	f6 c4 05	 test	 ah, 5
  002bc	7b 13		 jnp	 SHORT $L37708
  002be	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  002c1	d9 41 20	 fld	 DWORD PTR [ecx+32]
  002c4	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  002ca	df e0		 fnstsw	 ax
  002cc	f6 c4 41	 test	 ah, 65			; 00000041H
  002cf	75 2d		 jne	 SHORT $L37707
$L37708:

; 7054 :     {
; 7055 :         DPF_ERROR("Invalid Occlusion.flLFRatio value");

  002d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  002db	68 8f 1b 00 00	 push	 7055			; 00001b8fH
  002e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002e5	6a 01		 push	 1
  002e7	6a 09		 push	 9
  002e9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002ee	83 c4 18	 add	 esp, 24			; 00000018H
  002f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@INJAHIFA@Invalid?5Occlusion?4flLFRatio?5valu@
  002f6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002fb	83 c4 04	 add	 esp, 4
$L37707:

; 7056 :     }
; 7057 : 
; 7058 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRL3D))

  002fe	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00301	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00304	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00307	83 e1 10	 and	 ecx, 16			; 00000010H
  0030a	85 c9		 test	 ecx, ecx
  0030c	75 2d		 jne	 SHORT $L37710

; 7059 :     {
; 7060 :         DPF_ERROR("3D not enabled");

  0030e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00313	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FLJGNFAH@CDirectSoundVoice?3?3SetI3DL2Sourc@
  00318	68 94 1b 00 00	 push	 7060			; 00001b94H
  0031d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00322	6a 01		 push	 1
  00324	6a 09		 push	 9
  00326	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0032b	83 c4 18	 add	 esp, 24			; 00000018H
  0032e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@DMCEPAGA@3D?5not?5enabled?$AA@
  00333	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00338	83 c4 04	 add	 esp, 4
$L37710:

; 7061 :     }
; 7062 : 
; 7063 : #endif // VALIDATE_PARAMETERS
; 7064 : 
; 7065 :     m_pSettings->m_p3dParams->I3dl2Params.lDirect = pParams->lDirect;

  0033b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0033e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00341	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00347	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  0034a	8b 02		 mov	 eax, DWORD PTR [edx]
  0034c	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 7066 :     m_pSettings->m_p3dParams->I3dl2Params.lDirectHF = pParams->lDirectHF;

  0034f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00352	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00355	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0035b	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  0035e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00361	89 50 50	 mov	 DWORD PTR [eax+80], edx

; 7067 :     m_pSettings->m_p3dParams->I3dl2Params.lRoom = pParams->lRoom;

  00364	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00367	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0036a	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00370	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00373	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00376	89 4a 54	 mov	 DWORD PTR [edx+84], ecx

; 7068 :     m_pSettings->m_p3dParams->I3dl2Params.lRoomHF = pParams->lRoomHF;

  00379	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0037c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0037f	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00385	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  00388	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0038b	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 7069 :     m_pSettings->m_p3dParams->I3dl2Params.flRoomRolloffFactor = NormalizeFloat(pParams->flRoomRolloffFactor);

  0038e	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00391	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00394	52		 push	 edx
  00395	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  0039a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0039d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003a0	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  003a6	d9 5a 5c	 fstp	 DWORD PTR [edx+92]

; 7070 :     
; 7071 :     m_pSettings->m_p3dParams->I3dl2Params.Obstruction.lHFLevel = pParams->Obstruction.lHFLevel;

  003a9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  003ac	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003af	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  003b5	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  003b8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003bb	89 4a 60	 mov	 DWORD PTR [edx+96], ecx

; 7072 :     m_pSettings->m_p3dParams->I3dl2Params.Obstruction.flLFRatio = NormalizeFloat(pParams->Obstruction.flLFRatio);

  003be	8b 55 0c	 mov	 edx, DWORD PTR _pParams$[ebp]
  003c1	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  003c4	50		 push	 eax
  003c5	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003ca	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003cd	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003d0	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  003d6	d9 58 64	 fstp	 DWORD PTR [eax+100]

; 7073 : 
; 7074 :     m_pSettings->m_p3dParams->I3dl2Params.Occlusion.lHFLevel = pParams->Occlusion.lHFLevel;

  003d9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  003dc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003df	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  003e5	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  003e8	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  003eb	89 50 68	 mov	 DWORD PTR [eax+104], edx

; 7075 :     m_pSettings->m_p3dParams->I3dl2Params.Occlusion.flLFRatio = NormalizeFloat(pParams->Occlusion.flLFRatio);

  003ee	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  003f1	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  003f4	51		 push	 ecx
  003f5	e8 00 00 00 00	 call	 ?NormalizeFloat@Math@DirectSound@@YGMM@Z ; DirectSound::Math::NormalizeFloat
  003fa	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  003fd	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00400	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00406	d9 59 6c	 fstp	 DWORD PTR [ecx+108]

; 7076 : 
; 7077 :     m_pSettings->m_p3dParams->dwParameterMask |= DS3DPARAM_BUFFER_I3DL2;

  00409	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0040c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0040f	8b 88 b4 00 00
	00		 mov	 ecx, DWORD PTR [eax+180]
  00415	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  00418	81 ca 80 00 00
	00		 or	 edx, 128		; 00000080H
  0041e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00421	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00424	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  0042a	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 7078 : 
; 7079 :     if(!(dwFlags & DS3D_DEFERRED))

  0042d	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00430	83 e1 01	 and	 ecx, 1
  00433	85 c9		 test	 ecx, ecx
  00435	75 09		 jne	 SHORT $L37711

; 7080 :     {
; 7081 :         CommitDeferredSettings();

  00437	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0043a	52		 push	 edx
  0043b	e8 00 00 00 00	 call	 ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
$L37711:

; 7082 :     }
; 7083 : 
; 7084 :     DPF_LEAVE_HRESULT(DS_OK);
; 7085 : 
; 7086 :     return DS_OK;

  00440	33 c0		 xor	 eax, eax

; 7087 : }

  00442	8b e5		 mov	 esp, ebp
  00444	5d		 pop	 ebp
  00445	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Source@CDirectSoundVoice@DirectSound@@QAGJPBU_DSI3DL2BUFFER@@K@Z ENDP ; DirectSound::CDirectSoundVoice::SetI3DL2Source
DSOUND	ENDS
EXTRN	?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ:NEAR ; DirectSound::CMcpxVoiceClient::Commit3dSettings
; Function compile flags: /Odt
;	COMDAT ?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ
DSOUND	SEGMENT
_dwParameterMask$ = -4
_this$ = 8
?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ PROC NEAR ; DirectSound::CDirectSoundVoice::CommitDeferredSettings, COMDAT

; 7113 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7114 :     DWORD                   dwParameterMask;
; 7115 : 
; 7116 :     DPF_ENTER();
; 7117 : 
; 7118 :     //
; 7119 :     // Include the changed listener parameters in the 3D parameter mask
; 7120 :     //
; 7121 :     
; 7122 :     m_pSettings->m_p3dParams->dwParameterMask |= m_pDirectSound->m_pSettings->m_3dParams.dwParameterMask;

  00004	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00007	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000a	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  00010	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00016	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00019	8b 4a 78	 mov	 ecx, DWORD PTR [edx+120]
  0001c	0b 88 a4 00 00
	00		 or	 ecx, DWORD PTR [eax+164]
  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00028	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  0002e	89 4a 78	 mov	 DWORD PTR [edx+120], ecx

; 7123 : 
; 7124 :     //
; 7125 :     // Apply changes to the voice
; 7126 :     //
; 7127 :     
; 7128 :     dwParameterMask = m_pVoice->Commit3dSettings();

  00031	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00037	e8 00 00 00 00	 call	 ?Commit3dSettings@CMcpxVoiceClient@DirectSound@@QAEKXZ ; DirectSound::CMcpxVoiceClient::Commit3dSettings
  0003c	89 45 fc	 mov	 DWORD PTR _dwParameterMask$[ebp], eax

; 7129 : 
; 7130 :     //
; 7131 :     // Clear the parameter mask
; 7132 :     //
; 7133 : 
; 7134 :     m_pSettings->m_p3dParams->dwParameterMask &= ~dwParameterMask;

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00045	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _dwParameterMask$[ebp]
  0004e	f7 d1		 not	 ecx
  00050	8b 50 78	 mov	 edx, DWORD PTR [eax+120]
  00053	23 d1		 and	 edx, ecx
  00055	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005b	8b 81 b4 00 00
	00		 mov	 eax, DWORD PTR [ecx+180]
  00061	89 50 78	 mov	 DWORD PTR [eax+120], edx

; 7135 : 
; 7136 :     DPF_LEAVE_HRESULT(DS_OK);
; 7137 : 
; 7138 :     return DS_OK;

  00064	33 c0		 xor	 eax, eax

; 7139 : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?CommitDeferredSettings@CDirectSoundVoice@DirectSound@@QAGJXZ ENDP ; DirectSound::CDirectSoundVoice::CommitDeferredSettings
DSOUND	ENDS
PUBLIC	??0CDirectSoundBufferSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundBufferSettings::CDirectSoundBufferSettings
PUBLIC	??_7CDirectSoundBufferSettings@DirectSound@@6B@	; DirectSound::CDirectSoundBufferSettings::`vftable'
PUBLIC	??_GCDirectSoundBufferSettings@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundBufferSettings::`scalar deleting destructor'
EXTRN	??_ECDirectSoundBufferSettings@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CDirectSoundBufferSettings::`vector deleting destructor'
;	COMDAT ??_7CDirectSoundBufferSettings@DirectSound@@6B@
CONST	SEGMENT
??_7CDirectSoundBufferSettings@DirectSound@@6B@ DD FLAT:??_ECDirectSoundBufferSettings@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundBufferSettings::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSoundBufferSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CDirectSoundBufferSettings@DirectSound@@QAE@XZ PROC NEAR ; DirectSound::CDirectSoundBufferSettings::CDirectSoundBufferSettings, COMDAT
; _this$ = ecx

; 7168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CDirectSoundVoiceSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundVoiceSettings::CDirectSoundVoiceSettings
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundBufferSettings@DirectSound@@6B@

; 7169 :     DPF_ENTER();
; 7170 :     DPF_LEAVE_VOID();
; 7171 : }

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CDirectSoundBufferSettings@DirectSound@@QAE@XZ ENDP	; DirectSound::CDirectSoundBufferSettings::CDirectSoundBufferSettings
DSOUND	ENDS
PUBLIC	??1CDirectSoundBufferSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundBufferSettings::~CDirectSoundBufferSettings
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSoundBufferSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSoundBufferSettings@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CDirectSoundBufferSettings::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSoundBufferSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundBufferSettings::~CDirectSoundBufferSettings
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L37734
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L37734:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCDirectSoundBufferSettings@DirectSound@@UAEPAXI@Z ENDP ; DirectSound::CDirectSoundBufferSettings::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z ; DirectSound::CDirectSoundBufferSettings::SetBufferData
PUBLIC	?SetNotificationPositions@CDirectSoundBufferSettings@DirectSound@@QAEJKPBU_DSBPOSITIONNOTIFY@@@Z ; DirectSound::CDirectSoundBufferSettings::SetNotificationPositions
; Function compile flags: /Odt
;	COMDAT ??1CDirectSoundBufferSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CDirectSoundBufferSettings@DirectSound@@UAE@XZ PROC NEAR ; DirectSound::CDirectSoundBufferSettings::~CDirectSoundBufferSettings, COMDAT
; _this$ = ecx

; 7196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundBufferSettings@DirectSound@@6B@

; 7197 :     DPF_ENTER();
; 7198 :     
; 7199 :     //
; 7200 :     // Free the data buffer
; 7201 :     //
; 7202 :     
; 7203 :     SetBufferData(NULL, 0);

  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z ; DirectSound::CDirectSoundBufferSettings::SetBufferData

; 7204 : 
; 7205 :     //
; 7206 :     // Free notifications
; 7207 :     //
; 7208 : 
; 7209 :     SetNotificationPositions(0, NULL);

  0001c	6a 00		 push	 0
  0001e	6a 00		 push	 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?SetNotificationPositions@CDirectSoundBufferSettings@DirectSound@@QAEJKPBU_DSBPOSITIONNOTIFY@@@Z ; DirectSound::CDirectSoundBufferSettings::SetNotificationPositions

; 7210 : 
; 7211 :     DPF_LEAVE_VOID();
; 7212 : }

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundVoiceSettings::~CDirectSoundVoiceSettings
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??1CDirectSoundBufferSettings@DirectSound@@UAE@XZ ENDP	; DirectSound::CDirectSoundBufferSettings::~CDirectSoundBufferSettings
DSOUND	ENDS
PUBLIC	?Initialize@CDirectSoundBufferSettings@DirectSound@@QAEJPBU_DSBUFFERDESC@@@Z ; DirectSound::CDirectSoundBufferSettings::Initialize
; Function compile flags: /Odt
;	COMDAT ?Initialize@CDirectSoundBufferSettings@DirectSound@@QAEJPBU_DSBUFFERDESC@@@Z
DSOUND	SEGMENT
tv72 = -12
_this$ = -8
_hr$ = -4
_pdsbd$ = 8
?Initialize@CDirectSoundBufferSettings@DirectSound@@QAEJPBU_DSBUFFERDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundBufferSettings::Initialize, COMDAT
; _this$ = ecx

; 7238 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 7239 :     HRESULT                 hr;
; 7240 :     
; 7241 :     DPF_ENTER();
; 7242 : 
; 7243 :     //
; 7244 :     // Hand off to the base class
; 7245 :     //
; 7246 : 
; 7247 :     hr = CDirectSoundVoiceSettings::Initialize(pdsbd->dwFlags, (pdsbd->dwFlags & DSBCAPS_SUBMIXMASK) ? &m_wfxMixDest : pdsbd->lpwfxFormat, pdsbd->lpMixBins);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00015	85 c9		 test	 ecx, ecx
  00017	74 09		 je	 SHORT $L40621
  00019	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], OFFSET FLAT:?m_wfxMixDest@CDirectSoundBufferSettings@DirectSound@@2UtWAVEFORMATEX@@B ; DirectSound::CDirectSoundBufferSettings::m_wfxMixDest
  00020	eb 09		 jmp	 SHORT $L40622
$L40621:
  00022	8b 55 08	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00025	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00028	89 45 f4	 mov	 DWORD PTR tv72[ebp], eax
$L40622:
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  0002e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00031	52		 push	 edx
  00032	8b 45 f4	 mov	 eax, DWORD PTR tv72[ebp]
  00035	50		 push	 eax
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  00039	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003c	52		 push	 edx
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundVoiceSettings@DirectSound@@QAEJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::Initialize
  00045	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 7248 : 
; 7249 :     //
; 7250 :     // Save the input mixbin
; 7251 :     //
; 7252 : 
; 7253 :     if(SUCCEEDED(hr))

  00048	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004c	7c 3d		 jl	 SHORT $L37745

; 7254 :     {
; 7255 :         if(pdsbd->dwFlags & DSBCAPS_FXIN)

  0004e	8b 45 08	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	81 e1 00 00 08
	00		 and	 ecx, 524288		; 00080000H
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 11		 je	 SHORT $L37746

; 7256 :         {
; 7257 :             m_dwInputMixBin = pdsbd->dwInputMixBin;

  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 45 08	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  00064	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00067	89 8a d0 00 00
	00		 mov	 DWORD PTR [edx+208], ecx

; 7258 :         }
; 7259 :         else if(pdsbd->dwFlags & DSBCAPS_MIXIN)

  0006d	eb 1c		 jmp	 SHORT $L37745
$L37746:
  0006f	8b 55 08	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00072	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00075	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0007a	85 c0		 test	 eax, eax
  0007c	74 0d		 je	 SHORT $L37745

; 7260 :         {
; 7261 :             m_dwInputMixBin = DSMIXBIN_SUBMIX;

  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	c7 81 d0 00 00
	00 1f 00 00 00	 mov	 DWORD PTR [ecx+208], 31	; 0000001fH
$L37745:

; 7262 :         }
; 7263 :     }
; 7264 :     
; 7265 :     //
; 7266 :     // Initialize buffer data
; 7267 :     //
; 7268 : 
; 7269 :     if(SUCCEEDED(hr))

  0008b	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0008f	7c 1d		 jl	 SHORT $L37750

; 7270 :     {
; 7271 :         if(pdsbd->dwBufferBytes)

  00091	8b 55 08	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00094	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00098	74 14		 je	 SHORT $L37750

; 7272 :         {
; 7273 :             hr = SetBufferData(NULL, pdsbd->dwBufferBytes);

  0009a	8b 45 08	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  0009d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a0	51		 push	 ecx
  000a1	6a 00		 push	 0
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z ; DirectSound::CDirectSoundBufferSettings::SetBufferData
  000ab	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L37750:

; 7274 :         }
; 7275 :     }
; 7276 : 
; 7277 :     DPF_LEAVE_HRESULT(hr);
; 7278 : 
; 7279 :     return hr;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 7280 : }

  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?Initialize@CDirectSoundBufferSettings@DirectSound@@QAEJPBU_DSBUFFERDESC@@@Z ENDP ; DirectSound::CDirectSoundBufferSettings::Initialize
DSOUND	ENDS
PUBLIC	?SetPlayRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ; DirectSound::CDirectSoundBufferSettings::SetPlayRegion
; Function compile flags: /Odt
;	COMDAT ?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
_pvDataBuffer$ = 8
_dwBufferBytes$ = 12
?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z PROC NEAR ; DirectSound::CDirectSoundBufferSettings::SetBufferData, COMDAT
; _this$ = ecx

; 7308 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 7309 :     HRESULT                 hr  = DS_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 7310 :     
; 7311 :     DPF_ENTER();
; 7312 :     
; 7313 :     //
; 7314 :     // Free the existing buffer
; 7315 :     //
; 7316 : 
; 7317 :     if(m_dwFlags & DSBCAPS_APPALLOCBUFFER)

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00016	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0f		 je	 SHORT $L37759

; 7318 :     {
; 7319 :         m_pvBufferData = NULL;

  00020	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00023	c7 82 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+184], 0

; 7320 :     }
; 7321 :     else

  0002d	eb 28		 jmp	 SHORT $L37760
$L37759:

; 7322 :     {
; 7323 :         MEMFREE(m_pvBufferData);

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  00039	74 1c		 je	 SHORT $L37760
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	c7 80 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+184], 0
$L37760:

; 7324 :     }
; 7325 : 
; 7326 :     //
; 7327 :     // Allocate the new buffer (or just save the pointer)
; 7328 :     //
; 7329 : 
; 7330 :     if(m_dwBufferSize = dwBufferBytes)

  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 55 0c	 mov	 edx, DWORD PTR _dwBufferBytes$[ebp]
  0005d	89 91 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], edx
  00063	83 7d 0c 00	 cmp	 DWORD PTR _dwBufferBytes$[ebp], 0
  00067	74 7d		 je	 SHORT $L37762

; 7331 :     {
; 7332 :         if(pvDataBuffer)

  00069	83 7d 08 00	 cmp	 DWORD PTR _pvDataBuffer$[ebp], 0
  0006d	74 20		 je	 SHORT $L37763

; 7333 :         {
; 7334 :             m_dwFlags |= DSBCAPS_APPALLOCBUFFER;

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00075	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  0007b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 7335 : 
; 7336 :             m_pvBufferData = pvDataBuffer;

  00081	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _pvDataBuffer$[ebp]
  00087	89 88 b8 00 00
	00		 mov	 DWORD PTR [eax+184], ecx

; 7337 :         }
; 7338 :         else

  0008d	eb 57		 jmp	 SHORT $L37762
$L37763:

; 7339 :         {
; 7340 :             m_dwFlags &= ~DSBCAPS_APPALLOCBUFFER;

  0008f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00095	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 7341 :         
; 7342 :             hr = HRFROMP(m_pvBufferData = MEMALLOC_NOINIT(BYTE, m_dwBufferSize));

  000a0	6a 00		 push	 0
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	8b 82 bc 00 00
	00		 mov	 eax, DWORD PTR [edx+188]
  000ab	50		 push	 eax
  000ac	68 44 53 64 61	 push	 1633964868		; 61645344H
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ELFAHOMP@BYTE?$AA@
  000b6	68 ae 1c 00 00	 push	 7342			; 00001caeH
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c0	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc
  000c5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax
  000ce	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d1	33 c0		 xor	 eax, eax
  000d3	83 ba b8 00 00
	00 00		 cmp	 DWORD PTR [edx+184], 0
  000da	0f 95 c0	 setne	 al
  000dd	48		 dec	 eax
  000de	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  000e3	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L37762:

; 7343 :         }
; 7344 :     }
; 7345 : 
; 7346 :     //
; 7347 :     // Reset the buffer offsets
; 7348 :     //
; 7349 : 
; 7350 :     SetPlayRegion(0, m_dwBufferSize);

  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  000ef	52		 push	 edx
  000f0	6a 00		 push	 0
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	e8 00 00 00 00	 call	 ?SetPlayRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ; DirectSound::CDirectSoundBufferSettings::SetPlayRegion

; 7351 : 
; 7352 :     DPF_LEAVE_HRESULT(hr);
; 7353 : 
; 7354 :     return hr;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 7355 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 08 00	 ret	 8
?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z ENDP ; DirectSound::CDirectSoundBufferSettings::SetBufferData
DSOUND	ENDS
PUBLIC	?SetLoopRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ; DirectSound::CDirectSoundBufferSettings::SetLoopRegion
PUBLIC	??_C@_0CN@GDLOIFBF@dwPlayStart?5?$CL?5dwPlayLength?5?$DM?$DN?5m_@ ; `string'
;	COMDAT ??_C@_0CN@GDLOIFBF@dwPlayStart?5?$CL?5dwPlayLength?5?$DM?$DN?5m_@
DSOUND_RD	SEGMENT
??_C@_0CN@GDLOIFBF@dwPlayStart?5?$CL?5dwPlayLength?5?$DM?$DN?5m_@ DB 'dwP'
	DB	'layStart + dwPlayLength <= m_dwBufferSize', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPlayRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwPlayStart$ = 8
_dwPlayLength$ = 12
?SetPlayRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z PROC NEAR ; DirectSound::CDirectSoundBufferSettings::SetPlayRegion, COMDAT
; _this$ = ecx

; 7383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 7384 :     DPF_ENTER();
; 7385 : 
; 7386 :     ASSERT(dwPlayStart + dwPlayLength <= m_dwBufferSize);

  00007	68 da 1c 00 00	 push	 7386			; 00001cdaH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@GDLOIFBF@dwPlayStart?5?$CL?5dwPlayLength?5?$DM?$DN?5m_@
  00016	8b 45 08	 mov	 eax, DWORD PTR _dwPlayStart$[ebp]
  00019	03 45 0c	 add	 eax, DWORD PTR _dwPlayLength$[ebp]
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	39 81 bc 00 00
	00		 cmp	 DWORD PTR [ecx+188], eax
  00025	1b d2		 sbb	 edx, edx
  00027	f7 da		 neg	 edx
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 7387 :     
; 7388 :     m_dwPlayStart = dwPlayStart;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _dwPlayStart$[ebp]
  00038	89 88 c0 00 00
	00		 mov	 DWORD PTR [eax+192], ecx

; 7389 :     m_dwPlayLength = dwPlayLength;

  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _dwPlayLength$[ebp]
  00044	89 82 c4 00 00
	00		 mov	 DWORD PTR [edx+196], eax

; 7390 : 
; 7391 :     SetLoopRegion(0, dwPlayLength);

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwPlayLength$[ebp]
  0004d	51		 push	 ecx
  0004e	6a 00		 push	 0
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?SetLoopRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ; DirectSound::CDirectSoundBufferSettings::SetLoopRegion

; 7392 : 
; 7393 :     DPF_LEAVE_VOID();
; 7394 : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?SetPlayRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ENDP ; DirectSound::CDirectSoundBufferSettings::SetPlayRegion
DSOUND	ENDS
PUBLIC	??_C@_0CN@DHEINPGA@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@ ; `string'
PUBLIC	??_C@_0CN@JJDLFACJ@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@ ; `string'
;	COMDAT ??_C@_0CN@DHEINPGA@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@
DSOUND_RD	SEGMENT
??_C@_0CN@DHEINPGA@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@ DB 'dwL'
	DB	'oopStart + dwLoopLength <= m_dwBufferSize', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@JJDLFACJ@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@
DSOUND_RD	SEGMENT
??_C@_0CN@JJDLFACJ@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@ DB 'dwL'
	DB	'oopStart + dwLoopLength <= m_dwPlayLength', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetLoopRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z
DSOUND	SEGMENT
_this$ = -4
_dwLoopStart$ = 8
_dwLoopLength$ = 12
?SetLoopRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z PROC NEAR ; DirectSound::CDirectSoundBufferSettings::SetLoopRegion, COMDAT
; _this$ = ecx

; 7422 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 7423 :     DPF_ENTER();
; 7424 : 
; 7425 :     ASSERT(dwLoopStart + dwLoopLength <= m_dwBufferSize);

  00007	68 01 1d 00 00	 push	 7425			; 00001d01H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@DHEINPGA@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@
  00016	8b 45 08	 mov	 eax, DWORD PTR _dwLoopStart$[ebp]
  00019	03 45 0c	 add	 eax, DWORD PTR _dwLoopLength$[ebp]
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	39 81 bc 00 00
	00		 cmp	 DWORD PTR [ecx+188], eax
  00025	1b d2		 sbb	 edx, edx
  00027	f7 da		 neg	 edx
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 7426 :     ASSERT(dwLoopStart + dwLoopLength <= m_dwPlayLength);

  00032	68 02 1d 00 00	 push	 7426			; 00001d02H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@JJDLFACJ@dwLoopStart?5?$CL?5dwLoopLength?5?$DM?$DN?5m_@
  00041	8b 45 08	 mov	 eax, DWORD PTR _dwLoopStart$[ebp]
  00044	03 45 0c	 add	 eax, DWORD PTR _dwLoopLength$[ebp]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	39 81 c4 00 00
	00		 cmp	 DWORD PTR [ecx+196], eax
  00050	1b d2		 sbb	 edx, edx
  00052	f7 da		 neg	 edx
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0005a	83 c4 10	 add	 esp, 16			; 00000010H

; 7427 :     
; 7428 :     m_dwLoopStart = dwLoopStart;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _dwLoopStart$[ebp]
  00063	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx

; 7429 :     m_dwLoopLength = dwLoopLength;

  00069	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	8b 45 0c	 mov	 eax, DWORD PTR _dwLoopLength$[ebp]
  0006f	89 82 cc 00 00
	00		 mov	 DWORD PTR [edx+204], eax

; 7430 : 
; 7431 :     DPF_LEAVE_VOID();
; 7432 : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
?SetLoopRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ENDP ; DirectSound::CDirectSoundBufferSettings::SetLoopRegion
DSOUND	ENDS
PUBLIC	??_C@_0BC@FAIDNDCA@DSBPOSITIONNOTIFY?$AA@	; `string'
;	COMDAT ??_C@_0BC@FAIDNDCA@DSBPOSITIONNOTIFY?$AA@
DSOUND_RD	SEGMENT
??_C@_0BC@FAIDNDCA@DSBPOSITIONNOTIFY?$AA@ DB 'DSBPOSITIONNOTIFY', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetNotificationPositions@CDirectSoundBufferSettings@DirectSound@@QAEJKPBU_DSBPOSITIONNOTIFY@@@Z
DSOUND	SEGMENT
_this$ = -20
_hr$ = -16
_NotifyT$ = -12
_i$ = -4
_dwNotifyCount$ = 8
_paNotifies$ = 12
?SetNotificationPositions@CDirectSoundBufferSettings@DirectSound@@QAEJKPBU_DSBPOSITIONNOTIFY@@@Z PROC NEAR ; DirectSound::CDirectSoundBufferSettings::SetNotificationPositions, COMDAT
; _this$ = ecx

; 7460 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 7461 :     HRESULT                 hr      = DS_OK;

  0000a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 7462 :     DWORD                   i       = 0;

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 7463 :     DSBPOSITIONNOTIFY       NotifyT;
; 7464 : 
; 7465 :     DPF_ENTER();
; 7466 : 
; 7467 :     //
; 7468 :     // Free any existing notifications
; 7469 :     //
; 7470 : 
; 7471 :     MEMFREE(m_paNotifies);

  00018	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 b8 d4 00 00
	00 00		 cmp	 DWORD PTR [eax+212], 0
  00022	74 1c		 je	 SHORT $L37791
  00024	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 91 d4 00 00
	00		 mov	 edx, DWORD PTR [ecx+212]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?TrackingMemFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingMemFree
  00033	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 80 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+212], 0
$L37791:

; 7472 : 
; 7473 :     //
; 7474 :     // Save the new notification count
; 7475 :     //
; 7476 : 
; 7477 :     m_dwNotifyCount = dwNotifyCount;

  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 55 08	 mov	 edx, DWORD PTR _dwNotifyCount$[ebp]
  00046	89 91 d8 00 00
	00		 mov	 DWORD PTR [ecx+216], edx

; 7478 : 
; 7479 :     //
; 7480 :     // Make a copy of the notification array and put it into ascending order
; 7481 :     //
; 7482 : 
; 7483 :     if(dwNotifyCount)

  0004c	83 7d 08 00	 cmp	 DWORD PTR _dwNotifyCount$[ebp], 0
  00050	0f 84 17 01 00
	00		 je	 $L37792

; 7484 :     {
; 7485 :         hr = HRFROMP(m_paNotifies = MEMALLOC_NOINIT(DSBPOSITIONNOTIFY, dwNotifyCount));

  00056	6a 00		 push	 0
  00058	8b 45 08	 mov	 eax, DWORD PTR _dwNotifyCount$[ebp]
  0005b	c1 e0 03	 shl	 eax, 3
  0005e	50		 push	 eax
  0005f	68 44 53 64 61	 push	 1633964868		; 61645344H
  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@FAIDNDCA@DSBPOSITIONNOTIFY?$AA@
  00069	68 3d 1d 00 00	 push	 7485			; 00001d3dH
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00073	e8 00 00 00 00	 call	 ?TrackingMemAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingMemAlloc
  00078	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 81 d4 00 00
	00		 mov	 DWORD PTR [ecx+212], eax
  00081	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00084	33 c0		 xor	 eax, eax
  00086	83 ba d4 00 00
	00 00		 cmp	 DWORD PTR [edx+212], 0
  0008d	0f 95 c0	 setne	 al
  00090	48		 dec	 eax
  00091	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  00096	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 7486 : 
; 7487 :         if(SUCCEEDED(hr))

  00099	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009d	7c 1d		 jl	 SHORT $L37799

; 7488 :         {
; 7489 :             CopyMemory(m_paNotifies, paNotifies, sizeof(*paNotifies) * dwNotifyCount);

  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _dwNotifyCount$[ebp]
  000a2	c1 e1 03	 shl	 ecx, 3
  000a5	51		 push	 ecx
  000a6	8b 55 0c	 mov	 edx, DWORD PTR _paNotifies$[ebp]
  000a9	52		 push	 edx
  000aa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [eax+212]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 _memcpy
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH
$L37799:

; 7490 :         }
; 7491 : 
; 7492 :         if(SUCCEEDED(hr))

  000bc	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c0	0f 8c a7 00 00
	00		 jl	 $L37792
$L37803:

; 7493 :         {
; 7494 :             while(i < m_dwNotifyCount - 1)

  000c6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  000cf	83 e8 01	 sub	 eax, 1
  000d2	39 45 fc	 cmp	 DWORD PTR _i$[ebp], eax
  000d5	0f 83 92 00 00
	00		 jae	 $L37792

; 7495 :             {
; 7496 :                 if(m_paNotifies[i].dwOffset > m_paNotifies[i + 1].dwOffset)

  000db	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	8b 91 d4 00 00
	00		 mov	 edx, DWORD PTR [ecx+212]
  000e4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [eax+212]
  000ed	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000f0	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  000f3	8b 14 c2	 mov	 edx, DWORD PTR [edx+eax*8]
  000f6	3b 54 f1 08	 cmp	 edx, DWORD PTR [ecx+esi*8+8]
  000fa	76 63		 jbe	 SHORT $L37805

; 7497 :                 {
; 7498 :                     NotifyT = m_paNotifies[i];

  000fc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [eax+212]
  00105	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00108	8b 04 d1	 mov	 eax, DWORD PTR [ecx+edx*8]
  0010b	8b 4c d1 04	 mov	 ecx, DWORD PTR [ecx+edx*8+4]
  0010f	89 45 f4	 mov	 DWORD PTR _NotifyT$[ebp], eax
  00112	89 4d f8	 mov	 DWORD PTR _NotifyT$[ebp+4], ecx

; 7499 :                     m_paNotifies[i] = m_paNotifies[i + 1];

  00115	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00118	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00121	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00125	8b 44 c8 0c	 mov	 eax, DWORD PTR [eax+ecx*8+12]
  00129	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	8b 89 d4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+212]
  00132	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  00135	89 14 f1	 mov	 DWORD PTR [ecx+esi*8], edx
  00138	89 44 f1 04	 mov	 DWORD PTR [ecx+esi*8+4], eax

; 7500 :                     m_paNotifies[i + 1] = NotifyT;

  0013c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  00145	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00148	8b 55 f4	 mov	 edx, DWORD PTR _NotifyT$[ebp]
  0014b	89 54 c8 08	 mov	 DWORD PTR [eax+ecx*8+8], edx
  0014f	8b 55 f8	 mov	 edx, DWORD PTR _NotifyT$[ebp+4]
  00152	89 54 c8 0c	 mov	 DWORD PTR [eax+ecx*8+12], edx

; 7501 : 
; 7502 :                     i = 0;

  00156	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 7503 :                 }
; 7504 :                 else

  0015d	eb 09		 jmp	 SHORT $L37806
$L37805:

; 7505 :                 {
; 7506 :                     i++;

  0015f	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00162	83 c0 01	 add	 eax, 1
  00165	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L37806:

; 7507 :                 }
; 7508 :             }

  00168	e9 59 ff ff ff	 jmp	 $L37803
$L37792:

; 7509 :         }
; 7510 :     }
; 7511 : 
; 7512 :     DPF_LEAVE_HRESULT(hr);
; 7513 : 
; 7514 :     return hr;

  0016d	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 7515 : }

  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 08 00	 ret	 8
?SetNotificationPositions@CDirectSoundBufferSettings@DirectSound@@QAEJKPBU_DSBPOSITIONNOTIFY@@@Z ENDP ; DirectSound::CDirectSoundBufferSettings::SetNotificationPositions
DSOUND	ENDS
PUBLIC	??_ECDirectSoundBuffer@DirectSound@@W7AEPAXI@Z	; DirectSound::CDirectSoundBuffer::`vector deleting destructor'
PUBLIC	??0?$CValidObject@$0EEFDECCA@@DirectSound@@QAE@XZ ; DirectSound::CValidObject<1146307104>::CValidObject<1146307104>
PUBLIC	?AddRef@CDirectSoundBuffer@DirectSound@@UAGKXZ	; DirectSound::CDirectSoundBuffer::AddRef
PUBLIC	?Release@CDirectSoundBuffer@DirectSound@@UAGKXZ	; DirectSound::CDirectSoundBuffer::Release
PUBLIC	??_7CDirectSoundBuffer@DirectSound@@6B?$CValidObject@$0EEFDECCA@@1@@ ; DirectSound::CDirectSoundBuffer::`vftable'
PUBLIC	??_7CDirectSoundBuffer@DirectSound@@6BCDirectSoundVoice@1@@ ; DirectSound::CDirectSoundBuffer::`vftable'
PUBLIC	??_GCDirectSoundBuffer@DirectSound@@UAEPAXI@Z	; DirectSound::CDirectSoundBuffer::`scalar deleting destructor'
EXTRN	??_ECDirectSoundBuffer@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CDirectSoundBuffer::`vector deleting destructor'
;	COMDAT ??_7CDirectSoundBuffer@DirectSound@@6B?$CValidObject@$0EEFDECCA@@1@@
CONST	SEGMENT
??_7CDirectSoundBuffer@DirectSound@@6B?$CValidObject@$0EEFDECCA@@1@@ DD FLAT:??_ECDirectSoundBuffer@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundBuffer::`vftable'
CONST	ENDS
;	COMDAT ??_7CDirectSoundBuffer@DirectSound@@6BCDirectSoundVoice@1@@
CONST	SEGMENT
??_7CDirectSoundBuffer@DirectSound@@6BCDirectSoundVoice@1@@ DD FLAT:??_ECDirectSoundBuffer@DirectSound@@W7AEPAXI@Z ; DirectSound::CDirectSoundBuffer::`vftable'
	DD	FLAT:?AddRef@CDirectSoundBuffer@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CDirectSoundBuffer@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSoundBuffer@DirectSound@@QAE@PAVCDirectSound@1@@Z
DSOUND	SEGMENT
_this$ = -4
_pDirectSound$ = 8
??0CDirectSoundBuffer@DirectSound@@QAE@PAVCDirectSound@1@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::CDirectSoundBuffer, COMDAT
; _this$ = ecx

; 7541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$CValidObject@$0EEFDECCA@@DirectSound@@QAE@XZ ; DirectSound::CValidObject<1146307104>::CValidObject<1146307104>
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	e8 00 00 00 00	 call	 ??0CDirectSoundVoice@DirectSound@@QAE@PAVCDirectSound@1@@Z ; DirectSound::CDirectSoundVoice::CDirectSoundVoice
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CDirectSoundBuffer@DirectSound@@6B?$CValidObject@$0EEFDECCA@@1@@
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CDirectSoundBuffer@DirectSound@@6BCDirectSoundVoice@1@@

; 7542 :     DPF_ENTER();
; 7543 :     DPF_LEAVE_VOID();
; 7544 : }

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??0CDirectSoundBuffer@DirectSound@@QAE@PAVCDirectSound@1@@Z ENDP ; DirectSound::CDirectSoundBuffer::CDirectSoundBuffer
DSOUND	ENDS
PUBLIC	??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@ ; `string'
;	COMDAT ??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@ DB 'CDirectSoundBuff'
	DB	'er::AddRef', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CDirectSoundBuffer@DirectSound@@UAGKXZ
DSOUND	SEGMENT
$T40642 = -12
$T40641 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CDirectSoundBuffer@DirectSound@@UAGKXZ PROC NEAR ; DirectSound::CDirectSoundBuffer::AddRef, COMDAT

; 580  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 581  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32739
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 45 02 00 00	 push	 581			; 00000245H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40641[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40641[ebp]
  00053	eb 31		 jmp	 SHORT $L32737
$L32739:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@IDOOAHKJ@CDirectSoundBuffer?3?3AddRef?$AA@
  0005a	68 45 02 00 00	 push	 581			; 00000245H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 e9 08	 sub	 ecx, 8
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 582  :         return CRefCount::AddRef();

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?AddRef@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::AddRef
  00078	89 45 f4	 mov	 DWORD PTR $T40642[ebp], eax
  0007b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0007e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00083	8b 45 f4	 mov	 eax, DWORD PTR $T40642[ebp]
$L32737:

; 583  :     }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?AddRef@CDirectSoundBuffer@DirectSound@@UAGKXZ ENDP	; DirectSound::CDirectSoundBuffer::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@ ; `string'
;	COMDAT ??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@ DB 'CDirectSoundBuf'
	DB	'fer::Release', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CDirectSoundBuffer@DirectSound@@UAGKXZ
DSOUND	SEGMENT
$T40647 = -12
$T40646 = -8
___AutoLock$ = -4
_this$ = 8
?Release@CDirectSoundBuffer@DirectSound@@UAGKXZ PROC NEAR ; DirectSound::CDirectSoundBuffer::Release, COMDAT

; 586  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 587  :         _ENTER_EXTERNAL_METHOD("CDirectSoundBuffer::Release");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L32749
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 4b 02 00 00	 push	 587			; 0000024bH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40646[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40646[ebp]
  00053	eb 31		 jmp	 SHORT $L32747
$L32749:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IJJNEHOC@CDirectSoundBuffer?3?3Release?$AA@
  0005a	68 4b 02 00 00	 push	 587			; 0000024bH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 e9 08	 sub	 ecx, 8
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 588  :         return CRefCount::Release();

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?Release@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::Release
  00078	89 45 f4	 mov	 DWORD PTR $T40647[ebp], eax
  0007b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0007e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00083	8b 45 f4	 mov	 eax, DWORD PTR $T40647[ebp]
$L32747:

; 589  :     }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
?Release@CDirectSoundBuffer@DirectSound@@UAGKXZ ENDP	; DirectSound::CDirectSoundBuffer::Release
DSOUND	ENDS
PUBLIC	??1CDirectSoundBuffer@DirectSound@@UAE@XZ	; DirectSound::CDirectSoundBuffer::~CDirectSoundBuffer
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSoundBuffer@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSoundBuffer@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CDirectSoundBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSoundBuffer@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundBuffer::~CDirectSoundBuffer
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L37814
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L37814:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCDirectSoundBuffer@DirectSound@@UAEPAXI@Z ENDP	; DirectSound::CDirectSoundBuffer::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146307104>::~CValidObject<1146307104>
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT ??1CDirectSoundBuffer@DirectSound@@UAE@XZ
DSOUND	SEGMENT
tv68 = -8
_this$ = -4
??1CDirectSoundBuffer@DirectSound@@UAE@XZ PROC NEAR	; DirectSound::CDirectSoundBuffer::~CDirectSoundBuffer, COMDAT
; _this$ = ecx

; 7569 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundBuffer@DirectSound@@6B?$CValidObject@$0EEFDECCA@@1@@
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET FLAT:??_7CDirectSoundBuffer@DirectSound@@6BCDirectSoundVoice@1@@

; 7570 :     DPF_ENTER();
; 7571 : 
; 7572 :     //
; 7573 :     // Free the buffer implementation
; 7574 :     //
; 7575 : 
; 7576 :     RELEASE(m_pBuffer);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	83 7a 28 00	 cmp	 DWORD PTR [edx+40], 0
  00023	74 1c		 je	 SHORT $L37819
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00031	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00033	50		 push	 eax
  00034	ff 51 08	 call	 DWORD PTR [ecx+8]
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
$L37819:

; 7577 : 
; 7578 :     //
; 7579 :     // Free settings
; 7580 :     //
; 7581 : 
; 7582 :     RELEASE(m_pSettings);

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00048	74 1c		 je	 SHORT $L37818
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00056	8b 12		 mov	 edx, DWORD PTR [edx]
  00058	51		 push	 ecx
  00059	ff 52 08	 call	 DWORD PTR [edx+8]
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
$L37818:

; 7583 : 
; 7584 :     DPF_LEAVE_VOID();
; 7585 : }

  00066	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0006a	74 0b		 je	 SHORT $L40654
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	83 c1 08	 add	 ecx, 8
  00072	89 4d f8	 mov	 DWORD PTR tv68[ebp], ecx
  00075	eb 07		 jmp	 SHORT $L40655
$L40654:
  00077	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$L40655:
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR tv68[ebp]
  00081	e8 00 00 00 00	 call	 ??1CDirectSoundVoice@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundVoice::~CDirectSoundVoice
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146307104>::~CValidObject<1146307104>
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
??1CDirectSoundBuffer@DirectSound@@UAE@XZ ENDP		; DirectSound::CDirectSoundBuffer::~CDirectSoundBuffer
DSOUND	ENDS
PUBLIC	??_C@_0DE@ODMOHDOO@CMcpxBuffer?$CIm_pDirectSound?9?$DOm_pD@ ; `string'
PUBLIC	?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ ; DirectSound::CHrtfSource::IsValidAlgorithm
PUBLIC	??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@ ; `string'
PUBLIC	??_C@_0BK@FJGLMMBO@DSBUFFERDESC?5not?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BM@JKLCLPIK@DSBUFFERDESC?5size?5not?5valid?$AA@ ; `string'
PUBLIC	??_C@_0BO@GPLLBHKB@Specified?5invalid?5flags?5?$CI?$CFlx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CF@IDMAODDE@MIXIN?1FXIN?5buffers?5can?8t?5be?5LOCD@ ; `string'
PUBLIC	??_C@_0DB@PBBNEOHK@MIXIN?1FXIN?5buffers?5can?8t?5have?5CT@ ; `string'
PUBLIC	??_C@_0DA@OJHIJBPN@lpwfxFormat?5for?5MIXIN?1FXIN?5buffe@ ; `string'
PUBLIC	??_C@_0CP@MDAGNMFI@dwBufferBytes?5for?5MIXIN?1FXIN?5buf@ ; `string'
PUBLIC	??_C@_0BG@EBJBIGK@Invalid?5buffer?5format?$AA@	; `string'
PUBLIC	??_C@_0BK@LGHHILEA@Buffer?5size?5out?9of?9bounds?$AA@ ; `string'
PUBLIC	??_C@_0CO@MCFCIGDO@Buffer?5size?5not?5a?5multiple?5of?5th@ ; `string'
PUBLIC	??_C@_0KC@MENNIMHB@You?5must?5call?5one?5of?5the?53D?5algo@ ; `string'
PUBLIC	??_C@_0EK@MJHAJPJB@Specifying?5mixbins?5will?5override@ ; `string'
PUBLIC	??_C@_0EI@PCDOEANA@Don?8t?5assign?5a?5voice?5to?5DSMIXBIN@ ; `string'
PUBLIC	??_C@_0EE@DNMPLJCN@The?5input?5mixbin?5for?5an?5FXIN?5buf@ ; `string'
PUBLIC	??_C@_0BL@HAPJOIIA@CDirectSoundBufferSettings?$AA@ ; `string'
EXTRN	??0CMcpxBuffer@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundBufferSettings@1@@Z:NEAR ; DirectSound::CMcpxBuffer::CMcpxBuffer
EXTRN	?Initialize@CMcpxBuffer@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxBuffer::Initialize
;	COMDAT ??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@ DB 'CDirectSound'
	DB	'Buffer::Initialize', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@FJGLMMBO@DSBUFFERDESC?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@FJGLMMBO@DSBUFFERDESC?5not?5supplied?$AA@ DB 'DSBUFFERDESC not '
	DB	'supplied', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@JKLCLPIK@DSBUFFERDESC?5size?5not?5valid?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@JKLCLPIK@DSBUFFERDESC?5size?5not?5valid?$AA@ DB 'DSBUFFERDESC s'
	DB	'ize not valid', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@GPLLBHKB@Specified?5invalid?5flags?5?$CI?$CFlx?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@GPLLBHKB@Specified?5invalid?5flags?5?$CI?$CFlx?$CJ?$AA@ DB 'Spe'
	DB	'cified invalid flags (%lx)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@IDMAODDE@MIXIN?1FXIN?5buffers?5can?8t?5be?5LOCD@
DSOUND_RD	SEGMENT
??_C@_0CF@IDMAODDE@MIXIN?1FXIN?5buffers?5can?8t?5be?5LOCD@ DB 'MIXIN/FXIN'
	DB	' buffers can''t be LOCDEFER', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@PBBNEOHK@MIXIN?1FXIN?5buffers?5can?8t?5have?5CT@
DSOUND_RD	SEGMENT
??_C@_0DB@PBBNEOHK@MIXIN?1FXIN?5buffers?5can?8t?5have?5CT@ DB 'MIXIN/FXIN'
	DB	' buffers can''t have CTRLPOSITIONNOTIFY', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DA@OJHIJBPN@lpwfxFormat?5for?5MIXIN?1FXIN?5buffe@
DSOUND_RD	SEGMENT
??_C@_0DA@OJHIJBPN@lpwfxFormat?5for?5MIXIN?1FXIN?5buffe@ DB 'lpwfxFormat '
	DB	'for MIXIN/FXIN buffers must be NULL', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@MDAGNMFI@dwBufferBytes?5for?5MIXIN?1FXIN?5buf@
DSOUND_RD	SEGMENT
??_C@_0CP@MDAGNMFI@dwBufferBytes?5for?5MIXIN?1FXIN?5buf@ DB 'dwBufferByte'
	DB	's for MIXIN/FXIN buffers must be 0', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@EBJBIGK@Invalid?5buffer?5format?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@EBJBIGK@Invalid?5buffer?5format?$AA@ DB 'Invalid buffer format', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@LGHHILEA@Buffer?5size?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@LGHHILEA@Buffer?5size?5out?9of?9bounds?$AA@ DB 'Buffer size out'
	DB	'-of-bounds', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CO@MCFCIGDO@Buffer?5size?5not?5a?5multiple?5of?5th@
DSOUND_RD	SEGMENT
??_C@_0CO@MCFCIGDO@Buffer?5size?5not?5a?5multiple?5of?5th@ DB 'Buffer siz'
	DB	'e not a multiple of the sample size', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0KC@MENNIMHB@You?5must?5call?5one?5of?5the?53D?5algo@
DSOUND_RD	SEGMENT
??_C@_0KC@MENNIMHB@You?5must?5call?5one?5of?5the?53D?5algo@ DB 'You must '
	DB	'call one of the 3D algorithm initialization functions (Direct'
	DB	'SoundUseLightHRTF, DirectSoundUseFullHRTF, DirectSoundUsePan3'
	DB	'D) before creating a 3D buffer', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EK@MJHAJPJB@Specifying?5mixbins?5will?5override@
DSOUND_RD	SEGMENT
??_C@_0EK@MJHAJPJB@Specifying?5mixbins?5will?5override@ DB 'Specifying mi'
	DB	'xbins will override the channel mask specified in the format', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EI@PCDOEANA@Don?8t?5assign?5a?5voice?5to?5DSMIXBIN@
DSOUND_RD	SEGMENT
??_C@_0EI@PCDOEANA@Don?8t?5assign?5a?5voice?5to?5DSMIXBIN@ DB 'Don''t ass'
	DB	'ign a voice to DSMIXBIN_SUBMIX.  Instead, call SetOutputBuffe'
	DB	'r', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EE@DNMPLJCN@The?5input?5mixbin?5for?5an?5FXIN?5buf@
DSOUND_RD	SEGMENT
??_C@_0EE@DNMPLJCN@The?5input?5mixbin?5for?5an?5FXIN?5buf@ DB 'The input '
	DB	'mixbin for an FXIN buffer can only be one of the FX sends', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@HAPJOIIA@CDirectSoundBufferSettings?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@HAPJOIIA@CDirectSoundBufferSettings?$AA@ DB 'CDirectSoundBuffer'
	DB	'Settings', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@ODMOHDOO@CMcpxBuffer?$CIm_pDirectSound?9?$DOm_pD@
DSOUND_RD	SEGMENT
??_C@_0DE@ODMOHDOO@CMcpxBuffer?$CIm_pDirectSound?9?$DOm_pD@ DB 'CMcpxBuff'
	DB	'er(m_pDirectSound->m_pDevice, m_pSettings)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSBUFFERDESC@@@Z
DSOUND	SEGMENT
tv402 = -36
tv378 = -32
$T40666 = -28
$T40663 = -24
$T40660 = -20
$T40659 = -16
___AutoLock$ = -12
_hr$ = -8
_i$ = -4
_this$ = 8
_pdsbd$ = 12
?Initialize@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSBUFFERDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::Initialize, COMDAT

; 7611 : {                                   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi

; 7612 :     HRESULT                 hr;
; 7613 : 
; 7614 : #ifdef VALIDATE_PARAMETERS
; 7615 : 
; 7616 :     DWORD                   i;
; 7617 : 
; 7618 : #endif // VALIDATE_PARAMETERS
; 7619 : 
; 7620 :     DPF_ENTER();
; 7621 :     ENTER_EXTERNAL_METHOD();

  00007	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00016	74 44		 je	 SHORT $L37828
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00022	68 c5 1d 00 00	 push	 7621			; 00001dc5H
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002c	6a 03		 push	 3
  0002e	6a 09		 push	 9
  00030	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00042	83 c4 04	 add	 esp, 4
  00045	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T40659[ebp], -2147467259 ; 80004005H
  0004c	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004f	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00054	8b 45 f0	 mov	 eax, DWORD PTR $T40659[ebp]
  00057	e9 0c 07 00 00	 jmp	 $L37824
$L37828:
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00061	68 c5 1d 00 00	 push	 7621			; 00001dc5H
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 7622 :     
; 7623 : #ifdef VALIDATE_PARAMETERS
; 7624 : 
; 7625 :     if(!pdsbd)

  00073	83 7d 0c 00	 cmp	 DWORD PTR _pdsbd$[ebp], 0
  00077	75 2d		 jne	 SHORT $L37832

; 7626 :     {
; 7627 :         DPF_ERROR("DSBUFFERDESC not supplied");

  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00083	68 cb 1d 00 00	 push	 7627			; 00001dcbH
  00088	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008d	6a 01		 push	 1
  0008f	6a 09		 push	 9
  00091	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00096	83 c4 18	 add	 esp, 24			; 00000018H
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@FJGLMMBO@DSBUFFERDESC?5not?5supplied?$AA@
  0009e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a3	83 c4 04	 add	 esp, 4
$L37832:

; 7628 :     }
; 7629 : 
; 7630 :     if(sizeof(*pdsbd) < pdsbd->dwSize)

  000a6	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  000a9	83 38 18	 cmp	 DWORD PTR [eax], 24	; 00000018H
  000ac	76 2d		 jbe	 SHORT $L37834

; 7631 :     {
; 7632 :         DPF_ERROR("DSBUFFERDESC size not valid");

  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  000b8	68 d0 1d 00 00	 push	 7632			; 00001dd0H
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c2	6a 01		 push	 1
  000c4	6a 09		 push	 9
  000c6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000cb	83 c4 18	 add	 esp, 24			; 00000018H
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@JKLCLPIK@DSBUFFERDESC?5size?5not?5valid?$AA@
  000d3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d8	83 c4 04	 add	 esp, 4
$L37834:

; 7633 :     }
; 7634 : 
; 7635 :     if(pdsbd->dwFlags & ~DSBCAPS_VALID)

  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  000de	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e1	81 e2 4f de f3
	ff		 and	 edx, -795057		; fff3de4fH
  000e7	85 d2		 test	 edx, edx
  000e9	74 3a		 je	 SHORT $L37836

; 7636 :     {
; 7637 :         DPF_ERROR("Specified invalid flags (%lx)", pdsbd->dwFlags & ~DSBCAPS_VALID);

  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  000f5	68 d5 1d 00 00	 push	 7637			; 00001dd5H
  000fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000ff	6a 01		 push	 1
  00101	6a 09		 push	 9
  00103	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00108	83 c4 18	 add	 esp, 24			; 00000018H
  0010b	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  0010e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00111	81 e1 4f de f3
	ff		 and	 ecx, -795057		; fff3de4fH
  00117	51		 push	 ecx
  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GPLLBHKB@Specified?5invalid?5flags?5?$CI?$CFlx?$CJ?$AA@
  0011d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00122	83 c4 08	 add	 esp, 8
$L37836:

; 7638 :     }
; 7639 : 
; 7640 :     if(pdsbd->dwFlags & DSBCAPS_SUBMIXMASK)

  00125	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00128	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0012b	25 00 20 08 00	 and	 eax, 532480		; 00082000H
  00130	85 c0		 test	 eax, eax
  00132	0f 84 eb 00 00
	00		 je	 $L37838

; 7641 :     {
; 7642 :         if(pdsbd->dwFlags & DSBCAPS_LOCDEFER)

  00138	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  0013b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013e	81 e2 00 00 04
	00		 and	 edx, 262144		; 00040000H
  00144	85 d2		 test	 edx, edx
  00146	74 2d		 je	 SHORT $L37839

; 7643 :         {
; 7644 :             DPF_ERROR("MIXIN/FXIN buffers can't be LOCDEFER");

  00148	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00152	68 dc 1d 00 00	 push	 7644			; 00001ddcH
  00157	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0015c	6a 01		 push	 1
  0015e	6a 09		 push	 9
  00160	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00165	83 c4 18	 add	 esp, 24			; 00000018H
  00168	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@IDMAODDE@MIXIN?1FXIN?5buffers?5can?8t?5be?5LOCD@
  0016d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00172	83 c4 04	 add	 esp, 4
$L37839:

; 7645 :         }
; 7646 : 
; 7647 :         if(pdsbd->dwFlags & DSBCAPS_CTRLPOSITIONNOTIFY)

  00175	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  00178	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0017b	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00181	85 c9		 test	 ecx, ecx
  00183	74 2d		 je	 SHORT $L37841

; 7648 :         {
; 7649 :             DPF_ERROR("MIXIN/FXIN buffers can't have CTRLPOSITIONNOTIFY");

  00185	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0018a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  0018f	68 e1 1d 00 00	 push	 7649			; 00001de1H
  00194	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00199	6a 01		 push	 1
  0019b	6a 09		 push	 9
  0019d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001a2	83 c4 18	 add	 esp, 24			; 00000018H
  001a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@PBBNEOHK@MIXIN?1FXIN?5buffers?5can?8t?5have?5CT@
  001aa	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001af	83 c4 04	 add	 esp, 4
$L37841:

; 7650 :         }
; 7651 : 
; 7652 :         if(pdsbd->lpwfxFormat)

  001b2	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  001b5	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  001b9	74 2d		 je	 SHORT $L37843

; 7653 :         {
; 7654 :             DPF_ERROR("lpwfxFormat for MIXIN/FXIN buffers must be NULL");

  001bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  001c5	68 e6 1d 00 00	 push	 7654			; 00001de6H
  001ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001cf	6a 01		 push	 1
  001d1	6a 09		 push	 9
  001d3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001d8	83 c4 18	 add	 esp, 24			; 00000018H
  001db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@OJHIJBPN@lpwfxFormat?5for?5MIXIN?1FXIN?5buffe@
  001e0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001e5	83 c4 04	 add	 esp, 4
$L37843:

; 7655 :         }
; 7656 : 
; 7657 :         if(pdsbd->dwBufferBytes)

  001e8	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  001eb	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001ef	74 2d		 je	 SHORT $L37845

; 7658 :         {
; 7659 :             DPF_ERROR("dwBufferBytes for MIXIN/FXIN buffers must be 0");

  001f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  001fb	68 eb 1d 00 00	 push	 7659			; 00001debH
  00200	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00205	6a 01		 push	 1
  00207	6a 09		 push	 9
  00209	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0020e	83 c4 18	 add	 esp, 24			; 00000018H
  00211	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@MDAGNMFI@dwBufferBytes?5for?5MIXIN?1FXIN?5buf@
  00216	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0021b	83 c4 04	 add	 esp, 4
$L37845:

; 7660 :         }
; 7661 :     }
; 7662 :     else

  0021e	e9 55 01 00 00	 jmp	 $L37847
$L37838:

; 7663 :     {
; 7664 :         if(!pdsbd->lpwfxFormat)

  00223	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  00226	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0022a	75 2d		 jne	 SHORT $L37848

; 7665 :         {
; 7666 :             DPF_ERROR("Failed to specify a buffer format");

  0022c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00231	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00236	68 f2 1d 00 00	 push	 7666			; 00001df2H
  0023b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00240	6a 01		 push	 1
  00242	6a 09		 push	 9
  00244	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00249	83 c4 18	 add	 esp, 24			; 00000018H
  0024c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PCLFAJDB@Failed?5to?5specify?5a?5buffer?5forma@
  00251	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00256	83 c4 04	 add	 esp, 4
$L37848:

; 7667 :         }
; 7668 : 
; 7669 :         if(!IsValidFormat(pdsbd->lpwfxFormat))

  00259	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  0025c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 ?IsValidFormat@WaveFormat@DirectSound@@YGHPBUtWAVEFORMATEX@@@Z ; DirectSound::WaveFormat::IsValidFormat
  00265	85 c0		 test	 eax, eax
  00267	75 2d		 jne	 SHORT $L37849

; 7670 :         {
; 7671 :             DPF_ERROR("Invalid buffer format");

  00269	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0026e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00273	68 f7 1d 00 00	 push	 7671			; 00001df7H
  00278	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0027d	6a 01		 push	 1
  0027f	6a 09		 push	 9
  00281	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00286	83 c4 18	 add	 esp, 24			; 00000018H
  00289	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EBJBIGK@Invalid?5buffer?5format?$AA@
  0028e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00293	83 c4 04	 add	 esp, 4
$L37849:

; 7672 :         }
; 7673 : 
; 7674 :         if(pdsbd->dwBufferBytes && ((pdsbd->dwBufferBytes < DSBSIZE_MIN) || (pdsbd->dwBufferBytes > DSBSIZE_MAX)))

  00296	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  00299	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0029d	74 42		 je	 SHORT $L37851
  0029f	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  002a2	83 7a 08 04	 cmp	 DWORD PTR [edx+8], 4
  002a6	72 0c		 jb	 SHORT $L37852
  002a8	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  002ab	81 78 08 ff ff
	ff 0f		 cmp	 DWORD PTR [eax+8], 268435455 ; 0fffffffH
  002b2	76 2d		 jbe	 SHORT $L37851
$L37852:

; 7675 :         {
; 7676 :             DPF_ERROR("Buffer size out-of-bounds");

  002b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002b9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  002be	68 fc 1d 00 00	 push	 7676			; 00001dfcH
  002c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002c8	6a 01		 push	 1
  002ca	6a 09		 push	 9
  002cc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002d1	83 c4 18	 add	 esp, 24			; 00000018H
  002d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@LGHHILEA@Buffer?5size?5out?9of?9bounds?$AA@
  002d9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002de	83 c4 04	 add	 esp, 4
$L37851:

; 7677 :         }
; 7678 :     
; 7679 :         if(pdsbd->dwBufferBytes && (pdsbd->dwBufferBytes % pdsbd->lpwfxFormat->nBlockAlign))

  002e1	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  002e4	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  002e8	74 45		 je	 SHORT $L37854
  002ea	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  002ed	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002f0	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  002f4	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  002f7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002fa	33 d2		 xor	 edx, edx
  002fc	f7 f1		 div	 ecx
  002fe	85 d2		 test	 edx, edx
  00300	74 2d		 je	 SHORT $L37854

; 7680 :         {
; 7681 :             DPF_ERROR("Buffer size not a multiple of the sample size");

  00302	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00307	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  0030c	68 01 1e 00 00	 push	 7681			; 00001e01H
  00311	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00316	6a 01		 push	 1
  00318	6a 09		 push	 9
  0031a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0031f	83 c4 18	 add	 esp, 24			; 00000018H
  00322	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@MCFCIGDO@Buffer?5size?5not?5a?5multiple?5of?5th@
  00327	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0032c	83 c4 04	 add	 esp, 4
$L37854:

; 7682 :         }
; 7683 : 
; 7684 :         if((pdsbd->dwFlags & DSBCAPS_CTRL3D) && (1 != pdsbd->lpwfxFormat->nChannels))

  0032f	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  00332	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00335	83 e1 10	 and	 ecx, 16			; 00000010H
  00338	85 c9		 test	 ecx, ecx
  0033a	74 3c		 je	 SHORT $L37847
  0033c	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  0033f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00342	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00346	83 f9 01	 cmp	 ecx, 1
  00349	74 2d		 je	 SHORT $L37847

; 7685 :         {
; 7686 :             DPF_ERROR("3D voices must be mono");

  0034b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00350	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00355	68 06 1e 00 00	 push	 7686			; 00001e06H
  0035a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0035f	6a 01		 push	 1
  00361	6a 09		 push	 9
  00363	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00368	83 c4 18	 add	 esp, 24			; 00000018H
  0036b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@DNJAKINH@3D?5voices?5must?5be?5mono?$AA@
  00370	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00375	83 c4 04	 add	 esp, 4
$L37847:

; 7687 :         }
; 7688 :     }
; 7689 : 
; 7690 :     if((pdsbd->dwFlags & DSBCAPS_CTRL3D) && !CHrtfSource::IsValidAlgorithm())

  00378	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  0037b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0037e	83 e0 10	 and	 eax, 16			; 00000010H
  00381	85 c0		 test	 eax, eax
  00383	74 36		 je	 SHORT $L37857
  00385	e8 00 00 00 00	 call	 ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ ; DirectSound::CHrtfSource::IsValidAlgorithm
  0038a	85 c0		 test	 eax, eax
  0038c	75 2d		 jne	 SHORT $L37857

; 7691 :     {
; 7692 :         DPF_ERROR("You must call one of the 3D algorithm initialization functions (DirectSoundUseLightHRTF, DirectSoundUseFullHRTF, DirectSoundUsePan3D) before creating a 3D buffer");

  0038e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00393	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00398	68 0c 1e 00 00	 push	 7692			; 00001e0cH
  0039d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  003a2	6a 01		 push	 1
  003a4	6a 09		 push	 9
  003a6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  003ab	83 c4 18	 add	 esp, 24			; 00000018H
  003ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0KC@MENNIMHB@You?5must?5call?5one?5of?5the?53D?5algo@
  003b3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003b8	83 c4 04	 add	 esp, 4
$L37857:

; 7693 :     }
; 7694 : 
; 7695 :     if(pdsbd->lpMixBins)

  003bb	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  003be	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  003c2	0f 84 35 02 00
	00		 je	 $L37859

; 7696 :     {
; 7697 :         if(pdsbd->lpMixBins->dwMixBinCount > DSMIXBIN_ASSIGNMENT_MAX)

  003c8	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  003cb	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  003ce	83 38 08	 cmp	 DWORD PTR [eax], 8
  003d1	76 2f		 jbe	 SHORT $L37860

; 7698 :         {
; 7699 :             DPF_ERROR("No voice can be assigned to more than %lu mix bins", DSMIXBIN_ASSIGNMENT_MAX);

  003d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  003d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  003dd	68 13 1e 00 00	 push	 7699			; 00001e13H
  003e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  003e7	6a 01		 push	 1
  003e9	6a 09		 push	 9
  003eb	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  003f0	83 c4 18	 add	 esp, 24			; 00000018H
  003f3	6a 08		 push	 8
  003f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@JHLFCOCA@No?5voice?5can?5be?5assigned?5to?5more@
  003fa	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003ff	83 c4 08	 add	 esp, 8
$L37860:

; 7700 :         }
; 7701 : 
; 7702 :         if(pdsbd->lpwfxFormat)

  00402	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  00405	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00409	0f 84 91 00 00
	00		 je	 $L37861

; 7703 :         {
; 7704 :             if(pdsbd->lpMixBins->dwMixBinCount % pdsbd->lpwfxFormat->nChannels)

  0040f	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00412	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00415	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  00418	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0041b	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  0041f	8b 00		 mov	 eax, DWORD PTR [eax]
  00421	33 d2		 xor	 edx, edx
  00423	f7 f1		 div	 ecx
  00425	85 d2		 test	 edx, edx
  00427	74 2d		 je	 SHORT $L37862

; 7705 :             {
; 7706 :                 DPF_ERROR("The mixbin count must be a multiple of the channel count");

  00429	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0042e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00433	68 1a 1e 00 00	 push	 7706			; 00001e1aH
  00438	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0043d	6a 01		 push	 1
  0043f	6a 09		 push	 9
  00441	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00446	83 c4 18	 add	 esp, 24			; 00000018H
  00449	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@NDMJBELB@The?5mixbin?5count?5must?5be?5a?5multi@
  0044e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00453	83 c4 04	 add	 esp, 4
$L37862:

; 7707 :             }
; 7708 : 
; 7709 :             if(WAVE_FORMAT_EXTENSIBLE == pdsbd->lpwfxFormat->wFormatTag)

  00456	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00459	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0045c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0045f	81 f9 fe ff 00
	00		 cmp	 ecx, 65534		; 0000fffeH
  00465	75 39		 jne	 SHORT $L37861

; 7710 :             {
; 7711 :                 if(((LPCWAVEFORMATEXTENSIBLE)pdsbd->lpwfxFormat)->dwChannelMask)

  00467	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  0046a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0046d	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00471	74 2d		 je	 SHORT $L37861

; 7712 :                 {
; 7713 :                     DPF_WARNING("Specifying mixbins will override the channel mask specified in the format");

  00473	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00478	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  0047d	68 21 1e 00 00	 push	 7713			; 00001e21H
  00482	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00487	6a 03		 push	 3
  00489	6a 09		 push	 9
  0048b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00490	83 c4 18	 add	 esp, 24			; 00000018H
  00493	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EK@MJHAJPJB@Specifying?5mixbins?5will?5override@
  00498	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0049d	83 c4 04	 add	 esp, 4
$L37861:

; 7714 :                 }
; 7715 :             }
; 7716 :         }
; 7717 : 
; 7718 :         for(i = 0; i < pdsbd->lpMixBins->dwMixBinCount; i++)

  004a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  004a7	eb 09		 jmp	 SHORT $L37867
$L37868:
  004a9	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004ac	83 c1 01	 add	 ecx, 1
  004af	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$L37867:
  004b2	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  004b5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004b8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  004bb	3b 08		 cmp	 ecx, DWORD PTR [eax]
  004bd	0f 83 83 00 00
	00		 jae	 $L37869

; 7719 :         {
; 7720 :             if(pdsbd->lpMixBins->lpMixBinVolumePairs[i].dwMixBin > DSMIXBIN_LAST)

  004c3	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  004c6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  004c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004cc	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  004cf	83 3c d1 1f	 cmp	 DWORD PTR [ecx+edx*8], 31 ; 0000001fH
  004d3	76 2d		 jbe	 SHORT $L37870

; 7721 :             {
; 7722 :                 DPF_ERROR("Specified an invalid mixbin");

  004d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  004da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  004df	68 2a 1e 00 00	 push	 7722			; 00001e2aH
  004e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  004e9	6a 01		 push	 1
  004eb	6a 09		 push	 9
  004ed	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  004f2	83 c4 18	 add	 esp, 24			; 00000018H
  004f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IOBMOJLJ@Specified?5an?5invalid?5mixbin?$AA@
  004fa	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  004ff	83 c4 04	 add	 esp, 4
$L37870:

; 7723 :             }
; 7724 : 
; 7725 :             if(DSMIXBIN_SUBMIX == pdsbd->lpMixBins->lpMixBinVolumePairs[i].dwMixBin)

  00502	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  00505	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00508	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0050b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0050e	83 3c c2 1f	 cmp	 DWORD PTR [edx+eax*8], 31 ; 0000001fH
  00512	75 2d		 jne	 SHORT $L37871

; 7726 :             {
; 7727 :                 DPF_ERROR("Don't assign a voice to DSMIXBIN_SUBMIX.  Instead, call SetOutputBuffer");

  00514	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00519	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  0051e	68 2f 1e 00 00	 push	 7727			; 00001e2fH
  00523	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00528	6a 01		 push	 1
  0052a	6a 09		 push	 9
  0052c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00531	83 c4 18	 add	 esp, 24			; 00000018H
  00534	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@PCDOEANA@Don?8t?5assign?5a?5voice?5to?5DSMIXBIN@
  00539	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0053e	83 c4 04	 add	 esp, 4
$L37871:

; 7728 :             }
; 7729 :         }

  00541	e9 63 ff ff ff	 jmp	 $L37868
$L37869:

; 7730 : 
; 7731 :         if(pdsbd->dwFlags & DSBCAPS_CTRL3D)

  00546	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  00549	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0054c	83 e2 10	 and	 edx, 16			; 00000010H
  0054f	85 d2		 test	 edx, edx
  00551	0f 84 a6 00 00
	00		 je	 $L37859

; 7732 :         {
; 7733 :             if(pdsbd->lpMixBins->dwMixBinCount < DirectSoundRequiredMixBins_3D.dwMixBinCount)

  00557	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  0055a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0055d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0055f	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _DirectSoundRequiredMixBins_3D
  00565	73 2d		 jae	 SHORT $L37874

; 7734 :             {
; 7735 :                 DPF_ERROR("MixBin count doesn't include enough mixbins to hold all required for 3D");

  00567	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0056c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00571	68 37 1e 00 00	 push	 7735			; 00001e37H
  00576	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0057b	6a 01		 push	 1
  0057d	6a 09		 push	 9
  0057f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00584	83 c4 18	 add	 esp, 24			; 00000018H
  00587	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@MJPKEPAI@MixBin?5count?5doesn?8t?5include?5eno@
  0058c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00591	83 c4 04	 add	 esp, 4
$L37874:

; 7736 :             }
; 7737 :             
; 7738 :             for(i = 0; i < DirectSoundRequiredMixBins_3D.dwMixBinCount; i++)

  00594	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0059b	eb 09		 jmp	 SHORT $L37875
$L37876:
  0059d	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  005a0	83 c0 01	 add	 eax, 1
  005a3	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L37875:
  005a6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  005a9	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _DirectSoundRequiredMixBins_3D
  005af	73 4c		 jae	 SHORT $L37859

; 7739 :             {
; 7740 :                 if(pdsbd->lpMixBins->lpMixBinVolumePairs[i].dwMixBin != DirectSoundRequiredMixBins_3D.lpMixBinVolumePairs[i].dwMixBin)

  005b1	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  005b4	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  005b7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005ba	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  005bd	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  005c0	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR _DirectSoundRequiredMixBins_3D+4
  005c6	8b 0c d1	 mov	 ecx, DWORD PTR [ecx+edx*8]
  005c9	3b 0c c6	 cmp	 ecx, DWORD PTR [esi+eax*8]
  005cc	74 2d		 je	 SHORT $L37878

; 7741 :                 {
; 7742 :                     DPF_ERROR("MixBin array does not include the required 3D bins");

  005ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  005d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  005d8	68 3e 1e 00 00	 push	 7742			; 00001e3eH
  005dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  005e2	6a 01		 push	 1
  005e4	6a 09		 push	 9
  005e6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  005eb	83 c4 18	 add	 esp, 24			; 00000018H
  005ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@EJEOPAOD@MixBin?5array?5does?5not?5include?5th@
  005f3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  005f8	83 c4 04	 add	 esp, 4
$L37878:

; 7743 :                 }
; 7744 :             }

  005fb	eb a0		 jmp	 SHORT $L37876
$L37859:

; 7745 :         }
; 7746 :     }
; 7747 : 
; 7748 :     if(pdsbd->dwFlags & DSBCAPS_FXIN)

  005fd	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00600	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00603	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00608	85 c0		 test	 eax, eax
  0060a	74 3f		 je	 SHORT $L37879

; 7749 :     {
; 7750 :         if((pdsbd->dwInputMixBin < DSMIXBIN_FXSEND_FIRST) || (pdsbd->dwInputMixBin > DSMIXBIN_FXSEND_LAST))

  0060c	8b 4d 0c	 mov	 ecx, DWORD PTR _pdsbd$[ebp]
  0060f	83 79 14 0b	 cmp	 DWORD PTR [ecx+20], 11	; 0000000bH
  00613	72 09		 jb	 SHORT $L37881
  00615	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  00618	83 7a 14 1e	 cmp	 DWORD PTR [edx+20], 30	; 0000001eH
  0061c	76 2d		 jbe	 SHORT $L37879
$L37881:

; 7751 :         {
; 7752 :             DPF_ERROR("The input mixbin for an FXIN buffer can only be one of the FX sends");

  0061e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00623	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GDHCLLJF@CDirectSoundBuffer?3?3Initialize?$AA@
  00628	68 48 1e 00 00	 push	 7752			; 00001e48H
  0062d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00632	6a 01		 push	 1
  00634	6a 09		 push	 9
  00636	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0063b	83 c4 18	 add	 esp, 24			; 00000018H
  0063e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@DNMPLJCN@The?5input?5mixbin?5for?5an?5FXIN?5buf@
  00643	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00648	83 c4 04	 add	 esp, 4
$L37879:

; 7753 :         }
; 7754 :     }
; 7755 : 
; 7756 : #endif // VALIDATE_PARAMETERS
; 7757 : 
; 7758 :     //
; 7759 :     // Create the settings object
; 7760 :     //
; 7761 : 
; 7762 :     hr = HRFROMP(m_pSettings = NEW(CDirectSoundBufferSettings));

  0064b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HAPJOIIA@CDirectSoundBufferSettings?$AA@
  00650	68 52 1e 00 00	 push	 7762			; 00001e52H
  00655	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0065a	68 dc 00 00 00	 push	 220			; 000000dcH
  0065f	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00664	83 c4 10	 add	 esp, 16			; 00000010H
  00667	89 45 ec	 mov	 DWORD PTR $T40660[ebp], eax
  0066a	83 7d ec 00	 cmp	 DWORD PTR $T40660[ebp], 0
  0066e	74 0d		 je	 SHORT $L40661
  00670	8b 4d ec	 mov	 ecx, DWORD PTR $T40660[ebp]
  00673	e8 00 00 00 00	 call	 ??0CDirectSoundBufferSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundBufferSettings::CDirectSoundBufferSettings
  00678	89 45 e0	 mov	 DWORD PTR tv378[ebp], eax
  0067b	eb 07		 jmp	 SHORT $L40662
$L40661:
  0067d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv378[ebp], 0
$L40662:
  00684	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00687	8b 4d e0	 mov	 ecx, DWORD PTR tv378[ebp]
  0068a	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  0068d	33 d2		 xor	 edx, edx
  0068f	83 7d e0 00	 cmp	 DWORD PTR tv378[ebp], 0
  00693	0f 95 c2	 setne	 dl
  00696	4a		 dec	 edx
  00697	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  0069d	89 55 f8	 mov	 DWORD PTR _hr$[ebp], edx

; 7763 : 
; 7764 :     if(SUCCEEDED(hr))

  006a0	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  006a4	7c 12		 jl	 SHORT $L37889

; 7765 :     {
; 7766 :         hr = m_pSettings->Initialize(pdsbd);

  006a6	8b 45 0c	 mov	 eax, DWORD PTR _pdsbd$[ebp]
  006a9	50		 push	 eax
  006aa	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  006ad	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  006b0	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundBufferSettings@DirectSound@@QAEJPBU_DSBUFFERDESC@@@Z ; DirectSound::CDirectSoundBufferSettings::Initialize
  006b5	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37889:

; 7767 :     }
; 7768 : 
; 7769 :     //
; 7770 :     // Create the implementation object
; 7771 :     //
; 7772 :     
; 7773 :     if(SUCCEEDED(hr))

  006b8	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  006bc	7c 65		 jl	 SHORT $L37891

; 7774 :     {
; 7775 :         hr = HRFROMP(m_pBuffer = NEW(CMcpxBuffer(m_pDirectSound->m_pDevice, m_pSettings)));

  006be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@ODMOHDOO@CMcpxBuffer?$CIm_pDirectSound?9?$DOm_pD@
  006c3	68 5f 1e 00 00	 push	 7775			; 00001e5fH
  006c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  006cd	68 48 01 00 00	 push	 328			; 00000148H
  006d2	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  006d7	83 c4 10	 add	 esp, 16			; 00000010H
  006da	89 45 e8	 mov	 DWORD PTR $T40663[ebp], eax
  006dd	83 7d e8 00	 cmp	 DWORD PTR $T40663[ebp], 0
  006e1	74 1e		 je	 SHORT $L40664
  006e3	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  006e6	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  006e9	50		 push	 eax
  006ea	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  006ed	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  006f0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  006f3	50		 push	 eax
  006f4	8b 4d e8	 mov	 ecx, DWORD PTR $T40663[ebp]
  006f7	e8 00 00 00 00	 call	 ??0CMcpxBuffer@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundBufferSettings@1@@Z ; DirectSound::CMcpxBuffer::CMcpxBuffer
  006fc	89 45 dc	 mov	 DWORD PTR tv402[ebp], eax
  006ff	eb 07		 jmp	 SHORT $L40665
$L40664:
  00701	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv402[ebp], 0
$L40665:
  00708	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0070b	8b 55 dc	 mov	 edx, DWORD PTR tv402[ebp]
  0070e	89 51 28	 mov	 DWORD PTR [ecx+40], edx
  00711	33 c0		 xor	 eax, eax
  00713	83 7d dc 00	 cmp	 DWORD PTR tv402[ebp], 0
  00717	0f 95 c0	 setne	 al
  0071a	48		 dec	 eax
  0071b	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  00720	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37891:

; 7776 :     }
; 7777 : 
; 7778 :     if(SUCCEEDED(hr))

  00723	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00727	7c 0e		 jl	 SHORT $L37898

; 7779 :     {
; 7780 :         hr = m_pBuffer->Initialize();

  00729	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0072c	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  0072f	e8 00 00 00 00	 call	 ?Initialize@CMcpxBuffer@DirectSound@@QAEJXZ ; DirectSound::CMcpxBuffer::Initialize
  00734	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37898:

; 7781 :     }
; 7782 : 
; 7783 :     //
; 7784 :     // Initialize the base class
; 7785 :     //
; 7786 : 
; 7787 :     if(SUCCEEDED(hr))

  00737	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0073b	7c 1a		 jl	 SHORT $L37900

; 7788 :     {
; 7789 :         CDirectSoundVoice::Initialize(m_pBuffer, m_pSettings);

  0073d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00740	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00743	50		 push	 eax
  00744	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00747	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0074a	52		 push	 edx
  0074b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0074e	83 c0 08	 add	 eax, 8
  00751	50		 push	 eax
  00752	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundVoice@DirectSound@@QAGXPAVCMcpxVoiceClient@2@PAVCDirectSoundVoiceSettings@2@@Z ; DirectSound::CDirectSoundVoice::Initialize
$L37900:

; 7790 :     }
; 7791 : 
; 7792 :     DPF_LEAVE_HRESULT(hr);
; 7793 : 
; 7794 :     return hr;

  00757	8b 4d f8	 mov	 ecx, DWORD PTR _hr$[ebp]
  0075a	89 4d e4	 mov	 DWORD PTR $T40666[ebp], ecx
  0075d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00760	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00765	8b 45 e4	 mov	 eax, DWORD PTR $T40666[ebp]
$L37824:

; 7795 : }

  00768	5e		 pop	 esi
  00769	8b e5		 mov	 esp, ebp
  0076b	5d		 pop	 ebp
  0076c	c2 08 00	 ret	 8
?Initialize@CDirectSoundBuffer@DirectSound@@QAGJPBU_DSBUFFERDESC@@@Z ENDP ; DirectSound::CDirectSoundBuffer::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\hrtf.h
DSOUND	ENDS
;	COMDAT ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ
DSOUND	SEGMENT
tv66 = -4
?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ PROC NEAR ; DirectSound::CHrtfSource::IsValidAlgorithm, COMDAT

; 389  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 390  :         return (m_nAlgorithm >= DS3DALG_FIRST) && (m_nAlgorithm <= DS3DALG_LAST);

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_nAlgorithm@CHrtfSource@DirectSound@@1IA, 0 ; DirectSound::CHrtfSource::m_nAlgorithm
  0000b	72 12		 jb	 SHORT $L40670
  0000d	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?m_nAlgorithm@CHrtfSource@DirectSound@@1IA, 2 ; DirectSound::CHrtfSource::m_nAlgorithm
  00014	77 09		 ja	 SHORT $L40670
  00016	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001d	eb 07		 jmp	 SHORT $L40671
$L40670:
  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L40671:
  00026	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]

; 391  :     }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ ENDP	; DirectSound::CHrtfSource::IsValidAlgorithm
DSOUND	ENDS
PUBLIC	??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@ ; `string'
PUBLIC	??_C@_0BO@KFNPIFOI@Buffer?5size?5not?5block?9aligned?$AA@ ; `string'
PUBLIC	??_C@_0CP@MFOHFKJL@Can?8t?5call?5SetBufferData?5on?5MIXI@ ; `string'
PUBLIC	??_C@_0CM@NMHIIO@0?9sized?5buffer?5with?5non?9NULL?5buf@ ; `string'
PUBLIC	??_C@_0CG@PFGHNCIF@NULL?5buffer?5with?5non?9zero?5buffer@ ; `string'
EXTRN	?SetBufferData@CMcpxBuffer@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxBuffer::SetBufferData
EXTRN	?ReleaseBufferData@CMcpxBuffer@DirectSound@@QAEJH@Z:NEAR ; DirectSound::CMcpxBuffer::ReleaseBufferData
;	COMDAT ??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@ DB 'CDirectSoundBu'
	DB	'ffer::SetBufferData', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@KFNPIFOI@Buffer?5size?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@KFNPIFOI@Buffer?5size?5not?5block?9aligned?$AA@ DB 'Buffer size'
	DB	' not block-aligned', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@MFOHFKJL@Can?8t?5call?5SetBufferData?5on?5MIXI@
DSOUND_RD	SEGMENT
??_C@_0CP@MFOHFKJL@Can?8t?5call?5SetBufferData?5on?5MIXI@ DB 'Can''t call'
	DB	' SetBufferData on MIXIN/FXIN buffers', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@NMHIIO@0?9sized?5buffer?5with?5non?9NULL?5buf@
DSOUND_RD	SEGMENT
??_C@_0CM@NMHIIO@0?9sized?5buffer?5with?5non?9NULL?5buf@ DB '0-sized buff'
	DB	'er with non-NULL buffer pointer', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@PFGHNCIF@NULL?5buffer?5with?5non?9zero?5buffer@
DSOUND_RD	SEGMENT
??_C@_0CG@PFGHNCIF@NULL?5buffer?5with?5non?9zero?5buffer@ DB 'NULL buffer'
	DB	' with non-zero buffer size', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetBufferData@CDirectSoundBuffer@DirectSound@@QAGJPAXK@Z
DSOUND	SEGMENT
tv66 = -24
$T40678 = -20
$T40677 = -16
___AutoLock$ = -12
_hr$ = -8
_fChanging$ = -4
_this$ = 8
_pvDataBuffer$ = 12
_dwBufferBytes$ = 16
?SetBufferData@CDirectSoundBuffer@DirectSound@@QAGJPAXK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetBufferData, COMDAT

; 7823 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 7824 :     const BOOL              fChanging   = pvDataBuffer || dwBufferBytes;

  00006	83 7d 0c 00	 cmp	 DWORD PTR _pvDataBuffer$[ebp], 0
  0000a	75 0f		 jne	 SHORT $L40675
  0000c	83 7d 10 00	 cmp	 DWORD PTR _dwBufferBytes$[ebp], 0
  00010	75 09		 jne	 SHORT $L40675
  00012	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00019	eb 07		 jmp	 SHORT $L40676
$L40675:
  0001b	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$L40676:
  00022	8b 45 e8	 mov	 eax, DWORD PTR tv66[ebp]
  00025	89 45 fc	 mov	 DWORD PTR _fChanging$[ebp], eax

; 7825 :     HRESULT                 hr          = DS_OK;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 7826 :     
; 7827 :     DPF_ENTER();
; 7828 :     ENTER_EXTERNAL_METHOD();

  0002f	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00032	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00037	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0003e	74 44		 je	 SHORT $L37911
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
  0004a	68 94 1e 00 00	 push	 7828			; 00001e94H
  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00054	6a 03		 push	 3
  00056	6a 09		 push	 9
  00058	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00065	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0006a	83 c4 04	 add	 esp, 4
  0006d	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T40677[ebp], -2147467259 ; 80004005H
  00074	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00077	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0007c	8b 45 f0	 mov	 eax, DWORD PTR $T40677[ebp]
  0007f	e9 95 01 00 00	 jmp	 $L37906
$L37911:
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
  00089	68 94 1e 00 00	 push	 7828			; 00001e94H
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 7829 :     
; 7830 : #ifdef VALIDATE_PARAMETERS
; 7831 : 
; 7832 :     if(pvDataBuffer && dwBufferBytes)

  0009b	83 7d 0c 00	 cmp	 DWORD PTR _pvDataBuffer$[ebp], 0
  0009f	0f 84 91 00 00
	00		 je	 $L37915
  000a5	83 7d 10 00	 cmp	 DWORD PTR _dwBufferBytes$[ebp], 0
  000a9	0f 84 87 00 00
	00		 je	 $L37915

; 7833 :     {
; 7834 :         if(dwBufferBytes && (dwBufferBytes % m_pSettings->m_fmt.nBlockAlign))

  000af	83 7d 10 00	 cmp	 DWORD PTR _dwBufferBytes$[ebp], 0
  000b3	74 3f		 je	 SHORT $L37916
  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000bb	8b 45 10	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  000be	33 d2		 xor	 edx, edx
  000c0	f7 71 14	 div	 DWORD PTR [ecx+20]
  000c3	85 d2		 test	 edx, edx
  000c5	74 2d		 je	 SHORT $L37916

; 7835 :         {
; 7836 :             DPF_ERROR("Buffer size not block-aligned");

  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000cc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
  000d1	68 9c 1e 00 00	 push	 7836			; 00001e9cH
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000db	6a 01		 push	 1
  000dd	6a 09		 push	 9
  000df	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e4	83 c4 18	 add	 esp, 24			; 00000018H
  000e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@KFNPIFOI@Buffer?5size?5not?5block?9aligned?$AA@
  000ec	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f1	83 c4 04	 add	 esp, 4
$L37916:

; 7837 :         }
; 7838 : 
; 7839 :         if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000f4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f7	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000fa	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000fd	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00103	85 c9		 test	 ecx, ecx
  00105	74 2d		 je	 SHORT $L37918

; 7840 :         {
; 7841 :             DPF_ERROR("Can't call SetBufferData on MIXIN/FXIN buffers");

  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0010c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
  00111	68 a1 1e 00 00	 push	 7841			; 00001ea1H
  00116	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0011b	6a 01		 push	 1
  0011d	6a 09		 push	 9
  0011f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00124	83 c4 18	 add	 esp, 24			; 00000018H
  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@MFOHFKJL@Can?8t?5call?5SetBufferData?5on?5MIXI@
  0012c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00131	83 c4 04	 add	 esp, 4
$L37918:

; 7842 :         }
; 7843 :     }
; 7844 :     else if(pvDataBuffer)

  00134	eb 68		 jmp	 SHORT $L37920
$L37915:
  00136	83 7d 0c 00	 cmp	 DWORD PTR _pvDataBuffer$[ebp], 0
  0013a	74 2f		 je	 SHORT $L37921

; 7845 :     {
; 7846 :         DPF_ERROR("0-sized buffer with non-NULL buffer pointer");

  0013c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00141	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
  00146	68 a6 1e 00 00	 push	 7846			; 00001ea6H
  0014b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00150	6a 01		 push	 1
  00152	6a 09		 push	 9
  00154	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00159	83 c4 18	 add	 esp, 24			; 00000018H
  0015c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@NMHIIO@0?9sized?5buffer?5with?5non?9NULL?5buf@
  00161	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00166	83 c4 04	 add	 esp, 4

; 7847 :     }
; 7848 :     else if(dwBufferBytes)

  00169	eb 33		 jmp	 SHORT $L37920
$L37921:
  0016b	83 7d 10 00	 cmp	 DWORD PTR _dwBufferBytes$[ebp], 0
  0016f	74 2d		 je	 SHORT $L37920

; 7849 :     {
; 7850 :         DPF_ERROR("NULL buffer with non-zero buffer size");

  00171	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00176	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@PACDNNME@CDirectSoundBuffer?3?3SetBufferDat@
  0017b	68 aa 1e 00 00	 push	 7850			; 00001eaaH
  00180	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00185	6a 01		 push	 1
  00187	6a 09		 push	 9
  00189	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0018e	83 c4 18	 add	 esp, 24			; 00000018H
  00191	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@PFGHNCIF@NULL?5buffer?5with?5non?9zero?5buffer@
  00196	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0019b	83 c4 04	 add	 esp, 4
$L37920:

; 7851 :     }
; 7852 : 
; 7853 : #endif // VALIDATE_PARAMETERS
; 7854 : 
; 7855 :     if((pvDataBuffer != m_pSettings->m_pvBufferData) || (dwBufferBytes != m_pSettings->m_dwBufferSize))

  0019e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001a1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001a4	8b 4d 0c	 mov	 ecx, DWORD PTR _pvDataBuffer$[ebp]
  001a7	3b 88 b8 00 00
	00		 cmp	 ecx, DWORD PTR [eax+184]
  001ad	75 11		 jne	 SHORT $L37927
  001af	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001b2	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001b5	8b 4d 10	 mov	 ecx, DWORD PTR _dwBufferBytes$[ebp]
  001b8	3b 88 bc 00 00
	00		 cmp	 ecx, DWORD PTR [eax+188]
  001be	74 48		 je	 SHORT $L37926
$L37927:

; 7856 :     {
; 7857 :         //
; 7858 :         // Give the implementation object a chance to clean up before we
; 7859 :         // stomp on the shared data members.
; 7860 :         //
; 7861 : 
; 7862 :         hr = m_pBuffer->ReleaseBufferData(fChanging);

  001c0	8b 55 fc	 mov	 edx, DWORD PTR _fChanging$[ebp]
  001c3	52		 push	 edx
  001c4	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001c7	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  001ca	e8 00 00 00 00	 call	 ?ReleaseBufferData@CMcpxBuffer@DirectSound@@QAEJH@Z ; DirectSound::CMcpxBuffer::ReleaseBufferData
  001cf	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 7863 : 
; 7864 :         //
; 7865 :         // Hand off to the settings object
; 7866 :         //
; 7867 : 
; 7868 :         if(SUCCEEDED(hr))

  001d2	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001d6	7c 16		 jl	 SHORT $L37929

; 7869 :         {
; 7870 :             hr = m_pSettings->SetBufferData(pvDataBuffer, dwBufferBytes);

  001d8	8b 4d 10	 mov	 ecx, DWORD PTR _dwBufferBytes$[ebp]
  001db	51		 push	 ecx
  001dc	8b 55 0c	 mov	 edx, DWORD PTR _pvDataBuffer$[ebp]
  001df	52		 push	 edx
  001e0	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001e3	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001e6	e8 00 00 00 00	 call	 ?SetBufferData@CDirectSoundBufferSettings@DirectSound@@QAEJPAXK@Z ; DirectSound::CDirectSoundBufferSettings::SetBufferData
  001eb	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37929:

; 7871 :         }
; 7872 : 
; 7873 :         //
; 7874 :         // Notify the implementation object of the change
; 7875 :         //
; 7876 : 
; 7877 :         if(SUCCEEDED(hr) && fChanging)

  001ee	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001f2	7c 14		 jl	 SHORT $L37926
  001f4	83 7d fc 00	 cmp	 DWORD PTR _fChanging$[ebp], 0
  001f8	74 0e		 je	 SHORT $L37926

; 7878 :         {
; 7879 :             hr = m_pBuffer->SetBufferData();

  001fa	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00200	e8 00 00 00 00	 call	 ?SetBufferData@CMcpxBuffer@DirectSound@@QAEJXZ ; DirectSound::CMcpxBuffer::SetBufferData
  00205	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L37926:

; 7880 :         }
; 7881 :     }
; 7882 : 
; 7883 :     DPF_LEAVE_HRESULT(hr);
; 7884 : 
; 7885 :     return hr;

  00208	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  0020b	89 55 ec	 mov	 DWORD PTR $T40678[ebp], edx
  0020e	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00211	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00216	8b 45 ec	 mov	 eax, DWORD PTR $T40678[ebp]
$L37906:

; 7886 : }

  00219	8b e5		 mov	 esp, ebp
  0021b	5d		 pop	 ebp
  0021c	c2 0c 00	 ret	 12			; 0000000cH
?SetBufferData@CDirectSoundBuffer@DirectSound@@QAGJPAXK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetBufferData
DSOUND	ENDS
PUBLIC	??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@ ; `string'
PUBLIC	??_C@_0BO@DPDMNBCJ@Reserved?5parameters?5must?5be?50?$AA@ ; `string'
PUBLIC	??_C@_0CH@PHNJAOLG@Can?8t?5call?5Play?5on?5a?5MIXIN?1FXIN?5@ ; `string'
PUBLIC	??_C@_0BB@MCLPOMMM@No?5data?5to?5play?$CB?$AA@	; `string'
EXTRN	?Play@CMcpxBuffer@DirectSound@@QAEJK@Z:NEAR	; DirectSound::CMcpxBuffer::Play
;	COMDAT ??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@ DB 'CDirectSoundBuffer'
	DB	'::Play', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@DPDMNBCJ@Reserved?5parameters?5must?5be?50?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@DPDMNBCJ@Reserved?5parameters?5must?5be?50?$AA@ DB 'Reserved pa'
	DB	'rameters must be 0', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@PHNJAOLG@Can?8t?5call?5Play?5on?5a?5MIXIN?1FXIN?5@
DSOUND_RD	SEGMENT
??_C@_0CH@PHNJAOLG@Can?8t?5call?5Play?5on?5a?5MIXIN?1FXIN?5@ DB 'Can''t c'
	DB	'all Play on a MIXIN/FXIN buffer', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BB@MCLPOMMM@No?5data?5to?5play?$CB?$AA@
DSOUND_RD	SEGMENT
??_C@_0BB@MCLPOMMM@No?5data?5to?5play?$CB?$AA@ DB 'No data to play!', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Play@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z
DSOUND	SEGMENT
$T40683 = -16
$T40682 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwReserved1$ = 12
_dwReserved2$ = 16
_dwFlags$ = 20
?Play@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::Play, COMDAT

; 7914 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 7915 :     HRESULT                 hr;
; 7916 :     
; 7917 :     DPF_ENTER();
; 7918 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L37941
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
  00021	68 ee 1e 00 00	 push	 7918			; 00001eeeH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40682[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40682[ebp]
  00056	e9 3c 01 00 00	 jmp	 $L37938
$L37941:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
  00060	68 ee 1e 00 00	 push	 7918			; 00001eeeH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 7919 :     
; 7920 : #ifdef VALIDATE_PARAMETERS
; 7921 : 
; 7922 :     if(dwReserved1 || dwReserved2)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _dwReserved1$[ebp], 0
  00076	75 06		 jne	 SHORT $L37946
  00078	83 7d 10 00	 cmp	 DWORD PTR _dwReserved2$[ebp], 0
  0007c	74 2d		 je	 SHORT $L37945
$L37946:

; 7923 :     {
; 7924 :         DPF_ERROR("Reserved parameters must be 0");

  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
  00088	68 f4 1e 00 00	 push	 7924			; 00001ef4H
  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00092	6a 01		 push	 1
  00094	6a 09		 push	 9
  00096	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DPDMNBCJ@Reserved?5parameters?5must?5be?50?$AA@
  000a3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a8	83 c4 04	 add	 esp, 4
$L37945:

; 7925 :     }
; 7926 :     
; 7927 :     if(dwFlags & ~DSBPLAY_VALID)

  000ab	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000ae	83 e0 fc	 and	 eax, -4			; fffffffcH
  000b1	85 c0		 test	 eax, eax
  000b3	74 34		 je	 SHORT $L37948

; 7928 :     {
; 7929 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DSBPLAY_VALID);

  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
  000bf	68 f9 1e 00 00	 push	 7929			; 00001ef9H
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c9	6a 01		 push	 1
  000cb	6a 09		 push	 9
  000cd	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000d2	83 c4 18	 add	 esp, 24			; 00000018H
  000d5	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000d8	83 e1 fc	 and	 ecx, -4			; fffffffcH
  000db	51		 push	 ecx
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000e1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000e6	83 c4 08	 add	 esp, 8
$L37948:

; 7930 :     }
; 7931 : 
; 7932 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000e9	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000ef	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000f2	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  000f8	85 c9		 test	 ecx, ecx
  000fa	74 2d		 je	 SHORT $L37949

; 7933 :     {
; 7934 :         DPF_ERROR("Can't call Play on a MIXIN/FXIN buffer");

  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00101	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
  00106	68 fe 1e 00 00	 push	 7934			; 00001efeH
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00110	6a 01		 push	 1
  00112	6a 09		 push	 9
  00114	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00119	83 c4 18	 add	 esp, 24			; 00000018H
  0011c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@PHNJAOLG@Can?8t?5call?5Play?5on?5a?5MIXIN?1FXIN?5@
  00121	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00126	83 c4 04	 add	 esp, 4
$L37949:

; 7935 :     }
; 7936 :     
; 7937 :     if(!m_pSettings->m_pvBufferData || !m_pSettings->m_dwBufferSize)

  00129	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0012c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0012f	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  00136	74 0f		 je	 SHORT $L37952
  00138	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0013e	83 ba bc 00 00
	00 00		 cmp	 DWORD PTR [edx+188], 0
  00145	75 2d		 jne	 SHORT $L37951
$L37952:

; 7938 :     {
; 7939 :         DPF_ERROR("No data to play!");

  00147	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0014c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IPKMPMIL@CDirectSoundBuffer?3?3Play?$AA@
  00151	68 03 1f 00 00	 push	 7939			; 00001f03H
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0015b	6a 01		 push	 1
  0015d	6a 09		 push	 9
  0015f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00164	83 c4 18	 add	 esp, 24			; 00000018H
  00167	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@MCLPOMMM@No?5data?5to?5play?$CB?$AA@
  0016c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00171	83 c4 04	 add	 esp, 4
$L37951:

; 7940 :     }
; 7941 : 
; 7942 : #endif // VALIDATE_PARAMETERS
; 7943 : 
; 7944 :     hr = m_pBuffer->Play(dwFlags);

  00174	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00177	50		 push	 eax
  00178	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0017b	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  0017e	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Play
  00183	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 7945 : 
; 7946 :     DPF_LEAVE_HRESULT(hr);
; 7947 : 
; 7948 :     return hr;

  00186	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  00189	89 55 f0	 mov	 DWORD PTR $T40683[ebp], edx
  0018c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0018f	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00194	8b 45 f0	 mov	 eax, DWORD PTR $T40683[ebp]
$L37938:

; 7949 : }

  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 10 00	 ret	 16			; 00000010H
?Play@CDirectSoundBuffer@DirectSound@@QAGJKKK@Z ENDP	; DirectSound::CDirectSoundBuffer::Play
DSOUND	ENDS
PUBLIC	??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@ ; `string'
EXTRN	?Play@CMcpxBuffer@DirectSound@@QAEJ_JK@Z:NEAR	; DirectSound::CMcpxBuffer::Play
;	COMDAT ??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@ DB 'CDirectSoundBuff'
	DB	'er::PlayEx', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?PlayEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT
$T40688 = -16
$T40687 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
?PlayEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::PlayEx, COMDAT

; 7977 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 7978 :     HRESULT                 hr;
; 7979 : 
; 7980 :     DPF_ENTER();
; 7981 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L37962
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@
  00021	68 2d 1f 00 00	 push	 7981			; 00001f2dH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40687[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40687[ebp]
  00056	e9 0b 01 00 00	 jmp	 $L37959
$L37962:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@
  00060	68 2d 1f 00 00	 push	 7981			; 00001f2dH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 7982 :     
; 7983 : #ifdef VALIDATE_PARAMETERS
; 7984 : 
; 7985 :     if(dwFlags & ~DSBPLAY_VALID)

  00072	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00075	83 e0 fc	 and	 eax, -4			; fffffffcH
  00078	85 c0		 test	 eax, eax
  0007a	74 34		 je	 SHORT $L37966

; 7986 :     {
; 7987 :         DPF_ERROR("Specified invalid or unsupported flags (%lx)", dwFlags & ~DSBPLAY_VALID);

  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@
  00086	68 33 1f 00 00	 push	 7987			; 00001f33H
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00090	6a 01		 push	 1
  00092	6a 09		 push	 9
  00094	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0009f	83 e1 fc	 and	 ecx, -4			; fffffffcH
  000a2	51		 push	 ecx
  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@PPNGGLIO@Specified?5invalid?5or?5unsupported@
  000a8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ad	83 c4 08	 add	 esp, 8
$L37966:

; 7988 :     }
; 7989 : 
; 7990 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000b0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000b3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000b6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b9	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  000bf	85 c9		 test	 ecx, ecx
  000c1	74 2d		 je	 SHORT $L37967

; 7991 :     {
; 7992 :         DPF_ERROR("Can't call Play on a MIXIN/FXIN buffer");

  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@
  000cd	68 38 1f 00 00	 push	 7992			; 00001f38H
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000d7	6a 01		 push	 1
  000d9	6a 09		 push	 9
  000db	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@PHNJAOLG@Can?8t?5call?5Play?5on?5a?5MIXIN?1FXIN?5@
  000e8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ed	83 c4 04	 add	 esp, 4
$L37967:

; 7993 :     }
; 7994 :     
; 7995 :     if(!m_pSettings->m_pvBufferData || !m_pSettings->m_dwBufferSize)

  000f0	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000f6	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  000fd	74 0f		 je	 SHORT $L37969
  000ff	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00105	83 ba bc 00 00
	00 00		 cmp	 DWORD PTR [edx+188], 0
  0010c	75 2d		 jne	 SHORT $L37968
$L37969:

; 7996 :     {
; 7997 :         DPF_ERROR("No data to play!");

  0010e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@PNMLMMMO@CDirectSoundBuffer?3?3PlayEx?$AA@
  00118	68 3d 1f 00 00	 push	 7997			; 00001f3dH
  0011d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00122	6a 01		 push	 1
  00124	6a 09		 push	 9
  00126	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0012b	83 c4 18	 add	 esp, 24			; 00000018H
  0012e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@MCLPOMMM@No?5data?5to?5play?$CB?$AA@
  00133	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00138	83 c4 04	 add	 esp, 4
$L37968:

; 7998 :     }
; 7999 : 
; 8000 : #endif // VALIDATE_PARAMETERS
; 8001 : 
; 8002 :     hr = m_pBuffer->Play(rtTimeStamp, dwFlags);

  0013b	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp+4]
  00142	51		 push	 ecx
  00143	8b 55 0c	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp]
  00146	52		 push	 edx
  00147	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0014d	e8 00 00 00 00	 call	 ?Play@CMcpxBuffer@DirectSound@@QAEJ_JK@Z ; DirectSound::CMcpxBuffer::Play
  00152	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8003 : 
; 8004 :     DPF_LEAVE_HRESULT(hr);
; 8005 : 
; 8006 :     return hr;

  00155	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00158	89 4d f0	 mov	 DWORD PTR $T40688[ebp], ecx
  0015b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0015e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00163	8b 45 f0	 mov	 eax, DWORD PTR $T40688[ebp]
$L37959:

; 8007 : }

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 10 00	 ret	 16			; 00000010H
?PlayEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z ENDP	; DirectSound::CDirectSoundBuffer::PlayEx
DSOUND	ENDS
PUBLIC	??_C@_0BJ@IGPNGPGI@CDirectSoundBuffer?3?3Stop?$AA@ ; `string'
PUBLIC	??_C@_0CH@IKIGIHPK@Can?8t?5call?5Stop?5on?5a?5MIXIN?1FXIN?5@ ; `string'
EXTRN	?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z:NEAR	; DirectSound::CMcpxBuffer::Stop
;	COMDAT ??_C@_0BJ@IGPNGPGI@CDirectSoundBuffer?3?3Stop?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@IGPNGPGI@CDirectSoundBuffer?3?3Stop?$AA@ DB 'CDirectSoundBuffer'
	DB	'::Stop', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CH@IKIGIHPK@Can?8t?5call?5Stop?5on?5a?5MIXIN?1FXIN?5@
DSOUND_RD	SEGMENT
??_C@_0CH@IKIGIHPK@Can?8t?5call?5Stop?5on?5a?5MIXIN?1FXIN?5@ DB 'Can''t c'
	DB	'all Stop on a MIXIN/FXIN buffer', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Stop@CDirectSoundBuffer@DirectSound@@QAGJXZ
DSOUND	SEGMENT
$T40693 = -16
$T40692 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
?Stop@CDirectSoundBuffer@DirectSound@@QAGJXZ PROC NEAR	; DirectSound::CDirectSoundBuffer::Stop, COMDAT

; 8033 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 8034 :     HRESULT                 hr;
; 8035 :     
; 8036 :     DPF_ENTER();
; 8037 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 41		 je	 SHORT $L37977
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGPNGPGI@CDirectSoundBuffer?3?3Stop?$AA@
  00021	68 65 1f 00 00	 push	 8037			; 00001f65H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40692[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40692[ebp]
  00056	eb 78		 jmp	 SHORT $L37974
$L37977:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGPNGPGI@CDirectSoundBuffer?3?3Stop?$AA@
  0005d	68 65 1f 00 00	 push	 8037			; 00001f65H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8038 :     
; 8039 : #ifdef VALIDATE_PARAMETERS
; 8040 : 
; 8041 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00075	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00078	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  0007e	85 d2		 test	 edx, edx
  00080	74 2d		 je	 SHORT $L37981

; 8042 :     {
; 8043 :         DPF_ERROR("Can't call Stop on a MIXIN/FXIN buffer");

  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IGPNGPGI@CDirectSoundBuffer?3?3Stop?$AA@
  0008c	68 6b 1f 00 00	 push	 8043			; 00001f6bH
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00096	6a 01		 push	 1
  00098	6a 09		 push	 9
  0009a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0009f	83 c4 18	 add	 esp, 24			; 00000018H
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@IKIGIHPK@Can?8t?5call?5Stop?5on?5a?5MIXIN?1FXIN?5@
  000a7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ac	83 c4 04	 add	 esp, 4
$L37981:

; 8044 :     }
; 8045 :     
; 8046 : #endif // VALIDATE_PARAMETERS
; 8047 : 
; 8048 :     hr = m_pBuffer->Stop();

  000af	6a 00		 push	 0
  000b1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000b7	e8 00 00 00 00	 call	 ?Stop@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::Stop
  000bc	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8049 : 
; 8050 :     DPF_LEAVE_HRESULT(hr);
; 8051 : 
; 8052 :     return hr;

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  000c2	89 4d f0	 mov	 DWORD PTR $T40693[ebp], ecx
  000c5	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000c8	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000cd	8b 45 f0	 mov	 eax, DWORD PTR $T40693[ebp]
$L37974:

; 8053 : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
?Stop@CDirectSoundBuffer@DirectSound@@QAGJXZ ENDP	; DirectSound::CDirectSoundBuffer::Stop
DSOUND	ENDS
PUBLIC	??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@ ; `string'
EXTRN	?Stop@CMcpxBuffer@DirectSound@@QAEJ_JK@Z:NEAR	; DirectSound::CMcpxBuffer::Stop
;	COMDAT ??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@ DB 'CDirectSoundBuff'
	DB	'er::StopEx', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?StopEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT
$T40698 = -16
$T40697 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
?StopEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::StopEx, COMDAT

; 8081 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 8082 :     HRESULT                 hr;
; 8083 :     
; 8084 :     DPF_ENTER();
; 8085 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L37991
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@
  00021	68 95 1f 00 00	 push	 8085			; 00001f95H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40697[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40697[ebp]
  00056	e9 b8 00 00 00	 jmp	 $L37988
$L37991:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@
  00060	68 95 1f 00 00	 push	 8085			; 00001f95H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8086 :     
; 8087 : #ifdef VALIDATE_PARAMETERS
; 8088 : 
; 8089 :     if(dwFlags & ~DSBSTOPEX_VALID)

  00072	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00075	83 e0 fc	 and	 eax, -4			; fffffffcH
  00078	85 c0		 test	 eax, eax
  0007a	74 2d		 je	 SHORT $L37995

; 8090 :     {
; 8091 :         DPF_ERROR("Invalid flags");

  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@
  00086	68 9b 1f 00 00	 push	 8091			; 00001f9bH
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00090	6a 01		 push	 1
  00092	6a 09		 push	 9
  00094	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@
  000a1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a6	83 c4 04	 add	 esp, 4
$L37995:

; 8092 :     }
; 8093 : 
; 8094 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000af	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b2	25 00 20 08 00	 and	 eax, 532480		; 00082000H
  000b7	85 c0		 test	 eax, eax
  000b9	74 2d		 je	 SHORT $L37996

; 8095 :     {
; 8096 :         DPF_ERROR("Can't call Stop on a MIXIN/FXIN buffer");

  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OBJOKHEO@CDirectSoundBuffer?3?3StopEx?$AA@
  000c5	68 a0 1f 00 00	 push	 8096			; 00001fa0H
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000cf	6a 01		 push	 1
  000d1	6a 09		 push	 9
  000d3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000d8	83 c4 18	 add	 esp, 24			; 00000018H
  000db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@IKIGIHPK@Can?8t?5call?5Stop?5on?5a?5MIXIN?1FXIN?5@
  000e0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000e5	83 c4 04	 add	 esp, 4
$L37996:

; 8097 :     }
; 8098 :     
; 8099 : #endif // VALIDATE_PARAMETERS
; 8100 : 
; 8101 :     hr = m_pBuffer->Stop(rtTimeStamp, dwFlags);

  000e8	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000eb	51		 push	 ecx
  000ec	8b 55 10	 mov	 edx, DWORD PTR _rtTimeStamp$[ebp+4]
  000ef	52		 push	 edx
  000f0	8b 45 0c	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  000f3	50		 push	 eax
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000fa	e8 00 00 00 00	 call	 ?Stop@CMcpxBuffer@DirectSound@@QAEJ_JK@Z ; DirectSound::CMcpxBuffer::Stop
  000ff	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8102 : 
; 8103 :     DPF_LEAVE_HRESULT(hr);
; 8104 : 
; 8105 :     return hr;

  00102	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  00105	89 55 f0	 mov	 DWORD PTR $T40698[ebp], edx
  00108	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0010b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00110	8b 45 f0	 mov	 eax, DWORD PTR $T40698[ebp]
$L37988:

; 8106 : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 10 00	 ret	 16			; 00000010H
?StopEx@CDirectSoundBuffer@DirectSound@@QAGJ_JK@Z ENDP	; DirectSound::CDirectSoundBuffer::StopEx
DSOUND	ENDS
PUBLIC	??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@ ; `string'
PUBLIC	??_C@_0CC@CDHJLAHH@Failed?5to?5specify?5a?5status?5buffe@ ; `string'
PUBLIC	??_C@_0CM@LBMBMFPG@Can?8t?5call?5GetStatus?5on?5a?5MIXIN?1@ ; `string'
EXTRN	?GetStatus@CMcpxBuffer@DirectSound@@QAEJPAK@Z:NEAR ; DirectSound::CMcpxBuffer::GetStatus
;	COMDAT ??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@ DB 'CDirectSoundB'
	DB	'uffer::GetStatus', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@CDHJLAHH@Failed?5to?5specify?5a?5status?5buffe@
DSOUND_RD	SEGMENT
??_C@_0CC@CDHJLAHH@Failed?5to?5specify?5a?5status?5buffe@ DB 'Failed to s'
	DB	'pecify a status buffer', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@LBMBMFPG@Can?8t?5call?5GetStatus?5on?5a?5MIXIN?1@
DSOUND_RD	SEGMENT
??_C@_0CM@LBMBMFPG@Can?8t?5call?5GetStatus?5on?5a?5MIXIN?1@ DB 'Can''t ca'
	DB	'll GetStatus on a MIXIN/FXIN buffer', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetStatus@CDirectSoundBuffer@DirectSound@@QAGJPAK@Z
DSOUND	SEGMENT
$T40703 = -16
$T40702 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pdwStatus$ = 12
?GetStatus@CDirectSoundBuffer@DirectSound@@QAGJPAK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::GetStatus, COMDAT

; 8132 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 8133 :     HRESULT                 hr;
; 8134 :     
; 8135 :     DPF_ENTER();
; 8136 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L38004
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@
  00021	68 c8 1f 00 00	 push	 8136			; 00001fc8H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40702[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40702[ebp]
  00056	e9 ad 00 00 00	 jmp	 $L38001
$L38004:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@
  00060	68 c8 1f 00 00	 push	 8136			; 00001fc8H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8137 : 
; 8138 : #ifdef VALIDATE_PARAMETERS
; 8139 : 
; 8140 :     if(!pdwStatus)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _pdwStatus$[ebp], 0
  00076	75 2d		 jne	 SHORT $L38008

; 8141 :     {
; 8142 :         DPF_ERROR("Failed to specify a status buffer");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@
  00082	68 ce 1f 00 00	 push	 8142			; 00001fceH
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@CDHJLAHH@Failed?5to?5specify?5a?5status?5buffe@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L38008:

; 8143 :     }
; 8144 : 
; 8145 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000a5	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000ab	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ae	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  000b4	85 d2		 test	 edx, edx
  000b6	74 2d		 je	 SHORT $L38010

; 8146 :     {
; 8147 :         DPF_ERROR("Can't call GetStatus on a MIXIN/FXIN buffer");

  000b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NGCMNLCE@CDirectSoundBuffer?3?3GetStatus?$AA@
  000c2	68 d3 1f 00 00	 push	 8147			; 00001fd3H
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000cc	6a 01		 push	 1
  000ce	6a 09		 push	 9
  000d0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000d5	83 c4 18	 add	 esp, 24			; 00000018H
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@LBMBMFPG@Can?8t?5call?5GetStatus?5on?5a?5MIXIN?1@
  000dd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000e2	83 c4 04	 add	 esp, 4
$L38010:

; 8148 :     }
; 8149 :     
; 8150 : #endif // VALIDATE_PARAMETERS
; 8151 :     
; 8152 :     hr = m_pBuffer->GetStatus(pdwStatus);

  000e5	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  000ef	e8 00 00 00 00	 call	 ?GetStatus@CMcpxBuffer@DirectSound@@QAEJPAK@Z ; DirectSound::CMcpxBuffer::GetStatus
  000f4	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8153 : 
; 8154 :     DPF_LEAVE_HRESULT(hr);
; 8155 : 
; 8156 :     return hr;

  000f7	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  000fa	89 55 f0	 mov	 DWORD PTR $T40703[ebp], edx
  000fd	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00100	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00105	8b 45 f0	 mov	 eax, DWORD PTR $T40703[ebp]
$L38001:

; 8157 : }

  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 08 00	 ret	 8
?GetStatus@CDirectSoundBuffer@DirectSound@@QAGJPAK@Z ENDP ; DirectSound::CDirectSoundBuffer::GetStatus
DSOUND	ENDS
PUBLIC	??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@ ; `string'
PUBLIC	??_C@_0CP@OOPJNDDC@Can?8t?5call?5SetPlayRegion?5on?5MIXI@ ; `string'
PUBLIC	??_C@_0BO@DPLKNCLL@Play?5offset?5not?5block?9aligned?$AA@ ; `string'
PUBLIC	??_C@_0BO@EAGIFABL@Play?5length?5not?5block?9aligned?$AA@ ; `string'
PUBLIC	??_C@_0CP@GHNNCDPI@Play?5region?5extends?5past?5the?5end@ ; `string'
EXTRN	?SetPlayRegion@CMcpxBuffer@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxBuffer::SetPlayRegion
;	COMDAT ??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
DSOUND_RD	SEGMENT
??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@ DB 'CDirectSoundBu'
	DB	'ffer::SetPlayRegion', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@OOPJNDDC@Can?8t?5call?5SetPlayRegion?5on?5MIXI@
DSOUND_RD	SEGMENT
??_C@_0CP@OOPJNDDC@Can?8t?5call?5SetPlayRegion?5on?5MIXI@ DB 'Can''t call'
	DB	' SetPlayRegion on MIXIN/FXIN buffers', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@DPLKNCLL@Play?5offset?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@DPLKNCLL@Play?5offset?5not?5block?9aligned?$AA@ DB 'Play offset'
	DB	' not block-aligned', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@EAGIFABL@Play?5length?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@EAGIFABL@Play?5length?5not?5block?9aligned?$AA@ DB 'Play length'
	DB	' not block-aligned', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@GHNNCDPI@Play?5region?5extends?5past?5the?5end@
DSOUND_RD	SEGMENT
??_C@_0CP@GHNNCDPI@Play?5region?5extends?5past?5the?5end@ DB 'Play region'
	DB	' extends past the end of the buffer', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetPlayRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT
$T40708 = -16
$T40707 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwPlayStart$ = 12
_dwPlayLength$ = 16
?SetPlayRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetPlayRegion, COMDAT

; 8185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 8186 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 8187 :     
; 8188 :     DPF_ENTER();
; 8189 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 44		 je	 SHORT $L38021
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
  00028	68 fd 1f 00 00	 push	 8189			; 00001ffdH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40707[ebp], -2147467259 ; 80004005H
  00052	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f4	 mov	 eax, DWORD PTR $T40707[ebp]
  0005d	e9 77 01 00 00	 jmp	 $L38017
$L38021:
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
  00067	68 fd 1f 00 00	 push	 8189			; 00001ffdH
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8190 : 
; 8191 : #ifdef VALIDATE_PARAMETERS
; 8192 : 
; 8193 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  00079	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0007f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00082	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00088	85 d2		 test	 edx, edx
  0008a	74 2d		 je	 SHORT $L38025

; 8194 :     {
; 8195 :         DPF_ERROR("Can't call SetPlayRegion on MIXIN/FXIN buffers");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
  00096	68 03 20 00 00	 push	 8195			; 00002003H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a0	6a 01		 push	 1
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@OOPJNDDC@Can?8t?5call?5SetPlayRegion?5on?5MIXI@
  000b1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b6	83 c4 04	 add	 esp, 4
$L38025:

; 8196 :     }
; 8197 : 
; 8198 :     if(dwPlayStart % 4)

  000b9	8b 45 0c	 mov	 eax, DWORD PTR _dwPlayStart$[ebp]
  000bc	33 d2		 xor	 edx, edx
  000be	b9 04 00 00 00	 mov	 ecx, 4
  000c3	f7 f1		 div	 ecx
  000c5	85 d2		 test	 edx, edx
  000c7	74 2d		 je	 SHORT $L38027

; 8199 :     {
; 8200 :         DPF_ERROR("Play offset not block-aligned");

  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
  000d3	68 08 20 00 00	 push	 8200			; 00002008H
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000dd	6a 01		 push	 1
  000df	6a 09		 push	 9
  000e1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e6	83 c4 18	 add	 esp, 24			; 00000018H
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DPLKNCLL@Play?5offset?5not?5block?9aligned?$AA@
  000ee	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f3	83 c4 04	 add	 esp, 4
$L38027:

; 8201 :     }
; 8202 : 
; 8203 : #endif // VALIDATE_PARAMETERS
; 8204 : 
; 8205 :     //
; 8206 :     // Munge the length so it's valid
; 8207 :     //
; 8208 : 
; 8209 :     if(dwPlayLength)

  000f6	83 7d 10 00	 cmp	 DWORD PTR _dwPlayLength$[ebp], 0
  000fa	0f 84 89 00 00
	00		 je	 $L38029

; 8210 :     {
; 8211 : 
; 8212 : #ifdef VALIDATE_PARAMETERS
; 8213 : 
; 8214 :         if(dwPlayLength % m_pSettings->m_fmt.nBlockAlign)

  00100	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  00106	8b 45 10	 mov	 eax, DWORD PTR _dwPlayLength$[ebp]
  00109	33 d2		 xor	 edx, edx
  0010b	f7 71 14	 div	 DWORD PTR [ecx+20]
  0010e	85 d2		 test	 edx, edx
  00110	74 2d		 je	 SHORT $L38030

; 8215 :         {
; 8216 :             DPF_ERROR("Play length not block-aligned");

  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00117	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
  0011c	68 18 20 00 00	 push	 8216			; 00002018H
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00126	6a 01		 push	 1
  00128	6a 09		 push	 9
  0012a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0012f	83 c4 18	 add	 esp, 24			; 00000018H
  00132	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@EAGIFABL@Play?5length?5not?5block?9aligned?$AA@
  00137	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0013c	83 c4 04	 add	 esp, 4
$L38030:

; 8217 :         }
; 8218 : 
; 8219 : #endif // VALIDATE_PARAMETERS
; 8220 : 
; 8221 :         if(dwPlayStart + dwPlayLength > m_pSettings->m_dwBufferSize)

  0013f	8b 55 0c	 mov	 edx, DWORD PTR _dwPlayStart$[ebp]
  00142	03 55 10	 add	 edx, DWORD PTR _dwPlayLength$[ebp]
  00145	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00148	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0014b	3b 91 bc 00 00
	00		 cmp	 edx, DWORD PTR [ecx+188]
  00151	76 34		 jbe	 SHORT $L38032

; 8222 :         {
; 8223 :             DPF_ERROR("Play region extends past the end of the buffer");

  00153	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00158	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LLNBMADI@CDirectSoundBuffer?3?3SetPlayRegio@
  0015d	68 1f 20 00 00	 push	 8223			; 0000201fH
  00162	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00167	6a 01		 push	 1
  00169	6a 09		 push	 9
  0016b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00170	83 c4 18	 add	 esp, 24			; 00000018H
  00173	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@GHNNCDPI@Play?5region?5extends?5past?5the?5end@
  00178	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017d	83 c4 04	 add	 esp, 4

; 8224 :             hr = DSERR_INVALIDCALL;

  00180	c7 45 fc 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L38032:

; 8225 :         }
; 8226 :     }
; 8227 :     else

  00187	eb 12		 jmp	 SHORT $L38038
$L38029:

; 8228 :     {
; 8229 :         dwPlayLength = m_pSettings->m_dwBufferSize - dwPlayStart;

  00189	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0018c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0018f	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  00195	2b 4d 0c	 sub	 ecx, DWORD PTR _dwPlayStart$[ebp]
  00198	89 4d 10	 mov	 DWORD PTR _dwPlayLength$[ebp], ecx
$L38038:

; 8230 :     }
; 8231 : 
; 8232 :     //
; 8233 :     // Update the settings object
; 8234 :     //
; 8235 : 
; 8236 :     if(SUCCEEDED(hr))

  0019b	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0019f	7c 13		 jl	 SHORT $L38040

; 8237 :     {
; 8238 :         m_pSettings->SetPlayRegion(dwPlayStart, dwPlayLength);

  001a1	8b 55 10	 mov	 edx, DWORD PTR _dwPlayLength$[ebp]
  001a4	52		 push	 edx
  001a5	8b 45 0c	 mov	 eax, DWORD PTR _dwPlayStart$[ebp]
  001a8	50		 push	 eax
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  001af	e8 00 00 00 00	 call	 ?SetPlayRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ; DirectSound::CDirectSoundBufferSettings::SetPlayRegion
$L38040:

; 8239 :     }
; 8240 : 
; 8241 :     //
; 8242 :     // Update the buffer implementation
; 8243 :     //
; 8244 : 
; 8245 :     if(SUCCEEDED(hr))

  001b4	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001b8	7c 0e		 jl	 SHORT $L38042

; 8246 :     {
; 8247 :         hr = m_pBuffer->SetPlayRegion();

  001ba	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001bd	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  001c0	e8 00 00 00 00	 call	 ?SetPlayRegion@CMcpxBuffer@DirectSound@@QAEJXZ ; DirectSound::CMcpxBuffer::SetPlayRegion
  001c5	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L38042:

; 8248 :     }
; 8249 : 
; 8250 :     DPF_LEAVE_HRESULT(hr);
; 8251 : 
; 8252 :     return hr;

  001c8	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  001cb	89 45 f0	 mov	 DWORD PTR $T40708[ebp], eax
  001ce	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  001d1	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  001d6	8b 45 f0	 mov	 eax, DWORD PTR $T40708[ebp]
$L38017:

; 8253 : }

  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c2 0c 00	 ret	 12			; 0000000cH
?SetPlayRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetPlayRegion
DSOUND	ENDS
PUBLIC	??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@ ; `string'
PUBLIC	??_C@_0CP@BMHLNDEN@Can?8t?5call?5SetLoopRegion?5on?5MIXI@ ; `string'
PUBLIC	??_C@_0BO@IHLGDMJJ@Loop?5offset?5not?5block?9aligned?$AA@ ; `string'
PUBLIC	??_C@_0BO@PIGELODJ@Loop?5length?5not?5block?9aligned?$AA@ ; `string'
PUBLIC	??_C@_0DE@HMEEMDGC@Loop?5region?5extends?5past?5the?5end@ ; `string'
EXTRN	?SetLoopRegion@CMcpxBuffer@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxBuffer::SetLoopRegion
;	COMDAT ??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
DSOUND_RD	SEGMENT
??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@ DB 'CDirectSoundBu'
	DB	'ffer::SetLoopRegion', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CP@BMHLNDEN@Can?8t?5call?5SetLoopRegion?5on?5MIXI@
DSOUND_RD	SEGMENT
??_C@_0CP@BMHLNDEN@Can?8t?5call?5SetLoopRegion?5on?5MIXI@ DB 'Can''t call'
	DB	' SetLoopRegion on MIXIN/FXIN buffers', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IHLGDMJJ@Loop?5offset?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@IHLGDMJJ@Loop?5offset?5not?5block?9aligned?$AA@ DB 'Loop offset'
	DB	' not block-aligned', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@PIGELODJ@Loop?5length?5not?5block?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@PIGELODJ@Loop?5length?5not?5block?9aligned?$AA@ DB 'Loop length'
	DB	' not block-aligned', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@HMEEMDGC@Loop?5region?5extends?5past?5the?5end@
DSOUND_RD	SEGMENT
??_C@_0DE@HMEEMDGC@Loop?5region?5extends?5past?5the?5end@ DB 'Loop region'
	DB	' extends past the end of the play region', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetLoopRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z
DSOUND	SEGMENT
$T40713 = -16
$T40712 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwLoopStart$ = 12
_dwLoopLength$ = 16
?SetLoopRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetLoopRegion, COMDAT

; 8281 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 8282 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 8283 :     
; 8284 :     DPF_ENTER();
; 8285 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 44		 je	 SHORT $L38052
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
  00028	68 5d 20 00 00	 push	 8285			; 0000205dH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40712[ebp], -2147467259 ; 80004005H
  00052	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f4	 mov	 eax, DWORD PTR $T40712[ebp]
  0005d	e9 79 01 00 00	 jmp	 $L38048
$L38052:
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
  00067	68 5d 20 00 00	 push	 8285			; 0000205dH
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8286 : 
; 8287 : #ifdef VALIDATE_PARAMETERS
; 8288 : 
; 8289 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  00079	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0007f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00082	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  00088	85 d2		 test	 edx, edx
  0008a	74 2d		 je	 SHORT $L38056

; 8290 :     {
; 8291 :         DPF_ERROR("Can't call SetLoopRegion on MIXIN/FXIN buffers");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
  00096	68 63 20 00 00	 push	 8291			; 00002063H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a0	6a 01		 push	 1
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@BMHLNDEN@Can?8t?5call?5SetLoopRegion?5on?5MIXI@
  000b1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b6	83 c4 04	 add	 esp, 4
$L38056:

; 8292 :     }
; 8293 : 
; 8294 :     if(dwLoopStart % m_pSettings->m_fmt.nBlockAlign)

  000b9	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000bf	8b 45 0c	 mov	 eax, DWORD PTR _dwLoopStart$[ebp]
  000c2	33 d2		 xor	 edx, edx
  000c4	f7 71 14	 div	 DWORD PTR [ecx+20]
  000c7	85 d2		 test	 edx, edx
  000c9	74 2d		 je	 SHORT $L38058

; 8295 :     {
; 8296 :         DPF_ERROR("Loop offset not block-aligned");

  000cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
  000d5	68 68 20 00 00	 push	 8296			; 00002068H
  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000df	6a 01		 push	 1
  000e1	6a 09		 push	 9
  000e3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e8	83 c4 18	 add	 esp, 24			; 00000018H
  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IHLGDMJJ@Loop?5offset?5not?5block?9aligned?$AA@
  000f0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f5	83 c4 04	 add	 esp, 4
$L38058:

; 8297 :     }
; 8298 : 
; 8299 : #endif // VALIDATE_PARAMETERS
; 8300 : 
; 8301 :     //
; 8302 :     // Munge the length so it's valid
; 8303 :     //
; 8304 : 
; 8305 :     if(dwLoopLength)

  000f8	83 7d 10 00	 cmp	 DWORD PTR _dwLoopLength$[ebp], 0
  000fc	0f 84 89 00 00
	00		 je	 $L38060

; 8306 :     {
; 8307 : 
; 8308 : #ifdef VALIDATE_PARAMETERS
; 8309 : 
; 8310 :         if(dwLoopLength % m_pSettings->m_fmt.nBlockAlign)

  00102	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00105	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  00108	8b 45 10	 mov	 eax, DWORD PTR _dwLoopLength$[ebp]
  0010b	33 d2		 xor	 edx, edx
  0010d	f7 71 14	 div	 DWORD PTR [ecx+20]
  00110	85 d2		 test	 edx, edx
  00112	74 2d		 je	 SHORT $L38061

; 8311 :         {
; 8312 :             DPF_ERROR("Loop length not block-aligned");

  00114	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
  0011e	68 78 20 00 00	 push	 8312			; 00002078H
  00123	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00128	6a 01		 push	 1
  0012a	6a 09		 push	 9
  0012c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00131	83 c4 18	 add	 esp, 24			; 00000018H
  00134	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@PIGELODJ@Loop?5length?5not?5block?9aligned?$AA@
  00139	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0013e	83 c4 04	 add	 esp, 4
$L38061:

; 8313 :         }
; 8314 : 
; 8315 : #endif // VALIDATE_PARAMETERS
; 8316 : 
; 8317 :         if(dwLoopStart + dwLoopLength > m_pSettings->m_dwPlayLength)

  00141	8b 55 0c	 mov	 edx, DWORD PTR _dwLoopStart$[ebp]
  00144	03 55 10	 add	 edx, DWORD PTR _dwLoopLength$[ebp]
  00147	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0014a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0014d	3b 91 c4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+196]
  00153	76 34		 jbe	 SHORT $L38063

; 8318 :         {
; 8319 :             DPF_ERROR("Loop region extends past the end of the play region");

  00155	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0015a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@CDIHONIO@CDirectSoundBuffer?3?3SetLoopRegio@
  0015f	68 7f 20 00 00	 push	 8319			; 0000207fH
  00164	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00169	6a 01		 push	 1
  0016b	6a 09		 push	 9
  0016d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00172	83 c4 18	 add	 esp, 24			; 00000018H
  00175	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@HMEEMDGC@Loop?5region?5extends?5past?5the?5end@
  0017a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017f	83 c4 04	 add	 esp, 4

; 8320 :             hr = DSERR_INVALIDCALL;

  00182	c7 45 fc 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L38063:

; 8321 :         }
; 8322 :     }
; 8323 :     else

  00189	eb 12		 jmp	 SHORT $L38069
$L38060:

; 8324 :     {
; 8325 :         dwLoopLength = m_pSettings->m_dwPlayLength - dwLoopStart;

  0018b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00191	8b 88 c4 00 00
	00		 mov	 ecx, DWORD PTR [eax+196]
  00197	2b 4d 0c	 sub	 ecx, DWORD PTR _dwLoopStart$[ebp]
  0019a	89 4d 10	 mov	 DWORD PTR _dwLoopLength$[ebp], ecx
$L38069:

; 8326 :     }
; 8327 : 
; 8328 :     //
; 8329 :     // Update the settings object
; 8330 :     //
; 8331 : 
; 8332 :     if(SUCCEEDED(hr))

  0019d	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001a1	7c 13		 jl	 SHORT $L38071

; 8333 :     {
; 8334 :         m_pSettings->SetLoopRegion(dwLoopStart, dwLoopLength);

  001a3	8b 55 10	 mov	 edx, DWORD PTR _dwLoopLength$[ebp]
  001a6	52		 push	 edx
  001a7	8b 45 0c	 mov	 eax, DWORD PTR _dwLoopStart$[ebp]
  001aa	50		 push	 eax
  001ab	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001ae	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  001b1	e8 00 00 00 00	 call	 ?SetLoopRegion@CDirectSoundBufferSettings@DirectSound@@QAEXKK@Z ; DirectSound::CDirectSoundBufferSettings::SetLoopRegion
$L38071:

; 8335 :     }
; 8336 : 
; 8337 :     //
; 8338 :     // Update the buffer implementation
; 8339 :     //
; 8340 : 
; 8341 :     if(SUCCEEDED(hr))

  001b6	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ba	7c 0e		 jl	 SHORT $L38073

; 8342 :     {
; 8343 :         hr = m_pBuffer->SetLoopRegion();

  001bc	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001bf	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  001c2	e8 00 00 00 00	 call	 ?SetLoopRegion@CMcpxBuffer@DirectSound@@QAEJXZ ; DirectSound::CMcpxBuffer::SetLoopRegion
  001c7	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L38073:

; 8344 :     }
; 8345 : 
; 8346 :     DPF_LEAVE_HRESULT(hr);
; 8347 : 
; 8348 :     return hr;

  001ca	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  001cd	89 45 f0	 mov	 DWORD PTR $T40713[ebp], eax
  001d0	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  001d3	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  001d8	8b 45 f0	 mov	 eax, DWORD PTR $T40713[ebp]
$L38048:

; 8349 : }

  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 0c 00	 ret	 12			; 0000000cH
?SetLoopRegion@CDirectSoundBuffer@DirectSound@@QAGJKK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetLoopRegion
DSOUND	ENDS
PUBLIC	??_C@_0CH@EAEJCEAG@CDirectSoundBuffer?3?3GetCurrentPo@ ; `string'
PUBLIC	??_C@_0DE@EDKDODNO@Can?8t?5call?5GetCurrentPosition?5on@ ; `string'
EXTRN	?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z:NEAR ; DirectSound::CMcpxBuffer::GetCurrentPosition
;	COMDAT ??_C@_0CH@EAEJCEAG@CDirectSoundBuffer?3?3GetCurrentPo@
DSOUND_RD	SEGMENT
??_C@_0CH@EAEJCEAG@CDirectSoundBuffer?3?3GetCurrentPo@ DB 'CDirectSoundBu'
	DB	'ffer::GetCurrentPosition', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@EDKDODNO@Can?8t?5call?5GetCurrentPosition?5on@
DSOUND_RD	SEGMENT
??_C@_0DE@EDKDODNO@Can?8t?5call?5GetCurrentPosition?5on@ DB 'Can''t call '
	DB	'GetCurrentPosition on MIXIN/FXIN buffers', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJPAK0@Z
DSOUND	SEGMENT
$T40718 = -16
$T40717 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pdwPlayPosition$ = 12
_pdwWritePosition$ = 16
?GetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJPAK0@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::GetCurrentPosition, COMDAT

; 8377 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 8378 :     HRESULT                 hr;
; 8379 : 
; 8380 :     DPF_ENTER();
; 8381 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 41		 je	 SHORT $L38082
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@EAEJCEAG@CDirectSoundBuffer?3?3GetCurrentPo@
  00021	68 bd 20 00 00	 push	 8381			; 000020bdH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40717[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40717[ebp]
  00056	eb 7e		 jmp	 SHORT $L38079
$L38082:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@EAEJCEAG@CDirectSoundBuffer?3?3GetCurrentPo@
  0005d	68 bd 20 00 00	 push	 8381			; 000020bdH
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8382 :     
; 8383 : #ifdef VALIDATE_PARAMETERS
; 8384 : 
; 8385 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00075	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00078	81 e2 00 20 08
	00		 and	 edx, 532480		; 00082000H
  0007e	85 d2		 test	 edx, edx
  00080	74 2d		 je	 SHORT $L38086

; 8386 :     {
; 8387 :         DPF_ERROR("Can't call GetCurrentPosition on MIXIN/FXIN buffers");

  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@EAEJCEAG@CDirectSoundBuffer?3?3GetCurrentPo@
  0008c	68 c3 20 00 00	 push	 8387			; 000020c3H
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00096	6a 01		 push	 1
  00098	6a 09		 push	 9
  0009a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0009f	83 c4 18	 add	 esp, 24			; 00000018H
  000a2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@EDKDODNO@Can?8t?5call?5GetCurrentPosition?5on@
  000a7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ac	83 c4 04	 add	 esp, 4
$L38086:

; 8388 :     }
; 8389 : 
; 8390 : #endif // VALIDATE_PARAMETERS
; 8391 : 
; 8392 :     hr = m_pBuffer->GetCurrentPosition(pdwPlayPosition, pdwWritePosition);

  000af	8b 45 10	 mov	 eax, DWORD PTR _pdwWritePosition$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _pdwPlayPosition$[ebp]
  000b6	51		 push	 ecx
  000b7	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  000bd	e8 00 00 00 00	 call	 ?GetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJPAK0@Z ; DirectSound::CMcpxBuffer::GetCurrentPosition
  000c2	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8393 : 
; 8394 :     DPF_LEAVE_HRESULT(hr);
; 8395 : 
; 8396 :     return hr;

  000c5	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  000c8	89 45 f0	 mov	 DWORD PTR $T40718[ebp], eax
  000cb	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000ce	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000d3	8b 45 f0	 mov	 eax, DWORD PTR $T40718[ebp]
$L38079:

; 8397 : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 0c 00	 ret	 12			; 0000000cH
?GetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJPAK0@Z ENDP ; DirectSound::CDirectSoundBuffer::GetCurrentPosition
DSOUND	ENDS
PUBLIC	??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@ ; `string'
PUBLIC	??_C@_0CF@PKJFODPD@Missing?5first?5set?5of?5lock?5parame@ ; `string'
PUBLIC	??_C@_0DB@JGMHEDHM@Missing?5one?5of?5the?5second?5set?5of@ ; `string'
PUBLIC	??_C@_0CN@BEMGHNMF@Specified?5unsupported?5or?5invalid@ ; `string'
PUBLIC	??_C@_0BO@IAOKMPNH@Can?8t?5lock?5MIXIN?1FXIN?5buffers?$AA@ ; `string'
PUBLIC	??_C@_0BM@MKDABCIF@Lock?5position?5out?9of?9bounds?$AA@ ; `string'
PUBLIC	??_C@_0CA@BEKBLCB@Lock?5position?5not?5block?5aligned?$AA@ ; `string'
PUBLIC	??_C@_0DN@JHOKEDLB@Lock?5size?5can?8t?5be?50?5without?5spe@ ; `string'
PUBLIC	??_C@_0BI@ILPPJOBN@Lock?5size?5out?9of?9bounds?$AA@ ; `string'
PUBLIC	??_C@_0BM@NMCIIKAJ@Lock?5size?5not?5block?5aligned?$AA@ ; `string'
;	COMDAT ??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@ DB 'CDirectSoundBuffer'
	DB	'::Lock', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CF@PKJFODPD@Missing?5first?5set?5of?5lock?5parame@
DSOUND_RD	SEGMENT
??_C@_0CF@PKJFODPD@Missing?5first?5set?5of?5lock?5parame@ DB 'Missing fir'
	DB	'st set of lock parameters', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DB@JGMHEDHM@Missing?5one?5of?5the?5second?5set?5of@
DSOUND_RD	SEGMENT
??_C@_0DB@JGMHEDHM@Missing?5one?5of?5the?5second?5set?5of@ DB 'Missing on'
	DB	'e of the second set of lock parameters', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CN@BEMGHNMF@Specified?5unsupported?5or?5invalid@
DSOUND_RD	SEGMENT
??_C@_0CN@BEMGHNMF@Specified?5unsupported?5or?5invalid@ DB 'Specified uns'
	DB	'upported or invalid flags (%lx)', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IAOKMPNH@Can?8t?5lock?5MIXIN?1FXIN?5buffers?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@IAOKMPNH@Can?8t?5lock?5MIXIN?1FXIN?5buffers?$AA@ DB 'Can''t loc'
	DB	'k MIXIN/FXIN buffers', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@MKDABCIF@Lock?5position?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@MKDABCIF@Lock?5position?5out?9of?9bounds?$AA@ DB 'Lock position'
	DB	' out-of-bounds', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CA@BEKBLCB@Lock?5position?5not?5block?5aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0CA@BEKBLCB@Lock?5position?5not?5block?5aligned?$AA@ DB 'Lock posit'
	DB	'ion not block aligned', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DN@JHOKEDLB@Lock?5size?5can?8t?5be?50?5without?5spe@
DSOUND_RD	SEGMENT
??_C@_0DN@JHOKEDLB@Lock?5size?5can?8t?5be?50?5without?5spe@ DB 'Lock size'
	DB	' can''t be 0 without specifying DSBLOCK_ENTIREBUFFER', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@ILPPJOBN@Lock?5size?5out?9of?9bounds?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@ILPPJOBN@Lock?5size?5out?9of?9bounds?$AA@ DB 'Lock size out-of-'
	DB	'bounds', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@NMCIIKAJ@Lock?5size?5not?5block?5aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@NMCIIKAJ@Lock?5size?5not?5block?5aligned?$AA@ DB 'Lock size not'
	DB	' block aligned', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Lock@CDirectSoundBuffer@DirectSound@@QAGJKKPAPAXPAK01K@Z
DSOUND	SEGMENT
tv227 = -20
$T40725 = -16
$T40722 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwLockPosition$ = 12
_dwLockSize$ = 16
_ppvLock1$ = 20
_pdwLockSize1$ = 24
_ppvLock2$ = 28
_pdwLockSize2$ = 32
_dwFlags$ = 36
?Lock@CDirectSoundBuffer@DirectSound@@QAGJKKPAPAXPAK01K@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::Lock, COMDAT

; 8435 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 8436 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 8437 :     
; 8438 :     DPF_ENTER();
; 8439 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 44		 je	 SHORT $L38102
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  00028	68 f7 20 00 00	 push	 8439			; 000020f7H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40722[ebp], -2147467259 ; 80004005H
  00052	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f4	 mov	 eax, DWORD PTR $T40722[ebp]
  0005d	e9 39 03 00 00	 jmp	 $L38098
$L38102:
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  00067	68 f7 20 00 00	 push	 8439			; 000020f7H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8440 : 
; 8441 : #ifdef VALIDATE_PARAMETERS
; 8442 : 
; 8443 :     if(!ppvLock1 || !pdwLockSize1)

  00079	83 7d 14 00	 cmp	 DWORD PTR _ppvLock1$[ebp], 0
  0007d	74 06		 je	 SHORT $L38107
  0007f	83 7d 18 00	 cmp	 DWORD PTR _pdwLockSize1$[ebp], 0
  00083	75 2d		 jne	 SHORT $L38106
$L38107:

; 8444 :     {
; 8445 :         DPF_ERROR("Missing first set of lock parameters");

  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  0008f	68 fd 20 00 00	 push	 8445			; 000020fdH
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00099	6a 01		 push	 1
  0009b	6a 09		 push	 9
  0009d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a2	83 c4 18	 add	 esp, 24			; 00000018H
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@PKJFODPD@Missing?5first?5set?5of?5lock?5parame@
  000aa	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000af	83 c4 04	 add	 esp, 4
$L38106:

; 8446 :     }
; 8447 : 
; 8448 :     if((ppvLock2 && !pdwLockSize2) || (!ppvLock2 && pdwLockSize2))

  000b2	83 7d 1c 00	 cmp	 DWORD PTR _ppvLock2$[ebp], 0
  000b6	74 06		 je	 SHORT $L38111
  000b8	83 7d 20 00	 cmp	 DWORD PTR _pdwLockSize2$[ebp], 0
  000bc	74 0c		 je	 SHORT $L38110
$L38111:
  000be	83 7d 1c 00	 cmp	 DWORD PTR _ppvLock2$[ebp], 0
  000c2	75 33		 jne	 SHORT $L38109
  000c4	83 7d 20 00	 cmp	 DWORD PTR _pdwLockSize2$[ebp], 0
  000c8	74 2d		 je	 SHORT $L38109
$L38110:

; 8449 :     {
; 8450 :         DPF_ERROR("Missing one of the second set of lock parameters");

  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  000d4	68 02 21 00 00	 push	 8450			; 00002102H
  000d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000de	6a 01		 push	 1
  000e0	6a 09		 push	 9
  000e2	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e7	83 c4 18	 add	 esp, 24			; 00000018H
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@JGMHEDHM@Missing?5one?5of?5the?5second?5set?5of@
  000ef	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f4	83 c4 04	 add	 esp, 4
$L38109:

; 8451 :     }
; 8452 : 
; 8453 :     if(dwFlags & ~DSBLOCK_VALID)

  000f7	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000fa	83 e0 fc	 and	 eax, -4			; fffffffcH
  000fd	85 c0		 test	 eax, eax
  000ff	74 34		 je	 SHORT $L38113

; 8454 :     {
; 8455 :         DPF_ERROR("Specified unsupported or invalid flags (%lx)", dwFlags & ~DSBLOCK_VALID);

  00101	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  0010b	68 07 21 00 00	 push	 8455			; 00002107H
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00115	6a 01		 push	 1
  00117	6a 09		 push	 9
  00119	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011e	83 c4 18	 add	 esp, 24			; 00000018H
  00121	8b 4d 24	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00124	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00127	51		 push	 ecx
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@BEMGHNMF@Specified?5unsupported?5or?5invalid@
  0012d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00132	83 c4 08	 add	 esp, 8
$L38113:

; 8456 :     }
; 8457 : 
; 8458 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  00135	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00138	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0013b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0013e	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  00144	85 c9		 test	 ecx, ecx
  00146	74 2d		 je	 SHORT $L38115

; 8459 :     {
; 8460 :         DPF_ERROR("Can't lock MIXIN/FXIN buffers");

  00148	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  00152	68 0c 21 00 00	 push	 8460			; 0000210cH
  00157	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0015c	6a 01		 push	 1
  0015e	6a 09		 push	 9
  00160	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00165	83 c4 18	 add	 esp, 24			; 00000018H
  00168	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IAOKMPNH@Can?8t?5lock?5MIXIN?1FXIN?5buffers?$AA@
  0016d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00172	83 c4 04	 add	 esp, 4
$L38115:

; 8461 :     }
; 8462 : 
; 8463 : #endif // VALIDATE_PARAMETERS
; 8464 : 
; 8465 :     //
; 8466 :     // Validate the lock position
; 8467 :     //
; 8468 : 
; 8469 :     if(dwFlags & DSBLOCK_FROMWRITECURSOR)

  00175	8b 55 24	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00178	83 e2 01	 and	 edx, 1
  0017b	85 d2		 test	 edx, edx
  0017d	74 14		 je	 SHORT $L38117

; 8470 :     {
; 8471 :         hr = GetCurrentPosition(NULL, &dwLockPosition);

  0017f	8d 45 0c	 lea	 eax, DWORD PTR _dwLockPosition$[ebp]
  00182	50		 push	 eax
  00183	6a 00		 push	 0
  00185	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 ?GetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJPAK0@Z ; DirectSound::CDirectSoundBuffer::GetCurrentPosition
  0018e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8472 :     }
; 8473 :     
; 8474 : #ifdef VALIDATE_PARAMETERS
; 8475 : 
; 8476 :     else if(dwLockPosition >= m_pSettings->m_dwBufferSize)

  00191	eb 7f		 jmp	 SHORT $L38118
$L38117:
  00193	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00196	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00199	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLockPosition$[ebp]
  0019c	3b 88 bc 00 00
	00		 cmp	 ecx, DWORD PTR [eax+188]
  001a2	72 2f		 jb	 SHORT $L38119

; 8477 :     {
; 8478 :         DPF_ERROR("Lock position out-of-bounds");

  001a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  001ae	68 1e 21 00 00	 push	 8478			; 0000211eH
  001b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001b8	6a 01		 push	 1
  001ba	6a 09		 push	 9
  001bc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001c1	83 c4 18	 add	 esp, 24			; 00000018H
  001c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@MKDABCIF@Lock?5position?5out?9of?9bounds?$AA@
  001c9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001ce	83 c4 04	 add	 esp, 4

; 8479 :     }
; 8480 :     else if(dwLockPosition % m_pSettings->m_fmt.nBlockAlign)

  001d1	eb 3f		 jmp	 SHORT $L38118
$L38119:
  001d3	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001d6	8b 4a 24	 mov	 ecx, DWORD PTR [edx+36]
  001d9	8b 45 0c	 mov	 eax, DWORD PTR _dwLockPosition$[ebp]
  001dc	33 d2		 xor	 edx, edx
  001de	f7 71 14	 div	 DWORD PTR [ecx+20]
  001e1	85 d2		 test	 edx, edx
  001e3	74 2d		 je	 SHORT $L38118

; 8481 :     {
; 8482 :         DPF_ERROR("Lock position not block aligned");

  001e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  001ef	68 22 21 00 00	 push	 8482			; 00002122H
  001f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001f9	6a 01		 push	 1
  001fb	6a 09		 push	 9
  001fd	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00202	83 c4 18	 add	 esp, 24			; 00000018H
  00205	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BEKBLCB@Lock?5position?5not?5block?5aligned?$AA@
  0020a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0020f	83 c4 04	 add	 esp, 4
$L38118:

; 8483 :     }
; 8484 : 
; 8485 : #endif // VALIDATE_PARAMETERS
; 8486 : 
; 8487 :     //
; 8488 :     // Validate the lock region size
; 8489 :     //
; 8490 : 
; 8491 :     if(SUCCEEDED(hr))

  00212	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00216	0f 8c d2 00 00
	00		 jl	 $L38125

; 8492 :     {
; 8493 :         if(dwFlags & DSBLOCK_ENTIREBUFFER)

  0021c	8b 55 24	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0021f	83 e2 02	 and	 edx, 2
  00222	85 d2		 test	 edx, edx
  00224	74 14		 je	 SHORT $L38126

; 8494 :         {
; 8495 :             dwLockSize = m_pSettings->m_dwBufferSize;

  00226	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00229	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0022c	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00232	89 55 10	 mov	 DWORD PTR _dwLockSize$[ebp], edx

; 8496 :         }
; 8497 :             
; 8498 : #ifdef VALIDATE_PARAMETERS
; 8499 : 
; 8500 :         else if(!dwLockSize)

  00235	e9 b4 00 00 00	 jmp	 $L38125
$L38126:
  0023a	83 7d 10 00	 cmp	 DWORD PTR _dwLockSize$[ebp], 0
  0023e	75 2f		 jne	 SHORT $L38128

; 8501 :         {
; 8502 :             DPF_ERROR("Lock size can't be 0 without specifying DSBLOCK_ENTIREBUFFER");

  00240	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00245	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  0024a	68 36 21 00 00	 push	 8502			; 00002136H
  0024f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00254	6a 01		 push	 1
  00256	6a 09		 push	 9
  00258	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0025d	83 c4 18	 add	 esp, 24			; 00000018H
  00260	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@JHOKEDLB@Lock?5size?5can?8t?5be?50?5without?5spe@
  00265	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0026a	83 c4 04	 add	 esp, 4

; 8503 :         }
; 8504 :         else if(dwLockSize > m_pSettings->m_dwBufferSize)

  0026d	eb 7f		 jmp	 SHORT $L38125
$L38128:
  0026f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00272	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00275	8b 55 10	 mov	 edx, DWORD PTR _dwLockSize$[ebp]
  00278	3b 91 bc 00 00
	00		 cmp	 edx, DWORD PTR [ecx+188]
  0027e	76 2f		 jbe	 SHORT $L38131

; 8505 :         {
; 8506 :             DPF_ERROR("Lock size out-of-bounds");

  00280	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00285	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  0028a	68 3a 21 00 00	 push	 8506			; 0000213aH
  0028f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00294	6a 01		 push	 1
  00296	6a 09		 push	 9
  00298	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0029d	83 c4 18	 add	 esp, 24			; 00000018H
  002a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@ILPPJOBN@Lock?5size?5out?9of?9bounds?$AA@
  002a5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002aa	83 c4 04	 add	 esp, 4

; 8507 :         }
; 8508 :         else if(dwLockSize % m_pSettings->m_fmt.nBlockAlign)

  002ad	eb 3f		 jmp	 SHORT $L38125
$L38131:
  002af	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  002b2	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002b5	8b 45 10	 mov	 eax, DWORD PTR _dwLockSize$[ebp]
  002b8	33 d2		 xor	 edx, edx
  002ba	f7 71 14	 div	 DWORD PTR [ecx+20]
  002bd	85 d2		 test	 edx, edx
  002bf	74 2d		 je	 SHORT $L38125

; 8509 :         {
; 8510 :             DPF_ERROR("Lock size not block aligned");

  002c1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@EDHJINFL@CDirectSoundBuffer?3?3Lock?$AA@
  002cb	68 3e 21 00 00	 push	 8510			; 0000213eH
  002d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002d5	6a 01		 push	 1
  002d7	6a 09		 push	 9
  002d9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002de	83 c4 18	 add	 esp, 24			; 00000018H
  002e1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NMCIIKAJ@Lock?5size?5not?5block?5aligned?$AA@
  002e6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002eb	83 c4 04	 add	 esp, 4
$L38125:

; 8511 :         }
; 8512 : 
; 8513 : #endif // VALIDATE_PARAMETERS
; 8514 : 
; 8515 :     }
; 8516 : 
; 8517 :     //
; 8518 :     // We're not really locking anything.  Instead, we're just returning
; 8519 :     // pointers to the data buffer.
; 8520 :     //
; 8521 : 
; 8522 :     if(SUCCEEDED(hr))

  002ee	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002f2	0f 8c 92 00 00
	00		 jl	 $L38137

; 8523 :     {
; 8524 :         *ppvLock1 = (LPBYTE)m_pSettings->m_pvBufferData + dwLockPosition;

  002f8	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  002fb	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002fe	8b 88 b8 00 00
	00		 mov	 ecx, DWORD PTR [eax+184]
  00304	03 4d 0c	 add	 ecx, DWORD PTR _dwLockPosition$[ebp]
  00307	8b 55 14	 mov	 edx, DWORD PTR _ppvLock1$[ebp]
  0030a	89 0a		 mov	 DWORD PTR [edx], ecx

; 8525 :         *pdwLockSize1 = min(dwLockSize, m_pSettings->m_dwBufferSize - dwLockPosition);

  0030c	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0030f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00312	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  00318	2b 55 0c	 sub	 edx, DWORD PTR _dwLockPosition$[ebp]
  0031b	39 55 10	 cmp	 DWORD PTR _dwLockSize$[ebp], edx
  0031e	73 08		 jae	 SHORT $L40723
  00320	8b 45 10	 mov	 eax, DWORD PTR _dwLockSize$[ebp]
  00323	89 45 ec	 mov	 DWORD PTR tv227[ebp], eax
  00326	eb 12		 jmp	 SHORT $L40724
$L40723:
  00328	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0032b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0032e	8b 82 bc 00 00
	00		 mov	 eax, DWORD PTR [edx+188]
  00334	2b 45 0c	 sub	 eax, DWORD PTR _dwLockPosition$[ebp]
  00337	89 45 ec	 mov	 DWORD PTR tv227[ebp], eax
$L40724:
  0033a	8b 4d 18	 mov	 ecx, DWORD PTR _pdwLockSize1$[ebp]
  0033d	8b 55 ec	 mov	 edx, DWORD PTR tv227[ebp]
  00340	89 11		 mov	 DWORD PTR [ecx], edx

; 8526 : 
; 8527 :         if(ppvLock2 && pdwLockSize2)

  00342	83 7d 1c 00	 cmp	 DWORD PTR _ppvLock2$[ebp], 0
  00346	74 42		 je	 SHORT $L38137
  00348	83 7d 20 00	 cmp	 DWORD PTR _pdwLockSize2$[ebp], 0
  0034c	74 3c		 je	 SHORT $L38137

; 8528 :         {
; 8529 :             if(*pdwLockSize1 < dwLockSize)

  0034e	8b 45 18	 mov	 eax, DWORD PTR _pdwLockSize1$[ebp]
  00351	8b 08		 mov	 ecx, DWORD PTR [eax]
  00353	3b 4d 10	 cmp	 ecx, DWORD PTR _dwLockSize$[ebp]
  00356	73 20		 jae	 SHORT $L38140

; 8530 :             {
; 8531 :                 *ppvLock2 = m_pSettings->m_pvBufferData;

  00358	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0035b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0035e	8b 4d 1c	 mov	 ecx, DWORD PTR _ppvLock2$[ebp]
  00361	8b 90 b8 00 00
	00		 mov	 edx, DWORD PTR [eax+184]
  00367	89 11		 mov	 DWORD PTR [ecx], edx

; 8532 :                 *pdwLockSize2 = dwLockSize - *pdwLockSize1;

  00369	8b 45 18	 mov	 eax, DWORD PTR _pdwLockSize1$[ebp]
  0036c	8b 4d 10	 mov	 ecx, DWORD PTR _dwLockSize$[ebp]
  0036f	2b 08		 sub	 ecx, DWORD PTR [eax]
  00371	8b 55 20	 mov	 edx, DWORD PTR _pdwLockSize2$[ebp]
  00374	89 0a		 mov	 DWORD PTR [edx], ecx

; 8533 :             }
; 8534 :             else

  00376	eb 12		 jmp	 SHORT $L38137
$L38140:

; 8535 :             {
; 8536 :                 *ppvLock2 = NULL;

  00378	8b 45 1c	 mov	 eax, DWORD PTR _ppvLock2$[ebp]
  0037b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 8537 :                 *pdwLockSize2 = 0;

  00381	8b 4d 20	 mov	 ecx, DWORD PTR _pdwLockSize2$[ebp]
  00384	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L38137:

; 8538 :             }
; 8539 :         }
; 8540 :     }
; 8541 : 
; 8542 :     DPF_LEAVE_HRESULT(hr);
; 8543 : 
; 8544 :     return hr;

  0038a	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  0038d	89 55 f0	 mov	 DWORD PTR $T40725[ebp], edx
  00390	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00393	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00398	8b 45 f0	 mov	 eax, DWORD PTR $T40725[ebp]
$L38098:

; 8545 : }

  0039b	8b e5		 mov	 esp, ebp
  0039d	5d		 pop	 ebp
  0039e	c2 20 00	 ret	 32			; 00000020H
?Lock@CDirectSoundBuffer@DirectSound@@QAGJKKPAPAXPAK01K@Z ENDP ; DirectSound::CDirectSoundBuffer::Lock
DSOUND	ENDS
PUBLIC	??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@ ; `string'
PUBLIC	??_C@_0BM@KLDMGNIL@Position?5not?5sample?9aligned?$AA@ ; `string'
PUBLIC	??_C@_0DE@POOJFMA@Can?8t?5call?5SetCurrentPosition?5on@ ; `string'
PUBLIC	??_C@_0CD@EJDFOLMC@Play?5cursor?5position?5out?9of?9boun@ ; `string'
EXTRN	?SetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJK@Z:NEAR ; DirectSound::CMcpxBuffer::SetCurrentPosition
;	COMDAT ??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@
DSOUND_RD	SEGMENT
??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@ DB 'CDirectSoundBu'
	DB	'ffer::SetCurrentPosition', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BM@KLDMGNIL@Position?5not?5sample?9aligned?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@KLDMGNIL@Position?5not?5sample?9aligned?$AA@ DB 'Position not s'
	DB	'ample-aligned', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@POOJFMA@Can?8t?5call?5SetCurrentPosition?5on@
DSOUND_RD	SEGMENT
??_C@_0DE@POOJFMA@Can?8t?5call?5SetCurrentPosition?5on@ DB 'Can''t call S'
	DB	'etCurrentPosition on MIXIN/FXIN buffers', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CD@EJDFOLMC@Play?5cursor?5position?5out?9of?9boun@
DSOUND_RD	SEGMENT
??_C@_0CD@EJDFOLMC@Play?5cursor?5position?5out?9of?9boun@ DB 'Play cursor'
	DB	' position out-of-bounds', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
$T40730 = -16
$T40729 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwPlayPosition$ = 12
?SetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetCurrentPosition, COMDAT

; 8571 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 8572 :     HRESULT                 hr;
; 8573 :     
; 8574 :     DPF_ENTER();
; 8575 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L38149
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@
  00021	68 7f 21 00 00	 push	 8575			; 0000217fH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40729[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40729[ebp]
  00056	e9 f7 00 00 00	 jmp	 $L38146
$L38149:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@
  00060	68 7f 21 00 00	 push	 8575			; 0000217fH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8576 :     
; 8577 : #ifdef VALIDATE_PARAMETERS
; 8578 : 
; 8579 :     if(dwPlayPosition % m_pSettings->m_fmt.nBlockAlign)

  00072	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00078	8b 45 0c	 mov	 eax, DWORD PTR _dwPlayPosition$[ebp]
  0007b	33 d2		 xor	 edx, edx
  0007d	f7 71 14	 div	 DWORD PTR [ecx+20]
  00080	85 d2		 test	 edx, edx
  00082	74 2d		 je	 SHORT $L38153

; 8580 :     {
; 8581 :         DPF_ERROR("Position not sample-aligned");

  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00089	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@
  0008e	68 85 21 00 00	 push	 8581			; 00002185H
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00098	6a 01		 push	 1
  0009a	6a 09		 push	 9
  0009c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a1	83 c4 18	 add	 esp, 24			; 00000018H
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KLDMGNIL@Position?5not?5sample?9aligned?$AA@
  000a9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ae	83 c4 04	 add	 esp, 4
$L38153:

; 8582 :     }
; 8583 :     
; 8584 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  000b1	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000b7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ba	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  000c0	85 c9		 test	 ecx, ecx
  000c2	74 2d		 je	 SHORT $L38155

; 8585 :     {
; 8586 :         DPF_ERROR("Can't call SetCurrentPosition on MIXIN/FXIN buffers");

  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@
  000ce	68 8a 21 00 00	 push	 8586			; 0000218aH
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000d8	6a 01		 push	 1
  000da	6a 09		 push	 9
  000dc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e1	83 c4 18	 add	 esp, 24			; 00000018H
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@POOJFMA@Can?8t?5call?5SetCurrentPosition?5on@
  000e9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ee	83 c4 04	 add	 esp, 4
$L38155:

; 8587 :     }
; 8588 : 
; 8589 :     if(dwPlayPosition >= m_pSettings->m_dwPlayLength)

  000f1	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000f4	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _dwPlayPosition$[ebp]
  000fa	3b 88 c4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+196]
  00100	72 2d		 jb	 SHORT $L38157

; 8590 :     {
; 8591 :         DPF_ERROR("Play cursor position out-of-bounds");

  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LKGDBCOO@CDirectSoundBuffer?3?3SetCurrentPo@
  0010c	68 8f 21 00 00	 push	 8591			; 0000218fH
  00111	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00116	6a 01		 push	 1
  00118	6a 09		 push	 9
  0011a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011f	83 c4 18	 add	 esp, 24			; 00000018H
  00122	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@EJDFOLMC@Play?5cursor?5position?5out?9of?9boun@
  00127	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0012c	83 c4 04	 add	 esp, 4
$L38157:

; 8592 :     }
; 8593 :     
; 8594 : #endif // VALIDATE_PARAMETERS
; 8595 : 
; 8596 :     hr = m_pBuffer->SetCurrentPosition(dwPlayPosition);

  0012f	8b 55 0c	 mov	 edx, DWORD PTR _dwPlayPosition$[ebp]
  00132	52		 push	 edx
  00133	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00136	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00139	e8 00 00 00 00	 call	 ?SetCurrentPosition@CMcpxBuffer@DirectSound@@QAEJK@Z ; DirectSound::CMcpxBuffer::SetCurrentPosition
  0013e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8597 : 
; 8598 :     DPF_LEAVE_HRESULT(hr);
; 8599 : 
; 8600 :     return hr;

  00141	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00144	89 4d f0	 mov	 DWORD PTR $T40730[ebp], ecx
  00147	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0014a	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0014f	8b 45 f0	 mov	 eax, DWORD PTR $T40730[ebp]
$L38146:

; 8601 : }

  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 08 00	 ret	 8
?SetCurrentPosition@CDirectSoundBuffer@DirectSound@@QAGJK@Z ENDP ; DirectSound::CDirectSoundBuffer::SetCurrentPosition
DSOUND	ENDS
PUBLIC	??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@ ; `string'
PUBLIC	??_C@_0CI@OOGNPNNJ@Buffer?5does?5not?5have?5CTRLPOSITIO@ ; `string'
PUBLIC	??_C@_0CG@FJHCJHCJ@Offset?5at?5index?5?$CFlu?5not?5block?9al@ ; `string'
PUBLIC	??_C@_0DE@JNMEBNPI@Offset?5at?5index?5?$CFlu?5past?5the?5end@ ; `string'
PUBLIC	??_C@_0BL@ICKCNNOB@Invalid?5event?5at?5index?5?$CFlu?$AA@ ; `string'
PUBLIC	??_C@_0DK@OBGPHDFP@Can?8t?5call?5SetNotificationPositi@ ; `string'
EXTRN	?SetNotificationPositions@CMcpxBuffer@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxBuffer::SetNotificationPositions
;	COMDAT ??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
DSOUND_RD	SEGMENT
??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@ DB 'CDirectSoundBu'
	DB	'ffer::SetNotificationPositions', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@OOGNPNNJ@Buffer?5does?5not?5have?5CTRLPOSITIO@
DSOUND_RD	SEGMENT
??_C@_0CI@OOGNPNNJ@Buffer?5does?5not?5have?5CTRLPOSITIO@ DB 'Buffer does '
	DB	'not have CTRLPOSITIONNOTIFY', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@FJHCJHCJ@Offset?5at?5index?5?$CFlu?5not?5block?9al@
DSOUND_RD	SEGMENT
??_C@_0CG@FJHCJHCJ@Offset?5at?5index?5?$CFlu?5not?5block?9al@ DB 'Offset '
	DB	'at index %lu not block-aligned', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@JNMEBNPI@Offset?5at?5index?5?$CFlu?5past?5the?5end@
DSOUND_RD	SEGMENT
??_C@_0DE@JNMEBNPI@Offset?5at?5index?5?$CFlu?5past?5the?5end@ DB 'Offset '
	DB	'at index %lu past the end of the play region', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@ICKCNNOB@Invalid?5event?5at?5index?5?$CFlu?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@ICKCNNOB@Invalid?5event?5at?5index?5?$CFlu?$AA@ DB 'Invalid eve'
	DB	'nt at index %lu', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DK@OBGPHDFP@Can?8t?5call?5SetNotificationPositi@
DSOUND_RD	SEGMENT
??_C@_0DK@OBGPHDFP@Can?8t?5call?5SetNotificationPositi@ DB 'Can''t call S'
	DB	'etNotificationPositions on MIXIN/FXIN buffers', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?SetNotificationPositions@CDirectSoundBuffer@DirectSound@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z
DSOUND	SEGMENT
$T40735 = -20
$T40734 = -16
___AutoLock$ = -12
_hr$ = -8
_i$ = -4
_this$ = 8
_dwNotifyCount$ = 12
_paNotifies$ = 16
?SetNotificationPositions@CDirectSoundBuffer@DirectSound@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::SetNotificationPositions, COMDAT

; 8629 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 8630 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 8631 : 
; 8632 : #ifdef VALIDATE_PARAMETERS
; 8633 : 
; 8634 :     DWORD                   i;
; 8635 : 
; 8636 : #endif // VALIDATE_PARAMETERS
; 8637 : 
; 8638 :     DPF_ENTER();
; 8639 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 44		 je	 SHORT $L38169
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
  00028	68 bf 21 00 00	 push	 8639			; 000021bfH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T40734[ebp], -2147467259 ; 80004005H
  00052	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f0	 mov	 eax, DWORD PTR $T40734[ebp]
  0005d	e9 df 01 00 00	 jmp	 $L38164
$L38169:
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
  00067	68 bf 21 00 00	 push	 8639			; 000021bfH
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146307104>::__AssertValidObject

; 8640 : 
; 8641 : #ifdef VALIDATE_PARAMETERS
; 8642 : 
; 8643 :     if(!(m_pSettings->m_dwFlags & DSBCAPS_CTRLPOSITIONNOTIFY))

  00079	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0007f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00082	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  00088	85 d2		 test	 edx, edx
  0008a	75 2d		 jne	 SHORT $L38173

; 8644 :     {
; 8645 :         DPF_ERROR("Buffer does not have CTRLPOSITIONNOTIFY");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
  00096	68 c5 21 00 00	 push	 8645			; 000021c5H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000a0	6a 01		 push	 1
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@OOGNPNNJ@Buffer?5does?5not?5have?5CTRLPOSITIO@
  000b1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b6	83 c4 04	 add	 esp, 4
$L38173:

; 8646 :     }
; 8647 : 
; 8648 :     for(i = 0; i < dwNotifyCount; i++)

  000b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c0	eb 09		 jmp	 SHORT $L38175
$L38176:
  000c2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c5	83 c0 01	 add	 eax, 1
  000c8	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L38175:
  000cb	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000ce	3b 4d 0c	 cmp	 ecx, DWORD PTR _dwNotifyCount$[ebp]
  000d1	0f 83 ef 00 00
	00		 jae	 $L38177

; 8649 :     {
; 8650 :         if(DSBPN_OFFSETSTOP == paNotifies[i].dwOffset)

  000d7	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000da	8b 45 10	 mov	 eax, DWORD PTR _paNotifies$[ebp]
  000dd	83 3c d0 ff	 cmp	 DWORD PTR [eax+edx*8], -1
  000e1	75 02		 jne	 SHORT $L38178

; 8651 :         {
; 8652 :             continue;

  000e3	eb dd		 jmp	 SHORT $L38176
$L38178:

; 8653 :         }
; 8654 :         
; 8655 :         if(paNotifies[i].dwOffset % m_pSettings->m_fmt.nBlockAlign)

  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000ee	8b 45 10	 mov	 eax, DWORD PTR _paNotifies$[ebp]
  000f1	8b 04 d0	 mov	 eax, DWORD PTR [eax+edx*8]
  000f4	33 d2		 xor	 edx, edx
  000f6	f7 71 14	 div	 DWORD PTR [ecx+20]
  000f9	85 d2		 test	 edx, edx
  000fb	74 31		 je	 SHORT $L38179

; 8656 :         {
; 8657 :             DPF_ERROR("Offset at index %lu not block-aligned", i);

  000fd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
  00107	68 d1 21 00 00	 push	 8657			; 000021d1H
  0010c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00111	6a 01		 push	 1
  00113	6a 09		 push	 9
  00115	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011a	83 c4 18	 add	 esp, 24			; 00000018H
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00120	51		 push	 ecx
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FJHCJHCJ@Offset?5at?5index?5?$CFlu?5not?5block?9al@
  00126	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0012b	83 c4 08	 add	 esp, 8
$L38179:

; 8658 :         }
; 8659 : 
; 8660 :         if(paNotifies[i].dwOffset >= m_pSettings->m_dwPlayLength)

  0012e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00131	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00137	8b 55 10	 mov	 edx, DWORD PTR _paNotifies$[ebp]
  0013a	8b 0c ca	 mov	 ecx, DWORD PTR [edx+ecx*8]
  0013d	3b 88 c4 00 00
	00		 cmp	 ecx, DWORD PTR [eax+196]
  00143	72 31		 jb	 SHORT $L38181

; 8661 :         {
; 8662 :             DPF_ERROR("Offset at index %lu past the end of the play region", i);

  00145	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0014a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
  0014f	68 d6 21 00 00	 push	 8662			; 000021d6H
  00154	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00159	6a 01		 push	 1
  0015b	6a 09		 push	 9
  0015d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00162	83 c4 18	 add	 esp, 24			; 00000018H
  00165	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00168	52		 push	 edx
  00169	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@JNMEBNPI@Offset?5at?5index?5?$CFlu?5past?5the?5end@
  0016e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00173	83 c4 08	 add	 esp, 8
$L38181:

; 8663 :         }
; 8664 :         
; 8665 :         if(!IS_VALID_HANDLE_VALUE(paNotifies[i].hEventNotify))

  00176	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00179	8b 4d 10	 mov	 ecx, DWORD PTR _paNotifies$[ebp]
  0017c	83 7c c1 04 00	 cmp	 DWORD PTR [ecx+eax*8+4], 0
  00181	74 0d		 je	 SHORT $L38185
  00183	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00186	8b 45 10	 mov	 eax, DWORD PTR _paNotifies$[ebp]
  00189	83 7c d0 04 ff	 cmp	 DWORD PTR [eax+edx*8+4], -1
  0018e	75 31		 jne	 SHORT $L38184
$L38185:

; 8666 :         {
; 8667 :             DPF_ERROR("Invalid event at index %lu", i);

  00190	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00195	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
  0019a	68 db 21 00 00	 push	 8667			; 000021dbH
  0019f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001a4	6a 01		 push	 1
  001a6	6a 09		 push	 9
  001a8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001ad	83 c4 18	 add	 esp, 24			; 00000018H
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001b3	51		 push	 ecx
  001b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@ICKCNNOB@Invalid?5event?5at?5index?5?$CFlu?$AA@
  001b9	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001be	83 c4 08	 add	 esp, 8
$L38184:

; 8668 :         }
; 8669 :     }

  001c1	e9 fc fe ff ff	 jmp	 $L38176
$L38177:

; 8670 : 
; 8671 :     if(m_pSettings->m_dwFlags & DSBCAPS_SUBMIXMASK)

  001c6	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001c9	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001cc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001cf	81 e1 00 20 08
	00		 and	 ecx, 532480		; 00082000H
  001d5	85 c9		 test	 ecx, ecx
  001d7	74 2d		 je	 SHORT $L38187

; 8672 :     {
; 8673 :         DPF_ERROR("Can't call SetNotificationPositions on MIXIN/FXIN buffers");

  001d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@HOGDHNFJ@CDirectSoundBuffer?3?3SetNotificat@
  001e3	68 e1 21 00 00	 push	 8673			; 000021e1H
  001e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001ed	6a 01		 push	 1
  001ef	6a 09		 push	 9
  001f1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001f6	83 c4 18	 add	 esp, 24			; 00000018H
  001f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DK@OBGPHDFP@Can?8t?5call?5SetNotificationPositi@
  001fe	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00203	83 c4 04	 add	 esp, 4
$L38187:

; 8674 :     }
; 8675 : 
; 8676 : #endif // VALIDATE_PARAMETERS
; 8677 : 
; 8678 :     //
; 8679 :     // Update the settings object
; 8680 :     //
; 8681 : 
; 8682 :     hr = m_pSettings->SetNotificationPositions(dwNotifyCount, paNotifies);

  00206	8b 55 10	 mov	 edx, DWORD PTR _paNotifies$[ebp]
  00209	52		 push	 edx
  0020a	8b 45 0c	 mov	 eax, DWORD PTR _dwNotifyCount$[ebp]
  0020d	50		 push	 eax
  0020e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00211	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00214	e8 00 00 00 00	 call	 ?SetNotificationPositions@CDirectSoundBufferSettings@DirectSound@@QAEJKPBU_DSBPOSITIONNOTIFY@@@Z ; DirectSound::CDirectSoundBufferSettings::SetNotificationPositions
  00219	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 8683 : 
; 8684 :     //
; 8685 :     // Update the implementation object
; 8686 :     //
; 8687 : 
; 8688 :     if(SUCCEEDED(hr))

  0021c	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00220	7c 0e		 jl	 SHORT $L38190

; 8689 :     {
; 8690 :         hr = m_pBuffer->SetNotificationPositions();

  00222	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00225	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00228	e8 00 00 00 00	 call	 ?SetNotificationPositions@CMcpxBuffer@DirectSound@@QAEJXZ ; DirectSound::CMcpxBuffer::SetNotificationPositions
  0022d	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L38190:

; 8691 :     }
; 8692 : 
; 8693 :     DPF_LEAVE_HRESULT(hr);
; 8694 : 
; 8695 :     return hr;

  00230	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
  00233	89 45 ec	 mov	 DWORD PTR $T40735[ebp], eax
  00236	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00239	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0023e	8b 45 ec	 mov	 eax, DWORD PTR $T40735[ebp]
$L38164:

; 8696 : }

  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c2 0c 00	 ret	 12			; 0000000cH
?SetNotificationPositions@CDirectSoundBuffer@DirectSound@@QAGJKPBU_DSBPOSITIONNOTIFY@@@Z ENDP ; DirectSound::CDirectSoundBuffer::SetNotificationPositions
DSOUND	ENDS
PUBLIC	??0CDirectSoundStreamSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundStreamSettings::CDirectSoundStreamSettings
PUBLIC	??_7CDirectSoundStreamSettings@DirectSound@@6B@	; DirectSound::CDirectSoundStreamSettings::`vftable'
PUBLIC	??_GCDirectSoundStreamSettings@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundStreamSettings::`scalar deleting destructor'
EXTRN	??_ECDirectSoundStreamSettings@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CDirectSoundStreamSettings::`vector deleting destructor'
;	COMDAT ??_7CDirectSoundStreamSettings@DirectSound@@6B@
CONST	SEGMENT
??_7CDirectSoundStreamSettings@DirectSound@@6B@ DD FLAT:??_ECDirectSoundStreamSettings@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundStreamSettings::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSoundStreamSettings@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0CDirectSoundStreamSettings@DirectSound@@QAE@XZ PROC NEAR ; DirectSound::CDirectSoundStreamSettings::CDirectSoundStreamSettings, COMDAT
; _this$ = ecx

; 8723 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CDirectSoundVoiceSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundVoiceSettings::CDirectSoundVoiceSettings
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundStreamSettings@DirectSound@@6B@

; 8724 :     DPF_ENTER();
; 8725 :     DPF_LEAVE_VOID();
; 8726 : }

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CDirectSoundStreamSettings@DirectSound@@QAE@XZ ENDP	; DirectSound::CDirectSoundStreamSettings::CDirectSoundStreamSettings
DSOUND	ENDS
PUBLIC	??1CDirectSoundStreamSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundStreamSettings::~CDirectSoundStreamSettings
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSoundStreamSettings@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSoundStreamSettings@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CDirectSoundStreamSettings::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSoundStreamSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundStreamSettings::~CDirectSoundStreamSettings
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L38199
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L38199:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCDirectSoundStreamSettings@DirectSound@@UAEPAXI@Z ENDP ; DirectSound::CDirectSoundStreamSettings::`scalar deleting destructor'
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??1CDirectSoundStreamSettings@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1CDirectSoundStreamSettings@DirectSound@@UAE@XZ PROC NEAR ; DirectSound::CDirectSoundStreamSettings::~CDirectSoundStreamSettings, COMDAT
; _this$ = ecx

; 8751 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CDirectSoundStreamSettings@DirectSound@@6B@

; 8752 :     DPF_ENTER();
; 8753 :     DPF_LEAVE_VOID();
; 8754 : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CDirectSoundVoiceSettings@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundVoiceSettings::~CDirectSoundVoiceSettings
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CDirectSoundStreamSettings@DirectSound@@UAE@XZ ENDP	; DirectSound::CDirectSoundStreamSettings::~CDirectSoundStreamSettings
DSOUND	ENDS
PUBLIC	?Initialize@CDirectSoundStreamSettings@DirectSound@@QAEJPBU_DSSTREAMDESC@@@Z ; DirectSound::CDirectSoundStreamSettings::Initialize
; Function compile flags: /Odt
;	COMDAT ?Initialize@CDirectSoundStreamSettings@DirectSound@@QAEJPBU_DSSTREAMDESC@@@Z
DSOUND	SEGMENT
_this$ = -8
_hr$ = -4
_pdssd$ = 8
?Initialize@CDirectSoundStreamSettings@DirectSound@@QAEJPBU_DSSTREAMDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundStreamSettings::Initialize, COMDAT
; _this$ = ecx

; 8780 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 8781 :     HRESULT                 hr;
; 8782 : 
; 8783 :     DPF_ENTER();
; 8784 : 
; 8785 :     //
; 8786 :     // Hand off to the base class
; 8787 :     //
; 8788 : 
; 8789 :     hr = CDirectSoundVoiceSettings::Initialize(pdssd->dwFlags, pdssd->lpwfxFormat, pdssd->lpMixBins);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pdssd$[ebp]
  0000c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000f	51		 push	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _pdssd$[ebp]
  00013	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	52		 push	 edx
  0001d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundVoiceSettings@DirectSound@@QAEJKPBUtWAVEFORMATEX@@PBU_DSMIXBINS@@@Z ; DirectSound::CDirectSoundVoiceSettings::Initialize
  00025	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 8790 : 
; 8791 :     //
; 8792 :     // Save stream-specific settings
; 8793 :     //
; 8794 : 
; 8795 :     if(SUCCEEDED(hr))

  00028	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002c	7c 2d		 jl	 SHORT $L38210

; 8796 :     {
; 8797 :         m_dwMaxAttachedPackets = pdssd->dwMaxAttachedPackets;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  00034	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00037	89 90 b8 00 00
	00		 mov	 DWORD PTR [eax+184], edx

; 8798 :         m_pfnCallback = pdssd->lpfnCallback;

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  00043	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00046	89 90 bc 00 00
	00		 mov	 DWORD PTR [eax+188], edx

; 8799 :         m_pvContext = pdssd->lpvContext;

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  00052	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00055	89 90 c0 00 00
	00		 mov	 DWORD PTR [eax+192], edx
$L38210:

; 8800 :     }
; 8801 : 
; 8802 :     DPF_LEAVE_HRESULT(hr);
; 8803 : 
; 8804 :     return hr;

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 8805 : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?Initialize@CDirectSoundStreamSettings@DirectSound@@QAEJPBU_DSSTREAMDESC@@@Z ENDP ; DirectSound::CDirectSoundStreamSettings::Initialize
DSOUND	ENDS
PUBLIC	??0?$CValidObject@$0EEFDFDCA@@DirectSound@@QAE@XZ ; DirectSound::CValidObject<1146311456>::CValidObject<1146311456>
PUBLIC	??0IDirectSoundStream@@QAE@XZ			; IDirectSoundStream::IDirectSoundStream
PUBLIC	?AddRef@CDirectSoundStream@DirectSound@@UAGKXZ	; DirectSound::CDirectSoundStream::AddRef
PUBLIC	?Release@CDirectSoundStream@DirectSound@@UAGKXZ	; DirectSound::CDirectSoundStream::Release
PUBLIC	?GetInfo@CDirectSoundStream@DirectSound@@UAGJPAU_XMEDIAINFO@@@Z ; DirectSound::CDirectSoundStream::GetInfo
PUBLIC	?GetStatus@CDirectSoundStream@DirectSound@@UAGJPAK@Z ; DirectSound::CDirectSoundStream::GetStatus
PUBLIC	?Process@CDirectSoundStream@DirectSound@@UAGJPBU_XMEDIAPACKET@@0@Z ; DirectSound::CDirectSoundStream::Process
PUBLIC	?Discontinuity@CDirectSoundStream@DirectSound@@UAGJXZ ; DirectSound::CDirectSoundStream::Discontinuity
PUBLIC	?Flush@CDirectSoundStream@DirectSound@@UAGJXZ	; DirectSound::CDirectSoundStream::Flush
PUBLIC	??_7CDirectSoundStream@DirectSound@@6BIDirectSoundStream@@@ ; DirectSound::CDirectSoundStream::`vftable'
PUBLIC	??_7CDirectSoundStream@DirectSound@@6B?$CValidObject@$0EEFDFDCA@@1@@ ; DirectSound::CDirectSoundStream::`vftable'
PUBLIC	??_7CDirectSoundStream@DirectSound@@6BCDirectSoundVoice@1@@ ; DirectSound::CDirectSoundStream::`vftable'
PUBLIC	??_GCDirectSoundStream@DirectSound@@UAEPAXI@Z	; DirectSound::CDirectSoundStream::`scalar deleting destructor'
PUBLIC	??_ECDirectSoundStream@DirectSound@@W7AEPAXI@Z	; DirectSound::CDirectSoundStream::`vector deleting destructor'
PUBLIC	?AddRef@CDirectSoundStream@DirectSound@@WM@AGKXZ ; DirectSound::CDirectSoundStream::AddRef
PUBLIC	?Release@CDirectSoundStream@DirectSound@@WM@AGKXZ ; DirectSound::CDirectSoundStream::Release
EXTRN	??_ECDirectSoundStream@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CDirectSoundStream::`vector deleting destructor'
;	COMDAT ??_7CDirectSoundStream@DirectSound@@6BIDirectSoundStream@@@
CONST	SEGMENT
??_7CDirectSoundStream@DirectSound@@6BIDirectSoundStream@@@ DD FLAT:?AddRef@CDirectSoundStream@DirectSound@@UAGKXZ ; DirectSound::CDirectSoundStream::`vftable'
	DD	FLAT:?Release@CDirectSoundStream@DirectSound@@UAGKXZ
	DD	FLAT:?GetInfo@CDirectSoundStream@DirectSound@@UAGJPAU_XMEDIAINFO@@@Z
	DD	FLAT:?GetStatus@CDirectSoundStream@DirectSound@@UAGJPAK@Z
	DD	FLAT:?Process@CDirectSoundStream@DirectSound@@UAGJPBU_XMEDIAPACKET@@0@Z
	DD	FLAT:?Discontinuity@CDirectSoundStream@DirectSound@@UAGJXZ
	DD	FLAT:?Flush@CDirectSoundStream@DirectSound@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CDirectSoundStream@DirectSound@@6B?$CValidObject@$0EEFDFDCA@@1@@
CONST	SEGMENT
??_7CDirectSoundStream@DirectSound@@6B?$CValidObject@$0EEFDFDCA@@1@@ DD FLAT:??_ECDirectSoundStream@DirectSound@@UAEPAXI@Z ; DirectSound::CDirectSoundStream::`vftable'
CONST	ENDS
;	COMDAT ??_7CDirectSoundStream@DirectSound@@6BCDirectSoundVoice@1@@
CONST	SEGMENT
??_7CDirectSoundStream@DirectSound@@6BCDirectSoundVoice@1@@ DD FLAT:??_ECDirectSoundStream@DirectSound@@W7AEPAXI@Z ; DirectSound::CDirectSoundStream::`vftable'
	DD	FLAT:?AddRef@CDirectSoundStream@DirectSound@@WM@AGKXZ
	DD	FLAT:?Release@CDirectSoundStream@DirectSound@@WM@AGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CDirectSoundStream@DirectSound@@QAE@PAVCDirectSound@1@@Z
DSOUND	SEGMENT
_this$ = -4
_pDirectSound$ = 8
??0CDirectSoundStream@DirectSound@@QAE@PAVCDirectSound@1@@Z PROC NEAR ; DirectSound::CDirectSoundStream::CDirectSoundStream, COMDAT
; _this$ = ecx

; 8831 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0IDirectSoundStream@@QAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 04	 add	 ecx, 4
  00015	e8 00 00 00 00	 call	 ??0?$CValidObject@$0EEFDFDCA@@DirectSound@@QAE@XZ ; DirectSound::CValidObject<1146311456>::CValidObject<1146311456>
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pDirectSound$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00024	e8 00 00 00 00	 call	 ??0CDirectSoundVoice@DirectSound@@QAE@PAVCDirectSound@1@@Z ; DirectSound::CDirectSoundVoice::CDirectSoundVoice
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CDirectSoundStream@DirectSound@@6BIDirectSoundStream@@@
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], OFFSET FLAT:??_7CDirectSoundStream@DirectSound@@6B?$CValidObject@$0EEFDFDCA@@1@@
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET FLAT:??_7CDirectSoundStream@DirectSound@@6BCDirectSoundVoice@1@@

; 8832 :     DPF_ENTER();
; 8833 :     DPF_LEAVE_VOID();
; 8834 : }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
??0CDirectSoundStream@DirectSound@@QAE@PAVCDirectSound@1@@Z ENDP ; DirectSound::CDirectSoundStream::CDirectSoundStream
DSOUND	ENDS
PUBLIC	??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@ ; `string'
;	COMDAT ??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
DSOUND_RD	SEGMENT
??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@ DB 'CDirectSoundStre'
	DB	'am::AddRef', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?AddRef@CDirectSoundStream@DirectSound@@UAGKXZ
DSOUND	SEGMENT
$T40755 = -12
$T40754 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CDirectSoundStream@DirectSound@@UAGKXZ PROC NEAR ; DirectSound::CDirectSoundStream::AddRef, COMDAT

; 843  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 844  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33188
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 4c 03 00 00	 push	 844			; 0000034cH
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40754[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40754[ebp]
  00053	eb 34		 jmp	 SHORT $L33186
$L33188:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@IGCEBFCD@CDirectSoundStream?3?3AddRef?$AA@
  0005a	68 4c 03 00 00	 push	 844			; 0000034cH
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 845  :         return CRefCount::AddRef();

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 0c	 add	 eax, 12			; 0000000cH
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?AddRef@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::AddRef
  0007b	89 45 f4	 mov	 DWORD PTR $T40755[ebp], eax
  0007e	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00081	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00086	8b 45 f4	 mov	 eax, DWORD PTR $T40755[ebp]
$L33186:

; 846  :     }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?AddRef@CDirectSoundStream@DirectSound@@UAGKXZ ENDP	; DirectSound::CDirectSoundStream::AddRef
DSOUND	ENDS
PUBLIC	??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@ ; `string'
;	COMDAT ??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@ DB 'CDirectSoundStr'
	DB	'eam::Release', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Release@CDirectSoundStream@DirectSound@@UAGKXZ
DSOUND	SEGMENT
$T40760 = -12
$T40759 = -8
___AutoLock$ = -4
_this$ = 8
?Release@CDirectSoundStream@DirectSound@@UAGKXZ PROC NEAR ; DirectSound::CDirectSoundStream::Release, COMDAT

; 849  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 850  :         _ENTER_EXTERNAL_METHOD("CDirectSoundStream::Release");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 3e		 je	 SHORT $L33198
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	6a 00		 push	 0
  0001e	68 52 03 00 00	 push	 850			; 00000352H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00028	6a 03		 push	 3
  0002a	6a 09		 push	 9
  0002c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00031	83 c4 18	 add	 esp, 24			; 00000018H
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00039	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0003e	83 c4 04	 add	 esp, 4
  00041	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40759[ebp], -2147467259 ; 80004005H
  00048	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00050	8b 45 f8	 mov	 eax, DWORD PTR $T40759[ebp]
  00053	eb 34		 jmp	 SHORT $L33196
$L33198:
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IEPFOHMO@CDirectSoundStream?3?3Release?$AA@
  0005a	68 52 03 00 00	 push	 850			; 00000352H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DG@DIPNMLMO@c?3?2xbox?2private?2windows?2directx?2@
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 04	 add	 ecx, 4
  0006a	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 851  :         return CRefCount::Release();

  0006f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 0c	 add	 eax, 12			; 0000000cH
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?Release@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::Release
  0007b	89 45 f4	 mov	 DWORD PTR $T40760[ebp], eax
  0007e	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00081	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00086	8b 45 f4	 mov	 eax, DWORD PTR $T40760[ebp]
$L33196:

; 852  :     }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?Release@CDirectSoundStream@DirectSound@@UAGKXZ ENDP	; DirectSound::CDirectSoundStream::Release
DSOUND	ENDS
PUBLIC	??1CDirectSoundStream@DirectSound@@UAE@XZ	; DirectSound::CDirectSoundStream::~CDirectSoundStream
; Function compile flags: /Odt
;	COMDAT ??_GCDirectSoundStream@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_GCDirectSoundStream@DirectSound@@UAEPAXI@Z PROC NEAR	; DirectSound::CDirectSoundStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDirectSoundStream@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundStream::~CDirectSoundStream
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0f		 je	 SHORT $L38218
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	83 e9 04	 sub	 ecx, 4
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$L38218:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 e8 04	 sub	 eax, 4
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GCDirectSoundStream@DirectSound@@UAEPAXI@Z ENDP	; DirectSound::CDirectSoundStream::`scalar deleting destructor'
DSOUND	ENDS
PUBLIC	??0XMediaObject@@QAE@XZ				; XMediaObject::XMediaObject
; Function compile flags: /Odt
;	COMDAT ??0IDirectSoundStream@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0IDirectSoundStream@@QAE@XZ PROC NEAR			; IDirectSoundStream::IDirectSoundStream, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0XMediaObject@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0IDirectSoundStream@@QAE@XZ ENDP			; IDirectSoundStream::IDirectSoundStream
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??0XMediaObject@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0XMediaObject@@QAE@XZ PROC NEAR			; XMediaObject::XMediaObject, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0XMediaObject@@QAE@XZ ENDP				; XMediaObject::XMediaObject
DSOUND	ENDS
PUBLIC	??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146311456>::~CValidObject<1146311456>
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
;	COMDAT ??1CDirectSoundStream@DirectSound@@UAE@XZ
DSOUND	SEGMENT
tv73 = -12
tv79 = -8
_this$ = -4
??1CDirectSoundStream@DirectSound@@UAE@XZ PROC NEAR	; DirectSound::CDirectSoundStream::~CDirectSoundStream, COMDAT
; _this$ = ecx

; 8859 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], OFFSET FLAT:??_7CDirectSoundStream@DirectSound@@6BIDirectSoundStream@@@
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CDirectSoundStream@DirectSound@@6B?$CValidObject@$0EEFDFDCA@@1@@
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET FLAT:??_7CDirectSoundStream@DirectSound@@6BCDirectSoundVoice@1@@

; 8860 :     DPF_ENTER();
; 8861 : 
; 8862 :     //
; 8863 :     // Free the stream implementation
; 8864 :     //
; 8865 : 
; 8866 :     RELEASE(m_pStream);

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0002d	74 1c		 je	 SHORT $L38227
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0003b	8b 12		 mov	 edx, DWORD PTR [edx]
  0003d	51		 push	 ecx
  0003e	ff 52 08	 call	 DWORD PTR [edx+8]
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$L38227:

; 8867 : 
; 8868 :     //
; 8869 :     // Free settings
; 8870 :     //
; 8871 : 
; 8872 :     RELEASE(m_pSettings);

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00052	74 1c		 je	 SHORT $L38226
  00054	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00060	8b 00		 mov	 eax, DWORD PTR [eax]
  00062	52		 push	 edx
  00063	ff 50 08	 call	 DWORD PTR [eax+8]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
$L38226:

; 8873 : 
; 8874 :     DPF_LEAVE_VOID();
; 8875 : }

  00070	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00073	83 ea 04	 sub	 edx, 4
  00076	85 d2		 test	 edx, edx
  00078	74 0b		 je	 SHORT $L40775
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	83 c0 08	 add	 eax, 8
  00080	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  00083	eb 07		 jmp	 SHORT $L40776
$L40775:
  00085	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$L40776:
  0008c	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  0008f	e8 00 00 00 00	 call	 ??1CDirectSoundVoice@DirectSound@@UAE@XZ ; DirectSound::CDirectSoundVoice::~CDirectSoundVoice
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	83 e9 04	 sub	 ecx, 4
  0009a	85 c9		 test	 ecx, ecx
  0009c	74 08		 je	 SHORT $L40773
  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	89 55 f4	 mov	 DWORD PTR tv73[ebp], edx
  000a4	eb 07		 jmp	 SHORT $L40774
$L40773:
  000a6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$L40774:
  000ad	8b 4d f4	 mov	 ecx, DWORD PTR tv73[ebp]
  000b0	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146311456>::~CValidObject<1146311456>
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
??1CDirectSoundStream@DirectSound@@UAE@XZ ENDP		; DirectSound::CDirectSoundStream::~CDirectSoundStream
DSOUND	ENDS
PUBLIC	??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@ ; `string'
PUBLIC	??_C@_0BK@KMCOCBOP@DSSTREAMDESC?5not?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0CC@DIPAJAPG@Failed?5to?5specify?5a?5stream?5forma@ ; `string'
PUBLIC	??_C@_0BG@MOFMIBKN@Invalid?5stream?5format?$AA@	; `string'
PUBLIC	??_C@_0BI@MKKMDBFH@3D?5streams?5must?5be?5mono?$AA@ ; `string'
PUBLIC	??_C@_0KC@IDKOPAEA@You?5must?5call?5one?5of?5the?53D?5algo@ ; `string'
PUBLIC	??_C@_0CI@DAKNOCIC@dwMaxAttachedPackets?5must?5be?5at?5@ ; `string'
PUBLIC	??_C@_0BL@HFDDPKAK@CDirectSoundStreamSettings?$AA@ ; `string'
PUBLIC	??_C@_0DE@HMPJBIGK@CMcpxStream?$CIm_pDirectSound?9?$DOm_pD@ ; `string'
EXTRN	??0CMcpxStream@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundStreamSettings@1@@Z:NEAR ; DirectSound::CMcpxStream::CMcpxStream
EXTRN	?Initialize@CMcpxStream@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxStream::Initialize
;	COMDAT ??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
DSOUND_RD	SEGMENT
??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@ DB 'CDirectSound'
	DB	'Stream::Initialize', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BK@KMCOCBOP@DSSTREAMDESC?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@KMCOCBOP@DSSTREAMDESC?5not?5supplied?$AA@ DB 'DSSTREAMDESC not '
	DB	'supplied', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@DIPAJAPG@Failed?5to?5specify?5a?5stream?5forma@
DSOUND_RD	SEGMENT
??_C@_0CC@DIPAJAPG@Failed?5to?5specify?5a?5stream?5forma@ DB 'Failed to s'
	DB	'pecify a stream format', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BG@MOFMIBKN@Invalid?5stream?5format?$AA@
DSOUND_RD	SEGMENT
??_C@_0BG@MOFMIBKN@Invalid?5stream?5format?$AA@ DB 'Invalid stream format'
	DB	00H						; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BI@MKKMDBFH@3D?5streams?5must?5be?5mono?$AA@
DSOUND_RD	SEGMENT
??_C@_0BI@MKKMDBFH@3D?5streams?5must?5be?5mono?$AA@ DB '3D streams must b'
	DB	'e mono', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0KC@IDKOPAEA@You?5must?5call?5one?5of?5the?53D?5algo@
DSOUND_RD	SEGMENT
??_C@_0KC@IDKOPAEA@You?5must?5call?5one?5of?5the?53D?5algo@ DB 'You must '
	DB	'call one of the 3D algorithm initialization functions (Direct'
	DB	'SoundUseLightHRTF, DirectSoundUseFullHRTF, DirectSoundUsePan3'
	DB	'D) before creating a 3D stream', 00H	; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CI@DAKNOCIC@dwMaxAttachedPackets?5must?5be?5at?5@
DSOUND_RD	SEGMENT
??_C@_0CI@DAKNOCIC@dwMaxAttachedPackets?5must?5be?5at?5@ DB 'dwMaxAttache'
	DB	'dPackets must be at least 1', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@HFDDPKAK@CDirectSoundStreamSettings?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@HFDDPKAK@CDirectSoundStreamSettings?$AA@ DB 'CDirectSoundStream'
	DB	'Settings', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@HMPJBIGK@CMcpxStream?$CIm_pDirectSound?9?$DOm_pD@
DSOUND_RD	SEGMENT
??_C@_0DE@HMPJBIGK@CMcpxStream?$CIm_pDirectSound?9?$DOm_pD@ DB 'CMcpxStre'
	DB	'am(m_pDirectSound->m_pDevice, m_pSettings)', 00H ; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Initialize@CDirectSoundStream@DirectSound@@QAGJPBU_DSSTREAMDESC@@@Z
DSOUND	SEGMENT
tv300 = -24
tv276 = -20
$T40783 = -16
$T40780 = -12
_hr$ = -8
_i$ = -4
_this$ = 8
_pdssd$ = 12
?Initialize@CDirectSoundStream@DirectSound@@QAGJPBU_DSSTREAMDESC@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::Initialize, COMDAT

; 8901 : {                                   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 8902 :     HRESULT                 hr;
; 8903 : 
; 8904 : #ifdef VALIDATE_PARAMETERS
; 8905 : 
; 8906 :     DWORD                   i;
; 8907 : 
; 8908 : #endif // VALIDATE_PARAMETERS
; 8909 : 
; 8910 :     DPF_ENTER();
; 8911 :     
; 8912 : #ifdef VALIDATE_PARAMETERS
; 8913 : 
; 8914 :     if(!pdssd)

  00007	83 7d 0c 00	 cmp	 DWORD PTR _pdssd$[ebp], 0
  0000b	75 2d		 jne	 SHORT $L38235

; 8915 :     {
; 8916 :         DPF_ERROR("DSSTREAMDESC not supplied");

  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  00017	68 d4 22 00 00	 push	 8916			; 000022d4H
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00021	6a 01		 push	 1
  00023	6a 09		 push	 9
  00025	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@KMCOCBOP@DSSTREAMDESC?5not?5supplied?$AA@
  00032	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00037	83 c4 04	 add	 esp, 4
$L38235:

; 8917 :     }
; 8918 : 
; 8919 :     if(pdssd->dwFlags & ~DSSTREAMCAPS_VALID)

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	81 e1 4f ff fb
	bf		 and	 ecx, -1074004145	; bffbff4fH
  00045	85 c9		 test	 ecx, ecx
  00047	74 38		 je	 SHORT $L38238

; 8920 :     {
; 8921 :         DPF_ERROR("Specified invalid flags (%lx)", pdssd->dwFlags & ~DSSTREAMCAPS_VALID);

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  00053	68 d9 22 00 00	 push	 8921			; 000022d9H
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0005d	6a 01		 push	 1
  0005f	6a 09		 push	 9
  00061	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  0006c	8b 02		 mov	 eax, DWORD PTR [edx]
  0006e	25 4f ff fb bf	 and	 eax, -1074004145	; bffbff4fH
  00073	50		 push	 eax
  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@GPLLBHKB@Specified?5invalid?5flags?5?$CI?$CFlx?$CJ?$AA@
  00079	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007e	83 c4 08	 add	 esp, 8
$L38238:

; 8922 :     }
; 8923 :         
; 8924 :     if(!pdssd->lpwfxFormat)

  00081	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  00084	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00088	75 2d		 jne	 SHORT $L38239

; 8925 :     {
; 8926 :         DPF_ERROR("Failed to specify a stream format");

  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  00094	68 de 22 00 00	 push	 8926			; 000022deH
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0009e	6a 01		 push	 1
  000a0	6a 09		 push	 9
  000a2	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a7	83 c4 18	 add	 esp, 24			; 00000018H
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@DIPAJAPG@Failed?5to?5specify?5a?5stream?5forma@
  000af	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b4	83 c4 04	 add	 esp, 4
$L38239:

; 8927 :     }
; 8928 : 
; 8929 :     if(!IsValidFormat(pdssd->lpwfxFormat))

  000b7	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  000ba	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ?IsValidFormat@WaveFormat@DirectSound@@YGHPBUtWAVEFORMATEX@@@Z ; DirectSound::WaveFormat::IsValidFormat
  000c3	85 c0		 test	 eax, eax
  000c5	75 2d		 jne	 SHORT $L38241

; 8930 :     {
; 8931 :         DPF_ERROR("Invalid stream format");

  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000cc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  000d1	68 e3 22 00 00	 push	 8931			; 000022e3H
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000db	6a 01		 push	 1
  000dd	6a 09		 push	 9
  000df	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e4	83 c4 18	 add	 esp, 24			; 00000018H
  000e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@MOFMIBKN@Invalid?5stream?5format?$AA@
  000ec	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f1	83 c4 04	 add	 esp, 4
$L38241:

; 8932 :     }
; 8933 : 
; 8934 :     if((pdssd->dwFlags & DSBCAPS_CTRL3D) && (1 != pdssd->lpwfxFormat->nChannels))

  000f4	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  000f7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f9	83 e2 10	 and	 edx, 16			; 00000010H
  000fc	85 d2		 test	 edx, edx
  000fe	74 3c		 je	 SHORT $L38243
  00100	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  00103	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00106	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  0010a	83 fa 01	 cmp	 edx, 1
  0010d	74 2d		 je	 SHORT $L38243

; 8935 :     {
; 8936 :         DPF_ERROR("3D streams must be mono");

  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00114	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  00119	68 e8 22 00 00	 push	 8936			; 000022e8H
  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00123	6a 01		 push	 1
  00125	6a 09		 push	 9
  00127	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0012c	83 c4 18	 add	 esp, 24			; 00000018H
  0012f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MKKMDBFH@3D?5streams?5must?5be?5mono?$AA@
  00134	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00139	83 c4 04	 add	 esp, 4
$L38243:

; 8937 :     }
; 8938 : 
; 8939 :     if((pdssd->dwFlags & DSSTREAMCAPS_CTRL3D) && !CHrtfSource::IsValidAlgorithm())

  0013c	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  0013f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00141	83 e1 10	 and	 ecx, 16			; 00000010H
  00144	85 c9		 test	 ecx, ecx
  00146	74 36		 je	 SHORT $L38245
  00148	e8 00 00 00 00	 call	 ?IsValidAlgorithm@CHrtfSource@DirectSound@@SGHXZ ; DirectSound::CHrtfSource::IsValidAlgorithm
  0014d	85 c0		 test	 eax, eax
  0014f	75 2d		 jne	 SHORT $L38245

; 8940 :     {
; 8941 :         DPF_ERROR("You must call one of the 3D algorithm initialization functions (DirectSoundUseLightHRTF, DirectSoundUseFullHRTF, DirectSoundUsePan3D) before creating a 3D stream");

  00151	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  0015b	68 ed 22 00 00	 push	 8941			; 000022edH
  00160	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00165	6a 01		 push	 1
  00167	6a 09		 push	 9
  00169	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0016e	83 c4 18	 add	 esp, 24			; 00000018H
  00171	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0KC@IDKOPAEA@You?5must?5call?5one?5of?5the?53D?5algo@
  00176	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0017b	83 c4 04	 add	 esp, 4
$L38245:

; 8942 :     }
; 8943 : 
; 8944 :     if(pdssd->lpMixBins)

  0017e	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  00181	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00185	0f 84 33 02 00
	00		 je	 $L38247

; 8945 :     {
; 8946 :         if(pdssd->lpMixBins->dwMixBinCount > DSMIXBIN_ASSIGNMENT_MAX)

  0018b	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  0018e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00191	83 39 08	 cmp	 DWORD PTR [ecx], 8
  00194	76 2f		 jbe	 SHORT $L38248

; 8947 :         {
; 8948 :             DPF_ERROR("No voice can be assigned to more than %lu mix bins", DSMIXBIN_ASSIGNMENT_MAX);

  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0019b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  001a0	68 f4 22 00 00	 push	 8948			; 000022f4H
  001a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001aa	6a 01		 push	 1
  001ac	6a 09		 push	 9
  001ae	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001b3	83 c4 18	 add	 esp, 24			; 00000018H
  001b6	6a 08		 push	 8
  001b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@JHLFCOCA@No?5voice?5can?5be?5assigned?5to?5more@
  001bd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001c2	83 c4 08	 add	 esp, 8
$L38248:

; 8949 :         }
; 8950 : 
; 8951 :         if(pdssd->lpwfxFormat)

  001c5	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  001c8	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  001cc	0f 84 90 00 00
	00		 je	 $L38249

; 8952 :         {
; 8953 :             if(pdssd->lpMixBins->dwMixBinCount % pdssd->lpwfxFormat->nChannels)

  001d2	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  001d5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001d8	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  001db	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001de	0f b7 70 02	 movzx	 esi, WORD PTR [eax+2]
  001e2	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e4	33 d2		 xor	 edx, edx
  001e6	f7 f6		 div	 esi
  001e8	85 d2		 test	 edx, edx
  001ea	74 2d		 je	 SHORT $L38250

; 8954 :             {
; 8955 :                 DPF_ERROR("The mixbin count must be a multiple of the channel count");

  001ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  001f6	68 fb 22 00 00	 push	 8955			; 000022fbH
  001fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00200	6a 01		 push	 1
  00202	6a 09		 push	 9
  00204	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00209	83 c4 18	 add	 esp, 24			; 00000018H
  0020c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@NDMJBELB@The?5mixbin?5count?5must?5be?5a?5multi@
  00211	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00216	83 c4 04	 add	 esp, 4
$L38250:

; 8956 :             }
; 8957 : 
; 8958 :             if(WAVE_FORMAT_EXTENSIBLE == pdssd->lpwfxFormat->wFormatTag)

  00219	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  0021c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0021f	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00222	3d fe ff 00 00	 cmp	 eax, 65534		; 0000fffeH
  00227	75 39		 jne	 SHORT $L38249

; 8959 :             {
; 8960 :                 if(((LPCWAVEFORMATEXTENSIBLE)pdssd->lpwfxFormat)->dwChannelMask)

  00229	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  0022c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0022f	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00233	74 2d		 je	 SHORT $L38249

; 8961 :                 {
; 8962 :                     DPF_WARNING("Specifying mixbins will override the channel mask specified in the format");

  00235	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0023a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  0023f	68 02 23 00 00	 push	 8962			; 00002302H
  00244	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00249	6a 03		 push	 3
  0024b	6a 09		 push	 9
  0024d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00252	83 c4 18	 add	 esp, 24			; 00000018H
  00255	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EK@MJHAJPJB@Specifying?5mixbins?5will?5override@
  0025a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0025f	83 c4 04	 add	 esp, 4
$L38249:

; 8963 :                 }
; 8964 :             }
; 8965 :         }
; 8966 : 
; 8967 :         for(i = 0; i < pdssd->lpMixBins->dwMixBinCount; i++)

  00262	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00269	eb 09		 jmp	 SHORT $L38254
$L38255:
  0026b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0026e	83 c0 01	 add	 eax, 1
  00271	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L38254:
  00274	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  00277	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0027a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0027d	3b 02		 cmp	 eax, DWORD PTR [edx]
  0027f	0f 83 83 00 00
	00		 jae	 $L38256

; 8968 :         {
; 8969 :             if(pdssd->lpMixBins->lpMixBinVolumePairs[i].dwMixBin > DSMIXBIN_LAST)

  00285	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  00288	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0028b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0028e	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00291	83 3c c8 1f	 cmp	 DWORD PTR [eax+ecx*8], 31 ; 0000001fH
  00295	76 2d		 jbe	 SHORT $L38257

; 8970 :             {
; 8971 :                 DPF_ERROR("Specified an invalid mixbin");

  00297	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0029c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  002a1	68 0b 23 00 00	 push	 8971			; 0000230bH
  002a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002ab	6a 01		 push	 1
  002ad	6a 09		 push	 9
  002af	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002b4	83 c4 18	 add	 esp, 24			; 00000018H
  002b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IOBMOJLJ@Specified?5an?5invalid?5mixbin?$AA@
  002bc	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002c1	83 c4 04	 add	 esp, 4
$L38257:

; 8972 :             }
; 8973 : 
; 8974 :             if(DSMIXBIN_SUBMIX == pdssd->lpMixBins->lpMixBinVolumePairs[i].dwMixBin)

  002c4	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  002c7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002ca	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002cd	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  002d0	83 3c d1 1f	 cmp	 DWORD PTR [ecx+edx*8], 31 ; 0000001fH
  002d4	75 2d		 jne	 SHORT $L38258

; 8975 :             {
; 8976 :                 DPF_ERROR("Don't assign a voice to DSMIXBIN_SUBMIX.  Instead, call SetOutputBuffer");

  002d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  002db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  002e0	68 10 23 00 00	 push	 8976			; 00002310H
  002e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  002ea	6a 01		 push	 1
  002ec	6a 09		 push	 9
  002ee	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002f3	83 c4 18	 add	 esp, 24			; 00000018H
  002f6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@PCDOEANA@Don?8t?5assign?5a?5voice?5to?5DSMIXBIN@
  002fb	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00300	83 c4 04	 add	 esp, 4
$L38258:

; 8977 :             }
; 8978 :         }

  00303	e9 63 ff ff ff	 jmp	 $L38255
$L38256:

; 8979 : 
; 8980 :         if(pdssd->dwFlags & DSBCAPS_CTRL3D)

  00308	8b 45 0c	 mov	 eax, DWORD PTR _pdssd$[ebp]
  0030b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030d	83 e1 10	 and	 ecx, 16			; 00000010H
  00310	85 c9		 test	 ecx, ecx
  00312	0f 84 a6 00 00
	00		 je	 $L38247

; 8981 :         {
; 8982 :             if(pdssd->lpMixBins->dwMixBinCount < DirectSoundRequiredMixBins_3D.dwMixBinCount)

  00318	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  0031b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0031e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00320	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _DirectSoundRequiredMixBins_3D
  00326	73 2d		 jae	 SHORT $L38260

; 8983 :             {
; 8984 :                 DPF_ERROR("MixBin count doesn't include enough mixbins to hold all required for 3D");

  00328	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0032d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  00332	68 18 23 00 00	 push	 8984			; 00002318H
  00337	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0033c	6a 01		 push	 1
  0033e	6a 09		 push	 9
  00340	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00345	83 c4 18	 add	 esp, 24			; 00000018H
  00348	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@MJPKEPAI@MixBin?5count?5doesn?8t?5include?5eno@
  0034d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00352	83 c4 04	 add	 esp, 4
$L38260:

; 8985 :             }
; 8986 :             
; 8987 :             for(i = 0; i < DirectSoundRequiredMixBins_3D.dwMixBinCount; i++)

  00355	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0035c	eb 09		 jmp	 SHORT $L38261
$L38262:
  0035e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00361	83 c2 01	 add	 edx, 1
  00364	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$L38261:
  00367	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0036a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _DirectSoundRequiredMixBins_3D
  00370	73 4c		 jae	 SHORT $L38247

; 8988 :             {
; 8989 :                 if(pdssd->lpMixBins->lpMixBinVolumePairs[i].dwMixBin != DirectSoundRequiredMixBins_3D.lpMixBinVolumePairs[i].dwMixBin)

  00372	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  00375	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00378	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0037b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0037e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00381	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR _DirectSoundRequiredMixBins_3D+4
  00387	8b 04 c8	 mov	 eax, DWORD PTR [eax+ecx*8]
  0038a	3b 04 d6	 cmp	 eax, DWORD PTR [esi+edx*8]
  0038d	74 2d		 je	 SHORT $L38264

; 8990 :                 {
; 8991 :                     DPF_ERROR("MixBin array does not include the required 3D bins");

  0038f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00394	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  00399	68 1f 23 00 00	 push	 8991			; 0000231fH
  0039e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  003a3	6a 01		 push	 1
  003a5	6a 09		 push	 9
  003a7	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  003ac	83 c4 18	 add	 esp, 24			; 00000018H
  003af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@EJEOPAOD@MixBin?5array?5does?5not?5include?5th@
  003b4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003b9	83 c4 04	 add	 esp, 4
$L38264:

; 8992 :                 }
; 8993 :             }

  003bc	eb a0		 jmp	 SHORT $L38262
$L38247:

; 8994 :         }
; 8995 :     }
; 8996 : 
; 8997 :     if(!pdssd->dwMaxAttachedPackets)

  003be	8b 4d 0c	 mov	 ecx, DWORD PTR _pdssd$[ebp]
  003c1	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  003c5	75 2d		 jne	 SHORT $L38265

; 8998 :     {
; 8999 :         DPF_ERROR("dwMaxAttachedPackets must be at least 1");

  003c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  003cc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@LPELFBJP@CDirectSoundStream?3?3Initialize?$AA@
  003d1	68 27 23 00 00	 push	 8999			; 00002327H
  003d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  003db	6a 01		 push	 1
  003dd	6a 09		 push	 9
  003df	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  003e4	83 c4 18	 add	 esp, 24			; 00000018H
  003e7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@DAKNOCIC@dwMaxAttachedPackets?5must?5be?5at?5@
  003ec	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  003f1	83 c4 04	 add	 esp, 4
$L38265:

; 9000 :     }
; 9001 : 
; 9002 : #endif // VALIDATE_PARAMETERS
; 9003 : 
; 9004 :     //
; 9005 :     // Create the settings object
; 9006 :     //
; 9007 : 
; 9008 :     hr = HRFROMP(m_pSettings = NEW(CDirectSoundStreamSettings));

  003f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@HFDDPKAK@CDirectSoundStreamSettings?$AA@
  003f9	68 30 23 00 00	 push	 9008			; 00002330H
  003fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00403	68 c4 00 00 00	 push	 196			; 000000c4H
  00408	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0040d	83 c4 10	 add	 esp, 16			; 00000010H
  00410	89 45 f4	 mov	 DWORD PTR $T40780[ebp], eax
  00413	83 7d f4 00	 cmp	 DWORD PTR $T40780[ebp], 0
  00417	74 0d		 je	 SHORT $L40781
  00419	8b 4d f4	 mov	 ecx, DWORD PTR $T40780[ebp]
  0041c	e8 00 00 00 00	 call	 ??0CDirectSoundStreamSettings@DirectSound@@QAE@XZ ; DirectSound::CDirectSoundStreamSettings::CDirectSoundStreamSettings
  00421	89 45 ec	 mov	 DWORD PTR tv276[ebp], eax
  00424	eb 07		 jmp	 SHORT $L40782
$L40781:
  00426	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv276[ebp], 0
$L40782:
  0042d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00430	8b 45 ec	 mov	 eax, DWORD PTR tv276[ebp]
  00433	89 42 28	 mov	 DWORD PTR [edx+40], eax
  00436	33 c9		 xor	 ecx, ecx
  00438	83 7d ec 00	 cmp	 DWORD PTR tv276[ebp], 0
  0043c	0f 95 c1	 setne	 cl
  0043f	49		 dec	 ecx
  00440	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00446	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 9009 : 
; 9010 :     if(SUCCEEDED(hr))

  00449	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0044d	7c 12		 jl	 SHORT $L38273

; 9011 :     {
; 9012 :         hr = m_pSettings->Initialize(pdssd);

  0044f	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  00452	52		 push	 edx
  00453	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00456	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00459	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundStreamSettings@DirectSound@@QAEJPBU_DSSTREAMDESC@@@Z ; DirectSound::CDirectSoundStreamSettings::Initialize
  0045e	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L38273:

; 9013 :     }
; 9014 : 
; 9015 :     //
; 9016 :     // Create the implementation object
; 9017 :     //
; 9018 :     
; 9019 :     if(SUCCEEDED(hr))

  00461	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00465	7c 66		 jl	 SHORT $L38275

; 9020 :     {
; 9021 :         hr = HRFROMP(m_pStream = NEW(CMcpxStream(m_pDirectSound->m_pDevice, m_pSettings)));

  00467	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@HMPJBIGK@CMcpxStream?$CIm_pDirectSound?9?$DOm_pD@
  0046c	68 3d 23 00 00	 push	 9021			; 0000233dH
  00471	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00476	68 a8 01 00 00	 push	 424			; 000001a8H
  0047b	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00480	83 c4 10	 add	 esp, 16			; 00000010H
  00483	89 45 f0	 mov	 DWORD PTR $T40783[ebp], eax
  00486	83 7d f0 00	 cmp	 DWORD PTR $T40783[ebp], 0
  0048a	74 1e		 je	 SHORT $L40784
  0048c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0048f	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00492	52		 push	 edx
  00493	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00496	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00499	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0049c	52		 push	 edx
  0049d	8b 4d f0	 mov	 ecx, DWORD PTR $T40783[ebp]
  004a0	e8 00 00 00 00	 call	 ??0CMcpxStream@DirectSound@@QAE@PAVCMcpxAPU@1@PAVCDirectSoundStreamSettings@1@@Z ; DirectSound::CMcpxStream::CMcpxStream
  004a5	89 45 e8	 mov	 DWORD PTR tv300[ebp], eax
  004a8	eb 07		 jmp	 SHORT $L40785
$L40784:
  004aa	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv300[ebp], 0
$L40785:
  004b1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  004b4	8b 4d e8	 mov	 ecx, DWORD PTR tv300[ebp]
  004b7	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  004ba	33 d2		 xor	 edx, edx
  004bc	83 7d e8 00	 cmp	 DWORD PTR tv300[ebp], 0
  004c0	0f 95 c2	 setne	 dl
  004c3	4a		 dec	 edx
  004c4	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  004ca	89 55 f8	 mov	 DWORD PTR _hr$[ebp], edx
$L38275:

; 9022 :     }
; 9023 : 
; 9024 :     if(SUCCEEDED(hr))

  004cd	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  004d1	7c 0e		 jl	 SHORT $L38282

; 9025 :     {
; 9026 :         hr = m_pStream->Initialize();

  004d3	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  004d6	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  004d9	e8 00 00 00 00	 call	 ?Initialize@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Initialize
  004de	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L38282:

; 9027 :     }
; 9028 : 
; 9029 :     //
; 9030 :     // Initialize the base class
; 9031 :     //
; 9032 : 
; 9033 :     if(SUCCEEDED(hr))

  004e1	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  004e5	7c 1a		 jl	 SHORT $L38284

; 9034 :     {
; 9035 :         CDirectSoundVoice::Initialize(m_pStream, m_pSettings);

  004e7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  004ea	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  004ed	52		 push	 edx
  004ee	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  004f1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  004f4	51		 push	 ecx
  004f5	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  004f8	83 c2 0c	 add	 edx, 12			; 0000000cH
  004fb	52		 push	 edx
  004fc	e8 00 00 00 00	 call	 ?Initialize@CDirectSoundVoice@DirectSound@@QAGXPAVCMcpxVoiceClient@2@PAVCDirectSoundVoiceSettings@2@@Z ; DirectSound::CDirectSoundVoice::Initialize
$L38284:

; 9036 :     }
; 9037 : 
; 9038 :     DPF_LEAVE_HRESULT(hr);
; 9039 : 
; 9040 :     return hr;

  00501	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 9041 : }

  00504	5e		 pop	 esi
  00505	8b e5		 mov	 esp, ebp
  00507	5d		 pop	 ebp
  00508	c2 08 00	 ret	 8
?Initialize@CDirectSoundStream@DirectSound@@QAGJPBU_DSSTREAMDESC@@@Z ENDP ; DirectSound::CDirectSoundStream::Initialize
DSOUND	ENDS
PUBLIC	?GetLowWatermark@CMcpxStream@DirectSound@@QAEKXZ ; DirectSound::CMcpxStream::GetLowWatermark
PUBLIC	??_C@_0BM@ODHLADDF@CDirectSoundStream?3?3GetInfo?$AA@ ; `string'
PUBLIC	??_C@_0BO@FAPKLLAJ@No?5XMEDIAINFO?5buffer?5supplied?$AA@ ; `string'
;	COMDAT ??_C@_0BM@ODHLADDF@CDirectSoundStream?3?3GetInfo?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@ODHLADDF@CDirectSoundStream?3?3GetInfo?$AA@ DB 'CDirectSoundStr'
	DB	'eam::GetInfo', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@FAPKLLAJ@No?5XMEDIAINFO?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@FAPKLLAJ@No?5XMEDIAINFO?5buffer?5supplied?$AA@ DB 'No XMEDIAINF'
	DB	'O buffer supplied', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetInfo@CDirectSoundStream@DirectSound@@UAGJPAU_XMEDIAINFO@@@Z
DSOUND	SEGMENT
$T40790 = -12
$T40789 = -8
___AutoLock$ = -4
_this$ = 8
_pInfo$ = 12
?GetInfo@CDirectSoundStream@DirectSound@@UAGJPAU_XMEDIAINFO@@@Z PROC NEAR ; DirectSound::CDirectSoundStream::GetInfo, COMDAT

; 9067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 9068 :     DPF_ENTER();
; 9069 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L38290
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@ODHLADDF@CDirectSoundStream?3?3GetInfo?$AA@
  00021	68 6d 23 00 00	 push	 9069			; 0000236dH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR $T40789[ebp], -2147467259 ; 80004005H
  0004b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f8	 mov	 eax, DWORD PTR $T40789[ebp]
  00056	e9 92 00 00 00	 jmp	 $L38288
$L38290:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@ODHLADDF@CDirectSoundStream?3?3GetInfo?$AA@
  00060	68 6d 23 00 00	 push	 9069			; 0000236dH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 04	 add	 ecx, 4
  00070	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9070 : 
; 9071 : #ifdef VALIDATE_PARAMETERS
; 9072 : 
; 9073 :     if(!pInfo)

  00075	83 7d 0c 00	 cmp	 DWORD PTR _pInfo$[ebp], 0
  00079	75 2d		 jne	 SHORT $L38294

; 9074 :     {
; 9075 :         DPF_ERROR("No XMEDIAINFO buffer supplied");

  0007b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@ODHLADDF@CDirectSoundStream?3?3GetInfo?$AA@
  00085	68 73 23 00 00	 push	 9075			; 00002373H
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008f	6a 01		 push	 1
  00091	6a 09		 push	 9
  00093	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00098	83 c4 18	 add	 esp, 24			; 00000018H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@FAPKLLAJ@No?5XMEDIAINFO?5buffer?5supplied?$AA@
  000a0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a5	83 c4 04	 add	 esp, 4
$L38294:

; 9076 :     }
; 9077 : 
; 9078 : #endif // VALIDATE_PARAMETERS
; 9079 : 
; 9080 :     //
; 9081 :     // Flags are easy
; 9082 :     //
; 9083 :     
; 9084 :     pInfo->dwFlags = XMO_STREAMF_FIXED_SAMPLE_SIZE | XMO_STREAMF_INPUT_ASYNC;

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _pInfo$[ebp]
  000ab	c7 00 05 00 00
	00		 mov	 DWORD PTR [eax], 5

; 9085 : 
; 9086 :     //
; 9087 :     // The mixer will break up if you queue up less than the mix buffer size
; 9088 :     //
; 9089 : 
; 9090 :     pInfo->dwMaxLookahead = m_pStream->GetLowWatermark();

  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  000b7	e8 00 00 00 00	 call	 ?GetLowWatermark@CMcpxStream@DirectSound@@QAEKXZ ; DirectSound::CMcpxStream::GetLowWatermark
  000bc	8b 55 0c	 mov	 edx, DWORD PTR _pInfo$[ebp]
  000bf	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 9091 : 
; 9092 :     //
; 9093 :     // Input size is just sample-aligment, since that's the smallest amount of
; 9094 :     // data we require to process.
; 9095 :     //
; 9096 : 
; 9097 :     pInfo->dwInputSize = m_pSettings->m_fmt.nBlockAlign;

  000c2	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000c8	8b 55 0c	 mov	 edx, DWORD PTR _pInfo$[ebp]
  000cb	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000ce	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 9098 : 
; 9099 :     //
; 9100 :     // There is no output
; 9101 :     //
; 9102 : 
; 9103 :     pInfo->dwOutputSize = 0;

  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  000d4	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 9104 : 
; 9105 :     DPF_LEAVE_HRESULT(DS_OK);
; 9106 : 
; 9107 :     return DS_OK;

  000db	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T40790[ebp], 0
  000e2	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000e5	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000ea	8b 45 f4	 mov	 eax, DWORD PTR $T40790[ebp]
$L38288:

; 9108 : }

  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
?GetInfo@CDirectSoundStream@DirectSound@@UAGJPAU_XMEDIAINFO@@@Z ENDP ; DirectSound::CDirectSoundStream::GetInfo
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\dsound\mcpstrm.h
DSOUND	ENDS
;	COMDAT ?GetLowWatermark@CMcpxStream@DirectSound@@QAEKXZ
DSOUND	SEGMENT
tv93 = -8
_this$ = -4
?GetLowWatermark@CMcpxStream@DirectSound@@QAEKXZ PROC NEAR ; DirectSound::CMcpxStream::GetLowWatermark, COMDAT
; _this$ = ecx

; 142  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  :         return max((m_pSettings->m_fmt.nChannels * (DWORD)m_pSettings->m_fmt.wBitsPerSample / 8) * 32, m_pSettings->m_fmt.nBlockAlign) * 2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00012	0f b6 51 0e	 movzx	 edx, BYTE PTR [ecx+14]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0001f	0f b6 41 0f	 movzx	 eax, BYTE PTR [ecx+15]
  00023	0f af d0	 imul	 edx, eax
  00026	c1 ea 03	 shr	 edx, 3
  00029	c1 e2 05	 shl	 edx, 5
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 81 90 00 00
	00		 mov	 eax, DWORD PTR [ecx+144]
  00035	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  00038	76 28		 jbe	 SHORT $L40794
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00043	0f b6 42 0e	 movzx	 eax, BYTE PTR [edx+14]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  00050	0f b6 4a 0f	 movzx	 ecx, BYTE PTR [edx+15]
  00054	0f af c1	 imul	 eax, ecx
  00057	c1 e8 03	 shr	 eax, 3
  0005a	c1 e0 05	 shl	 eax, 5
  0005d	89 45 f8	 mov	 DWORD PTR tv93[ebp], eax
  00060	eb 0f		 jmp	 SHORT $L40795
$L40794:
  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0006b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006e	89 4d f8	 mov	 DWORD PTR tv93[ebp], ecx
$L40795:
  00071	8b 45 f8	 mov	 eax, DWORD PTR tv93[ebp]
  00074	d1 e0		 shl	 eax, 1

; 144  :     }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?GetLowWatermark@CMcpxStream@DirectSound@@QAEKXZ ENDP	; DirectSound::CMcpxStream::GetLowWatermark
DSOUND	ENDS
PUBLIC	??_C@_0CC@HBPPFBBE@CDirectSoundStream?3?3Discontinuit@ ; `string'
EXTRN	?Discontinuity@CMcpxStream@DirectSound@@QAEJXZ:NEAR ; DirectSound::CMcpxStream::Discontinuity
;	COMDAT ??_C@_0CC@HBPPFBBE@CDirectSoundStream?3?3Discontinuit@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.cpp
DSOUND_RD	SEGMENT
??_C@_0CC@HBPPFBBE@CDirectSoundStream?3?3Discontinuit@ DB 'CDirectSoundSt'
	DB	'ream::Discontinuity', 00H			; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Discontinuity@CDirectSoundStream@DirectSound@@UAGJXZ
DSOUND	SEGMENT
$T40800 = -16
$T40799 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
?Discontinuity@CDirectSoundStream@DirectSound@@UAGJXZ PROC NEAR ; DirectSound::CDirectSoundStream::Discontinuity, COMDAT

; 9134 : {                                           

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 9135 :     HRESULT                 hr;
; 9136 :     
; 9137 :     DPF_ENTER();
; 9138 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 41		 je	 SHORT $L38304
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@HBPPFBBE@CDirectSoundStream?3?3Discontinuit@
  00021	68 b2 23 00 00	 push	 9138			; 000023b2H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40799[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40799[ebp]
  00056	eb 39		 jmp	 SHORT $L38301
$L38304:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@HBPPFBBE@CDirectSoundStream?3?3Discontinuit@
  0005d	68 b2 23 00 00	 push	 9138			; 000023b2H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 04	 add	 ecx, 4
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9139 :     
; 9140 :     hr = m_pStream->Discontinuity();

  00072	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00078	e8 00 00 00 00	 call	 ?Discontinuity@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Discontinuity
  0007d	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 9141 : 
; 9142 :     DPF_LEAVE_HRESULT(hr);
; 9143 : 
; 9144 :     return hr;

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00083	89 4d f0	 mov	 DWORD PTR $T40800[ebp], ecx
  00086	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f0	 mov	 eax, DWORD PTR $T40800[ebp]
$L38301:

; 9145 : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?Discontinuity@CDirectSoundStream@DirectSound@@UAGJXZ ENDP ; DirectSound::CDirectSoundStream::Discontinuity
DSOUND	ENDS
PUBLIC	??_C@_0BK@BKOHCKKE@CDirectSoundStream?3?3Flush?$AA@ ; `string'
EXTRN	?Flush@CMcpxStream@DirectSound@@QAEJXZ:NEAR	; DirectSound::CMcpxStream::Flush
;	COMDAT ??_C@_0BK@BKOHCKKE@CDirectSoundStream?3?3Flush?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@BKOHCKKE@CDirectSoundStream?3?3Flush?$AA@ DB 'CDirectSoundStrea'
	DB	'm::Flush', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Flush@CDirectSoundStream@DirectSound@@UAGJXZ
DSOUND	SEGMENT
$T40805 = -16
$T40804 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
?Flush@CDirectSoundStream@DirectSound@@UAGJXZ PROC NEAR	; DirectSound::CDirectSoundStream::Flush, COMDAT

; 9171 : {                                           

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 9172 :     HRESULT                 hr;
; 9173 :     
; 9174 :     DPF_ENTER();
; 9175 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 41		 je	 SHORT $L38315
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@BKOHCKKE@CDirectSoundStream?3?3Flush?$AA@
  00021	68 d7 23 00 00	 push	 9175			; 000023d7H
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40804[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40804[ebp]
  00056	eb 39		 jmp	 SHORT $L38312
$L38315:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@BKOHCKKE@CDirectSoundStream?3?3Flush?$AA@
  0005d	68 d7 23 00 00	 push	 9175			; 000023d7H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 04	 add	 ecx, 4
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9176 :     
; 9177 :     hr = m_pStream->Flush();

  00072	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00078	e8 00 00 00 00	 call	 ?Flush@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Flush
  0007d	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 9178 : 
; 9179 :     DPF_LEAVE_HRESULT(hr);
; 9180 : 
; 9181 :     return hr;

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00083	89 4d f0	 mov	 DWORD PTR $T40805[ebp], ecx
  00086	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0008e	8b 45 f0	 mov	 eax, DWORD PTR $T40805[ebp]
$L38312:

; 9182 : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?Flush@CDirectSoundStream@DirectSound@@UAGJXZ ENDP	; DirectSound::CDirectSoundStream::Flush
DSOUND	ENDS
PUBLIC	??_C@_0BO@DJMLBOAK@CDirectSoundStream?3?3GetStatus?$AA@ ; `string'
PUBLIC	??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@ ; `string'
EXTRN	?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z:NEAR ; DirectSound::CMcpxStream::GetStatus
;	COMDAT ??_C@_0BO@DJMLBOAK@CDirectSoundStream?3?3GetStatus?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@DJMLBOAK@CDirectSoundStream?3?3GetStatus?$AA@ DB 'CDirectSoundS'
	DB	'tream::GetStatus', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@ DB 'Status buffer n'
	DB	'ot supplied', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?GetStatus@CDirectSoundStream@DirectSound@@UAGJPAK@Z
DSOUND	SEGMENT
$T40810 = -16
$T40809 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pdwStatus$ = 12
?GetStatus@CDirectSoundStream@DirectSound@@UAGJPAK@Z PROC NEAR ; DirectSound::CDirectSoundStream::GetStatus, COMDAT

; 9208 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 9209 :     HRESULT                 hr;
; 9210 :     
; 9211 :     DPF_ENTER();
; 9212 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 41		 je	 SHORT $L38326
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DJMLBOAK@CDirectSoundStream?3?3GetStatus?$AA@
  00021	68 fc 23 00 00	 push	 9212			; 000023fcH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40809[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40809[ebp]
  00056	eb 70		 jmp	 SHORT $L38323
$L38326:
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DJMLBOAK@CDirectSoundStream?3?3GetStatus?$AA@
  0005d	68 fc 23 00 00	 push	 9212			; 000023fcH
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 04	 add	 ecx, 4
  0006d	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9213 : 
; 9214 : #ifdef VALIDATE_PARAMETERS
; 9215 : 
; 9216 :     if(!pdwStatus)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _pdwStatus$[ebp], 0
  00076	75 2d		 jne	 SHORT $L38330

; 9217 :     {
; 9218 :         DPF_ERROR("Status buffer not supplied");

  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@DJMLBOAK@CDirectSoundStream?3?3GetStatus?$AA@
  00082	68 02 24 00 00	 push	 9218			; 00002402H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008c	6a 01		 push	 1
  0008e	6a 09		 push	 9
  00090	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00095	83 c4 18	 add	 esp, 24			; 00000018H
  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@FHIKNDCM@Status?5buffer?5not?5supplied?$AA@
  0009d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a2	83 c4 04	 add	 esp, 4
$L38330:

; 9219 :     }
; 9220 : 
; 9221 : #endif // VALIDATE_PARAMETERS
; 9222 : 
; 9223 :     hr = m_pStream->GetStatus(pdwStatus);

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  000af	e8 00 00 00 00	 call	 ?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z ; DirectSound::CMcpxStream::GetStatus
  000b4	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 9224 : 
; 9225 :     DPF_LEAVE_HRESULT(hr);
; 9226 : 
; 9227 :     return hr;

  000b7	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  000ba	89 55 f0	 mov	 DWORD PTR $T40810[ebp], edx
  000bd	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000c0	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000c5	8b 45 f0	 mov	 eax, DWORD PTR $T40810[ebp]
$L38323:

; 9228 : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
?GetStatus@CDirectSoundStream@DirectSound@@UAGJPAK@Z ENDP ; DirectSound::CDirectSoundStream::GetStatus
DSOUND	ENDS
PUBLIC	??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@	; `string'
PUBLIC	??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@ ; `string'
PUBLIC	??_C@_0DE@MFMIGPGP@Timestamps?5are?5not?5supported?5on?5@ ; `string'
PUBLIC	??_C@_0EP@IPABPLMJ@DirectSound?5streams?5are?5input?5on@ ; `string'
PUBLIC	??_C@_0CM@PFPDLHIF@The?5stream?5is?5not?5ready?5to?5accep@ ; `string'
EXTRN	?SubmitPacket@CMcpxStream@DirectSound@@QAEJABU_XMEDIAPACKET@@@Z:NEAR ; DirectSound::CMcpxStream::SubmitPacket
;	COMDAT ??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@ DB 'CDirectSoundStr'
	DB	'eam::Process', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@ DB 'No input buffer s'
	DB	'upplied', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@
DSOUND_RD	SEGMENT
??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@ DB 'No input da'
	DB	'ta buffer supplied', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@
DSOUND_RD	SEGMENT
??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@ DB 'No input buffer size', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@
DSOUND_RD	SEGMENT
??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@ DB 'Input buffe'
	DB	'r size not block-aligned', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0DE@MFMIGPGP@Timestamps?5are?5not?5supported?5on?5@
DSOUND_RD	SEGMENT
??_C@_0DE@MFMIGPGP@Timestamps?5are?5not?5supported?5on?5@ DB 'Timestamps '
	DB	'are not supported on DirectSound streams', 00H ; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0EP@IPABPLMJ@DirectSound?5streams?5are?5input?5on@
DSOUND_RD	SEGMENT
??_C@_0EP@IPABPLMJ@DirectSound?5streams?5are?5input?5on@ DB 'DirectSound '
	DB	'streams are input only.  No destination packet should be supp'
	DB	'lied.', 00H					; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CM@PFPDLHIF@The?5stream?5is?5not?5ready?5to?5accep@
DSOUND_RD	SEGMENT
??_C@_0CM@PFPDLHIF@The?5stream?5is?5not?5ready?5to?5accep@ DB 'The stream'
	DB	' is not ready to accept more data', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Process@CDirectSoundStream@DirectSound@@UAGJPBU_XMEDIAPACKET@@0@Z
DSOUND	SEGMENT
tv204 = -24
$T40815 = -20
$T40814 = -16
___AutoLock$ = -12
_hr$ = -8
_dwStatus$ = -4
_this$ = 8
_pxmbSource$ = 12
_pxmbDest$ = 16
?Process@CDirectSoundStream@DirectSound@@UAGJPBU_XMEDIAPACKET@@0@Z PROC NEAR ; DirectSound::CDirectSoundStream::Process, COMDAT

; 9256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 9257 :     DWORD                   dwStatus;
; 9258 :     HRESULT                 hr;
; 9259 :     
; 9260 :     DPF_ENTER();
; 9261 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L38341
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  00021	68 2d 24 00 00	 push	 9261			; 0000242dH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T40814[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f0	 mov	 eax, DWORD PTR $T40814[ebp]
  00056	e9 fa 01 00 00	 jmp	 $L38337
$L38341:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  00060	68 2d 24 00 00	 push	 9261			; 0000242dH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 04	 add	 ecx, 4
  00070	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9262 : 
; 9263 : #ifdef VALIDATE_PARAMETERS
; 9264 : 
; 9265 :     if(!pxmbSource)

  00075	83 7d 0c 00	 cmp	 DWORD PTR _pxmbSource$[ebp], 0
  00079	75 2d		 jne	 SHORT $L38345

; 9266 :     {
; 9267 :         DPF_ERROR("No input buffer supplied");

  0007b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00080	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  00085	68 33 24 00 00	 push	 9267			; 00002433H
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0008f	6a 01		 push	 1
  00091	6a 09		 push	 9
  00093	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00098	83 c4 18	 add	 esp, 24			; 00000018H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@HNOKMBNN@No?5input?5buffer?5supplied?$AA@
  000a0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a5	83 c4 04	 add	 esp, 4
$L38345:

; 9268 :     }
; 9269 : 
; 9270 :     if(!pxmbSource->pvBuffer)

  000a8	8b 45 0c	 mov	 eax, DWORD PTR _pxmbSource$[ebp]
  000ab	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ae	75 2d		 jne	 SHORT $L38347

; 9271 :     {
; 9272 :         DPF_ERROR("No input data buffer supplied");

  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  000ba	68 38 24 00 00	 push	 9272			; 00002438H
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000c4	6a 01		 push	 1
  000c6	6a 09		 push	 9
  000c8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000cd	83 c4 18	 add	 esp, 24			; 00000018H
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IGGFGKFP@No?5input?5data?5buffer?5supplied?$AA@
  000d5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000da	83 c4 04	 add	 esp, 4
$L38347:

; 9273 :     }
; 9274 : 
; 9275 :     if(!pxmbSource->dwMaxSize)

  000dd	8b 4d 0c	 mov	 ecx, DWORD PTR _pxmbSource$[ebp]
  000e0	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  000e4	75 2d		 jne	 SHORT $L38349

; 9276 :     {
; 9277 :         DPF_ERROR("No input buffer size");

  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  000f0	68 3d 24 00 00	 push	 9277			; 0000243dH
  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000fa	6a 01		 push	 1
  000fc	6a 09		 push	 9
  000fe	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00103	83 c4 18	 add	 esp, 24			; 00000018H
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IOLPOIIL@No?5input?5buffer?5size?$AA@
  0010b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00110	83 c4 04	 add	 esp, 4
$L38349:

; 9278 :     }
; 9279 : 
; 9280 :     if(pxmbSource->dwMaxSize % m_pSettings->m_fmt.nBlockAlign)

  00113	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00116	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00119	8b 55 0c	 mov	 edx, DWORD PTR _pxmbSource$[ebp]
  0011c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0011f	33 d2		 xor	 edx, edx
  00121	f7 71 14	 div	 DWORD PTR [ecx+20]
  00124	85 d2		 test	 edx, edx
  00126	74 2d		 je	 SHORT $L38351

; 9281 :     {
; 9282 :         DPF_ERROR("Input buffer size not block-aligned");

  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0012d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  00132	68 42 24 00 00	 push	 9282			; 00002442H
  00137	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0013c	6a 01		 push	 1
  0013e	6a 09		 push	 9
  00140	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00145	83 c4 18	 add	 esp, 24			; 00000018H
  00148	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@NECMEEBH@Input?5buffer?5size?5not?5block?9alig@
  0014d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00152	83 c4 04	 add	 esp, 4
$L38351:

; 9283 :     }
; 9284 : 
; 9285 :     if(pxmbSource->prtTimestamp)

  00155	8b 45 0c	 mov	 eax, DWORD PTR _pxmbSource$[ebp]
  00158	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0015c	74 45		 je	 SHORT $L38353

; 9286 :     {
; 9287 :         if(*pxmbSource->prtTimestamp)

  0015e	8b 4d 0c	 mov	 ecx, DWORD PTR _pxmbSource$[ebp]
  00161	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00164	89 55 e8	 mov	 DWORD PTR tv204[ebp], edx
  00167	8b 45 e8	 mov	 eax, DWORD PTR tv204[ebp]
  0016a	8b 4d e8	 mov	 ecx, DWORD PTR tv204[ebp]
  0016d	8b 10		 mov	 edx, DWORD PTR [eax]
  0016f	0b 51 04	 or	 edx, DWORD PTR [ecx+4]
  00172	85 d2		 test	 edx, edx
  00174	74 2d		 je	 SHORT $L38353

; 9288 :         {
; 9289 :             DPF_ERROR("Timestamps are not supported on DirectSound streams");

  00176	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0017b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  00180	68 49 24 00 00	 push	 9289			; 00002449H
  00185	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0018a	6a 01		 push	 1
  0018c	6a 09		 push	 9
  0018e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00193	83 c4 18	 add	 esp, 24			; 00000018H
  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DE@MFMIGPGP@Timestamps?5are?5not?5supported?5on?5@
  0019b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a0	83 c4 04	 add	 esp, 4
$L38353:

; 9290 :         }
; 9291 :     }
; 9292 : 
; 9293 :     if(pxmbDest)

  001a3	83 7d 10 00	 cmp	 DWORD PTR _pxmbDest$[ebp], 0
  001a7	74 2d		 je	 SHORT $L38356

; 9294 :     {
; 9295 :         DPF_ERROR("DirectSound streams are input only.  No destination packet should be supplied.");

  001a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  001b3	68 4f 24 00 00	 push	 9295			; 0000244fH
  001b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  001bd	6a 01		 push	 1
  001bf	6a 09		 push	 9
  001c1	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001c6	83 c4 18	 add	 esp, 24			; 00000018H
  001c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EP@IPABPLMJ@DirectSound?5streams?5are?5input?5on@
  001ce	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001d3	83 c4 04	 add	 esp, 4
$L38356:

; 9296 :     }
; 9297 : 
; 9298 : #endif // VALIDATE_PARAMETERS
; 9299 : 
; 9300 :     //
; 9301 :     // Make sure the stream is accepting data
; 9302 :     //
; 9303 : 
; 9304 :     hr = m_pStream->GetStatus(&dwStatus);

  001d6	8d 45 fc	 lea	 eax, DWORD PTR _dwStatus$[ebp]
  001d9	50		 push	 eax
  001da	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  001e0	e8 00 00 00 00	 call	 ?GetStatus@CMcpxStream@DirectSound@@QAEJPAK@Z ; DirectSound::CMcpxStream::GetStatus
  001e5	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 9305 : 
; 9306 :     if(SUCCEEDED(hr) && !(dwStatus & DSSTREAMSTATUS_READY))

  001e8	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ec	7c 3e		 jl	 SHORT $L38359
  001ee	8b 55 fc	 mov	 edx, DWORD PTR _dwStatus$[ebp]
  001f1	83 e2 01	 and	 edx, 1
  001f4	85 d2		 test	 edx, edx
  001f6	75 34		 jne	 SHORT $L38359

; 9307 :     {
; 9308 :         DPF_ERROR("The stream is not ready to accept more data");

  001f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  001fd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@POIHOHHN@CDirectSoundStream?3?3Process?$AA@
  00202	68 5c 24 00 00	 push	 9308			; 0000245cH
  00207	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0020c	6a 01		 push	 1
  0020e	6a 09		 push	 9
  00210	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00215	83 c4 18	 add	 esp, 24			; 00000018H
  00218	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CM@PFPDLHIF@The?5stream?5is?5not?5ready?5to?5accep@
  0021d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00222	83 c4 04	 add	 esp, 4

; 9309 :         hr = DSERR_INVALIDCALL;

  00225	c7 45 f8 32 00
	78 88		 mov	 DWORD PTR _hr$[ebp], -2005401550 ; 88780032H
$L38359:

; 9310 :     }
; 9311 :     
; 9312 :     //
; 9313 :     // Submit the packet to the stream
; 9314 :     //
; 9315 : 
; 9316 :     if(SUCCEEDED(hr))

  0022c	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00230	7c 12		 jl	 SHORT $L38366

; 9317 :     {
; 9318 :         hr = m_pStream->SubmitPacket(*pxmbSource);

  00232	8b 45 0c	 mov	 eax, DWORD PTR _pxmbSource$[ebp]
  00235	50		 push	 eax
  00236	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00239	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  0023c	e8 00 00 00 00	 call	 ?SubmitPacket@CMcpxStream@DirectSound@@QAEJABU_XMEDIAPACKET@@@Z ; DirectSound::CMcpxStream::SubmitPacket
  00241	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L38366:

; 9319 :     }
; 9320 : 
; 9321 :     DPF_LEAVE_HRESULT(hr);
; 9322 : 
; 9323 :     return hr;

  00244	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  00247	89 55 ec	 mov	 DWORD PTR $T40815[ebp], edx
  0024a	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0024d	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00252	8b 45 ec	 mov	 eax, DWORD PTR $T40815[ebp]
$L38337:

; 9324 : }

  00255	8b e5		 mov	 esp, ebp
  00257	5d		 pop	 ebp
  00258	c2 0c 00	 ret	 12			; 0000000cH
?Process@CDirectSoundStream@DirectSound@@UAGJPBU_XMEDIAPACKET@@0@Z ENDP ; DirectSound::CDirectSoundStream::Process
DSOUND	ENDS
PUBLIC	??_C@_0BK@ICFGHBNO@CDirectSoundStream?3?3Pause?$AA@ ; `string'
PUBLIC	??_C@_0BL@MANMHDNL@Invalid?5stream?5pause?5state?$AA@ ; `string'
EXTRN	?Pause@CMcpxStream@DirectSound@@QAEJK@Z:NEAR	; DirectSound::CMcpxStream::Pause
;	COMDAT ??_C@_0BK@ICFGHBNO@CDirectSoundStream?3?3Pause?$AA@
DSOUND_RD	SEGMENT
??_C@_0BK@ICFGHBNO@CDirectSoundStream?3?3Pause?$AA@ DB 'CDirectSoundStrea'
	DB	'm::Pause', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0BL@MANMHDNL@Invalid?5stream?5pause?5state?$AA@
DSOUND_RD	SEGMENT
??_C@_0BL@MANMHDNL@Invalid?5stream?5pause?5state?$AA@ DB 'Invalid stream '
	DB	'pause state', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?Pause@CDirectSoundStream@DirectSound@@QAGJK@Z
DSOUND	SEGMENT
$T40820 = -16
$T40819 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_dwPause$ = 12
?Pause@CDirectSoundStream@DirectSound@@QAGJK@Z PROC NEAR ; DirectSound::CDirectSoundStream::Pause, COMDAT

; 9350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 9351 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 9352 :     
; 9353 :     DPF_ENTER();
; 9354 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 41		 je	 SHORT $L38375
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@ICFGHBNO@CDirectSoundStream?3?3Pause?$AA@
  00028	68 8a 24 00 00	 push	 9354			; 0000248aH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40819[ebp], -2147467259 ; 80004005H
  00052	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f4	 mov	 eax, DWORD PTR $T40819[ebp]
  0005d	eb 76		 jmp	 SHORT $L38371
$L38375:
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@ICFGHBNO@CDirectSoundStream?3?3Pause?$AA@
  00064	68 8a 24 00 00	 push	 9354			; 0000248aH
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 04	 add	 ecx, 4
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9355 : 
; 9356 : #ifdef VALIDATE_PARAMETERS
; 9357 : 
; 9358 :     if((dwPause < DSSTREAMPAUSE_FIRST) || (dwPause > DSSTREAMPAUSE_LAST))

  00079	83 7d 0c 00	 cmp	 DWORD PTR _dwPause$[ebp], 0
  0007d	72 06		 jb	 SHORT $L38380
  0007f	83 7d 0c 01	 cmp	 DWORD PTR _dwPause$[ebp], 1
  00083	76 2d		 jbe	 SHORT $L38379
$L38380:

; 9359 :     {
; 9360 :         DPF_ERROR("Invalid stream pause state");

  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@ICFGHBNO@CDirectSoundStream?3?3Pause?$AA@
  0008f	68 90 24 00 00	 push	 9360			; 00002490H
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00099	6a 01		 push	 1
  0009b	6a 09		 push	 9
  0009d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a2	83 c4 18	 add	 esp, 24			; 00000018H
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MANMHDNL@Invalid?5stream?5pause?5state?$AA@
  000aa	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000af	83 c4 04	 add	 esp, 4
$L38379:

; 9361 :     }
; 9362 : 
; 9363 : #endif // VALIDATE_PARAMETERS
; 9364 : 
; 9365 :     hr = m_pStream->Pause(dwPause);

  000b2	8b 45 0c	 mov	 eax, DWORD PTR _dwPause$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  000bc	e8 00 00 00 00	 call	 ?Pause@CMcpxStream@DirectSound@@QAEJK@Z ; DirectSound::CMcpxStream::Pause
  000c1	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 9366 : 
; 9367 :     DPF_LEAVE_HRESULT(hr);
; 9368 : 
; 9369 :     return hr;

  000c4	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  000c7	89 55 f0	 mov	 DWORD PTR $T40820[ebp], edx
  000ca	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000cd	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000d2	8b 45 f0	 mov	 eax, DWORD PTR $T40820[ebp]
$L38371:

; 9370 : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
?Pause@CDirectSoundStream@DirectSound@@QAGJK@Z ENDP	; DirectSound::CDirectSoundStream::Pause
DSOUND	ENDS
PUBLIC	??_C@_0BM@KJAOJHLI@CDirectSoundStream?3?3PauseEx?$AA@ ; `string'
EXTRN	?Pause@CMcpxStream@DirectSound@@QAEJ_JK@Z:NEAR	; DirectSound::CMcpxStream::Pause
;	COMDAT ??_C@_0BM@KJAOJHLI@CDirectSoundStream?3?3PauseEx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@KJAOJHLI@CDirectSoundStream?3?3PauseEx?$AA@ DB 'CDirectSoundStr'
	DB	'eam::PauseEx', 00H				; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?PauseEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT
$T40825 = -16
$T40824 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_rtTimestamp$ = 12
_dwPause$ = 20
?PauseEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z PROC NEAR ; DirectSound::CDirectSoundStream::PauseEx, COMDAT

; 9398 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 9399 :     HRESULT                 hr  = DS_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 9400 :     
; 9401 :     DPF_ENTER();
; 9402 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  00015	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  0001c	74 41		 je	 SHORT $L38391
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KJAOJHLI@CDirectSoundStream?3?3PauseEx?$AA@
  00028	68 ba 24 00 00	 push	 9402			; 000024baH
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 03		 push	 3
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  00043	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00048	83 c4 04	 add	 esp, 4
  0004b	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40824[ebp], -2147467259 ; 80004005H
  00052	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00055	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0005a	8b 45 f4	 mov	 eax, DWORD PTR $T40824[ebp]
  0005d	eb 7e		 jmp	 SHORT $L38387
$L38391:
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KJAOJHLI@CDirectSoundStream?3?3PauseEx?$AA@
  00064	68 ba 24 00 00	 push	 9402			; 000024baH
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 04	 add	 ecx, 4
  00074	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9403 : 
; 9404 : #ifdef VALIDATE_PARAMETERS
; 9405 : 
; 9406 :     if((dwPause < DSSTREAMPAUSE_FIRST) || (dwPause > DSSTREAMPAUSE_LAST))

  00079	83 7d 14 00	 cmp	 DWORD PTR _dwPause$[ebp], 0
  0007d	72 06		 jb	 SHORT $L38396
  0007f	83 7d 14 01	 cmp	 DWORD PTR _dwPause$[ebp], 1
  00083	76 2d		 jbe	 SHORT $L38395
$L38396:

; 9407 :     {
; 9408 :         DPF_ERROR("Invalid stream pause state");

  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@KJAOJHLI@CDirectSoundStream?3?3PauseEx?$AA@
  0008f	68 c0 24 00 00	 push	 9408			; 000024c0H
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00099	6a 01		 push	 1
  0009b	6a 09		 push	 9
  0009d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a2	83 c4 18	 add	 esp, 24			; 00000018H
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MANMHDNL@Invalid?5stream?5pause?5state?$AA@
  000aa	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000af	83 c4 04	 add	 esp, 4
$L38395:

; 9409 :     }
; 9410 : 
; 9411 : #endif // VALIDATE_PARAMETERS
; 9412 : 
; 9413 :     hr = m_pStream->Pause(rtTimestamp, dwPause);

  000b2	8b 45 14	 mov	 eax, DWORD PTR _dwPause$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 10	 mov	 ecx, DWORD PTR _rtTimestamp$[ebp+4]
  000b9	51		 push	 ecx
  000ba	8b 55 0c	 mov	 edx, DWORD PTR _rtTimestamp$[ebp]
  000bd	52		 push	 edx
  000be	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000c4	e8 00 00 00 00	 call	 ?Pause@CMcpxStream@DirectSound@@QAEJ_JK@Z ; DirectSound::CMcpxStream::Pause
  000c9	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 9414 : 
; 9415 :     DPF_LEAVE_HRESULT(hr);
; 9416 : 
; 9417 :     return hr;

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  000cf	89 4d f0	 mov	 DWORD PTR $T40825[ebp], ecx
  000d2	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000d5	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  000da	8b 45 f0	 mov	 eax, DWORD PTR $T40825[ebp]
$L38387:

; 9418 : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 10 00	 ret	 16			; 00000010H
?PauseEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z ENDP	; DirectSound::CDirectSoundStream::PauseEx
DSOUND	ENDS
PUBLIC	??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@ ; `string'
PUBLIC	??_C@_0CC@GEPHEJGF@ENVELOPE?5flag?5requires?5ASYNC?5fla@ ; `string'
PUBLIC	??_C@_0CG@IFFHOGAL@Timestamped?5flush?5requires?5ASYNC@ ; `string'
EXTRN	?Stop@CMcpxStream@DirectSound@@QAEJ_JK@Z:NEAR	; DirectSound::CMcpxStream::Stop
;	COMDAT ??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@
DSOUND_RD	SEGMENT
??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@ DB 'CDirectSoundStr'
	DB	'eam::FlushEx', 00H				; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@GEPHEJGF@ENVELOPE?5flag?5requires?5ASYNC?5fla@
DSOUND_RD	SEGMENT
??_C@_0CC@GEPHEJGF@ENVELOPE?5flag?5requires?5ASYNC?5fla@ DB 'ENVELOPE fla'
	DB	'g requires ASYNC flag', 00H			; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CG@IFFHOGAL@Timestamped?5flush?5requires?5ASYNC@
DSOUND_RD	SEGMENT
??_C@_0CG@IFFHOGAL@Timestamped?5flush?5requires?5ASYNC@ DB 'Timestamped f'
	DB	'lush requires ASYNC flag', 00H		; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?FlushEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z
DSOUND	SEGMENT
$T40830 = -16
$T40829 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_rtTimeStamp$ = 12
_dwFlags$ = 20
?FlushEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z PROC NEAR ; DirectSound::CDirectSoundStream::FlushEx, COMDAT

; 9446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 9447 :     HRESULT                 hr;
; 9448 :     
; 9449 :     DPF_ENTER();
; 9450 :     ENTER_EXTERNAL_METHOD();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::CAutoLock
  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_fDirectSoundInFinalRelease, 0
  00015	74 44		 je	 SHORT $L38405
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@
  00021	68 ea 24 00 00	 push	 9450			; 000024eaH
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0002b	6a 03		 push	 3
  0002d	6a 09		 push	 9
  0002f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FF@CEBOEHDG@DirectSound?5is?5in?5the?5final?5stag@
  0003c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00041	83 c4 04	 add	 esp, 4
  00044	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR $T40829[ebp], -2147467259 ; 80004005H
  0004b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004e	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  00053	8b 45 f4	 mov	 eax, DWORD PTR $T40829[ebp]
  00056	e9 14 01 00 00	 jmp	 $L38402
$L38405:
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@
  00060	68 ea 24 00 00	 push	 9450			; 000024eaH
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 04	 add	 ecx, 4
  00070	e8 00 00 00 00	 call	 ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ; DirectSound::CValidObject<1146311456>::__AssertValidObject

; 9451 :     
; 9452 : #ifdef VALIDATE_PARAMETERS
; 9453 : 
; 9454 :     if(dwFlags & ~DSSTREAMFLUSHEX_VALID)

  00075	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00078	83 e0 fc	 and	 eax, -4			; fffffffcH
  0007b	85 c0		 test	 eax, eax
  0007d	74 2d		 je	 SHORT $L38409

; 9455 :     {
; 9456 :         DPF_ERROR("Invalid flags");

  0007f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@
  00089	68 f0 24 00 00	 push	 9456			; 000024f0H
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00093	6a 01		 push	 1
  00095	6a 09		 push	 9
  00097	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@IHOLGAKK@Invalid?5flags?$AA@
  000a4	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000a9	83 c4 04	 add	 esp, 4
$L38409:

; 9457 :     }
; 9458 : 
; 9459 :     if((dwFlags & DSSTREAMFLUSHEX_ENVELOPE) && !(dwFlags & DSSTREAMFLUSHEX_ASYNC))

  000ac	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000af	83 e1 02	 and	 ecx, 2
  000b2	85 c9		 test	 ecx, ecx
  000b4	74 37		 je	 SHORT $L38410
  000b6	8b 55 14	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000b9	83 e2 01	 and	 edx, 1
  000bc	85 d2		 test	 edx, edx
  000be	75 2d		 jne	 SHORT $L38410

; 9460 :     {
; 9461 :         DPF_ERROR("ENVELOPE flag requires ASYNC flag");

  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@
  000ca	68 f5 24 00 00	 push	 9461			; 000024f5H
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  000d4	6a 01		 push	 1
  000d6	6a 09		 push	 9
  000d8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000dd	83 c4 18	 add	 esp, 24			; 00000018H
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@GEPHEJGF@ENVELOPE?5flag?5requires?5ASYNC?5fla@
  000e5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ea	83 c4 04	 add	 esp, 4
$L38410:

; 9462 :     }
; 9463 : 
; 9464 :     if(rtTimeStamp && !(dwFlags & DSSTREAMFLUSHEX_ASYNC))

  000ed	8b 45 0c	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp]
  000f0	0b 45 10	 or	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  000f3	85 c0		 test	 eax, eax
  000f5	74 37		 je	 SHORT $L38412
  000f7	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  000fa	83 e1 01	 and	 ecx, 1
  000fd	85 c9		 test	 ecx, ecx
  000ff	75 2d		 jne	 SHORT $L38412

; 9465 :     {
; 9466 :         DPF_ERROR("Timestamped flush requires ASYNC flag");

  00101	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@IAGHBGAJ@CDirectSoundStream?3?3FlushEx?$AA@
  0010b	68 fa 24 00 00	 push	 9466			; 000024faH
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@PFAAEPKC@c?3?2xbox?2private?2windows?2directx?2@
  00115	6a 01		 push	 1
  00117	6a 09		 push	 9
  00119	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011e	83 c4 18	 add	 esp, 24			; 00000018H
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@IFFHOGAL@Timestamped?5flush?5requires?5ASYNC@
  00126	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0012b	83 c4 04	 add	 esp, 4
$L38412:

; 9467 :     }
; 9468 : 
; 9469 : #endif // VALIDATE_PARAMETERS
; 9470 : 
; 9471 :     if(dwFlags)

  0012e	83 7d 14 00	 cmp	 DWORD PTR _dwFlags$[ebp], 0
  00132	74 1c		 je	 SHORT $L38414

; 9472 :     {
; 9473 :         hr = m_pStream->Stop(rtTimeStamp, dwFlags);

  00134	8b 55 14	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00137	52		 push	 edx
  00138	8b 45 10	 mov	 eax, DWORD PTR _rtTimeStamp$[ebp+4]
  0013b	50		 push	 eax
  0013c	8b 4d 0c	 mov	 ecx, DWORD PTR _rtTimeStamp$[ebp]
  0013f	51		 push	 ecx
  00140	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00143	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00146	e8 00 00 00 00	 call	 ?Stop@CMcpxStream@DirectSound@@QAEJ_JK@Z ; DirectSound::CMcpxStream::Stop
  0014b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 9474 :     }
; 9475 :     else

  0014e	eb 0e		 jmp	 SHORT $L38415
$L38414:

; 9476 :     {
; 9477 :         hr = m_pStream->Flush();

  00150	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00153	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00156	e8 00 00 00 00	 call	 ?Flush@CMcpxStream@DirectSound@@QAEJXZ ; DirectSound::CMcpxStream::Flush
  0015b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L38415:

; 9478 :     }
; 9479 : 
; 9480 :     DPF_LEAVE_HRESULT(hr);
; 9481 : 
; 9482 :     return hr;

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00161	89 4d f0	 mov	 DWORD PTR $T40830[ebp], ecx
  00164	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00167	e8 00 00 00 00	 call	 ??1CAutoLock@DirectSound@@QAE@XZ ; DirectSound::CAutoLock::~CAutoLock
  0016c	8b 45 f0	 mov	 eax, DWORD PTR $T40830[ebp]
$L38402:

; 9483 : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 10 00	 ret	 16			; 00000010H
?FlushEx@CDirectSoundStream@DirectSound@@QAGJ_JK@Z ENDP	; DirectSound::CDirectSoundStream::FlushEx
DSOUND	ENDS
PUBLIC	??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@	; DirectSound::CValidObject<1146310212>::`vftable'
PUBLIC	??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z ; DirectSound::CValidObject<1146310212>::`scalar deleting destructor'
EXTRN	??_E?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CValidObject<1146310212>::`vector deleting destructor'
;	COMDAT ??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\dsound\dsapi.h
CONST	SEGMENT
??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@ DD FLAT:??_E?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z ; DirectSound::CValidObject<1146310212>::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0?$CValidObject@$0EEFDEOEE@@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0?$CValidObject@$0EEFDEOEE@@DirectSound@@QAE@XZ PROC NEAR ; DirectSound::CValidObject<1146310212>::CValidObject<1146310212>, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 44 4e
	53 44		 mov	 DWORD PTR [ecx+4], 1146310212 ; 44534e44H

; 95   :     }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$CValidObject@$0EEFDEOEE@@DirectSound@@QAE@XZ ENDP	; DirectSound::CValidObject<1146310212>::CValidObject<1146310212>
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ PROC NEAR ; DirectSound::CValidObject<1146310212>::~CValidObject<1146310212>, COMDAT
; _this$ = ecx

; 98   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EEFDEOEE@@DirectSound@@6B@

; 99   :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ ENDP	; DirectSound::CValidObject<1146310212>::~CValidObject<1146310212>
DSOUND	ENDS
PUBLIC	??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@ ; `string'
;	COMDAT ??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
DSOUND_RD	SEGMENT
??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@ DB 'NU'
	DB	'LL "this" pointer (%x)', 00H		; `string'
DSOUND_RD	ENDS
;	COMDAT ??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
DSOUND_RD	SEGMENT
??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@ DB 'I'
	DB	'nvalid "this" pointer (%x != %x)', 00H	; `string'
; Function compile flags: /Odt
DSOUND_RD	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT
_this$ = -4
_pszFile$ = 8
_dwLine$ = 12
_pszFunction$ = 16
?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z PROC NEAR ; DirectSound::CValidObject<1146310212>::__AssertValidObject, COMDAT
; _this$ = ecx

; 102  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  :         if(!this)

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 30		 jne	 SHORT $L38431

; 104  :         {
; 105  :             DirectSound::CDebug::SetContext(DPF_FLAGS_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00012	8b 45 10	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLine$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0001d	52		 push	 edx
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H

; 106  :             DirectSound::CDebug::Print("NULL \"this\" pointer (%x)", this);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
  00033	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00038	83 c4 08	 add	 esp, 8

; 107  :         }
; 108  :         else if(m_dwSignature != dwSignature)

  0003b	eb 42		 jmp	 SHORT $L38430
$L38431:
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 79 04 44 4e
	53 44		 cmp	 DWORD PTR [ecx+4], 1146310212 ; 44534e44H
  00047	74 36		 je	 SHORT $L38430

; 109  :         {
; 110  :             DirectSound::CDebug::SetContext(DPF_FLAGS_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004e	8b 55 10	 mov	 edx, DWORD PTR _pszFunction$[ebp]
  00051	52		 push	 edx
  00052	8b 45 0c	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00059	51		 push	 ecx
  0005a	6a 01		 push	 1
  0005c	6a 09		 push	 9
  0005e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00063	83 c4 18	 add	 esp, 24			; 00000018H

; 111  :             DirectSound::CDebug::Print("Invalid \"this\" pointer (%x != %x)", m_dwSignature, dwSignature);

  00066	68 44 4e 53 44	 push	 1146310212		; 44534e44H
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
  00077	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L38430:

; 112  :         }
; 113  :     }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
?__AssertValidObject@?$CValidObject@$0EEFDEOEE@@DirectSound@@QAEXPBDK0@Z ENDP ; DirectSound::CValidObject<1146310212>::__AssertValidObject
DSOUND	ENDS
PUBLIC	??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@	; DirectSound::CValidObject<1146307104>::`vftable'
PUBLIC	??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z ; DirectSound::CValidObject<1146307104>::`scalar deleting destructor'
EXTRN	??_E?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CValidObject<1146307104>::`vector deleting destructor'
;	COMDAT ??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
CONST	SEGMENT
??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@ DD FLAT:??_E?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z ; DirectSound::CValidObject<1146307104>::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0?$CValidObject@$0EEFDECCA@@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0?$CValidObject@$0EEFDECCA@@DirectSound@@QAE@XZ PROC NEAR ; DirectSound::CValidObject<1146307104>::CValidObject<1146307104>, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 20 42
	53 44		 mov	 DWORD PTR [ecx+4], 1146307104 ; 44534220H

; 95   :     }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$CValidObject@$0EEFDECCA@@DirectSound@@QAE@XZ ENDP	; DirectSound::CValidObject<1146307104>::CValidObject<1146307104>
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ PROC NEAR ; DirectSound::CValidObject<1146307104>::~CValidObject<1146307104>, COMDAT
; _this$ = ecx

; 98   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EEFDECCA@@DirectSound@@6B@

; 99   :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ ENDP	; DirectSound::CValidObject<1146307104>::~CValidObject<1146307104>
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT
_this$ = -4
_pszFile$ = 8
_dwLine$ = 12
_pszFunction$ = 16
?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z PROC NEAR ; DirectSound::CValidObject<1146307104>::__AssertValidObject, COMDAT
; _this$ = ecx

; 102  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  :         if(!this)

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 30		 jne	 SHORT $L38450

; 104  :         {
; 105  :             DirectSound::CDebug::SetContext(DPF_FLAGS_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00012	8b 45 10	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLine$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0001d	52		 push	 edx
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H

; 106  :             DirectSound::CDebug::Print("NULL \"this\" pointer (%x)", this);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
  00033	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00038	83 c4 08	 add	 esp, 8

; 107  :         }
; 108  :         else if(m_dwSignature != dwSignature)

  0003b	eb 42		 jmp	 SHORT $L38449
$L38450:
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 79 04 20 42
	53 44		 cmp	 DWORD PTR [ecx+4], 1146307104 ; 44534220H
  00047	74 36		 je	 SHORT $L38449

; 109  :         {
; 110  :             DirectSound::CDebug::SetContext(DPF_FLAGS_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004e	8b 55 10	 mov	 edx, DWORD PTR _pszFunction$[ebp]
  00051	52		 push	 edx
  00052	8b 45 0c	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00059	51		 push	 ecx
  0005a	6a 01		 push	 1
  0005c	6a 09		 push	 9
  0005e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00063	83 c4 18	 add	 esp, 24			; 00000018H

; 111  :             DirectSound::CDebug::Print("Invalid \"this\" pointer (%x != %x)", m_dwSignature, dwSignature);

  00066	68 20 42 53 44	 push	 1146307104		; 44534220H
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
  00077	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L38449:

; 112  :         }
; 113  :     }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
?__AssertValidObject@?$CValidObject@$0EEFDECCA@@DirectSound@@QAEXPBDK0@Z ENDP ; DirectSound::CValidObject<1146307104>::__AssertValidObject
DSOUND	ENDS
PUBLIC	??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@	; DirectSound::CValidObject<1146311456>::`vftable'
PUBLIC	??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z ; DirectSound::CValidObject<1146311456>::`scalar deleting destructor'
EXTRN	??_E?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z:NEAR ; DirectSound::CValidObject<1146311456>::`vector deleting destructor'
;	COMDAT ??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
CONST	SEGMENT
??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@ DD FLAT:??_E?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z ; DirectSound::CValidObject<1146311456>::`vftable'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0?$CValidObject@$0EEFDFDCA@@DirectSound@@QAE@XZ
DSOUND	SEGMENT
_this$ = -4
??0?$CValidObject@$0EEFDFDCA@@DirectSound@@QAE@XZ PROC NEAR ; DirectSound::CValidObject<1146311456>::CValidObject<1146311456>, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 20 53
	53 44		 mov	 DWORD PTR [ecx+4], 1146311456 ; 44535320H

; 95   :     }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$CValidObject@$0EEFDFDCA@@DirectSound@@QAE@XZ ENDP	; DirectSound::CValidObject<1146311456>::CValidObject<1146311456>
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ
DSOUND	SEGMENT
_this$ = -4
??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ PROC NEAR ; DirectSound::CValidObject<1146311456>::~CValidObject<1146311456>, COMDAT
; _this$ = ecx

; 98   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CValidObject@$0EEFDFDCA@@DirectSound@@6B@

; 99   :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ ENDP	; DirectSound::CValidObject<1146311456>::~CValidObject<1146311456>
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z
DSOUND	SEGMENT
_this$ = -4
_pszFile$ = 8
_dwLine$ = 12
_pszFunction$ = 16
?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z PROC NEAR ; DirectSound::CValidObject<1146311456>::__AssertValidObject, COMDAT
; _this$ = ecx

; 102  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  :         if(!this)

  00007	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000b	75 30		 jne	 SHORT $L38467

; 104  :         {
; 105  :             DirectSound::CDebug::SetContext(DPF_FLAGS_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  00012	8b 45 10	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLine$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0001d	52		 push	 edx
  0001e	6a 01		 push	 1
  00020	6a 09		 push	 9
  00022	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00027	83 c4 18	 add	 esp, 24			; 00000018H

; 106  :             DirectSound::CDebug::Print("NULL \"this\" pointer (%x)", this);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@GLKFBKGJ@NULL?5?$CCthis?$CC?5pointer?5?$CI?$CFx?$CJ?$AA@
  00033	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00038	83 c4 08	 add	 esp, 8

; 107  :         }
; 108  :         else if(m_dwSignature != dwSignature)

  0003b	eb 42		 jmp	 SHORT $L38466
$L38467:
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 79 04 20 53
	53 44		 cmp	 DWORD PTR [ecx+4], 1146311456 ; 44535320H
  00047	74 36		 je	 SHORT $L38466

; 109  :         {
; 110  :             DirectSound::CDebug::SetContext(DPF_FLAGS_DEFAULT, DPFLVL_ERROR, pszFile, dwLine, pszFunction, DPF_LIBRARY);

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06JAKMBBHB@DSOUND?$AA@
  0004e	8b 55 10	 mov	 edx, DWORD PTR _pszFunction$[ebp]
  00051	52		 push	 edx
  00052	8b 45 0c	 mov	 eax, DWORD PTR _dwLine$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00059	51		 push	 ecx
  0005a	6a 01		 push	 1
  0005c	6a 09		 push	 9
  0005e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00063	83 c4 18	 add	 esp, 24			; 00000018H

; 111  :             DirectSound::CDebug::Print("Invalid \"this\" pointer (%x != %x)", m_dwSignature, dwSignature);

  00066	68 20 53 53 44	 push	 1146311456		; 44535320H
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@LEKIOFPG@Invalid?5?$CCthis?$CC?5pointer?5?$CI?$CFx?5?$CB?$DN?5?$CFx@
  00077	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
$L38466:

; 112  :         }
; 113  :     }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
?__AssertValidObject@?$CValidObject@$0EEFDFDCA@@DirectSound@@QAEXPBDK0@Z ENDP ; DirectSound::CValidObject<1146311456>::__AssertValidObject
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSound@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCDirectSound@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 10		 je	 SHORT $L38484

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00012	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00015	50		 push	 eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L38484:

; 72   :         }
; 73   : 
; 74   :         return p;

  00019	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCDirectSound@1@PAV21@@Z ENDP ; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCWaveFileMediaObject@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCWaveFileMediaObject@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0b		 je	 SHORT $L38486

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 11		 call	 DWORD PTR [ecx]
$L38486:

; 72   :         }
; 73   : 
; 74   :         return p;

  00014	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCWaveFileMediaObject@1@PAV21@@Z ENDP ; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCFileMediaObject@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCFileMediaObject@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0b		 je	 SHORT $L38488

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 11		 call	 DWORD PTR [ecx]
$L38488:

; 72   :         }
; 73   : 
; 74   :         return p;

  00014	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCFileMediaObject@1@PAV21@@Z ENDP ; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCAc97MediaObject@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCAc97MediaObject@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0b		 je	 SHORT $L38490

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 11		 call	 DWORD PTR [ecx]
$L38490:

; 72   :         }
; 73   : 
; 74   :         return p;

  00014	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCAc97MediaObject@1@PAV21@@Z ENDP ; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundBuffer@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCDirectSoundBuffer@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 10		 je	 SHORT $L38492

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00012	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00015	50		 push	 eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L38492:

; 72   :         }
; 73   : 
; 74   :         return p;

  00019	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCDirectSoundBuffer@1@PAV21@@Z ENDP ; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCMcpxVoiceClient@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCMcpxVoiceClient@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L38494

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L38494:

; 72   :         }
; 73   : 
; 74   :         return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCMcpxVoiceClient@1@PAV21@@Z ENDP ; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z
DSOUND	SEGMENT
_p$ = 8
?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z PROC NEAR ; DirectSound::__AddRef, COMDAT

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :         if(p)

  00003	83 7d 08 00	 cmp	 DWORD PTR _p$[ebp], 0
  00007	74 0c		 je	 SHORT $L38496

; 70   :         {
; 71   :             p->AddRef();

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00011	52		 push	 edx
  00012	ff 51 04	 call	 DWORD PTR [ecx+4]
$L38496:

; 72   :         }
; 73   : 
; 74   :         return p;

  00015	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]

; 75   :     }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?__AddRef@DirectSound@@YGPAVCDirectSoundVoiceSettings@1@PAV21@@Z ENDP ; DirectSound::__AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CValidObject<1146310212>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EEFDEOEE@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146310212>::~CValidObject<1146310212>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L38503
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L38503:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CValidObject@$0EEFDEOEE@@DirectSound@@UAEPAXI@Z ENDP ; DirectSound::CValidObject<1146310212>::`scalar deleting destructor'
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CValidObject<1146307104>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EEFDECCA@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146307104>::~CValidObject<1146307104>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L38506
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L38506:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CValidObject@$0EEFDECCA@@DirectSound@@UAEPAXI@Z ENDP ; DirectSound::CValidObject<1146307104>::`scalar deleting destructor'
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z
DSOUND	SEGMENT
_this$ = -4
___flags$ = 8
??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z PROC NEAR ; DirectSound::CValidObject<1146311456>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CValidObject@$0EEFDFDCA@@DirectSound@@UAE@XZ ; DirectSound::CValidObject<1146311456>::~CValidObject<1146311456>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L38509
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L38509:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CValidObject@$0EEFDFDCA@@DirectSound@@UAEPAXI@Z ENDP ; DirectSound::CValidObject<1146311456>::`scalar deleting destructor'
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ??_ECDirectSound@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECDirectSound@DirectSound@@W7AEPAXI@Z PROC NEAR	; DirectSound::CDirectSound::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECDirectSound@DirectSound@@UAEPAXI@Z
??_ECDirectSound@DirectSound@@W7AEPAXI@Z ENDP		; DirectSound::CDirectSound::`vector deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_ECDirectSoundBuffer@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECDirectSoundBuffer@DirectSound@@W7AEPAXI@Z PROC NEAR ; DirectSound::CDirectSoundBuffer::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECDirectSoundBuffer@DirectSound@@UAEPAXI@Z
??_ECDirectSoundBuffer@DirectSound@@W7AEPAXI@Z ENDP	; DirectSound::CDirectSoundBuffer::`vector deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_ECDirectSoundStream@DirectSound@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECDirectSoundStream@DirectSound@@W7AEPAXI@Z PROC NEAR ; DirectSound::CDirectSoundStream::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECDirectSoundStream@DirectSound@@UAEPAXI@Z
??_ECDirectSoundStream@DirectSound@@W7AEPAXI@Z ENDP	; DirectSound::CDirectSoundStream::`vector deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CDirectSoundStream@DirectSound@@WM@AGKXZ
DSOUND	SEGMENT
?AddRef@CDirectSoundStream@DirectSound@@WM@AGKXZ PROC NEAR ; DirectSound::CDirectSoundStream::AddRef, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CDirectSoundStream@DirectSound@@UAGKXZ ; DirectSound::CDirectSoundStream::AddRef
?AddRef@CDirectSoundStream@DirectSound@@WM@AGKXZ ENDP	; DirectSound::CDirectSoundStream::AddRef
; Function compile flags: /Odt
DSOUND	ENDS
;	COMDAT ?Release@CDirectSoundStream@DirectSound@@WM@AGKXZ
DSOUND	SEGMENT
?Release@CDirectSoundStream@DirectSound@@WM@AGKXZ PROC NEAR ; DirectSound::CDirectSoundStream::Release, COMDAT
  00000	83 6c 24 04 0c	 sub	 DWORD PTR [esp+4], 12	; 0000000cH
  00005	e9 00 00 00 00	 jmp	 ?Release@CDirectSoundStream@DirectSound@@UAGKXZ ; DirectSound::CDirectSoundStream::Release
?Release@CDirectSoundStream@DirectSound@@WM@AGKXZ ENDP	; DirectSound::CDirectSoundStream::Release
DSOUND	ENDS
END
