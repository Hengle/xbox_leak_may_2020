; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\dsound\tools\wavbndlr\console\console.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05KMJF@ADPCM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05HMEK@8?9bit?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EG@ELIP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@BPPI@?$CFlu?4?$CFlu?4?$CFlu?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_00A@?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GAIF@Generating?5wave?5bank?5file?5?$CFs?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@LNCO@Generating?5header?5file?5?$CFs?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@ICAK@Processing?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02PIMC@?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@GAMH@WAVBNDLR?5version?5?$CFs?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EC@LMLP@Copyright?5?$CIc?$CJ?52001?5Microsoft?5Cor@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CK@OEBO@Creates?5wave?5banks?5for?5use?5on?5th@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@PBNJ@WAVBNDLR?5?$FL?1N?$FN?5?$FL?1L?$FN?5?$DMproject?$DO?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08MJHB@Usage?3?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@GMFG@?5?5project?5?5?5?5?5?5?5Specifies?5the?5pr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EM@MMAK@?5?5?1N?5?5?5?5?5?5?5?5?5?5?5?5Prevents?5destina@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@IBB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5already?5exist?4?$AN?6@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@NPBH@?5?5?1L?5?5?5?5?5?5?5?5?5?5?5?5Does?5not?5print?5t@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LFLJ@Error?3?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DEFH@Warning?3?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@EGHL@?$AN?6Success?$CB?$AN?6?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginProject@CWaveBankCallback@@UAEHII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndProject@CWaveBankCallback@@UAEXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OpenBank@CWaveBankCallback@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloseBank@CWaveBankCallback@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OpenHeader@CWaveBankCallback@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloseHeader@CWaveBankCallback@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginEntry@CWaveBankCallback@@UAEHPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndEntry@CWaveBankCallback@@UAEXPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWaveBundlerVersion@@YGXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPrintBoy@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Print@CPrintBoy@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CPrintBoy@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CConsoleCallback@@QAE@AAVCPrintBoy@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveBankCallback@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OpenBank@CConsoleCallback@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OpenHeader@CConsoleCallback@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginEntry@CConsoleCallback@@UAEHPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Banner@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Usage@@YGHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DebugCallback@@YGXKPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _main
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CWaveBankCallback@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CConsoleCallback@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

CONST	SEGMENT
?dwMajor@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB DD 01H	; `GetWaveBundlerVersion'::`2'::dwMajor
?dwMinor@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB DD 00H	; `GetWaveBundlerVersion'::`2'::dwMinor
?dwBuild@?1??GetWaveBundlerVersion@@YGXPAD@Z@4KB DD 01130H ; `GetWaveBundlerVersion'::`2'::dwBuild
?nCharLimit@?1??Print@CPrintBoy@@QAEXPBD@Z@4HB DD 04fH	; `CPrintBoy::Print'::`2'::nCharLimit
CONST	ENDS
PUBLIC	??0CPrintBoy@@QAE@XZ				; CPrintBoy::CPrintBoy
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\tools\wavbndlr\console\console.cpp
;	COMDAT ??0CPrintBoy@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CPrintBoy@@QAE@XZ PROC NEAR				; CPrintBoy::CPrintBoy, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 87   : }

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0CPrintBoy@@QAE@XZ ENDP				; CPrintBoy::CPrintBoy
_TEXT	ENDS
PUBLIC	?Print@CPrintBoy@@QAEXPBD@Z			; CPrintBoy::Print
EXTRN	__putch:NEAR
; Function compile flags: /Odt
;	COMDAT ?Print@CPrintBoy@@QAEXPBD@Z
_TEXT	SEGMENT
_pszString$ = 8
_this$ = -16
_nLength$ = -4
_nDiff$ = -8
_i$ = -12
?Print@CPrintBoy@@QAEXPBD@Z PROC NEAR			; CPrintBoy::Print, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 114  :     static const int        nCharLimit  = 79;
; 115  :     int                     nLength;
; 116  :     int                     nDiff;
; 117  :     int                     i;
; 118  : 
; 119  :     //
; 120  :     // Truncate the string to 79 characters
; 121  :     //
; 122  : 
; 123  :     for(i = 0; i < (int)m_nLength; i++)

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $L48932
$L48933:
  00012	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$L48932:
  0001b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00021	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00023	7d 0c		 jge	 SHORT $L48934

; 124  :     {
; 125  :         _putch('\b');

  00025	6a 08		 push	 8
  00027	e8 00 00 00 00	 call	 __putch
  0002c	83 c4 04	 add	 esp, 4

; 126  :     }

  0002f	eb e1		 jmp	 SHORT $L48933
$L48934:

; 127  : 
; 128  :     for(nLength = 0; *pszString && (nLength < nCharLimit); nLength++, pszString++)

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nLength$[ebp], 0
  00038	eb 12		 jmp	 SHORT $L48935
$L48936:
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _nLength$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	89 45 fc	 mov	 DWORD PTR _nLength$[ebp], eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _pszString$[ebp]
  00046	83 c1 01	 add	 ecx, 1
  00049	89 4d 08	 mov	 DWORD PTR _pszString$[ebp], ecx
$L48935:
  0004c	8b 55 08	 mov	 edx, DWORD PTR _pszString$[ebp]
  0004f	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00052	85 c0		 test	 eax, eax
  00054	74 17		 je	 SHORT $L48937
  00056	83 7d fc 4f	 cmp	 DWORD PTR _nLength$[ebp], 79 ; 0000004fH
  0005a	7d 11		 jge	 SHORT $L48937

; 129  :     {
; 130  :         _putch(*pszString);

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0005f	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 __putch
  00068	83 c4 04	 add	 esp, 4

; 131  :     }

  0006b	eb cd		 jmp	 SHORT $L48936
$L48937:

; 132  : 
; 133  :     if((nDiff = m_nLength - nLength) > 0)

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	2b 4d fc	 sub	 ecx, DWORD PTR _nLength$[ebp]
  00075	89 4d f8	 mov	 DWORD PTR _nDiff$[ebp], ecx
  00078	83 7d f8 00	 cmp	 DWORD PTR _nDiff$[ebp], 0
  0007c	7e 4c		 jle	 SHORT $L48938

; 134  :     {
; 135  :         for(i = 0; i < nDiff; i++)

  0007e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00085	eb 09		 jmp	 SHORT $L48939
$L48940:
  00087	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0008a	83 c2 01	 add	 edx, 1
  0008d	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$L48939:
  00090	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00093	3b 45 f8	 cmp	 eax, DWORD PTR _nDiff$[ebp]
  00096	7d 0c		 jge	 SHORT $L48941

; 136  :         {
; 137  :             _putch(' ');

  00098	6a 20		 push	 32			; 00000020H
  0009a	e8 00 00 00 00	 call	 __putch
  0009f	83 c4 04	 add	 esp, 4

; 138  :         }

  000a2	eb e3		 jmp	 SHORT $L48940
$L48941:

; 139  : 
; 140  :         for(i = 0; i < nDiff; i++)

  000a4	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ab	eb 09		 jmp	 SHORT $L48942
$L48943:
  000ad	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  000b0	83 c1 01	 add	 ecx, 1
  000b3	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$L48942:
  000b6	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  000b9	3b 55 f8	 cmp	 edx, DWORD PTR _nDiff$[ebp]
  000bc	7d 0c		 jge	 SHORT $L48944

; 141  :         {
; 142  :             _putch('\b');

  000be	6a 08		 push	 8
  000c0	e8 00 00 00 00	 call	 __putch
  000c5	83 c4 04	 add	 esp, 4

; 143  :         }

  000c8	eb e3		 jmp	 SHORT $L48943
$L48944:
$L48938:

; 144  :     }
; 145  :     
; 146  :     m_nLength = nLength;

  000ca	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _nLength$[ebp]
  000d0	89 08		 mov	 DWORD PTR [eax], ecx

; 147  : }

  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
?Print@CPrintBoy@@QAEXPBD@Z ENDP			; CPrintBoy::Print
_TEXT	ENDS
PUBLIC	?Clear@CPrintBoy@@QAEXXZ			; CPrintBoy::Clear
PUBLIC	??_C@_00A@?$AA@					; `string'
;	COMDAT ??_C@_00A@?$AA@
CONST	SEGMENT
??_C@_00A@?$AA@ DB 00H					; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Clear@CPrintBoy@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?Clear@CPrintBoy@@QAEXXZ PROC NEAR			; CPrintBoy::Clear, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 174  :     Print("");

  00007	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00A@?$AA@ ; `string'
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Print@CPrintBoy@@QAEXPBD@Z ; CPrintBoy::Print
$L48951:

; 175  : 
; 176  :     while(m_nLength)

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001a	74 19		 je	 SHORT $L48952

; 177  :     {
; 178  :         _putch('\b');

  0001c	6a 08		 push	 8
  0001e	e8 00 00 00 00	 call	 __putch
  00023	83 c4 04	 add	 esp, 4

; 179  : 
; 180  :         m_nLength--;

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	83 ea 01	 sub	 edx, 1
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	89 10		 mov	 DWORD PTR [eax], edx

; 181  :     }

  00033	eb df		 jmp	 SHORT $L48951
$L48952:

; 182  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?Clear@CPrintBoy@@QAEXXZ ENDP				; CPrintBoy::Clear
_TEXT	ENDS
PUBLIC	?EndEntry@CWaveBankCallback@@UAEXPBDK@Z		; CWaveBankCallback::EndEntry
PUBLIC	??0CWaveBankCallback@@QAE@XZ			; CWaveBankCallback::CWaveBankCallback
PUBLIC	??0CConsoleCallback@@QAE@AAVCPrintBoy@@@Z	; CConsoleCallback::CConsoleCallback
PUBLIC	?OpenBank@CConsoleCallback@@UAEHPBD@Z		; CConsoleCallback::OpenBank
PUBLIC	?OpenHeader@CConsoleCallback@@UAEHPBD@Z		; CConsoleCallback::OpenHeader
PUBLIC	?BeginEntry@CConsoleCallback@@UAEHPBDK@Z	; CConsoleCallback::BeginEntry
PUBLIC	??_7CConsoleCallback@@6B@			; CConsoleCallback::`vftable'
PUBLIC	?BeginProject@CWaveBankCallback@@UAEHII@Z	; CWaveBankCallback::BeginProject
PUBLIC	?EndProject@CWaveBankCallback@@UAEXJ@Z		; CWaveBankCallback::EndProject
PUBLIC	?CloseBank@CWaveBankCallback@@UAEXPBD@Z		; CWaveBankCallback::CloseBank
PUBLIC	?CloseHeader@CWaveBankCallback@@UAEXPBD@Z	; CWaveBankCallback::CloseHeader
;	COMDAT ??_7CConsoleCallback@@6B@
CONST	SEGMENT
??_7CConsoleCallback@@6B@ DD FLAT:?BeginProject@CWaveBankCallback@@UAEHII@Z ; CConsoleCallback::`vftable'
	DD	FLAT:?EndProject@CWaveBankCallback@@UAEXJ@Z
	DD	FLAT:?OpenBank@CConsoleCallback@@UAEHPBD@Z
	DD	FLAT:?CloseBank@CWaveBankCallback@@UAEXPBD@Z
	DD	FLAT:?OpenHeader@CConsoleCallback@@UAEHPBD@Z
	DD	FLAT:?CloseHeader@CWaveBankCallback@@UAEXPBD@Z
	DD	FLAT:?BeginEntry@CConsoleCallback@@UAEHPBDK@Z
	DD	FLAT:?EndEntry@CWaveBankCallback@@UAEXPBDK@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CConsoleCallback@@QAE@AAVCPrintBoy@@@Z
_TEXT	SEGMENT
_PrintBoy$ = 8
_this$ = -4
??0CConsoleCallback@@QAE@AAVCPrintBoy@@@Z PROC NEAR	; CConsoleCallback::CConsoleCallback, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CWaveBankCallback@@QAE@XZ ; CWaveBankCallback::CWaveBankCallback
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _PrintBoy$[ebp]
  00015	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CConsoleCallback@@6B@ ; CConsoleCallback::`vftable'

; 209  : }

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0CConsoleCallback@@QAE@AAVCPrintBoy@@@Z ENDP		; CConsoleCallback::CConsoleCallback
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\tools\wavbndlr\common\writer.h
_TEXT	ENDS
;	COMDAT ?BeginProject@CWaveBankCallback@@UAEHII@Z
_TEXT	SEGMENT
_this$ = -4
?BeginProject@CWaveBankCallback@@UAEHII@Z PROC NEAR	; CWaveBankCallback::BeginProject, COMDAT
; _this$ = ecx

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 237  :     return TRUE;

  00007	b8 01 00 00 00	 mov	 eax, 1

; 238  : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?BeginProject@CWaveBankCallback@@UAEHII@Z ENDP		; CWaveBankCallback::BeginProject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndProject@CWaveBankCallback@@UAEXJ@Z
_TEXT	SEGMENT
_this$ = -4
?EndProject@CWaveBankCallback@@UAEXJ@Z PROC NEAR	; CWaveBankCallback::EndProject, COMDAT
; _this$ = ecx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 242  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?EndProject@CWaveBankCallback@@UAEXJ@Z ENDP		; CWaveBankCallback::EndProject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?CloseBank@CWaveBankCallback@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4
?CloseBank@CWaveBankCallback@@UAEXPBD@Z PROC NEAR	; CWaveBankCallback::CloseBank, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?CloseBank@CWaveBankCallback@@UAEXPBD@Z ENDP		; CWaveBankCallback::CloseBank
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?CloseHeader@CWaveBankCallback@@UAEXPBD@Z
_TEXT	SEGMENT
_this$ = -4
?CloseHeader@CWaveBankCallback@@UAEXPBD@Z PROC NEAR	; CWaveBankCallback::CloseHeader, COMDAT
; _this$ = ecx

; 259  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 260  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?CloseHeader@CWaveBankCallback@@UAEXPBD@Z ENDP		; CWaveBankCallback::CloseHeader
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EndEntry@CWaveBankCallback@@UAEXPBDK@Z
_TEXT	SEGMENT
_this$ = -4
?EndEntry@CWaveBankCallback@@UAEXPBDK@Z PROC NEAR	; CWaveBankCallback::EndEntry, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 269  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 08 00	 ret	 8
?EndEntry@CWaveBankCallback@@UAEXPBDK@Z ENDP		; CWaveBankCallback::EndEntry
_TEXT	ENDS
PUBLIC	??_7CWaveBankCallback@@6B@			; CWaveBankCallback::`vftable'
PUBLIC	?OpenBank@CWaveBankCallback@@UAEHPBD@Z		; CWaveBankCallback::OpenBank
PUBLIC	?OpenHeader@CWaveBankCallback@@UAEHPBD@Z	; CWaveBankCallback::OpenHeader
PUBLIC	?BeginEntry@CWaveBankCallback@@UAEHPBDK@Z	; CWaveBankCallback::BeginEntry
;	COMDAT ??_7CWaveBankCallback@@6B@
CONST	SEGMENT
??_7CWaveBankCallback@@6B@ DD FLAT:?BeginProject@CWaveBankCallback@@UAEHII@Z ; CWaveBankCallback::`vftable'
	DD	FLAT:?EndProject@CWaveBankCallback@@UAEXJ@Z
	DD	FLAT:?OpenBank@CWaveBankCallback@@UAEHPBD@Z
	DD	FLAT:?CloseBank@CWaveBankCallback@@UAEXPBD@Z
	DD	FLAT:?OpenHeader@CWaveBankCallback@@UAEHPBD@Z
	DD	FLAT:?CloseHeader@CWaveBankCallback@@UAEXPBD@Z
	DD	FLAT:?BeginEntry@CWaveBankCallback@@UAEHPBDK@Z
	DD	FLAT:?EndEntry@CWaveBankCallback@@UAEXPBDK@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWaveBankCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CWaveBankCallback@@QAE@XZ PROC NEAR			; CWaveBankCallback::CWaveBankCallback, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBankCallback@@6B@ ; CWaveBankCallback::`vftable'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0CWaveBankCallback@@QAE@XZ ENDP			; CWaveBankCallback::CWaveBankCallback
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OpenBank@CWaveBankCallback@@UAEHPBD@Z
_TEXT	SEGMENT
_this$ = -4
?OpenBank@CWaveBankCallback@@UAEHPBD@Z PROC NEAR	; CWaveBankCallback::OpenBank, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  :     return TRUE;

  00007	b8 01 00 00 00	 mov	 eax, 1

; 247  : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?OpenBank@CWaveBankCallback@@UAEHPBD@Z ENDP		; CWaveBankCallback::OpenBank
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OpenHeader@CWaveBankCallback@@UAEHPBD@Z
_TEXT	SEGMENT
_this$ = -4
?OpenHeader@CWaveBankCallback@@UAEHPBD@Z PROC NEAR	; CWaveBankCallback::OpenHeader, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 255  :     return TRUE;

  00007	b8 01 00 00 00	 mov	 eax, 1

; 256  : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?OpenHeader@CWaveBankCallback@@UAEHPBD@Z ENDP		; CWaveBankCallback::OpenHeader
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?BeginEntry@CWaveBankCallback@@UAEHPBDK@Z
_TEXT	SEGMENT
_this$ = -4
?BeginEntry@CWaveBankCallback@@UAEHPBDK@Z PROC NEAR	; CWaveBankCallback::BeginEntry, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 264  :     return TRUE;

  00007	b8 01 00 00 00	 mov	 eax, 1

; 265  : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?BeginEntry@CWaveBankCallback@@UAEHPBDK@Z ENDP		; CWaveBankCallback::BeginEntry
_TEXT	ENDS
PUBLIC	??_C@_0BP@GAIF@Generating?5wave?5bank?5file?5?$CFs?$AN?6?$AA@ ; `string'
EXTRN	_printf:NEAR
;	COMDAT ??_C@_0BP@GAIF@Generating?5wave?5bank?5file?5?$CFs?$AN?6?$AA@
; File c:\xbox\private\windows\directx\dsound\tools\wavbndlr\console\console.cpp
CONST	SEGMENT
??_C@_0BP@GAIF@Generating?5wave?5bank?5file?5?$CFs?$AN?6?$AA@ DB 'Generat'
	DB	'ing wave bank file %s', 0dH, 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?OpenBank@CConsoleCallback@@UAEHPBD@Z
_TEXT	SEGMENT
_pszFile$ = 8
_this$ = -4
?OpenBank@CConsoleCallback@@UAEHPBD@Z PROC NEAR		; CConsoleCallback::OpenBank, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  :     m_PrintBoy.Clear();

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	e8 00 00 00 00	 call	 ?Clear@CPrintBoy@@QAEXXZ ; CPrintBoy::Clear

; 237  :     printf("Generating wave bank file %s\r\n", pszFile);

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00015	51		 push	 ecx
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GAIF@Generating?5wave?5bank?5file?5?$CFs?$AN?6?$AA@ ; `string'
  0001b	e8 00 00 00 00	 call	 _printf
  00020	83 c4 08	 add	 esp, 8

; 238  : 
; 239  :     return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1

; 240  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?OpenBank@CConsoleCallback@@UAEHPBD@Z ENDP		; CConsoleCallback::OpenBank
_TEXT	ENDS
PUBLIC	??_C@_0BM@LNCO@Generating?5header?5file?5?$CFs?$AN?6?$AA@ ; `string'
;	COMDAT ??_C@_0BM@LNCO@Generating?5header?5file?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BM@LNCO@Generating?5header?5file?5?$CFs?$AN?6?$AA@ DB 'Generating '
	DB	'header file %s', 0dH, 0aH, 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?OpenHeader@CConsoleCallback@@UAEHPBD@Z
_TEXT	SEGMENT
_pszFile$ = 8
_this$ = -4
?OpenHeader@CConsoleCallback@@UAEHPBD@Z PROC NEAR	; CConsoleCallback::OpenHeader, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 267  :     m_PrintBoy.Clear();

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	e8 00 00 00 00	 call	 ?Clear@CPrintBoy@@QAEXXZ ; CPrintBoy::Clear

; 268  :     printf("Generating header file %s\r\n", pszFile);

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00015	51		 push	 ecx
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@LNCO@Generating?5header?5file?5?$CFs?$AN?6?$AA@ ; `string'
  0001b	e8 00 00 00 00	 call	 _printf
  00020	83 c4 08	 add	 esp, 8

; 269  : 
; 270  :     return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1

; 271  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?OpenHeader@CConsoleCallback@@UAEHPBD@Z ENDP		; CConsoleCallback::OpenHeader
_TEXT	ENDS
PUBLIC	??_C@_0M@ICAK@Processing?5?$AA@			; `string'
EXTRN	_strcpy:NEAR
EXTRN	_strlen:NEAR
EXTRN	__splitpath:NEAR
;	COMDAT ??_C@_0M@ICAK@Processing?5?$AA@
CONST	SEGMENT
??_C@_0M@ICAK@Processing?5?$AA@ DB 'Processing ', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?BeginEntry@CConsoleCallback@@UAEHPBDK@Z
_TEXT	SEGMENT
_pszFile$ = 8
_this$ = -524
_szText$ = -520
?BeginEntry@CConsoleCallback@@UAEHPBDK@Z PROC NEAR	; CConsoleCallback::BeginEntry, COMDAT
; _this$ = ecx

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	89 8d f4 fd ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 300  :     CHAR                    szText[MAX_PATH + 0x100];
; 301  : 
; 302  :     strcpy(szText, "Processing ");

  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@ICAK@Processing?5?$AA@ ; `string'
  00014	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _strcpy
  00020	83 c4 08	 add	 esp, 8

; 303  :     _splitpath(pszFile, NULL, NULL, &szText[strlen(szText)], NULL);

  00023	6a 00		 push	 0
  00025	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _strlen
  00031	83 c4 04	 add	 esp, 4
  00034	8d 94 05 f8 fd
	ff ff		 lea	 edx, DWORD PTR _szText$[ebp+eax]
  0003b	52		 push	 edx
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	8b 45 08	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 __splitpath
  00049	83 c4 14	 add	 esp, 20			; 00000014H

; 304  : 
; 305  :     m_PrintBoy.Print(szText);

  0004c	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  00052	51		 push	 ecx
  00053	8b 95 f4 fd ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0005c	e8 00 00 00 00	 call	 ?Print@CPrintBoy@@QAEXPBD@Z ; CPrintBoy::Print

; 306  : 
; 307  :     return TRUE;

  00061	b8 01 00 00 00	 mov	 eax, 1

; 308  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?BeginEntry@CConsoleCallback@@UAEHPBDK@Z ENDP		; CConsoleCallback::BeginEntry
_TEXT	ENDS
PUBLIC	?Banner@@YGXXZ					; Banner
PUBLIC	??_C@_02PIMC@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0BG@GAMH@WAVBNDLR?5version?5?$CFs?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0EC@LMLP@Copyright?5?$CIc?$CJ?52001?5Microsoft?5Cor@ ; `string'
PUBLIC	??_C@_0CK@OEBO@Creates?5wave?5banks?5for?5use?5on?5th@ ; `string'
;	COMDAT ??_C@_02PIMC@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PIMC@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GAMH@WAVBNDLR?5version?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BG@GAMH@WAVBNDLR?5version?5?$CFs?$AN?6?$AA@ DB 'WAVBNDLR version %'
	DB	's', 0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@LMLP@Copyright?5?$CIc?$CJ?52001?5Microsoft?5Cor@
CONST	SEGMENT
??_C@_0EC@LMLP@Copyright?5?$CIc?$CJ?52001?5Microsoft?5Cor@ DB 'Copyright '
	DB	'(c) 2001 Microsoft Corporation.  All rights reserved.', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OEBO@Creates?5wave?5banks?5for?5use?5on?5th@
CONST	SEGMENT
??_C@_0CK@OEBO@Creates?5wave?5banks?5for?5use?5on?5th@ DB 'Creates wave b'
	DB	'anks for use on the Xbox.', 0dH, 0aH, 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Banner@@YGXXZ
_TEXT	SEGMENT
_szVersion$ = -256
?Banner@@YGXXZ PROC NEAR				; Banner, COMDAT

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H

; 335  :     CHAR                    szVersion[0x100];
; 336  : 
; 337  :     GetWaveBundlerVersion(szVersion);

  00009	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szVersion$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?GetWaveBundlerVersion@@YGXPAD@Z ; GetWaveBundlerVersion

; 338  :     
; 339  :     printf("\r\n");

  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@ ; `string'
  0001a	e8 00 00 00 00	 call	 _printf
  0001f	83 c4 04	 add	 esp, 4

; 340  :     printf(EXENAME " version %s\r\n", szVersion);

  00022	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _szVersion$[ebp]
  00028	51		 push	 ecx
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@GAMH@WAVBNDLR?5version?5?$CFs?$AN?6?$AA@ ; `string'
  0002e	e8 00 00 00 00	 call	 _printf
  00033	83 c4 08	 add	 esp, 8

; 341  :     printf("Copyright (c) 2001 Microsoft Corporation.  All rights reserved.\r\n");

  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@LMLP@Copyright?5?$CIc?$CJ?52001?5Microsoft?5Cor@ ; `string'
  0003b	e8 00 00 00 00	 call	 _printf
  00040	83 c4 04	 add	 esp, 4

; 342  :     printf("Creates wave banks for use on the Xbox.\r\n");

  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@OEBO@Creates?5wave?5banks?5for?5use?5on?5th@ ; `string'
  00048	e8 00 00 00 00	 call	 _printf
  0004d	83 c4 04	 add	 esp, 4

; 343  :     printf("\r\n");

  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@ ; `string'
  00055	e8 00 00 00 00	 call	 _printf
  0005a	83 c4 04	 add	 esp, 4

; 344  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?Banner@@YGXXZ ENDP					; Banner
_TEXT	ENDS
PUBLIC	??_C@_0M@BPPI@?$CFlu?4?$CFlu?4?$CFlu?$AA@	; `string'
EXTRN	_sprintf:NEAR
;	COMDAT ??_C@_0M@BPPI@?$CFlu?4?$CFlu?4?$CFlu?$AA@
; File c:\xbox\private\windows\directx\dsound\tools\wavbndlr\common\wavbndli.h
CONST	SEGMENT
??_C@_0M@BPPI@?$CFlu?4?$CFlu?4?$CFlu?$AA@ DB '%lu.%lu.%lu', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetWaveBundlerVersion@@YGXPAD@Z
_TEXT	SEGMENT
_pszString$ = 8
?GetWaveBundlerVersion@@YGXPAD@Z PROC NEAR		; GetWaveBundlerVersion, COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   :     static const DWORD      dwMajor = (VER_PRODUCTVERSION_DW >> 24) & 0xFF;
; 44   :     static const DWORD      dwMinor = (VER_PRODUCTVERSION_DW >> 16) & 0xFF;
; 45   :     static const DWORD      dwBuild = VER_PRODUCTVERSION_DW & 0xFFFF;
; 46   :     
; 47   :     sprintf(pszString, "%lu.%lu.%lu", dwMajor, dwMinor, dwBuild);

  00003	68 30 11 00 00	 push	 4400			; 00001130H
  00008	6a 00		 push	 0
  0000a	6a 01		 push	 1
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@BPPI@?$CFlu?4?$CFlu?4?$CFlu?$AA@ ; `string'
  00011	8b 45 08	 mov	 eax, DWORD PTR _pszString$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _sprintf
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 48   : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetWaveBundlerVersion@@YGXPAD@Z ENDP			; GetWaveBundlerVersion
_TEXT	ENDS
PUBLIC	?Usage@@YGHXZ					; Usage
PUBLIC	??_C@_0BP@PBNJ@WAVBNDLR?5?$FL?1N?$FN?5?$FL?1L?$FN?5?$DMproject?$DO?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_08MJHB@Usage?3?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0DH@GMFG@?5?5project?5?5?5?5?5?5?5Specifies?5the?5pr@ ; `string'
PUBLIC	??_C@_0EM@MMAK@?5?5?1N?5?5?5?5?5?5?5?5?5?5?5?5Prevents?5destina@ ; `string'
PUBLIC	??_C@_0CB@IBB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5already?5exist?4?$AN?6@ ; `string'
PUBLIC	??_C@_0CN@NPBH@?5?5?1L?5?5?5?5?5?5?5?5?5?5?5?5Does?5not?5print?5t@ ; `string'
;	COMDAT ??_C@_0BP@PBNJ@WAVBNDLR?5?$FL?1N?$FN?5?$FL?1L?$FN?5?$DMproject?$DO?$AN?6?$AA@
; File c:\xbox\private\windows\directx\dsound\tools\wavbndlr\console\console.cpp
CONST	SEGMENT
??_C@_0BP@PBNJ@WAVBNDLR?5?$FL?1N?$FN?5?$FL?1L?$FN?5?$DMproject?$DO?$AN?6?$AA@ DB 'W'
	DB	'AVBNDLR [/N] [/L] <project>', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MJHB@Usage?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_08MJHB@Usage?3?$AN?6?$AA@ DB 'Usage:', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GMFG@?5?5project?5?5?5?5?5?5?5Specifies?5the?5pr@
CONST	SEGMENT
??_C@_0DH@GMFG@?5?5project?5?5?5?5?5?5?5Specifies?5the?5pr@ DB '  project'
	DB	'       Specifies the project file to build.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@MMAK@?5?5?1N?5?5?5?5?5?5?5?5?5?5?5?5Prevents?5destina@
CONST	SEGMENT
??_C@_0EM@MMAK@?5?5?1N?5?5?5?5?5?5?5?5?5?5?5?5Prevents?5destina@ DB '  /N'
	DB	'            Prevents destination files from being overwritten'
	DB	' if they', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IBB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5already?5exist?4?$AN?6@
CONST	SEGMENT
??_C@_0CB@IBB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5already?5exist?4?$AN?6@ DB ' '
	DB	'               already exist.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NPBH@?5?5?1L?5?5?5?5?5?5?5?5?5?5?5?5Does?5not?5print?5t@
CONST	SEGMENT
??_C@_0CN@NPBH@?5?5?1L?5?5?5?5?5?5?5?5?5?5?5?5Does?5not?5print?5t@ DB '  '
	DB	'/L            Does not print the banner.', 0dH, 0aH, 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Usage@@YGHXZ
_TEXT	SEGMENT
?Usage@@YGHXZ PROC NEAR					; Usage, COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 371  :     Banner();

  00003	e8 00 00 00 00	 call	 ?Banner@@YGXXZ		; Banner

; 372  :     
; 373  :     printf(EXENAME " [/N] [/L] <project>\r\n");

  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@PBNJ@WAVBNDLR?5?$FL?1N?$FN?5?$FL?1L?$FN?5?$DMproject?$DO?$AN?6?$AA@ ; `string'
  0000d	e8 00 00 00 00	 call	 _printf
  00012	83 c4 04	 add	 esp, 4

; 374  :     printf("\r\n");

  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@ ; `string'
  0001a	e8 00 00 00 00	 call	 _printf
  0001f	83 c4 04	 add	 esp, 4

; 375  :     printf("Usage:\r\n");

  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08MJHB@Usage?3?$AN?6?$AA@ ; `string'
  00027	e8 00 00 00 00	 call	 _printf
  0002c	83 c4 04	 add	 esp, 4

; 376  :     printf("\r\n");

  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@ ; `string'
  00034	e8 00 00 00 00	 call	 _printf
  00039	83 c4 04	 add	 esp, 4

; 377  :     printf("  project       Specifies the project file to build.\r\n");

  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@GMFG@?5?5project?5?5?5?5?5?5?5Specifies?5the?5pr@ ; `string'
  00041	e8 00 00 00 00	 call	 _printf
  00046	83 c4 04	 add	 esp, 4

; 378  :     printf("  /N            Prevents destination files from being overwritten if they\r\n");

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@MMAK@?5?5?1N?5?5?5?5?5?5?5?5?5?5?5?5Prevents?5destina@ ; `string'
  0004e	e8 00 00 00 00	 call	 _printf
  00053	83 c4 04	 add	 esp, 4

; 379  :     printf("                already exist.\r\n");

  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@IBB@?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5already?5exist?4?$AN?6@ ; `string'
  0005b	e8 00 00 00 00	 call	 _printf
  00060	83 c4 04	 add	 esp, 4

; 380  :     printf("  /L            Does not print the banner.\r\n");

  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@NPBH@?5?5?1L?5?5?5?5?5?5?5?5?5?5?5?5Does?5not?5print?5t@ ; `string'
  00068	e8 00 00 00 00	 call	 _printf
  0006d	83 c4 04	 add	 esp, 4

; 381  :     printf("\r\n");

  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@ ; `string'
  00075	e8 00 00 00 00	 call	 _printf
  0007a	83 c4 04	 add	 esp, 4

; 382  : 
; 383  :     return -1;

  0007d	83 c8 ff	 or	 eax, -1

; 384  : }

  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?Usage@@YGHXZ ENDP					; Usage
_TEXT	ENDS
PUBLIC	?DebugCallback@@YGXKPBD@Z			; DebugCallback
PUBLIC	??_C@_09LFLJ@Error?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0M@DEFH@Warning?3?5?$CFs?$AA@		; `string'
;	COMDAT ??_C@_09LFLJ@Error?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_09LFLJ@Error?3?5?$CFs?$AA@ DB 'Error: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEFH@Warning?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@DEFH@Warning?3?5?$CFs?$AA@ DB 'Warning: %s', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DebugCallback@@YGXKPBD@Z
_TEXT	SEGMENT
_dwLevel$ = 8
_pszString$ = 12
?DebugCallback@@YGXKPBD@Z PROC NEAR			; DebugCallback, COMDAT

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  :     if(dwLevel <= DPFLVL_WARNING)

  00003	83 7d 08 03	 cmp	 DWORD PTR _dwLevel$[ebp], 3
  00007	77 44		 ja	 SHORT $L48997

; 414  :     {
; 415  :         printf("\r\n");

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@ ; `string'
  0000e	e8 00 00 00 00	 call	 _printf
  00013	83 c4 04	 add	 esp, 4

; 416  : 
; 417  :         if(dwLevel < DPFLVL_WARNING)

  00016	83 7d 08 03	 cmp	 DWORD PTR _dwLevel$[ebp], 3
  0001a	73 13		 jae	 SHORT $L48998

; 418  :         {
; 419  :             printf("Error: %s", pszString);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LFLJ@Error?3?5?$CFs?$AA@ ; `string'
  00025	e8 00 00 00 00	 call	 _printf
  0002a	83 c4 08	 add	 esp, 8

; 420  :         }
; 421  :         else

  0002d	eb 11		 jmp	 SHORT $L49000
$L48998:

; 422  :         {
; 423  :             printf("Warning: %s", pszString);

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  00032	51		 push	 ecx
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@DEFH@Warning?3?5?$CFs?$AA@ ; `string'
  00038	e8 00 00 00 00	 call	 _printf
  0003d	83 c4 08	 add	 esp, 8
$L49000:

; 424  :         }
; 425  :         
; 426  :         printf("\r\n");

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02PIMC@?$AN?6?$AA@ ; `string'
  00045	e8 00 00 00 00	 call	 _printf
  0004a	83 c4 04	 add	 esp, 4
$L48997:

; 427  :     }
; 428  : }

  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?DebugCallback@@YGXKPBD@Z ENDP				; DebugCallback
_TEXT	ENDS
PUBLIC	_main
PUBLIC	??_C@_0P@EGHL@?$AN?6Success?$CB?$AN?6?$AN?6?$AA@ ; `string'
EXTRN	?m_pfnDpfCallback@CDebug@DirectSound@@2P6GXKPBD@ZA:DWORD ; DirectSound::CDebug::m_pfnDpfCallback
EXTRN	??0CWaveBankProject@@QAE@XZ:NEAR		; CWaveBankProject::CWaveBankProject
EXTRN	??1CWaveBankProject@@UAE@XZ:NEAR		; CWaveBankProject::~CWaveBankProject
EXTRN	?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z:NEAR ; CWaveBankProject::Generate
EXTRN	?ReadProjectData@CWaveBankProject@@UAEJPBD@Z:NEAR ; CWaveBankProject::ReadProjectData
;	COMDAT ??_C@_0P@EGHL@?$AN?6Success?$CB?$AN?6?$AN?6?$AA@
CONST	SEGMENT
??_C@_0P@EGHL@?$AN?6Success?$CB?$AN?6?$AN?6?$AA@ DB 0dH, 0aH, 'Success!', 0dH
	DB	0aH, 0dH, 0aH, 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _main
_TEXT	SEGMENT
_argc$ = 8
_argv$ = 12
_dwSwitches$ = -8
_pszPrjFile$ = -4
_hr$ = -20
_Project$ = -40
_PrintBoy$ = -16
_Callback$ = -48
_psz$ = -12
_i$ = -24
$T49185 = -52
_main	PROC NEAR					; COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 457  :     DWORD                   dwSwitches          = 0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwSwitches$[ebp], 0

; 458  :     LPSTR                   pszPrjFile          = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pszPrjFile$[ebp], 0

; 459  :     HRESULT                 hr                  = S_OK;

  00014	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 460  :     CWaveBankProject        Project;

  0001b	8d 4d d8	 lea	 ecx, DWORD PTR _Project$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0CWaveBankProject@@QAE@XZ ; CWaveBankProject::CWaveBankProject

; 461  :     CPrintBoy               PrintBoy;

  00023	8d 4d f0	 lea	 ecx, DWORD PTR _PrintBoy$[ebp]
  00026	e8 00 00 00 00	 call	 ??0CPrintBoy@@QAE@XZ	; CPrintBoy::CPrintBoy

; 462  :     CConsoleCallback        Callback(PrintBoy);

  0002b	8d 45 f0	 lea	 eax, DWORD PTR _PrintBoy$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d d0	 lea	 ecx, DWORD PTR _Callback$[ebp]
  00032	e8 00 00 00 00	 call	 ??0CConsoleCallback@@QAE@AAVCPrintBoy@@@Z ; CConsoleCallback::CConsoleCallback

; 463  :     LPCSTR                  psz;
; 464  :     int                     i;
; 465  : 
; 466  :     //
; 467  :     // Initialize globals
; 468  :     //
; 469  :     
; 470  :     CDebug::m_pfnDpfCallback = DebugCallback;

  00037	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_pfnDpfCallback@CDebug@DirectSound@@2P6GXKPBD@ZA, OFFSET FLAT:?DebugCallback@@YGXKPBD@Z ; DirectSound::CDebug::m_pfnDpfCallback, DebugCallback

; 471  : 
; 472  :     //
; 473  :     // Parse the command-line
; 474  :     //
; 475  : 
; 476  :     for(i = 1; (i < argc) && SUCCEEDED(hr); i++)

  00041	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00048	eb 09		 jmp	 SHORT $L49016
$L49017:
  0004a	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0004d	83 c1 01	 add	 ecx, 1
  00050	89 4d e8	 mov	 DWORD PTR _i$[ebp], ecx
$L49016:
  00053	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  00056	3b 55 08	 cmp	 edx, DWORD PTR _argc$[ebp]
  00059	0f 8d c3 00 00
	00		 jge	 $L49018
  0005f	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00063	0f 8c b9 00 00
	00		 jl	 $L49018

; 477  :     {
; 478  :         if(('/' == argv[i][0]) || ('-' == argv[i][0]))

  00069	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _argv$[ebp]
  0006f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00072	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00075	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00078	74 11		 je	 SHORT $L49020
  0007a	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  0007d	8b 55 0c	 mov	 edx, DWORD PTR _argv$[ebp]
  00080	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00083	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00086	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  00089	75 76		 jne	 SHORT $L49019
$L49020:

; 479  :         {
; 480  :             for(psz = &argv[i][1]; *psz && SUCCEEDED(hr); psz++)

  0008b	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  0008e	8b 45 0c	 mov	 eax, DWORD PTR _argv$[ebp]
  00091	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00094	83 c1 01	 add	 ecx, 1
  00097	89 4d f4	 mov	 DWORD PTR _psz$[ebp], ecx
  0009a	eb 09		 jmp	 SHORT $L49022
$L49023:
  0009c	8b 55 f4	 mov	 edx, DWORD PTR _psz$[ebp]
  0009f	83 c2 01	 add	 edx, 1
  000a2	89 55 f4	 mov	 DWORD PTR _psz$[ebp], edx
$L49022:
  000a5	8b 45 f4	 mov	 eax, DWORD PTR _psz$[ebp]
  000a8	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000ab	85 c9		 test	 ecx, ecx
  000ad	74 50		 je	 SHORT $L49024
  000af	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b3	7c 4a		 jl	 SHORT $L49024

; 481  :             {
; 482  :                 switch(*psz)
; 483  :                 {

  000b5	8b 55 f4	 mov	 edx, DWORD PTR _psz$[ebp]
  000b8	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000bb	89 45 c8	 mov	 DWORD PTR -56+[ebp], eax
  000be	8b 4d c8	 mov	 ecx, DWORD PTR -56+[ebp]
  000c1	83 e9 4c	 sub	 ecx, 76			; 0000004cH
  000c4	89 4d c8	 mov	 DWORD PTR -56+[ebp], ecx
  000c7	83 7d c8 22	 cmp	 DWORD PTR -56+[ebp], 34	; 00000022H
  000cb	77 28		 ja	 SHORT $L49031
  000cd	8b 55 c8	 mov	 edx, DWORD PTR -56+[ebp]
  000d0	33 c0		 xor	 eax, eax
  000d2	8a 82 00 00 00
	00		 mov	 al, BYTE PTR $L49186[edx]
  000d8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L49187[eax*4]
$L49029:

; 484  :                     case 'N':
; 485  :                     case 'n':
; 486  :                         dwSwitches |= SWITCH_NOOVERWRITE;

  000df	8b 4d f8	 mov	 ecx, DWORD PTR _dwSwitches$[ebp]
  000e2	83 c9 01	 or	 ecx, 1
  000e5	89 4d f8	 mov	 DWORD PTR _dwSwitches$[ebp], ecx

; 487  :                         break;

  000e8	eb 13		 jmp	 SHORT $L49026
$L49030:

; 488  : 
; 489  :                     case 'L':
; 490  :                     case 'l':
; 491  :                         dwSwitches |= SWITCH_NOLOGO;

  000ea	8b 55 f8	 mov	 edx, DWORD PTR _dwSwitches$[ebp]
  000ed	83 ca 02	 or	 edx, 2
  000f0	89 55 f8	 mov	 DWORD PTR _dwSwitches$[ebp], edx

; 492  :                         break;

  000f3	eb 08		 jmp	 SHORT $L49026
$L49031:

; 493  : 
; 494  :                     default:
; 495  :                         hr = Usage();

  000f5	e8 00 00 00 00	 call	 ?Usage@@YGHXZ		; Usage
  000fa	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L49026:

; 496  :                         break;
; 497  :                 }
; 498  :             }

  000fd	eb 9d		 jmp	 SHORT $L49023
$L49024:

; 499  :         }
; 500  :         else if(!pszPrjFile)

  000ff	eb 1c		 jmp	 SHORT $L49032
$L49019:
  00101	83 7d fc 00	 cmp	 DWORD PTR _pszPrjFile$[ebp], 0
  00105	75 0e		 jne	 SHORT $L49033

; 501  :         {
; 502  :             pszPrjFile = argv[i];

  00107	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  0010a	8b 4d 0c	 mov	 ecx, DWORD PTR _argv$[ebp]
  0010d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00110	89 55 fc	 mov	 DWORD PTR _pszPrjFile$[ebp], edx

; 503  :         }
; 504  :         else

  00113	eb 08		 jmp	 SHORT $L49034
$L49033:

; 505  :         {
; 506  :             hr = Usage();

  00115	e8 00 00 00 00	 call	 ?Usage@@YGHXZ		; Usage
  0011a	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L49034:
$L49032:

; 507  :         }
; 508  :     }

  0011d	e9 28 ff ff ff	 jmp	 $L49017
$L49018:

; 509  : 
; 510  :     if(SUCCEEDED(hr) && !pszPrjFile)

  00122	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00126	7c 0e		 jl	 SHORT $L49036
  00128	83 7d fc 00	 cmp	 DWORD PTR _pszPrjFile$[ebp], 0
  0012c	75 08		 jne	 SHORT $L49036

; 511  :     {
; 512  :         hr = Usage();

  0012e	e8 00 00 00 00	 call	 ?Usage@@YGHXZ		; Usage
  00133	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L49036:

; 513  :     }
; 514  : 
; 515  :     if(SUCCEEDED(hr) && !(dwSwitches & SWITCH_NOLOGO))

  00136	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0013a	7c 0f		 jl	 SHORT $L49038
  0013c	8b 45 f8	 mov	 eax, DWORD PTR _dwSwitches$[ebp]
  0013f	83 e0 02	 and	 eax, 2
  00142	85 c0		 test	 eax, eax
  00144	75 05		 jne	 SHORT $L49038

; 516  :     {
; 517  :         Banner();

  00146	e8 00 00 00 00	 call	 ?Banner@@YGXXZ		; Banner
$L49038:

; 518  :     }
; 519  : 
; 520  :     //
; 521  :     // Initialize the wave bank project
; 522  :     //
; 523  : 
; 524  :     if(SUCCEEDED(hr))

  0014b	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0014f	7c 0f		 jl	 SHORT $L49040

; 525  :     {
; 526  :         hr = Project.ReadProjectData(pszPrjFile);

  00151	8b 4d fc	 mov	 ecx, DWORD PTR _pszPrjFile$[ebp]
  00154	51		 push	 ecx
  00155	8d 4d d8	 lea	 ecx, DWORD PTR _Project$[ebp]
  00158	e8 00 00 00 00	 call	 ?ReadProjectData@CWaveBankProject@@UAEJPBD@Z ; CWaveBankProject::ReadProjectData
  0015d	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L49040:

; 527  :     }
; 528  : 
; 529  :     //
; 530  :     // Generate files
; 531  :     //
; 532  : 
; 533  :     if(SUCCEEDED(hr))

  00160	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00164	7c 1b		 jl	 SHORT $L49042

; 534  :     {
; 535  :         hr = Project.Generate(&Callback, !(dwSwitches & SWITCH_NOOVERWRITE));

  00166	8b 55 f8	 mov	 edx, DWORD PTR _dwSwitches$[ebp]
  00169	83 e2 01	 and	 edx, 1
  0016c	f7 da		 neg	 edx
  0016e	1b d2		 sbb	 edx, edx
  00170	42		 inc	 edx
  00171	52		 push	 edx
  00172	8d 45 d0	 lea	 eax, DWORD PTR _Callback$[ebp]
  00175	50		 push	 eax
  00176	8d 4d d8	 lea	 ecx, DWORD PTR _Project$[ebp]
  00179	e8 00 00 00 00	 call	 ?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z ; CWaveBankProject::Generate
  0017e	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L49042:

; 536  :     }
; 537  : 
; 538  :     //
; 539  :     // Success
; 540  :     //
; 541  : 
; 542  :     if(SUCCEEDED(hr) && !(dwSwitches & SWITCH_NOLOGO))

  00181	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00185	7c 17		 jl	 SHORT $L49044
  00187	8b 4d f8	 mov	 ecx, DWORD PTR _dwSwitches$[ebp]
  0018a	83 e1 02	 and	 ecx, 2
  0018d	85 c9		 test	 ecx, ecx
  0018f	75 0d		 jne	 SHORT $L49044

; 543  :     {
; 544  :         printf("\r\nSuccess!\r\n\r\n");

  00191	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@EGHL@?$AN?6Success?$CB?$AN?6?$AN?6?$AA@ ; `string'
  00196	e8 00 00 00 00	 call	 _printf
  0019b	83 c4 04	 add	 esp, 4
$L49044:

; 545  :     }
; 546  : 
; 547  :     return hr;

  0019e	8b 55 ec	 mov	 edx, DWORD PTR _hr$[ebp]
  001a1	89 55 cc	 mov	 DWORD PTR $T49185[ebp], edx
  001a4	8d 4d d8	 lea	 ecx, DWORD PTR _Project$[ebp]
  001a7	e8 00 00 00 00	 call	 ??1CWaveBankProject@@UAE@XZ ; CWaveBankProject::~CWaveBankProject
  001ac	8b 45 cc	 mov	 eax, DWORD PTR $T49185[ebp]

; 548  : }

  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c3		 ret	 0
$L49187:
  001b3	00 00 00 00	 DD	 $L49030
  001b7	00 00 00 00	 DD	 $L49029
  001bb	00 00 00 00	 DD	 $L49031
$L49186:
  001bf	00		 DB	 0
  001c0	02		 DB	 2
  001c1	01		 DB	 1
  001c2	02		 DB	 2
  001c3	02		 DB	 2
  001c4	02		 DB	 2
  001c5	02		 DB	 2
  001c6	02		 DB	 2
  001c7	02		 DB	 2
  001c8	02		 DB	 2
  001c9	02		 DB	 2
  001ca	02		 DB	 2
  001cb	02		 DB	 2
  001cc	02		 DB	 2
  001cd	02		 DB	 2
  001ce	02		 DB	 2
  001cf	02		 DB	 2
  001d0	02		 DB	 2
  001d1	02		 DB	 2
  001d2	02		 DB	 2
  001d3	02		 DB	 2
  001d4	02		 DB	 2
  001d5	02		 DB	 2
  001d6	02		 DB	 2
  001d7	02		 DB	 2
  001d8	02		 DB	 2
  001d9	02		 DB	 2
  001da	02		 DB	 2
  001db	02		 DB	 2
  001dc	02		 DB	 2
  001dd	02		 DB	 2
  001de	02		 DB	 2
  001df	00		 DB	 0
  001e0	02		 DB	 2
  001e1	01		 DB	 1
_main	ENDP
_TEXT	ENDS
END
