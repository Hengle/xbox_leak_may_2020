-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\dndbg.c	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dndbg.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\osind.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\caps.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\servprov.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\user.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addtcp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\classfac.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\classfac.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\strutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dplay8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\backend.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\initialize.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
-- 87 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\voice.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\voice.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\strutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\strutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dbginfo.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.dsp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 193 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
29a37,65
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "UNKNOWN_MODULE"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectNet] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNetDebug"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dndbg.c)---()---()---()---()---()---()---()---()---()---()  
.  
.  
30a31
> #include "memlog.h"
36a38,183
> /*******************************************************************************
> 	Debug Logging to VXD.  In order to get this logging, DNET.VXD must be
> 	installed on the system.  This service is only available in the Win9x code
> 	base and can be installed by added the following to the system.ini file
> 	in the 386Enh section
> 
> 	[386Enh]
> 	device=dnet.vxd
> 
> 	This will enable a set of command under the debugger for dumping the
> 	log when broken into the debugger.  The commands can be initiated by
> 	typing .dnet at the ## prompt in the debugger.
> ==============================================================================*/
> /*
> BOOL DeviceIoControl(
> HANDLE hDevice, 			// handle to device of interest
> DWORD dwIoControlCode, 		// control code of operation to perform
> LPVOID lpInBuffer, 			// pointer to buffer to supply input data
> DWORD nInBufferSize, 		// size of input buffer
> LPVOID lpOutBuffer, 		// pointer to buffer to receive output data
> DWORD nOutBufferSize, 		// size of output buffer
> LPDWORD lpBytesReturned, 	// pointer to variable to receive output byte count
> LPOVERLAPPED lpOverlapped 	// pointer to overlapped structure for asynchronous operation
> );
> */
> 
> #define MAX_STRING       240
> #define LOG_SIZE         2000
> #define FIRST_DEBUG_PROC 100
> 
> #define OPEN_DEBUGLOG 	(FIRST_DEBUG_PROC)
> #define WRITE_DEBUGLOG 	(FIRST_DEBUG_PROC+1)
> #define WRITE_STATS     (FIRST_DEBUG_PROC+2)
> #define WSPRINTF		wsprintfA
> 
> typedef struct _LOGENTRY {
> 	CHAR	debuglevel;
> 	CHAR    str[1];
> } LOGENTRY, *PLOGENTRY;
> 
> typedef struct {
> 	UINT	nLogEntries;
> 	UINT    nCharsPerLine;
> } IN_LOGINIT, *PIN_LOGINIT;
> 
> typedef struct {
> 	UINT    hr;
> } OUT_LOGINIT, *POUT_LOGINIT;
> 
> typedef struct {
> 	CHAR	debuglevel;
> 	CHAR    str[1];
> } IN_LOGWRITE, *PIN_LOGWRITE;
> 
> typedef struct {
> 	UINT	hr;
> } OUT_LOGWRITE, *POUT_LOGWRITE;
> 
> 
> HANDLE hLoggingVxd=0;
> HANDLE hLogMutex=0;
> HANDLE hLogFile=0;
> PSHARED_LOG_FILE pLogFile=0;
> 
> /*===========================================================================
> 
> 	Debug Support.
> 
> 	Logging:
> 	========
> 
> 	Debug Logging and playback is designed to operate on both Win9x and
> 	Windows NT (Windows 2000).  On Win9x, a support VXD is used to extend
> 	the kernel debugger.  The VXD (DNET.VXD) is used for both logging and
> 	playback of debug buffers.  In addition to the debug VXD there is also
> 	logging to a shared file.  The shared file logging is played back with
> 	the DNLOG.EXE utility and can be played back on either Windows2000 or
> 	Win9x.
> 
> 	Debug support for dumping structures on Win9x is supported only in the
> 	DNET.VXD component.  Dumping of structures internal to DPLAY can only
> 	be done from the context of a DPLAY thread.  This is because the
> 	addresses are only valid in that context.  Under NT there is (will be)
> 	a debug extension for dumping internal structures.
> 
> 	Debug Logging is controlled by settings in the win.ini file.  Under
> 	the section heading [DirectPlay8].  There are 2 settings:
> 
> 	Debug=9
> 
> 	controls the debug level.  All messages, at or below that debug level
> 	are printed.
> 
> 	The second setting (logging).  If not specified, all debugs are spewed
> 	through the standard DebugPrint and will appear on in DEVSTUDIO if
> 	it is up, or on the kernel debugger if it is running.
> 
> 	log = 0 {no debug output}
> 	log = 1	{spew to console only}
> 	log = 2 {spew to log only}
> 	log = 3 {spew to console and log}
> 
> 	example win.ini...
> 
> 	[DirectPlay8]
> 	Debug=7		; lots of spew
> 	log=2		; don't spew to debug window
> 
> 	[DirectPlay8]
> 	Debug=0		; only fatal errors spewed to debug window
> 
> 	Asserts:
> 	========
> 	Asserts are used to validate assumptions in the code.  For example
> 	if you know that the variable jojo should be > 700 and are depending
> 	on it in subsequent code, you SHOULD put an assert before the code
> 	that acts on that assumption.  The assert would look like:
> 
> 	ASSERT(jojo>700);
> 
> 	Asserts generally will produce 3 lines of debug spew to highlight the
> 	breaking of the assumption.  For testing, you might want to set the
> 	system to break in on asserts.  This is done in the [DirectPlay8] section
> 	of win.ini by setting BreakOnAssert=TRUE
> 
> 	e.g.
> 
> 	[DirectPlay8]
> 	Debug=0
> 	BreakOnAssert=TRUE
> 	Verbose=1
> 
> 	Debug Breaks:
> 	=============
> 	When something really severe happens and you want the system to break in
> 	so that you can debug it later, you should put a debug break in the code
> 	path.  Some people use the philosophy that all code paths must be
> 	verified by hand tracing each one in the debugger.  If you abide by this
> 	you should place a DEBUG_BREAK() in every code path and remove them
> 	from the source as you trace each.  When you have good coverage but
> 	some unhit paths (error conditions) you should force those paths in
> 	the debugger.
> 
> 
> ===========================================================================*/
> 
39c186,193
< DWORD lDebugLevel = 1;	
---
> 
> DWORD lDebugLevel = 0;	
> 
> DWORD dwLogging   = 1;	// 0 => No debug spew
> 						// 1 => Spew to console only (default)
> 						// 2 => Spew to log only
> 						// 3 => Spew to console and log
> 
41d194
< DWORD bVerbose = FALSE;	// if TRUE, all file/line/module information is printed and logged.
42a196,202
> // if TRUE, all file/line/module information is printed and logged.
> DWORD bVerbose = FALSE;	
> BOOL  bLiveLogging = FALSE;
> 
> // if TRUE messages printed with the LOGPF will be logged, if FALSE they're ignored
> DWORD  lOutputLog = 0;
> 
63a224,347
> // open up a channel to the DirectNet VXD (DNET.VXD) that will allows
> // the log to be written to the VxD through DeviceIoControl calls.  The
> // log in this case is accessible in the Win9x kernel debugger through
> // the .dnet debugger extensions.
> void InitDirectNetVxd(void)
> {
> 	IN_LOGINIT In;
> 	OUT_LOGINIT Out;
> 	UINT cbRet;
> 
> 	// note we rely on the system automatically closing this
> 	// handle for us when the user mode application exits.
> 	hLoggingVxd = CreateFileA("\\\\.\\DNET",0,0,0,0,0,0);
> 
> 	if(hLoggingVxd != INVALID_HANDLE_VALUE){
> 
> 		In.nCharsPerLine=MAX_STRING;
> 		In.nLogEntries=5000;
> 		DeviceIoControl(hLoggingVxd,
> 						OPEN_DEBUGLOG,
> 						&In,sizeof(In),
> 						&Out, sizeof(Out),
> 						&cbRet, NULL);
> 	} else {
> 		hLoggingVxd=0;
> 	}
> }
> 
> // Write a string to the log in the debug support VxD.  This only
> // operates on Win9x, when the DNET.VXD is installed.
> static void VxdLogString( LPSTR str )
> {
> 	char logstring[MAX_STRING+sizeof(LOGENTRY)];
> 	int  i=0;
> 	PLOGENTRY pLogEntry=(PLOGENTRY)&logstring;
> 	UINT rc;
> 	UINT cbRet;
> 	int maxlen = MAX_STRING+sizeof(LOGENTRY);
> 
> 	if(hLoggingVxd && str){
> 		while(str[i] && i < maxlen)
> 			i++;
> 		pLogEntry->debuglevel=0;
> 		memcpy(pLogEntry->str,str,i+1);
> 		DeviceIoControl(hLoggingVxd,WRITE_DEBUGLOG,pLogEntry,i+sizeof(LOGENTRY), &rc, sizeof(rc), &cbRet, NULL);
> 	}
> }
> 
> // Create a shared file for logging information on the fly
> // This support allows the current log to be dumped from the
> // user mode DPLOG.EXE application.  This is useful when debugging
> // in MSSTUDIO or in NTSD.  When the DPLOG.EXE is invoke, note that
> // the application will get halted until the log is completely dumped
> // so it is best to dump the log to a file.
> static BOOL InitMemLogString(VOID)
> {
> 	static BOOL inited = FALSE;
> 
> 	if(!inited){
> 		hLogFile=CreateFileMappingA(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, DPLOG_SIZE, BASE_LOG_FILENAME);
> 		hLogMutex=CreateMutexA(NULL,FALSE,BASE_LOG_MUTEXNAME);
> 		pLogFile=(PSHARED_LOG_FILE)MapViewOfFile(hLogFile, FILE_MAP_ALL_ACCESS,0,0,0);
> 
> 		if(!hLogFile || !hLogMutex || !pLogFile){
> 			if(hLogFile){
> 				CloseHandle(hLogFile);
> 				hLogFile=0;
> 			}
> 			if(hLogMutex){
> 				CloseHandle(hLogMutex);
> 				hLogMutex=0;
> 			}
> 			if(pLogFile){
> 				UnmapViewOfFile(pLogFile);
> 				pLogFile=NULL;
> 			}
> 			return FALSE;
> 		} else {
> 			inited = TRUE;
> 			pLogFile->nEntries = DPLOG_NUMENTRIES;
> 			pLogFile->cbLine   = DPLOG_ENTRYSIZE;
> 			pLogFile->iWrite   = 0;
> 			pLogFile->cInUse   = 0;
> 		}
> 	}
> 	return TRUE;
> }
> 
> // Log a string to a shared file.  This file can be dumped using the
> // DPLOG.EXE utility.
> static void MemLogString(LPSTR str)
> {
> 	PLOG_ENTRY pEntry;
> 	DWORD cbCopy;
> 
> 	if(!hLogFile){
> 		if(!InitMemLogString()){
> 			return;
> 		}
> 	}
> 
> 	WaitForSingleObject(hLogMutex,INFINITE);
> 
> 	pEntry=(PLOG_ENTRY)(((PUCHAR)(pLogFile+1))+(pLogFile->iWrite*(sizeof(LOG_ENTRY)+DPLOG_ENTRYSIZE)));
> 	pEntry->hThread=GetCurrentThreadId();
> 	pEntry->tLogged=timeGetTime();
> 	pEntry->DebugLevel=0;
> 
> 	cbCopy=strlen(str)+1;
> 	if(cbCopy > DPLOG_ENTRYSIZE){
> 		str[DPLOG_ENTRYSIZE]=0;
> 		cbCopy=DPLOG_ENTRYSIZE;
> 	}
> 	memcpy(pEntry->str, str, cbCopy);
> 
> 	if(pLogFile->iWrite+1 > pLogFile->cInUse){
> 		pLogFile->cInUse=pLogFile->iWrite+1;
> 	}
> 
> 	pLogFile->iWrite = (pLogFile->iWrite+1) % pLogFile->nEntries;
> 	ReleaseMutex(hLogMutex);
> 
> }
> 
66a351,352
> 	DWORD lSpecificLevel;
> 
70a357,392
>     lDebugLevel = (signed int) GetProfileIntA( PROF_SECT, "debug", 0 );
>     lSpecificLevel = (signed int) GetProfileIntA( PROF_SECT, DPF_MODULE_NAME, -1);
>     if(lSpecificLevel != -1){
>     	lDebugLevel = lSpecificLevel;
>     }
>     dwLogging   = (signed int) GetProfileIntA( PROF_SECT, "log" , 0);
>     bBreakOnAssert = (signed int) GetProfileIntA( PROF_SECT, "BreakOnAssert", 0);
>     bVerbose = (signed int) GetProfileIntA( PROF_SECT, "Verbose", 0);
> 
>     lOutputLog = (signed int) GetProfileIntA( PROF_SECT, "OutputLog", 0);
> 
> 	switch(dwLogging){
> 		case 0:
> 			bLiveLogging=FALSE;
> 			break;
> 		case 1:
> 			bLiveLogging=TRUE;
> 			break;
> 		case 2:
> 			bLiveLogging=FALSE;
> 			break;
> 		case 3:
> 			bLiveLogging=TRUE;
> 			break;
> 		default:
> 			break;
> 	}
> 	if((dwLogging >= 2)||(lOutputLog > 0)){
> 		// Doing log based logging, so try to find the VXD and open
> 		// the shared logging file.
> 		InitDirectNetVxd();
> 
> 		// Do logging also based on shared memory file.
> 		InitMemLogString();	
> 	}
> 
77a400,405
> 	if(hLogFile){
> 		CloseHandle(hLogFile);
> 	}
> 	if(hLoggingVxd){
> 		CloseHandle(hLoggingVxd);
> 	}	
113a442,443
> 		if(bLiveLogging)
> 		{
116a447,457
> 		}
> 
> 		if(hLoggingVxd){
> 			// log to vxd
> 			VxdLogString( str );
> 		}
> 
> 		if(dwLogging >= 2){
> 			// log to shared file
> 			MemLogString( str );
> 		}
158c499
< 	WSPRINTF(cMsg+strlen( cMsg ), szFormat, argptr);
---
> 	WSPRINTF(cMsg+lstrlenA( cMsg ), szFormat, argptr);
210c551
< 	WVSPRINTF(cMsg+strlen( cMsg ), szFormat, argptr);
---
> 	WVSPRINTF(cMsg+lstrlenA( cMsg ), szFormat, argptr);
218a560,595
> /*
> **	LogPrintf copies a quick Log Entry to the
> **
> */
> 
> //  5/23/2000(RichGr): IA64: Change DWORD to DWORD_PTR.
> void LogPrintf(volatile DWORD_PTR dwDetail, ...)
> {
> 	CHAR  cMsg[1000];
> 	LPSTR szFormat;
> 
> 	va_list argptr;
> 
> 	if(lOutputLog < dwDetail){
> 		LeaveCriticalSection(&csDPF);
> 		return;
> 	}
> 
> 	//EnterCriticalSection(&csDPF);
> 
> 	va_start(argptr, dwDetail);
> 	szFormat = (LPSTR) va_arg(argptr, DWORD_PTR);
> 
> 	cMsg[0]=0;
> 
> 	WSPRINTF(cMsg,"%s: ",g_szModName);
> 
> 	WVSPRINTF(cMsg+lstrlenA( cMsg ), szFormat, argptr);
> 
> 	MemLogString( (LPSTR) cMsg );
> 
> 	LeaveCriticalSection(&csDPF);
> 
> 	va_end(argptr);
> }
> 
225a603,604
> #define ASSERT_BREAK_SECTION "BreakOnAssert"
> #define ASSERT_BREAK_DEFAULT FALSE
248c627
<     if( bBreakOnAssert )
---
>     if( bBreakOnAssert || GetProfileIntA( PROF_SECT, ASSERT_BREAK_SECTION, ASSERT_BREAK_DEFAULT ) )
317a697,717
> }
> 
> BOOL IsValidStringA( const CHAR * const szString )
> {
> 	const char *szTmpLoc = szString;
> 	
> 	if( szString == NULL )
> 	{
> 		return FALSE;
> 	}
> 
> 	_try
> 	{
> 		for( ; *szTmpLoc ; szTmpLoc++ );
> 	}
> 	_except( EXCEPTION_EXECUTE_HANDLER )
> 	{
> 		return FALSE;
> 	}
> 
> 	return TRUE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dndbg.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30,32
> 	#if defined( _WIN32 ) && !defined(WINNT) && defined(_X86_)
> 		#define DEBUG_BREAK()       _try { _asm { int 3 } } _except (EXCEPTION_EXECUTE_HANDLER) {;}
> 	#else
30a34
> 	#endif
102a107
> extern BOOL IsValidStringA( const CHAR * const swzString );
111a117
> extern void LogPrintf(volatile DWORD_PTR dwDetail, ...);
112a119
> #define DNVALID_STRING_A(a)		IsValidStringA(a)
127c134,138
< #define	LOGPF		DebugSetLineInfo(__FILE__,__LINE__,DPF_MODNAME),DebugPrintf
---
> #ifdef DPF_SUBCOMP_MASK
> 	#define DPFSC if(DPF_SUBCOMP_MASK & DPF_SUBCOMP_BIT)DebugSetLineInfo(__FILE__,__LINE__,DPF_MODNAME),if(DPF_SUBCOMP_MASK & DPF_SUBCOMP_BIT)DebugPrintf
> #else
> 	#define DPFSC DPF
> #endif
128a140,141
> #define	LOGPF		DebugSetLineInfo(__FILE__,__LINE__,DPF_MODNAME),LogPrintf
> 
133a147
> 	#define DNVALID_STRING_A(a)			(TRUE)
139a154
> 	#define DPFSC()
148,149c163,166
< #define WVSPRINTF wvsprintf
< #define STRLEN   strlen
---
> #define WVSPRINTF wvsprintfA
> #define STRLEN   lstrlenA
> 
> #define PROF_SECT "DirectPlay8"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
78a83,92
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34,37
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
35a40
> #endif	// _WIN64
40a46,52
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
60a73
> #ifdef	_X86_
61a75,77
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
94a111,116
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
103a126,128
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
121a147
> 	OSVERSIONINFO	OSVersionInfo;
122a149
> 
130a158,186
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
229a286,287
> 		switch ( DNGetOSType() )
> 		{
232a291,292
> 			case VER_PLATFORM_WIN32_NT:
> 			{
256a317,327
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
289a361,392
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
360a464
> //#ifdef	_WIN32
389a494
> //#endif	// _WIN32
390a496,517
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
416a544
> #ifdef	_X86_
428a557,607
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
454a634,635
> #ifdef	_X86_
> 
466a648,694
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
687a916,918
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
704a936
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
795a1028
> 		pMemoryLink->NoteCurrentCallStack();
905a1139
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
939,940c1173,1184
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
944a1189,1197
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
975a1229
> 	DWORD		dwDisplayFlags;
976a1231
> 
979a1235
> 	fDisplayLeaks = TRUE;
982a1239,1240
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
989a1248
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1002,1003c1261
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1004a1263,1313
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1017a1327,1470
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1112a1566
> 	static	BOOL	fDisplayCallStacks = TRUE;
1130a1585,1588
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1136a1595,1599
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1141,1142c1604,1636
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1175a1670
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	"CallStack.h"
> 
29a32,34
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
53a59
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
85a92,101
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
41,42c41
< TARGETLIBS=
< # $(TARGETLIBS)
---
> TARGETLIBS=$(TARGETLIBS)
72a72
>         creg.cpp \
79c79
< C_DEFINES= $(C_DEFINES) /D_LIB /DWIN32 /D_MT /DCINTERFACE /DUNICODE
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
38d37
< #include <wchar.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69a70
> #include "DVoice.h"
100a102
> #include "Voice.h"
102c104,106
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
182c186
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
205c209
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
452c456
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
468c472
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
471c475
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
1467a1472,1480
> 
> 				break;
> 			}
> 
> 		case DN_MSG_INTERNAL_VOICE_SEND:
> 			{
> 				DPF(7,"Received: DN_MSG_INTERNAL_VOICE_SEND");
> 
> 				hResultCode = Voice_Receive( pdnObject, pConnection->GetDPNID(), 0, pOpBuffer, dwOpBufferSize );	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\caps.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
54,55d53
< extern HRESULT WINAPI DirectPlay8SPCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
< 
574c572,573
<     	hr = DirectPlay8SPCreate( &IID_IDP8ServiceProvider, reinterpret_cast<void**>(&pSP), NULL );
---
>     	hr = CoCreateInstance(*pguidSP, NULL, CLSCTX_INPROC_SERVER, IID_IDP8ServiceProvider,
>     		                  reinterpret_cast<void**>(&pSP) );
651c650,651
<     	hr = DirectPlay8SPCreate( &IID_IDP8ServiceProvider, reinterpret_cast<void**>(&pSP), NULL );
---
>     	hr = CoCreateInstance(*pguidSP, NULL, CLSCTX_INPROC_SERVER, IID_IDP8ServiceProvider,
>     		                  reinterpret_cast<void**>(&pSP) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
42a43
> #include "DVoice.h"
71a73,74
> #include "dvoice.h"
> #include "voice.h"
119a123
> extern IDirectPlayVoiceTransportVtbl DN_VoiceTbl;
232a237,257
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
> 
252a278
> 	pdnObject->pIDP8LobbiedApplication = NULL;
264a291,294
> 	// Voice Additions
>     pdnObject->lpDxVoiceNotifyClient = NULL;	
>     pdnObject->lpDxVoiceNotifyServer = NULL;
> 
293a324,330
> 	if (!DNInitializeCriticalSection(&(pdnObject->csVoice)))
> 	{
> 		DPFERR("DNInitializeCriticalSection() failed");
> 		DNCF_FreeObject(pdnObject);
> 		return(E_OUTOFMEMORY);
> 	}
> 
589a627,629
> 	// Voice Critical Section
> 	DNDeleteCriticalSection(&pdnObject->csVoice);
> 
860a901,905
> 	}
> 	else if (IsEqualIID(riid,IID_IDirectPlayVoiceTransport))
> 	{
> 		DPF(7,"riid = IID_IDirectPlayVoiceTransport");
> 		lpVtbl = &DN_VoiceTbl;
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56d55
< #include <wchar.h>
94c93
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
107a108,109
> #include "DPLobby8.h"
> #include "DVoice.h"
132a135
> #include "DNMisc.h"
139a143
> #include "Voice.h"
141a146,148
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
143,144d149
< #include <mmsystem.h>
< #include <wchar.h>
173d177
< extern HRESULT WINAPI DirectPlay8AddressCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
800,802c804,808
< 		if ((hResultCode = DirectPlay8AddressCreate( &IID_IDirectPlay8Address,
<                                                      reinterpret_cast<void**>(&pIDevice),
<                                                      NULL)) != S_OK)
---
> 		if ((hResultCode = CoCreateInstance(CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>(&pIDevice))) != S_OK)
877a884,887
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1419a1430,1434
> 	//
> 	//	Notify Voice
> 	//
> 	Voice_Notify( pdnObject, DVEVENT_STOPSESSION, 0, 0 );
> 
1980,1981c1995
< // BUGBUG [mgere] [xbox] Temporarily removed until a CoCreateGuid call is implemented
< //	CoCreateGuid(&pdnObject->dnApplicationDescription.guidInstance);	
---
> 	CoCreateGuid(&pdnObject->dnApplicationDescription.guidInstance);	
2053a2068,2076
> 	//	Inform DPNSVR of LISTENs
> 	//
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		DPF(3,"Registering with DPNSVR");
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
> 	//
3329c3352
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
3405,3407c3428,3432
< 		if ((hResultCode = DirectPlay8AddressCreate( &IID_IDirectPlay8Address,
<                                                      reinterpret_cast<void**>(&pIHost),
<                                                      NULL)) != S_OK)
---
> 		if ((hResultCode = CoCreateInstance(CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>(&pIHost))) != DPN_OK)
3434c3459
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
3438c3463
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4081c4106
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
4084c4109,4177
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%lx], pIDP8LobbiedApplication [0x%lx], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_EXIT( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_EXIT(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_EXIT(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYINITIALIZED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_UNINITIALIZED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
4362a4456,4560
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	HRESULT					hResultCode;
> 	HRESULT					hrRegister;
> 	CAsyncOp				*pParent;
> 	CAsyncOp				*pAsyncOp;
> 	CBilink					*pBilink;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR			DP8ABuffer[512];
> 	DWORD			DP8ASize;
> #endif
> 
> 	//
> 	//	Default error returned
> 	//
> 	hrRegister = DPNERR_GENERIC;
> 
> 	//
> 	//	Get LISTEN AsyncOp parent from DirectNet object and add a RefCount
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListen == NULL)
> 	{
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 		goto Exit;
> 	}
> 	pdnObject->pListen->AddRef();
> 	pParent = pdnObject->pListen;
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Lock the parent so that the child bilink list doesn't change
> 	//
> 	pParent->Lock();
> 
> 	//
> 	//	Attempt to crack each child LISTEN and inform DPNSVR of the address
> 	//
> 	pBilink = pParent->m_bilinkChildren.GetNext();
> 	while (pBilink != &pParent->m_bilinkChildren)
> 	{
> 		pAsyncOp = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 		DNASSERT(pAsyncOp->GetProtocolHandle() != NULL);
> 
> 		spInfo.hEndpoint = pAsyncOp->GetProtocolHandle();
> 		spInfo.pAddress = NULL;
> 		spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 
> 		if (DNPGetListenAddressInfo(pAsyncOp->GetProtocolHandle(),&spInfo) == DPN_OK)
> 		{
> 			DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 			DP8ASize = 512;
> 			spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 			DPF(4,"Listen address [%s]",DP8ABuffer);
> 
> 			// We re-try the registration to catch the case where DPNSVR is shutting
> 			// down while we are trying to register.  Unlikely but has to be handled.
> 			//
> #endif
>             for( DWORD dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
>             {
>     			hResultCode = DPNSVR_Register( &pdnObject->dnApplicationDescription, spInfo.pAddress );
>     			if( FAILED( hResultCode ) )
>     			{
>     				if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     				{
> 	    				DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    				Sleep( DPNSVR_REGISTER_SLEEP );    				
>     				}
>     				else
>     				{
> 	    				DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    			}
>     			}
>     			else
>     			{
>     				// Return DPN_OK if we succeed even once
>     				hrRegister = hResultCode;
>     				break;
>     			}
>             }
> 			
> 			spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 			spInfo.pAddress = NULL;
> 		}
> 
> 		pBilink = pBilink->GetNext();
> 	}
> 
> 	pParent->Unlock();
> 
> 	pParent->Release();
> 	pParent = NULL;
> 
> Exit:
> 	DPF(4,"Returning: [0x%lx]",hrRegister);
> 	return( hrRegister );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
195c195
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
205a206,207
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
84d83
< #include <wchar.h>
86,91d84
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
< extern HRESULT WINAPI DirectPlay8AddressCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
< 
208,210c201,205
< 		if ((hResultCode = DirectPlay8AddressCreate( &IID_IDirectPlay8Address,
<                                                      reinterpret_cast<void**>(&pAddress),
<                                                      NULL)) != S_OK)
---
> 		if ((hResultCode = CoCreateInstance(CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>(&pAddress))) != S_OK)
219,220c214,215
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
662c657
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
673c668
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
830c825
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
855,856c850
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
860c854
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
987,988c981,982
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
2061c2055
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2095c2089
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectNet"
> 
> /*
29a37,65
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "CORE"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectNet] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNetCore"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
158a159,160
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
> typedef struct IDirectPlayVoiceNotify			*PDIRECTPLAYVOICENOTIFY;
195a198,205
> //
> // Voice Additions
> //
> // this is the number of clients of IDirectXVoice in this process
> // this is actually a ridiculously large number of client slots.
> //
> #define MAX_VOICE_CLIENTS	32	
> 
241a252,253
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 
261a274,278
> 	// Voice Additions
> 	PDIRECTPLAYVOICENOTIFY	lpDxVoiceNotifyServer;
> 	PDIRECTPLAYVOICENOTIFY  lpDxVoiceNotifyClient;
> 	DNCRITICAL_SECTION		csVoice;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
40a41
> #include "DNMisc.h"
43c44
< //#include "CReg.h"
---
> #include "CReg.h"
55c56,65
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
70,71c80
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
73c82,92
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
75c94,97
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> //	CServiceProvider	*pSP;
83a106,108
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> //	pSP = NULL;
88,89c113,118
< 	hResultCode = packedBuffer.AddToBack("DirectPlay8 TCP/IP Service Provider",(strlen("DirectPlay8 TCP/IP Service Provider")+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
91,92c120,147
< 	hResultCode = packedBuffer.AddToBack(&guidSP,sizeof(GUID));
< 	dnSpInfo.pGuid = static_cast<GUID*>(packedBuffer.GetTailAddress());
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
94,95c149,162
< 	dnSpInfo.dwFlags = 0;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
96a164,255
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guid,NULL);
> 			if (hResultCode != DPN_OK)
> 			{
> 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
> 				SubEntry.Close();
> 				dwEnumIndex++;
> 				dwKeyLen = dwMaxKeyLen;
> 				hResultCode = DPN_OK; // override return code
> 				continue;
> 			}
> 			else
> 			{
> 				DN_SPRelease(pdnObject,&guid);
> 			}
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> 
> 		hResultCode = packedBuffer.AddToBack(&guid,sizeof(GUID));
> 		dnSpInfo.pGuid = static_cast<GUID*>(packedBuffer.GetTailAddress());
> 
> 		dnSpInfo.dwFlags = 0;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
100c259
< 		DPF(7,"Buffer too small");
---
> 		DPF(5,"Buffer too small");
103c262
< 		goto Exit;
---
> 		goto Failure;
107c266,267
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
111a272,276
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
113c278
< 	DPF(3,"Returning: [0x%lx]",hResultCode);
---
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
114a280,301
> 
> Failure:
> 
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	goto Exit;
128,132d314
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
214,216c396,400
< 		if ((hResultCode = DirectPlay8SPCreate( IID_IDP8ServiceProvider,
<                                                 (LPVOID*)&pDNSP,
<                                                 NULL)) != DPN_OK)
---
> 		if ((hResultCode = CoCreateInstance(*lpguidSP,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDP8ServiceProvider,
> 											(LPVOID*)&pDNSP)) != DPN_OK)
280d463
< */	return(E_FAIL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
68a69,71
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
522a526,545
> 
> 	// Register with DPNSVR
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		BOOL	fCoUninitialize = FALSE;
> 
> 		DPF( 7, "Asking for DPNSVR to start listening for us.." );
> 
> 		if (CoInitialize(NULL) == S_OK)
> 		{
> 			fCoUninitialize = TRUE;
> 		}
> 
> 		DNRegisterWithDPNSVR(pdnObject);
> 
> 		if (fCoUninitialize)
> 		{
> 			CoUninitialize();
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56,57d55
< extern HRESULT WINAPI DirectPlay8AddressCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
< 
365,366c363
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
378,379c375,376
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
455c452,456
< 		hResultCode = DirectPlay8AddressCreate( &IID_IDirectPlay8Address, reinterpret_cast<PVOID*>( &pAddress ), NULL);
---
> 		hResultCode = CoCreateInstance(	CLSID_DirectPlay8Address,
> 										NULL,
> 										CLSCTX_INPROC_SERVER,
> 										IID_IDirectPlay8Address,
> 										reinterpret_cast<PVOID*>(&pAddress));
462c463
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
563d563
< }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29
> #include "DVoice.h"
51a53
> #include "voice.h"
54a57
> extern IDirectPlayVoiceTransportVtbl DN_VoiceTbl;
171c174
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
179a183,189
>     if( pIDP8LobbiedApplication == NULL ||
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
886c896,898
< 			DPF( 0, "Cannot specify NULL Host address" );
---
> 		if ( !(dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING) )
> 		{
> 			DPF( 0, "Cannot specify NULL Host address without specifying DPNENUMHOSTS_OKTOQUERYFORADDRESSING" );
887a900
> 		}
943c956
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1643c1656
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
1944c1957
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
2193a2207
> 	   pIntList->lpVtbl != &DN_VoiceTbl &&
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
41c41
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
115c114
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
58d57
< #include <wchar.h>
107c106
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\servprov.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56,57d55
< extern HRESULT WINAPI DirectPlay8SPCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
< 
74,76c72,76
< 	if ((hResultCode = DirectPlay8SPCreate( &IID_IDP8ServiceProvider,
<                                             reinterpret_cast<void**>(&m_pDNSP),
<                                             NULL)) != DPN_OK)
---
> 	if ((hResultCode = CoCreateInstance(*pguid,
> 										NULL,
> 										CLSCTX_INPROC_SERVER,
> 										IID_IDP8ServiceProvider,
> 										reinterpret_cast<void**>(&m_pDNSP))) != DPN_OK)
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
41,42c41
< TARGETLIBS= \
< # $(TARGETLIBS) \
---
> TARGETLIBS=$(TARGETLIBS) \
45,46c44,52
<            ..\..\dnaddress\daytona\obj$(BUILD_ALT_DIR)\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
---
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
48,50c54
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
---
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
63c67
< INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
64a69
> 
103a109
>          ..\voice.cpp \
115c121
< C_DEFINES= $(C_DEFINES) /D_USRDLL /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DUNICODE
---
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
121c127
< DLLENTRY=DllMain
---
> DLLENTRY=_DllMainCRTStartup
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\user.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
37a38
> #include "DVoice.h"
47a49
> #include "voice.h"
164a167,168
> 	Voice_Notify( pdnObject, DVEVENT_ADDPLAYER, dpnid, 0 );
> 
198a203,204
> 	Voice_Notify( pdnObject, DVEVENT_REMOVEPLAYER, dpnid, 0 );
> 
230a237,238
> 	Voice_Notify( pdnObject, DVEVENT_CREATEGROUP, dpnid, 0 );
> 
265a274,275
> 	Voice_Notify( pdnObject, DVEVENT_DELETEGROUP, dpnid, 0 );
> 
299a310,311
> 	Voice_Notify( pdnObject, DVEVENT_ADDPLAYERTOGROUP, dpnidGroup, dpnidPlayer );
> 
335a348,349
> 	Voice_Notify( pdnObject, DVEVENT_REMOVEPLAYERFROMGROUP, dpnidGroup, dpnidPlayer );
> 
603a618,619
> 
> 	Voice_Notify( pdnObject, DVEVENT_MIGRATEHOST, dpnidNewHost, 0 );
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
38d37
< #include "classfac.h"
251d249
< /* BUGBUG: [mgere] [xbox] Removed this function.
276d273
< */  return DPNERR_UNSUPPORTED;
287,288c284,345
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		hr = AnsiToWide( szShadowBuffer, pszAddress, dwStrSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
391c448
<     hr = DirectPlay8AddressCreate( &IID_IDirectPlay8Address, (void **) &lpdp8Address, NULL);
---
>     hr = CoCreateInstance( CLSID_DirectPlay8Address, NULL, CLSCTX_INPROC_SERVER  , IID_IDirectPlay8Address, (void **) &lpdp8Address );
431,432c488,556
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%x pdwAddressSize = 0x%x (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		hr = WideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
847c971,972
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
866a992,1005
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
958a1098,1529
> 
> #if 0
> // Use the following code to create ANSI versions of the core functions.  (If required)
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8A_GetComponentByNameW"
> STDMETHODIMP DP8A_GetComponentByNameW( IDirectPlay8Address *pInterface, const WCHAR * const pwszTag, void * pComponentBuffer, PDWORD pdwComponentSize, PDWORD pdwDataType )
> {
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (PDP8ADDRESSOBJECT) GET_OBJECT_FROM_INTERFACE( pInterface );
> 	HRESULT hr;
> 	CHAR *szTag;
> 	DWORD dwComponentSize = 0,
> 	        dwDataType = 0,
> 	        dwNameLen = 0;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pwszTag == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer for tag" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( pdwComponentSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwComponentSize, sizeof(DWORD)) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid Pointer to data size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( *pdwComponentSize > 0 &&
> 	   (pComponentBuffer == NULL || !DNVALID_WRITEPTR( pComponentBuffer, *pdwComponentSize ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to component data" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( pdwDataType == NULL ||
> 	   !DNVALID_READPTR( pdwDataType, sizeof(DWORD)) )	
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to data type" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_W( pwszTag ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for tag" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );				
> 	}	
> 	
> 	DPF( DP8A_PARAMLEVEL, "pwszTag = 0x%x pComponentBuffer = 0x%x, pdwComponentSize = 0x%x (%u), pdwDataType = 0x%x",
> 		pwszTag, pComponentBuffer, pdwComponentSize, *pdwComponentSize, pdwDataType );
> 
> 	dwNameLen = wcslen(pwszTag)+1;
> 
> 	szTag = new char[dwNameLen];
> 
> 	if( szTag == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Error on memory allocation" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto GETCOMPONENT_RETURN;
> 	}
> 
> 	hr = WideToAnsi( szTag, pwszTag, dwNameLen );
> 	if( FAILED( hr ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Error converting key hr=0x%x", hr );
> 		hr = DPNERR_CONVERSION;		
> 		goto GETCOMPONENT_RETURN;
> 	}
> 
> 	hr = pdp8Address->GetElement( szTag, NULL, &dwComponentSize, &dwDataType );	
> 
> 	if( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Error calling GetElement hr=0x%x", hr );
> 		goto GETCOMPONENT_RETURN;	
> 	}
> 
> 	if( dwDataType == DPNA_DATATYPE_STRING )
> 	{
> 		if( pComponentBuffer != NULL )
> 		{
> 			*pdwComponentSize /= 2;
> 			CHAR *szTmpComponent = new char[*pdwComponentSize];
> 
> 			if( szTmpComponent == NULL )
> 			{
> 				DPF( DP8A_ERRORLEVEL, "Error allocating memory for conversion hr" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto GETCOMPONENT_RETURN;
> 			}
> 
> 			hr = pdp8Address->GetElement( szTag, szTmpComponent, pdwComponentSize, pdwDataType );			
> 
> 			if( hr == DPN_OK )
> 			{
> 				hr = AnsiToWide( (WCHAR *) pComponentBuffer, szTmpComponent, *pdwComponentSize );
> 
> 				*pdwComponentSize *= 2;			
> 	
> 				if( FAILED( hr ) )
> 				{
> 					delete [] szTmpComponent;
> 					DPF( DP8A_ERRORLEVEL, "Error converting from ANSI to WIDE hr=0x%x", hr );
> 					hr = DPNERR_CONVERSION;
> 					goto GETCOMPONENT_RETURN;
> 				}
> 			}
> 			else
> 			{
> 				*pdwComponentSize *= 2;			
> 			}
> 
> 			delete [] szTmpComponent;
> 
> 		}
> 		else
> 		{
> 			if( pdwComponentSize != NULL )
> 				*pdwComponentSize /= 2;
> 
> 			hr = pdp8Address->GetElement( szTag, pComponentBuffer, pdwComponentSize, pdwDataType );			
> 
> 			if( pdwComponentSize != NULL )
> 				*pdwComponentSize *= 2;
> 		}
> 	}
> 	else
> 	{
> 		hr = pdp8Address->GetElement( szTag, pComponentBuffer, pdwComponentSize, pdwDataType );				
> 	}
> 
> GETCOMPONENT_RETURN:
> 
> 	if( szTag != NULL )
> 		delete [] szTag;
> 		
> 	DP8A_RETURN( hr );
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8A_GetComponentByIndexW"
> STDMETHODIMP DP8A_GetComponentByIndexW( IDirectPlay8Address *pInterface,
> 	const DWORD dwComponentID, WCHAR * pwszTag, PDWORD pdwNameLen,
> 	void * pComponentBuffer, PDWORD pdwComponentSize, PDWORD pdwDataType )
> {
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (PDP8ADDRESSOBJECT) GET_OBJECT_FROM_INTERFACE( pInterface );
> 	HRESULT hr;
> 	CHAR *szTag;
> 	DWORD dwNameLen = 0,
> 	        dwComponentSize = 0,
> 	        dwDataType = 0;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwNameLen == NULL || !DNVALID_WRITEPTR( pdwNameLen, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for pdwNameLen" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}	
> 
> 	if( *pdwNameLen != 0 &&
> 	   (pwszTag == NULL || !DNVALID_WRITEPTR( pwszTag, *pdwNameLen*sizeof(WCHAR) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for pwszTag" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( pdwComponentSize == NULL || !DNVALID_WRITEPTR( pdwComponentSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for pdwComponentSize" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( *pdwComponentSize != 0 &&
> 	   (pComponentBuffer == NULL || !DNVALID_WRITEPTR( pComponentBuffer, *pdwComponentSize ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for pwszTag" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}	
> 
> 	if( pdwDataType == NULL || !DNVALID_WRITEPTR( pdwDataType, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for pdwDataType" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}	
> 
> 	if( pdwNameLen != NULL &&
> 	   *pdwNameLen > 0 )
> 	{
> 		szTag = new char[*pdwNameLen];
> 
> 		dwNameLen = *pdwNameLen;
> 	}
> 	else
> 	{
> 		szTag = NULL;
> 	}
> 
> 	hr = pdp8Address->GetElement( dwComponentID, szTag, &dwNameLen, NULL, &dwComponentSize, &dwDataType );	
> 
> 	if( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Error calling GetElement hr=0x%x", hr );
> 		goto GETCOMPONENT_RETURN;	
> 	}
> 
> 	if( dwDataType == DPNA_DATATYPE_STRING )
> 	{
> 		if( pdwComponentSize != NULL && pComponentBuffer != NULL )
> 		{
> 			*pdwComponentSize /= 2;
> 			CHAR *szTmpComponent = new char[*pdwComponentSize];
> 
> 			if( szTmpComponent == NULL )
> 			{
> 				DPF( DP8A_ERRORLEVEL, "Error allocating memory for conversion hr" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto GETCOMPONENT_RETURN;
> 			}
> 
> 			hr = pdp8Address->GetElement( dwComponentID, szTag, pdwNameLen, szTmpComponent, pdwComponentSize, pdwDataType );			
> 
> 			if( hr == DPN_OK )
> 			{
> 				hr = AnsiToWide( (WCHAR *) pComponentBuffer, szTmpComponent, *pdwComponentSize );
> 
> 				*pdwComponentSize *= 2;			
> 	
> 				if( FAILED( hr ) )
> 				{
> 					delete [] szTmpComponent;
> 					hr = DPNERR_CONVERSION;
> 					DPF( DP8A_ERRORLEVEL, "Error converting from ANSI to WIDE hr=0x%x", hr );
> 					goto GETCOMPONENT_RETURN;
> 				}
> 			}
> 			else
> 			{
> 				*pdwComponentSize *= 2;			
> 			}
> 
> 			delete [] szTmpComponent;
> 
> 		}
> 		else
> 		{
> 			if( pdwComponentSize != NULL )
> 				*pdwComponentSize /= 2;
> 
> 			hr = pdp8Address->GetElement( dwComponentID, szTag, pdwNameLen, pComponentBuffer, pdwComponentSize, pdwDataType );			
> 
> 			if( pdwComponentSize != NULL )
> 				*pdwComponentSize *= 2;
> 		}
> 	}
> 	else
> 	{
> 		hr = pdp8Address->GetElement( dwComponentID, szTag, pdwNameLen, pComponentBuffer, pdwComponentSize, pdwDataType );				
> 	}
> 
> 	if( hr == DPN_OK )
> 	{
> 		hr = AnsiToWide( pwszTag, szTag, *pdwNameLen );
> 
> 		if( FAILED( hr ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting tag ANSI to WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 		}
> 	}
> 
> GETCOMPONENT_RETURN:
> 
> 	if( szTag != NULL )
> 		delete [] szTag;
> 		
> 	DP8A_RETURN( hr );
> 
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8A_AddComponentW"
> STDMETHODIMP DP8A_AddComponentW( IDirectPlay8Address *pInterface, const WCHAR * const pwszTag, const void * const pComponentData, const DWORD dwComponentSize, const DWORD dwDataType )
> {
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (PDP8ADDRESSOBJECT) GET_OBJECT_FROM_INTERFACE( pInterface );
> 	HRESULT hr;
> 	DWORD dwTmpLen;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pwszTag == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer for tag string" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( pComponentData == NULL ||
> 	   !DNVALID_READPTR( pComponentData, dwComponentSize ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for component" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_W( pwszTag ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for tag" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	if( dwDataType == DPNA_DATATYPE_STRING &&
> 	   dwDataType == DPNA_DATATYPE_DWORD &&
> 	   dwDataType == DPNA_DATATYPE_GUID &&
> 	   dwDataType != DPNA_DATATYPE_BINARY )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid datatype specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPARAM );
> 	}
> 
> 	if( dwDataType == DPNA_DATATYPE_STRING )
> 	{
> 		if( !DNVALID_STRING_A( (const char * const)  pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( (wcslen( (const WCHAR * const) pComponentData)+1)*sizeof(WCHAR) != dwComponentSize )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_DWORD )
> 	{
> 		if( dwComponentSize != sizeof( DWORD ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid size for DWORD component" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_GUID )
> 	{
> 		if( dwComponentSize != sizeof( GUID ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid size for GUID component" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}	
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pwszTag = %x pComponentData = 0x%x dwComponentSize = %d dwDataType = %d",
> 	     pwszTag, pComponentData, dwComponentSize, dwDataType );	
> 
> 	dwTmpLen = wcslen(pwszTag)+1;
> 
> 	CHAR *pszTmpTag = new char[dwTmpLen];
> 	CHAR *pszTmpConvert = NULL;
> 
> 	if( pszTmpTag == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Out of memory" );
> 		DP8A_RETURN( DPNERR_OUTOFMEMORY );
> 	}
> 
> 	hr = WideToAnsi( pszTmpTag, pwszTag, dwTmpLen );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Bad string for tag" );
> 		DP8A_RETURN( DPNERR_CONVERSION );		
> 	}
> 
> 	if( dwDataType == DPNA_DATATYPE_STRING )
> 	{
> 		dwTmpLen = wcslen((WCHAR *) pComponentData)+1;
> 		CHAR *pszTmpConvert = new char[dwTmpLen];
> 
> 		if( pszTmpConvert == NULL )
> 		{
> 			delete [] pszTmpConvert;
> 			DPF( DP8A_ERRORLEVEL, "Out of memory" );
> 			DP8A_RETURN( DPNERR_OUTOFMEMORY );		
> 		}
> 
> 		hr = WideToAnsi( pszTmpConvert, (WCHAR *) pComponentData, dwTmpLen );
> 
> 		if( FAILED( hr ) )
> 		{
> 			delete [] pszTmpTag;
> 			delete [] pszTmpConvert;
> 			DPF( DP8A_ERRORLEVEL, "Bad string for component" );
> 			DP8A_RETURN( DPNERR_GENERIC );
> 		}
> 		
> 		hr = pdp8Address->SetElement( pszTmpTag, pszTmpConvert, dwTmpLen, dwDataType );
> 
> 		delete [] pszTmpConvert;
> 	}
> 	else
> 	{
> 		hr = pdp8Address->SetElement( pszTmpTag, pComponentData, dwComponentSize, dwDataType );
> 	}
> 
> 	delete [] pszTmpTag;
> 
> 	DP8A_RETURN( hr );
> }
> 
> 
> #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> #include <stdio.h>
35a37
> #include "dplegacy.h"
37d38
< #include <wchar.h>
354a356,372
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 		hr = AnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode hr=0x%x", hr );
>             return hr;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
378a397,408
>                 else if( wcscmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     return SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( wcscmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     return SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( wcscmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     return SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1304a1335,1400
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) (dwCurrentChunkSize + pdpAddressChunk->dwDataSize)) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
125a126,127
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
26c26
< #include <wchar.h>
---
> #include <stdio.h>
556,557d555
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
< //		dwTmpValue = _wtol( m_pwszCurrentValue );
558a557,558
> 		dwTmpValue = _wtol( m_pwszCurrentValue );
> 
565,566d564
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< /*
591d588
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addtcp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
733a734,844
> #if 0
> // Use these functions to build ANSI versions of above
> typedef	STDMETHODIMP DP8ATCP_GetComponentByNameA( IDirectPlay8AddressIP *pInterface, const CHAR * const pszTag, void * pComponentBuffer, PDWORD pdwComponentSize, PDWORD pdwDataType );
> typedef	STDMETHODIMP DP8ATCP_GetComponentByIndexA( IDirectPlay8AddressIP *pInterface, const DWORD dwComponentID, CHAR * pszTag, PDWORD pdwNameLen, void * pComponentBuffer, PDWORD pdwComponentSize, PDWORD pdwDataType );
> typedef	STDMETHODIMP DP8ATCP_AddComponentA( IDirectPlay8AddressIP *pInterface, const CHAR * const pszTag, const void * const pComponentData, const DWORD dwComponentSize, const DWORD dwDataType );
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ATCP_BuildAddressW"
> STDMETHODIMP DP8ATCP_BuildAddressW( IDirectPlay8AddressIP *pInterface, const WCHAR * const pwszAddress, const USHORT usPort )
> {
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 	
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );
> 
> 	LPSTR pszShadowAddress = NULL;
> 
> 	if( pwszAddress != NULL )
> 	{
> 		pszShadowAddress = new char[wcslen(pwszAddress)+1];
> 
> 		if( pszShadowAddress == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Out of memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDADDRESSW_EXIT;
> 		}
> 
> 		hr = WideToAnsi( pszShadowAddress, pwszAddress, wcslen(pwszAddress)+1 );
> 
> 		if( FAILED( hr ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting Address to ANSI hr=0x%x", hr );
> 			hr = DPNERR_GENERIC;
> 			goto BUILDADDRESSW_EXIT;
> 		}
> 	}
> 
> 	hr = DP8ATCP_BuildAddressA( pInterface, pszShadowAddress, usPort );
> 
> BUILDADDRESSW_EXIT:
> 
> 	if( pszShadowAddress != NULL )
> 		delete [] pszShadowAddress;
> 
> 	return hr;
> 	
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ATCP_GetAddressW"
> STDMETHODIMP DP8ATCP_GetAddressW( IDirectPlay8AddressIP *pInterface, WCHAR * pwszAddress, PDWORD pdwAddressLength, PUSHORT pusPort )
> {
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 	
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );
> 
> 	LPSTR pszShadowAddress = NULL;
> 	DWORD dwShadowAddressSize = 0;
> 
> 	if( pwszAddress != NULL && pdwAddressLength != NULL )
> 	{
> 		pszShadowAddress = new char[*pdwAddressLength];
> 
> 		if( pszShadowAddress == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Out of memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETADDRESSW_EXIT;
> 		}
> 	}
> 
> 	hr = DP8ATCP_GetAddressA( pInterface, pszShadowAddress, pdwAddressLength, pusPort );
> 
> 	if( hr == DPN_OK )
> 	{
> 		hr = AnsiToWide( pwszAddress, pszShadowAddress, *pdwAddressLength );
> 
> 		if( FAILED( hr ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Unable to convert name to Wide hr=0x%x", hr );
> 			goto GETADDRESSW_EXIT;
> 		}
> 	}
> 
> GETADDRESSW_EXIT:
> 
> 	if( pszShadowAddress != NULL )
> 		delete [] pszShadowAddress;
> 
> 	return hr;
> }
> 
> #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
31c31
< //#include "dvoice.h"
---
> #include "dvoice.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\classfac.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
65,66d64
< HRESULT WINAPI DirectPlay8AddressCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
< 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
24a25,31
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DPNAddress"
> 
> /*
31a39,67
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNAddress"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNAddress"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
43,46c43,52
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
---
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
78a85
>          ..\dplegacy.cpp \
85c92
< C_DEFINES= $(C_DEFINES) /D_USRDLL /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DUNICODE
---
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
90c97
< DLLENTRY=DllMain
---
> DLLENTRY=_DllMainCRTStartup
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21,153d20
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
< 
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
< 
< Arguments:
< 
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
< 
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
< 
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
< 
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
< 
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
< 
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
< }
< 
< 
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
< }
< 
< 
175c42,47
< 	UnicodeToMultiByteN( pStr, iStrSize, (PWCH) pWStr, iStrSize*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	if (WideCharToMultiByte(CP_ACP,0,pWStr,-1,pStr,iStrSize,NULL,NULL) == 0)
> 	{
> 		return(DPNERR_GENERIC);
> 	}
202c74,75
< 	MultiByteToUnicodeN( pWStr, iWStrSize*sizeof(WCHAR), (CHAR *) pStr, iWStrSize );
---
> 	if (MultiByteToWideChar(CP_ACP,0,pStr,-1,pWStr,iWStrSize) == 0)
> 		return(DPNERR_GENERIC);
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,74
> // {4F0B879F-FA84-42ad-AD4D-B908B908DF87}
> DEFINE_GUID(IID_IDirectPlay8AddressIPX,
> 0x4f0b879f, 0xfa84, 0x42ad, 0xad, 0x4d, 0xb9, 0x8, 0xb9, 0x8, 0xdf, 0x87);
> 
> // {826F86D1-AE2C-4428-A66F-974381B25F5B}
> DEFINE_GUID(IID_IDirectPlay8AddressModem,
> 0x826f86d1, 0xae2c, 0x4428, 0xa6, 0x6f, 0x97, 0x43, 0x81, 0xb2, 0x5f, 0x5b);
> 
> // {59BE79FE-A96A-4710-9BD2-22A50E7B24BD}
> DEFINE_GUID(IID_IDirectPlay8AddressSerial,
> 0x59be79fe, 0xa96a, 0x4710, 0x9b, 0xd2, 0x22, 0xa5, 0xe, 0x7b, 0x24, 0xbd);
> 
70a83,85
> typedef struct IDirectPlay8AddressIPX   	*PDIRECTPLAY8ADDRESSIPX, *LPDIRECTPLAY8ADDRESSIPX;
> typedef struct IDirectPlay8AddressSerial  	*PDIRECTPLAY8ADDRESSSERIAL, *LPDIRECTPLAY8ADDRESSSERIAL;
> typedef struct IDirectPlay8AddressModem		*PDIRECTPLAY8ADDRESSMODEM, *LPDIRECTPLAY8ADDRESSMODEM;
86a102
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
339a356,391
> // values for baud rate
> #define DPNA_BAUD_RATE_110					L"110"
> #define DPNA_BAUD_RATE_300					L"300"
> #define DPNA_BAUD_RATE_600					L"600"
> #define DPNA_BAUD_RATE_1200					L"1200"
> #define DPNA_BAUD_RATE_2400					L"2400"
> #define DPNA_BAUD_RATE_4800					L"4800"
> #define DPNA_BAUD_RATE_9600					L"9600"
> #define DPNA_BAUD_RATE_14400				L"14400"
> #define DPNA_BAUD_RATE_19200				L"19200"
> #define DPNA_BAUD_RATE_38400				L"38400"
> #define DPNA_BAUD_RATE_56000				L"56000"
> #define DPNA_BAUD_RATE_57600				L"57600"
> #define DPNA_BAUD_RATE_115200				L"115200"
> #define DPNA_BAUD_RATE_128000				L"128000"
> #define DPNA_BAUD_RATE_256000				L"256000"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
341a394,396
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
343a399,461
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for baud rate
> #define DPNA_BAUD_RATE_110_A				"110"
> #define DPNA_BAUD_RATE_300_A				"300"
> #define DPNA_BAUD_RATE_600_A				"600"
> #define DPNA_BAUD_RATE_1200_A				"1200"
> #define DPNA_BAUD_RATE_2400_A				"2400"
> #define DPNA_BAUD_RATE_4800_A				"4800"
> #define DPNA_BAUD_RATE_9600_A				"9600"
> #define DPNA_BAUD_RATE_14400_A				"14400"
> #define DPNA_BAUD_RATE_19200_A				"19200"
> #define DPNA_BAUD_RATE_38400_A				"38400"
> #define DPNA_BAUD_RATE_56000_A				"56000"
> #define DPNA_BAUD_RATE_57600_A				"57600"
> #define DPNA_BAUD_RATE_115200_A				"115200"
> #define DPNA_BAUD_RATE_128000_A				"128000"
> #define DPNA_BAUD_RATE_256000_A				"256000"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
97,98d96
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
< 
132a131,139
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
156a164,166
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
> 
617a628
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
622a634
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
721a734
> #define DPNSESSION_NODPNSVR					0x0040
780c793
< 	STDMETHOD(RegisterLobby)			(THIS_ PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
825c838
< 	STDMETHOD(RegisterLobby)			(THIS_ PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
875c888
< 	STDMETHOD(RegisterLobby)			(THIS_ PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
53a54
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\backend.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
202d201
< 				ASSERT(pMSD->hCommand == Handle);
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
107c107
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
108a109,113
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
149c149,154
< 	DNASSERT( ( dwFlags & ~( DPNENUMHOSTS_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( dwFlags & ~( DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_NOBROADCASTFALLBACK ) ) == 0 );
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\initialize.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
352c352
< 		if((pSPD->hSendEvent = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL){
---
> 		if((pSPD->hSendEvent = CreateEventA(NULL, FALSE, FALSE, NULL)) == NULL){
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
80c80
< C_DEFINES= $(C_DEFINES) /D_LIB /DWIN32 /D_MT /DCINTERFACE /DMICHAEL /DUNICODE
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
549c549
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
195,196c195,225
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
30a38,66
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNSPWinsock"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectDPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNSPWinsock"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
113a115,134
> 					);
> 			break;
> 		}
> 
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( 8, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,23
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> #include "resource.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a25
> #endif //_WIN32
3a27,34
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a36,51
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a60,142
> 
> #endif
> 
> #endif    // !_MAC
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | WS_POPUP | WS_VISIBLE | WS_CAPTION |
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,67
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,70
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
101a103
> 	m_hActiveSettingsDialog( NULL ),
128a131
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
361a365,372
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( m_hActiveSettingsDialog != NULL )
> 		{
> 			StopSettingsDialog( m_hActiveSettingsDialog );
> 		}
363a375,381
> 	}
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( m_hActiveSettingsDialog == NULL );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
281a282,288
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 
> 		//
300a308,309
> 
> 		HWND			m_hActiveSettingsDialog;		// handle of active settings dialog
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
43a45
> #include	"IPXAddress.h"
80c82,83
< 	m_pSocketPort( NULL )
---
> 	m_pSocketPort( NULL ),
> 	m_fWin9xOperationPending( FALSE )
98a102,103
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
113a119,120
> 	m_Win9xReceiveWSAReturn( ERROR_SUCCESS ),
>     m_dwWin9xBytesReceived( 0 ),
185a193,198
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
206a220,226
> 	switch ( DNGetOSType() )
> 	{
> 		//
> 		// WinNT, always use IO completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
210a231,253
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
235a279,280
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
266a312,313
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
297a345,350
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
439a493,499
> 	switch ( DNGetOSType() )
> 	{
> 		//
> 		// WinNT, we'll always use completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
442a503,526
> 
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
474a559,560
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
494a581,582
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
127a128,130
> 		BOOL	Win9xOperationPending( void ) const { return m_fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_fWin9xOperationPending = fOperationPending; }
> 
157a161
> 		BOOL			m_fWin9xOperationPending;	// this structure has been initialized and the operation is pending on Win9x
158a163
> 
192a198,200
> 
> 		INT		m_Win9xReceiveWSAReturn;		
> 		DWORD	m_dwWin9xBytesReceived;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
80a82
> const DWORD	g_dwIPBroadcastAddressSize = sizeof( g_IPBroadcastAddress );
100,102d101
< extern HRESULT WINAPI DirectPlay8AddressCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
< 
< 
589c588
< 	hr = DirectPlay8AddressCreate( &IID_IDirectPlay8AddressIP, reinterpret_cast<void**>( &pIPAddress ), NULL);
---
> 	hr = CoCreateInstance( CLSID_DirectPlay8Address, NULL, CLSCTX_INPROC_SERVER, IID_IDirectPlay8AddressIP, reinterpret_cast<void**>( &pIPAddress ) );
739c738
< 	hr = DirectPlay8AddressCreate( &IID_IDirectPlay8Address, reinterpret_cast<void**>( &pDPlayAddress ), NULL);
---
> 	hr = CoCreateInstance( CLSID_DirectPlay8Address, NULL, CLSCTX_INPROC_SERVER, IID_IDirectPlay8Address, reinterpret_cast<void**>( &pDPlayAddress ) );
804c803
< 	hr = DirectPlay8AddressCreate( &IID_IDirectPlay8Address, reinterpret_cast<void**>( &pDPlayAddress ), NULL);
---
> 	hr = CoCreateInstance( CLSID_DirectPlay8Address, NULL, CLSCTX_INPROC_SERVER, IID_IDirectPlay8Address, reinterpret_cast<void**>( &pDPlayAddress ) );
869c868
< 	hr = DirectPlay8AddressCreate( &IID_IDirectPlay8Address, reinterpret_cast<void**>( &pDPlayAddress ), NULL);
---
> 	hr = CoCreateInstance( CLSID_DirectPlay8Address, NULL, CLSCTX_INPROC_SERVER, IID_IDirectPlay8Address, reinterpret_cast<void**>( &pDPlayAddress ) );
970,972d968
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1273d1268
< */	return DPNERR_UNSUPPORTED;
1453a1449,1454
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1454a1456,1474
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1457a1478,1480
> 		case 2:
> 		default:
> 		{
1458a1482,1484
> 			break;
> 		}
> 	}
1528a1555,1560
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1529a1562,1580
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1532a1584,1586
> 		case 2:
> 		default:
> 		{
1533a1588,1590
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
50a52
> #include	"IPUI.h"
93a96
> 	memset( m_TempHostName, 0x00, sizeof( m_TempHostName ) );
115a119,341
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, &m_hActiveSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	m_hActiveSettingsDialog = NULL;
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.
> 	//
> 	if ( ( m_TempHostName[ 0 ] == '\0' ) && ( m_EndpointType == ENDPOINT_TYPE_ENUM ) )
> 	{
> 		DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 		memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 		dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		DNASSERT( FALSE );
> 		goto Failure;
> 	}
> 
> 	//
> 	// the remote machine address has been adjusted, finish the command
> 	//
> 	switch ( m_EndpointType )
> 	{
> 		case ENDPOINT_TYPE_ENUM:
> 		{
> 			hr = CompleteEnumQuery();
> 			if ( hr != DPN_OK )
> 			{
> 				DPF( 0, "Problem completing EnumQuery after asking user for hostname!" );
> 				DisplayDNError( 0, hr );
> 			}
> 
> 			break;
> 		}
> 
> 		case ENDPOINT_TYPE_CONNECT:
> 		{
> 			hr = CompleteConnect();
> 			if ( hr != DPN_OK )
> 			{
> 				DPF( 0, "Problem completing Connect after asking user for hostname!" );
> 				DisplayDNError( 0, hr );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown!
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			hr = DPNERR_GENERIC;
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// close this endpoint
> 	//
> 	Close( hr );
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	INT3;
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
215a442
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
261,262d487
< 
< 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,67
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
69a85
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
49a51
> #include	"IPXAddress.h"
53a56
> #include	"IPXEndpt.h"
81a85
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
83a88
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
173a179,185
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
192a205,221
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
317a347,353
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
327a364,369
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
419a462,494
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	return	g_pIPXAddressPool->Get();
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
429a505,520
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34
> class	CIPXAddress;
34a36
> class	CIPXEndpoint;
59a62,63
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
61a66
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
38a39
> #include	"Registry.h"
510a512,515
> 
> 		hr = GetGatewayFromRegistry( reinterpret_cast<BYTE*>( gwipaddr ), sizeof( gwipaddr ) );
> 
> 		if(hr != DPN_OK){
512a518,520
> 		}
> 
> 		DPF(0,"Found suggested RSIP gateway in registry %s, running on Win95?\n",gwipaddr);
649d656
<         WCHAR wszIPHLPAPI[] = { wchar_t("IPHLPAPI.DLL") };
685c692
< 	hIpHlpApi = LoadLibrary(wszIPHLPAPI);
---
> 	hIpHlpApi = LoadLibrary("IPHLPAPI.DLL");
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
257a259,266
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
258a268,272
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
404a419,430
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( DNGetOSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
833a860,872
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ReadService( void )
> {
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
835a875,971
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return;
> }
836a973,975
> 
> 
> //**********************************************************************
837a977,1122
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1WriteService( void )
> {
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ErrorService( void )
> {
> 	INT3;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
864,865c1149,1150
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
< 
---
> 	DNASSERT( ( ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( DNGetOSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
876a1162,1164
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
929a1218,1220
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1003c1294,1295
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( DNGetOSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1017a1310,1312
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1075a1371,1372
> 					DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 					pReadData->SetWin9xOperationPending( FALSE );
1109a1407,1408
> 					DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 					pReadData->SetWin9xOperationPending( FALSE );
1154a1454,1455
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
1720a2022,2028
> 	switch ( DNGetOSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1765a2074,2137
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2388a2761,2917
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Win9xWinsock2ReceiveComplete - a Winsock2 socket receive
> //		completed on Win9x
> //
> // Entry:		Poiner to read data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData )
> {
> 	DNASSERT( pReadData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	DNASSERT( pReadData->Win9xOperationPending() == FALSE );
> 
> 	//
> 	// figure out what's happening with this socket port
> 	//
> 	switch ( m_State )
> 	{
> 		//
> 		// we're unbound, discard this message and don't ask for any more
> 		//
> 		case SOCKET_PORT_STATE_UNBOUND:
> 		{
> 			goto Exit;
> 			break;
> 		}
> 
> 		//
> 		// we're initialized, process input data
> 		//
> 		case SOCKET_PORT_STATE_INITIALIZED:
> 		{
> 			//
> 			// take a quick look at the return and submit a new receive if applicable
> 			//
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// the socket was closed on an outstanding read, stop
> 				// receiving
> 				//
> 				case WSAENOTSOCK:					// WinNT return for closed socket
> 				case ERROR_OPERATION_ABORTED:		// Win9x return for closed socket
> 				{
> 					break;
> 				}
> 
> 				//
> 				// ERROR_SUCCESS = no problem
> 				// WSAECONNRESET = previous send failed (who cares!)
> 				// default = other error, just try reading again
> 				//
> 				case WSAECONNRESET:
> 				case ERROR_SUCCESS:
> 				default:
> 				{
> 					HRESULT			hTempResult;
> 
> 
> 					DNASSERT( m_State == SOCKET_PORT_STATE_INITIALIZED );
> 
> 					hTempResult = Winsock2Receive();
> 					if ( hTempResult != DPN_OK )
> 					{
> #pragma	BUGBUG( johnkan, "Fix this!" )
> 						INT3;
> 					}
> 
> 					break;
> 				}
> 			}
> 
> 			//
> 			// now that initial reads have been taken care of, perform error-specific
> 			// processing
> 			//
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// succcess, note the actual number of bytes read and tell
> 				// someone about the received data
> 				//
> 				//	Since this data has been processed then we know that receive buffer has already been returned.
> 				//
> 				case ERROR_SUCCESS:
> 				{
> 					pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = pReadData->m_dwWin9xBytesReceived;
> 					ProcessReceivedData( pReadData );
> 
> 					break;
> 				}
> 
> 				//
> 				// Other error, stop in the debugger if it's not 'known'.
> 				//
> 				default:
> 				{
> 					switch ( pReadData->m_Win9xReceiveWSAReturn )
> 					{
> 						//
> 						// WSAECONNRESET = a previous send failed and Winsock is telling
> 						//				   us on an unrelated receive (Thanks WINSOCK).
> 						// WSAENOTSOCK = Socket was closed, user probably cancelled
> 						//				 somethinng.  Just clean up.
> 						//
> 						case WSAECONNRESET:
> 						case WSAENOTSOCK:
> 						{
> 							break;
> 						}
> 
> 						default:
> 						{
> 							DPF( 0, "Problem with Winsock2 Win9x read: " );
> 							DisplayWinsockError( 0, pReadData->m_Win9xReceiveWSAReturn );
> 							INT3;
> 							
> 							break;
> 						}
> 					}
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other state
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> Exit:
> 	//
> 	// return the current data to the pool and note that
> 	// this I/O operation is complete
> 	//
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();	
> 	DecRef();
> 
> 	return;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
238a239
> 		void	Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData );
244a246,248
> 		void	Winsock1ReadService( void );
> 		void	Winsock1WriteService( void );
> 		void	Winsock1ErrorService( void );
287a292
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
43,47c43,51
<            ..\..\..\dnaddress\daytona\obj$(BUILD_ALT_DIR)\*\dpnaddr.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
---
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
56a61,71
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
> !endif
77a93
> 	 ..\DWinsock.cpp \
81a98,100
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
84a104
>          ..\Registry.cpp \
98c118
< C_DEFINES= $(C_DEFINES) /D_USRDLL /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE /DUNICODE
---
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
100,101d119
< MSC_OPTIMIZATION=/Odi /Zi
< NTDEBUGTYPE=both
105c123
< DLLENTRY=DllMain
---
> DLLENTRY=_DllMainCRTStartup
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.H>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
104c104
< // the size of a SOCKADDR_IN!
---
> // the size of a SOCKADDR_IN and 2 bytes larger than a SOCKADDR_IPX!
122c122,123
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
158c159,160
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
241a244
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
242a246
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
245c249
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
252c256
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
279a284
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include <WSIPX.h>
47a49
> #include	"IPXAddress.h"
53a56
> #include	"IPXEndpt.h"
222a226,255
> 	switch ( DNGetOSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
576a610,615
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXEndpoint( &EndpointPoolContext );
> 			break;
> 		}
> 
745a785,790
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
776a822,827
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
114a116,138
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> //	DWORD		dwActiveSocketCount;				// count of active sockets
> //	CSocketPort	*pSocketPorts[ FD_SETSIZE ];		// list of socket ports associated with sockets
> //	FD_SET		Sockets;							// set of sockets
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
121a146,156
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	HWND			*phDialog;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
226c261,268
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( DNGetOSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
228c270,271
< 	)
---
> 						break;
> 					}
229a273,280
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
236c287,294
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( DNGetOSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
238c296,297
< 	)
---
> 						break;
> 					}
239a299,306
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
273a341,347
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
330a405,409
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( DNGetOSType() )
> 	{
333a413,414
> 		case VER_PLATFORM_WIN32_NT:
> 		{
339a421,447
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
368a477,478
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
375a486,490
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
395a511,517
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
397,401d518
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
426a544,689
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT	hr;
> 	HANDLE	hThread;
> 	DWORD	dwThreadID;
> 	WIN9X_THREAD_DATA	*pInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the events
> 	// even though the they might not be used because the network layer might
> 	// only support Winsock1.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create main worker thread to handle everything
> 	//
> 	pInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pInput ) ) );
> 	if ( pInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pInput, 0x00, sizeof( *pInput ) );
> 	pInput->pThisThreadPool = this;
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	m_iTotalThreadCount++;
> 	
> 	//
> 	// create one worker thread and boost its priority
> 	//
> 	hThread = CreateThread( NULL,			// pointer to security attributes (none)
> 							0,				// stack size (default)
> 							Win9xThread,	// pointer to thread function
> 							pInput,			// pointer to input parameter
> 							0,				// let it run
> 							&dwThreadID		// pointer to destination of thread ID
> 							);
> 	if ( hThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		m_iTotalThreadCount--;
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		DNASSERT( pInput != NULL );
> 		DNFree( pInput );
> 		goto Failure;
> 	}
> 
> 	DPF( 8, "Creating Win9x thread: 0x%x\tTotal Thread Count: %d\tNT Completion Thread Count: %d", dwThreadID, m_iTotalThreadCount, m_iNTCompletionThreadCount );
> 	DNASSERT( hThread != NULL );
> 	if ( SetThreadPriority( hThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of Win9x read thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> 	if ( CloseHandle( hThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing Win9x thread hanle!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
535a799,800
> 	if ( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{	
556a822
> 	}
634a901,905
> 
> 		DNASSERT( ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
> 		pReadData->m_Win9xReceiveWSAReturn = WSAESHUTDOWN;
> 		pReadData->m_dwWin9xBytesReceived = 0;
651a923,924
> 		DNASSERT( ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
796a1070
> 	m_IPXReadIODataPool.Deinitialize();
844d1117
< 			
848a1122,1130
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
926a1209,1217
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1181a1473,1474
> 	switch ( DNGetOSType() )
> 	{
1184a1478,1479
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1201a1497,1525
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1312a1637,1638
> 	if ( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
1319a1646
> 	}
1521a1849,1949
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Pointer destination for copy of dialog handle
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( phDialog != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->phDialog = phDialog;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	m_iTotalThreadCount++;
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		m_iTotalThreadCount--;
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1541a1970,1971
> 	switch ( DNGetOSType() )
> 	{
1542a1973,1982
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( m_iNTCompletionThreadCount == 0 );
> 			break;
> 		}
> 
> 		//
1544a1985,1986
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1546a1989,1990
> 			break;
> 		}
1547a1992,2001
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1576a2031,2032
> 	switch ( DNGetOSType() )
> 	{
1577a2034,2041
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1583a2048,2049
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1623a2090,2102
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1703a2183,2330
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> 
> //**********************************************************************
> // ------------------------------
1850a2478,3023
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwWin9xBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					default:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwWin9xBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Win9xWinsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::Win9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::Win9xThread( void *pParam )
> {
> #pragma	BUGBUG( johnkan, "Hard-coded constant for Winsock1 of 10ms for write polling!" )
> static const DWORD		SelectTimeslice = 10;
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM sucks!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 
> 			pThisThreadPool->CheckWinsock1IO( pSocketSet );
> 			
> 			//
> 			// since there are Winsock1 sockets active, don't spend a lot of
> 			// time waiting for something to happen for Winsock2
> 			//
> 			if ( SelectTimeslice < dwMaxWaitTime )
> 			{
> 				dwMaxWaitTime = SelectTimeslice;
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 
> 			//
> 			// New job.  Account for the time spent in the wait.  Don't
> 			// account for time after the job is complete because it's
> 			// possible that the job was an job submission which will want
> 			// to reset the wait time.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "WorkThread has a pending job with no Winsock1 sockets active!" );
> 				pThisThreadPool->ProcessWin9xJob( &CoreData );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "WorkThread exit because SP closing with no Winsock1 sockets active!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1878a3052,3084
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM sucks!
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			DPF( 0, "Failed to initialize COM!" );
> 			break;
> 		}
> 	}
> 
> 	//
2008a3215,3216
> 	CoUninitialize();
> 
2160a3369,3718
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM sucks!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->phDialog, pThreadParam->pContext );
> 
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CheckWinsock1IO( const FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting all sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( pSocketSet->fd_array[ uWaitingSocketCount ] == m_SocketSet.fd_array[ uIdx ] )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		(pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
52a53
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
65a67
> typedef	void	DIALOG_FUNCTION( HWND *const phDialog, void *const pDialogContext );
97c99,100
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( DNGetOSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
143a147
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
148a153
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( DNGetOSType() == VER_PLATFORM_WIN32_NT ) );
155a161,163
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
166a175,176
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext );
> 
199a210
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
264a276
> 		HRESULT	Win9xInit( void );
274a287,288
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
275a290
> 		static	DWORD WINAPI	Win9xThread( void *pParam );
277a293
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
283c299,302
< 		void	ServiceSockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
---
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		void	CheckWinsock1IO( const FD_SET *const pWinsock1Sockets );
> 		void	ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
13a14,15
> #include <WSIPX.h>
> 
71,72c73,76
< // this is the vtable for IP.
< static IDP8ServiceProviderVtbl	ipInterface =
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
99c103
< HRESULT WINAPI DirectPlay8SPCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown)
---
> static IDP8ServiceProviderVtbl	ipInterface =
101,106c105,128
<     if( pcIID == NULL || 
<         !DNVALID_READPTR( pcIID, sizeof( GUID ) ) )
<     {
<         DPFERR( "Invalid pointer specified for interface GUID" );
<         return DPNERR_INVALIDPOINTER;
<     }
---
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
108,127d129
<     if( *pcIID != IID_IDP8ServiceProvider )
<     {
<         DPFERR("Interface ID is not recognized" );
<         return DPNERR_INVALIDPARAM;
<     }
< 
<     if( ppvInterface == NULL || !DNVALID_WRITEPTR( ppvInterface, sizeof( void * ) ) )
<     {
<         DPFERR( "Invalid pointer specified to receive interface" );
<         return DPNERR_INVALIDPOINTER;
<     }
< 
<     if( pUnknown != NULL )
<     {
<         DPFERR( "Aggregation is not supported by this object yet" );
<         return DPNERR_INVALIDPARAM;
<     }
< 
<     return DoCreateInstance( NULL, NULL, CLSID_DP8SP_TCPIP, *pcIID, ppvInterface ); 
< }
161a164,213
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to DirectNet
> //
> // Exit:		Error code
> // ------------------------------
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
229a282
> //	we can either create an IPX instance or an IP instance
235a289,292
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP );
> 	}
266c323,324
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP) ||
> 		IsEqualCLSID(rclsid, CLSID_DP8SP_IPX));
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
22a24
> #include	"DWinsock.h"
48,51d49
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
78a77,78
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
103a104
> 	INT		iVersion;
129c130
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
131,137c132,133
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState );
> 	if ( iVersion == 0 )	// failure
139,141c135,137
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
143d138
< 
145a141,142
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
155c152,160
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
185a191,193
> 	BOOL	fFreeReturn;
> 
> 
189c197,201
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
196a209,221
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
> //**********************************************************************
197a223
> 
283a310
> 	INT_PTR iWinsockVersion;
293a321
> 	iWinsockVersion = GetWinsockVersion();
306c334
< 			hr = g_pThreadPool->Initialize(  );
---
> 			hr = g_pThreadPool->Initialize();
458a487,624
> 
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	WideToAnsi( const WCHAR *const pWCHARString, const DWORD dwWCHARStringLength, char *const pString, DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 
> 
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( &pdwStringLength == 0 ) );
> 
> 	hr = DPN_OK;
> 
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,				// code page (default ANSI)
> 								   0,					// flags (none)
> 								   pWCHARString,		// pointer to WCHAR string
> 								   dwWCHARStringLength,	// size of WCHAR string
> 								   pString,				// pointer to destination ANSI string
> 								   *pdwStringLength,	// size of destination string
> 								   NULL,				// pointer to default for unmappable characters (none)
> 								   &fDefault			// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
> 
> 	
> 		hr = DPNERR_GENERIC;
> 		dwError = GetLastError();
> 		DPF( 0, "WideCharToMultiByte failure!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
> 
> 		*pdwStringLength = iReturn;
> 	}
> 
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
> 
> 	return	hr;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				ERR_FAIL - operation failed
> //				ERR_NONE - operation succeded
> //				ERR_BUFFER_TOO_SMALL - destination buffer too small
> // ------------------------------
> HRESULT	AnsiToWide( const char *const pString, const DWORD dwStringLength, WCHAR *const pWCHARString, DWORD *const pdwWCHARStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	cMillenniumHack;
> 	WCHAR*	pMillenniumHack = pWCHARString;
> 
> 
> 	DNASSERT( pdwWCHARStringLength != 0 );
> 	DNASSERT( ( pWCHARString != NULL ) || ( pdwWCHARStringLength == 0 ) );
> 	DNASSERT( pString != NULL );
> 
> 
> 	if ( pMillenniumHack < (WCHAR*) 0x0000FFFF )
> 		pMillenniumHack = &cMillenniumHack;
> 
> 	hr = DPN_OK;
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMillenniumHack,			// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
> 
> 
> 		hr = DPNERR_GENERIC;
> 		dwError = GetLastError();
> 		DPF( 0, "MultiByteToWideChar(CP_ACP, 0, 0x%x, %u, 0x%x, %u) failure!", pString, dwStringLength, pWCHARString, *pdwWCHARStringLength);
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
> 
> 		*pdwWCHARStringLength = iReturn;
> 	}
> 
> 	return	hr;
> }
> //**********************************************************************
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47a48,49
> INT		GetWinsockVersion( void );
> 
54a57,66
> 
> HRESULT	WideToAnsi( const WCHAR *const pWCHARString,
> 					const DWORD dwWCHARStringLength,
> 					char *const pString,
> 					DWORD *const pdwStringLength );
> 
> HRESULT	AnsiToWide( const char *const pString,
> 					const DWORD dwStringLength,
> 					WCHAR *const pWCHARString,
> 					DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include	<WSIPX.h>
93,94d93
< extern HRESULT WINAPI DirectPlay8AddressCreate( const GUID * pcIID, void **ppvInterface, IUnknown *pUnknown);
< 
164a164,167
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
166a170,185
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
231a251
> 		case TYPE_IPX:
315a336
> 	IDirectPlay8Address		*pSPOnlyAddress;
323c344
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
339a361
> 	pSPOnlyAddress = NULL;
377a400,447
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pDeviceAddress, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
379a450,497
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
511a630,659
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint->DecRef();
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
525a674,675
> 			}
> 
598a749,754
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
769c925
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
973a1130,1155
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				//
> 				pEndpoint->CopyConnectData( pConnectData );
> 				if ( ( hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() ) ) != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint->DecRef();
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
974a1157,1158
> 			}
> 
1231c1415
< 	DNASSERT( ( pListenData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pListenData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1437a1622,1653
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData );
> 
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint->DecRef();
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1438a1655,1656
> 			}
> 
2395a2614,2625
> 		// Multicast groups are unsupported on IPX.
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
> 		//
2612a2843,2854
> 		//
> 		// multicast groups are unsupported on IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.  
