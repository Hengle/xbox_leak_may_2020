; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\engine.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XACTENG_URW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_URW	ENDS
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BC@PGNKEDBM@XACTEngineCreateI?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CC@DJOODCKH@Failed?5to?5supply?5an?5PXACTENGINE?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CK@FDACCJCF@Failed?5to?5supply?5PXACT_RUNTIME_P@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0FB@OBKNECLC@dwMax2dVoices?5must?5be?5at?5least?5m@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_08GEBMDKGG@m_pQueue?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@HDNMHAKL@IsListEmpty?$CI?$CGm_lstActiveCues?$CJ?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BC@POMBBKEK@CEngine?3?3?$HOCEngine?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@PEPKHKLI@XACT?5Engine?5shutdown?5completely?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EI@PKDAPDHB@m_dwRefCount?5?$DN?$DN?5?$CIpParams?9?$DOdwMax3@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GPPGLKMG@ppSoundSource?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@FLFGDGMG@pSoundSource?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@BFJNEJGD@pSoundSource?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0P@JACBKKPO@lpFriendlyName?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BF@MKEMPEMM@CEngine?3?3GetWaveBank?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@LLCDPBNE@No?5wavebanks?5registered?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@NFMHAMLB@No?5pNotificationDesc?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CJ@DGDPNDJB@You?5cant?5supply?5pSoundBank?5AND?5p@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CI@GHCCCCBM@You?5must?5supply?5pSoundBank?5OR?5pS@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DL@DLKPDCEC@YOu?5must?5supply?5pSoundBank?5if?5dw@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@BDJGOGKM@Invalid?5notification?5type?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_08BAFMHLII@pContext?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CI@GNFJFCFB@Notification?5type?5?$CFd?5already?5reg@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@IOMODIDD@Notification?5type?5?$CFd?5never?5regis@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@OOELOPJK@SoundCue?5index?5?$CFd?5already?5regist@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DF@JADIPFCC@SoundCue?5index?5?$CFd?5never?5register@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CP@KLIFEBKN@Same?5wavebank?5?$CI?$CFs?$CJ?5has?5already?5b@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BG@JACHNFOM@CEngine?3?3LoadDspImage?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BN@MGIGFILE@No?5DSP?5image?5buffer?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@HOICHCJA@Invalid?5DSP?5image?5size?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BL@OPDIGNNE@CEngine?3?3CreateSoundSource?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@MGOAHAKK@No?5ppSoundSource?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CF@PIFJCMEL@Invalid?5sound?5source?5flags?5speci@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CH@LPPFGGKE@?$CBIsListEmpty?$CI?$CGm_lstAvailable3DBu@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CH@HOHLLJGE@?$CBIsListEmpty?$CI?$CGm_lstAvailable2DBu@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@CHOKHPIP@CEngine?3?3CreateSoundBank?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BF@GGHJNNNF@No?5pvBuffer?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@JIJEOMJI@Invalid?5buffer?5size?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@LKJCDNOE@No?5ppSoundBank?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@FEJIFGJF@CEngine?3?3RegisterWaveBank?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@NFNLJMJK@No?5pvData?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@LGKILLBP@No?5ppWaveBank?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@FGHJGIB@No?5pvStreamingBuffer?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@BNKIIPAO@Invalid?5hFileHandle?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BM@HCAODNEA@CEngine?3?3UnRegisterWaveBank?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@OBDAMOAL@No?5pWaveBankInstance?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BN@NBBGCJPF@pWaveBank?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@OAEBCIJG@CEngine?3?3SetMasterVolume?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@GJJCKOGA@Invalid?5lVolume?5?$CIhas?5to?5be?5withi@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BP@OKHIPGP@CEngine?3?3SetListenerParameters?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DI@MOCNFFFP@You?5must?5supply?5at?5least?5one?5set@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@DILDGMMK@?$CB?$CIpNotificationDesc?9?$DOdwType?5?$CG?5XA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@BHEMJHCD@No?5pNotification?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EM@CMKNIKAO@You?5cant?5specify?5a?5notification?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@IAPLFFAD@dwSoundCueIndex?5is?5ignored?5when?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CJ@JHIPGPEM@Invalid?5notification?5type?5specif@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@PNHDAPJM@dwType?5must?5be?5valid?5if?5pSoundBa@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EC@JEMHEBII@Attempting?5to?5retrieve?5notificat@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@MKKIAPBO@pNotificationDesc?9?$DOdwType?5?$CG?5XACT@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@MBBFMMHB@You?5must?5supply?5pSoundBank?5if?5dw@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@LLIONAKJ@No?5pEvent?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@CJIAJGDK@Invalid?5Event?5type?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0FI@PJFMFDJF@pSoundCue?5?$DN?$DN?5NULL?5and?5eventType?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DO@FJECCPBI@pSoundCue?5must?5be?5?$CB?$DN?5NULL?5if?5a?5v@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EC@DBONKDAN@Play?5is?5not?5a?5valid?5event?5type?5w@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RW	ENDS
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _IsEqualGUID@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _==@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_AddRef@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_Release@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_BeginScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_EndScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPalette_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _sqrtf@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@IDirectSound@@QAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CreateSoundBuffer@IDirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CreateSoundStream@IDirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?DownloadEffectsImage@IDirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetAllParameters@IDirectSound@@QAGJPBU_DS3DLISTENER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetI3DL2Listener@IDirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CommitDeferredSettings@IDirectSound@@QAGJXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?MoveEntryTailList@XACT@@YGPAU_LIST_ENTRY@@PAU2@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsValidSoundSourceFlags@CEngine@XACT@@QAEHK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _XACTEngineDoWork@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _XACTEngineCreate@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CEngine@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CEngine@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCPriorityQueue@XACT@@QAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CEngine@XACT@@QAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CEngine@XACT@@QAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCEngine@XACT@@QAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Initialize@CEngine@XACT@@QAEJPAU_XACT_RUNTIME_PARAMETERS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?FreeSoundSource@CEngine@XACT@@IAEXPAVCSoundSource@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?DoWork@CEngine@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetWaveBank@CEngine@XACT@@QAEJPBDPAPAVCWaveBank@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsDuplicateWaveBank@CEngine@XACT@@QAEXPAVCWaveBank@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?LoadDspImage@CEngine@XACT@@QAGJPAXKPBU_DSEFFECTIMAGELOC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CreateSoundSource@CEngine@XACT@@QAGJKPAPAUIXACTSoundSource@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CreateSoundBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTSoundBank@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RegisterWaveBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTWaveBank@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RegisterStreamedWaveBank@CEngine@XACT@@QAGJPAXK0KPAPAUIXACTWaveBank@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?UnRegisterWaveBank@CEngine@XACT@@QAGJPAUIXACTWaveBank@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMasterVolume@CEngine@XACT@@QAGJJ@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetListenerParameters@CEngine@XACT@@QAGJPBU_DS3DLISTENER@@PBU_DSI3DL2LISTENER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GlobalPause@CEngine@XACT@@QAGJH@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?UnRegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@PAU_XACT_NOTIFICATION@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?FlushNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CommitDeferredSettings@CEngine@XACT@@QAGJXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?ScheduleEvent@CEngine@XACT@@QAGJPAUXACT_TRACK_EVENT@@PAUIXACTSoundCue@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_7CEngine@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XACTENG_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_g_pEngine
PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT
_g_pEngine DD	00H
XACTENG_RW	ENDS
PUBLIC	?DoWork@CEngine@XACT@@QAEXXZ			; XACT::CEngine::DoWork
PUBLIC	_XACTEngineDoWork@0
PUBLIC	??0CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::CAutoLock
PUBLIC	??1CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::~CAutoLock
EXTRN	_DirectSoundDoWork@0:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
;	COMDAT _XACTEngineDoWork@0
XACTENG	SEGMENT
___AutoLock$ = -8
_pEngine$ = -4
_XACTEngineDoWork@0 PROC NEAR				; COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 27   :     using namespace XACT;
; 28   : 
; 29   :     ENTER_EXTERNAL_FUNCTION();

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 30   :     CEngine*  pEngine = g_pEngine;

  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pEngine
  00013	89 45 fc	 mov	 DWORD PTR _pEngine$[ebp], eax

; 31   : 
; 32   :     if(!pEngine)

  00016	83 7d fc 00	 cmp	 DWORD PTR _pEngine$[ebp], 0
  0001a	75 0a		 jne	 SHORT $L31835

; 33   :         return;

  0001c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001f	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00024	eb 15		 jmp	 SHORT $L31832
$L31835:

; 34   : 
; 35   :     DirectSoundDoWork();

  00026	e8 00 00 00 00	 call	 _DirectSoundDoWork@0

; 36   :     pEngine->DoWork();

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _pEngine$[ebp]
  0002e	e8 00 00 00 00	 call	 ?DoWork@CEngine@XACT@@QAEXXZ ; XACT::CEngine::DoWork

; 37   : 
; 38   :     return;

  00033	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00036	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
$L31832:

; 39   : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_XACTEngineDoWork@0 ENDP
XACTENG	ENDS
PUBLIC	?XACTEnterCriticalSection@@YGHXZ		; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::CAutoLock, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   :     m_fLocked = (BOOLEAN)XACTEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?XACTEnterCriticalSection@@YGHXZ ; XACTEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 83   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_XACTCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT
?XACTEnterCriticalSection@@YGHXZ PROC NEAR		; XACTEnterCriticalSection, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L30689

; 49   :     {
; 50   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L30688
$L30689:

; 51   :     }
; 52   : 
; 53   :     EnterCriticalSection(&g_XACTCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 54   : 
; 55   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L30688:

; 56   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?XACTEnterCriticalSection@@YGHXZ ENDP			; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
XACTENG	ENDS
PUBLIC	?XACTLeaveCriticalSection@@YGXXZ		; XACTLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   :     if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L30715

; 88   :     {
; 89   :         XACTLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?XACTLeaveCriticalSection@@YGXXZ ; XACTLeaveCriticalSection
$L30715:

; 90   :     }
; 91   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::~CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT
?XACTLeaveCriticalSection@@YGXXZ PROC NEAR		; XACTLeaveCriticalSection, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :     LeaveCriticalSection(&g_XACTCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 61   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?XACTLeaveCriticalSection@@YGXXZ ENDP			; XACTLeaveCriticalSection
XACTENG	ENDS
PUBLIC	??0CEngine@XACT@@QAE@XZ				; XACT::CEngine::CEngine
PUBLIC	?AddRef@CEngine@XACT@@QAGKXZ			; XACT::CEngine::AddRef
PUBLIC	?Release@CEngine@XACT@@QAGKXZ			; XACT::CEngine::Release
PUBLIC	?Initialize@CEngine@XACT@@QAEJPAU_XACT_RUNTIME_PARAMETERS@@@Z ; XACT::CEngine::Initialize
PUBLIC	??_C@_0BC@PGNKEDBM@XACTEngineCreateI?$AA@	; `string'
PUBLIC	??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CC@DJOODCKH@Failed?5to?5supply?5an?5PXACTENGINE?5@ ; `string'
PUBLIC	??_C@_0CK@FDACCJCF@Failed?5to?5supply?5PXACT_RUNTIME_P@ ; `string'
PUBLIC	??_C@_0FB@OBKNECLC@dwMax2dVoices?5must?5be?5at?5least?5m@ ; `string'
PUBLIC	_XACTEngineCreate@8
PUBLIC	??_C@_07NDMLHGOG@XACTENG?$AA@			; `string'
EXTRN	?DwDbgSetContext@XACT@@YAXKKPBDI00@Z:NEAR	; XACT::DwDbgSetContext
EXTRN	?DwDbgPrint@XACT@@YAXPBDZZ:NEAR			; XACT::DwDbgPrint
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
XACTENG_RD	SEGMENT
??_C@_07NDMLHGOG@XACTENG?$AA@ DB 'XACTENG', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BC@PGNKEDBM@XACTEngineCreateI?$AA@
XACTENG_RD	SEGMENT
??_C@_0BC@PGNKEDBM@XACTEngineCreateI?$AA@ DB 'XACTEngineCreateI', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\engine\engine.cpp', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CC@DJOODCKH@Failed?5to?5supply?5an?5PXACTENGINE?5@
XACTENG_RD	SEGMENT
??_C@_0CC@DJOODCKH@Failed?5to?5supply?5an?5PXACTENGINE?5@ DB 'Failed to s'
	DB	'upply an PXACTENGINE *', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CK@FDACCJCF@Failed?5to?5supply?5PXACT_RUNTIME_P@
XACTENG_RD	SEGMENT
??_C@_0CK@FDACCJCF@Failed?5to?5supply?5PXACT_RUNTIME_P@ DB 'Failed to sup'
	DB	'ply PXACT_RUNTIME_PARAMETERS', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0FB@OBKNECLC@dwMax2dVoices?5must?5be?5at?5least?5m@
XACTENG_RD	SEGMENT
??_C@_0FB@OBKNECLC@dwMax2dVoices?5must?5be?5at?5least?5m@ DB 'dwMax2dVoic'
	DB	'es must be at least max(1,number of wavebanks registered at a'
	DB	'ny time)', 00H				; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT _XACTEngineCreate@8
XACTENG	SEGMENT
tv143 = -32
tv133 = -28
tv94 = -24
$T32705 = -20
$T32700 = -16
___AutoLock$ = -12
_hr$ = -8
_pEngine$ = -4
_ppEngine$ = 8
_pParams$ = 12
_XACTEngineCreate@8 PROC NEAR				; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 49   :     using namespace XACT;
; 50   :     CEngine*  pEngine;
; 51   :     HRESULT   hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 52   :     
; 53   :     DPF_ENTER();
; 54   :     ENTER_EXTERNAL_FUNCTION();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 55   : 
; 56   : #ifdef VALIDATE_PARAMETERS
; 57   : 
; 58   :     if(!ppEngine)

  00015	83 7d 08 00	 cmp	 DWORD PTR _ppEngine$[ebp], 0
  00019	75 2a		 jne	 SHORT $L31844

; 59   :     {
; 60   :         DPF_ERROR("Failed to supply an PXACTENGINE *");

  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@PGNKEDBM@XACTEngineCreateI?$AA@
  00025	6a 3c		 push	 60			; 0000003cH
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0002c	6a 01		 push	 1
  0002e	6a 09		 push	 9
  00030	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00035	83 c4 18	 add	 esp, 24			; 00000018H
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@DJOODCKH@Failed?5to?5supply?5an?5PXACTENGINE?5@
  0003d	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00042	83 c4 04	 add	 esp, 4
$L31844:

; 61   :     }
; 62   : 
; 63   :     if(!pParams)

  00045	83 7d 0c 00	 cmp	 DWORD PTR _pParams$[ebp], 0
  00049	75 2a		 jne	 SHORT $L31848

; 64   :     {
; 65   :         DPF_ERROR("Failed to supply PXACT_RUNTIME_PARAMETERS");

  0004b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@PGNKEDBM@XACTEngineCreateI?$AA@
  00055	6a 41		 push	 65			; 00000041H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0005c	6a 01		 push	 1
  0005e	6a 09		 push	 9
  00060	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@FDACCJCF@Failed?5to?5supply?5PXACT_RUNTIME_P@
  0006d	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00072	83 c4 04	 add	 esp, 4
$L31848:

; 66   :     }
; 67   : 
; 68   :     if (!pParams->dwMax2DHwVoices)

  00075	8b 45 0c	 mov	 eax, DWORD PTR _pParams$[ebp]
  00078	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007b	75 2a		 jne	 SHORT $L31850

; 69   :     {
; 70   : 
; 71   :         DPF_ERROR("dwMax2dVoices must be at least max(1,number of wavebanks registered at any time)");

  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@PGNKEDBM@XACTEngineCreateI?$AA@
  00087	6a 47		 push	 71			; 00000047H
  00089	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0008e	6a 01		 push	 1
  00090	6a 09		 push	 9
  00092	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00097	83 c4 18	 add	 esp, 24			; 00000018H
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FB@OBKNECLC@dwMax2dVoices?5must?5be?5at?5least?5m@
  0009f	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000a4	83 c4 04	 add	 esp, 4
$L31850:

; 72   : 
; 73   :     }
; 74   : 
; 75   : #endif // VALIDATE_PARAMETERS
; 76   :     
; 77   :     DPF_ENTER();
; 78   : 
; 79   :     //
; 80   :     // Check to see if the engine object exists
; 81   :     //
; 82   : 
; 83   :     if(g_pEngine)

  000a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  000ae	74 37		 je	 SHORT $L31852

; 84   :     {
; 85   :         *ppEngine = g_pEngine;

  000b0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  000b7	74 0e		 je	 SHORT $L32698
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  000bf	83 c1 08	 add	 ecx, 8
  000c2	89 4d e8	 mov	 DWORD PTR tv94[ebp], ecx
  000c5	eb 07		 jmp	 SHORT $L32699
$L32698:
  000c7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$L32699:
  000ce	8b 55 08	 mov	 edx, DWORD PTR _ppEngine$[ebp]
  000d1	8b 45 e8	 mov	 eax, DWORD PTR tv94[ebp]
  000d4	89 02		 mov	 DWORD PTR [edx], eax

; 86   :         g_pEngine->AddRef();

  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ?AddRef@CEngine@XACT@@QAGKXZ ; XACT::CEngine::AddRef

; 87   :     }
; 88   :     else

  000e2	e9 88 00 00 00	 jmp	 $L31853
$L31852:

; 89   :     {
; 90   :         hr = HRFROMP(pEngine = NEW(CEngine));

  000e7	68 f8 00 00 00	 push	 248			; 000000f8H
  000ec	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f1	83 c4 04	 add	 esp, 4
  000f4	89 45 f0	 mov	 DWORD PTR $T32700[ebp], eax
  000f7	83 7d f0 00	 cmp	 DWORD PTR $T32700[ebp], 0
  000fb	74 0d		 je	 SHORT $L32701
  000fd	8b 4d f0	 mov	 ecx, DWORD PTR $T32700[ebp]
  00100	e8 00 00 00 00	 call	 ??0CEngine@XACT@@QAE@XZ	; XACT::CEngine::CEngine
  00105	89 45 e4	 mov	 DWORD PTR tv133[ebp], eax
  00108	eb 07		 jmp	 SHORT $L32702
$L32701:
  0010a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
$L32702:
  00111	8b 55 e4	 mov	 edx, DWORD PTR tv133[ebp]
  00114	89 55 fc	 mov	 DWORD PTR _pEngine$[ebp], edx
  00117	33 c0		 xor	 eax, eax
  00119	83 7d fc 00	 cmp	 DWORD PTR _pEngine$[ebp], 0
  0011d	0f 95 c0	 setne	 al
  00120	48		 dec	 eax
  00121	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  00126	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 91   : 
; 92   :         if(SUCCEEDED(hr))

  00129	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012d	7c 0f		 jl	 SHORT $L31859

; 93   :         {
; 94   :             hr = pEngine->Initialize(pParams);

  0012f	8b 4d 0c	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00132	51		 push	 ecx
  00133	8b 4d fc	 mov	 ecx, DWORD PTR _pEngine$[ebp]
  00136	e8 00 00 00 00	 call	 ?Initialize@CEngine@XACT@@QAEJPAU_XACT_RUNTIME_PARAMETERS@@@Z ; XACT::CEngine::Initialize
  0013b	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L31859:

; 95   :         }
; 96   : 
; 97   :         if(SUCCEEDED(hr))

  0013e	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00142	7c 22		 jl	 SHORT $L31861

; 98   :         {
; 99   :             *ppEngine = pEngine;

  00144	83 7d fc 00	 cmp	 DWORD PTR _pEngine$[ebp], 0
  00148	74 0b		 je	 SHORT $L32703
  0014a	8b 55 fc	 mov	 edx, DWORD PTR _pEngine$[ebp]
  0014d	83 c2 08	 add	 edx, 8
  00150	89 55 e0	 mov	 DWORD PTR tv143[ebp], edx
  00153	eb 07		 jmp	 SHORT $L32704
$L32703:
  00155	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv143[ebp], 0
$L32704:
  0015c	8b 45 08	 mov	 eax, DWORD PTR _ppEngine$[ebp]
  0015f	8b 4d e0	 mov	 ecx, DWORD PTR tv143[ebp]
  00162	89 08		 mov	 DWORD PTR [eax], ecx

; 100  :         }
; 101  :         else

  00164	eb 09		 jmp	 SHORT $L31853
$L31861:

; 102  :         {
; 103  :             pEngine->Release();

  00166	8b 55 fc	 mov	 edx, DWORD PTR _pEngine$[ebp]
  00169	52		 push	 edx
  0016a	e8 00 00 00 00	 call	 ?Release@CEngine@XACT@@QAGKXZ ; XACT::CEngine::Release
$L31853:

; 104  :         }
; 105  :     }
; 106  : 
; 107  :     DPF_LEAVE_HRESULT(hr);
; 108  :     return hr;

  0016f	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
  00172	89 45 ec	 mov	 DWORD PTR $T32705[ebp], eax
  00175	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00178	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0017d	8b 45 ec	 mov	 eax, DWORD PTR $T32705[ebp]

; 109  : }

  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 08 00	 ret	 8
_XACTEngineCreate@8 ENDP
XACTENG	ENDS
EXTRN	_XactMemAlloc@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT
_cbBuffer$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 71   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     using namespace XACT;
; 73   :     return XactMemAlloc(cbBuffer, FALSE); 

  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _XactMemAlloc@8

; 74   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
XACTENG	ENDS
PUBLIC	??_7CEngine@XACT@@6B@				; XACT::CEngine::`vftable'
EXTRN	?InitializeSequencer@CEngine@XACT@@UAGJK@Z:NEAR	; XACT::CEngine::InitializeSequencer
EXTRN	?Enqueue@CEngine@XACT@@UAGJPAU_TRACK_EVENT_CONTEXT@2@@Z:NEAR ; XACT::CEngine::Enqueue
EXTRN	?Dispatch@CEngine@XACT@@EAGJXZ:NEAR		; XACT::CEngine::Dispatch
EXTRN	?DispatchEventsUntil@CEngine@XACT@@EAGJPB_J0@Z:NEAR ; XACT::CEngine::DispatchEventsUntil
EXTRN	?DispatchEvent@CEngine@XACT@@EAGJPAU_TRACK_EVENT_CONTEXT@2@@Z:NEAR ; XACT::CEngine::DispatchEvent
EXTRN	?DPCTimerCallBack@CEngine@XACT@@CGXPAU_KDPC@@PAX11@Z:NEAR ; XACT::CEngine::DPCTimerCallBack
EXTRN	__imp__KeInitializeDpc@12:NEAR
EXTRN	__imp__KeInitializeTimerEx@8:NEAR
;	COMDAT ??_7CEngine@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
CONST	SEGMENT
??_7CEngine@XACT@@6B@ DD FLAT:?InitializeSequencer@CEngine@XACT@@UAGJK@Z ; XACT::CEngine::`vftable'
	DD	FLAT:?Enqueue@CEngine@XACT@@UAGJPAU_TRACK_EVENT_CONTEXT@2@@Z
	DD	FLAT:?Dispatch@CEngine@XACT@@EAGJXZ
	DD	FLAT:?DispatchEventsUntil@CEngine@XACT@@EAGJPB_J0@Z
	DD	FLAT:?DispatchEvent@CEngine@XACT@@EAGJPAU_TRACK_EVENT_CONTEXT@2@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CEngine@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CEngine@XACT@@QAE@XZ PROC NEAR			; XACT::CEngine::CEngine, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CEngine@XACT@@6B@

; 124  :     DPF_ENTER();
; 125  : 
; 126  :     m_dwRefCount = 1;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 4c 01 00
	00 00		 mov	 DWORD PTR [ecx+76], 1

; 127  : 
; 128  :     //
; 129  :     // Set global engine object pointer
; 130  :     //
; 131  : 
; 132  :     g_pEngine = this;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	89 15 00 00 00
	00		 mov	 DWORD PTR _g_pEngine, edx

; 133  :     InitializeListHead(&m_lstAvailable2DBuffers);

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 10	 add	 eax, 16			; 00000010H
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00038	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 134  :     InitializeListHead(&m_lstAvailableStreams);

  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	83 c2 20	 add	 edx, 32			; 00000020H
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	89 50 24	 mov	 DWORD PTR [eax+36], edx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00050	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 135  :     InitializeListHead(&m_lstAvailable3DBuffers);

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 18	 add	 ecx, 24			; 00000018H
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00068	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 136  :     InitializeListHead(&m_lstWaveBanks);

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	83 c0 28	 add	 eax, 40			; 00000028H
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00077	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00080	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 137  :     InitializeListHead(&m_lstSoundBanks);

  00083	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00086	83 c2 30	 add	 edx, 48			; 00000030H
  00089	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00098	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 138  :     InitializeListHead(&m_lstPendingNotifications);

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	83 c1 40	 add	 ecx, 64			; 00000040H
  000a1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a4	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  000b0	89 50 40	 mov	 DWORD PTR [eax+64], edx

; 139  : 
; 140  :     //
; 141  :     // sequencer variables
; 142  :     //
; 143  : 
; 144  :     InitializeListHead(&m_lstActiveCues);

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	83 c0 38	 add	 eax, 56			; 00000038H
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
  000bf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000c8	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 145  :     KeInitializeTimer(&m_TimerObject);

  000cb	6a 00		 push	 0
  000cd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d0	83 c2 70	 add	 edx, 112		; 00000070H
  000d3	52		 push	 edx
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeTimerEx@8

; 146  :     KeInitializeDpc(&m_DpcObject, DPCTimerCallBack, this);

  000da	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	50		 push	 eax
  000de	68 00 00 00 00	 push	 OFFSET FLAT:?DPCTimerCallBack@CEngine@XACT@@CGXPAU_KDPC@@PAX11@Z ; XACT::CEngine::DPCTimerCallBack
  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  000ec	51		 push	 ecx
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeDpc@12

; 147  : 
; 148  :     DPF_LEAVE_VOID();
; 149  : }

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
??0CEngine@XACT@@QAE@XZ ENDP				; XACT::CEngine::CEngine
XACTENG	ENDS
PUBLIC	??1CEngine@XACT@@QAE@XZ				; XACT::CEngine::~CEngine
PUBLIC	??_C@_08GEBMDKGG@m_pQueue?$AA@			; `string'
PUBLIC	??_C@_0BO@HDNMHAKL@IsListEmpty?$CI?$CGm_lstActiveCues?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BC@POMBBKEK@CEngine?3?3?$HOCEngine?$AA@	; `string'
PUBLIC	??_C@_0CA@PEPKHKLI@XACT?5Engine?5shutdown?5completely?$AA@ ; `string'
PUBLIC	?Release@IDirectSound@@QAGKXZ			; IDirectSound::Release
PUBLIC	??_GCPriorityQueue@XACT@@QAEPAXI@Z		; XACT::CPriorityQueue::`scalar deleting destructor'
PUBLIC	??0CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::~CAutoIrql
PUBLIC	?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
EXTRN	?FreeAllEvents@CEngine@XACT@@QAEXXZ:NEAR	; XACT::CEngine::FreeAllEvents
EXTRN	?DwDbgAssert@XACT@@YAXHPBD0I@Z:NEAR		; XACT::DwDbgAssert
EXTRN	__imp__KeCancelTimer@4:NEAR
;	COMDAT ??_C@_08GEBMDKGG@m_pQueue?$AA@
XACTENG_RD	SEGMENT
??_C@_08GEBMDKGG@m_pQueue?$AA@ DB 'm_pQueue', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@HDNMHAKL@IsListEmpty?$CI?$CGm_lstActiveCues?$CJ?$AA@
XACTENG_RD	SEGMENT
??_C@_0BO@HDNMHAKL@IsListEmpty?$CI?$CGm_lstActiveCues?$CJ?$AA@ DB 'IsList'
	DB	'Empty(&m_lstActiveCues)', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BC@POMBBKEK@CEngine?3?3?$HOCEngine?$AA@
XACTENG_RD	SEGMENT
??_C@_0BC@POMBBKEK@CEngine?3?3?$HOCEngine?$AA@ DB 'CEngine::~CEngine', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@PEPKHKLI@XACT?5Engine?5shutdown?5completely?$AA@
XACTENG_RD	SEGMENT
??_C@_0CA@PEPKHKLI@XACT?5Engine?5shutdown?5completely?$AA@ DB 'XACT Engin'
	DB	'e shutdown completely', 00H			; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??1CEngine@XACT@@QAE@XZ
XACTENG	SEGMENT
tv131 = -36
_this$ = -32
$T32716 = -28
$T32715 = -24
___AutoIrql$31875 = -20
___AutoLock$ = -12
_pSoundSource$ = -8
_pEntry$ = -4
??1CEngine@XACT@@QAE@XZ PROC NEAR			; XACT::CEngine::~CEngine, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CEngine@XACT@@6B@

; 159  :     DPF_ENTER();
; 160  :     ENTER_EXTERNAL_METHOD();

  00012	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 161  : 
; 162  :     PLIST_ENTRY pEntry;
; 163  :     CSoundSource *pSoundSource;
; 164  : 
; 165  :     //
; 166  :     // sequencer de-init
; 167  :     //
; 168  : 
; 169  :     {
; 170  :         AutoIrql();

  0001a	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$31875[ebp]
  0001d	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 171  :         m_bAllowQueueing = FALSE;

  00022	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0

; 172  :     }

  0002c	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$31875[ebp]
  0002f	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql

; 173  : 
; 174  :     if(m_bTimerSet){

  00034	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00037	83 7a 68 00	 cmp	 DWORD PTR [edx+104], 0
  0003b	74 0d		 je	 SHORT $L31876

; 175  :         KeCancelTimer(&m_TimerObject);

  0003d	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 c0 70	 add	 eax, 112		; 00000070H
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeCancelTimer@4
$L31876:

; 176  :     }
; 177  : 
; 178  :     ASSERT(m_pQueue);

  0004a	68 b2 00 00 00	 push	 178			; 000000b2H
  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08GEBMDKGG@m_pQueue?$AA@
  00059	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	33 d2		 xor	 edx, edx
  0005e	83 b9 f0 00 00
	00 00		 cmp	 DWORD PTR [ecx+240], 0
  00065	0f 94 c2	 sete	 dl
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 179  :     FreeAllEvents(); // From queue

  00071	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?FreeAllEvents@CEngine@XACT@@QAEXXZ ; XACT::CEngine::FreeAllEvents

; 180  : 
; 181  :     ASSERT(IsListEmpty(&m_lstActiveCues));

  00079	68 b5 00 00 00	 push	 181			; 000000b5H
  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@HDNMHAKL@IsListEmpty?$CI?$CGm_lstActiveCues?$CJ?$AA@
  00088	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	83 c0 38	 add	 eax, 56			; 00000038H
  0008e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	33 d2		 xor	 edx, edx
  00093	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00096	0f 95 c2	 setne	 dl
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0009f	83 c4 10	 add	 esp, 16			; 00000010H

; 182  : 
; 183  :     DELETE(m_pQueue);

  000a2	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	83 b8 f0 00 00
	00 00		 cmp	 DWORD PTR [eax+240], 0
  000ac	74 3b		 je	 SHORT $L31879
  000ae	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  000b7	89 55 e4	 mov	 DWORD PTR $T32716[ebp], edx
  000ba	8b 45 e4	 mov	 eax, DWORD PTR $T32716[ebp]
  000bd	89 45 e8	 mov	 DWORD PTR $T32715[ebp], eax
  000c0	83 7d e8 00	 cmp	 DWORD PTR $T32715[ebp], 0
  000c4	74 0f		 je	 SHORT $L32717
  000c6	6a 01		 push	 1
  000c8	8b 4d e8	 mov	 ecx, DWORD PTR $T32715[ebp]
  000cb	e8 00 00 00 00	 call	 ??_GCPriorityQueue@XACT@@QAEPAXI@Z
  000d0	89 45 dc	 mov	 DWORD PTR tv131[ebp], eax
  000d3	eb 07		 jmp	 SHORT $L32718
$L32717:
  000d5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$L32718:
  000dc	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	c7 81 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+240], 0
$L31879:

; 184  : 
; 185  :     //
; 186  :     // free 2d buffers
; 187  :     //
; 188  : 
; 189  :     pEntry = m_lstAvailable2DBuffers.Flink;

  000e9	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000ef	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax
$L31883:

; 190  :     while (pEntry != &m_lstAvailable2DBuffers) {

  000f2	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	83 c1 10	 add	 ecx, 16			; 00000010H
  000f8	39 4d fc	 cmp	 DWORD PTR _pEntry$[ebp], ecx
  000fb	74 2f		 je	 SHORT $L31884

; 191  : 
; 192  :         pEntry = RemoveHeadList(&m_lstAvailable2DBuffers);

  000fd	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00100	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
  00109	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 193  :         pSoundSource = CONTAINING_RECORD(pEntry, CSoundSource, m_ListEntry);

  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  0010f	83 e9 08	 sub	 ecx, 8
  00112	89 4d f8	 mov	 DWORD PTR _pSoundSource$[ebp], ecx

; 194  : 
; 195  :         pSoundSource->Release();

  00115	8b 55 f8	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  00118	8b 02		 mov	 eax, DWORD PTR [edx]
  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0011d	51		 push	 ecx
  0011e	ff 50 08	 call	 DWORD PTR [eax+8]

; 196  : 
; 197  :         pEntry = m_lstAvailable2DBuffers.Flink;

  00121	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  00124	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00127	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 198  : 
; 199  :     }

  0012a	eb c6		 jmp	 SHORT $L31883
$L31884:

; 200  : 
; 201  :     //
; 202  :     // free 3d buffers
; 203  :     //
; 204  : 
; 205  :     pEntry = m_lstAvailable3DBuffers.Flink;

  0012c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00132	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx
$L31890:

; 206  :     while (pEntry != &m_lstAvailable3DBuffers) {

  00135	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00138	83 c0 18	 add	 eax, 24			; 00000018H
  0013b	39 45 fc	 cmp	 DWORD PTR _pEntry$[ebp], eax
  0013e	74 2f		 je	 SHORT $L31891

; 207  : 
; 208  :         pEntry = RemoveHeadList(&m_lstAvailable3DBuffers);

  00140	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00143	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
  0014c	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 209  :         pSoundSource = CONTAINING_RECORD(pEntry, CSoundSource, m_ListEntry);

  0014f	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00152	83 e8 08	 sub	 eax, 8
  00155	89 45 f8	 mov	 DWORD PTR _pSoundSource$[ebp], eax

; 210  : 
; 211  :         pSoundSource->Release();

  00158	8b 4d f8	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0015b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015d	8b 45 f8	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  00160	50		 push	 eax
  00161	ff 52 08	 call	 DWORD PTR [edx+8]

; 212  : 
; 213  :         pEntry = m_lstAvailable3DBuffers.Flink;

  00164	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0016a	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx

; 214  : 
; 215  :     }

  0016d	eb c6		 jmp	 SHORT $L31890
$L31891:

; 216  : 
; 217  :     //
; 218  :     // free streams
; 219  :     //
; 220  : 
; 221  :     pEntry = m_lstAvailableStreams.Flink;

  0016f	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00172	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00175	89 4d fc	 mov	 DWORD PTR _pEntry$[ebp], ecx
$L31897:

; 222  :     while (pEntry != &m_lstAvailableStreams) {

  00178	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0017b	83 c2 20	 add	 edx, 32			; 00000020H
  0017e	39 55 fc	 cmp	 DWORD PTR _pEntry$[ebp], edx
  00181	74 2f		 je	 SHORT $L31898

; 223  : 
; 224  :         pEntry = RemoveHeadList(&m_lstAvailableStreams);

  00183	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00186	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
  0018f	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 225  :         pSoundSource = CONTAINING_RECORD(pEntry, CSoundSource, m_ListEntry);

  00192	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  00195	83 ea 08	 sub	 edx, 8
  00198	89 55 f8	 mov	 DWORD PTR _pSoundSource$[ebp], edx

; 226  : 
; 227  :         pSoundSource->Release();

  0019b	8b 45 f8	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  0019e	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a0	8b 55 f8	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  001a3	52		 push	 edx
  001a4	ff 51 08	 call	 DWORD PTR [ecx+8]

; 228  : 
; 229  :         pEntry = m_lstAvailableStreams.Flink;

  001a7	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001aa	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ad	89 4d fc	 mov	 DWORD PTR _pEntry$[ebp], ecx

; 230  : 
; 231  :     }

  001b0	eb c6		 jmp	 SHORT $L31897
$L31898:

; 232  : 
; 233  :     if (m_pDirectSound) {

  001b2	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  001b5	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  001b9	74 0c		 je	 SHORT $L31903

; 234  :         m_pDirectSound->Release();

  001bb	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  001be	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001c1	51		 push	 ecx
  001c2	e8 00 00 00 00	 call	 ?Release@IDirectSound@@QAGKXZ ; IDirectSound::Release
$L31903:

; 235  :     }
; 236  : 
; 237  :     g_pEngine = NULL;

  001c7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pEngine, 0

; 238  :     DPF_INFO("XACT Engine shutdown completely");

  001d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  001d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@POMBBKEK@CEngine?3?3?$HOCEngine?$AA@
  001db	68 ee 00 00 00	 push	 238			; 000000eeH
  001e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  001e5	6a 04		 push	 4
  001e7	6a 09		 push	 9
  001e9	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  001ee	83 c4 18	 add	 esp, 24			; 00000018H
  001f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@PEPKHKLI@XACT?5Engine?5shutdown?5completely?$AA@
  001f6	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  001fb	83 c4 04	 add	 esp, 4

; 239  : 
; 240  :     DPF_LEAVE_VOID();
; 241  : }

  001fe	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00201	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c3		 ret	 0
??1CEngine@XACT@@QAE@XZ ENDP				; XACT::CEngine::~CEngine
XACTENG	ENDS
EXTRN	_IDirectSound_Release@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Release@IDirectSound@@QAGKXZ
XACTENG	SEGMENT
_this$ = 8
?Release@IDirectSound@@QAGKXZ PROC NEAR			; IDirectSound::Release, COMDAT

; 1711 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1712 :         return IDirectSound_Release(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSound_Release@4

; 1713 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@IDirectSound@@QAGKXZ ENDP			; IDirectSound::Release
XACTENG	ENDS
PUBLIC	??0CIrql@XACT@@QAE@XZ				; XACT::CIrql::CIrql
PUBLIC	?Raise@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\drvhlp.h
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@XACT@@QAE@XZ	; XACT::CIrql::CIrql

; 73   :     Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Raise

; 74   : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CIrql@XACT@@QAE@XZ PROC NEAR				; XACT::CIrql::CIrql, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 40   : }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@XACT@@QAE@XZ ENDP				; XACT::CIrql::CIrql
XACTENG	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Raise@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Raise, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L29522

; 45   :     {
; 46   :         m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L29522:

; 47   :     }
; 48   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Raise
XACTENG	ENDS
PUBLIC	?Lower@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Lower
; Function compile flags: /Odt
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   :     Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Lower

; 79   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::~CAutoIrql
XACTENG	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Lower@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Lower, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L29527

; 53   :     {
; 54   :         KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 55   :         m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L29527:

; 56   :     }
; 57   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Lower
XACTENG	ENDS
PUBLIC	?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList
PUBLIC	??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG_RD	SEGMENT
??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT
_Entry$ = 8
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z PROC NEAR ; XACT::RemoveEntryList, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d6 00 00 00	 push	 214			; 000000d6H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 215  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00018	68 d7 00 00 00	 push	 215			; 000000d7H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 01		 push	 1
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 216  : 
; 217  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 218  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 219  :     Entry->Flink = Entry->Blink = Entry;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx

; 220  : 
; 221  :     return Entry;

  00059	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 222  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ENDP	; XACT::RemoveEntryList
XACTENG	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z PROC NEAR ; XACT::__AssertValidEntryList, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L29601

; 55   :     {
; 56   :         DwDbgAssert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 57   :     }
; 58   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L29600
$L29601:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L29605
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L29604
$L29605:

; 59   :     {
; 60   :         DwDbgAssert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 61   :     }
; 62   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L29600
$L29604:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L29609
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L29608
$L29609:

; 63   :     {
; 64   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L29611
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L29610
$L29611:

; 65   :         {
; 66   :             DwDbgAssert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L29610:

; 67   :         }
; 68   :     }
; 69   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L29600
$L29608:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L29614

; 70   :     {
; 71   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L29615

; 72   :         {
; 73   :             DwDbgAssert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L29615:

; 74   :         }
; 75   :     }
; 76   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L29600
$L29614:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L29600

; 77   :     {
; 78   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L29600

; 79   :         {
; 80   :             DwDbgAssert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L29600:

; 81   :         }
; 82   :     }
; 83   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ENDP ; XACT::__AssertValidEntryList
XACTENG	ENDS
EXTRN	??1CPriorityQueue@XACT@@QAE@XZ:NEAR		; XACT::CPriorityQueue::~CPriorityQueue
; Function compile flags: /Odt
;	COMDAT ??_GCPriorityQueue@XACT@@QAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCPriorityQueue@XACT@@QAEPAXI@Z PROC NEAR		; XACT::CPriorityQueue::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPriorityQueue@XACT@@QAE@XZ ; XACT::CPriorityQueue::~CPriorityQueue
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L31909
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L31909:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCPriorityQueue@XACT@@QAEPAXI@Z ENDP			; XACT::CPriorityQueue::`scalar deleting destructor'
XACTENG	ENDS
EXTRN	_XactMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 99   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  :     using namespace XACT;
; 101  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 102  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
XACTENG	ENDS
;	COMDAT ?AddRef@CEngine@XACT@@QAGKXZ
XACTENG	SEGMENT
$T32752 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CEngine@XACT@@QAGKXZ PROC NEAR			; XACT::CEngine::AddRef, COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 245  :     _ENTER_EXTERNAL_METHOD("CEngine::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 246  :     return ++m_dwRefCount;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00014	83 c1 01	 add	 ecx, 1
  00017	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00023	89 4d f8	 mov	 DWORD PTR $T32752[ebp], ecx
  00026	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00029	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0002e	8b 45 f8	 mov	 eax, DWORD PTR $T32752[ebp]

; 247  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?AddRef@CEngine@XACT@@QAGKXZ ENDP			; XACT::CEngine::AddRef
XACTENG	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
PUBLIC	??_GCEngine@XACT@@QAEPAXI@Z			; XACT::CEngine::`scalar deleting destructor'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Release@CEngine@XACT@@QAGKXZ
XACTENG	SEGMENT
tv85 = -20
$T32760 = -16
$T32757 = -12
$T32756 = -8
___AutoLock$ = -4
_this$ = 8
?Release@CEngine@XACT@@QAGKXZ PROC NEAR			; XACT::CEngine::Release, COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 251  :     _ENTER_EXTERNAL_METHOD("CEngine::Release");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 252  :     
; 253  :     ASSERT(m_dwRefCount);

  0000e	68 fd 00 00 00	 push	 253			; 000000fdH
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00018	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  0001d	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00020	33 c9		 xor	 ecx, ecx
  00022	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00026	0f 94 c1	 sete	 cl
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 254  :     m_dwRefCount--;

  00032	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00038	83 e8 01	 sub	 eax, 1
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 255  : 
; 256  :     if (m_dwRefCount == m_dwTotalVoiceCount){

  00041	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  0004a	3b 48 48	 cmp	 ecx, DWORD PTR [eax+72]
  0004d	75 28		 jne	 SHORT $L31921

; 257  : 
; 258  :         //
; 259  :         // if the refcount equals the number of pre-allocated voices
; 260  :         // it means its time to delete the engine object
; 261  :         //
; 262  : 
; 263  :         delete this;

  0004f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00052	89 55 f4	 mov	 DWORD PTR $T32757[ebp], edx
  00055	8b 45 f4	 mov	 eax, DWORD PTR $T32757[ebp]
  00058	89 45 f8	 mov	 DWORD PTR $T32756[ebp], eax
  0005b	83 7d f8 00	 cmp	 DWORD PTR $T32756[ebp], 0
  0005f	74 0f		 je	 SHORT $L32758
  00061	6a 01		 push	 1
  00063	8b 4d f8	 mov	 ecx, DWORD PTR $T32756[ebp]
  00066	e8 00 00 00 00	 call	 ??_GCEngine@XACT@@QAEPAXI@Z
  0006b	89 45 ec	 mov	 DWORD PTR tv85[ebp], eax
  0006e	eb 07		 jmp	 SHORT $L31921
$L32758:
  00070	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$L31921:

; 264  :     }
; 265  : 
; 266  :     return m_dwRefCount;

  00077	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0007d	89 55 f0	 mov	 DWORD PTR $T32760[ebp], edx
  00080	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00083	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00088	8b 45 f0	 mov	 eax, DWORD PTR $T32760[ebp]

; 267  : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?Release@CEngine@XACT@@QAGKXZ ENDP			; XACT::CEngine::Release
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ??_GCEngine@XACT@@QAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCEngine@XACT@@QAEPAXI@Z PROC NEAR			; XACT::CEngine::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CEngine@XACT@@QAE@XZ	; XACT::CEngine::~CEngine
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L31928
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L31928:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCEngine@XACT@@QAEPAXI@Z ENDP			; XACT::CEngine::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z ; XACT::CEngine::AllocateSoundSource
PUBLIC	??_C@_0EI@PKDAPDHB@m_dwRefCount?5?$DN?$DN?5?$CIpParams?9?$DOdwMax3@ ; `string'
PUBLIC	?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z	; XACT::CSoundSource::SetHwVoiceType
PUBLIC	?CreateSoundBuffer@IDirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ; IDirectSound::CreateSoundBuffer
PUBLIC	?CreateSoundStream@IDirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z ; IDirectSound::CreateSoundStream
PUBLIC	?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z	; XACT::InsertTailList
EXTRN	_DirectSoundCreate@12:NEAR
EXTRN	_XAudioCreatePcmFormat@16:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0EI@PKDAPDHB@m_dwRefCount?5?$DN?$DN?5?$CIpParams?9?$DOdwMax3@
XACTENG_RD	SEGMENT
??_C@_0EI@PKDAPDHB@m_dwRefCount?5?$DN?$DN?5?$CIpParams?9?$DOdwMax3@ DB 'm'
	DB	'_dwRefCount == (pParams->dwMax3DHwVoices + pParams->dwMax2DHw'
	DB	'Voices)+1', 00H				; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Initialize@CEngine@XACT@@QAEJPAU_XACT_RUNTIME_PARAMETERS@@@Z
XACTENG	SEGMENT
_this$ = -92
$T32767 = -88
___AutoLock$ = -84
_dssd$ = -80
_hr$ = -56
_dsbd$ = -52
_pSoundSource$ = -28
_i$ = -24
_wfx$ = -20
_pParams$ = 8
?Initialize@CEngine@XACT@@QAEJPAU_XACT_RUNTIME_PARAMETERS@@@Z PROC NEAR ; XACT::CEngine::Initialize, COMDAT
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx

; 274  :     HRESULT hr = S_OK;

  00009	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 275  :     DWORD i = 0;

  00010	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0

; 276  :     CSoundSource *pSoundSource;
; 277  :     ENTER_EXTERNAL_METHOD();

  00017	8d 4d ac	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 278  : 
; 279  :     DSBUFFERDESC dsbd;
; 280  :     DSSTREAMDESC dssd;
; 281  :     WAVEFORMATEX wfx;
; 282  : 
; 283  :     DPF_ENTER();
; 284  : 
; 285  :     if (SUCCEEDED(hr)) {

  0001f	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00023	7c 48		 jl	 SHORT $L31942

; 286  :         CopyMemory(&m_RuntimeParams, pParams, sizeof(XACT_RUNTIME_PARAMETERS));

  00025	6a 14		 push	 20			; 00000014H
  00027	8b 45 08	 mov	 eax, DWORD PTR _pParams$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 50	 add	 ecx, 80			; 00000050H
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _memcpy
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 287  :         ZeroMemory( &dsbd, sizeof( DSBUFFERDESC ) );

  0003a	6a 18		 push	 24			; 00000018H
  0003c	6a 00		 push	 0
  0003e	8d 55 cc	 lea	 edx, DWORD PTR _dsbd$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 288  :         ZeroMemory( &dssd, sizeof( DSSTREAMDESC ) );

  0004a	6a 18		 push	 24			; 00000018H
  0004c	6a 00		 push	 0
  0004e	8d 45 b0	 lea	 eax, DWORD PTR _dssd$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _memset
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 289  :         
; 290  :         hr = DirectSoundCreate(NULL,&m_pDirectSound, NULL);

  0005a	6a 00		 push	 0
  0005c	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00062	51		 push	 ecx
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 _DirectSoundCreate@12
  0006a	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L31942:

; 291  :     }
; 292  : 
; 293  :     if (SUCCEEDED(hr)) {

  0006d	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00071	7c 10		 jl	 SHORT $L31947

; 294  :         hr = InitializeSequencer(XACT_ENGINE_MAX_CONCURRENT_EVENTS);

  00073	6a 64		 push	 100			; 00000064H
  00075	8b 55 a4	 mov	 edx, DWORD PTR _this$[ebp]
  00078	8b 02		 mov	 eax, DWORD PTR [edx]
  0007a	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	51		 push	 ecx
  0007e	ff 10		 call	 DWORD PTR [eax]
  00080	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax
$L31947:

; 295  :     }
; 296  : 
; 297  :     //
; 298  :     // based on the caller supplied parameters, pre-allocate all dsound buffers and streams
; 299  :     // we are about to use
; 300  :     //
; 301  : 
; 302  :     if (SUCCEEDED(hr)) {

  00083	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00087	0f 8c b1 00 00
	00		 jl	 $L31949

; 303  : 
; 304  :         //
; 305  :         // allocate 2d buffers first
; 306  :         //
; 307  :         
; 308  :         dsbd.dwSize = sizeof( DSBUFFERDESC );

  0008d	c7 45 cc 18 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp], 24 ; 00000018H

; 309  :         XAudioCreatePcmFormat(1, 8000, 8, &wfx);

  00094	8d 55 ec	 lea	 edx, DWORD PTR _wfx$[ebp]
  00097	52		 push	 edx
  00098	6a 08		 push	 8
  0009a	68 40 1f 00 00	 push	 8000			; 00001f40H
  0009f	6a 01		 push	 1
  000a1	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 310  :         dsbd.lpwfxFormat = &wfx;

  000a6	8d 45 ec	 lea	 eax, DWORD PTR _wfx$[ebp]
  000a9	89 45 d8	 mov	 DWORD PTR _dsbd$[ebp+12], eax

; 311  :         dssd.lpwfxFormat = &wfx;

  000ac	8d 4d ec	 lea	 ecx, DWORD PTR _wfx$[ebp]
  000af	89 4d b8	 mov	 DWORD PTR _dssd$[ebp+8], ecx

; 312  :         dssd.dwMaxAttachedPackets = XACT_ENGINE_PACKETS_PER_STREAM;

  000b2	c7 45 b4 02 00
	00 00		 mov	 DWORD PTR _dssd$[ebp+4], 2

; 313  : 
; 314  :         for (i=0;i<pParams->dwMax2DHwVoices-pParams->dwMaxConcurrentStreams;i++) {

  000b9	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c0	eb 09		 jmp	 SHORT $L31951
$L31952:
  000c2	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  000c5	83 c2 01	 add	 edx, 1
  000c8	89 55 e8	 mov	 DWORD PTR _i$[ebp], edx
$L31951:
  000cb	8b 45 08	 mov	 eax, DWORD PTR _pParams$[ebp]
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _pParams$[ebp]
  000d1	8b 10		 mov	 edx, DWORD PTR [eax]
  000d3	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  000d6	39 55 e8	 cmp	 DWORD PTR _i$[ebp], edx
  000d9	73 63		 jae	 SHORT $L31949

; 315  :     
; 316  :             //
; 317  :             // create the context used to track DS buffers/streams
; 318  :             //
; 319  :     
; 320  :             hr = AllocateSoundSource(&pSoundSource);

  000db	8d 45 e4	 lea	 eax, DWORD PTR _pSoundSource$[ebp]
  000de	50		 push	 eax
  000df	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	e8 00 00 00 00	 call	 ?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z ; XACT::CEngine::AllocateSoundSource
  000e7	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 321  :     
; 322  :             if(SUCCEEDED(hr)) {

  000ea	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ee	7c 4a		 jl	 SHORT $L31955

; 323  : 
; 324  :                 m_dwTotalVoiceCount++;

  000f0	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  000f6	83 c2 01	 add	 edx, 1
  000f9	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 325  : 
; 326  :                 //
; 327  :                 // add voice to linked list
; 328  :                 //
; 329  :     
; 330  :                 InsertTailList(&m_lstAvailable2DBuffers,&pSoundSource->m_ListEntry);

  000ff	8b 4d e4	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  00102	83 c1 08	 add	 ecx, 8
  00105	51		 push	 ecx
  00106	8b 55 a4	 mov	 edx, DWORD PTR _this$[ebp]
  00109	83 c2 10	 add	 edx, 16			; 00000010H
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 331  :     
; 332  :                 //
; 333  :                 // create buffer
; 334  :                 //
; 335  :         
; 336  :                 hr = m_pDirectSound->CreateSoundBuffer( &dsbd, &pSoundSource->m_HwVoice.pBuffer, NULL );

  00112	6a 00		 push	 0
  00114	8b 45 e4	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  00117	83 c0 14	 add	 eax, 20			; 00000014H
  0011a	50		 push	 eax
  0011b	8d 4d cc	 lea	 ecx, DWORD PTR _dsbd$[ebp]
  0011e	51		 push	 ecx
  0011f	8b 55 a4	 mov	 edx, DWORD PTR _this$[ebp]
  00122	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?CreateSoundBuffer@IDirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ; IDirectSound::CreateSoundBuffer
  0012b	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 337  :     
; 338  :                 //
; 339  :                 // tell the voice the dsound flags used
; 340  :                 //
; 341  :     
; 342  :                 pSoundSource->SetHwVoiceType(0);

  0012e	6a 00		 push	 0
  00130	8b 4d e4	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  00133	e8 00 00 00 00	 call	 ?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z ; XACT::CSoundSource::SetHwVoiceType

; 343  :     
; 344  :             } else {

  00138	eb 02		 jmp	 SHORT $L31956
$L31955:

; 345  : 
; 346  :                 break;

  0013a	eb 02		 jmp	 SHORT $L31949
$L31956:

; 347  : 
; 348  :             }
; 349  :     
; 350  :         }

  0013c	eb 84		 jmp	 SHORT $L31952
$L31949:

; 351  : 
; 352  :     }
; 353  : 
; 354  :     //
; 355  :     // create all 3d submix voices
; 356  :     //
; 357  : 
; 358  :     if (SUCCEEDED(hr)) {

  0013e	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00142	0f 8c 93 00 00
	00		 jl	 $L31958

; 359  : 
; 360  :         for (i=0;i<pParams->dwMax3DHwVoices;i++) {

  00148	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0014f	eb 09		 jmp	 SHORT $L31959
$L31960:
  00151	8b 4d e8	 mov	 ecx, DWORD PTR _i$[ebp]
  00154	83 c1 01	 add	 ecx, 1
  00157	89 4d e8	 mov	 DWORD PTR _i$[ebp], ecx
$L31959:
  0015a	8b 55 08	 mov	 edx, DWORD PTR _pParams$[ebp]
  0015d	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  00160	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00163	73 76		 jae	 SHORT $L31958

; 361  :     
; 362  :             //
; 363  :             // create the context used to track DS buffers/streams
; 364  :             //
; 365  :     
; 366  :             hr = AllocateSoundSource(&pSoundSource);

  00165	8d 4d e4	 lea	 ecx, DWORD PTR _pSoundSource$[ebp]
  00168	51		 push	 ecx
  00169	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z ; XACT::CEngine::AllocateSoundSource
  00171	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 367  :     
; 368  :             if(SUCCEEDED(hr)) {

  00174	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00178	7c 5a		 jl	 SHORT $L31963

; 369  :     
; 370  :                 m_dwTotalVoiceCount++;

  0017a	8b 55 a4	 mov	 edx, DWORD PTR _this$[ebp]
  0017d	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00180	83 c0 01	 add	 eax, 1
  00183	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 371  : 
; 372  :                 //
; 373  :                 // add voice to linked list
; 374  :                 //
; 375  :     
; 376  :                 InsertTailList(&m_lstAvailable3DBuffers,&pSoundSource->m_ListEntry);

  00189	8b 55 e4	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  0018c	83 c2 08	 add	 edx, 8
  0018f	52		 push	 edx
  00190	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  00193	83 c0 18	 add	 eax, 24			; 00000018H
  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 377  :     
; 378  :                 //
; 379  :                 // create buffer
; 380  :                 //
; 381  :     
; 382  :                 dsbd.lpwfxFormat = NULL;

  0019c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _dsbd$[ebp+12], 0

; 383  :                 dsbd.dwFlags = DSBCAPS_MIXIN | DSBCAPS_CTRL3D;

  001a3	c7 45 d0 10 20
	00 00		 mov	 DWORD PTR _dsbd$[ebp+4], 8208 ; 00002010H

; 384  :         
; 385  :                 hr = m_pDirectSound->CreateSoundBuffer( &dsbd, &pSoundSource->m_HwVoice.pBuffer, NULL );

  001aa	6a 00		 push	 0
  001ac	8b 4d e4	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  001af	83 c1 14	 add	 ecx, 20			; 00000014H
  001b2	51		 push	 ecx
  001b3	8d 55 cc	 lea	 edx, DWORD PTR _dsbd$[ebp]
  001b6	52		 push	 edx
  001b7	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  001ba	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001bd	51		 push	 ecx
  001be	e8 00 00 00 00	 call	 ?CreateSoundBuffer@IDirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ; IDirectSound::CreateSoundBuffer
  001c3	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 386  :     
; 387  :                 //
; 388  :                 // tell the voice what hw voice its associated with
; 389  :                 //
; 390  :     
; 391  :                 pSoundSource->SetHwVoiceType(dsbd.dwFlags);        

  001c6	8b 55 d0	 mov	 edx, DWORD PTR _dsbd$[ebp+4]
  001c9	52		 push	 edx
  001ca	8b 4d e4	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  001cd	e8 00 00 00 00	 call	 ?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z ; XACT::CSoundSource::SetHwVoiceType

; 392  :     
; 393  :             } else {

  001d2	eb 02		 jmp	 SHORT $L31964
$L31963:

; 394  :     
; 395  :                 break;

  001d4	eb 05		 jmp	 SHORT $L31958
$L31964:

; 396  :     
; 397  :             }
; 398  : 
; 399  :         }

  001d6	e9 76 ff ff ff	 jmp	 $L31960
$L31958:

; 400  : 
; 401  :     }
; 402  : 
; 403  :     //
; 404  :     // allocate streams
; 405  :     //
; 406  : 
; 407  :     if (SUCCEEDED(hr)) {

  001db	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001df	0f 8c 82 00 00
	00		 jl	 $L31966

; 408  : 
; 409  :         for (i=0;i<pParams->dwMaxConcurrentStreams;i++) {

  001e5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001ec	eb 09		 jmp	 SHORT $L31967
$L31968:
  001ee	8b 45 e8	 mov	 eax, DWORD PTR _i$[ebp]
  001f1	83 c0 01	 add	 eax, 1
  001f4	89 45 e8	 mov	 DWORD PTR _i$[ebp], eax
$L31967:
  001f7	8b 4d 08	 mov	 ecx, DWORD PTR _pParams$[ebp]
  001fa	8b 55 e8	 mov	 edx, DWORD PTR _i$[ebp]
  001fd	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00200	73 65		 jae	 SHORT $L31966

; 410  :     
; 411  :             //
; 412  :             // create the context used to track DS buffers/streams
; 413  :             //
; 414  :     
; 415  :             hr = AllocateSoundSource(&pSoundSource);

  00202	8d 45 e4	 lea	 eax, DWORD PTR _pSoundSource$[ebp]
  00205	50		 push	 eax
  00206	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  00209	e8 00 00 00 00	 call	 ?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z ; XACT::CEngine::AllocateSoundSource
  0020e	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 416  :     
; 417  :             if(SUCCEEDED(hr)) {

  00211	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00215	7c 4c		 jl	 SHORT $L31971

; 418  : 
; 419  :                 m_dwTotalVoiceCount++;

  00217	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0021d	83 c2 01	 add	 edx, 1
  00220	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  00223	89 50 48	 mov	 DWORD PTR [eax+72], edx

; 420  : 
; 421  :                 //
; 422  :                 // add voice to linked list
; 423  :                 //
; 424  :     
; 425  :                 InsertTailList(&m_lstAvailableStreams,&pSoundSource->m_ListEntry);

  00226	8b 4d e4	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  00229	83 c1 08	 add	 ecx, 8
  0022c	51		 push	 ecx
  0022d	8b 55 a4	 mov	 edx, DWORD PTR _this$[ebp]
  00230	83 c2 20	 add	 edx, 32			; 00000020H
  00233	52		 push	 edx
  00234	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 426  :     
; 427  :                 //
; 428  :                 // create dsound stream
; 429  :                 //
; 430  :         
; 431  :                 hr = m_pDirectSound->CreateSoundStream( &dssd, &pSoundSource->m_HwVoice.pStream, NULL);

  00239	6a 00		 push	 0
  0023b	8b 45 e4	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  0023e	83 c0 18	 add	 eax, 24			; 00000018H
  00241	50		 push	 eax
  00242	8d 4d b0	 lea	 ecx, DWORD PTR _dssd$[ebp]
  00245	51		 push	 ecx
  00246	8b 55 a4	 mov	 edx, DWORD PTR _this$[ebp]
  00249	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0024c	50		 push	 eax
  0024d	e8 00 00 00 00	 call	 ?CreateSoundStream@IDirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z ; IDirectSound::CreateSoundStream
  00252	89 45 c8	 mov	 DWORD PTR _hr$[ebp], eax

; 432  :     
; 433  :                 //
; 434  :                 // tell the voice what hw voice its associated with
; 435  :                 //
; 436  :     
; 437  :                 pSoundSource->SetHwVoiceType(dssd.dwFlags);        

  00255	8b 4d b0	 mov	 ecx, DWORD PTR _dssd$[ebp]
  00258	51		 push	 ecx
  00259	8b 4d e4	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0025c	e8 00 00 00 00	 call	 ?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z ; XACT::CSoundSource::SetHwVoiceType

; 438  :     
; 439  :             } else {

  00261	eb 02		 jmp	 SHORT $L31972
$L31971:

; 440  :     
; 441  :                 break;

  00263	eb 02		 jmp	 SHORT $L31966
$L31972:

; 442  :     
; 443  :             }
; 444  : 
; 445  :         }

  00265	eb 87		 jmp	 SHORT $L31968
$L31966:

; 446  : 
; 447  :     }    
; 448  : 
; 449  :     if (SUCCEEDED(hr)) {

  00267	83 7d c8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0026b	7c 32		 jl	 SHORT $L31974

; 450  : 
; 451  :         ASSERT(m_dwRefCount == 
; 452  :             (pParams->dwMax3DHwVoices +\
; 453  :              pParams->dwMax2DHwVoices)+1);

  0026d	68 c5 01 00 00	 push	 453			; 000001c5H
  00272	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00277	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EI@PKDAPDHB@m_dwRefCount?5?$DN?$DN?5?$CIpParams?9?$DOdwMax3@
  0027c	8b 55 08	 mov	 edx, DWORD PTR _pParams$[ebp]
  0027f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00282	8b 4d 08	 mov	 ecx, DWORD PTR _pParams$[ebp]
  00285	8b 11		 mov	 edx, DWORD PTR [ecx]
  00287	8d 44 10 01	 lea	 eax, DWORD PTR [eax+edx+1]
  0028b	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0028e	33 d2		 xor	 edx, edx
  00290	39 41 4c	 cmp	 DWORD PTR [ecx+76], eax
  00293	0f 95 c2	 setne	 dl
  00296	52		 push	 edx
  00297	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0029c	83 c4 10	 add	 esp, 16			; 00000010H
$L31974:

; 454  : 
; 455  :     }
; 456  : 
; 457  :     return hr;

  0029f	8b 45 c8	 mov	 eax, DWORD PTR _hr$[ebp]
  002a2	89 45 a8	 mov	 DWORD PTR $T32767[ebp], eax
  002a5	8d 4d ac	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  002a8	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  002ad	8b 45 a8	 mov	 eax, DWORD PTR $T32767[ebp]

; 458  : }

  002b0	8b e5		 mov	 esp, ebp
  002b2	5d		 pop	 ebp
  002b3	c2 04 00	 ret	 4
?Initialize@CEngine@XACT@@QAEJPAU_XACT_RUNTIME_PARAMETERS@@@Z ENDP ; XACT::CEngine::Initialize
XACTENG	ENDS
EXTRN	_IDirectSound_CreateSoundBuffer@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?CreateSoundBuffer@IDirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z
XACTENG	SEGMENT
_this$ = 8
_pdsbd$ = 12
_ppBuffer$ = 16
_pUnkOuter$ = 20
?CreateSoundBuffer@IDirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z PROC NEAR ; IDirectSound::CreateSoundBuffer, COMDAT

; 1721 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1722 :         return IDirectSound_CreateSoundBuffer(this, pdsbd, ppBuffer, pUnkOuter);

  00003	8b 45 14	 mov	 eax, DWORD PTR _pUnkOuter$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _ppBuffer$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _pdsbd$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSound_CreateSoundBuffer@16

; 1723 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?CreateSoundBuffer@IDirectSound@@QAGJPBU_DSBUFFERDESC@@PAPAUIDirectSoundBuffer@@PAUIUnknown@@@Z ENDP ; IDirectSound::CreateSoundBuffer
XACTENG	ENDS
EXTRN	_IDirectSound_CreateSoundStream@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?CreateSoundStream@IDirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z
XACTENG	SEGMENT
_this$ = 8
_pdssd$ = 12
_ppStream$ = 16
_pUnkOuter$ = 20
?CreateSoundStream@IDirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z PROC NEAR ; IDirectSound::CreateSoundStream, COMDAT

; 1726 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1727 :         return IDirectSound_CreateSoundStream(this, pdssd, ppStream, pUnkOuter);

  00003	8b 45 14	 mov	 eax, DWORD PTR _pUnkOuter$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _ppStream$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _pdssd$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSound_CreateSoundStream@16

; 1728 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?CreateSoundStream@IDirectSound@@QAGJPBU_DSSTREAMDESC@@PAPAUIDirectSoundStream@@PAUIUnknown@@@Z ENDP ; IDirectSound::CreateSoundStream
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; XACT::InsertTailList, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 73		 push	 115			; 00000073H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 116  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 74		 push	 116			; 00000074H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 117  : 
; 118  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 119  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 120  :     
; 121  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 122  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 123  : 
; 124  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7c		 push	 124			; 0000007cH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 125  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; XACT::InsertTailList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z
XACTENG	SEGMENT
_this$ = -4
_dwDSoundFlags$ = 8
?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z PROC NEAR	; XACT::CSoundSource::SetHwVoiceType, COMDAT
; _this$ = ecx

; 651  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         //
; 653  :         // dsound flags for buffer/stream
; 654  :         //
; 655  : 
; 656  :         m_HwVoice.dwFlags = dwDSoundFlags;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _dwDSoundFlags$[ebp]
  0000d	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 657  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetHwVoiceType@CSoundSource@XACT@@IAEXK@Z ENDP		; XACT::CSoundSource::SetHwVoiceType
XACTENG	ENDS
PUBLIC	??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@ ; `string'
PUBLIC	??_C@_0O@GPPGLKMG@ppSoundSource?$AA@		; `string'
EXTRN	??0CSoundSource@XACT@@QAE@XZ:NEAR		; XACT::CSoundSource::CSoundSource
EXTRN	?Initialize@CSoundSource@XACT@@AAEJXZ:NEAR	; XACT::CSoundSource::Initialize
;	COMDAT ??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
XACTENG_RD	SEGMENT
??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@ DB 'Ke'
	DB	'GetCurrentIrql() == PASSIVE_LEVEL', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GPPGLKMG@ppSoundSource?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@GPPGLKMG@ppSoundSource?$AA@ DB 'ppSoundSource', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z
XACTENG	SEGMENT
tv69 = -28
_this$ = -24
$T32786 = -20
$T32783 = -16
___AutoLock$ = -12
_hr$ = -8
_pSoundSource$ = -4
_ppSoundSource$ = 8
?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z PROC NEAR ; XACT::CEngine::AllocateSoundSource, COMDAT
; _this$ = ecx

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 465  :     CSoundSource *pSoundSource;
; 466  :     HRESULT hr = HRFROMP(pSoundSource = NEW(CSoundSource));

  00009	6a 20		 push	 32			; 00000020H
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 f0	 mov	 DWORD PTR $T32783[ebp], eax
  00016	83 7d f0 00	 cmp	 DWORD PTR $T32783[ebp], 0
  0001a	74 0d		 je	 SHORT $L32784
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR $T32783[ebp]
  0001f	e8 00 00 00 00	 call	 ??0CSoundSource@XACT@@QAE@XZ ; XACT::CSoundSource::CSoundSource
  00024	89 45 e4	 mov	 DWORD PTR tv69[ebp], eax
  00027	eb 07		 jmp	 SHORT $L32785
$L32784:
  00029	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$L32785:
  00030	8b 45 e4	 mov	 eax, DWORD PTR tv69[ebp]
  00033	89 45 fc	 mov	 DWORD PTR _pSoundSource$[ebp], eax
  00036	33 c9		 xor	 ecx, ecx
  00038	83 7d fc 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  0003c	0f 95 c1	 setne	 cl
  0003f	49		 dec	 ecx
  00040	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00046	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 467  : 
; 468  :     ASSERT_IN_PASSIVE;

  00049	68 d4 01 00 00	 push	 468			; 000001d4H
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  00058	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0005d	0f b6 d0	 movzx	 edx, al
  00060	f7 da		 neg	 edx
  00062	1b d2		 sbb	 edx, edx
  00064	f7 da		 neg	 edx
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 469  :     ENTER_EXTERNAL_METHOD();

  0006f	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00072	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 470  :     
; 471  :     ASSERT(ppSoundSource);

  00077	68 d7 01 00 00	 push	 471			; 000001d7H
  0007c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GPPGLKMG@ppSoundSource?$AA@
  00086	33 c0		 xor	 eax, eax
  00088	83 7d 08 00	 cmp	 DWORD PTR _ppSoundSource$[ebp], 0
  0008c	0f 94 c0	 sete	 al
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00095	83 c4 10	 add	 esp, 16			; 00000010H

; 472  : 
; 473  :     if(SUCCEEDED(hr)) {

  00098	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009c	7c 13		 jl	 SHORT $L31991

; 474  : 
; 475  :         hr = pSoundSource->Initialize();

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  000a1	e8 00 00 00 00	 call	 ?Initialize@CSoundSource@XACT@@AAEJXZ ; XACT::CSoundSource::Initialize
  000a6	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 476  :         *ppSoundSource = pSoundSource;

  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _ppSoundSource$[ebp]
  000ac	8b 55 fc	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  000af	89 11		 mov	 DWORD PTR [ecx], edx
$L31991:

; 477  : 
; 478  :     }
; 479  : 
; 480  :     DPF_LEAVE_HRESULT(hr);
; 481  :     return hr;

  000b1	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
  000b4	89 45 ec	 mov	 DWORD PTR $T32786[ebp], eax
  000b7	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000ba	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000bf	8b 45 ec	 mov	 eax, DWORD PTR $T32786[ebp]

; 482  : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 04 00	 ret	 4
?AllocateSoundSource@CEngine@XACT@@IAEJPAPAVCSoundSource@2@@Z ENDP ; XACT::CEngine::AllocateSoundSource
XACTENG	ENDS
PUBLIC	?FreeSoundSource@CEngine@XACT@@IAEXPAVCSoundSource@2@@Z ; XACT::CEngine::FreeSoundSource
PUBLIC	??_C@_0N@FLFGDGMG@pSoundSource?$AA@		; `string'
PUBLIC	??_C@_0CA@BFJNEJGD@pSoundSource?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@ ; `string'
PUBLIC	?IsPositional@CSoundSource@XACT@@QAEHXZ		; XACT::CSoundSource::IsPositional
;	COMDAT ??_C@_0N@FLFGDGMG@pSoundSource?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@FLFGDGMG@pSoundSource?$AA@ DB 'pSoundSource', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@BFJNEJGD@pSoundSource?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@
XACTENG_RD	SEGMENT
??_C@_0CA@BFJNEJGD@pSoundSource?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@ DB 'p'
	DB	'SoundSource->m_dwRefCount == 1', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?FreeSoundSource@CEngine@XACT@@IAEXPAVCSoundSource@2@@Z
XACTENG	SEGMENT
_this$ = -8
___AutoLock$ = -4
_pSoundSource$ = 8
?FreeSoundSource@CEngine@XACT@@IAEXPAVCSoundSource@2@@Z PROC NEAR ; XACT::CEngine::FreeSoundSource, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 489  : 
; 490  :     ASSERT_IN_PASSIVE;

  00009	68 ea 01 00 00	 push	 490			; 000001eaH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  00018	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001d	0f b6 c0	 movzx	 eax, al
  00020	f7 d8		 neg	 eax
  00022	1b c0		 sbb	 eax, eax
  00024	f7 d8		 neg	 eax
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 491  :     ENTER_EXTERNAL_METHOD();

  0002f	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00032	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 492  : 
; 493  :     ASSERT(pSoundSource);

  00037	68 ed 01 00 00	 push	 493			; 000001edH
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@FLFGDGMG@pSoundSource?$AA@
  00046	33 c9		 xor	 ecx, ecx
  00048	83 7d 08 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  0004c	0f 94 c1	 sete	 cl
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 494  : 
; 495  :     //
; 496  :     // add the voice in the proper available list.
; 497  :     //
; 498  : 
; 499  :     ASSERT(pSoundSource->m_dwRefCount == 1);

  00058	68 f3 01 00 00	 push	 499			; 000001f3H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BFJNEJGD@pSoundSource?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@
  00067	8b 55 08	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  0006a	33 c0		 xor	 eax, eax
  0006c	83 7a 04 01	 cmp	 DWORD PTR [edx+4], 1
  00070	0f 95 c0	 setne	 al
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 500  : 
; 501  :     if (pSoundSource->IsPositional()) {

  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0007f	e8 00 00 00 00	 call	 ?IsPositional@CSoundSource@XACT@@QAEHXZ ; XACT::CSoundSource::IsPositional
  00084	85 c0		 test	 eax, eax
  00086	74 15		 je	 SHORT $L32000

; 502  :         InsertTailList(&m_lstAvailable3DBuffers, &pSoundSource->m_ListEntry);

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0008b	83 c1 08	 add	 ecx, 8
  0008e	51		 push	 ecx
  0008f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00092	83 c2 18	 add	 edx, 24			; 00000018H
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 503  :     } else {

  0009b	eb 38		 jmp	 SHORT $L32001
$L32000:

; 504  : 
; 505  :         if (pSoundSource->m_HwVoice.pBuffer) {

  0009d	8b 45 08	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  000a0	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  000a4	74 13		 je	 SHORT $L32002

; 506  :             InsertTailList(&m_lstAvailable2DBuffers, &pSoundSource->m_ListEntry);

  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  000a9	83 c1 08	 add	 ecx, 8
  000ac	51		 push	 ecx
  000ad	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b0	83 c2 10	 add	 edx, 16			; 00000010H
  000b3	52		 push	 edx
  000b4	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList
$L32002:

; 507  :         }
; 508  :         
; 509  :         if (pSoundSource->m_HwVoice.pStream) {

  000b9	8b 45 08	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  000bc	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000c0	74 13		 je	 SHORT $L32001

; 510  :             InsertTailList(&m_lstAvailableStreams, &pSoundSource->m_ListEntry);

  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  000c5	83 c1 08	 add	 ecx, 8
  000c8	51		 push	 ecx
  000c9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000cc	83 c2 20	 add	 edx, 32			; 00000020H
  000cf	52		 push	 edx
  000d0	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList
$L32001:

; 511  :         }
; 512  : 
; 513  :     }
; 514  : 
; 515  : }

  000d5	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000d8	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
?FreeSoundSource@CEngine@XACT@@IAEXPAVCSoundSource@2@@Z ENDP ; XACT::CEngine::FreeSoundSource
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT
_this$ = -4
?IsPositional@CSoundSource@XACT@@QAEHXZ PROC NEAR	; XACT::CSoundSource::IsPositional, COMDAT
; _this$ = ecx

; 589  :     {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  :         return (m_HwVoice.dwFlags & DSBCAPS_CTRL3D);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	83 e0 10	 and	 eax, 16			; 00000010H

; 591  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?IsPositional@CSoundSource@XACT@@QAEHXZ ENDP		; XACT::CSoundSource::IsPositional
XACTENG	ENDS
EXTRN	?SetTimeOffset@CEngine@XACT@@QAEXXZ:NEAR	; XACT::CEngine::SetTimeOffset
EXTRN	?DoWork@CSoundCue@XACT@@QAEXXZ:NEAR		; XACT::CSoundCue::DoWork
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
;	COMDAT ?DoWork@CEngine@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -16
___AutoLock$ = -12
_pCue$ = -8
_pEntry$ = -4
?DoWork@CEngine@XACT@@QAEXXZ PROC NEAR			; XACT::CEngine::DoWork, COMDAT
; _this$ = ecx

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 523  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 524  :     PLIST_ENTRY pEntry;
; 525  :     CSoundCue *pCue;
; 526  : 
; 527  :     //
; 528  :     // re-sync offset between cpu clock with apu sample clock
; 529  :     //
; 530  :     
; 531  :     SetTimeOffset();

  00011	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetTimeOffset@CEngine@XACT@@QAEXXZ ; XACT::CEngine::SetTimeOffset

; 532  :     
; 533  :     //
; 534  :     // tell all active cues to get busy
; 535  :     //
; 536  :     
; 537  :     pEntry = m_lstActiveCues.Flink;

  00019	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0001f	89 4d fc	 mov	 DWORD PTR _pEntry$[ebp], ecx
$L32011:

; 538  :     while (pEntry != &m_lstActiveCues)

  00022	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00025	83 c2 38	 add	 edx, 56			; 00000038H
  00028	39 55 fc	 cmp	 DWORD PTR _pEntry$[ebp], edx
  0002b	74 1b		 je	 SHORT $L32012

; 539  :     {
; 540  :         pCue = CONTAINING_RECORD(pEntry, CSoundCue, m_SeqListEntry);

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00030	83 e8 18	 sub	 eax, 24			; 00000018H
  00033	89 45 f8	 mov	 DWORD PTR _pCue$[ebp], eax

; 541  :         pEntry = pEntry->Flink;

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx

; 542  :         
; 543  :         pCue->DoWork();        

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pCue$[ebp]
  00041	e8 00 00 00 00	 call	 ?DoWork@CSoundCue@XACT@@QAEXXZ ; XACT::CSoundCue::DoWork

; 544  :     }

  00046	eb da		 jmp	 SHORT $L32011
$L32012:

; 545  :     
; 546  : 
; 547  : 
; 548  : }

  00048	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?DoWork@CEngine@XACT@@QAEXXZ ENDP			; XACT::CEngine::DoWork
XACTENG	ENDS
PUBLIC	?GetWaveBank@CEngine@XACT@@QAEJPBDPAPAVCWaveBank@2@@Z ; XACT::CEngine::GetWaveBank
PUBLIC	??_C@_0P@JACBKKPO@lpFriendlyName?$AA@		; `string'
PUBLIC	??_C@_0BF@MKEMPEMM@CEngine?3?3GetWaveBank?$AA@	; `string'
PUBLIC	??_C@_0BI@LLCDPBNE@No?5wavebanks?5registered?$AA@ ; `string'
EXTRN	_strncmp:NEAR
;	COMDAT ??_C@_0P@JACBKKPO@lpFriendlyName?$AA@
XACTENG_RD	SEGMENT
??_C@_0P@JACBKKPO@lpFriendlyName?$AA@ DB 'lpFriendlyName', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BF@MKEMPEMM@CEngine?3?3GetWaveBank?$AA@
XACTENG_RD	SEGMENT
??_C@_0BF@MKEMPEMM@CEngine?3?3GetWaveBank?$AA@ DB 'CEngine::GetWaveBank', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@LLCDPBNE@No?5wavebanks?5registered?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@LLCDPBNE@No?5wavebanks?5registered?$AA@ DB 'No wavebanks regist'
	DB	'ered', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?GetWaveBank@CEngine@XACT@@QAEJPBDPAPAVCWaveBank@2@@Z
XACTENG	SEGMENT
_this$ = -28
$T32800 = -24
$T32799 = -20
___AutoLock$ = -16
_hr$ = -12
_pWaveBank$ = -8
_pEntry$ = -4
_lpFriendlyName$ = 8
_ppWaveBank$ = 12
?GetWaveBank@CEngine@XACT@@QAEJPBDPAPAVCWaveBank@2@@Z PROC NEAR ; XACT::CEngine::GetWaveBank, COMDAT
; _this$ = ecx

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 555  :     PLIST_ENTRY pEntry;
; 556  :     CWaveBank *pWaveBank;
; 557  :     HRESULT hr = E_FAIL;

  00009	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 558  : 
; 559  :     ASSERT_IN_PASSIVE;

  00010	68 2f 02 00 00	 push	 559			; 0000022fH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  0001f	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00024	0f b6 c0	 movzx	 eax, al
  00027	f7 d8		 neg	 eax
  00029	1b c0		 sbb	 eax, eax
  0002b	f7 d8		 neg	 eax
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 560  :     ENTER_EXTERNAL_METHOD();

  00036	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00039	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 561  : 
; 562  :     *ppWaveBank = NULL;

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppWaveBank$[ebp]
  00041	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 563  : 
; 564  :     //
; 565  :     // search wavebank list using wavebank friendly name
; 566  :     //
; 567  : 
; 568  :     ASSERT(lpFriendlyName);

  00047	68 38 02 00 00	 push	 568			; 00000238H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@JACBKKPO@lpFriendlyName?$AA@
  00056	33 d2		 xor	 edx, edx
  00058	83 7d 08 00	 cmp	 DWORD PTR _lpFriendlyName$[ebp], 0
  0005c	0f 94 c2	 sete	 dl
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00065	83 c4 10	 add	 esp, 16			; 00000010H

; 569  : 
; 570  :     if (IsListEmpty(&m_lstWaveBanks)) {

  00068	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	83 c0 28	 add	 eax, 40			; 00000028H
  0006e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	39 41 28	 cmp	 DWORD PTR [ecx+40], eax
  00074	75 41		 jne	 SHORT $L32028

; 571  :         DPF_WARNING("No wavebanks registered");

  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0007b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@MKEMPEMM@CEngine?3?3GetWaveBank?$AA@
  00080	68 3b 02 00 00	 push	 571			; 0000023bH
  00085	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0008a	6a 03		 push	 3
  0008c	6a 09		 push	 9
  0008e	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00093	83 c4 18	 add	 esp, 24			; 00000018H
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@LLCDPBNE@No?5wavebanks?5registered?$AA@
  0009b	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000a0	83 c4 04	 add	 esp, 4

; 572  :         return E_FAIL;

  000a3	c7 45 ec 05 40
	00 80		 mov	 DWORD PTR $T32799[ebp], -2147467259 ; 80004005H
  000aa	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000ad	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000b2	8b 45 ec	 mov	 eax, DWORD PTR $T32799[ebp]
  000b5	eb 63		 jmp	 SHORT $L32021
$L32028:

; 573  :     }
; 574  : 
; 575  :     pEntry = m_lstWaveBanks.Flink;

  000b7	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000bd	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax
$L32034:

; 576  :     while (pEntry != &m_lstWaveBanks) {

  000c0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	83 c1 28	 add	 ecx, 40			; 00000028H
  000c6	39 4d fc	 cmp	 DWORD PTR _pEntry$[ebp], ecx
  000c9	74 3e		 je	 SHORT $L32035

; 577  : 
; 578  :         pWaveBank = CONTAINING_RECORD(pEntry, CWaveBank, m_ListEntry);

  000cb	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  000ce	83 ea 28	 sub	 edx, 40			; 00000028H
  000d1	89 55 f8	 mov	 DWORD PTR _pWaveBank$[ebp], edx

; 579  : 
; 580  :         if (!strncmp(pWaveBank->m_WaveBankData.pHeader->szBankName,
; 581  :             lpFriendlyName,
; 582  :             XACT_SOUNDBANK_WAVEBANK_FRIENDLYNAME_LENGTH)) {

  000d4	6a 10		 push	 16			; 00000010H
  000d6	8b 45 08	 mov	 eax, DWORD PTR _lpFriendlyName$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  000dd	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000e0	83 c2 14	 add	 edx, 20			; 00000014H
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 _strncmp
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ec	85 c0		 test	 eax, eax
  000ee	75 0f		 jne	 SHORT $L32040

; 583  : 
; 584  :             //
; 585  :             // found the correct wavebank
; 586  :             //
; 587  : 
; 588  :             *ppWaveBank = pWaveBank;

  000f0	8b 45 0c	 mov	 eax, DWORD PTR _ppWaveBank$[ebp]
  000f3	8b 4d f8	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  000f6	89 08		 mov	 DWORD PTR [eax], ecx

; 589  :             hr = S_OK;

  000f8	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L32040:

; 590  : 
; 591  :         }
; 592  : 
; 593  :         pEntry = pEntry->Flink;

  000ff	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  00102	8b 02		 mov	 eax, DWORD PTR [edx]
  00104	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 594  : 
; 595  :     }

  00107	eb b7		 jmp	 SHORT $L32034
$L32035:

; 596  : 
; 597  :     DPF_LEAVE_HRESULT(hr);
; 598  :     return hr;

  00109	8b 4d f4	 mov	 ecx, DWORD PTR _hr$[ebp]
  0010c	89 4d e8	 mov	 DWORD PTR $T32800[ebp], ecx
  0010f	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00112	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00117	8b 45 e8	 mov	 eax, DWORD PTR $T32800[ebp]
$L32021:

; 599  : 
; 600  : }

  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 08 00	 ret	 8
?GetWaveBank@CEngine@XACT@@QAEJPBDPAPAVCWaveBank@2@@Z ENDP ; XACT::CEngine::GetWaveBank
XACTENG	ENDS
PUBLIC	?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z ; XACT::CEngine::AddNotificationToPendingList
EXTRN	_SetEvent@4:NEAR
EXTRN	__imp__KeQuerySystemTime@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -12
___AutoIrql$32048 = -8
_pContext$ = 8
?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z PROC NEAR ; XACT::CEngine::AddNotificationToPendingList, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 608  : 
; 609  :     if (pContext->bRegistered) {

  00009	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 45		 je	 SHORT $L32046

; 610  :         
; 611  :         {
; 612  :             AutoIrql();

  00011	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$32048[ebp]
  00014	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 613  :             
; 614  :             InsertTailList(&m_lstPendingNotifications,
; 615  :                 &pContext->ListEntry);

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0001c	83 c1 38	 add	 ecx, 56			; 00000038H
  0001f	51		 push	 ecx
  00020	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00023	83 c2 40	 add	 edx, 64			; 00000040H
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 616  :         }

  0002c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$32048[ebp]
  0002f	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql

; 617  :                 
; 618  :         //
; 619  :         // updated timestamp
; 620  :         //
; 621  :         
; 622  :         KeQuerySystemTime((PLARGE_INTEGER)&pContext->PendingNotification.rtTimeStamp);

  00034	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00037	83 c0 28	 add	 eax, 40			; 00000028H
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 623  :                                
; 624  :         //
; 625  :         // signal the event if present
; 626  :         //
; 627  :         
; 628  :         if (pContext->PendingNotification.Header.hEvent) {

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00044	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00048	74 0c		 je	 SHORT $L32046

; 629  :             SetEvent(pContext->PendingNotification.Header.hEvent);

  0004a	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  0004d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _SetEvent@4
$L32046:

; 630  :         }
; 631  :         
; 632  :     }            
; 633  : 
; 634  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z ENDP ; XACT::CEngine::AddNotificationToPendingList
XACTENG	ENDS
PUBLIC	?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z ; XACT::CEngine::HandleNotificationRegistration
PUBLIC	?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CEngine::GetCueNotificationContext
PUBLIC	??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@ ; `string'
PUBLIC	??_C@_0BO@NFMHAMLB@No?5pNotificationDesc?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0CJ@DGDPNDJB@You?5cant?5supply?5pSoundBank?5AND?5p@ ; `string'
PUBLIC	??_C@_0CI@GHCCCCBM@You?5must?5supply?5pSoundBank?5OR?5pS@ ; `string'
PUBLIC	??_C@_0DL@DLKPDCEC@YOu?5must?5supply?5pSoundBank?5if?5dw@ ; `string'
PUBLIC	??_C@_0BK@BDJGOGKM@Invalid?5notification?5type?$AA@ ; `string'
PUBLIC	??_C@_08BAFMHLII@pContext?$AA@			; `string'
PUBLIC	??_C@_0CI@GNFJFCFB@Notification?5type?5?$CFd?5already?5reg@ ; `string'
PUBLIC	??_C@_0CG@IOMODIDD@Notification?5type?5?$CFd?5never?5regis@ ; `string'
PUBLIC	??_C@_0DH@OOELOPJK@SoundCue?5index?5?$CFd?5already?5regist@ ; `string'
PUBLIC	??_C@_0DF@JADIPFCC@SoundCue?5index?5?$CFd?5never?5register@ ; `string'
EXTRN	?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z:NEAR ; XACT::CSoundBank::GetNotificationContext
EXTRN	?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z:NEAR ; XACT::CSoundCue::GetNotificationContext
;	COMDAT ??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
XACTENG_RD	SEGMENT
??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@ DB 'CEngine::Handl'
	DB	'eNotificationRegistration', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@NFMHAMLB@No?5pNotificationDesc?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BO@NFMHAMLB@No?5pNotificationDesc?5supplied?$AA@ DB 'No pNotificat'
	DB	'ionDesc supplied', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CJ@DGDPNDJB@You?5cant?5supply?5pSoundBank?5AND?5p@
XACTENG_RD	SEGMENT
??_C@_0CJ@DGDPNDJB@You?5cant?5supply?5pSoundBank?5AND?5p@ DB 'You cant su'
	DB	'pply pSoundBank AND pSoundCue', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CI@GHCCCCBM@You?5must?5supply?5pSoundBank?5OR?5pS@
XACTENG_RD	SEGMENT
??_C@_0CI@GHCCCCBM@You?5must?5supply?5pSoundBank?5OR?5pS@ DB 'You must su'
	DB	'pply pSoundBank OR pSoundCue', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DL@DLKPDCEC@YOu?5must?5supply?5pSoundBank?5if?5dw@
XACTENG_RD	SEGMENT
??_C@_0DL@DLKPDCEC@YOu?5must?5supply?5pSoundBank?5if?5dw@ DB 'YOu must su'
	DB	'pply pSoundBank if dwSoundCueIndex is specified', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@BDJGOGKM@Invalid?5notification?5type?$AA@
XACTENG_RD	SEGMENT
??_C@_0BK@BDJGOGKM@Invalid?5notification?5type?$AA@ DB 'Invalid notificat'
	DB	'ion type', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_08BAFMHLII@pContext?$AA@
XACTENG_RD	SEGMENT
??_C@_08BAFMHLII@pContext?$AA@ DB 'pContext', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CI@GNFJFCFB@Notification?5type?5?$CFd?5already?5reg@
XACTENG_RD	SEGMENT
??_C@_0CI@GNFJFCFB@Notification?5type?5?$CFd?5already?5reg@ DB 'Notificat'
	DB	'ion type %d already registered', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@IOMODIDD@Notification?5type?5?$CFd?5never?5regis@
XACTENG_RD	SEGMENT
??_C@_0CG@IOMODIDD@Notification?5type?5?$CFd?5never?5regis@ DB 'Notificat'
	DB	'ion type %d never registered', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@OOELOPJK@SoundCue?5index?5?$CFd?5already?5regist@
XACTENG_RD	SEGMENT
??_C@_0DH@OOELOPJK@SoundCue?5index?5?$CFd?5already?5regist@ DB 'SoundCue '
	DB	'index %d already registered on soundbank 0x%x', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DF@JADIPFCC@SoundCue?5index?5?$CFd?5never?5register@
XACTENG_RD	SEGMENT
??_C@_0DF@JADIPFCC@SoundCue?5index?5?$CFd?5never?5register@ DB 'SoundCue '
	DB	'index %d never registered on soundbank 0x%x', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z
XACTENG	SEGMENT
tv156 = -32
_this$ = -28
$T32810 = -24
$T32809 = -20
_pCueContext$32084 = -16
___AutoLock$ = -12
_pContext$ = -8
_dwType$ = -4
_pNotificationDesc$ = 8
_bRegister$ = 12
?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z PROC NEAR ; XACT::CEngine::HandleNotificationRegistration, COMDAT
; _this$ = ecx

; 640  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 641  :     DPF_ENTER();
; 642  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 643  :     PNOTIFICATION_CONTEXT pContext = NULL;

  00011	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pContext$[ebp], 0

; 644  : 
; 645  : #ifdef VALIDATE_PARAMETERS
; 646  : 
; 647  :     if(!pNotificationDesc)

  00018	83 7d 08 00	 cmp	 DWORD PTR _pNotificationDesc$[ebp], 0
  0001c	75 2d		 jne	 SHORT $L32058

; 648  :     {
; 649  :         DPF_ERROR("No pNotificationDesc supplied");

  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  00028	68 89 02 00 00	 push	 649			; 00000289H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00032	6a 01		 push	 1
  00034	6a 09		 push	 9
  00036	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0003b	83 c4 18	 add	 esp, 24			; 00000018H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NFMHAMLB@No?5pNotificationDesc?5supplied?$AA@
  00043	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00048	83 c4 04	 add	 esp, 4
$L32058:

; 650  :     }
; 651  : 
; 652  :     if (pNotificationDesc->pSoundBank && pNotificationDesc->pSoundCue) {

  0004b	8b 45 08	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  0004e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00052	74 36		 je	 SHORT $L32061
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00057	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0005b	74 2d		 je	 SHORT $L32061

; 653  : 
; 654  :         DPF_ERROR("You cant supply pSoundBank AND pSoundCue");

  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  00067	68 8e 02 00 00	 push	 654			; 0000028eH
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00071	6a 01		 push	 1
  00073	6a 09		 push	 9
  00075	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0007a	83 c4 18	 add	 esp, 24			; 00000018H
  0007d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@DGDPNDJB@You?5cant?5supply?5pSoundBank?5AND?5p@
  00082	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00087	83 c4 04	 add	 esp, 4
$L32061:

; 655  :     }
; 656  : 
; 657  :     if (!pNotificationDesc->pSoundBank && !pNotificationDesc->pSoundCue) {

  0008a	8b 55 08	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  0008d	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00091	75 36		 jne	 SHORT $L32063
  00093	8b 45 08	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00096	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0009a	75 2d		 jne	 SHORT $L32063

; 658  : 
; 659  :         DPF_ERROR("You must supply pSoundBank OR pSoundCue");

  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  000a6	68 93 02 00 00	 push	 659			; 00000293H
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000b0	6a 01		 push	 1
  000b2	6a 09		 push	 9
  000b4	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000b9	83 c4 18	 add	 esp, 24			; 00000018H
  000bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@GHCCCCBM@You?5must?5supply?5pSoundBank?5OR?5pS@
  000c1	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000c6	83 c4 04	 add	 esp, 4
$L32063:

; 660  :     }
; 661  : 
; 662  :     if ((pNotificationDesc->dwSoundCueIndex != XACT_SOUNDCUE_INDEX_UNUSED) &&
; 663  :         (!pNotificationDesc->pSoundBank)) { 

  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  000cc	83 79 0c ff	 cmp	 DWORD PTR [ecx+12], -1
  000d0	74 36		 je	 SHORT $L32065
  000d2	8b 55 08	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  000d5	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000d9	75 2d		 jne	 SHORT $L32065

; 664  : 
; 665  :         DPF_WARNING("YOu must supply pSoundBank if dwSoundCueIndex is specified");

  000db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  000e5	68 99 02 00 00	 push	 665			; 00000299H
  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000ef	6a 03		 push	 3
  000f1	6a 09		 push	 9
  000f3	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000f8	83 c4 18	 add	 esp, 24			; 00000018H
  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DL@DLKPDCEC@YOu?5must?5supply?5pSoundBank?5if?5dw@
  00100	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00105	83 c4 04	 add	 esp, 4
$L32065:

; 666  : 
; 667  :     }
; 668  : 
; 669  :     //
; 670  :     // validate notification type
; 671  :     //
; 672  : 
; 673  :     if ((pNotificationDesc->dwType & XACT_MASK_NOTIFICATION_TYPE) >= eXACTNotification_Max) {

  00108	8b 45 08	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00113	83 f9 03	 cmp	 ecx, 3
  00116	72 2d		 jb	 SHORT $L32067

; 674  :         DPF_ERROR("Invalid notification type");

  00118	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0011d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  00122	68 a2 02 00 00	 push	 674			; 000002a2H
  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0012c	6a 01		 push	 1
  0012e	6a 09		 push	 9
  00130	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00135	83 c4 18	 add	 esp, 24			; 00000018H
  00138	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@BDJGOGKM@Invalid?5notification?5type?$AA@
  0013d	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00142	83 c4 04	 add	 esp, 4
$L32067:

; 675  :     }
; 676  : 
; 677  : #endif // VALIDATE_PARAMETERS
; 678  : 
; 679  :     DWORD dwType = pNotificationDesc->dwType & XACT_MASK_NOTIFICATION_TYPE;

  00145	8b 55 08	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  00148	8b 02		 mov	 eax, DWORD PTR [edx]
  0014a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0014f	89 45 fc	 mov	 DWORD PTR _dwType$[ebp], eax

; 680  : 
; 681  :     //
; 682  :     // first retrieve the correct notification context from a soundbank or a cue
; 683  :     //
; 684  : 
; 685  :     if (pNotificationDesc->pSoundBank) {

  00152	8b 4d 08	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00155	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00159	74 2f		 je	 SHORT $L32070

; 686  : 
; 687  :         pContext = ((CSoundBank *)pNotificationDesc->pSoundBank)->GetNotificationContext(dwType);

  0015b	8b 55 08	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  0015e	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00162	74 0e		 je	 SHORT $L32807
  00164	8b 45 08	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00167	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016a	83 e9 08	 sub	 ecx, 8
  0016d	89 4d e0	 mov	 DWORD PTR tv156[ebp], ecx
  00170	eb 07		 jmp	 SHORT $L32808
$L32807:
  00172	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv156[ebp], 0
$L32808:
  00179	8b 55 fc	 mov	 edx, DWORD PTR _dwType$[ebp]
  0017c	52		 push	 edx
  0017d	8b 4d e0	 mov	 ecx, DWORD PTR tv156[ebp]
  00180	e8 00 00 00 00	 call	 ?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundBank::GetNotificationContext
  00185	89 45 f8	 mov	 DWORD PTR _pContext$[ebp], eax

; 688  : 
; 689  :     } else if (pNotificationDesc->pSoundCue) {

  00188	eb 1b		 jmp	 SHORT $L32072
$L32070:
  0018a	8b 45 08	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  0018d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00191	74 12		 je	 SHORT $L32072

; 690  : 
; 691  :         //
; 692  :         // tell the cue to handle the registration
; 693  :         //
; 694  : 
; 695  :         pContext = ((CSoundCue *)pNotificationDesc->pSoundCue)->GetNotificationContext(dwType);

  00193	8b 4d fc	 mov	 ecx, DWORD PTR _dwType$[ebp]
  00196	51		 push	 ecx
  00197	8b 55 08	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  0019a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0019d	e8 00 00 00 00	 call	 ?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundCue::GetNotificationContext
  001a2	89 45 f8	 mov	 DWORD PTR _pContext$[ebp], eax
$L32072:

; 696  : 
; 697  :     }
; 698  : 
; 699  :     ASSERT(pContext);

  001a5	68 bb 02 00 00	 push	 699			; 000002bbH
  001aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  001af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08BAFMHLII@pContext?$AA@
  001b4	33 c0		 xor	 eax, eax
  001b6	83 7d f8 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  001ba	0f 94 c0	 sete	 al
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  001c3	83 c4 10	 add	 esp, 16			; 00000010H

; 700  : 
; 701  :     //
; 702  :     // check if a notification of the same type is already registered
; 703  :     //
; 704  :     
; 705  : #if DBG
; 706  :     if (bRegister && pContext->bRegistered) {

  001c6	83 7d 0c 00	 cmp	 DWORD PTR _bRegister$[ebp], 0
  001ca	74 39		 je	 SHORT $L32076
  001cc	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  001cf	83 39 00	 cmp	 DWORD PTR [ecx], 0
  001d2	74 31		 je	 SHORT $L32076

; 707  :         
; 708  :         DPF_WARNING("Notification type %d already registered",
; 709  :             dwType);

  001d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  001d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  001de	68 c4 02 00 00	 push	 708			; 000002c4H
  001e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  001e8	6a 03		 push	 3
  001ea	6a 09		 push	 9
  001ec	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  001f1	83 c4 18	 add	 esp, 24			; 00000018H
  001f4	8b 55 fc	 mov	 edx, DWORD PTR _dwType$[ebp]
  001f7	52		 push	 edx
  001f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@GNFJFCFB@Notification?5type?5?$CFd?5already?5reg@
  001fd	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00202	83 c4 08	 add	 esp, 8
$L32076:

; 710  :         
; 711  :     }
; 712  :     
; 713  :     if (!bRegister && !pContext->bRegistered) {

  00205	83 7d 0c 00	 cmp	 DWORD PTR _bRegister$[ebp], 0
  00209	75 39		 jne	 SHORT $L32078
  0020b	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  0020e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00211	75 31		 jne	 SHORT $L32078

; 714  :         
; 715  :         DPF_WARNING("Notification type %d never registered",
; 716  :             dwType);

  00213	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00218	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  0021d	68 cb 02 00 00	 push	 715			; 000002cbH
  00222	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00227	6a 03		 push	 3
  00229	6a 09		 push	 9
  0022b	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00230	83 c4 18	 add	 esp, 24			; 00000018H
  00233	8b 4d fc	 mov	 ecx, DWORD PTR _dwType$[ebp]
  00236	51		 push	 ecx
  00237	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@IOMODIDD@Notification?5type?5?$CFd?5never?5regis@
  0023c	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00241	83 c4 08	 add	 esp, 8
$L32078:

; 717  :         
; 718  :     }
; 719  : #endif
; 720  :     
; 721  :     if (bRegister && !pContext->bRegistered) {

  00244	83 7d 0c 00	 cmp	 DWORD PTR _bRegister$[ebp], 0
  00248	74 38		 je	 SHORT $L32080
  0024a	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  0024d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00250	75 30		 jne	 SHORT $L32080

; 722  :         
; 723  :         //
; 724  :         // this could be the first registration for this event/object combo
; 725  :         //
; 726  :         
; 727  :         InitializeListHead(&pContext->ListEntry);

  00252	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00255	83 c0 38	 add	 eax, 56			; 00000038H
  00258	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0025b	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
  0025e	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  00261	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00264	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00267	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 728  :         InitializeListHead(&pContext->lstRegisteredCues);

  0026a	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  0026d	83 c2 30	 add	 edx, 48			; 00000030H
  00270	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00273	89 50 34	 mov	 DWORD PTR [eax+52], edx
  00276	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00279	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  0027c	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0027f	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$L32080:

; 729  :         
; 730  :     }
; 731  :     
; 732  :     //
; 733  :     // save the notification description
; 734  :     //
; 735  :     
; 736  :     memcpy(&pContext->PendingNotification.Header,
; 737  :         pNotificationDesc,
; 738  :         sizeof(XACT_NOTIFICATION_DESCRIPTION));

  00282	6a 18		 push	 24			; 00000018H
  00284	8b 4d 08	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00287	51		 push	 ecx
  00288	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  0028b	83 c2 08	 add	 edx, 8
  0028e	52		 push	 edx
  0028f	e8 00 00 00 00	 call	 _memcpy
  00294	83 c4 0c	 add	 esp, 12			; 0000000cH

; 739  :     
; 740  :     
; 741  :     pContext->bRegistered = bRegister;

  00297	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  0029a	8b 4d 0c	 mov	 ecx, DWORD PTR _bRegister$[ebp]
  0029d	89 08		 mov	 DWORD PTR [eax], ecx

; 742  :     
; 743  :     if (!IsListEmpty(&pContext->ListEntry)) {

  0029f	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  002a2	83 c2 38	 add	 edx, 56			; 00000038H
  002a5	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  002a8	39 50 38	 cmp	 DWORD PTR [eax+56], edx
  002ab	74 0c		 je	 SHORT $L32082

; 744  :         RemoveEntryList(&pContext->ListEntry);

  002ad	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  002b0	83 c1 38	 add	 ecx, 56			; 00000038H
  002b3	51		 push	 ecx
  002b4	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
$L32082:

; 745  :     }
; 746  : 
; 747  :     if (pNotificationDesc->dwSoundCueIndex != XACT_SOUNDCUE_INDEX_UNUSED) {

  002b9	8b 55 08	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  002bc	83 7a 0c ff	 cmp	 DWORD PTR [edx+12], -1
  002c0	0f 84 27 01 00
	00		 je	 $L32083

; 748  : 
; 749  :         PCUE_INDEX_NOTIFICATION_CONTEXT pCueContext;
; 750  : 
; 751  :         //
; 752  :         // create a link list of cue indices that are registred for this event type on
; 753  :         // the soundbank. Then when play is called on the soundbank, using the same CueIndex,
; 754  :         // turn around and register a notification with the particular cue instance
; 755  :         //
; 756  : 
; 757  :         pCueContext = GetCueNotificationContext(pContext,pNotificationDesc->dwSoundCueIndex);

  002c6	8b 45 08	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  002c9	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002cc	51		 push	 ecx
  002cd	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  002d0	52		 push	 edx
  002d1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002d4	e8 00 00 00 00	 call	 ?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CEngine::GetCueNotificationContext
  002d9	89 45 f0	 mov	 DWORD PTR _pCueContext$32084[ebp], eax

; 758  : 
; 759  :         if (bRegister) {                        

  002dc	83 7d 0c 00	 cmp	 DWORD PTR _bRegister$[ebp], 0
  002e0	0f 84 9c 00 00
	00		 je	 $L32085

; 760  :             
; 761  :             if (!pCueContext) {

  002e6	83 7d f0 00	 cmp	 DWORD PTR _pCueContext$32084[ebp], 0
  002ea	75 59		 jne	 SHORT $L32086

; 762  :                 
; 763  :                 pCueContext = NEW(CUE_INDEX_NOTIFICATION_CONTEXT);

  002ec	6a 10		 push	 16			; 00000010H
  002ee	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002f3	83 c4 04	 add	 esp, 4
  002f6	89 45 ec	 mov	 DWORD PTR $T32809[ebp], eax
  002f9	8b 45 ec	 mov	 eax, DWORD PTR $T32809[ebp]
  002fc	89 45 f0	 mov	 DWORD PTR _pCueContext$32084[ebp], eax

; 764  :                 
; 765  :                 if (pCueContext) {

  002ff	83 7d f0 00	 cmp	 DWORD PTR _pCueContext$32084[ebp], 0
  00303	74 3e		 je	 SHORT $L32089

; 766  :                     
; 767  :                     pCueContext->dwSoundCueIndex = pNotificationDesc->dwSoundCueIndex;

  00305	8b 4d f0	 mov	 ecx, DWORD PTR _pCueContext$32084[ebp]
  00308	8b 55 08	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  0030b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0030e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 768  :                     InitializeListHead(&pCueContext->ListEntry);

  00311	8b 4d f0	 mov	 ecx, DWORD PTR _pCueContext$32084[ebp]
  00314	8b 55 f0	 mov	 edx, DWORD PTR _pCueContext$32084[ebp]
  00317	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0031a	8b 45 f0	 mov	 eax, DWORD PTR _pCueContext$32084[ebp]
  0031d	8b 4d f0	 mov	 ecx, DWORD PTR _pCueContext$32084[ebp]
  00320	89 08		 mov	 DWORD PTR [eax], ecx

; 769  :                     InsertTailList(&pContext->lstRegisteredCues,
; 770  :                         &pCueContext->ListEntry);

  00322	8b 55 f0	 mov	 edx, DWORD PTR _pCueContext$32084[ebp]
  00325	52		 push	 edx
  00326	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00329	83 c0 30	 add	 eax, 48			; 00000030H
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 771  : 
; 772  :                     pCueContext->bPersist = pNotificationDesc->dwType & XACT_FLAG_NOTIFICATION_PERSIST;

  00332	8b 4d 08	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00335	8b 11		 mov	 edx, DWORD PTR [ecx]
  00337	81 e2 00 00 01
	00		 and	 edx, 65536		; 00010000H
  0033d	8b 45 f0	 mov	 eax, DWORD PTR _pCueContext$32084[ebp]
  00340	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$L32089:

; 773  :                 }
; 774  : 
; 775  :             } else {

  00343	eb 3b		 jmp	 SHORT $L32090
$L32086:

; 776  : 
; 777  :                 DPF_WARNING("SoundCue index %d already registered on soundbank 0x%x",
; 778  :                     pNotificationDesc->dwSoundCueIndex,
; 779  :                     pContext->PendingNotification.Header.pSoundBank);

  00345	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0034a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  0034f	68 09 03 00 00	 push	 777			; 00000309H
  00354	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00359	6a 03		 push	 3
  0035b	6a 09		 push	 9
  0035d	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00362	83 c4 18	 add	 esp, 24			; 00000018H
  00365	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00368	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0036b	52		 push	 edx
  0036c	8b 45 08	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  0036f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00372	51		 push	 ecx
  00373	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@OOELOPJK@SoundCue?5index?5?$CFd?5already?5regist@
  00378	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0037d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L32090:

; 780  : 
; 781  :             }
; 782  : 
; 783  :         } else {

  00380	eb 6b		 jmp	 SHORT $L32083
$L32085:

; 784  : 
; 785  :             if(!pCueContext) {

  00382	83 7d f0 00	 cmp	 DWORD PTR _pCueContext$32084[ebp], 0
  00386	75 3d		 jne	 SHORT $L32093

; 786  : 
; 787  :                 DPF_WARNING("SoundCue index %d never registered on soundbank 0x%x",
; 788  :                     pNotificationDesc->dwSoundCueIndex,
; 789  :                     pContext->PendingNotification.Header.pSoundBank);

  00388	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0038d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  00392	68 13 03 00 00	 push	 787			; 00000313H
  00397	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0039c	6a 03		 push	 3
  0039e	6a 09		 push	 9
  003a0	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  003a5	83 c4 18	 add	 esp, 24			; 00000018H
  003a8	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  003ab	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003ae	50		 push	 eax
  003af	8b 4d 08	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  003b2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  003b5	52		 push	 edx
  003b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@JADIPFCC@SoundCue?5index?5?$CFd?5never?5register@
  003bb	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  003c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 790  : 
; 791  :             } else {

  003c3	eb 28		 jmp	 SHORT $L32083
$L32093:

; 792  : 
; 793  :                 RemoveEntryList(&pCueContext->ListEntry);

  003c5	8b 45 f0	 mov	 eax, DWORD PTR _pCueContext$32084[ebp]
  003c8	50		 push	 eax
  003c9	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 794  :                 DELETE(pCueContext);

  003ce	83 7d f0 00	 cmp	 DWORD PTR _pCueContext$32084[ebp], 0
  003d2	74 19		 je	 SHORT $L32083
  003d4	8b 4d f0	 mov	 ecx, DWORD PTR _pCueContext$32084[ebp]
  003d7	89 4d e8	 mov	 DWORD PTR $T32810[ebp], ecx
  003da	8b 55 e8	 mov	 edx, DWORD PTR $T32810[ebp]
  003dd	52		 push	 edx
  003de	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003e3	83 c4 04	 add	 esp, 4
  003e6	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pCueContext$32084[ebp], 0
$L32083:

; 795  : 
; 796  :             }
; 797  : 
; 798  :         }
; 799  : 
; 800  :     }
; 801  : 
; 802  :     return;

  003ed	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  003f0	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock

; 803  : 
; 804  : }

  003f5	8b e5		 mov	 esp, ebp
  003f7	5d		 pop	 ebp
  003f8	c2 08 00	 ret	 8
?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z ENDP ; XACT::CEngine::HandleNotificationRegistration
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z
XACTENG	SEGMENT
_this$ = -12
_pEntry$ = -8
_pCueContext$ = -4
_pContext$ = 8
_dwSoundCueIndex$ = 12
?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z PROC NEAR ; XACT::CEngine::GetCueNotificationContext, COMDAT
; _this$ = ecx

; 808  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 809  : 
; 810  :     PLIST_ENTRY pEntry;
; 811  :     PCUE_INDEX_NOTIFICATION_CONTEXT pCueContext = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCueContext$[ebp], 0

; 812  : 
; 813  :     pEntry = pContext->lstRegisteredCues.Flink;

  00010	8b 45 08	 mov	 eax, DWORD PTR _pContext$[ebp]
  00013	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00016	89 4d f8	 mov	 DWORD PTR _pEntry$[ebp], ecx
$L32106:

; 814  :     while (pEntry && pEntry != &pContext->lstRegisteredCues) {

  00019	83 7d f8 00	 cmp	 DWORD PTR _pEntry$[ebp], 0
  0001d	74 2f		 je	 SHORT $L32107
  0001f	8b 55 08	 mov	 edx, DWORD PTR _pContext$[ebp]
  00022	83 c2 30	 add	 edx, 48			; 00000030H
  00025	39 55 f8	 cmp	 DWORD PTR _pEntry$[ebp], edx
  00028	74 24		 je	 SHORT $L32107

; 815  : 
; 816  :         pCueContext = CONTAINING_RECORD(pEntry,
; 817  :             CUE_INDEX_NOTIFICATION_CONTEXT,
; 818  :             ListEntry);

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  0002d	89 45 fc	 mov	 DWORD PTR _pCueContext$[ebp], eax

; 819  :         
; 820  :         if (pCueContext->dwSoundCueIndex == dwSoundCueIndex) {

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _pCueContext$[ebp]
  00033	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00036	3b 55 0c	 cmp	 edx, DWORD PTR _dwSoundCueIndex$[ebp]
  00039	75 02		 jne	 SHORT $L32112

; 821  :             break;

  0003b	eb 11		 jmp	 SHORT $L32107
$L32112:

; 822  :         } else {
; 823  :             pCueContext = NULL;

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCueContext$[ebp], 0

; 824  :         }
; 825  : 
; 826  :         pEntry = pEntry->Flink;

  00044	8b 45 f8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4d f8	 mov	 DWORD PTR _pEntry$[ebp], ecx

; 827  : 
; 828  :     }

  0004c	eb cb		 jmp	 SHORT $L32106
$L32107:

; 829  : 
; 830  :     return pCueContext;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _pCueContext$[ebp]

; 831  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z ENDP ; XACT::CEngine::GetCueNotificationContext
XACTENG	ENDS
PUBLIC	?IsDuplicateWaveBank@CEngine@XACT@@QAEXPAVCWaveBank@2@@Z ; XACT::CEngine::IsDuplicateWaveBank
PUBLIC	??_C@_0CP@KLIFEBKN@Same?5wavebank?5?$CI?$CFs?$CJ?5has?5already?5b@ ; `string'
;	COMDAT ??_C@_0CP@KLIFEBKN@Same?5wavebank?5?$CI?$CFs?$CJ?5has?5already?5b@
XACTENG_RD	SEGMENT
??_C@_0CP@KLIFEBKN@Same?5wavebank?5?$CI?$CFs?$CJ?5has?5already?5b@ DB 'Sa'
	DB	'me wavebank (%s) has already been registered', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?IsDuplicateWaveBank@CEngine@XACT@@QAEXPAVCWaveBank@2@@Z
XACTENG	SEGMENT
_this$ = -12
_pExistingWaveBank$ = -8
_pEntry$ = -4
_pWaveBank$ = 8
?IsDuplicateWaveBank@CEngine@XACT@@QAEXPAVCWaveBank@2@@Z PROC NEAR ; XACT::CEngine::IsDuplicateWaveBank, COMDAT
; _this$ = ecx

; 835  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 836  : 
; 837  : #if DBG
; 838  :     //
; 839  :     // check if this wavebank has been registered before
; 840  :     //
; 841  :     
; 842  :     CWaveBank *pExistingWaveBank;
; 843  :     PLIST_ENTRY pEntry = m_lstWaveBanks.Flink;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0000f	89 4d fc	 mov	 DWORD PTR _pEntry$[ebp], ecx
$L32121:

; 844  :     while (pEntry != &m_lstWaveBanks) {

  00012	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00015	83 c2 28	 add	 edx, 40			; 00000028H
  00018	39 55 fc	 cmp	 DWORD PTR _pEntry$[ebp], edx
  0001b	74 6e		 je	 SHORT $L32117

; 845  :         
; 846  :         pExistingWaveBank = CONTAINING_RECORD(pEntry,CWaveBank,m_ListEntry);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00020	83 e8 28	 sub	 eax, 40			; 00000028H
  00023	89 45 f8	 mov	 DWORD PTR _pExistingWaveBank$[ebp], eax

; 847  :         if (!strncmp(pExistingWaveBank->m_WaveBankData.pHeader->szBankName,
; 848  :             pWaveBank->m_WaveBankData.pHeader->szBankName,
; 849  :             WAVEBANKHEADER_BANKNAME_LENGTH)) {

  00026	6a 10		 push	 16			; 00000010H
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  0002b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002e	83 c2 14	 add	 edx, 20			; 00000014H
  00031	52		 push	 edx
  00032	8b 45 f8	 mov	 eax, DWORD PTR _pExistingWaveBank$[ebp]
  00035	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00038	83 c1 14	 add	 ecx, 20			; 00000014H
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 _strncmp
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	85 c0		 test	 eax, eax
  00046	75 39		 jne	 SHORT $L32127

; 850  :             
; 851  :             DPF_ERROR("Same wavebank (%s) has already been registered",
; 852  :                 pWaveBank->m_WaveBankData.pHeader->szBankName);

  00048	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0004d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@EGEBPIAL@CEngine?3?3HandleNotificationRegis@
  00052	68 53 03 00 00	 push	 851			; 00000353H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0005c	6a 01		 push	 1
  0005e	6a 09		 push	 9
  00060	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	8b 55 08	 mov	 edx, DWORD PTR _pWaveBank$[ebp]
  0006b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006e	83 c0 14	 add	 eax, 20			; 00000014H
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@KLIFEBKN@Same?5wavebank?5?$CI?$CFs?$CJ?5has?5already?5b@
  00077	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0007c	83 c4 08	 add	 esp, 8

; 853  :             
; 854  :             break;

  0007f	eb 0a		 jmp	 SHORT $L32117
$L32127:

; 855  :             
; 856  :         }
; 857  : 
; 858  :         pEntry = pEntry->Flink;

  00081	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx

; 859  :         
; 860  :     }

  00089	eb 87		 jmp	 SHORT $L32121
$L32117:

; 861  : #endif
; 862  :     
; 863  : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?IsDuplicateWaveBank@CEngine@XACT@@QAEXPAVCWaveBank@2@@Z ENDP ; XACT::CEngine::IsDuplicateWaveBank
XACTENG	ENDS
PUBLIC	?LoadDspImage@CEngine@XACT@@QAGJPAXKPBU_DSEFFECTIMAGELOC@@@Z ; XACT::CEngine::LoadDspImage
PUBLIC	??_C@_0BG@JACHNFOM@CEngine?3?3LoadDspImage?$AA@	; `string'
PUBLIC	??_C@_0BN@MGIGFILE@No?5DSP?5image?5buffer?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BH@HOICHCJA@Invalid?5DSP?5image?5size?$AA@ ; `string'
PUBLIC	?DownloadEffectsImage@IDirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z ; IDirectSound::DownloadEffectsImage
;	COMDAT ??_C@_0BG@JACHNFOM@CEngine?3?3LoadDspImage?$AA@
XACTENG_RD	SEGMENT
??_C@_0BG@JACHNFOM@CEngine?3?3LoadDspImage?$AA@ DB 'CEngine::LoadDspImage'
	DB	00H						; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BN@MGIGFILE@No?5DSP?5image?5buffer?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BN@MGIGFILE@No?5DSP?5image?5buffer?5supplied?$AA@ DB 'No DSP image'
	DB	' buffer supplied', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@HOICHCJA@Invalid?5DSP?5image?5size?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@HOICHCJA@Invalid?5DSP?5image?5size?$AA@ DB 'Invalid DSP image s'
	DB	'ize', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?LoadDspImage@CEngine@XACT@@QAGJPAXKPBU_DSEFFECTIMAGELOC@@@Z
XACTENG	SEGMENT
$T32820 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pvBuffer$ = 12
_dwSize$ = 16
_pEffectLoc$ = 20
?LoadDspImage@CEngine@XACT@@QAGJPAXKPBU_DSEFFECTIMAGELOC@@@Z PROC NEAR ; XACT::CEngine::LoadDspImage, COMDAT

; 877  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 878  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 879  : 
; 880  :     DPF_ENTER();
; 881  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 882  : 
; 883  : #ifdef VALIDATE_PARAMETERS
; 884  : 
; 885  :     if(!pvBuffer)

  00015	83 7d 0c 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00019	75 2d		 jne	 SHORT $L32138

; 886  :     {
; 887  :         DPF_ERROR("No DSP image buffer supplied");

  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JACHNFOM@CEngine?3?3LoadDspImage?$AA@
  00025	68 77 03 00 00	 push	 887			; 00000377H
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0002f	6a 01		 push	 1
  00031	6a 09		 push	 9
  00033	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@MGIGFILE@No?5DSP?5image?5buffer?5supplied?$AA@
  00040	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00045	83 c4 04	 add	 esp, 4
$L32138:

; 888  :     }
; 889  : 
; 890  :     if (dwSize == 0)

  00048	83 7d 10 00	 cmp	 DWORD PTR _dwSize$[ebp], 0
  0004c	75 2d		 jne	 SHORT $L32141

; 891  :     {
; 892  :         DPF_ERROR("Invalid DSP image size");

  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@JACHNFOM@CEngine?3?3LoadDspImage?$AA@
  00058	68 7c 03 00 00	 push	 892			; 0000037cH
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00062	6a 01		 push	 1
  00064	6a 09		 push	 9
  00066	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0006b	83 c4 18	 add	 esp, 24			; 00000018H
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@HOICHCJA@Invalid?5DSP?5image?5size?$AA@
  00073	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00078	83 c4 04	 add	 esp, 4
$L32141:

; 893  :     }
; 894  : 
; 895  : #endif // VALIDATE_PARAMETERS
; 896  : 
; 897  :     //
; 898  :     // Download the image, save the description
; 899  :     //
; 900  :     
; 901  :     hr = m_pDirectSound->DownloadEffectsImage(pvBuffer, dwSize, pEffectLoc, &m_pDspImageDesc);

  0007b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	83 c0 08	 add	 eax, 8
  00081	50		 push	 eax
  00082	8b 4d 14	 mov	 ecx, DWORD PTR _pEffectLoc$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 10	 mov	 edx, DWORD PTR _dwSize$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 0c	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ?DownloadEffectsImage@IDirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z ; IDirectSound::DownloadEffectsImage
  0009a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 902  : 
; 903  :     DPF_LEAVE_HRESULT(hr);
; 904  : 
; 905  :     return hr;

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  000a0	89 45 f4	 mov	 DWORD PTR $T32820[ebp], eax
  000a3	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000a6	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000ab	8b 45 f4	 mov	 eax, DWORD PTR $T32820[ebp]

; 906  : }

  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 10 00	 ret	 16			; 00000010H
?LoadDspImage@CEngine@XACT@@QAGJPAXKPBU_DSEFFECTIMAGELOC@@@Z ENDP ; XACT::CEngine::LoadDspImage
XACTENG	ENDS
EXTRN	_IDirectSound_DownloadEffectsImage@20:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?DownloadEffectsImage@IDirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z
XACTENG	SEGMENT
_this$ = 8
_pvImageBuffer$ = 12
_dwImageSize$ = 16
_pImageLoc$ = 20
_ppImageDesc$ = 24
?DownloadEffectsImage@IDirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z PROC NEAR ; IDirectSound::DownloadEffectsImage, COMDAT

; 1746 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1747 :         return IDirectSound_DownloadEffectsImage(this, pvImageBuffer, dwImageSize, pImageLoc, ppImageDesc);

  00003	8b 45 18	 mov	 eax, DWORD PTR _ppImageDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _pImageLoc$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _dwImageSize$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _pvImageBuffer$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSound_DownloadEffectsImage@20

; 1748 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?DownloadEffectsImage@IDirectSound@@QAGJPBXKPBU_DSEFFECTIMAGELOC@@PAPAU_DSEFFECTIMAGEDESC@@@Z ENDP ; IDirectSound::DownloadEffectsImage
XACTENG	ENDS
PUBLIC	?CreateSoundSource@CEngine@XACT@@QAGJKPAPAUIXACTSoundSource@@@Z ; XACT::CEngine::CreateSoundSource
PUBLIC	?IsValidSoundSourceFlags@CEngine@XACT@@QAEHK@Z	; XACT::CEngine::IsValidSoundSourceFlags
PUBLIC	??_C@_0BL@OPDIGNNE@CEngine?3?3CreateSoundSource?$AA@ ; `string'
PUBLIC	??_C@_0BK@MGOAHAKK@No?5ppSoundSource?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0CF@PIFJCMEL@Invalid?5sound?5source?5flags?5speci@ ; `string'
PUBLIC	??_C@_0CH@LPPFGGKE@?$CBIsListEmpty?$CI?$CGm_lstAvailable3DBu@ ; `string'
PUBLIC	??_C@_0CH@HOHLLJGE@?$CBIsListEmpty?$CI?$CGm_lstAvailable2DBu@ ; `string'
;	COMDAT ??_C@_0BL@OPDIGNNE@CEngine?3?3CreateSoundSource?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
XACTENG_RD	SEGMENT
??_C@_0BL@OPDIGNNE@CEngine?3?3CreateSoundSource?$AA@ DB 'CEngine::CreateS'
	DB	'oundSource', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@MGOAHAKK@No?5ppSoundSource?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BK@MGOAHAKK@No?5ppSoundSource?5supplied?$AA@ DB 'No ppSoundSource '
	DB	'supplied', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CF@PIFJCMEL@Invalid?5sound?5source?5flags?5speci@
XACTENG_RD	SEGMENT
??_C@_0CF@PIFJCMEL@Invalid?5sound?5source?5flags?5speci@ DB 'Invalid soun'
	DB	'd source flags specified', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CH@LPPFGGKE@?$CBIsListEmpty?$CI?$CGm_lstAvailable3DBu@
XACTENG_RD	SEGMENT
??_C@_0CH@LPPFGGKE@?$CBIsListEmpty?$CI?$CGm_lstAvailable3DBu@ DB '!IsList'
	DB	'Empty(&m_lstAvailable3DBuffers)', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CH@HOHLLJGE@?$CBIsListEmpty?$CI?$CGm_lstAvailable2DBu@
XACTENG_RD	SEGMENT
??_C@_0CH@HOHLLJGE@?$CBIsListEmpty?$CI?$CGm_lstAvailable2DBu@ DB '!IsList'
	DB	'Empty(&m_lstAvailable2DBuffers)', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?CreateSoundSource@CEngine@XACT@@QAGJKPAPAUIXACTSoundSource@@@Z
XACTENG	SEGMENT
tv159 = -24
$T32829 = -20
___AutoLock$ = -16
_hr$ = -12
_pSoundSource$ = -8
_pEntry$ = -4
_this$ = 8
_dwFlags$ = 12
_ppSoundSource$ = 16
?CreateSoundSource@CEngine@XACT@@QAGJKPAPAUIXACTSoundSource@@@Z PROC NEAR ; XACT::CEngine::CreateSoundSource, COMDAT

; 912  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 913  :     HRESULT hr = S_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 914  :     CSoundSource *pSoundSource;
; 915  :     PLIST_ENTRY pEntry;
; 916  : 
; 917  :     ASSERT_IN_PASSIVE;

  0000d	68 95 03 00 00	 push	 917			; 00000395H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  0001c	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00021	0f b6 c0	 movzx	 eax, al
  00024	f7 d8		 neg	 eax
  00026	1b c0		 sbb	 eax, eax
  00028	f7 d8		 neg	 eax
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 918  :     DPF_ENTER();
; 919  : 
; 920  :     ENTER_EXTERNAL_METHOD();

  00033	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00036	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 921  : 
; 922  : #ifdef VALIDATE_PARAMETERS
; 923  : 
; 924  :     if(!ppSoundSource)

  0003b	83 7d 10 00	 cmp	 DWORD PTR _ppSoundSource$[ebp], 0
  0003f	75 2d		 jne	 SHORT $L32154

; 925  :     {
; 926  :         DPF_ERROR("No ppSoundSource supplied");

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OPDIGNNE@CEngine?3?3CreateSoundSource?$AA@
  0004b	68 9e 03 00 00	 push	 926			; 0000039eH
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00055	6a 01		 push	 1
  00057	6a 09		 push	 9
  00059	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MGOAHAKK@No?5ppSoundSource?5supplied?$AA@
  00066	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0006b	83 c4 04	 add	 esp, 4
$L32154:

; 927  :     }
; 928  : 
; 929  :     if (!IsValidSoundSourceFlags(dwFlags)) {

  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00071	51		 push	 ecx
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?IsValidSoundSourceFlags@CEngine@XACT@@QAEHK@Z ; XACT::CEngine::IsValidSoundSourceFlags
  0007a	85 c0		 test	 eax, eax
  0007c	75 2d		 jne	 SHORT $L32157

; 930  :         DPF_ERROR("Invalid sound source flags specified");

  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@OPDIGNNE@CEngine?3?3CreateSoundSource?$AA@
  00088	68 a2 03 00 00	 push	 930			; 000003a2H
  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00092	6a 01		 push	 1
  00094	6a 09		 push	 9
  00096	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@PIFJCMEL@Invalid?5sound?5source?5flags?5speci@
  000a3	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000a8	83 c4 04	 add	 esp, 4
$L32157:

; 931  :     }
; 932  : 
; 933  : #endif // VALIDATE_PARAMETERS
; 934  : 
; 935  :     //
; 936  :     // give the caller one of the pre-allocated voices based
; 937  :     // on the type they are requesting
; 938  :     //
; 939  : 
; 940  :     if (dwFlags & XACT_FLAG_SOUNDSOURCE_3D) {

  000ab	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000ae	83 e2 02	 and	 edx, 2
  000b1	85 d2		 test	 edx, edx
  000b3	74 3a		 je	 SHORT $L32159

; 941  :         ASSERT(!IsListEmpty(&m_lstAvailable3DBuffers));

  000b5	68 ad 03 00 00	 push	 941			; 000003adH
  000ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@LPPFGGKE@?$CBIsListEmpty?$CI?$CGm_lstAvailable3DBu@
  000c4	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	83 c0 18	 add	 eax, 24			; 00000018H
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	33 d2		 xor	 edx, edx
  000cf	39 41 18	 cmp	 DWORD PTR [ecx+24], eax
  000d2	0f 94 c2	 sete	 dl
  000d5	52		 push	 edx
  000d6	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000db	83 c4 10	 add	 esp, 16			; 00000010H

; 942  :         pEntry = RemoveHeadList(&m_lstAvailable3DBuffers);

  000de	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
  000ea	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 943  :     } else if (dwFlags & XACT_FLAG_SOUNDSOURCE_2D) {

  000ed	eb 42		 jmp	 SHORT $L32161
$L32159:
  000ef	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000f2	83 e2 01	 and	 edx, 1
  000f5	85 d2		 test	 edx, edx
  000f7	74 38		 je	 SHORT $L32161

; 944  :         ASSERT(!IsListEmpty(&m_lstAvailable2DBuffers));

  000f9	68 b0 03 00 00	 push	 944			; 000003b0H
  000fe	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00103	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@HOHLLJGE@?$CBIsListEmpty?$CI?$CGm_lstAvailable2DBu@
  00108	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0010b	83 c0 10	 add	 eax, 16			; 00000010H
  0010e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	33 d2		 xor	 edx, edx
  00113	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00116	0f 94 c2	 sete	 dl
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0011f	83 c4 10	 add	 esp, 16			; 00000010H

; 945  :         pEntry = RemoveHeadList(&m_lstAvailable2DBuffers);

  00122	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00125	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
  0012e	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax
$L32161:

; 946  :     }
; 947  :     
; 948  :     pSoundSource = CONTAINING_RECORD(pEntry, CSoundSource, m_ListEntry);

  00131	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  00134	83 ea 08	 sub	 edx, 8
  00137	89 55 f8	 mov	 DWORD PTR _pSoundSource$[ebp], edx

; 949  :     *ppSoundSource = pSoundSource;

  0013a	83 7d f8 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  0013e	74 0b		 je	 SHORT $L32827
  00140	8b 45 f8	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  00143	83 c0 08	 add	 eax, 8
  00146	89 45 e8	 mov	 DWORD PTR tv159[ebp], eax
  00149	eb 07		 jmp	 SHORT $L32828
$L32827:
  0014b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$L32828:
  00152	8b 4d 10	 mov	 ecx, DWORD PTR _ppSoundSource$[ebp]
  00155	8b 55 e8	 mov	 edx, DWORD PTR tv159[ebp]
  00158	89 11		 mov	 DWORD PTR [ecx], edx

; 950  : 
; 951  :     pSoundSource->AddRef();

  0015a	8b 45 f8	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  0015d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015f	8b 55 f8	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  00162	52		 push	 edx
  00163	ff 51 04	 call	 DWORD PTR [ecx+4]

; 952  : 
; 953  :     DPF_LEAVE_HRESULT(hr);
; 954  : 
; 955  :     return hr;

  00166	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
  00169	89 45 ec	 mov	 DWORD PTR $T32829[ebp], eax
  0016c	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0016f	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00174	8b 45 ec	 mov	 eax, DWORD PTR $T32829[ebp]

; 956  : 
; 957  : }

  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 0c 00	 ret	 12			; 0000000cH
?CreateSoundSource@CEngine@XACT@@QAGJKPAPAUIXACTSoundSource@@@Z ENDP ; XACT::CEngine::CreateSoundSource
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?IsValidSoundSourceFlags@CEngine@XACT@@QAEHK@Z
XACTENG	SEGMENT
_this$ = -4
_dwFlags$ = 8
?IsValidSoundSourceFlags@CEngine@XACT@@QAEHK@Z PROC NEAR ; XACT::CEngine::IsValidSoundSourceFlags, COMDAT
; _this$ = ecx

; 211  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 212  :         if (!(dwFlags & XACT_MASK_SOUNDSOURCE_FLAGS)) {

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0000a	83 e0 03	 and	 eax, 3
  0000d	85 c0		 test	 eax, eax
  0000f	75 04		 jne	 SHORT $L30909

; 213  :             return FALSE;

  00011	33 c0		 xor	 eax, eax
  00013	eb 05		 jmp	 SHORT $L30908
$L30909:

; 214  :         } else {
; 215  :             return TRUE;

  00015	b8 01 00 00 00	 mov	 eax, 1
$L30908:

; 216  :         }
; 217  :     }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?IsValidSoundSourceFlags@CEngine@XACT@@QAEHK@Z ENDP	; XACT::CEngine::IsValidSoundSourceFlags
XACTENG	ENDS
PUBLIC	?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z ; XACT::CEngine::CreateSoundSourceInternal
PUBLIC	?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z ; XACT::CSoundSource::SetWaveBankOwner
EXTRN	?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z:NEAR ; XACT::CWaveBank::AllocateSoundSource
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
;	COMDAT ?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z
XACTENG	SEGMENT
tv88 = -36
_this$ = -32
$T32838 = -28
_pEntry$32186 = -24
_pWaveBank2$ = -20
___AutoLock$ = -16
_pXactSoundSource$ = -12
_hr$ = -8
_pSoundSource$ = -4
_dwFlags$ = 8
_pWaveBank$ = 12
_ppSoundSource$ = 16
?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z PROC NEAR ; XACT::CEngine::CreateSoundSourceInternal, COMDAT
; _this$ = ecx

; 963  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 964  :     HRESULT hr = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 965  :     CSoundSource *pSoundSource = NULL;

  00010	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pSoundSource$[ebp], 0

; 966  :     PXACTSOUNDSOURCE pXactSoundSource;
; 967  :     CWaveBank *pWaveBank2 = NULL;

  00017	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pWaveBank2$[ebp], 0

; 968  : 
; 969  :     ASSERT_IN_PASSIVE;

  0001e	68 c9 03 00 00	 push	 969			; 000003c9H
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  0002d	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00032	0f b6 c0	 movzx	 eax, al
  00035	f7 d8		 neg	 eax
  00037	1b c0		 sbb	 eax, eax
  00039	f7 d8		 neg	 eax
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 970  :     ENTER_EXTERNAL_METHOD();

  00044	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00047	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 971  : 
; 972  :     DPF_ENTER();
; 973  :     ASSERT(ppSoundSource);

  0004c	68 cd 03 00 00	 push	 973			; 000003cdH
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GPPGLKMG@ppSoundSource?$AA@
  0005b	33 c9		 xor	 ecx, ecx
  0005d	83 7d 10 00	 cmp	 DWORD PTR _ppSoundSource$[ebp], 0
  00061	0f 94 c1	 sete	 cl
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0006a	83 c4 10	 add	 esp, 16			; 00000010H

; 974  : 
; 975  :     if (pWaveBank == NULL) {

  0006d	83 7d 0c 00	 cmp	 DWORD PTR _pWaveBank$[ebp], 0
  00071	75 34		 jne	 SHORT $L32181

; 976  : 
; 977  :         hr = CreateSoundSource(dwFlags,&pXactSoundSource);

  00073	8d 55 f4	 lea	 edx, DWORD PTR _pXactSoundSource$[ebp]
  00076	52		 push	 edx
  00077	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ?CreateSoundSource@CEngine@XACT@@QAGJKPAPAUIXACTSoundSource@@@Z ; XACT::CEngine::CreateSoundSource
  00084	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 978  :         pSoundSource = (CSoundSource *) pXactSoundSource;

  00087	83 7d f4 00	 cmp	 DWORD PTR _pXactSoundSource$[ebp], 0
  0008b	74 0b		 je	 SHORT $L32836
  0008d	8b 55 f4	 mov	 edx, DWORD PTR _pXactSoundSource$[ebp]
  00090	83 ea 08	 sub	 edx, 8
  00093	89 55 dc	 mov	 DWORD PTR tv88[ebp], edx
  00096	eb 07		 jmp	 SHORT $L32837
$L32836:
  00098	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv88[ebp], 0
$L32837:
  0009f	8b 45 dc	 mov	 eax, DWORD PTR tv88[ebp]
  000a2	89 45 fc	 mov	 DWORD PTR _pSoundSource$[ebp], eax

; 979  : 
; 980  :     } else {

  000a5	eb 5f		 jmp	 SHORT $L32197
$L32181:

; 981  : 
; 982  :         //
; 983  :         // try to get the voice from the appropriate wavebank
; 984  :         // the wavebank will try to grab one from the engine internal lists
; 985  :         // so dont look there if this fails
; 986  :         //
; 987  : 
; 988  :         hr = pWaveBank->AllocateSoundSource(&pSoundSource);

  000a7	8d 4d fc	 lea	 ecx, DWORD PTR _pSoundSource$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  000ae	e8 00 00 00 00	 call	 ?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z ; XACT::CWaveBank::AllocateSoundSource
  000b3	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 989  : 
; 990  :         if(FAILED(hr)) {

  000b6	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ba	7d 4a		 jge	 SHORT $L32197

; 991  : 
; 992  :             //
; 993  :             // ok we are out of voices in the engine as well.
; 994  :             // try ANY wavebank for an available voice
; 995  :             //
; 996  : 
; 997  :             PLIST_ENTRY pEntry = m_lstWaveBanks.Flink;

  000bc	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000bf	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000c2	89 45 e8	 mov	 DWORD PTR _pEntry$32186[ebp], eax
$L32188:

; 998  :             while (pEntry != &m_lstWaveBanks)

  000c5	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	83 c1 28	 add	 ecx, 40			; 00000028H
  000cb	39 4d e8	 cmp	 DWORD PTR _pEntry$32186[ebp], ecx
  000ce	74 36		 je	 SHORT $L32197

; 999  :             {
; 1000 : 
; 1001 :                 pWaveBank2 = CONTAINING_RECORD(pEntry, CWaveBank, m_ListEntry);

  000d0	8b 55 e8	 mov	 edx, DWORD PTR _pEntry$32186[ebp]
  000d3	83 ea 28	 sub	 edx, 40			; 00000028H
  000d6	89 55 ec	 mov	 DWORD PTR _pWaveBank2$[ebp], edx

; 1002 :                 hr = pWaveBank2->AllocateSoundSource(&pSoundSource);

  000d9	8d 45 fc	 lea	 eax, DWORD PTR _pSoundSource$[ebp]
  000dc	50		 push	 eax
  000dd	8b 4d ec	 mov	 ecx, DWORD PTR _pWaveBank2$[ebp]
  000e0	e8 00 00 00 00	 call	 ?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z ; XACT::CWaveBank::AllocateSoundSource
  000e5	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1003 : 
; 1004 :                 pEntry = pEntry->Flink;

  000e8	8b 4d e8	 mov	 ecx, DWORD PTR _pEntry$32186[ebp]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	89 55 e8	 mov	 DWORD PTR _pEntry$32186[ebp], edx

; 1005 : 
; 1006 :                 if (SUCCEEDED(hr)) {

  000f0	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f4	7c 0e		 jl	 SHORT $L32195

; 1007 : 
; 1008 :                     //
; 1009 :                     // set the owner to be the wavebank they requested originally since
; 1010 :                     // we want the sound source to be freed to that wavebank, not where
; 1011 :                     // it was allocated from
; 1012 :                     //
; 1013 :                     
; 1014 :                     pSoundSource->SetWaveBankOwner(pWaveBank);

  000f6	8b 45 0c	 mov	 eax, DWORD PTR _pWaveBank$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  000fd	e8 00 00 00 00	 call	 ?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z ; XACT::CSoundSource::SetWaveBankOwner

; 1015 : 
; 1016 :                     break;

  00102	eb 02		 jmp	 SHORT $L32197
$L32195:

; 1017 :                 }
; 1018 : 
; 1019 :             }

  00104	eb bf		 jmp	 SHORT $L32188
$L32197:

; 1020 :             
; 1021 :         }
; 1022 : 
; 1023 :     }
; 1024 :     
; 1025 :     if (FAILED(hr)) {
; 1026 :         
; 1027 :         //
; 1028 :         // TODO: use priority to steal voices from another sound
; 1029 :         //
; 1030 : 
; 1031 :     }
; 1032 :     
; 1033 :     *ppSoundSource = pSoundSource;

  00106	8b 4d 10	 mov	 ecx, DWORD PTR _ppSoundSource$[ebp]
  00109	8b 55 fc	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  0010c	89 11		 mov	 DWORD PTR [ecx], edx

; 1034 : 
; 1035 :     DPF_LEAVE_HRESULT(hr);
; 1036 : 
; 1037 :     return hr;

  0010e	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
  00111	89 45 e4	 mov	 DWORD PTR $T32838[ebp], eax
  00114	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00117	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0011c	8b 45 e4	 mov	 eax, DWORD PTR $T32838[ebp]

; 1038 : 
; 1039 : }

  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 0c 00	 ret	 12			; 0000000cH
?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z ENDP ; XACT::CEngine::CreateSoundSourceInternal
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z
XACTENG	SEGMENT
_this$ = -4
_pWaveBank$ = 8
?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z PROC NEAR ; XACT::CSoundSource::SetWaveBankOwner, COMDAT
; _this$ = ecx

; 626  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 627  : 
; 628  :         m_pWaveBankOwner = pWaveBank;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 629  : 
; 630  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z ENDP ; XACT::CSoundSource::SetWaveBankOwner
XACTENG	ENDS
PUBLIC	?CreateSoundBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTSoundBank@@@Z ; XACT::CEngine::CreateSoundBank
PUBLIC	??_C@_0BJ@CHOKHPIP@CEngine?3?3CreateSoundBank?$AA@ ; `string'
PUBLIC	??_C@_0BF@GGHJNNNF@No?5pvBuffer?5supplied?$AA@	; `string'
PUBLIC	??_C@_0BE@JIJEOMJI@Invalid?5buffer?5size?$AA@	; `string'
PUBLIC	??_C@_0BI@LKJCDNOE@No?5ppSoundBank?5supplied?$AA@ ; `string'
EXTRN	??0CSoundBank@XACT@@QAE@XZ:NEAR			; XACT::CSoundBank::CSoundBank
EXTRN	?Initialize@CSoundBank@XACT@@AAEJPAXK@Z:NEAR	; XACT::CSoundBank::Initialize
;	COMDAT ??_C@_0BJ@CHOKHPIP@CEngine?3?3CreateSoundBank?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
XACTENG_RD	SEGMENT
??_C@_0BJ@CHOKHPIP@CEngine?3?3CreateSoundBank?$AA@ DB 'CEngine::CreateSou'
	DB	'ndBank', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BF@GGHJNNNF@No?5pvBuffer?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BF@GGHJNNNF@No?5pvBuffer?5supplied?$AA@ DB 'No pvBuffer supplied', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@JIJEOMJI@Invalid?5buffer?5size?$AA@
XACTENG_RD	SEGMENT
??_C@_0BE@JIJEOMJI@Invalid?5buffer?5size?$AA@ DB 'Invalid buffer size', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@LKJCDNOE@No?5ppSoundBank?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@LKJCDNOE@No?5ppSoundBank?5supplied?$AA@ DB 'No ppSoundBank supp'
	DB	'lied', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?CreateSoundBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTSoundBank@@@Z
XACTENG	SEGMENT
tv139 = -28
tv128 = -24
$T32850 = -20
$T32845 = -16
___AutoLock$ = -12
_hr$ = -8
_pSoundBank$ = -4
_this$ = 8
_pvBuffer$ = 12
_dwSize$ = 16
_ppSoundBank$ = 20
?CreateSoundBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTSoundBank@@@Z PROC NEAR ; XACT::CEngine::CreateSoundBank, COMDAT

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 1046 :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1047 :     CSoundBank* pSoundBank;
; 1048 : 
; 1049 :     DPF_ENTER();
; 1050 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1051 : 
; 1052 : #ifdef VALIDATE_PARAMETERS
; 1053 : 
; 1054 :     if(!pvBuffer)

  00015	83 7d 0c 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00019	75 2d		 jne	 SHORT $L32209

; 1055 :     {
; 1056 :         DPF_ERROR("No pvBuffer supplied");

  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CHOKHPIP@CEngine?3?3CreateSoundBank?$AA@
  00025	68 20 04 00 00	 push	 1056			; 00000420H
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0002f	6a 01		 push	 1
  00031	6a 09		 push	 9
  00033	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@GGHJNNNF@No?5pvBuffer?5supplied?$AA@
  00040	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00045	83 c4 04	 add	 esp, 4
$L32209:

; 1057 :     }
; 1058 : 
; 1059 :     if (dwSize == 0)

  00048	83 7d 10 00	 cmp	 DWORD PTR _dwSize$[ebp], 0
  0004c	75 2d		 jne	 SHORT $L32212

; 1060 :     {
; 1061 :         DPF_ERROR("Invalid buffer size");

  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CHOKHPIP@CEngine?3?3CreateSoundBank?$AA@
  00058	68 25 04 00 00	 push	 1061			; 00000425H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00062	6a 01		 push	 1
  00064	6a 09		 push	 9
  00066	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0006b	83 c4 18	 add	 esp, 24			; 00000018H
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JIJEOMJI@Invalid?5buffer?5size?$AA@
  00073	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00078	83 c4 04	 add	 esp, 4
$L32212:

; 1062 :     }
; 1063 : 
; 1064 :     if(!ppSoundBank)

  0007b	83 7d 14 00	 cmp	 DWORD PTR _ppSoundBank$[ebp], 0
  0007f	75 2d		 jne	 SHORT $L32214

; 1065 :     {
; 1066 :         DPF_ERROR("No ppSoundBank supplied");

  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CHOKHPIP@CEngine?3?3CreateSoundBank?$AA@
  0008b	68 2a 04 00 00	 push	 1066			; 0000042aH
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00095	6a 01		 push	 1
  00097	6a 09		 push	 9
  00099	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0009e	83 c4 18	 add	 esp, 24			; 00000018H
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@LKJCDNOE@No?5ppSoundBank?5supplied?$AA@
  000a6	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000ab	83 c4 04	 add	 esp, 4
$L32214:

; 1067 :     }
; 1068 : 
; 1069 : #endif // VALIDATE_PARAMETERS
; 1070 : 
; 1071 : 
; 1072 :     //
; 1073 :     // create the sound bank object
; 1074 :     //
; 1075 : 
; 1076 :     hr = HRFROMP(pSoundBank = NEW(CSoundBank));

  000ae	68 e8 00 00 00	 push	 232			; 000000e8H
  000b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 45 f0	 mov	 DWORD PTR $T32845[ebp], eax
  000be	83 7d f0 00	 cmp	 DWORD PTR $T32845[ebp], 0
  000c2	74 0d		 je	 SHORT $L32846
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR $T32845[ebp]
  000c7	e8 00 00 00 00	 call	 ??0CSoundBank@XACT@@QAE@XZ ; XACT::CSoundBank::CSoundBank
  000cc	89 45 e8	 mov	 DWORD PTR tv128[ebp], eax
  000cf	eb 07		 jmp	 SHORT $L32847
$L32846:
  000d1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv128[ebp], 0
$L32847:
  000d8	8b 45 e8	 mov	 eax, DWORD PTR tv128[ebp]
  000db	89 45 fc	 mov	 DWORD PTR _pSoundBank$[ebp], eax
  000de	33 c9		 xor	 ecx, ecx
  000e0	83 7d fc 00	 cmp	 DWORD PTR _pSoundBank$[ebp], 0
  000e4	0f 95 c1	 setne	 cl
  000e7	49		 dec	 ecx
  000e8	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  000ee	89 4d f8	 mov	 DWORD PTR _hr$[ebp], ecx

; 1077 :     
; 1078 :     if(SUCCEEDED(hr))

  000f1	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f5	7c 13		 jl	 SHORT $L32221

; 1079 :     {
; 1080 :         hr = pSoundBank->Initialize(pvBuffer,dwSize);

  000f7	8b 55 10	 mov	 edx, DWORD PTR _dwSize$[ebp]
  000fa	52		 push	 edx
  000fb	8b 45 0c	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  000fe	50		 push	 eax
  000ff	8b 4d fc	 mov	 ecx, DWORD PTR _pSoundBank$[ebp]
  00102	e8 00 00 00 00	 call	 ?Initialize@CSoundBank@XACT@@AAEJPAXK@Z ; XACT::CSoundBank::Initialize
  00107	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L32221:

; 1081 :     }
; 1082 :     
; 1083 :     if(SUCCEEDED(hr))

  0010a	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010e	7c 22		 jl	 SHORT $L32223

; 1084 :     {
; 1085 :         *ppSoundBank = pSoundBank;

  00110	83 7d fc 00	 cmp	 DWORD PTR _pSoundBank$[ebp], 0
  00114	74 0b		 je	 SHORT $L32848
  00116	8b 4d fc	 mov	 ecx, DWORD PTR _pSoundBank$[ebp]
  00119	83 c1 08	 add	 ecx, 8
  0011c	89 4d e4	 mov	 DWORD PTR tv139[ebp], ecx
  0011f	eb 07		 jmp	 SHORT $L32849
$L32848:
  00121	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$L32849:
  00128	8b 55 14	 mov	 edx, DWORD PTR _ppSoundBank$[ebp]
  0012b	8b 45 e4	 mov	 eax, DWORD PTR tv139[ebp]
  0012e	89 02		 mov	 DWORD PTR [edx], eax

; 1086 :     }
; 1087 :     else

  00130	eb 0c		 jmp	 SHORT $L32224
$L32223:

; 1088 :     {
; 1089 :         pSoundBank->Release();

  00132	8b 4d fc	 mov	 ecx, DWORD PTR _pSoundBank$[ebp]
  00135	8b 11		 mov	 edx, DWORD PTR [ecx]
  00137	8b 45 fc	 mov	 eax, DWORD PTR _pSoundBank$[ebp]
  0013a	50		 push	 eax
  0013b	ff 52 08	 call	 DWORD PTR [edx+8]
$L32224:

; 1090 :     }
; 1091 : 
; 1092 :     DPF_LEAVE_HRESULT(hr);
; 1093 : 
; 1094 :     return hr;

  0013e	8b 4d f8	 mov	 ecx, DWORD PTR _hr$[ebp]
  00141	89 4d ec	 mov	 DWORD PTR $T32850[ebp], ecx
  00144	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00147	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0014c	8b 45 ec	 mov	 eax, DWORD PTR $T32850[ebp]

; 1095 : 
; 1096 : }

  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 10 00	 ret	 16			; 00000010H
?CreateSoundBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTSoundBank@@@Z ENDP ; XACT::CEngine::CreateSoundBank
XACTENG	ENDS
PUBLIC	?RegisterWaveBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTWaveBank@@@Z ; XACT::CEngine::RegisterWaveBank
PUBLIC	??_C@_0BK@FEJIFGJF@CEngine?3?3RegisterWaveBank?$AA@ ; `string'
PUBLIC	??_C@_0BD@NFNLJMJK@No?5pvData?5supplied?$AA@	; `string'
PUBLIC	??_C@_0BH@LGKILLBP@No?5ppWaveBank?5supplied?$AA@ ; `string'
EXTRN	??0CWaveBank@XACT@@QAE@XZ:NEAR			; XACT::CWaveBank::CWaveBank
EXTRN	?Initialize@CWaveBank@XACT@@QAEJPAXK@Z:NEAR	; XACT::CWaveBank::Initialize
;	COMDAT ??_C@_0BK@FEJIFGJF@CEngine?3?3RegisterWaveBank?$AA@
XACTENG_RD	SEGMENT
??_C@_0BK@FEJIFGJF@CEngine?3?3RegisterWaveBank?$AA@ DB 'CEngine::Register'
	DB	'WaveBank', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@NFNLJMJK@No?5pvData?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@NFNLJMJK@No?5pvData?5supplied?$AA@ DB 'No pvData supplied', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@LGKILLBP@No?5ppWaveBank?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@LGKILLBP@No?5ppWaveBank?5supplied?$AA@ DB 'No ppWaveBank suppli'
	DB	'ed', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?RegisterWaveBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTWaveBank@@@Z
XACTENG	SEGMENT
tv136 = -24
$T32857 = -20
$T32854 = -16
___AutoLock$ = -12
_hr$ = -8
_pWaveBank$ = -4
_this$ = 8
_pvData$ = 12
_dwSize$ = 16
_ppWaveBank$ = 20
?RegisterWaveBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTWaveBank@@@Z PROC NEAR ; XACT::CEngine::RegisterWaveBank, COMDAT

; 1102 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1103 :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1104 :     CWaveBank *pWaveBank;    
; 1105 : 
; 1106 :     DPF_ENTER();
; 1107 : 
; 1108 :     ASSERT_IN_PASSIVE;

  0000d	68 54 04 00 00	 push	 1108			; 00000454H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  0001c	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00021	0f b6 c0	 movzx	 eax, al
  00024	f7 d8		 neg	 eax
  00026	1b c0		 sbb	 eax, eax
  00028	f7 d8		 neg	 eax
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 1109 :     ENTER_EXTERNAL_METHOD();

  00033	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00036	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1110 : 
; 1111 : #ifdef VALIDATE_PARAMETERS
; 1112 : 
; 1113 :     if(!pvData)

  0003b	83 7d 0c 00	 cmp	 DWORD PTR _pvData$[ebp], 0
  0003f	75 2d		 jne	 SHORT $L32236

; 1114 :     {
; 1115 :         DPF_ERROR("No pvData supplied");

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@FEJIFGJF@CEngine?3?3RegisterWaveBank?$AA@
  0004b	68 5b 04 00 00	 push	 1115			; 0000045bH
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00055	6a 01		 push	 1
  00057	6a 09		 push	 9
  00059	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@NFNLJMJK@No?5pvData?5supplied?$AA@
  00066	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0006b	83 c4 04	 add	 esp, 4
$L32236:

; 1116 :     }
; 1117 : 
; 1118 :     if (dwSize == 0)

  0006e	83 7d 10 00	 cmp	 DWORD PTR _dwSize$[ebp], 0
  00072	75 2d		 jne	 SHORT $L32239

; 1119 :     {
; 1120 :         DPF_ERROR("Invalid buffer size");

  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@FEJIFGJF@CEngine?3?3RegisterWaveBank?$AA@
  0007e	68 60 04 00 00	 push	 1120			; 00000460H
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00088	6a 01		 push	 1
  0008a	6a 09		 push	 9
  0008c	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00091	83 c4 18	 add	 esp, 24			; 00000018H
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JIJEOMJI@Invalid?5buffer?5size?$AA@
  00099	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0009e	83 c4 04	 add	 esp, 4
$L32239:

; 1121 :     }
; 1122 : 
; 1123 :     if(!ppWaveBank)

  000a1	83 7d 14 00	 cmp	 DWORD PTR _ppWaveBank$[ebp], 0
  000a5	75 2d		 jne	 SHORT $L32240

; 1124 :     {
; 1125 :         DPF_ERROR("No ppWaveBank supplied");

  000a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@FEJIFGJF@CEngine?3?3RegisterWaveBank?$AA@
  000b1	68 65 04 00 00	 push	 1125			; 00000465H
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000bb	6a 01		 push	 1
  000bd	6a 09		 push	 9
  000bf	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000c4	83 c4 18	 add	 esp, 24			; 00000018H
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@LGKILLBP@No?5ppWaveBank?5supplied?$AA@
  000cc	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000d1	83 c4 04	 add	 esp, 4
$L32240:

; 1126 :     }
; 1127 : 
; 1128 : #endif // VALIDATE_PARAMETERS
; 1129 : 
; 1130 :     *ppWaveBank = NULL;

  000d4	8b 4d 14	 mov	 ecx, DWORD PTR _ppWaveBank$[ebp]
  000d7	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1131 : 
; 1132 :     //
; 1133 :     // create a wrapper object to track this wavebank
; 1134 :     //
; 1135 :     
; 1136 :     hr = HRFROMP(pWaveBank = NEW(CWaveBank));

  000dd	6a 30		 push	 48			; 00000030H
  000df	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e4	83 c4 04	 add	 esp, 4
  000e7	89 45 f0	 mov	 DWORD PTR $T32854[ebp], eax
  000ea	83 7d f0 00	 cmp	 DWORD PTR $T32854[ebp], 0
  000ee	74 0d		 je	 SHORT $L32855
  000f0	8b 4d f0	 mov	 ecx, DWORD PTR $T32854[ebp]
  000f3	e8 00 00 00 00	 call	 ??0CWaveBank@XACT@@QAE@XZ ; XACT::CWaveBank::CWaveBank
  000f8	89 45 e8	 mov	 DWORD PTR tv136[ebp], eax
  000fb	eb 07		 jmp	 SHORT $L32856
$L32855:
  000fd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$L32856:
  00104	8b 55 e8	 mov	 edx, DWORD PTR tv136[ebp]
  00107	89 55 fc	 mov	 DWORD PTR _pWaveBank$[ebp], edx
  0010a	33 c0		 xor	 eax, eax
  0010c	83 7d fc 00	 cmp	 DWORD PTR _pWaveBank$[ebp], 0
  00110	0f 95 c0	 setne	 al
  00113	48		 dec	 eax
  00114	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  00119	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1137 : 
; 1138 :     if(SUCCEEDED(hr))

  0011c	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00120	7c 13		 jl	 SHORT $L32247

; 1139 :     {
; 1140 : 
; 1141 :         hr = pWaveBank->Initialize(pvData,dwSize);

  00122	8b 4d 10	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  00125	51		 push	 ecx
  00126	8b 55 0c	 mov	 edx, DWORD PTR _pvData$[ebp]
  00129	52		 push	 edx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  0012d	e8 00 00 00 00	 call	 ?Initialize@CWaveBank@XACT@@QAEJPAXK@Z ; XACT::CWaveBank::Initialize
  00132	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L32247:

; 1142 : 
; 1143 :     }
; 1144 : 
; 1145 :     if(SUCCEEDED(hr)) {

  00135	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00139	7c 29		 jl	 SHORT $L32249

; 1146 : 
; 1147 :         //
; 1148 :         // add wave wank to our linked list of banks
; 1149 :         //
; 1150 : 
; 1151 :         IsDuplicateWaveBank(pWaveBank);

  0013b	8b 45 fc	 mov	 eax, DWORD PTR _pWaveBank$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	e8 00 00 00 00	 call	 ?IsDuplicateWaveBank@CEngine@XACT@@QAEXPAVCWaveBank@2@@Z ; XACT::CEngine::IsDuplicateWaveBank

; 1152 : 
; 1153 :         InsertTailList(&m_lstWaveBanks,&pWaveBank->m_ListEntry);

  00147	8b 4d fc	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  0014a	83 c1 28	 add	 ecx, 40			; 00000028H
  0014d	51		 push	 ecx
  0014e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00151	83 c2 28	 add	 edx, 40			; 00000028H
  00154	52		 push	 edx
  00155	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 1154 :         *ppWaveBank = (PXACTWAVEBANK) pWaveBank;

  0015a	8b 45 14	 mov	 eax, DWORD PTR _ppWaveBank$[ebp]
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  00160	89 08		 mov	 DWORD PTR [eax], ecx

; 1155 : 
; 1156 :     } else {

  00162	eb 0c		 jmp	 SHORT $L32251
$L32249:

; 1157 : 
; 1158 :         pWaveBank->Release();

  00164	8b 55 fc	 mov	 edx, DWORD PTR _pWaveBank$[ebp]
  00167	8b 02		 mov	 eax, DWORD PTR [edx]
  00169	8b 4d fc	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  0016c	51		 push	 ecx
  0016d	ff 50 08	 call	 DWORD PTR [eax+8]
$L32251:

; 1159 : 
; 1160 :     }
; 1161 : 
; 1162 :     DPF_LEAVE_HRESULT(hr);
; 1163 : 
; 1164 :     return hr;

  00170	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  00173	89 55 ec	 mov	 DWORD PTR $T32857[ebp], edx
  00176	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00179	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0017e	8b 45 ec	 mov	 eax, DWORD PTR $T32857[ebp]

; 1165 : 
; 1166 : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 10 00	 ret	 16			; 00000010H
?RegisterWaveBank@CEngine@XACT@@QAGJPAXKPAPAUIXACTWaveBank@@@Z ENDP ; XACT::CEngine::RegisterWaveBank
XACTENG	ENDS
PUBLIC	?RegisterStreamedWaveBank@CEngine@XACT@@QAGJPAXK0KPAPAUIXACTWaveBank@@@Z ; XACT::CEngine::RegisterStreamedWaveBank
PUBLIC	??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@ ; `string'
PUBLIC	??_C@_0BO@FGHJGIB@No?5pvStreamingBuffer?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BE@BNKIIPAO@Invalid?5hFileHandle?$AA@	; `string'
;	COMDAT ??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@
XACTENG_RD	SEGMENT
??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@ DB 'CEngine::Regis'
	DB	'terStreamedWaveBank', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@FGHJGIB@No?5pvStreamingBuffer?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BO@FGHJGIB@No?5pvStreamingBuffer?5supplied?$AA@ DB 'No pvStreaming'
	DB	'Buffer supplied', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@BNKIIPAO@Invalid?5hFileHandle?$AA@
XACTENG_RD	SEGMENT
??_C@_0BE@BNKIIPAO@Invalid?5hFileHandle?$AA@ DB 'Invalid hFileHandle', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?RegisterStreamedWaveBank@CEngine@XACT@@QAGJPAXK0KPAPAUIXACTWaveBank@@@Z
XACTENG	SEGMENT
$T32861 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pvStreamingBuffer$ = 12
_dwSize$ = 16
_hFileHandle$ = 20
_dwOffset$ = 24
_ppWaveBank$ = 28
?RegisterStreamedWaveBank@CEngine@XACT@@QAGJPAXK0KPAPAUIXACTWaveBank@@@Z PROC NEAR ; XACT::CEngine::RegisterStreamedWaveBank, COMDAT

; 1172 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1173 :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1174 : 
; 1175 :     DPF_ENTER();
; 1176 :     ASSERT_IN_PASSIVE;

  0000d	68 98 04 00 00	 push	 1176			; 00000498H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  0001c	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00021	0f b6 c0	 movzx	 eax, al
  00024	f7 d8		 neg	 eax
  00026	1b c0		 sbb	 eax, eax
  00028	f7 d8		 neg	 eax
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 1177 :     ENTER_EXTERNAL_METHOD();

  00033	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00036	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1178 : 
; 1179 : #ifdef VALIDATE_PARAMETERS
; 1180 : 
; 1181 :     if(!pvStreamingBuffer)

  0003b	83 7d 0c 00	 cmp	 DWORD PTR _pvStreamingBuffer$[ebp], 0
  0003f	75 2d		 jne	 SHORT $L32264

; 1182 :     {
; 1183 :         DPF_ERROR("No pvStreamingBuffer supplied");

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@
  0004b	68 9f 04 00 00	 push	 1183			; 0000049fH
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00055	6a 01		 push	 1
  00057	6a 09		 push	 9
  00059	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@FGHJGIB@No?5pvStreamingBuffer?5supplied?$AA@
  00066	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0006b	83 c4 04	 add	 esp, 4
$L32264:

; 1184 :     }
; 1185 : 
; 1186 :     if (dwSize == 0)

  0006e	83 7d 10 00	 cmp	 DWORD PTR _dwSize$[ebp], 0
  00072	75 2d		 jne	 SHORT $L32267

; 1187 :     {
; 1188 :         DPF_ERROR("Invalid buffer size");

  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@
  0007e	68 a4 04 00 00	 push	 1188			; 000004a4H
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00088	6a 01		 push	 1
  0008a	6a 09		 push	 9
  0008c	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00091	83 c4 18	 add	 esp, 24			; 00000018H
  00094	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JIJEOMJI@Invalid?5buffer?5size?$AA@
  00099	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0009e	83 c4 04	 add	 esp, 4
$L32267:

; 1189 :     }
; 1190 : 
; 1191 :     if(!hFileHandle)

  000a1	83 7d 14 00	 cmp	 DWORD PTR _hFileHandle$[ebp], 0
  000a5	75 2d		 jne	 SHORT $L32268

; 1192 :     {
; 1193 :         DPF_ERROR("Invalid hFileHandle");

  000a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@
  000b1	68 a9 04 00 00	 push	 1193			; 000004a9H
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000bb	6a 01		 push	 1
  000bd	6a 09		 push	 9
  000bf	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000c4	83 c4 18	 add	 esp, 24			; 00000018H
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@BNKIIPAO@Invalid?5hFileHandle?$AA@
  000cc	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000d1	83 c4 04	 add	 esp, 4
$L32268:

; 1194 :     }
; 1195 : 
; 1196 :     if(!ppWaveBank)

  000d4	83 7d 1c 00	 cmp	 DWORD PTR _ppWaveBank$[ebp], 0
  000d8	75 2d		 jne	 SHORT $L32270

; 1197 :     {
; 1198 :         DPF_ERROR("No ppWaveBank supplied");

  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@BPEHLEAB@CEngine?3?3RegisterStreamedWaveBan@
  000e4	68 ae 04 00 00	 push	 1198			; 000004aeH
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000ee	6a 01		 push	 1
  000f0	6a 09		 push	 9
  000f2	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000f7	83 c4 18	 add	 esp, 24			; 00000018H
  000fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@LGKILLBP@No?5ppWaveBank?5supplied?$AA@
  000ff	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00104	83 c4 04	 add	 esp, 4
$L32270:

; 1199 :     }
; 1200 : 
; 1201 : #endif // VALIDATE_PARAMETERS
; 1202 : 
; 1203 :     DPF_LEAVE_HRESULT(hr);
; 1204 : 
; 1205 :     return hr;

  00107	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  0010a	89 4d f4	 mov	 DWORD PTR $T32861[ebp], ecx
  0010d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00110	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00115	8b 45 f4	 mov	 eax, DWORD PTR $T32861[ebp]

; 1206 : 
; 1207 : }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 18 00	 ret	 24			; 00000018H
?RegisterStreamedWaveBank@CEngine@XACT@@QAGJPAXK0KPAPAUIXACTWaveBank@@@Z ENDP ; XACT::CEngine::RegisterStreamedWaveBank
XACTENG	ENDS
PUBLIC	?UnRegisterWaveBank@CEngine@XACT@@QAGJPAUIXACTWaveBank@@@Z ; XACT::CEngine::UnRegisterWaveBank
PUBLIC	??_C@_0BM@HCAODNEA@CEngine?3?3UnRegisterWaveBank?$AA@ ; `string'
PUBLIC	??_C@_0BO@OBDAMOAL@No?5pWaveBankInstance?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BN@NBBGCJPF@pWaveBank?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@ ; `string'
EXTRN	?StopAllCues@CWaveBank@XACT@@QAEXXZ:NEAR	; XACT::CWaveBank::StopAllCues
;	COMDAT ??_C@_0BM@HCAODNEA@CEngine?3?3UnRegisterWaveBank?$AA@
XACTENG_RD	SEGMENT
??_C@_0BM@HCAODNEA@CEngine?3?3UnRegisterWaveBank?$AA@ DB 'CEngine::UnRegi'
	DB	'sterWaveBank', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@OBDAMOAL@No?5pWaveBankInstance?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BO@OBDAMOAL@No?5pWaveBankInstance?5supplied?$AA@ DB 'No pWaveBankI'
	DB	'nstance supplied', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BN@NBBGCJPF@pWaveBank?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@
XACTENG_RD	SEGMENT
??_C@_0BN@NBBGCJPF@pWaveBank?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@ DB 'pWav'
	DB	'eBank->m_dwRefCount == 1', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?UnRegisterWaveBank@CEngine@XACT@@QAGJPAUIXACTWaveBank@@@Z
XACTENG	SEGMENT
$T32865 = -16
___AutoLock$ = -12
_hr$ = -8
_pWaveBank$ = -4
_this$ = 8
_pWaveBankInstance$ = 12
?UnRegisterWaveBank@CEngine@XACT@@QAGJPAUIXACTWaveBank@@@Z PROC NEAR ; XACT::CEngine::UnRegisterWaveBank, COMDAT

; 1213 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1214 :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1215 : 
; 1216 :     DPF_ENTER();
; 1217 :     ASSERT_IN_PASSIVE;

  0000d	68 c1 04 00 00	 push	 1217			; 000004c1H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  0001c	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00021	0f b6 c0	 movzx	 eax, al
  00024	f7 d8		 neg	 eax
  00026	1b c0		 sbb	 eax, eax
  00028	f7 d8		 neg	 eax
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 1218 :     ENTER_EXTERNAL_METHOD();

  00033	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00036	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1219 : 
; 1220 : #ifdef VALIDATE_PARAMETERS
; 1221 :     if(!pWaveBankInstance)

  0003b	83 7d 0c 00	 cmp	 DWORD PTR _pWaveBankInstance$[ebp], 0
  0003f	75 2d		 jne	 SHORT $L32279

; 1222 :     {
; 1223 :         DPF_ERROR("No pWaveBankInstance supplied");

  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@HCAODNEA@CEngine?3?3UnRegisterWaveBank?$AA@
  0004b	68 c7 04 00 00	 push	 1223			; 000004c7H
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00055	6a 01		 push	 1
  00057	6a 09		 push	 9
  00059	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0005e	83 c4 18	 add	 esp, 24			; 00000018H
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@OBDAMOAL@No?5pWaveBankInstance?5supplied?$AA@
  00066	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0006b	83 c4 04	 add	 esp, 4
$L32279:

; 1224 :     }    
; 1225 : #endif // VALIDATE_PARAMETERS
; 1226 : 
; 1227 :     CWaveBank *pWaveBank = (CWaveBank *) pWaveBankInstance;

  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _pWaveBankInstance$[ebp]
  00071	89 4d fc	 mov	 DWORD PTR _pWaveBank$[ebp], ecx

; 1228 : 
; 1229 :     //
; 1230 :     // remove wave bank from our registered list
; 1231 :     //
; 1232 : 
; 1233 :     RemoveEntryList(&pWaveBank->m_ListEntry);

  00074	8b 55 fc	 mov	 edx, DWORD PTR _pWaveBank$[ebp]
  00077	83 c2 28	 add	 edx, 40			; 00000028H
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 1234 : 
; 1235 :     pWaveBank->StopAllCues();

  00080	8b 4d fc	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  00083	e8 00 00 00 00	 call	 ?StopAllCues@CWaveBank@XACT@@QAEXXZ ; XACT::CWaveBank::StopAllCues

; 1236 : 
; 1237 :     ASSERT(pWaveBank->m_dwRefCount == 1);

  00088	68 d5 04 00 00	 push	 1237			; 000004d5H
  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00092	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@NBBGCJPF@pWaveBank?9?$DOm_dwRefCount?5?$DN?$DN?51?$AA@
  00097	8b 45 fc	 mov	 eax, DWORD PTR _pWaveBank$[ebp]
  0009a	33 c9		 xor	 ecx, ecx
  0009c	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  000a0	0f 95 c1	 setne	 cl
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000a9	83 c4 10	 add	 esp, 16			; 00000010H

; 1238 : 
; 1239 :     //
; 1240 :     // release object
; 1241 :     //
; 1242 : 
; 1243 :     pWaveBank->Release();

  000ac	8b 55 fc	 mov	 edx, DWORD PTR _pWaveBank$[ebp]
  000af	8b 02		 mov	 eax, DWORD PTR [edx]
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  000b4	51		 push	 ecx
  000b5	ff 50 08	 call	 DWORD PTR [eax+8]

; 1244 : 
; 1245 :     DPF_LEAVE_HRESULT(hr);
; 1246 : 
; 1247 :     return hr;

  000b8	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  000bb	89 55 f0	 mov	 DWORD PTR $T32865[ebp], edx
  000be	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000c1	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000c6	8b 45 f0	 mov	 eax, DWORD PTR $T32865[ebp]

; 1248 : 
; 1249 : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
?UnRegisterWaveBank@CEngine@XACT@@QAGJPAUIXACTWaveBank@@@Z ENDP ; XACT::CEngine::UnRegisterWaveBank
XACTENG	ENDS
PUBLIC	?SetMasterVolume@CEngine@XACT@@QAGJJ@Z		; XACT::CEngine::SetMasterVolume
PUBLIC	??_C@_0BJ@OAEBCIJG@CEngine?3?3SetMasterVolume?$AA@ ; `string'
PUBLIC	??_C@_0DP@GJJCKOGA@Invalid?5lVolume?5?$CIhas?5to?5be?5withi@ ; `string'
;	COMDAT ??_C@_0BJ@OAEBCIJG@CEngine?3?3SetMasterVolume?$AA@
XACTENG_RD	SEGMENT
??_C@_0BJ@OAEBCIJG@CEngine?3?3SetMasterVolume?$AA@ DB 'CEngine::SetMaster'
	DB	'Volume', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@GJJCKOGA@Invalid?5lVolume?5?$CIhas?5to?5be?5withi@
XACTENG_RD	SEGMENT
??_C@_0DP@GJJCKOGA@Invalid?5lVolume?5?$CIhas?5to?5be?5withi@ DB 'Invalid '
	DB	'lVolume (has to be within dsound specifed volume range', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?SetMasterVolume@CEngine@XACT@@QAGJJ@Z
XACTENG	SEGMENT
$T32869 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_lVolume$ = 12
?SetMasterVolume@CEngine@XACT@@QAGJJ@Z PROC NEAR	; XACT::CEngine::SetMasterVolume, COMDAT

; 1255 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1256 :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1257 : 
; 1258 :     DPF_ENTER();
; 1259 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1260 : 
; 1261 : #ifdef VALIDATE_PARAMETERS
; 1262 :     if((lVolume < DSBVOLUME_MIN) || (lVolume > DSBVOLUME_MAX))

  00015	81 7d 0c f0 d8
	ff ff		 cmp	 DWORD PTR _lVolume$[ebp], -10000 ; ffffd8f0H
  0001c	7c 06		 jl	 SHORT $L32294
  0001e	83 7d 0c 00	 cmp	 DWORD PTR _lVolume$[ebp], 0
  00022	7e 2d		 jle	 SHORT $L32293
$L32294:

; 1263 :     {
; 1264 :         DPF_ERROR("Invalid lVolume (has to be within dsound specifed volume range");

  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@OAEBCIJG@CEngine?3?3SetMasterVolume?$AA@
  0002e	68 f0 04 00 00	 push	 1264			; 000004f0H
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00038	6a 01		 push	 1
  0003a	6a 09		 push	 9
  0003c	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00041	83 c4 18	 add	 esp, 24			; 00000018H
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@GJJCKOGA@Invalid?5lVolume?5?$CIhas?5to?5be?5withi@
  00049	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0004e	83 c4 04	 add	 esp, 4
$L32293:

; 1265 :     }
; 1266 : #endif // VALIDATE_PARAMETERS
; 1267 : 
; 1268 :     DPF_LEAVE_HRESULT(hr);
; 1269 : 
; 1270 :     return hr;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00054	89 45 f4	 mov	 DWORD PTR $T32869[ebp], eax
  00057	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0005f	8b 45 f4	 mov	 eax, DWORD PTR $T32869[ebp]

; 1271 : 
; 1272 : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?SetMasterVolume@CEngine@XACT@@QAGJJ@Z ENDP		; XACT::CEngine::SetMasterVolume
XACTENG	ENDS
PUBLIC	?SetListenerParameters@CEngine@XACT@@QAGJPBU_DS3DLISTENER@@PBU_DSI3DL2LISTENER@@K@Z ; XACT::CEngine::SetListenerParameters
PUBLIC	??_C@_0BP@OKHIPGP@CEngine?3?3SetListenerParameters?$AA@ ; `string'
PUBLIC	??_C@_0DI@MOCNFFFP@You?5must?5supply?5at?5least?5one?5set@ ; `string'
PUBLIC	?SetAllParameters@IDirectSound@@QAGJPBU_DS3DLISTENER@@K@Z ; IDirectSound::SetAllParameters
PUBLIC	?SetI3DL2Listener@IDirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z ; IDirectSound::SetI3DL2Listener
;	COMDAT ??_C@_0BP@OKHIPGP@CEngine?3?3SetListenerParameters?$AA@
XACTENG_RD	SEGMENT
??_C@_0BP@OKHIPGP@CEngine?3?3SetListenerParameters?$AA@ DB 'CEngine::SetL'
	DB	'istenerParameters', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DI@MOCNFFFP@You?5must?5supply?5at?5least?5one?5set@
XACTENG_RD	SEGMENT
??_C@_0DI@MOCNFFFP@You?5must?5supply?5at?5least?5one?5set@ DB 'You must s'
	DB	'upply at least one set of listener parameters', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?SetListenerParameters@CEngine@XACT@@QAGJPBU_DS3DLISTENER@@PBU_DSI3DL2LISTENER@@K@Z
XACTENG	SEGMENT
$T32873 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pcDs3dListener$ = 12
_pcds3dl$ = 16
_dwApply$ = 20
?SetListenerParameters@CEngine@XACT@@QAGJPBU_DS3DLISTENER@@PBU_DSI3DL2LISTENER@@K@Z PROC NEAR ; XACT::CEngine::SetListenerParameters, COMDAT

; 1278 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1279 :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1280 : 
; 1281 :     DPF_ENTER();
; 1282 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1283 : 
; 1284 : #ifdef VALIDATE_PARAMETERS
; 1285 :     if ((pcDs3dListener == NULL) && (pcds3dl == NULL)){

  00015	83 7d 0c 00	 cmp	 DWORD PTR _pcDs3dListener$[ebp], 0
  00019	75 33		 jne	 SHORT $L32307
  0001b	83 7d 10 00	 cmp	 DWORD PTR _pcds3dl$[ebp], 0
  0001f	75 2d		 jne	 SHORT $L32307

; 1286 :         DPF_ERROR("You must supply at least one set of listener parameters");

  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@OKHIPGP@CEngine?3?3SetListenerParameters?$AA@
  0002b	68 06 05 00 00	 push	 1286			; 00000506H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00035	6a 01		 push	 1
  00037	6a 09		 push	 9
  00039	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0003e	83 c4 18	 add	 esp, 24			; 00000018H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@MOCNFFFP@You?5must?5supply?5at?5least?5one?5set@
  00046	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0004b	83 c4 04	 add	 esp, 4
$L32307:

; 1287 :     }
; 1288 : #endif
; 1289 : 
; 1290 :     if (pcDs3dListener) {

  0004e	83 7d 0c 00	 cmp	 DWORD PTR _pcDs3dListener$[ebp], 0
  00052	74 17		 je	 SHORT $L32310

; 1291 :         hr = m_pDirectSound->SetAllParameters(pcDs3dListener,dwApply);

  00054	8b 45 14	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _pcDs3dListener$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?SetAllParameters@IDirectSound@@QAGJPBU_DS3DLISTENER@@K@Z ; IDirectSound::SetAllParameters
  00068	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L32310:

; 1292 :     }
; 1293 : 
; 1294 :     if (pcds3dl && SUCCEEDED(hr)) {

  0006b	83 7d 10 00	 cmp	 DWORD PTR _pcds3dl$[ebp], 0
  0006f	74 1d		 je	 SHORT $L32312
  00071	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00075	7c 17		 jl	 SHORT $L32312

; 1295 : 
; 1296 :         hr = m_pDirectSound->SetI3DL2Listener(pcds3dl,dwApply);

  00077	8b 4d 14	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 10	 mov	 edx, DWORD PTR _pcds3dl$[ebp]
  0007e	52		 push	 edx
  0007f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?SetI3DL2Listener@IDirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z ; IDirectSound::SetI3DL2Listener
  0008b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L32312:

; 1297 : 
; 1298 :     }
; 1299 : 
; 1300 :     DPF_LEAVE_HRESULT(hr);
; 1301 :     return hr;

  0008e	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  00091	89 55 f4	 mov	 DWORD PTR $T32873[ebp], edx
  00094	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00097	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0009c	8b 45 f4	 mov	 eax, DWORD PTR $T32873[ebp]

; 1302 : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 10 00	 ret	 16			; 00000010H
?SetListenerParameters@CEngine@XACT@@QAGJPBU_DS3DLISTENER@@PBU_DSI3DL2LISTENER@@K@Z ENDP ; XACT::CEngine::SetListenerParameters
XACTENG	ENDS
EXTRN	_IDirectSound_SetAllParameters@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetAllParameters@IDirectSound@@QAGJPBU_DS3DLISTENER@@K@Z
XACTENG	SEGMENT
_this$ = 8
_pds3dl$ = 12
_dwApply$ = 16
?SetAllParameters@IDirectSound@@QAGJPBU_DS3DLISTENER@@K@Z PROC NEAR ; IDirectSound::SetAllParameters, COMDAT

; 1776 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1777 :         return IDirectSound_SetAllParameters(this, pds3dl, dwApply);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3dl$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSound_SetAllParameters@12

; 1778 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@IDirectSound@@QAGJPBU_DS3DLISTENER@@K@Z ENDP ; IDirectSound::SetAllParameters
XACTENG	ENDS
EXTRN	_IDirectSound_SetI3DL2Listener@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetI3DL2Listener@IDirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z
XACTENG	SEGMENT
_this$ = 8
_pds3dl$ = 12
_dwApply$ = 16
?SetI3DL2Listener@IDirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z PROC NEAR ; IDirectSound::SetI3DL2Listener, COMDAT

; 1811 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1812 :         return IDirectSound_SetI3DL2Listener(this, pds3dl, dwApply);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3dl$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSound_SetI3DL2Listener@12

; 1813 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Listener@IDirectSound@@QAGJPBU_DSI3DL2LISTENER@@K@Z ENDP ; IDirectSound::SetI3DL2Listener
XACTENG	ENDS
PUBLIC	?GlobalPause@CEngine@XACT@@QAGJH@Z		; XACT::CEngine::GlobalPause
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
;	COMDAT ?GlobalPause@CEngine@XACT@@QAGJH@Z
XACTENG	SEGMENT
$T32883 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_bPause$ = 12
?GlobalPause@CEngine@XACT@@QAGJH@Z PROC NEAR		; XACT::CEngine::GlobalPause, COMDAT

; 1308 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1309 :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1310 : 
; 1311 :     DPF_ENTER();
; 1312 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1313 : 
; 1314 :     DPF_LEAVE_HRESULT(hr);
; 1315 : 
; 1316 :     return hr;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00018	89 45 f4	 mov	 DWORD PTR $T32883[ebp], eax
  0001b	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001e	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00023	8b 45 f4	 mov	 eax, DWORD PTR $T32883[ebp]

; 1317 : 
; 1318 : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?GlobalPause@CEngine@XACT@@QAGJH@Z ENDP			; XACT::CEngine::GlobalPause
XACTENG	ENDS
PUBLIC	?RegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z ; XACT::CEngine::RegisterNotification
; Function compile flags: /Odt
;	COMDAT ?RegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z
XACTENG	SEGMENT
_this$ = 8
_pNotificationDesc$ = 12
?RegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z PROC NEAR ; XACT::CEngine::RegisterNotification, COMDAT

; 1324 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1325 :     HandleNotificationRegistration(pNotificationDesc, TRUE);

  00003	6a 01		 push	 1
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z ; XACT::CEngine::HandleNotificationRegistration

; 1326 :     return S_OK;

  00011	33 c0		 xor	 eax, eax

; 1327 : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?RegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z ENDP ; XACT::CEngine::RegisterNotification
XACTENG	ENDS
PUBLIC	?UnRegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z ; XACT::CEngine::UnRegisterNotification
; Function compile flags: /Odt
;	COMDAT ?UnRegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z
XACTENG	SEGMENT
_this$ = 8
_pNotificationDesc$ = 12
?UnRegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z PROC NEAR ; XACT::CEngine::UnRegisterNotification, COMDAT

; 1333 : {    

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1334 :     HandleNotificationRegistration(pNotificationDesc, FALSE);

  00003	6a 00		 push	 0
  00005	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z ; XACT::CEngine::HandleNotificationRegistration

; 1335 :     return S_OK;

  00011	33 c0		 xor	 eax, eax

; 1336 : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?UnRegisterNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z ENDP ; XACT::CEngine::UnRegisterNotification
XACTENG	ENDS
PUBLIC	?GetNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@PAU_XACT_NOTIFICATION@@@Z ; XACT::CEngine::GetNotification
PUBLIC	??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@ ; `string'
PUBLIC	??_C@_0DM@DILDGMMK@?$CB?$CIpNotificationDesc?9?$DOdwType?5?$CG?5XA@ ; `string'
PUBLIC	??_C@_0BK@BHEMJHCD@No?5pNotification?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0EM@CMKNIKAO@You?5cant?5specify?5a?5notification?5@ ; `string'
PUBLIC	??_C@_0DM@IAPLFFAD@dwSoundCueIndex?5is?5ignored?5when?5@ ; `string'
PUBLIC	??_C@_0CJ@JHIPGPEM@Invalid?5notification?5type?5specif@ ; `string'
PUBLIC	??_C@_0DM@PNHDAPJM@dwType?5must?5be?5valid?5if?5pSoundBa@ ; `string'
PUBLIC	??_C@_0EC@JEMHEBII@Attempting?5to?5retrieve?5notificat@ ; `string'
;	COMDAT ??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
XACTENG_RD	SEGMENT
??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@ DB 'CEngine::GetNotific'
	DB	'ation', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@DILDGMMK@?$CB?$CIpNotificationDesc?9?$DOdwType?5?$CG?5XA@
XACTENG_RD	SEGMENT
??_C@_0DM@DILDGMMK@?$CB?$CIpNotificationDesc?9?$DOdwType?5?$CG?5XA@ DB '!'
	DB	'(pNotificationDesc->dwType & XACT_MASK_NOTIFICATION_FLAGS)', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@BHEMJHCD@No?5pNotification?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BK@BHEMJHCD@No?5pNotification?5supplied?$AA@ DB 'No pNotification '
	DB	'supplied', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EM@CMKNIKAO@You?5cant?5specify?5a?5notification?5@
XACTENG_RD	SEGMENT
??_C@_0EM@CMKNIKAO@You?5cant?5specify?5a?5notification?5@ DB 'You cant sp'
	DB	'ecify a notification desc that has both pSoundBank and pSound'
	DB	'Cue', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@IAPLFFAD@dwSoundCueIndex?5is?5ignored?5when?5@
XACTENG_RD	SEGMENT
??_C@_0DM@IAPLFFAD@dwSoundCueIndex?5is?5ignored?5when?5@ DB 'dwSoundCueIn'
	DB	'dex is ignored when calling this API. Set to -1', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CJ@JHIPGPEM@Invalid?5notification?5type?5specif@
XACTENG_RD	SEGMENT
??_C@_0CJ@JHIPGPEM@Invalid?5notification?5type?5specif@ DB 'Invalid notif'
	DB	'ication type specified (%d)', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@PNHDAPJM@dwType?5must?5be?5valid?5if?5pSoundBa@
XACTENG_RD	SEGMENT
??_C@_0DM@PNHDAPJM@dwType?5must?5be?5valid?5if?5pSoundBa@ DB 'dwType must'
	DB	' be valid if pSoundBank or pSoundCue is supplied', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EC@JEMHEBII@Attempting?5to?5retrieve?5notificat@
XACTENG_RD	SEGMENT
??_C@_0EC@JEMHEBII@Attempting?5to?5retrieve?5notificat@ DB 'Attempting to'
	DB	' retrieve notification type that was never registers', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?GetNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@PAU_XACT_NOTIFICATION@@@Z
XACTENG	SEGMENT
tv176 = -36
$T32895 = -32
_pSoundCue$32369 = -28
_pSoundBank$32366 = -24
_pEntry$32356 = -20
___AutoIrql$ = -16
_pContext$ = -8
_hr$ = -4
_this$ = 8
_pNotificationDesc$ = 12
_pNotification$ = 16
?GetNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@PAU_XACT_NOTIFICATION@@@Z PROC NEAR ; XACT::CEngine::GetNotification, COMDAT

; 1342 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 1343 :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1344 :     PNOTIFICATION_CONTEXT pContext = NULL;    

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pContext$[ebp], 0

; 1345 : 
; 1346 :     DPF_ENTER();
; 1347 :     AutoIrql();

  00014	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00017	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 1348 :     
; 1349 : #ifdef VALIDATE_PARAMETERS
; 1350 : 
; 1351 :     if(!pNotificationDesc)

  0001c	83 7d 0c 00	 cmp	 DWORD PTR _pNotificationDesc$[ebp], 0
  00020	75 2d		 jne	 SHORT $L32341

; 1352 :     {
; 1353 :         DPF_ERROR("No pNotificationDesc supplied");

  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
  0002c	68 49 05 00 00	 push	 1353			; 00000549H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00036	6a 01		 push	 1
  00038	6a 09		 push	 9
  0003a	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NFMHAMLB@No?5pNotificationDesc?5supplied?$AA@
  00047	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0004c	83 c4 04	 add	 esp, 4
$L32341:

; 1354 :     }
; 1355 : 
; 1356 :     ASSERT(!(pNotificationDesc->dwType & XACT_MASK_NOTIFICATION_FLAGS));

  0004f	68 4c 05 00 00	 push	 1356			; 0000054cH
  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DILDGMMK@?$CB?$CIpNotificationDesc?9?$DOdwType?5?$CG?5XA@
  0005e	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00069	f7 d9		 neg	 ecx
  0006b	1b c9		 sbb	 ecx, ecx
  0006d	f7 d9		 neg	 ecx
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00075	83 c4 10	 add	 esp, 16			; 00000010H

; 1357 : 
; 1358 :     if(!pNotification)

  00078	83 7d 10 00	 cmp	 DWORD PTR _pNotification$[ebp], 0
  0007c	75 2d		 jne	 SHORT $L32344

; 1359 :     {
; 1360 :         DPF_ERROR("No pNotification supplied");

  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00083	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
  00088	68 50 05 00 00	 push	 1360			; 00000550H
  0008d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00092	6a 01		 push	 1
  00094	6a 09		 push	 9
  00096	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@BHEMJHCD@No?5pNotification?5supplied?$AA@
  000a3	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000a8	83 c4 04	 add	 esp, 4
$L32344:

; 1361 :     }
; 1362 : 
; 1363 :     if (pNotificationDesc->pSoundBank && pNotificationDesc->pSoundCue) {

  000ab	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  000ae	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  000b2	74 36		 je	 SHORT $L32346
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  000b7	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000bb	74 2d		 je	 SHORT $L32346

; 1364 : 
; 1365 :         DPF_ERROR("You cant specify a notification desc that has both pSoundBank and pSoundCue");

  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
  000c7	68 55 05 00 00	 push	 1365			; 00000555H
  000cc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000d1	6a 01		 push	 1
  000d3	6a 09		 push	 9
  000d5	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000da	83 c4 18	 add	 esp, 24			; 00000018H
  000dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@CMKNIKAO@You?5cant?5specify?5a?5notification?5@
  000e2	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000e7	83 c4 04	 add	 esp, 4
$L32346:

; 1366 : 
; 1367 :     }
; 1368 : 
; 1369 :     if (pNotificationDesc->dwSoundCueIndex != XACT_SOUNDCUE_INDEX_UNUSED) {

  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  000ed	83 79 0c ff	 cmp	 DWORD PTR [ecx+12], -1
  000f1	74 2d		 je	 SHORT $L32348

; 1370 : 
; 1371 :         DPF_WARNING("dwSoundCueIndex is ignored when calling this API. Set to -1");

  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
  000fd	68 5b 05 00 00	 push	 1371			; 0000055bH
  00102	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00107	6a 03		 push	 3
  00109	6a 09		 push	 9
  0010b	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00110	83 c4 18	 add	 esp, 24			; 00000018H
  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@IAPLFFAD@dwSoundCueIndex?5is?5ignored?5when?5@
  00118	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0011d	83 c4 04	 add	 esp, 4
$L32348:

; 1372 : 
; 1373 :     }
; 1374 :         
; 1375 :     if ((pNotificationDesc->dwType != XACT_NOTIFICATION_TYPE_UNUSED) && 
; 1376 :         (pNotificationDesc->dwType >= eXACTNotification_Max)) {

  00120	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  00123	83 3a ff	 cmp	 DWORD PTR [edx], -1
  00126	74 3b		 je	 SHORT $L32350
  00128	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  0012b	83 38 03	 cmp	 DWORD PTR [eax], 3
  0012e	72 33		 jb	 SHORT $L32350

; 1377 : 
; 1378 :         DPF_ERROR("Invalid notification type specified (%d)",
; 1379 :             pNotificationDesc->dwType);

  00130	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00135	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
  0013a	68 62 05 00 00	 push	 1378			; 00000562H
  0013f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00144	6a 01		 push	 1
  00146	6a 09		 push	 9
  00148	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0014d	83 c4 18	 add	 esp, 24			; 00000018H
  00150	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00153	8b 11		 mov	 edx, DWORD PTR [ecx]
  00155	52		 push	 edx
  00156	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@JHIPGPEM@Invalid?5notification?5type?5specif@
  0015b	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00160	83 c4 08	 add	 esp, 8
$L32350:

; 1380 : 
; 1381 :     }
; 1382 : 
; 1383 :     if ((pNotificationDesc->dwType == XACT_NOTIFICATION_TYPE_UNUSED) && 
; 1384 :         (pNotificationDesc->pSoundBank || pNotificationDesc->pSoundCue)) {

  00163	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00166	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00169	75 3f		 jne	 SHORT $L32352
  0016b	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  0016e	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00172	75 09		 jne	 SHORT $L32353
  00174	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  00177	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0017b	74 2d		 je	 SHORT $L32352
$L32353:

; 1385 : 
; 1386 :         DPF_ERROR("dwType must be valid if pSoundBank or pSoundCue is supplied");

  0017d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00182	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
  00187	68 6a 05 00 00	 push	 1386			; 0000056aH
  0018c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00191	6a 01		 push	 1
  00193	6a 09		 push	 9
  00195	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0019a	83 c4 18	 add	 esp, 24			; 00000018H
  0019d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@PNHDAPJM@dwType?5must?5be?5valid?5if?5pSoundBa@
  001a2	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  001a7	83 c4 04	 add	 esp, 4
$L32352:

; 1387 : 
; 1388 :     }
; 1389 : 
; 1390 : #endif // VALIDATE_PARAMETERS
; 1391 : 
; 1392 :     //
; 1393 :     // get a notification from our linked list or soundbank,soundcue
; 1394 :     // based on the criteria specified
; 1395 :     //
; 1396 : 
; 1397 :     if (pNotificationDesc->dwType == XACT_NOTIFICATION_TYPE_UNUSED) {

  001aa	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  001ad	83 38 ff	 cmp	 DWORD PTR [eax], -1
  001b0	75 1f		 jne	 SHORT $L32355

; 1398 : 
; 1399 :         PLIST_ENTRY pEntry;
; 1400 : 
; 1401 :         //
; 1402 :         // retrieve the next notification regadless of type
; 1403 :         //
; 1404 : 
; 1405 :         pEntry = m_lstPendingNotifications.Flink;

  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  001b8	89 55 ec	 mov	 DWORD PTR _pEntry$32356[ebp], edx

; 1406 :         while (pEntry != &m_lstPendingNotifications) {

  001bb	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001be	83 c0 40	 add	 eax, 64			; 00000040H
  001c1	39 45 ec	 cmp	 DWORD PTR _pEntry$32356[ebp], eax
  001c4	74 09		 je	 SHORT $L32359

; 1407 : 
; 1408 :             pContext = CONTAINING_RECORD(pEntry,NOTIFICATION_CONTEXT,ListEntry);

  001c6	8b 4d ec	 mov	 ecx, DWORD PTR _pEntry$32356[ebp]
  001c9	83 e9 38	 sub	 ecx, 56			; 00000038H
  001cc	89 4d f8	 mov	 DWORD PTR _pContext$[ebp], ecx
$L32359:

; 1409 :             break;
; 1410 : 
; 1411 :         }
; 1412 : 
; 1413 :     } else if (pNotificationDesc->pSoundBank) {

  001cf	eb 5a		 jmp	 SHORT $L32364
$L32355:
  001d1	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  001d4	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  001d8	74 37		 je	 SHORT $L32365

; 1414 :         CSoundBank *pSoundBank = (CSoundBank *) pNotificationDesc->pSoundBank;

  001da	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  001dd	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  001e1	74 0e		 je	 SHORT $L32893
  001e3	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  001e6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001e9	83 ea 08	 sub	 edx, 8
  001ec	89 55 dc	 mov	 DWORD PTR tv176[ebp], edx
  001ef	eb 07		 jmp	 SHORT $L32894
$L32893:
  001f1	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv176[ebp], 0
$L32894:
  001f8	8b 45 dc	 mov	 eax, DWORD PTR tv176[ebp]
  001fb	89 45 e8	 mov	 DWORD PTR _pSoundBank$32366[ebp], eax

; 1415 :         pContext = pSoundBank->GetNotificationContext(pNotificationDesc->dwType);        

  001fe	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00201	8b 11		 mov	 edx, DWORD PTR [ecx]
  00203	52		 push	 edx
  00204	8b 4d e8	 mov	 ecx, DWORD PTR _pSoundBank$32366[ebp]
  00207	e8 00 00 00 00	 call	 ?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundBank::GetNotificationContext
  0020c	89 45 f8	 mov	 DWORD PTR _pContext$[ebp], eax

; 1416 :     } else {

  0020f	eb 1a		 jmp	 SHORT $L32364
$L32365:

; 1417 :         CSoundCue *pSoundCue = (CSoundCue *) pNotificationDesc->pSoundCue;

  00211	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00214	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00217	89 4d e4	 mov	 DWORD PTR _pSoundCue$32369[ebp], ecx

; 1418 :         pContext = pSoundCue->GetNotificationContext(pNotificationDesc->dwType);

  0021a	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  0021d	8b 02		 mov	 eax, DWORD PTR [edx]
  0021f	50		 push	 eax
  00220	8b 4d e4	 mov	 ecx, DWORD PTR _pSoundCue$32369[ebp]
  00223	e8 00 00 00 00	 call	 ?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundCue::GetNotificationContext
  00228	89 45 f8	 mov	 DWORD PTR _pContext$[ebp], eax
$L32364:

; 1419 :     }
; 1420 : 
; 1421 :     if (IsListEmpty(&pContext->ListEntry)) {

  0022b	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0022e	83 c1 38	 add	 ecx, 56			; 00000038H
  00231	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  00234	39 4a 38	 cmp	 DWORD PTR [edx+56], ecx
  00237	75 07		 jne	 SHORT $L32371

; 1422 : 
; 1423 :         //
; 1424 :         // this context does not contain a signalled event.
; 1425 :         // only contexts that belong to the global notification list have 
; 1426 :         // pending notifications
; 1427 :         //
; 1428 : 
; 1429 :         pContext = NULL;

  00239	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pContext$[ebp], 0
$L32371:

; 1430 :     }
; 1431 : 
; 1432 : #if DBG
; 1433 :     if (pContext && !pContext->bRegistered) {

  00240	83 7d f8 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  00244	74 35		 je	 SHORT $L32372
  00246	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00249	83 38 00	 cmp	 DWORD PTR [eax], 0
  0024c	75 2d		 jne	 SHORT $L32372

; 1434 :         DPF_WARNING("Attempting to retrieve notification type that was never registers");

  0024e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00253	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@POFDJHI@CEngine?3?3GetNotification?$AA@
  00258	68 9a 05 00 00	 push	 1434			; 0000059aH
  0025d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00262	6a 03		 push	 3
  00264	6a 09		 push	 9
  00266	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0026b	83 c4 18	 add	 esp, 24			; 00000018H
  0026e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@JEMHEBII@Attempting?5to?5retrieve?5notificat@
  00273	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00278	83 c4 04	 add	 esp, 4
$L32372:

; 1435 :     }           
; 1436 : #endif
; 1437 : 
; 1438 :     if (pContext && pContext->bRegistered) {

  0027b	83 7d f8 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  0027f	74 42		 je	 SHORT $L32374
  00281	8b 4d f8	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00284	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00287	74 3a		 je	 SHORT $L32374

; 1439 : 
; 1440 :         RemoveEntryList(&pContext->ListEntry);

  00289	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  0028c	83 c2 38	 add	 edx, 56			; 00000038H
  0028f	52		 push	 edx
  00290	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 1441 :         if (!(pContext->PendingNotification.Header.dwType & XACT_FLAG_NOTIFICATION_PERSIST)){

  00295	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  00298	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0029b	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  002a1	85 c9		 test	 ecx, ecx
  002a3	75 09		 jne	 SHORT $L32375

; 1442 :             
; 1443 :             //
; 1444 :             // auto-unregister notification
; 1445 :             //
; 1446 :             
; 1447 :             pContext->bRegistered = FALSE;

  002a5	8b 55 f8	 mov	 edx, DWORD PTR _pContext$[ebp]
  002a8	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L32375:

; 1448 :             
; 1449 :         }
; 1450 : 
; 1451 :         //
; 1452 :         // copy pending notification to user-supplied buffer
; 1453 :         //
; 1454 : 
; 1455 :         memcpy(pNotification,
; 1456 :             &pContext->PendingNotification,
; 1457 :             sizeof(XACT_NOTIFICATION));

  002ae	6a 28		 push	 40			; 00000028H
  002b0	8b 45 f8	 mov	 eax, DWORD PTR _pContext$[ebp]
  002b3	83 c0 08	 add	 eax, 8
  002b6	50		 push	 eax
  002b7	8b 4d 10	 mov	 ecx, DWORD PTR _pNotification$[ebp]
  002ba	51		 push	 ecx
  002bb	e8 00 00 00 00	 call	 _memcpy
  002c0	83 c4 0c	 add	 esp, 12			; 0000000cH
$L32374:

; 1458 :                 
; 1459 :         
; 1460 :     }
; 1461 :    
; 1462 :     if (!pContext)

  002c3	83 7d f8 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  002c7	75 07		 jne	 SHORT $L32377

; 1463 :         hr = E_FAIL;

  002c9	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L32377:

; 1464 : 
; 1465 :     DPF_LEAVE_HRESULT(hr);
; 1466 :     return hr;

  002d0	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  002d3	89 55 e0	 mov	 DWORD PTR $T32895[ebp], edx
  002d6	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  002d9	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  002de	8b 45 e0	 mov	 eax, DWORD PTR $T32895[ebp]

; 1467 : }

  002e1	8b e5		 mov	 esp, ebp
  002e3	5d		 pop	 ebp
  002e4	c2 0c 00	 ret	 12			; 0000000cH
?GetNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@PAU_XACT_NOTIFICATION@@@Z ENDP ; XACT::CEngine::GetNotification
XACTENG	ENDS
PUBLIC	?FlushNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z ; XACT::CEngine::FlushNotification
PUBLIC	??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@ ; `string'
PUBLIC	??_C@_0DJ@MKKIAPBO@pNotificationDesc?9?$DOdwType?5?$CG?5XACT@ ; `string'
PUBLIC	??_C@_0DH@MBBFMMHB@You?5must?5supply?5pSoundBank?5if?5dw@ ; `string'
;	COMDAT ??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@
XACTENG_RD	SEGMENT
??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@ DB 'CEngine::FlushNot'
	DB	'ification', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@MKKIAPBO@pNotificationDesc?9?$DOdwType?5?$CG?5XACT@
XACTENG_RD	SEGMENT
??_C@_0DJ@MKKIAPBO@pNotificationDesc?9?$DOdwType?5?$CG?5XACT@ DB 'pNotifi'
	DB	'cationDesc->dwType & XACT_MASK_NOTIFICATION_FLAGS', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@MBBFMMHB@You?5must?5supply?5pSoundBank?5if?5dw@
XACTENG_RD	SEGMENT
??_C@_0DH@MBBFMMHB@You?5must?5supply?5pSoundBank?5if?5dw@ DB 'You must su'
	DB	'pply pSoundBank if dwSoundCueIndex is valid', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?FlushNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z
XACTENG	SEGMENT
tv154 = -44
$T32902 = -40
$T32901 = -36
_pSoundBank$32399 = -32
_pCueContext$32398 = -28
___AutoIrql$ = -24
_pContext$ = -16
_hr$ = -12
_bFlush$ = -8
_pEntry$ = -4
_this$ = 8
_pNotificationDesc$ = 12
?FlushNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z PROC NEAR ; XACT::CEngine::FlushNotification, COMDAT

; 1474 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 1475 :     HRESULT hr = S_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1476 :     PLIST_ENTRY pEntry;
; 1477 :     PNOTIFICATION_CONTEXT pContext = NULL;

  0000d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pContext$[ebp], 0

; 1478 :     BOOL bFlush = FALSE;

  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFlush$[ebp], 0

; 1479 :     
; 1480 :     DPF_ENTER();
; 1481 :     
; 1482 :     AutoIrql();

  0001b	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 1483 : 
; 1484 : #ifdef VALIDATE_PARAMETERS
; 1485 : 
; 1486 :     if(!pNotificationDesc)

  00023	83 7d 0c 00	 cmp	 DWORD PTR _pNotificationDesc$[ebp], 0
  00027	75 2d		 jne	 SHORT $L32390

; 1487 :     {
; 1488 :         DPF_ERROR("No pNotificationDesc supplied");

  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@
  00033	68 d0 05 00 00	 push	 1488			; 000005d0H
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0003d	6a 01		 push	 1
  0003f	6a 09		 push	 9
  00041	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00046	83 c4 18	 add	 esp, 24			; 00000018H
  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NFMHAMLB@No?5pNotificationDesc?5supplied?$AA@
  0004e	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00053	83 c4 04	 add	 esp, 4
$L32390:

; 1489 :     }
; 1490 : 
; 1491 :     ASSERT(pNotificationDesc->dwType & XACT_MASK_NOTIFICATION_FLAGS);

  00056	68 d3 05 00 00	 push	 1491			; 000005d3H
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MKKIAPBO@pNotificationDesc?9?$DOdwType?5?$CG?5XACT@
  00065	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00068	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006a	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00070	f7 d9		 neg	 ecx
  00072	1b c9		 sbb	 ecx, ecx
  00074	41		 inc	 ecx
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 1492 : 
; 1493 :     if ((pNotificationDesc->dwType != XACT_NOTIFICATION_TYPE_UNUSED) && 
; 1494 :         (pNotificationDesc->dwType >= eXACTNotification_Max)) {

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  00081	83 3a ff	 cmp	 DWORD PTR [edx], -1
  00084	74 3b		 je	 SHORT $L32393
  00086	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00089	83 38 03	 cmp	 DWORD PTR [eax], 3
  0008c	72 33		 jb	 SHORT $L32393

; 1495 : 
; 1496 :         DPF_ERROR("Invalid notification type specified (%d)",
; 1497 :             pNotificationDesc->dwType);

  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@
  00098	68 d8 05 00 00	 push	 1496			; 000005d8H
  0009d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000a2	6a 01		 push	 1
  000a4	6a 09		 push	 9
  000a6	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000ab	83 c4 18	 add	 esp, 24			; 00000018H
  000ae	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  000b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b3	52		 push	 edx
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@JHIPGPEM@Invalid?5notification?5type?5specif@
  000b9	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000be	83 c4 08	 add	 esp, 8
$L32393:

; 1498 : 
; 1499 :     }
; 1500 : 
; 1501 :     if (pNotificationDesc->pSoundBank && pNotificationDesc->pSoundCue) {

  000c1	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  000c4	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000c8	74 36		 je	 SHORT $L32394
  000ca	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  000cd	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000d1	74 2d		 je	 SHORT $L32394

; 1502 : 
; 1503 :         DPF_ERROR("You cant specify a notification desc that has both pSoundBank and pSoundCue");

  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000d8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@
  000dd	68 df 05 00 00	 push	 1503			; 000005dfH
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000e7	6a 01		 push	 1
  000e9	6a 09		 push	 9
  000eb	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000f0	83 c4 18	 add	 esp, 24			; 00000018H
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EM@CMKNIKAO@You?5cant?5specify?5a?5notification?5@
  000f8	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000fd	83 c4 04	 add	 esp, 4
$L32394:

; 1504 : 
; 1505 :     }
; 1506 : 
; 1507 :     if ((pNotificationDesc->dwSoundCueIndex != XACT_SOUNDCUE_INDEX_UNUSED) &&
; 1508 :         !pNotificationDesc->pSoundBank){

  00100	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  00103	83 7a 0c ff	 cmp	 DWORD PTR [edx+12], -1
  00107	74 36		 je	 SHORT $L32395
  00109	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  0010c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00110	75 2d		 jne	 SHORT $L32395

; 1509 : 
; 1510 :         DPF_WARNING("You must supply pSoundBank if dwSoundCueIndex is valid");

  00112	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00117	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@MMANHIJ@CEngine?3?3FlushNotification?$AA@
  0011c	68 e6 05 00 00	 push	 1510			; 000005e6H
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00126	6a 03		 push	 3
  00128	6a 09		 push	 9
  0012a	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0012f	83 c4 18	 add	 esp, 24			; 00000018H
  00132	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MBBFMMHB@You?5must?5supply?5pSoundBank?5if?5dw@
  00137	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0013c	83 c4 04	 add	 esp, 4
$L32395:

; 1511 : 
; 1512 :     }
; 1513 : 
; 1514 : #endif // VALIDATE_PARAMETERS
; 1515 : 
; 1516 :     if (pNotificationDesc->pSoundBank &&
; 1517 :         (pNotificationDesc->dwSoundCueIndex != XACT_SOUNDCUE_INDEX_UNUSED)) {

  0013f	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00142	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00146	0f 84 8f 00 00
	00		 je	 $L32397
  0014c	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  0014f	83 7a 0c ff	 cmp	 DWORD PTR [edx+12], -1
  00153	0f 84 82 00 00
	00		 je	 $L32397

; 1518 :         
; 1519 :         PCUE_INDEX_NOTIFICATION_CONTEXT pCueContext;
; 1520 :         CSoundBank *pSoundBank = (CSoundBank *) pNotificationDesc->pSoundBank;

  00159	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  0015c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00160	74 0e		 je	 SHORT $L32899
  00162	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00165	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00168	83 ea 08	 sub	 edx, 8
  0016b	89 55 d4	 mov	 DWORD PTR tv154[ebp], edx
  0016e	eb 07		 jmp	 SHORT $L32900
$L32899:
  00170	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv154[ebp], 0
$L32900:
  00177	8b 45 d4	 mov	 eax, DWORD PTR tv154[ebp]
  0017a	89 45 e0	 mov	 DWORD PTR _pSoundBank$32399[ebp], eax

; 1521 : 
; 1522 :         //
; 1523 :         // soundCueIndex was specified which means we need to remove it from the soundbanks
; 1524 :         // list of registered cue indices
; 1525 :         //
; 1526 : 
; 1527 :         pContext = pSoundBank->GetNotificationContext(pNotificationDesc->dwType);        

  0017d	8b 4d 0c	 mov	 ecx, DWORD PTR _pNotificationDesc$[ebp]
  00180	8b 11		 mov	 edx, DWORD PTR [ecx]
  00182	52		 push	 edx
  00183	8b 4d e0	 mov	 ecx, DWORD PTR _pSoundBank$32399[ebp]
  00186	e8 00 00 00 00	 call	 ?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundBank::GetNotificationContext
  0018b	89 45 f0	 mov	 DWORD PTR _pContext$[ebp], eax

; 1528 :         pCueContext = GetCueNotificationContext(pContext,pNotificationDesc->dwSoundCueIndex);

  0018e	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00191	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00194	51		 push	 ecx
  00195	8b 55 f0	 mov	 edx, DWORD PTR _pContext$[ebp]
  00198	52		 push	 edx
  00199	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	e8 00 00 00 00	 call	 ?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CEngine::GetCueNotificationContext
  001a1	89 45 e4	 mov	 DWORD PTR _pCueContext$32398[ebp], eax

; 1529 :         if (pCueContext && !(pCueContext->bPersist)) {

  001a4	83 7d e4 00	 cmp	 DWORD PTR _pCueContext$32398[ebp], 0
  001a8	74 31		 je	 SHORT $L32397
  001aa	8b 45 e4	 mov	 eax, DWORD PTR _pCueContext$32398[ebp]
  001ad	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  001b1	75 28		 jne	 SHORT $L32397

; 1530 : 
; 1531 :             RemoveEntryList(&pCueContext->ListEntry);

  001b3	8b 4d e4	 mov	 ecx, DWORD PTR _pCueContext$32398[ebp]
  001b6	51		 push	 ecx
  001b7	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 1532 :             DELETE(pCueContext);

  001bc	83 7d e4 00	 cmp	 DWORD PTR _pCueContext$32398[ebp], 0
  001c0	74 19		 je	 SHORT $L32397
  001c2	8b 55 e4	 mov	 edx, DWORD PTR _pCueContext$32398[ebp]
  001c5	89 55 dc	 mov	 DWORD PTR $T32901[ebp], edx
  001c8	8b 45 dc	 mov	 eax, DWORD PTR $T32901[ebp]
  001cb	50		 push	 eax
  001cc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001d1	83 c4 04	 add	 esp, 4
  001d4	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _pCueContext$32398[ebp], 0
$L32397:

; 1533 : 
; 1534 :         }
; 1535 :         
; 1536 :     }
; 1537 : 
; 1538 :     //
; 1539 :     // flush the appropriate pending notifications
; 1540 :     //
; 1541 : 
; 1542 :     pEntry = m_lstPendingNotifications.Flink;

  001db	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  001de	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  001e1	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx
$L32405:

; 1543 :     while (pEntry != &m_lstPendingNotifications) {

  001e4	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001e7	83 c0 40	 add	 eax, 64			; 00000040H
  001ea	39 45 fc	 cmp	 DWORD PTR _pEntry$[ebp], eax
  001ed	0f 84 a0 00 00
	00		 je	 $L32406

; 1544 :         
; 1545 :         pContext = CONTAINING_RECORD(pEntry,NOTIFICATION_CONTEXT,ListEntry);

  001f3	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  001f6	83 e9 38	 sub	 ecx, 56			; 00000038H
  001f9	89 4d f0	 mov	 DWORD PTR _pContext$[ebp], ecx

; 1546 :         if (pNotificationDesc->dwType == XACT_NOTIFICATION_TYPE_UNUSED)

  001fc	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  001ff	83 3a ff	 cmp	 DWORD PTR [edx], -1
  00202	75 09		 jne	 SHORT $L32411

; 1547 :         {
; 1548 :             bFlush = TRUE;

  00204	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFlush$[ebp], 1

; 1549 : 
; 1550 :         } else if (pNotificationDesc->dwType == 

  0020b	eb 1a		 jmp	 SHORT $L32412
$L32411:

; 1551 :             (pContext->PendingNotification.Header.dwType & XACT_MASK_NOTIFICATION_TYPE)){

  0020d	8b 45 f0	 mov	 eax, DWORD PTR _pContext$[ebp]
  00210	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00213	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00219	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  0021c	39 0a		 cmp	 DWORD PTR [edx], ecx
  0021e	75 07		 jne	 SHORT $L32412

; 1552 : 
; 1553 :             bFlush = TRUE;

  00220	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bFlush$[ebp], 1
$L32412:

; 1554 :         }
; 1555 : 
; 1556 :         //
; 1557 :         // flush any notification regadless of type. If pSoundBank is supplied
; 1558 :         // flush all notification associated with that soundbank. Same with pSoundCue
; 1559 :         //
; 1560 :         
; 1561 :         if (pContext->PendingNotification.Header.pSoundBank &&
; 1562 :             (pContext->PendingNotification.Header.pSoundBank != pNotificationDesc->pSoundBank)) {

  00227	8b 45 f0	 mov	 eax, DWORD PTR _pContext$[ebp]
  0022a	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0022e	74 15		 je	 SHORT $L32414
  00230	8b 4d f0	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00233	8b 55 0c	 mov	 edx, DWORD PTR _pNotificationDesc$[ebp]
  00236	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00239	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  0023c	74 07		 je	 SHORT $L32414

; 1563 :             
; 1564 :             bFlush = FALSE;

  0023e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFlush$[ebp], 0
$L32414:

; 1565 :             
; 1566 :         }
; 1567 : 
; 1568 :         if (pContext->PendingNotification.Header.pSoundCue && 
; 1569 :             (pContext->PendingNotification.Header.pSoundCue != pNotificationDesc->pSoundCue)) {

  00245	8b 4d f0	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00248	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0024c	74 15		 je	 SHORT $L32415
  0024e	8b 55 f0	 mov	 edx, DWORD PTR _pContext$[ebp]
  00251	8b 45 0c	 mov	 eax, DWORD PTR _pNotificationDesc$[ebp]
  00254	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00257	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0025a	74 07		 je	 SHORT $L32415

; 1570 :             
; 1571 :             bFlush = FALSE;

  0025c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bFlush$[ebp], 0
$L32415:

; 1572 :             
; 1573 :         }
; 1574 : 
; 1575 :         if (bFlush) {

  00263	83 7d f8 00	 cmp	 DWORD PTR _bFlush$[ebp], 0
  00267	74 25		 je	 SHORT $L32416

; 1576 : 
; 1577 :             RemoveEntryList(&pContext->ListEntry);

  00269	8b 55 f0	 mov	 edx, DWORD PTR _pContext$[ebp]
  0026c	83 c2 38	 add	 edx, 56			; 00000038H
  0026f	52		 push	 edx
  00270	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 1578 :             if (!(pContext->PendingNotification.Header.dwType & XACT_FLAG_NOTIFICATION_PERSIST)){

  00275	8b 45 f0	 mov	 eax, DWORD PTR _pContext$[ebp]
  00278	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0027b	81 e1 00 00 01
	00		 and	 ecx, 65536		; 00010000H
  00281	85 c9		 test	 ecx, ecx
  00283	75 09		 jne	 SHORT $L32416

; 1579 : 
; 1580 :                 //
; 1581 :                 // unregister notification
; 1582 :                 //
; 1583 : 
; 1584 :                 pContext->bRegistered = FALSE;

  00285	8b 55 f0	 mov	 edx, DWORD PTR _pContext$[ebp]
  00288	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L32416:

; 1585 : 
; 1586 :             }
; 1587 : 
; 1588 :         }
; 1589 :         
; 1590 :     }

  0028e	e9 51 ff ff ff	 jmp	 $L32405
$L32406:

; 1591 : 
; 1592 :     DPF_LEAVE_HRESULT(hr);
; 1593 :     return hr;

  00293	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
  00296	89 45 d8	 mov	 DWORD PTR $T32902[ebp], eax
  00299	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0029c	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  002a1	8b 45 d8	 mov	 eax, DWORD PTR $T32902[ebp]

; 1594 : }

  002a4	8b e5		 mov	 esp, ebp
  002a6	5d		 pop	 ebp
  002a7	c2 08 00	 ret	 8
?FlushNotification@CEngine@XACT@@QAGJPAU_XACT_NOTIFICATION_DESCRIPTION@@@Z ENDP ; XACT::CEngine::FlushNotification
XACTENG	ENDS
PUBLIC	?CommitDeferredSettings@CEngine@XACT@@QAGJXZ	; XACT::CEngine::CommitDeferredSettings
PUBLIC	?CommitDeferredSettings@IDirectSound@@QAGJXZ	; IDirectSound::CommitDeferredSettings
; Function compile flags: /Odt
;	COMDAT ?CommitDeferredSettings@CEngine@XACT@@QAGJXZ
XACTENG	SEGMENT
$T32906 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
?CommitDeferredSettings@CEngine@XACT@@QAGJXZ PROC NEAR	; XACT::CEngine::CommitDeferredSettings, COMDAT

; 1601 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1602 :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1603 : 
; 1604 :     DPF_ENTER();
; 1605 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1606 : 
; 1607 :     hr = m_pDirectSound->CommitDeferredSettings();

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?CommitDeferredSettings@IDirectSound@@QAGJXZ ; IDirectSound::CommitDeferredSettings
  00021	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 1608 : 
; 1609 :     DPF_LEAVE_HRESULT(hr);
; 1610 :     return hr;

  00024	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  00027	89 55 f4	 mov	 DWORD PTR $T32906[ebp], edx
  0002a	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0002d	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00032	8b 45 f4	 mov	 eax, DWORD PTR $T32906[ebp]

; 1611 : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?CommitDeferredSettings@CEngine@XACT@@QAGJXZ ENDP	; XACT::CEngine::CommitDeferredSettings
XACTENG	ENDS
EXTRN	_IDirectSound_CommitDeferredSettings@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?CommitDeferredSettings@IDirectSound@@QAGJXZ
XACTENG	SEGMENT
_this$ = 8
?CommitDeferredSettings@IDirectSound@@QAGJXZ PROC NEAR	; IDirectSound::CommitDeferredSettings, COMDAT

; 1816 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1817 :         return IDirectSound_CommitDeferredSettings(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSound_CommitDeferredSettings@4

; 1818 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?CommitDeferredSettings@IDirectSound@@QAGJXZ ENDP	; IDirectSound::CommitDeferredSettings
XACTENG	ENDS
PUBLIC	?ScheduleEvent@CEngine@XACT@@QAGJPAUXACT_TRACK_EVENT@@PAUIXACTSoundCue@@K@Z ; XACT::CEngine::ScheduleEvent
PUBLIC	??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@ ; `string'
PUBLIC	??_C@_0BD@LLIONAKJ@No?5pEvent?5supplied?$AA@	; `string'
PUBLIC	??_C@_0BD@CJIAJGDK@Invalid?5Event?5type?$AA@	; `string'
PUBLIC	??_C@_0FI@PJFMFDJF@pSoundCue?5?$DN?$DN?5NULL?5and?5eventType?5@ ; `string'
PUBLIC	??_C@_0DO@FJECCPBI@pSoundCue?5must?5be?5?$CB?$DN?5NULL?5if?5a?5v@ ; `string'
PUBLIC	??_C@_0EC@DBONKDAN@Play?5is?5not?5a?5valid?5event?5type?5w@ ; `string'
EXTRN	?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z:NEAR ; XACT::CEngine::CreateEventTimeStamp
EXTRN	?ScheduleRuntimeEvent@CSoundCue@XACT@@IAEJPAUXACT_TRACK_EVENT@@K@Z:NEAR ; XACT::CSoundCue::ScheduleRuntimeEvent
;	COMDAT ??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\engine.cpp
XACTENG_RD	SEGMENT
??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@ DB 'CEngine::ScheduleEve'
	DB	'nt', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@LLIONAKJ@No?5pEvent?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@LLIONAKJ@No?5pEvent?5supplied?$AA@ DB 'No pEvent supplied', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@CJIAJGDK@Invalid?5Event?5type?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@CJIAJGDK@Invalid?5Event?5type?$AA@ DB 'Invalid Event type', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0FI@PJFMFDJF@pSoundCue?5?$DN?$DN?5NULL?5and?5eventType?5@
XACTENG_RD	SEGMENT
??_C@_0FI@PJFMFDJF@pSoundCue?5?$DN?$DN?5NULL?5and?5eventType?5@ DB 'pSoun'
	DB	'dCue == NULL and eventType == eXACTEvent_SetEffectData is not'
	DB	' a valid global event', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DO@FJECCPBI@pSoundCue?5must?5be?5?$CB?$DN?5NULL?5if?5a?5v@
XACTENG_RD	SEGMENT
??_C@_0DO@FJECCPBI@pSoundCue?5must?5be?5?$CB?$DN?5NULL?5if?5a?5v@ DB 'pSo'
	DB	'undCue must be != NULL if a valid dwTrackIndex is supplied', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EC@DBONKDAN@Play?5is?5not?5a?5valid?5event?5type?5w@
XACTENG_RD	SEGMENT
??_C@_0EC@DBONKDAN@Play?5is?5not?5a?5valid?5event?5type?5w@ DB 'Play is n'
	DB	'ot a valid event type when submitting events through API', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?ScheduleEvent@CEngine@XACT@@QAGJPAUXACT_TRACK_EVENT@@PAUIXACTSoundCue@@K@Z
XACTENG	SEGMENT
$T32915 = -84
$T32914 = -80
$T32913 = -76
_track$32456 = -72
_pSoundCue$32453 = -20
___AutoLock$ = -16
_hr$ = -12
_pEventContext$ = -8
_pEvent$ = -4
_this$ = 8
_pEventDesc$ = 12
_pSoundCueObject$ = 16
_dwTrackIndex$ = 20
?ScheduleEvent@CEngine@XACT@@QAGJPAUXACT_TRACK_EVENT@@PAUIXACTSoundCue@@K@Z PROC NEAR ; XACT::CEngine::ScheduleEvent, COMDAT

; 1617 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H

; 1618 :     HRESULT hr = S_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1619 :     PTRACK_EVENT_CONTEXT pEventContext;
; 1620 :     PXACT_TRACK_EVENT pEvent;
; 1621 : 
; 1622 :     DPF_ENTER();
; 1623 :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1624 : 
; 1625 : #ifdef VALIDATE_PARAMETERS    
; 1626 :     if(!pEventDesc)

  00015	83 7d 0c 00	 cmp	 DWORD PTR _pEventDesc$[ebp], 0
  00019	75 2d		 jne	 SHORT $L32437

; 1627 :     {
; 1628 :         DPF_ERROR("No pEvent supplied");

  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@
  00025	68 5c 06 00 00	 push	 1628			; 0000065cH
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  0002f	6a 01		 push	 1
  00031	6a 09		 push	 9
  00033	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@LLIONAKJ@No?5pEvent?5supplied?$AA@
  00040	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00045	83 c4 04	 add	 esp, 4
$L32437:

; 1629 :     }
; 1630 : 
; 1631 :     if (pEventDesc->Header.wType >= eXACTEvent_Max)

  00048	8b 45 0c	 mov	 eax, DWORD PTR _pEventDesc$[ebp]
  0004b	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0004e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00051	7c 2d		 jl	 SHORT $L32440

; 1632 :     {
; 1633 :         DPF_ERROR("Invalid Event type");

  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@
  0005d	68 61 06 00 00	 push	 1633			; 00000661H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00067	6a 01		 push	 1
  00069	6a 09		 push	 9
  0006b	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00070	83 c4 18	 add	 esp, 24			; 00000018H
  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@CJIAJGDK@Invalid?5Event?5type?$AA@
  00078	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0007d	83 c4 04	 add	 esp, 4
$L32440:

; 1634 :     }
; 1635 : 
; 1636 :     if (pSoundCueObject == NULL) {

  00080	83 7d 10 00	 cmp	 DWORD PTR _pSoundCueObject$[ebp], 0
  00084	75 6b		 jne	 SHORT $L32442

; 1637 : 
; 1638 :         if (pEventDesc->Header.wType != eXACTEvent_SetEffectData) {

  00086	8b 55 0c	 mov	 edx, DWORD PTR _pEventDesc$[ebp]
  00089	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0008c	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0008f	74 2d		 je	 SHORT $L32443

; 1639 :             DPF_ERROR("pSoundCue == NULL and eventType == eXACTEvent_SetEffectData is not a valid global event");

  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00096	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@
  0009b	68 67 06 00 00	 push	 1639			; 00000667H
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000a5	6a 01		 push	 1
  000a7	6a 09		 push	 9
  000a9	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000ae	83 c4 18	 add	 esp, 24			; 00000018H
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FI@PJFMFDJF@pSoundCue?5?$DN?$DN?5NULL?5and?5eventType?5@
  000b6	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000bb	83 c4 04	 add	 esp, 4
$L32443:

; 1640 :         }
; 1641 : 
; 1642 :         if (dwTrackIndex != XACT_TRACK_INDEX_UNUSED) {

  000be	83 7d 14 ff	 cmp	 DWORD PTR _dwTrackIndex$[ebp], -1
  000c2	74 2d		 je	 SHORT $L32442

; 1643 : 
; 1644 :             DPF_ERROR("pSoundCue must be != NULL if a valid dwTrackIndex is supplied");

  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@
  000ce	68 6c 06 00 00	 push	 1644			; 0000066cH
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  000d8	6a 01		 push	 1
  000da	6a 09		 push	 9
  000dc	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000e1	83 c4 18	 add	 esp, 24			; 00000018H
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@FJECCPBI@pSoundCue?5must?5be?5?$CB?$DN?5NULL?5if?5a?5v@
  000e9	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000ee	83 c4 04	 add	 esp, 4
$L32442:

; 1645 : 
; 1646 :         }
; 1647 :     }
; 1648 : 
; 1649 :     if (pSoundCueObject != NULL) {

  000f1	83 7d 10 00	 cmp	 DWORD PTR _pSoundCueObject$[ebp], 0
  000f5	74 37		 je	 SHORT $L32447

; 1650 : 
; 1651 :         //
; 1652 :         // check if the event they are submitting is valid for runtime submission
; 1653 :         //
; 1654 : 
; 1655 :         if (pEventDesc->Header.wType == eXACTEvent_Play) {

  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _pEventDesc$[ebp]
  000fa	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000fd	85 d2		 test	 edx, edx
  000ff	75 2d		 jne	 SHORT $L32447

; 1656 :             DPF_ERROR("Play is not a valid event type when submitting events through API");

  00101	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00106	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JEOJAHDB@CEngine?3?3ScheduleEvent?$AA@
  0010b	68 78 06 00 00	 push	 1656			; 00000678H
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PDNAHKMN@c?3?2xbox?2private?2windows?2directx?2@
  00115	6a 01		 push	 1
  00117	6a 09		 push	 9
  00119	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0011e	83 c4 18	 add	 esp, 24			; 00000018H
  00121	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@DBONKDAN@Play?5is?5not?5a?5valid?5event?5type?5w@
  00126	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0012b	83 c4 04	 add	 esp, 4
$L32447:

; 1657 :         }
; 1658 :     }
; 1659 :     
; 1660 : #endif // VALIDATE_PARAMETERS
; 1661 :            
; 1662 :     if (SUCCEEDED(hr)) {

  0012e	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00132	0f 8c e6 00 00
	00		 jl	 $L32451

; 1663 : 
; 1664 :         //
; 1665 :         // pSoundCue is optional since this event can be a global event
; 1666 :         // such as SetEffectData that is not associated with a specific soundsource
; 1667 :         // If pSoundCue is supplied, based on the type of event, we modify source or target voice
; 1668 :         // since the user cant specify a track, only single track sounds are acceptable...
; 1669 :         //
; 1670 :         
; 1671 :         if (pSoundCueObject) {

  00138	83 7d 10 00	 cmp	 DWORD PTR _pSoundCueObject$[ebp], 0
  0013c	74 1e		 je	 SHORT $L32452

; 1672 :             
; 1673 :             CSoundCue *pSoundCue = (CSoundCue *) pSoundCueObject;            

  0013e	8b 45 10	 mov	 eax, DWORD PTR _pSoundCueObject$[ebp]
  00141	89 45 ec	 mov	 DWORD PTR _pSoundCue$32453[ebp], eax

; 1674 :             hr = pSoundCue->ScheduleRuntimeEvent(pEventDesc,dwTrackIndex);

  00144	8b 4d 14	 mov	 ecx, DWORD PTR _dwTrackIndex$[ebp]
  00147	51		 push	 ecx
  00148	8b 55 0c	 mov	 edx, DWORD PTR _pEventDesc$[ebp]
  0014b	52		 push	 edx
  0014c	8b 4d ec	 mov	 ecx, DWORD PTR _pSoundCue$32453[ebp]
  0014f	e8 00 00 00 00	 call	 ?ScheduleRuntimeEvent@CSoundCue@XACT@@IAEJPAUXACT_TRACK_EVENT@@K@Z ; XACT::CSoundCue::ScheduleRuntimeEvent
  00154	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 1675 :             
; 1676 :         } else {

  00157	e9 c2 00 00 00	 jmp	 $L32451
$L32452:

; 1677 : 
; 1678 :             //
; 1679 :             // create a dummy track context only so we can use the 
; 1680 :             // CreateEventTimestamp function
; 1681 :             //
; 1682 : 
; 1683 :             TRACK_CONTEXT track;
; 1684 : 
; 1685 :             memset(&track,0,sizeof(track));            

  0015c	6a 30		 push	 48			; 00000030H
  0015e	6a 00		 push	 0
  00160	8d 45 b8	 lea	 eax, DWORD PTR _track$32456[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 _memset
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1686 : 
; 1687 :             //
; 1688 :             // create an event context for this event
; 1689 :             //
; 1690 :             
; 1691 :             hr = HRFROMP(pEventContext = NEW(TRACK_EVENT_CONTEXT));

  0016c	6a 20		 push	 32			; 00000020H
  0016e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00173	83 c4 04	 add	 esp, 4
  00176	89 45 b4	 mov	 DWORD PTR $T32913[ebp], eax
  00179	8b 4d b4	 mov	 ecx, DWORD PTR $T32913[ebp]
  0017c	89 4d f8	 mov	 DWORD PTR _pEventContext$[ebp], ecx
  0017f	33 d2		 xor	 edx, edx
  00181	83 7d f8 00	 cmp	 DWORD PTR _pEventContext$[ebp], 0
  00185	0f 95 c2	 setne	 dl
  00188	4a		 dec	 edx
  00189	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  0018f	89 55 f4	 mov	 DWORD PTR _hr$[ebp], edx

; 1692 :             
; 1693 :             if (SUCCEEDED(hr)) {

  00192	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00196	7c 26		 jl	 SHORT $L32462

; 1694 :                 
; 1695 :                 hr = HRFROMP(pEvent = NEW(XACT_TRACK_EVENT));

  00198	6a 50		 push	 80			; 00000050H
  0019a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0019f	83 c4 04	 add	 esp, 4
  001a2	89 45 b0	 mov	 DWORD PTR $T32914[ebp], eax
  001a5	8b 45 b0	 mov	 eax, DWORD PTR $T32914[ebp]
  001a8	89 45 fc	 mov	 DWORD PTR _pEvent$[ebp], eax
  001ab	33 c9		 xor	 ecx, ecx
  001ad	83 7d fc 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  001b1	0f 95 c1	 setne	 cl
  001b4	49		 dec	 ecx
  001b5	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  001bb	89 4d f4	 mov	 DWORD PTR _hr$[ebp], ecx
$L32462:

; 1696 :                 
; 1697 :             }
; 1698 :             
; 1699 :             if (SUCCEEDED(hr)) {

  001be	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c2	7c 1b		 jl	 SHORT $L32468

; 1700 :                 
; 1701 :                 //
; 1702 :                 // copy user event desc
; 1703 :                 //
; 1704 :                 
; 1705 :                 memcpy(pEvent,pEventDesc,sizeof(XACT_TRACK_EVENT));

  001c4	6a 50		 push	 80			; 00000050H
  001c6	8b 55 0c	 mov	 edx, DWORD PTR _pEventDesc$[ebp]
  001c9	52		 push	 edx
  001ca	8b 45 fc	 mov	 eax, DWORD PTR _pEvent$[ebp]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 _memcpy
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1706 :                 
; 1707 :                 //
; 1708 :                 // setup the event context
; 1709 :                 //
; 1710 :                 
; 1711 :                 pEventContext->m_pEventHeader = &pEvent->Header;

  001d6	8b 4d f8	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  001d9	8b 55 fc	 mov	 edx, DWORD PTR _pEvent$[ebp]
  001dc	89 51 10	 mov	 DWORD PTR [ecx+16], edx
$L32468:

; 1712 :                 
; 1713 :             }
; 1714 :             
; 1715 :             track.wSamplesPerSec = 48000;

  001df	66 c7 45 d0 80
	bb		 mov	 WORD PTR _track$32456[ebp+24], 48000 ; 0000bb80H

; 1716 :             KeQuerySystemTime((PLARGE_INTEGER)&track.rtStartTime);

  001e5	8d 45 d8	 lea	 eax, DWORD PTR _track$32456[ebp+32]
  001e8	50		 push	 eax
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 1717 :             InitializeListHead(&track.lstEvents);

  001ef	8d 4d c0	 lea	 ecx, DWORD PTR _track$32456[ebp+8]
  001f2	89 4d c4	 mov	 DWORD PTR _track$32456[ebp+12], ecx
  001f5	8b 55 c4	 mov	 edx, DWORD PTR _track$32456[ebp+12]
  001f8	89 55 c0	 mov	 DWORD PTR _track$32456[ebp+8], edx

; 1718 : 
; 1719 :             CreateEventTimeStamp(&track,pEventContext);

  001fb	8b 45 f8	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  001fe	50		 push	 eax
  001ff	8d 4d b8	 lea	 ecx, DWORD PTR _track$32456[ebp]
  00202	51		 push	 ecx
  00203	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00206	e8 00 00 00 00	 call	 ?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::CreateEventTimeStamp

; 1720 : 
; 1721 :             //
; 1722 :             // enqueue this event
; 1723 :             //
; 1724 : 
; 1725 :             hr = Enqueue(pEventContext);

  0020b	8b 55 f8	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0020e	52		 push	 edx
  0020f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00212	8b 08		 mov	 ecx, DWORD PTR [eax]
  00214	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00217	52		 push	 edx
  00218	ff 51 04	 call	 DWORD PTR [ecx+4]
  0021b	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L32451:

; 1726 : 
; 1727 :         }
; 1728 :         
; 1729 :     }
; 1730 : 
; 1731 :     DPF_LEAVE_HRESULT(hr);
; 1732 :     return hr;

  0021e	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
  00221	89 45 ac	 mov	 DWORD PTR $T32915[ebp], eax
  00224	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00227	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0022c	8b 45 ac	 mov	 eax, DWORD PTR $T32915[ebp]

; 1733 : }

  0022f	8b e5		 mov	 esp, ebp
  00231	5d		 pop	 ebp
  00232	c2 10 00	 ret	 16			; 00000010H
?ScheduleEvent@CEngine@XACT@@QAGJPAUXACT_TRACK_EVENT@@PAUIXACTSoundCue@@K@Z ENDP ; XACT::CEngine::ScheduleEvent
XACTENG	ENDS
END
