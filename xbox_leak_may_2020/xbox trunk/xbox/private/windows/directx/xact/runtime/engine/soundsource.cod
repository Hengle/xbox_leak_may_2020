; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\soundsource.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XACTENG_URW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_URW	ENDS
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_09DNMHMJFP@g_pEngine?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@FHBNIDJL@m_pWaveBankOwner?5?$DN?$DN?5NULL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RW	ENDS
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _IsEqualGUID@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _==@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_AddRef@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_Release@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_BeginScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_EndScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPalette_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _sqrtf@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBins@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetConeOrientation@IDirectSoundBuffer@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetI3DL2Source@IDirectSoundBuffer@@QAGJPBU_DSI3DL2BUFFER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Play@IDirectSoundBuffer@@QAGJKKK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Stop@IDirectSoundBuffer@@QAGJXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBins@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetAllParameters@IDirectSoundStream@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetConeOrientation@IDirectSoundStream@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetPosition@IDirectSoundStream@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetVelocity@IDirectSoundStream@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetI3DL2Source@IDirectSoundStream@@QAGJPBU_DSI3DL2BUFFER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Pause@IDirectSoundStream@@QAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?MoveEntryTailList@XACT@@YGPAU_LIST_ENTRY@@PAU2@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CSoundSource@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCSoundSource@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CSoundSource@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CSoundSource@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CSoundSource@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Initialize@CSoundSource@XACT@@AAEJXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Stop@CSoundSource@XACT@@AAEJXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Play@CSoundSource@XACT@@AAEJXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetPosition@CSoundSource@XACT@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetAllParameters@CSoundSource@XACT@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetConeOrientation@CSoundSource@XACT@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetI3DL2Source@CSoundSource@XACT@@QAGJPBU_DSI3DL2BUFFER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetVelocity@CSoundSource@XACT@@QAGJMMMK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBins@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBinVolumes@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_7CSoundSource@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XACTENG_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
XACTENG_RD	ENDS
PUBLIC	??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_09DNMHMJFP@g_pEngine?$AA@			; `string'
PUBLIC	??0CSoundSource@XACT@@QAE@XZ			; XACT::CSoundSource::CSoundSource
PUBLIC	?AddRef@CSoundSource@XACT@@UAGKXZ		; XACT::CSoundSource::AddRef
PUBLIC	?Release@CSoundSource@XACT@@UAGKXZ		; XACT::CSoundSource::Release
PUBLIC	??_7CSoundSource@XACT@@6B@			; XACT::CSoundSource::`vftable'
PUBLIC	??_GCSoundSource@XACT@@UAEPAXI@Z		; XACT::CSoundSource::`scalar deleting destructor'
PUBLIC	??0CRefCount@XACT@@QAE@K@Z			; XACT::CRefCount::CRefCount
EXTRN	_g_pEngine:DWORD
EXTRN	?AddRef@CEngine@XACT@@QAGKXZ:NEAR		; XACT::CEngine::AddRef
EXTRN	??_ECSoundSource@XACT@@UAEPAXI@Z:NEAR		; XACT::CSoundSource::`vector deleting destructor'
EXTRN	?DwDbgAssert@XACT@@YAXHPBD0I@Z:NEAR		; XACT::DwDbgAssert
;	COMDAT ??_7CSoundSource@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
CONST	SEGMENT
??_7CSoundSource@XACT@@6B@ DD FLAT:??_ECSoundSource@XACT@@UAEPAXI@Z ; XACT::CSoundSource::`vftable'
	DD	FLAT:?AddRef@CSoundSource@XACT@@UAGKXZ
	DD	FLAT:?Release@CSoundSource@XACT@@UAGKXZ
CONST	ENDS
;	COMDAT ??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\engine\soundsource.cpp', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_09DNMHMJFP@g_pEngine?$AA@
XACTENG_RD	SEGMENT
??_C@_09DNMHMJFP@g_pEngine?$AA@ DB 'g_pEngine', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??0CSoundSource@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CSoundSource@XACT@@QAE@XZ PROC NEAR			; XACT::CSoundSource::CSoundSource, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@XACT@@QAE@K@Z ; XACT::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSoundSource@XACT@@6B@

; 28   :     DPF_ENTER();
; 29   : 
; 30   :     ASSERT(g_pEngine);

  0001a	6a 1e		 push	 30			; 0000001eH
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DNMHMJFP@g_pEngine?$AA@
  00026	33 c9		 xor	 ecx, ecx
  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  0002f	0f 94 c1	 sete	 cl
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00038	83 c4 10	 add	 esp, 16			; 00000010H

; 31   :     g_pEngine->AddRef();

  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pEngine
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?AddRef@CEngine@XACT@@QAGKXZ ; XACT::CEngine::AddRef

; 32   : 
; 33   :     InitializeListHead(&m_ListEntry);

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 c0 08	 add	 eax, 8
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00053	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 34   : 
; 35   :     DPF_LEAVE_VOID();
; 36   : }

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
??0CSoundSource@XACT@@QAE@XZ ENDP			; XACT::CSoundSource::CSoundSource
XACTENG	ENDS
PUBLIC	?AddRef@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::AddRef
PUBLIC	?Release@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::Release
PUBLIC	??_7CRefCount@XACT@@6B@				; XACT::CRefCount::`vftable'
PUBLIC	??_GCRefCount@XACT@@UAEPAXI@Z			; XACT::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@XACT@@UAEPAXI@Z:NEAR		; XACT::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\common\refcount.h
CONST	SEGMENT
??_7CRefCount@XACT@@6B@ DD FLAT:??_ECRefCount@XACT@@UAEPAXI@Z ; XACT::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@XACT@@UAGKXZ
	DD	FLAT:?Release@CRefCount@XACT@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@XACT@@QAE@K@Z PROC NEAR			; XACT::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 36   : }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@XACT@@QAE@K@Z ENDP				; XACT::CRefCount::CRefCount
XACTENG	ENDS
PUBLIC	??1CRefCount@XACT@@UAE@XZ			; XACT::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@XACT@@UAEPAXI@Z PROC NEAR			; XACT::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L29682
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L29682:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@XACT@@UAEPAXI@Z ENDP			; XACT::CRefCount::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\refcount.h', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CRefCount@XACT@@UAE@XZ PROC NEAR			; XACT::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@

; 40   :     ASSERT(!m_dwRefCount);

  00010	6a 28		 push	 40			; 00000028H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 41   : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@XACT@@UAE@XZ ENDP				; XACT::CRefCount::~CRefCount
XACTENG	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
_this$ = 8
?AddRef@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::AddRef, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   :     ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2d		 push	 45			; 0000002dH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 46   :     return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 47   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::AddRef
XACTENG	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
tv84 = -12
$T32113 = -8
$T32112 = -4
_this$ = 8
?Release@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::Release, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 51   :     ASSERT(m_dwRefCount);

  00006	6a 33		 push	 51			; 00000033H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 52   : 
; 53   :     if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L29699

; 54   :     {
; 55   :         if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L29699

; 56   :         {
; 57   :             delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T32113[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T32113[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T32112[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T32112[ebp], 0
  00058	74 11		 je	 SHORT $L32114
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T32112[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T32112[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L32115
$L32114:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L32115:

; 58   :             return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L29697
$L29699:

; 59   :         }
; 60   :     }
; 61   : 
; 62   :     return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L29697:

; 63   : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::Release
XACTENG	ENDS
EXTRN	_XactMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 99   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  :     using namespace XACT;
; 101  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 102  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
XACTENG	ENDS
PUBLIC	??1CSoundSource@XACT@@UAE@XZ			; XACT::CSoundSource::~CSoundSource
; Function compile flags: /Odt
;	COMDAT ??_GCSoundSource@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSoundSource@XACT@@UAEPAXI@Z PROC NEAR		; XACT::CSoundSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSoundSource@XACT@@UAE@XZ ; XACT::CSoundSource::~CSoundSource
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L31840
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L31840:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSoundSource@XACT@@UAEPAXI@Z ENDP			; XACT::CSoundSource::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	??_C@_0BJ@FHBNIDJL@m_pWaveBankOwner?5?$DN?$DN?5NULL?$AA@ ; `string'
PUBLIC	?Release@IDirectSoundBuffer@@QAGKXZ		; IDirectSoundBuffer::Release
EXTRN	?Release@CEngine@XACT@@QAGKXZ:NEAR		; XACT::CEngine::Release
;	COMDAT ??_C@_0BJ@FHBNIDJL@m_pWaveBankOwner?5?$DN?$DN?5NULL?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
XACTENG_RD	SEGMENT
??_C@_0BJ@FHBNIDJL@m_pWaveBankOwner?5?$DN?$DN?5NULL?$AA@ DB 'm_pWaveBankO'
	DB	'wner == NULL', 00H				; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??1CSoundSource@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CSoundSource@XACT@@UAE@XZ PROC NEAR			; XACT::CSoundSource::~CSoundSource, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSoundSource@XACT@@6B@

; 46   :     DPF_ENTER();
; 47   : 
; 48   :     ASSERT(g_pEngine);

  00010	6a 30		 push	 48			; 00000030H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DNMHMJFP@g_pEngine?$AA@
  0001c	33 c9		 xor	 ecx, ecx
  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  00025	0f 94 c1	 sete	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 49   :     g_pEngine->Release();

  00031	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pEngine
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?Release@CEngine@XACT@@QAGKXZ ; XACT::CEngine::Release

; 50   : 
; 51   :     if (m_HwVoice.pStream) {

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00044	74 12		 je	 SHORT $L31845

; 52   : 
; 53   :         m_HwVoice.pStream->Release();

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00052	8b 12		 mov	 edx, DWORD PTR [edx]
  00054	51		 push	 ecx
  00055	ff 52 04	 call	 DWORD PTR [edx+4]
$L31845:

; 54   : 
; 55   :     }
; 56   : 
; 57   :     if (m_HwVoice.pBuffer) {

  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0005f	74 0c		 je	 SHORT $L31846

; 58   : 
; 59   :         m_HwVoice.pBuffer->Release();

  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00067	52		 push	 edx
  00068	e8 00 00 00 00	 call	 ?Release@IDirectSoundBuffer@@QAGKXZ ; IDirectSoundBuffer::Release
$L31846:

; 60   : 
; 61   :     }
; 62   : 
; 63   :     ASSERT(m_pWaveBankOwner == NULL);

  0006d	6a 3f		 push	 63			; 0000003fH
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@
  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@FHBNIDJL@m_pWaveBankOwner?5?$DN?$DN?5NULL?$AA@
  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	33 c9		 xor	 ecx, ecx
  0007e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00082	0f 95 c1	 setne	 cl
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0008b	83 c4 10	 add	 esp, 16			; 00000010H

; 64   : 
; 65   :     DPF_LEAVE_VOID();
; 66   : }

  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??1CSoundSource@XACT@@UAE@XZ ENDP			; XACT::CSoundSource::~CSoundSource
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_Release@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Release@IDirectSoundBuffer@@QAGKXZ
XACTENG	SEGMENT
_this$ = 8
?Release@IDirectSoundBuffer@@QAGKXZ PROC NEAR		; IDirectSoundBuffer::Release, COMDAT

; 1932 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1933 :         return IDirectSoundBuffer_Release(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Release@4

; 1934 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Release@IDirectSoundBuffer@@QAGKXZ ENDP		; IDirectSoundBuffer::Release
XACTENG	ENDS
PUBLIC	??0CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::CAutoLock
PUBLIC	??1CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::~CAutoLock
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?AddRef@CSoundSource@XACT@@UAGKXZ
XACTENG	SEGMENT
$T32131 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CSoundSource@XACT@@UAGKXZ PROC NEAR		; XACT::CSoundSource::AddRef, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 70   :     _ENTER_EXTERNAL_METHOD("CSoundSource::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 71   :     return CRefCount::AddRef();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?AddRef@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::AddRef
  00017	89 45 f8	 mov	 DWORD PTR $T32131[ebp], eax
  0001a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001d	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00022	8b 45 f8	 mov	 eax, DWORD PTR $T32131[ebp]

; 72   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AddRef@CSoundSource@XACT@@UAGKXZ ENDP			; XACT::CSoundSource::AddRef
XACTENG	ENDS
PUBLIC	?XACTEnterCriticalSection@@YGHXZ		; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::CAutoLock, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   :     m_fLocked = (BOOLEAN)XACTEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?XACTEnterCriticalSection@@YGHXZ ; XACTEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 83   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_XACTCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT
?XACTEnterCriticalSection@@YGHXZ PROC NEAR		; XACTEnterCriticalSection, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L30689

; 49   :     {
; 50   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L30688
$L30689:

; 51   :     }
; 52   : 
; 53   :     EnterCriticalSection(&g_XACTCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 54   : 
; 55   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L30688:

; 56   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?XACTEnterCriticalSection@@YGHXZ ENDP			; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
XACTENG	ENDS
PUBLIC	?XACTLeaveCriticalSection@@YGXXZ		; XACTLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   :     if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L30715

; 88   :     {
; 89   :         XACTLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?XACTLeaveCriticalSection@@YGXXZ ; XACTLeaveCriticalSection
$L30715:

; 90   :     }
; 91   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::~CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT
?XACTLeaveCriticalSection@@YGXXZ PROC NEAR		; XACTLeaveCriticalSection, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :     LeaveCriticalSection(&g_XACTCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 61   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?XACTLeaveCriticalSection@@YGXXZ ENDP			; XACTLeaveCriticalSection
XACTENG	ENDS
PUBLIC	?IsPositional@CSoundSource@XACT@@QAEHXZ		; XACT::CSoundSource::IsPositional
PUBLIC	?Stop@CSoundSource@XACT@@AAEJXZ			; XACT::CSoundSource::Stop
EXTRN	?FreeSoundSource@CEngine@XACT@@IAEXPAVCSoundSource@2@@Z:NEAR ; XACT::CEngine::FreeSoundSource
EXTRN	?FreeSoundSource@CWaveBank@XACT@@QAEXPAVCSoundSource@2@@Z:NEAR ; XACT::CWaveBank::FreeSoundSource
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?Release@CSoundSource@XACT@@UAGKXZ
XACTENG	SEGMENT
tv69 = -16
$T32150 = -12
___AutoLock$ = -8
_dwRefCount$ = -4
_this$ = 8
?Release@CSoundSource@XACT@@UAGKXZ PROC NEAR		; XACT::CSoundSource::Release, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 77   :     _ENTER_EXTERNAL_METHOD("CSoundSource::Release");

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 78   :     DWORD dwRefCount = CRefCount::Release();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?Release@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::Release
  00017	89 45 fc	 mov	 DWORD PTR _dwRefCount$[ebp], eax

; 79   : 
; 80   :     switch(dwRefCount) {

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _dwRefCount$[ebp]
  0001d	89 4d f0	 mov	 DWORD PTR tv69[ebp], ecx
  00020	83 7d f0 01	 cmp	 DWORD PTR tv69[ebp], 1
  00024	74 08		 je	 SHORT $L31864
  00026	83 7d f0 02	 cmp	 DWORD PTR tv69[ebp], 2
  0002a	74 55		 je	 SHORT $L31865
  0002c	eb 7f		 jmp	 SHORT $L31861
$L31864:

; 81   :     case 1:
; 82   : 
; 83   :         //
; 84   :         // return this voice to the engine available buffer list
; 85   :         //
; 86   : 
; 87   :         ASSERT(g_pEngine);

  0002e	6a 57		 push	 87			; 00000057H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@
  00035	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DNMHMJFP@g_pEngine?$AA@
  0003a	33 d2		 xor	 edx, edx
  0003c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  00043	0f 94 c2	 sete	 dl
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 88   :         ASSERT(m_pWaveBankOwner == NULL);

  0004f	6a 58		 push	 88			; 00000058H
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@DDKNOPLC@c?3?2xbox?2private?2windows?2directx?2@
  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@FHBNIDJL@m_pWaveBankOwner?5?$DN?$DN?5NULL?$AA@
  0005b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	33 c9		 xor	 ecx, ecx
  00060	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00064	0f 95 c1	 setne	 cl
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0006d	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 
; 90   :         g_pEngine->FreeSoundSource(this);

  00070	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00073	52		 push	 edx
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  0007a	e8 00 00 00 00	 call	 ?FreeSoundSource@CEngine@XACT@@IAEXPAVCSoundSource@2@@Z ; XACT::CEngine::FreeSoundSource

; 91   :         break;

  0007f	eb 2c		 jmp	 SHORT $L31861
$L31865:

; 92   : 
; 93   : 
; 94   :     case 2:
; 95   : 
; 96   :         //
; 97   :         // stop the voice. this will not cause any blocking any hw
; 98   :         //
; 99   :         
; 100  :         if (!IsPositional())

  00081	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?IsPositional@CSoundSource@XACT@@QAEHXZ ; XACT::CSoundSource::IsPositional
  00089	85 c0		 test	 eax, eax
  0008b	75 08		 jne	 SHORT $L31866

; 101  :         {
; 102  :             Stop();

  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?Stop@CSoundSource@XACT@@AAEJXZ ; XACT::CSoundSource::Stop
$L31866:

; 103  :         }
; 104  : 
; 105  :         //
; 106  :         // if this source has a wavebank owner, return this voice
; 107  :         // to the wavebank available list,since its associated with specific
; 108  :         // hw scatter gather entries
; 109  :         //
; 110  : 
; 111  :         if (m_pWaveBankOwner) {

  00095	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00098	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0009c	74 0f		 je	 SHORT $L31861

; 112  :             m_pWaveBankOwner->FreeSoundSource(this);

  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	51		 push	 ecx
  000a2	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  000a8	e8 00 00 00 00	 call	 ?FreeSoundSource@CWaveBank@XACT@@QAEXPAVCSoundSource@2@@Z ; XACT::CWaveBank::FreeSoundSource
$L31861:

; 113  :         }            
; 114  :         
; 115  :         break;
; 116  :     }
; 117  : 
; 118  :     return dwRefCount;

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _dwRefCount$[ebp]
  000b0	89 45 f4	 mov	 DWORD PTR $T32150[ebp], eax
  000b3	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000b6	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000bb	8b 45 f4	 mov	 eax, DWORD PTR $T32150[ebp]

; 119  : 
; 120  : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
?Release@CSoundSource@XACT@@UAGKXZ ENDP			; XACT::CSoundSource::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT
_this$ = -4
?IsPositional@CSoundSource@XACT@@QAEHXZ PROC NEAR	; XACT::CSoundSource::IsPositional, COMDAT
; _this$ = ecx

; 589  :     {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  :         return (m_HwVoice.dwFlags & DSBCAPS_CTRL3D);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	83 e0 10	 and	 eax, 16			; 00000010H

; 591  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?IsPositional@CSoundSource@XACT@@QAEHXZ ENDP		; XACT::CSoundSource::IsPositional
XACTENG	ENDS
PUBLIC	?Initialize@CSoundSource@XACT@@AAEJXZ		; XACT::CSoundSource::Initialize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?Initialize@CSoundSource@XACT@@AAEJXZ
XACTENG	SEGMENT
_this$ = -8
_hr$ = -4
?Initialize@CSoundSource@XACT@@AAEJXZ PROC NEAR		; XACT::CSoundSource::Initialize, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 128  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 129  : 
; 130  :     DPF_ENTER();
; 131  : 
; 132  :     DPF_LEAVE_HRESULT(hr);
; 133  :     return hr;

  00010	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 134  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Initialize@CSoundSource@XACT@@AAEJXZ ENDP		; XACT::CSoundSource::Initialize
XACTENG	ENDS
PUBLIC	?Pause@IDirectSoundStream@@QAGJK@Z		; IDirectSoundStream::Pause
PUBLIC	?Stop@IDirectSoundBuffer@@QAGJXZ		; IDirectSoundBuffer::Stop
; Function compile flags: /Odt
;	COMDAT ?Stop@CSoundSource@XACT@@AAEJXZ
XACTENG	SEGMENT
_this$ = -16
$T32160 = -12
___AutoLock$ = -8
_hr$ = -4
?Stop@CSoundSource@XACT@@AAEJXZ PROC NEAR		; XACT::CSoundSource::Stop, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 
; 142  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 143  :     //
; 144  :     // this is an internal method but we want to sync with external api calls
; 145  :     //
; 146  : 
; 147  :     ENTER_EXTERNAL_METHOD();

  00010	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 148  : 
; 149  :     DPF_ENTER();
; 150  : 
; 151  :     if (m_HwVoice.pBuffer) {

  00018	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	74 11		 je	 SHORT $L31880

; 152  :         hr = m_HwVoice.pBuffer->Stop();

  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 ?Stop@IDirectSoundBuffer@@QAGJXZ ; IDirectSoundBuffer::Stop
  0002d	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 153  :     } else {

  00030	eb 2c		 jmp	 SHORT $L31881
$L31880:

; 154  : 
; 155  :         hr = m_HwVoice.pStream->Flush();

  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0003e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00040	50		 push	 eax
  00041	ff 51 18	 call	 DWORD PTR [ecx+24]
  00044	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 156  :         if (SUCCEEDED(hr)) {

  00047	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004b	7c 11		 jl	 SHORT $L31881

; 157  :             hr = m_HwVoice.pStream->Pause(DSSTREAMPAUSE_PAUSE);

  0004d	6a 01		 push	 1
  0004f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?Pause@IDirectSoundStream@@QAGJK@Z ; IDirectSoundStream::Pause
  0005b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31881:

; 158  :         }
; 159  : 
; 160  :     }
; 161  :     
; 162  :     return hr;

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00061	89 4d f4	 mov	 DWORD PTR $T32160[ebp], ecx
  00064	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00067	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0006c	8b 45 f4	 mov	 eax, DWORD PTR $T32160[ebp]

; 163  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?Stop@CSoundSource@XACT@@AAEJXZ ENDP			; XACT::CSoundSource::Stop
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_Stop@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Stop@IDirectSoundBuffer@@QAGJXZ
XACTENG	SEGMENT
_this$ = 8
?Stop@IDirectSoundBuffer@@QAGJXZ PROC NEAR		; IDirectSoundBuffer::Stop, COMDAT

; 2072 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2073 :         return IDirectSoundBuffer_Stop(this);

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Stop@4

; 2074 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?Stop@IDirectSoundBuffer@@QAGJXZ ENDP			; IDirectSoundBuffer::Stop
XACTENG	ENDS
EXTRN	_IDirectSoundStream_Pause@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?Pause@IDirectSoundStream@@QAGJK@Z
XACTENG	SEGMENT
_this$ = 8
_dwPause$ = 12
?Pause@IDirectSoundStream@@QAGJK@Z PROC NEAR		; IDirectSoundStream::Pause, COMDAT

; 2367 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2368 :         return IDirectSoundStream_Pause(this, dwPause);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwPause$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_Pause@8

; 2369 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?Pause@IDirectSoundStream@@QAGJK@Z ENDP			; IDirectSoundStream::Pause
XACTENG	ENDS
PUBLIC	?Play@CSoundSource@XACT@@AAEJXZ			; XACT::CSoundSource::Play
PUBLIC	?Play@IDirectSoundBuffer@@QAGJKKK@Z		; IDirectSoundBuffer::Play
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?Play@CSoundSource@XACT@@AAEJXZ
XACTENG	SEGMENT
_this$ = -16
$T32170 = -12
___AutoLock$ = -8
_hr$ = -4
?Play@CSoundSource@XACT@@AAEJXZ PROC NEAR		; XACT::CSoundSource::Play, COMDAT
; _this$ = ecx

; 169  : {    

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 170  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 171  : 
; 172  :     //
; 173  :     // this is an internal method but we want to sync with external api calls
; 174  :     //
; 175  : 
; 176  :     ENTER_EXTERNAL_METHOD();

  00010	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 177  :     DPF_ENTER();
; 178  : 
; 179  :     if (m_HwVoice.pBuffer) {

  00018	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001f	74 15		 je	 SHORT $L31892

; 180  :         hr = m_HwVoice.pBuffer->Play(0,0,0);

  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 ?Play@IDirectSoundBuffer@@QAGJKKK@Z ; IDirectSoundBuffer::Play
  00033	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31892:

; 181  :     } else {
; 182  : 
; 183  :         //
; 184  :         // TODO Implement Streaming Play
; 185  :         //
; 186  : 
; 187  :     }
; 188  : 
; 189  :     return hr;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00039	89 45 f4	 mov	 DWORD PTR $T32170[ebp], eax
  0003c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0003f	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00044	8b 45 f4	 mov	 eax, DWORD PTR $T32170[ebp]

; 190  :     
; 191  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?Play@CSoundSource@XACT@@AAEJXZ ENDP			; XACT::CSoundSource::Play
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_Play@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?Play@IDirectSoundBuffer@@QAGJKKK@Z
XACTENG	SEGMENT
_this$ = 8
_dwReserved1$ = 12
_dwReserved2$ = 16
_dwFlags$ = 20
?Play@IDirectSoundBuffer@@QAGJKKK@Z PROC NEAR		; IDirectSoundBuffer::Play, COMDAT

; 2062 :     {   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2063 :         return IDirectSoundBuffer_Play(this, dwReserved1, dwReserved2, dwFlags);

  00003	8b 45 14	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _dwReserved2$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _dwReserved1$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _IDirectSoundBuffer_Play@16

; 2064 :     }

  00018	5d		 pop	 ebp
  00019	c2 10 00	 ret	 16			; 00000010H
?Play@IDirectSoundBuffer@@QAGJKKK@Z ENDP		; IDirectSoundBuffer::Play
XACTENG	ENDS
PUBLIC	?SetPosition@IDirectSoundStream@@QAGJMMMK@Z	; IDirectSoundStream::SetPosition
PUBLIC	?SetPosition@CSoundSource@XACT@@QAGJMMMK@Z	; XACT::CSoundSource::SetPosition
PUBLIC	?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z	; IDirectSoundBuffer::SetPosition
EXTRN	__fltused:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?SetPosition@CSoundSource@XACT@@QAGJMMMK@Z
XACTENG	SEGMENT
$T32177 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetPosition@CSoundSource@XACT@@QAGJMMMK@Z PROC NEAR	; XACT::CSoundSource::SetPosition, COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 198  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 199  : 
; 200  :     DPF_ENTER();
; 201  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 202  : 
; 203  :     if (m_HwVoice.pBuffer)

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001c	74 21		 je	 SHORT $L31904

; 204  :         hr = m_HwVoice.pBuffer->SetPosition(x,y,z,dwApply);

  0001e	8b 4d 18	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00025	52		 push	 edx
  00026	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z ; IDirectSoundBuffer::SetPosition
  0003a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 205  :     else 

  0003d	eb 1f		 jmp	 SHORT $L31905
$L31904:

; 206  :         hr = m_HwVoice.pStream->SetPosition(x,y,z,dwApply);

  0003f	8b 4d 18	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00046	52		 push	 edx
  00047	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0004e	51		 push	 ecx
  0004f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?SetPosition@IDirectSoundStream@@QAGJMMMK@Z ; IDirectSoundStream::SetPosition
  0005b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31905:

; 207  : 
; 208  :     DPF_LEAVE_HRESULT(hr);
; 209  :     return hr;

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00061	89 4d f4	 mov	 DWORD PTR $T32177[ebp], ecx
  00064	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00067	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0006c	8b 45 f4	 mov	 eax, DWORD PTR $T32177[ebp]

; 210  :  
; 211  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 14 00	 ret	 20			; 00000014H
?SetPosition@CSoundSource@XACT@@QAGJMMMK@Z ENDP		; XACT::CSoundSource::SetPosition
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetPosition@20:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z
XACTENG	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z PROC NEAR	; IDirectSoundBuffer::SetPosition, COMDAT

; 2027 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2028 :         return IDirectSoundBuffer_SetPosition(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetPosition@20

; 2029 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetPosition@IDirectSoundBuffer@@QAGJMMMK@Z ENDP	; IDirectSoundBuffer::SetPosition
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetPosition@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetPosition@IDirectSoundStream@@QAGJMMMK@Z
XACTENG	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetPosition@IDirectSoundStream@@QAGJMMMK@Z PROC NEAR	; IDirectSoundStream::SetPosition, COMDAT

; 2332 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2333 :         return IDirectSoundStream_SetPosition(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundStream_SetPosition@20

; 2334 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetPosition@IDirectSoundStream@@QAGJMMMK@Z ENDP	; IDirectSoundStream::SetPosition
XACTENG	ENDS
PUBLIC	?SetAllParameters@IDirectSoundStream@@QAGJPBU_DS3DBUFFER@@K@Z ; IDirectSoundStream::SetAllParameters
PUBLIC	?SetAllParameters@CSoundSource@XACT@@QAGJPBU_DS3DBUFFER@@K@Z ; XACT::CSoundSource::SetAllParameters
PUBLIC	?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z ; IDirectSoundBuffer::SetAllParameters
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?SetAllParameters@CSoundSource@XACT@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT
$T32188 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pcDs3dBuffer$ = 12
_dwApply$ = 16
?SetAllParameters@CSoundSource@XACT@@QAGJPBU_DS3DBUFFER@@K@Z PROC NEAR ; XACT::CSoundSource::SetAllParameters, COMDAT

; 217  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 218  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 219  : 
; 220  :     DPF_ENTER();
; 221  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 222  : 
; 223  :     if (m_HwVoice.pBuffer)

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001c	74 19		 je	 SHORT $L31915

; 224  :         hr = m_HwVoice.pBuffer->SetAllParameters(pcDs3dBuffer,dwApply);

  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 0c	 mov	 edx, DWORD PTR _pcDs3dBuffer$[ebp]
  00025	52		 push	 edx
  00026	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z ; IDirectSoundBuffer::SetAllParameters
  00032	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 225  :     else 

  00035	eb 17		 jmp	 SHORT $L31916
$L31915:

; 226  :         hr = m_HwVoice.pStream->SetAllParameters(pcDs3dBuffer,dwApply);

  00037	8b 55 10	 mov	 edx, DWORD PTR _dwApply$[ebp]
  0003a	52		 push	 edx
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _pcDs3dBuffer$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?SetAllParameters@IDirectSoundStream@@QAGJPBU_DS3DBUFFER@@K@Z ; IDirectSoundStream::SetAllParameters
  0004b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31916:

; 227  : 
; 228  :     DPF_LEAVE_HRESULT(hr);
; 229  :     return hr;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00051	89 45 f4	 mov	 DWORD PTR $T32188[ebp], eax
  00054	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00057	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0005c	8b 45 f4	 mov	 eax, DWORD PTR $T32188[ebp]

; 230  :  
; 231  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@CSoundSource@XACT@@QAGJPBU_DS3DBUFFER@@K@Z ENDP ; XACT::CSoundSource::SetAllParameters
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetAllParameters@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT
_this$ = 8
_pds3db$ = 12
_dwApply$ = 16
?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z PROC NEAR ; IDirectSoundBuffer::SetAllParameters, COMDAT

; 1992 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1993 :         return IDirectSoundBuffer_SetAllParameters(this, pds3db, dwApply);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetAllParameters@12

; 1994 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z ENDP ; IDirectSoundBuffer::SetAllParameters
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetAllParameters@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetAllParameters@IDirectSoundStream@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT
_this$ = 8
_pds3db$ = 12
_dwApply$ = 16
?SetAllParameters@IDirectSoundStream@@QAGJPBU_DS3DBUFFER@@K@Z PROC NEAR ; IDirectSoundStream::SetAllParameters, COMDAT

; 2297 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2298 :         return IDirectSoundStream_SetAllParameters(this, pds3db, dwApply);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundStream_SetAllParameters@12

; 2299 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@IDirectSoundStream@@QAGJPBU_DS3DBUFFER@@K@Z ENDP ; IDirectSoundStream::SetAllParameters
XACTENG	ENDS
PUBLIC	?SetConeOrientation@IDirectSoundStream@@QAGJMMMK@Z ; IDirectSoundStream::SetConeOrientation
PUBLIC	?SetConeOrientation@CSoundSource@XACT@@QAGJMMMK@Z ; XACT::CSoundSource::SetConeOrientation
PUBLIC	?SetConeOrientation@IDirectSoundBuffer@@QAGJMMMK@Z ; IDirectSoundBuffer::SetConeOrientation
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?SetConeOrientation@CSoundSource@XACT@@QAGJMMMK@Z
XACTENG	SEGMENT
$T32198 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetConeOrientation@CSoundSource@XACT@@QAGJMMMK@Z PROC NEAR ; XACT::CSoundSource::SetConeOrientation, COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 238  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 239  : 
; 240  :     DPF_ENTER();
; 241  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 242  :     if (m_HwVoice.pBuffer)

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001c	74 21		 je	 SHORT $L31928

; 243  :         hr = m_HwVoice.pBuffer->SetConeOrientation(x, y, z, dwApply);

  0001e	8b 4d 18	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00025	52		 push	 edx
  00026	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?SetConeOrientation@IDirectSoundBuffer@@QAGJMMMK@Z ; IDirectSoundBuffer::SetConeOrientation
  0003a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 244  :     else 

  0003d	eb 1f		 jmp	 SHORT $L31929
$L31928:

; 245  :         hr = m_HwVoice.pStream->SetConeOrientation(x, y, z, dwApply);

  0003f	8b 4d 18	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00046	52		 push	 edx
  00047	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0004e	51		 push	 ecx
  0004f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?SetConeOrientation@IDirectSoundStream@@QAGJMMMK@Z ; IDirectSoundStream::SetConeOrientation
  0005b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31929:

; 246  : 
; 247  :     DPF_LEAVE_HRESULT(hr);
; 248  :     return hr;

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00061	89 4d f4	 mov	 DWORD PTR $T32198[ebp], ecx
  00064	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00067	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0006c	8b 45 f4	 mov	 eax, DWORD PTR $T32198[ebp]

; 249  :  
; 250  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 14 00	 ret	 20			; 00000014H
?SetConeOrientation@CSoundSource@XACT@@QAGJMMMK@Z ENDP	; XACT::CSoundSource::SetConeOrientation
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetConeOrientation@20:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetConeOrientation@IDirectSoundBuffer@@QAGJMMMK@Z
XACTENG	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetConeOrientation@IDirectSoundBuffer@@QAGJMMMK@Z PROC NEAR ; IDirectSoundBuffer::SetConeOrientation, COMDAT

; 2002 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2003 :         return IDirectSoundBuffer_SetConeOrientation(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetConeOrientation@20

; 2004 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetConeOrientation@IDirectSoundBuffer@@QAGJMMMK@Z ENDP	; IDirectSoundBuffer::SetConeOrientation
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetConeOrientation@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetConeOrientation@IDirectSoundStream@@QAGJMMMK@Z
XACTENG	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetConeOrientation@IDirectSoundStream@@QAGJMMMK@Z PROC NEAR ; IDirectSoundStream::SetConeOrientation, COMDAT

; 2307 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2308 :         return IDirectSoundStream_SetConeOrientation(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundStream_SetConeOrientation@20

; 2309 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetConeOrientation@IDirectSoundStream@@QAGJMMMK@Z ENDP	; IDirectSoundStream::SetConeOrientation
XACTENG	ENDS
PUBLIC	?SetI3DL2Source@IDirectSoundStream@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; IDirectSoundStream::SetI3DL2Source
PUBLIC	?SetI3DL2Source@CSoundSource@XACT@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; XACT::CSoundSource::SetI3DL2Source
PUBLIC	?SetI3DL2Source@IDirectSoundBuffer@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; IDirectSoundBuffer::SetI3DL2Source
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?SetI3DL2Source@CSoundSource@XACT@@QAGJPBU_DSI3DL2BUFFER@@K@Z
XACTENG	SEGMENT
$T32208 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pds3db$ = 12
_dwApply$ = 16
?SetI3DL2Source@CSoundSource@XACT@@QAGJPBU_DSI3DL2BUFFER@@K@Z PROC NEAR ; XACT::CSoundSource::SetI3DL2Source, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 257  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 258  : 
; 259  :     DPF_ENTER();
; 260  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 261  : 
; 262  :     if (m_HwVoice.pBuffer)

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001c	74 19		 je	 SHORT $L31939

; 263  :         hr = m_HwVoice.pBuffer->SetI3DL2Source(pds3db, dwApply);

  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 0c	 mov	 edx, DWORD PTR _pds3db$[ebp]
  00025	52		 push	 edx
  00026	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?SetI3DL2Source@IDirectSoundBuffer@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; IDirectSoundBuffer::SetI3DL2Source
  00032	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 264  :     else 

  00035	eb 17		 jmp	 SHORT $L31940
$L31939:

; 265  :         hr = m_HwVoice.pStream->SetI3DL2Source(pds3db, dwApply);

  00037	8b 55 10	 mov	 edx, DWORD PTR _dwApply$[ebp]
  0003a	52		 push	 edx
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _pds3db$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?SetI3DL2Source@IDirectSoundStream@@QAGJPBU_DSI3DL2BUFFER@@K@Z ; IDirectSoundStream::SetI3DL2Source
  0004b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31940:

; 266  : 
; 267  :     DPF_LEAVE_HRESULT(hr);
; 268  :     return hr;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00051	89 45 f4	 mov	 DWORD PTR $T32208[ebp], eax
  00054	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00057	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0005c	8b 45 f4	 mov	 eax, DWORD PTR $T32208[ebp]

; 269  :  
; 270  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Source@CSoundSource@XACT@@QAGJPBU_DSI3DL2BUFFER@@K@Z ENDP ; XACT::CSoundSource::SetI3DL2Source
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetI3DL2Source@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetI3DL2Source@IDirectSoundBuffer@@QAGJPBU_DSI3DL2BUFFER@@K@Z
XACTENG	SEGMENT
_this$ = 8
_pds3db$ = 12
_dwApply$ = 16
?SetI3DL2Source@IDirectSoundBuffer@@QAGJPBU_DSI3DL2BUFFER@@K@Z PROC NEAR ; IDirectSoundBuffer::SetI3DL2Source, COMDAT

; 2057 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2058 :         return IDirectSoundBuffer_SetI3DL2Source(this, pds3db, dwApply);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetI3DL2Source@12

; 2059 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Source@IDirectSoundBuffer@@QAGJPBU_DSI3DL2BUFFER@@K@Z ENDP ; IDirectSoundBuffer::SetI3DL2Source
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetI3DL2Source@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetI3DL2Source@IDirectSoundStream@@QAGJPBU_DSI3DL2BUFFER@@K@Z
XACTENG	SEGMENT
_this$ = 8
_pds3db$ = 12
_dwApply$ = 16
?SetI3DL2Source@IDirectSoundStream@@QAGJPBU_DSI3DL2BUFFER@@K@Z PROC NEAR ; IDirectSoundStream::SetI3DL2Source, COMDAT

; 2362 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2363 :         return IDirectSoundStream_SetI3DL2Source(this, pds3db, dwApply);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundStream_SetI3DL2Source@12

; 2364 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetI3DL2Source@IDirectSoundStream@@QAGJPBU_DSI3DL2BUFFER@@K@Z ENDP ; IDirectSoundStream::SetI3DL2Source
XACTENG	ENDS
PUBLIC	?SetVelocity@IDirectSoundStream@@QAGJMMMK@Z	; IDirectSoundStream::SetVelocity
PUBLIC	?SetVelocity@CSoundSource@XACT@@QAGJMMMK@Z	; XACT::CSoundSource::SetVelocity
PUBLIC	?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z	; IDirectSoundBuffer::SetVelocity
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?SetVelocity@CSoundSource@XACT@@QAGJMMMK@Z
XACTENG	SEGMENT
$T32218 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetVelocity@CSoundSource@XACT@@QAGJMMMK@Z PROC NEAR	; XACT::CSoundSource::SetVelocity, COMDAT

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 277  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 278  : 
; 279  :     DPF_ENTER();
; 280  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 281  : 
; 282  :     if (m_HwVoice.pBuffer)

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001c	74 21		 je	 SHORT $L31952

; 283  :         hr = m_HwVoice.pBuffer->SetVelocity(x, y, z, dwApply);

  0001e	8b 4d 18	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00025	52		 push	 edx
  00026	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z ; IDirectSoundBuffer::SetVelocity
  0003a	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 284  :     else 

  0003d	eb 1f		 jmp	 SHORT $L31953
$L31952:

; 285  :         hr = m_HwVoice.pStream->SetVelocity(x, y, z, dwApply);

  0003f	8b 4d 18	 mov	 ecx, DWORD PTR _dwApply$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 14	 mov	 edx, DWORD PTR _z$[ebp]
  00046	52		 push	 edx
  00047	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0004e	51		 push	 ecx
  0004f	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?SetVelocity@IDirectSoundStream@@QAGJMMMK@Z ; IDirectSoundStream::SetVelocity
  0005b	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31953:

; 286  : 
; 287  :     DPF_LEAVE_HRESULT(hr);
; 288  :     return hr;

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00061	89 4d f4	 mov	 DWORD PTR $T32218[ebp], ecx
  00064	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00067	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0006c	8b 45 f4	 mov	 eax, DWORD PTR $T32218[ebp]

; 289  :  
; 290  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@CSoundSource@XACT@@QAGJMMMK@Z ENDP		; XACT::CSoundSource::SetVelocity
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetVelocity@20:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z
XACTENG	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z PROC NEAR	; IDirectSoundBuffer::SetVelocity, COMDAT

; 2032 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 :         return IDirectSoundBuffer_SetVelocity(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetVelocity@20

; 2034 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@IDirectSoundBuffer@@QAGJMMMK@Z ENDP	; IDirectSoundBuffer::SetVelocity
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetVelocity@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetVelocity@IDirectSoundStream@@QAGJMMMK@Z
XACTENG	SEGMENT
_this$ = 8
_x$ = 12
_y$ = 16
_z$ = 20
_dwApply$ = 24
?SetVelocity@IDirectSoundStream@@QAGJMMMK@Z PROC NEAR	; IDirectSoundStream::SetVelocity, COMDAT

; 2337 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2338 :         return IDirectSoundStream_SetVelocity(this, x, y, z, dwApply);

  00003	8b 45 18	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 14	 mov	 ecx, DWORD PTR _z$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _IDirectSoundStream_SetVelocity@20

; 2339 :     }

  0001c	5d		 pop	 ebp
  0001d	c2 14 00	 ret	 20			; 00000014H
?SetVelocity@IDirectSoundStream@@QAGJMMMK@Z ENDP	; IDirectSoundStream::SetVelocity
XACTENG	ENDS
PUBLIC	?SetMixBins@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundStream::SetMixBins
PUBLIC	?SetMixBins@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z ; XACT::CSoundSource::SetMixBins
PUBLIC	?SetMixBins@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundBuffer::SetMixBins
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?SetMixBins@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
$T32228 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBins@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; XACT::CSoundSource::SetMixBins, COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 297  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 298  : 
; 299  :     DPF_ENTER();
; 300  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 301  : 
; 302  :     if (m_HwVoice.pBuffer)

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001c	74 15		 je	 SHORT $L31962

; 303  :         hr = m_HwVoice.pBuffer->SetMixBins(pMixBins);

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?SetMixBins@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundBuffer::SetMixBins
  0002e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 304  :     else 

  00031	eb 13		 jmp	 SHORT $L31963
$L31962:

; 305  :         hr = m_HwVoice.pStream->SetMixBins(pMixBins);

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?SetMixBins@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundStream::SetMixBins
  00043	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31963:

; 306  : 
; 307  :     DPF_LEAVE_HRESULT(hr);
; 308  :     return hr;

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00049	89 4d f4	 mov	 DWORD PTR $T32228[ebp], ecx
  0004c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004f	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00054	8b 45 f4	 mov	 eax, DWORD PTR $T32228[ebp]

; 309  :  
; 310  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?SetMixBins@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z ENDP ; XACT::CSoundSource::SetMixBins
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetMixBins@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetMixBins@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
_this$ = 8
_pMixBins$ = 12
?SetMixBins@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; IDirectSoundBuffer::SetMixBins, COMDAT

; 1982 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1983 :         return IDirectSoundBuffer_SetMixBins(this, pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetMixBins@8

; 1984 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetMixBins@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ENDP ; IDirectSoundBuffer::SetMixBins
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetMixBins@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetMixBins@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
_this$ = 8
_pMixBins$ = 12
?SetMixBins@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; IDirectSoundStream::SetMixBins, COMDAT

; 2287 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2288 :         return IDirectSoundStream_SetMixBins(this, pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetMixBins@8

; 2289 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetMixBins@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ENDP ; IDirectSoundStream::SetMixBins
XACTENG	ENDS
PUBLIC	?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundStream::SetMixBinVolumes
PUBLIC	?SetMixBinVolumes@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z ; XACT::CSoundSource::SetMixBinVolumes
PUBLIC	?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundBuffer::SetMixBinVolumes
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundsource.cpp
;	COMDAT ?SetMixBinVolumes@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
$T32238 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; XACT::CSoundSource::SetMixBinVolumes, COMDAT

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 317  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 318  : 
; 319  :     DPF_ENTER();
; 320  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 321  : 
; 322  :     if (m_HwVoice.pBuffer)

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0001c	74 15		 je	 SHORT $L31972

; 323  :         hr = m_HwVoice.pBuffer->SetMixBinVolumes(pMixBins);

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundBuffer::SetMixBinVolumes
  0002e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 324  :     else 

  00031	eb 13		 jmp	 SHORT $L31973
$L31972:

; 325  :         hr = m_HwVoice.pStream->SetMixBinVolumes(pMixBins);

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _pMixBins$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundStream::SetMixBinVolumes
  00043	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L31973:

; 326  : 
; 327  :     DPF_LEAVE_HRESULT(hr);
; 328  :     return hr;

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  00049	89 4d f4	 mov	 DWORD PTR $T32238[ebp], ecx
  0004c	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0004f	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00054	8b 45 f4	 mov	 eax, DWORD PTR $T32238[ebp]

; 329  :  
; 330  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?SetMixBinVolumes@CSoundSource@XACT@@QAGJPBU_DSMIXBINS@@@Z ENDP ; XACT::CSoundSource::SetMixBinVolumes
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetMixBinVolumes@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; IDirectSoundBuffer::SetMixBinVolumes, COMDAT

; 1987 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 :         return IDirectSoundBuffer_SetMixBinVolumes(this, pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetMixBinVolumes@8

; 1989 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ENDP ; IDirectSoundBuffer::SetMixBinVolumes
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetMixBinVolumes@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; IDirectSoundStream::SetMixBinVolumes, COMDAT

; 2292 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2293 :         return IDirectSoundStream_SetMixBinVolumes(this, pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetMixBinVolumes@8

; 2294 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ENDP ; IDirectSoundStream::SetMixBinVolumes
XACTENG	ENDS
END
