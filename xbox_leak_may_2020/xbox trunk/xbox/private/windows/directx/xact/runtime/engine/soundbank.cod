; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\soundbank.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XACTENG_URW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_URW	ENDS
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_09DNMHMJFP@g_pEngine?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@PBODKLOD@CSoundBank?3?3Initialize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@LAJJOJOL@Invalid?5Soundbank?5header?5?$CI0x?$CFx?$CJ?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CN@LGKKHGCM@CSoundBank?3?3GetSoundCueIndexFrom@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BM@FBDOOMIO@No?5lpFriendlyName?5specified?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@IMCPMFJ@No?5pdwCueIndex?5supplied?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FKMLGALI@Cue?5friendly?5name?5?$CFs?5not?5found?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CK@HMBDIOCI@Cue?5index?5is?5not?5valid?5for?5this?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DO@MJEPCMFE@SoundSource?5type?5?$CI0x?$CFx?$CJ?5does?5not@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@OBIKNDOA@XACT_FLAG_SOUNDCUE_AUTORELEASE?5m@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EB@IIFLJJPK@No?5need?5to?5supply?5ppCue?5if?5XACT_@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0ED@FDJKGBOJ@You?5cant?5supply?5a?5valid?5cue?5inst@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EA@JDJCFLLF@You?5cant?5supply?5both?5a?5valid?5cue@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@JMDEAIME@XACT_FLAG_SOUNDCUE_AUTORELEASE?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@LBFGCMJE@CSoundBank?3?3ProcessRuntimeEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DF@BHGNGEON@?$CI0x?$CFx?$CJGot?5stop?5event?5without?5eve@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_08BAFMHLII@pContext?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RW	ENDS
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _IsEqualGUID@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _==@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_AddRef@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_Release@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_BeginScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_EndScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPalette_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _sqrtf@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?MoveEntryTailList@XACT@@YGPAU_LIST_ENTRY@@PAU2@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsValidCue@CSoundBank@XACT@@AAEHK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsValidHeader@CSoundBank@XACT@@AAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsValidSoundSourceForSound@CSoundBank@XACT@@AAEHKK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetFlags@CSoundSource@XACT@@QAEKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CSoundBank@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCSoundBank@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CSoundBank@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CSoundBank@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CSoundBank@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Initialize@CSoundBank@XACT@@AAEJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetSoundCueIndexFromFriendlyName@CSoundBank@XACT@@QAGJPBDPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Play@CSoundBank@XACT@@QAGJKPAUIXACTSoundSource@@KPAPAUIXACTSoundCue@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0_DS3DBUFFER@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Stop@CSoundBank@XACT@@QAGJKKPAUIXACTSoundCue@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RemoveFromList@CSoundBank@XACT@@AAEXPAVCSoundCue@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_7CRefCount@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSoundBank@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XACTENG_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
XACTENG_RD	ENDS
PUBLIC	??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_09DNMHMJFP@g_pEngine?$AA@			; `string'
PUBLIC	??0CSoundBank@XACT@@QAE@XZ			; XACT::CSoundBank::CSoundBank
PUBLIC	?AddRef@CSoundBank@XACT@@UAGKXZ			; XACT::CSoundBank::AddRef
PUBLIC	?Release@CSoundBank@XACT@@UAGKXZ		; XACT::CSoundBank::Release
PUBLIC	??_7CSoundBank@XACT@@6B@			; XACT::CSoundBank::`vftable'
PUBLIC	??_GCSoundBank@XACT@@UAEPAXI@Z			; XACT::CSoundBank::`scalar deleting destructor'
PUBLIC	??0CRefCount@XACT@@QAE@K@Z			; XACT::CRefCount::CRefCount
EXTRN	_g_pEngine:DWORD
EXTRN	?AddRef@CEngine@XACT@@QAGKXZ:NEAR		; XACT::CEngine::AddRef
EXTRN	??_ECSoundBank@XACT@@UAEPAXI@Z:NEAR		; XACT::CSoundBank::`vector deleting destructor'
EXTRN	?DwDbgAssert@XACT@@YAXHPBD0I@Z:NEAR		; XACT::DwDbgAssert
;	COMDAT ??_7CSoundBank@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundbank.cpp
CONST	SEGMENT
??_7CSoundBank@XACT@@6B@ DD FLAT:??_ECSoundBank@XACT@@UAEPAXI@Z ; XACT::CSoundBank::`vftable'
	DD	FLAT:?AddRef@CSoundBank@XACT@@UAGKXZ
	DD	FLAT:?Release@CSoundBank@XACT@@UAGKXZ
CONST	ENDS
;	COMDAT ??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\engine\soundbank.cpp', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_09DNMHMJFP@g_pEngine?$AA@
XACTENG_RD	SEGMENT
??_C@_09DNMHMJFP@g_pEngine?$AA@ DB 'g_pEngine', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??0CSoundBank@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CSoundBank@XACT@@QAE@XZ PROC NEAR			; XACT::CSoundBank::CSoundBank, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@XACT@@QAE@K@Z ; XACT::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSoundBank@XACT@@6B@

; 29   :     DPF_ENTER();
; 30   : 
; 31   :     InitializeListHead(&m_lstCues);

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0002f	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 32   :     InitializeListHead(&m_ListEntry);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 c0 14	 add	 eax, 20			; 00000014H
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00047	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 33   : 
; 34   :     ASSERT(g_pEngine);

  0004a	6a 22		 push	 34			; 00000022H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DNMHMJFP@g_pEngine?$AA@
  00056	33 d2		 xor	 edx, edx
  00058	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  0005f	0f 94 c2	 sete	 dl
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00068	83 c4 10	 add	 esp, 16			; 00000010H

; 35   :     g_pEngine->AddRef();

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pEngine
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?AddRef@CEngine@XACT@@QAGKXZ ; XACT::CEngine::AddRef

; 36   : 
; 37   :     DPF_LEAVE_VOID();
; 38   : }

  00076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
??0CSoundBank@XACT@@QAE@XZ ENDP				; XACT::CSoundBank::CSoundBank
XACTENG	ENDS
PUBLIC	?AddRef@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::AddRef
PUBLIC	?Release@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::Release
PUBLIC	??_7CRefCount@XACT@@6B@				; XACT::CRefCount::`vftable'
PUBLIC	??_GCRefCount@XACT@@UAEPAXI@Z			; XACT::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@XACT@@UAEPAXI@Z:NEAR		; XACT::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\common\refcount.h
CONST	SEGMENT
??_7CRefCount@XACT@@6B@ DD FLAT:??_ECRefCount@XACT@@UAEPAXI@Z ; XACT::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@XACT@@UAGKXZ
	DD	FLAT:?Release@CRefCount@XACT@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@XACT@@QAE@K@Z PROC NEAR			; XACT::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 36   : }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@XACT@@QAE@K@Z ENDP				; XACT::CRefCount::CRefCount
XACTENG	ENDS
PUBLIC	??1CRefCount@XACT@@UAE@XZ			; XACT::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@XACT@@UAEPAXI@Z PROC NEAR			; XACT::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L29682
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L29682:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@XACT@@UAEPAXI@Z ENDP			; XACT::CRefCount::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\refcount.h', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CRefCount@XACT@@UAE@XZ PROC NEAR			; XACT::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@

; 40   :     ASSERT(!m_dwRefCount);

  00010	6a 28		 push	 40			; 00000028H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 41   : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@XACT@@UAE@XZ ENDP				; XACT::CRefCount::~CRefCount
XACTENG	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
_this$ = 8
?AddRef@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::AddRef, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   :     ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2d		 push	 45			; 0000002dH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 46   :     return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 47   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::AddRef
XACTENG	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
tv84 = -12
$T32198 = -8
$T32197 = -4
_this$ = 8
?Release@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::Release, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 51   :     ASSERT(m_dwRefCount);

  00006	6a 33		 push	 51			; 00000033H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 52   : 
; 53   :     if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L29699

; 54   :     {
; 55   :         if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L29699

; 56   :         {
; 57   :             delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T32198[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T32198[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T32197[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T32197[ebp], 0
  00058	74 11		 je	 SHORT $L32199
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T32197[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T32197[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L32200
$L32199:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L32200:

; 58   :             return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L29697
$L29699:

; 59   :         }
; 60   :     }
; 61   : 
; 62   :     return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L29697:

; 63   : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::Release
XACTENG	ENDS
EXTRN	_XactMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 99   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  :     using namespace XACT;
; 101  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 102  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
XACTENG	ENDS
PUBLIC	??1CSoundBank@XACT@@UAE@XZ			; XACT::CSoundBank::~CSoundBank
; Function compile flags: /Odt
;	COMDAT ??_GCSoundBank@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSoundBank@XACT@@UAEPAXI@Z PROC NEAR		; XACT::CSoundBank::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSoundBank@XACT@@UAE@XZ ; XACT::CSoundBank::~CSoundBank
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L31840
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L31840:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSoundBank@XACT@@UAEPAXI@Z ENDP			; XACT::CSoundBank::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundBank::GetNotificationContext
EXTRN	?Release@CEngine@XACT@@QAGKXZ:NEAR		; XACT::CEngine::Release
EXTRN	?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z:NEAR ; XACT::CEngine::GetCueNotificationContext
EXTRN	?Stop@CSoundCue@XACT@@QAGJK@Z:NEAR		; XACT::CSoundCue::Stop
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundbank.cpp
;	COMDAT ??1CSoundBank@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -32
$T32210 = -28
_j$31860 = -24
_i$31856 = -20
_pContext$ = -16
_pCue$ = -12
_pEntry$ = -8
_pCueContext$ = -4
??1CSoundBank@XACT@@UAE@XZ PROC NEAR			; XACT::CSoundBank::~CSoundBank, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSoundBank@XACT@@6B@

; 48   :     PLIST_ENTRY pEntry;
; 49   :     CSoundCue *pCue;
; 50   : 
; 51   :     DPF_ENTER();
; 52   : 
; 53   :     ASSERT(g_pEngine);

  00012	6a 35		 push	 53			; 00000035H
  00014	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DNMHMJFP@g_pEngine?$AA@
  0001e	33 c9		 xor	 ecx, ecx
  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  00027	0f 94 c1	 sete	 cl
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 54   :     g_pEngine->Release();

  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pEngine
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?Release@CEngine@XACT@@QAGKXZ ; XACT::CEngine::Release

; 55   : 
; 56   :     //
; 57   :     // if we still have cues around, delete them here
; 58   :     //
; 59   : 
; 60   :     pEntry = m_lstCues.Flink;

  0003f	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00045	89 4d f8	 mov	 DWORD PTR _pEntry$[ebp], ecx
$L31848:

; 61   :     while (pEntry != &m_lstCues) 

  00048	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	83 c2 1c	 add	 edx, 28			; 0000001cH
  0004e	39 55 f8	 cmp	 DWORD PTR _pEntry$[ebp], edx
  00051	74 21		 je	 SHORT $L31849

; 62   :     {
; 63   :         pCue = CONTAINING_RECORD(pEntry,CSoundCue,m_ListEntry);        

  00053	8b 45 f8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00056	83 e8 10	 sub	 eax, 16			; 00000010H
  00059	89 45 f4	 mov	 DWORD PTR _pCue$[ebp], eax

; 64   :         pEntry = pEntry->Flink;        

  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	89 55 f8	 mov	 DWORD PTR _pEntry$[ebp], edx

; 65   :         
; 66   :         pCue->Stop(XACT_FLAG_SOUNDCUE_SYNCHRONOUS);

  00064	68 00 00 00 10	 push	 268435456		; 10000000H
  00069	8b 45 f4	 mov	 eax, DWORD PTR _pCue$[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?Stop@CSoundCue@XACT@@QAGJK@Z ; XACT::CSoundCue::Stop

; 67   :         
; 68   :     }

  00072	eb d4		 jmp	 SHORT $L31848
$L31849:

; 69   : 
; 70   :     //
; 71   :     // remove any registered cue notifications
; 72   :     //
; 73   : 
; 74   :     PCUE_INDEX_NOTIFICATION_CONTEXT pCueContext;
; 75   :     PNOTIFICATION_CONTEXT pContext;
; 76   :     
; 77   :     for (DWORD i=0;i<eXACTNotification_Max;i++) {

  00074	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$31856[ebp], 0
  0007b	eb 09		 jmp	 SHORT $L31857
$L31858:
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _i$31856[ebp]
  00080	83 c1 01	 add	 ecx, 1
  00083	89 4d ec	 mov	 DWORD PTR _i$31856[ebp], ecx
$L31857:
  00086	83 7d ec 03	 cmp	 DWORD PTR _i$31856[ebp], 3
  0008a	73 6e		 jae	 SHORT $L31844

; 78   :         
; 79   :         pContext = GetNotificationContext(i);

  0008c	8b 55 ec	 mov	 edx, DWORD PTR _i$31856[ebp]
  0008f	52		 push	 edx
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundBank::GetNotificationContext
  00098	89 45 f0	 mov	 DWORD PTR _pContext$[ebp], eax

; 80   : 
; 81   :         for (DWORD j = 0; j < m_pFileHeader->dwCueEntryCount; j++) {

  0009b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _j$31860[ebp], 0
  000a2	eb 09		 jmp	 SHORT $L31861
$L31862:
  000a4	8b 45 e8	 mov	 eax, DWORD PTR _j$31860[ebp]
  000a7	83 c0 01	 add	 eax, 1
  000aa	89 45 e8	 mov	 DWORD PTR _j$31860[ebp], eax
$L31861:
  000ad	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b3	8b 45 e8	 mov	 eax, DWORD PTR _j$31860[ebp]
  000b6	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  000b9	73 3d		 jae	 SHORT $L31863

; 82   :             
; 83   :             pCueContext = g_pEngine->GetCueNotificationContext(pContext,j);

  000bb	8b 4d e8	 mov	 ecx, DWORD PTR _j$31860[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 f0	 mov	 edx, DWORD PTR _pContext$[ebp]
  000c2	52		 push	 edx
  000c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  000c9	e8 00 00 00 00	 call	 ?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CEngine::GetCueNotificationContext
  000ce	89 45 fc	 mov	 DWORD PTR _pCueContext$[ebp], eax

; 84   :             if (pCueContext) {

  000d1	83 7d fc 00	 cmp	 DWORD PTR _pCueContext$[ebp], 0
  000d5	74 1f		 je	 SHORT $L31864

; 85   :                 DELETE(pCueContext);

  000d7	83 7d fc 00	 cmp	 DWORD PTR _pCueContext$[ebp], 0
  000db	74 19		 je	 SHORT $L31864
  000dd	8b 45 fc	 mov	 eax, DWORD PTR _pCueContext$[ebp]
  000e0	89 45 e4	 mov	 DWORD PTR $T32210[ebp], eax
  000e3	8b 4d e4	 mov	 ecx, DWORD PTR $T32210[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ec	83 c4 04	 add	 esp, 4
  000ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCueContext$[ebp], 0
$L31864:

; 86   :             }
; 87   : 
; 88   :         }

  000f6	eb ac		 jmp	 SHORT $L31862
$L31863:

; 89   : 
; 90   :     }

  000f8	eb 83		 jmp	 SHORT $L31858
$L31844:

; 91   : 
; 92   :     DPF_LEAVE_VOID();
; 93   : }

  000fa	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
??1CSoundBank@XACT@@UAE@XZ ENDP				; XACT::CSoundBank::~CSoundBank
XACTENG	ENDS
PUBLIC	??0CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::CAutoLock
PUBLIC	??1CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::~CAutoLock
; Function compile flags: /Odt
;	COMDAT ?AddRef@CSoundBank@XACT@@UAGKXZ
XACTENG	SEGMENT
$T32214 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CSoundBank@XACT@@UAGKXZ PROC NEAR		; XACT::CSoundBank::AddRef, COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 97   :     _ENTER_EXTERNAL_METHOD("CSoundBank::AddRef");    

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 98   :     return CRefCount::AddRef();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?AddRef@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::AddRef
  00017	89 45 f8	 mov	 DWORD PTR $T32214[ebp], eax
  0001a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001d	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00022	8b 45 f8	 mov	 eax, DWORD PTR $T32214[ebp]

; 99   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AddRef@CSoundBank@XACT@@UAGKXZ ENDP			; XACT::CSoundBank::AddRef
XACTENG	ENDS
PUBLIC	?XACTEnterCriticalSection@@YGHXZ		; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::CAutoLock, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   :     m_fLocked = (BOOLEAN)XACTEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?XACTEnterCriticalSection@@YGHXZ ; XACTEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 83   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_XACTCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT
?XACTEnterCriticalSection@@YGHXZ PROC NEAR		; XACTEnterCriticalSection, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L30689

; 49   :     {
; 50   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L30688
$L30689:

; 51   :     }
; 52   : 
; 53   :     EnterCriticalSection(&g_XACTCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 54   : 
; 55   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L30688:

; 56   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?XACTEnterCriticalSection@@YGHXZ ENDP			; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
XACTENG	ENDS
PUBLIC	?XACTLeaveCriticalSection@@YGXXZ		; XACTLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   :     if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L30715

; 88   :     {
; 89   :         XACTLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?XACTLeaveCriticalSection@@YGXXZ ; XACTLeaveCriticalSection
$L30715:

; 90   :     }
; 91   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::~CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT
?XACTLeaveCriticalSection@@YGXXZ PROC NEAR		; XACTLeaveCriticalSection, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :     LeaveCriticalSection(&g_XACTCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 61   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?XACTLeaveCriticalSection@@YGXXZ ENDP			; XACTLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundbank.cpp
XACTENG	ENDS
;	COMDAT ?Release@CSoundBank@XACT@@UAGKXZ
XACTENG	SEGMENT
$T32233 = -8
___AutoLock$ = -4
_this$ = 8
?Release@CSoundBank@XACT@@UAGKXZ PROC NEAR		; XACT::CSoundBank::Release, COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 104  :     _ENTER_EXTERNAL_METHOD("CSoundBank::Release");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 105  :     return CRefCount::Release();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?Release@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::Release
  00017	89 45 f8	 mov	 DWORD PTR $T32233[ebp], eax
  0001a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001d	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00022	8b 45 f8	 mov	 eax, DWORD PTR $T32233[ebp]

; 106  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Release@CSoundBank@XACT@@UAGKXZ ENDP			; XACT::CSoundBank::Release
XACTENG	ENDS
PUBLIC	??_C@_0BH@PBODKLOD@CSoundBank?3?3Initialize?$AA@ ; `string'
PUBLIC	??_C@_0CA@LAJJOJOL@Invalid?5Soundbank?5header?5?$CI0x?$CFx?$CJ?$AA@ ; `string'
PUBLIC	?Initialize@CSoundBank@XACT@@AAEJPAXK@Z		; XACT::CSoundBank::Initialize
PUBLIC	?IsValidHeader@CSoundBank@XACT@@AAEHXZ		; XACT::CSoundBank::IsValidHeader
PUBLIC	??_C@_07NDMLHGOG@XACTENG?$AA@			; `string'
EXTRN	?DwDbgSetContext@XACT@@YAXKKPBDI00@Z:NEAR	; XACT::DwDbgSetContext
EXTRN	?DwDbgPrint@XACT@@YAXPBDZZ:NEAR			; XACT::DwDbgPrint
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT
??_C@_07NDMLHGOG@XACTENG?$AA@ DB 'XACTENG', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@PBODKLOD@CSoundBank?3?3Initialize?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@PBODKLOD@CSoundBank?3?3Initialize?$AA@ DB 'CSoundBank::Initiali'
	DB	'ze', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@LAJJOJOL@Invalid?5Soundbank?5header?5?$CI0x?$CFx?$CJ?$AA@
XACTENG_RD	SEGMENT
??_C@_0CA@LAJJOJOL@Invalid?5Soundbank?5header?5?$CI0x?$CFx?$CJ?$AA@ DB 'I'
	DB	'nvalid Soundbank header (0x%x)', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Initialize@CSoundBank@XACT@@AAEJPAXK@Z
XACTENG	SEGMENT
_this$ = -8
_hr$ = -4
_pvBuffer$ = 8
_dwSize$ = 12
?Initialize@CSoundBank@XACT@@AAEJPAXK@Z PROC NEAR	; XACT::CSoundBank::Initialize, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 113  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 114  : 
; 115  :     DPF_ENTER();
; 116  : 
; 117  :     m_pDataBuffer = pvBuffer;

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  00016	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 118  :     m_dwDataSize = dwSize;

  00019	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0001f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 119  : 
; 120  :     m_pFileHeader = (PXACT_SOUNDBANK_FILE_HEADER)m_pDataBuffer;

  00022	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00028	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0002b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 121  : 
; 122  : #ifdef VALIDATE_PARAMETERS
; 123  :     if (!IsValidHeader()) {

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?IsValidHeader@CSoundBank@XACT@@AAEHXZ ; XACT::CSoundBank::IsValidHeader
  00036	85 c0		 test	 eax, eax
  00038	75 2e		 jne	 SHORT $L31887

; 124  :         DPF_ERROR("Invalid Soundbank header (0x%x)",pvBuffer);

  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@PBODKLOD@CSoundBank?3?3Initialize?$AA@
  00044	6a 7c		 push	 124			; 0000007cH
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  0004b	6a 01		 push	 1
  0004d	6a 09		 push	 9
  0004f	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00054	83 c4 18	 add	 esp, 24			; 00000018H
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  0005a	51		 push	 ecx
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@LAJJOJOL@Invalid?5Soundbank?5header?5?$CI0x?$CFx?$CJ?$AA@
  00060	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00065	83 c4 08	 add	 esp, 8
$L31887:

; 125  :     }
; 126  : #endif
; 127  : 
; 128  :     DPF_LEAVE_HRESULT(hr);
; 129  :     return hr;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 130  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?Initialize@CSoundBank@XACT@@AAEJPAXK@Z ENDP		; XACT::CSoundBank::Initialize
XACTENG	ENDS
PUBLIC	??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@ ; `string'
PUBLIC	??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@ ; `string'
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG_RD	SEGMENT
??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\inc\xacti.h', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
XACTENG_RD	SEGMENT
??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@ DB 'Invalid soun'
	DB	'dbank signature in header', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
XACTENG_RD	SEGMENT
??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@ DB 'I'
	DB	'nvalid version (%d) in header. Current %d', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?IsValidHeader@CSoundBank@XACT@@AAEHXZ
XACTENG	SEGMENT
_this$ = -4
?IsValidHeader@CSoundBank@XACT@@AAEHXZ PROC NEAR	; XACT::CSoundBank::IsValidHeader, COMDAT
; _this$ = ecx

; 401  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 402  :         
; 403  :         if (((DWORD)XACT_SOUNDBANK_HEADER_SIGNATURE) != m_pFileHeader->dwSignature) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	81 39 53 44 42
	4b		 cmp	 DWORD PTR [ecx], 1262634067 ; 4b424453H
  00013	74 2e		 je	 SHORT $L31005

; 404  :             DPF_ERROR("Invalid soundbank signature in header");

  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0001a	6a 00		 push	 0
  0001c	68 94 01 00 00	 push	 404			; 00000194H
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
  00026	6a 01		 push	 1
  00028	6a 09		 push	 9
  0002a	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0002f	83 c4 18	 add	 esp, 24			; 00000018H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
  00037	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0003c	83 c4 04	 add	 esp, 4

; 405  :             return FALSE;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 4b		 jmp	 SHORT $L31003
$L31005:

; 406  :         }
; 407  : 
; 408  :         if (XACT_SOUNDBANK_HEADER_VERSION != m_pFileHeader->dwVersion) {

  00043	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0004d	74 3a		 je	 SHORT $L31009

; 409  : 
; 410  :             DPF_ERROR("Invalid version (%d) in header. Current %d",m_pFileHeader->dwVersion, XACT_SOUNDBANK_HEADER_VERSION);

  0004f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00054	6a 00		 push	 0
  00056	68 9a 01 00 00	 push	 410			; 0000019aH
  0005b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
  00060	6a 01		 push	 1
  00062	6a 09		 push	 9
  00064	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00069	83 c4 18	 add	 esp, 24			; 00000018H
  0006c	6a 01		 push	 1
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00074	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
  0007d	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 411  :             return FALSE;

  00085	33 c0		 xor	 eax, eax
  00087	eb 05		 jmp	 SHORT $L31003
$L31009:

; 412  : 
; 413  :         }
; 414  : 
; 415  :         return TRUE;

  00089	b8 01 00 00 00	 mov	 eax, 1
$L31003:

; 416  :     }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?IsValidHeader@CSoundBank@XACT@@AAEHXZ ENDP		; XACT::CSoundBank::IsValidHeader
XACTENG	ENDS
PUBLIC	??_C@_0CN@LGKKHGCM@CSoundBank?3?3GetSoundCueIndexFrom@ ; `string'
PUBLIC	??_C@_0BM@FBDOOMIO@No?5lpFriendlyName?5specified?$AA@ ; `string'
PUBLIC	??_C@_0BI@IMCPMFJ@No?5pdwCueIndex?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0DP@FKMLGALI@Cue?5friendly?5name?5?$CFs?5not?5found?5i@ ; `string'
PUBLIC	?GetSoundCueIndexFromFriendlyName@CSoundBank@XACT@@QAGJPBDPAK@Z ; XACT::CSoundBank::GetSoundCueIndexFromFriendlyName
PUBLIC	?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z	; XACT::CSoundBank::GetCueFriendlyName
EXTRN	_strncmp:NEAR
;	COMDAT ??_C@_0CN@LGKKHGCM@CSoundBank?3?3GetSoundCueIndexFrom@
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundbank.cpp
XACTENG_RD	SEGMENT
??_C@_0CN@LGKKHGCM@CSoundBank?3?3GetSoundCueIndexFrom@ DB 'CSoundBank::Ge'
	DB	'tSoundCueIndexFromFriendlyName', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BM@FBDOOMIO@No?5lpFriendlyName?5specified?$AA@
XACTENG_RD	SEGMENT
??_C@_0BM@FBDOOMIO@No?5lpFriendlyName?5specified?$AA@ DB 'No lpFriendlyNa'
	DB	'me specified', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@IMCPMFJ@No?5pdwCueIndex?5supplied?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@IMCPMFJ@No?5pdwCueIndex?5supplied?$AA@ DB 'No pdwCueIndex suppl'
	DB	'ied', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FKMLGALI@Cue?5friendly?5name?5?$CFs?5not?5found?5i@
XACTENG_RD	SEGMENT
??_C@_0DP@FKMLGALI@Cue?5friendly?5name?5?$CFs?5not?5found?5i@ DB 'Cue fri'
	DB	'endly name %s not found in cue table for soundbank 0x%x', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?GetSoundCueIndexFromFriendlyName@CSoundBank@XACT@@QAGJPBDPAK@Z
XACTENG	SEGMENT
$T32243 = -16
_i$31903 = -12
___AutoLock$ = -8
_hr$ = -4
_this$ = 8
_lpFriendlyName$ = 12
_pdwCueIndex$ = 16
?GetSoundCueIndexFromFriendlyName@CSoundBank@XACT@@QAGJPBDPAK@Z PROC NEAR ; XACT::CSoundBank::GetSoundCueIndexFromFriendlyName, COMDAT

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 137  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 138  : 
; 139  :     DPF_ENTER();
; 140  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 141  : 
; 142  : #ifdef VALIDATE_PARAMETERS
; 143  : 
; 144  :     if(!lpFriendlyName)

  00015	83 7d 0c 00	 cmp	 DWORD PTR _lpFriendlyName$[ebp], 0
  00019	75 2d		 jne	 SHORT $L31898

; 145  :     {
; 146  :         DPF_ERROR("No lpFriendlyName specified");

  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@LGKKHGCM@CSoundBank?3?3GetSoundCueIndexFrom@
  00025	68 92 00 00 00	 push	 146			; 00000092H
  0002a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  0002f	6a 01		 push	 1
  00031	6a 09		 push	 9
  00033	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@FBDOOMIO@No?5lpFriendlyName?5specified?$AA@
  00040	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00045	83 c4 04	 add	 esp, 4
$L31898:

; 147  :     }
; 148  : 
; 149  :     if(!pdwCueIndex)

  00048	83 7d 10 00	 cmp	 DWORD PTR _pdwCueIndex$[ebp], 0
  0004c	75 2d		 jne	 SHORT $L31901

; 150  :     {
; 151  :         DPF_ERROR("No pdwCueIndex supplied");

  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@LGKKHGCM@CSoundBank?3?3GetSoundCueIndexFrom@
  00058	68 97 00 00 00	 push	 151			; 00000097H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  00062	6a 01		 push	 1
  00064	6a 09		 push	 9
  00066	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0006b	83 c4 18	 add	 esp, 24			; 00000018H
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@IMCPMFJ@No?5pdwCueIndex?5supplied?$AA@
  00073	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00078	83 c4 04	 add	 esp, 4
$L31901:

; 152  :     }
; 153  : 
; 154  : #endif // VALIDATE_PARAMETERS
; 155  : 
; 156  :     //
; 157  :     // search for matching friendly name among cues
; 158  :     // this is not done super efficiently since we dont expect this function
; 159  :     // to be used on retail builds
; 160  :     // caller should use hardcoded CUE index 
; 161  :     //
; 162  : 
; 163  :     *pdwCueIndex = -1;

  0007b	8b 45 10	 mov	 eax, DWORD PTR _pdwCueIndex$[ebp]
  0007e	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 164  : 
; 165  :     for (DWORD i= 0;i < m_pFileHeader->dwCueEntryCount; i++) 

  00084	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$31903[ebp], 0
  0008b	eb 09		 jmp	 SHORT $L31904
$L31905:
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR _i$31903[ebp]
  00090	83 c1 01	 add	 ecx, 1
  00093	89 4d f4	 mov	 DWORD PTR _i$31903[ebp], ecx
$L31904:
  00096	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR _i$31903[ebp]
  0009f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a2	73 2b		 jae	 SHORT $L31906

; 166  :     {
; 167  : 
; 168  :         if (!strncmp(lpFriendlyName,
; 169  :             GetCueFriendlyName(i),
; 170  :             XACT_SOUNDBANK_CUE_FRIENDLYNAME_LENGTH)) {

  000a4	6a 10		 push	 16			; 00000010H
  000a6	8b 55 f4	 mov	 edx, DWORD PTR _i$31903[ebp]
  000a9	52		 push	 edx
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z ; XACT::CSoundBank::GetCueFriendlyName
  000b2	50		 push	 eax
  000b3	8b 45 0c	 mov	 eax, DWORD PTR _lpFriendlyName$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _strncmp
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bf	85 c0		 test	 eax, eax
  000c1	75 0a		 jne	 SHORT $L31907

; 171  : 
; 172  :             *pdwCueIndex = i;

  000c3	8b 4d 10	 mov	 ecx, DWORD PTR _pdwCueIndex$[ebp]
  000c6	8b 55 f4	 mov	 edx, DWORD PTR _i$31903[ebp]
  000c9	89 11		 mov	 DWORD PTR [ecx], edx

; 173  :             break;

  000cb	eb 02		 jmp	 SHORT $L31906
$L31907:

; 174  :         }
; 175  : 
; 176  :     }

  000cd	eb be		 jmp	 SHORT $L31905
$L31906:

; 177  : 
; 178  :     if (*pdwCueIndex == -1) {

  000cf	8b 45 10	 mov	 eax, DWORD PTR _pdwCueIndex$[ebp]
  000d2	83 38 ff	 cmp	 DWORD PTR [eax], -1
  000d5	75 3c		 jne	 SHORT $L31908

; 179  :         DPF_WARNING("Cue friendly name %s not found in cue table for soundbank 0x%x",lpFriendlyName,this);

  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@LGKKHGCM@CSoundBank?3?3GetSoundCueIndexFrom@
  000e1	68 b3 00 00 00	 push	 179			; 000000b3H
  000e6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  000eb	6a 03		 push	 3
  000ed	6a 09		 push	 9
  000ef	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000f4	83 c4 18	 add	 esp, 24			; 00000018H
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	51		 push	 ecx
  000fb	8b 55 0c	 mov	 edx, DWORD PTR _lpFriendlyName$[ebp]
  000fe	52		 push	 edx
  000ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FKMLGALI@Cue?5friendly?5name?5?$CFs?5not?5found?5i@
  00104	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH

; 180  :         hr = E_FAIL;

  0010c	c7 45 fc 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31908:

; 181  :     }
; 182  : 
; 183  :     return hr;

  00113	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]
  00116	89 45 f0	 mov	 DWORD PTR $T32243[ebp], eax
  00119	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0011c	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00121	8b 45 f0	 mov	 eax, DWORD PTR $T32243[ebp]

; 184  : }

  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 0c 00	 ret	 12			; 0000000cH
?GetSoundCueIndexFromFriendlyName@CSoundBank@XACT@@QAGJPBDPAK@Z ENDP ; XACT::CSoundBank::GetSoundCueIndexFromFriendlyName
XACTENG	ENDS
PUBLIC	?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ; XACT::CSoundBank::GetCueTable
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT
_this$ = -8
_pCueTable$ = -4
_dwCueIndex$ = 8
?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z PROC NEAR ; XACT::CSoundBank::GetCueFriendlyName, COMDAT
; _this$ = ecx

; 442  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 443  :         PXACT_SOUNDBANK_CUE_ENTRY pCueTable = GetCueTable();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ; XACT::CSoundBank::GetCueTable
  00011	89 45 fc	 mov	 DWORD PTR _pCueTable$[ebp], eax

; 444  :         return pCueTable[dwCueIndex].szFriendlyName;

  00014	8b 45 08	 mov	 eax, DWORD PTR _dwCueIndex$[ebp]
  00017	6b c0 18	 imul	 eax, 24			; 00000018H
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _pCueTable$[ebp]
  0001d	8d 44 01 08	 lea	 eax, DWORD PTR [ecx+eax+8]

; 445  :     }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z ENDP	; XACT::CSoundBank::GetCueFriendlyName
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ PROC NEAR ; XACT::CSoundBank::GetCueTable, COMDAT
; _this$ = ecx

; 437  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 438  :         return (PXACT_SOUNDBANK_CUE_ENTRY) ((PUCHAR)m_pDataBuffer+sizeof(XACT_SOUNDBANK_FILE_HEADER));       

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	83 c0 24	 add	 eax, 36			; 00000024H

; 439  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ENDP ; XACT::CSoundBank::GetCueTable
XACTENG	ENDS
PUBLIC	??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@	; `string'
PUBLIC	??_C@_0CK@HMBDIOCI@Cue?5index?5is?5not?5valid?5for?5this?5@ ; `string'
PUBLIC	??_C@_0DO@MJEPCMFE@SoundSource?5type?5?$CI0x?$CFx?$CJ?5does?5not@ ; `string'
PUBLIC	??_C@_0DM@OBIKNDOA@XACT_FLAG_SOUNDCUE_AUTORELEASE?5m@ ; `string'
PUBLIC	??_C@_0EB@IIFLJJPK@No?5need?5to?5supply?5ppCue?5if?5XACT_@ ; `string'
PUBLIC	?Play@CSoundBank@XACT@@QAGJKPAUIXACTSoundSource@@KPAPAUIXACTSoundCue@@@Z ; XACT::CSoundBank::Play
PUBLIC	?IsValidCue@CSoundBank@XACT@@AAEHK@Z		; XACT::CSoundBank::IsValidCue
PUBLIC	?IsValidSoundSourceForSound@CSoundBank@XACT@@AAEHKK@Z ; XACT::CSoundBank::IsValidSoundSourceForSound
PUBLIC	?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ ; XACT::CSoundBank::GetSoundTable
PUBLIC	?GetFlags@CSoundSource@XACT@@QAEKXZ		; XACT::CSoundSource::GetFlags
PUBLIC	?IsPositional@CSoundSource@XACT@@QAEHXZ		; XACT::CSoundSource::IsPositional
PUBLIC	?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z ; IDirectSoundBuffer::SetAllParameters
PUBLIC	??0_DS3DBUFFER@@QAE@XZ				; _DS3DBUFFER::_DS3DBUFFER
PUBLIC	?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z	; XACT::InsertTailList
EXTRN	?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z:NEAR ; XACT::CEngine::HandleNotificationRegistration
EXTRN	??0CSoundCue@XACT@@QAE@XZ:NEAR			; XACT::CSoundCue::CSoundCue
EXTRN	?Initialize@CSoundCue@XACT@@QAEJPAVCSoundBank@2@KPAVCSoundSource@2@@Z:NEAR ; XACT::CSoundCue::Initialize
EXTRN	?Play@CSoundCue@XACT@@QAGJK@Z:NEAR		; XACT::CSoundCue::Play
EXTRN	__fltused:NEAR
EXTRN	_memcpy:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundbank.cpp
XACTENG_RD	SEGMENT
??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@ DB 'CSoundBank::Play', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CK@HMBDIOCI@Cue?5index?5is?5not?5valid?5for?5this?5@
XACTENG_RD	SEGMENT
??_C@_0CK@HMBDIOCI@Cue?5index?5is?5not?5valid?5for?5this?5@ DB 'Cue index'
	DB	' is not valid for this soundbank', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DO@MJEPCMFE@SoundSource?5type?5?$CI0x?$CFx?$CJ?5does?5not@
XACTENG_RD	SEGMENT
??_C@_0DO@MJEPCMFE@SoundSource?5type?5?$CI0x?$CFx?$CJ?5does?5not@ DB 'Sou'
	DB	'ndSource type (0x%x) does not match sound (0x%x) type 0x%x', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@OBIKNDOA@XACT_FLAG_SOUNDCUE_AUTORELEASE?5m@
XACTENG_RD	SEGMENT
??_C@_0DM@OBIKNDOA@XACT_FLAG_SOUNDCUE_AUTORELEASE?5m@ DB 'XACT_FLAG_SOUND'
	DB	'CUE_AUTORELEASE must be set if ppCue == NULL', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EB@IIFLJJPK@No?5need?5to?5supply?5ppCue?5if?5XACT_@
XACTENG_RD	SEGMENT
??_C@_0EB@IIFLJJPK@No?5need?5to?5supply?5ppCue?5if?5XACT_@ DB 'No need to'
	DB	' supply ppCue if XACT_FLAG_SOUNDCUE_AUTORELEASE is set', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Play@CSoundBank@XACT@@QAGJKPAUIXACTSoundSource@@KPAPAUIXACTSoundCue@@@Z
XACTENG	SEGMENT
tv199 = -176
tv66 = -172
$T32258 = -168
$T32255 = -164
_Desc$31982 = -160
_i$31977 = -136
_pContext$31976 = -132
_pCueContext$31975 = -128
_pParams$31965 = -124
_ds3db$31968 = -120
_pSoundEntry$31963 = -36
___AutoLock$ = -32
_hr$ = -28
_pCue$ = -24
_pCueTable$ = -20
_pSoundSource$ = -16
_pNewCue$ = -12
_pEntry$ = -8
_pSoundTable$ = -4
_this$ = 8
_dwCueIndex$ = 12
_pSoundSourceObject$ = 16
_dwFlags$ = 20
_ppCue$ = 24
?Play@CSoundBank@XACT@@QAGJKPAUIXACTSoundSource@@KPAPAUIXACTSoundCue@@@Z PROC NEAR ; XACT::CSoundBank::Play, COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H

; 191  :     HRESULT hr = S_OK;

  00009	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 192  :     CSoundSource *pSoundSource = (CSoundSource *) pSoundSourceObject;

  00010	83 7d 10 00	 cmp	 DWORD PTR _pSoundSourceObject$[ebp], 0
  00014	74 0e		 je	 SHORT $L32253
  00016	8b 45 10	 mov	 eax, DWORD PTR _pSoundSourceObject$[ebp]
  00019	83 e8 08	 sub	 eax, 8
  0001c	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00022	eb 0a		 jmp	 SHORT $L32254
$L32253:
  00024	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$L32254:
  0002e	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR tv66[ebp]
  00034	89 4d f0	 mov	 DWORD PTR _pSoundSource$[ebp], ecx

; 193  :     CSoundCue *pCue = NULL, *pNewCue = NULL;

  00037	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pCue$[ebp], 0
  0003e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pNewCue$[ebp], 0

; 194  : 
; 195  :     PXACT_SOUNDBANK_CUE_ENTRY pCueTable = GetCueTable();

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ; XACT::CSoundBank::GetCueTable
  0004d	89 45 ec	 mov	 DWORD PTR _pCueTable$[ebp], eax

; 196  :     PXACT_SOUNDBANK_SOUND_ENTRY pSoundTable = GetSoundTable();

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ ; XACT::CSoundBank::GetSoundTable
  00058	89 45 fc	 mov	 DWORD PTR _pSoundTable$[ebp], eax

; 197  : 
; 198  : 
; 199  :     DPF_ENTER();
; 200  :     ENTER_EXTERNAL_METHOD();

  0005b	8d 4d e0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0005e	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 201  : 
; 202  : #ifdef VALIDATE_PARAMETERS
; 203  : 
; 204  :     if(!IsValidCue(dwCueIndex))

  00063	8b 55 0c	 mov	 edx, DWORD PTR _dwCueIndex$[ebp]
  00066	52		 push	 edx
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?IsValidCue@CSoundBank@XACT@@AAEHK@Z ; XACT::CSoundBank::IsValidCue
  0006f	85 c0		 test	 eax, eax
  00071	75 2d		 jne	 SHORT $L31928

; 205  :     {
; 206  :         DPF_ERROR("Cue index is not valid for this soundbank");

  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  0007d	68 ce 00 00 00	 push	 206			; 000000ceH
  00082	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  00087	6a 01		 push	 1
  00089	6a 09		 push	 9
  0008b	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00090	83 c4 18	 add	 esp, 24			; 00000018H
  00093	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@HMBDIOCI@Cue?5index?5is?5not?5valid?5for?5this?5@
  00098	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0009d	83 c4 04	 add	 esp, 4
$L31928:

; 207  :     }
; 208  : 
; 209  : 
; 210  :     if(pSoundSource && 
; 211  :         !IsValidSoundSourceForSound(pSoundSource->GetFlags(),
; 212  :         pSoundTable[pCueTable[dwCueIndex].dwSoundIndex].dwFlags))

  000a0	83 7d f0 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  000a4	0f 84 87 00 00
	00		 je	 $L31931
  000aa	8b 45 0c	 mov	 eax, DWORD PTR _dwCueIndex$[ebp]
  000ad	6b c0 18	 imul	 eax, 24			; 00000018H
  000b0	8b 4d ec	 mov	 ecx, DWORD PTR _pCueTable$[ebp]
  000b3	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  000b7	6b d2 1c	 imul	 edx, 28			; 0000001cH
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _pSoundTable$[ebp]
  000bd	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000c0	51		 push	 ecx
  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  000c4	e8 00 00 00 00	 call	 ?GetFlags@CSoundSource@XACT@@QAEKXZ ; XACT::CSoundSource::GetFlags
  000c9	50		 push	 eax
  000ca	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	e8 00 00 00 00	 call	 ?IsValidSoundSourceForSound@CSoundBank@XACT@@AAEHKK@Z ; XACT::CSoundBank::IsValidSoundSourceForSound
  000d2	85 c0		 test	 eax, eax
  000d4	75 5b		 jne	 SHORT $L31931

; 213  :     {
; 214  :         DPF_ERROR("SoundSource type (0x%x) does not match sound (0x%x) type 0x%x",
; 215  :                   pSoundSource->GetFlags(),
; 216  :                   pCueTable[dwCueIndex].dwSoundIndex,
; 217  :                   pSoundTable[pCueTable[dwCueIndex].dwSoundIndex].dwFlags);

  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  000e0	68 d6 00 00 00	 push	 214			; 000000d6H
  000e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  000ea	6a 01		 push	 1
  000ec	6a 09		 push	 9
  000ee	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000f3	83 c4 18	 add	 esp, 24			; 00000018H
  000f6	8b 55 0c	 mov	 edx, DWORD PTR _dwCueIndex$[ebp]
  000f9	6b d2 18	 imul	 edx, 24			; 00000018H
  000fc	8b 45 ec	 mov	 eax, DWORD PTR _pCueTable$[ebp]
  000ff	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00103	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00106	8b 55 fc	 mov	 edx, DWORD PTR _pSoundTable$[ebp]
  00109	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0010c	50		 push	 eax
  0010d	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCueIndex$[ebp]
  00110	6b c9 18	 imul	 ecx, 24			; 00000018H
  00113	8b 55 ec	 mov	 edx, DWORD PTR _pCueTable$[ebp]
  00116	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0011a	50		 push	 eax
  0011b	8b 4d f0	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0011e	e8 00 00 00 00	 call	 ?GetFlags@CSoundSource@XACT@@QAEKXZ ; XACT::CSoundSource::GetFlags
  00123	50		 push	 eax
  00124	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@MJEPCMFE@SoundSource?5type?5?$CI0x?$CFx?$CJ?5does?5not@
  00129	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0012e	83 c4 10	 add	 esp, 16			; 00000010H
$L31931:

; 218  : 
; 219  :     }
; 220  : 
; 221  :     if (!ppCue && !(dwFlags & XACT_FLAG_SOUNDCUE_AUTORELEASE)) {

  00131	83 7d 18 00	 cmp	 DWORD PTR _ppCue$[ebp], 0
  00135	75 37		 jne	 SHORT $L31933
  00137	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  0013a	83 e1 01	 and	 ecx, 1
  0013d	85 c9		 test	 ecx, ecx
  0013f	75 2d		 jne	 SHORT $L31933

; 222  : 
; 223  :         DPF_ERROR("XACT_FLAG_SOUNDCUE_AUTORELEASE must be set if ppCue == NULL");

  00141	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00146	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  0014b	68 df 00 00 00	 push	 223			; 000000dfH
  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  00155	6a 01		 push	 1
  00157	6a 09		 push	 9
  00159	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0015e	83 c4 18	 add	 esp, 24			; 00000018H
  00161	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@OBIKNDOA@XACT_FLAG_SOUNDCUE_AUTORELEASE?5m@
  00166	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0016b	83 c4 04	 add	 esp, 4
$L31933:

; 224  : 
; 225  :     }
; 226  : 
; 227  :     if (ppCue && (dwFlags & XACT_FLAG_SOUNDCUE_AUTORELEASE)) {

  0016e	83 7d 18 00	 cmp	 DWORD PTR _ppCue$[ebp], 0
  00172	74 37		 je	 SHORT $L31935
  00174	8b 55 14	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00177	83 e2 01	 and	 edx, 1
  0017a	85 d2		 test	 edx, edx
  0017c	74 2d		 je	 SHORT $L31935

; 228  : 
; 229  :         DPF_ERROR("No need to supply ppCue if XACT_FLAG_SOUNDCUE_AUTORELEASE is set");

  0017e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00183	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  00188	68 e5 00 00 00	 push	 229			; 000000e5H
  0018d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  00192	6a 01		 push	 1
  00194	6a 09		 push	 9
  00196	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
  0019e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@IIFLJJPK@No?5need?5to?5supply?5ppCue?5if?5XACT_@
  001a3	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  001a8	83 c4 04	 add	 esp, 4
$L31935:

; 230  : 
; 231  :     }
; 232  : 
; 233  : #endif // VALIDATE_PARAMETERS
; 234  : 
; 235  :     //
; 236  :     // search for any other cues associated with the supplied sound source
; 237  :     //
; 238  :     
; 239  :     
; 240  :     PLIST_ENTRY pEntry = m_lstCues.Flink;

  001ab	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  001ae	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  001b1	89 4d f8	 mov	 DWORD PTR _pEntry$[ebp], ecx
$L31939:

; 241  :     while (pEntry != &m_lstCues) 

  001b4	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  001b7	83 c2 1c	 add	 edx, 28			; 0000001cH
  001ba	39 55 f8	 cmp	 DWORD PTR _pEntry$[ebp], edx
  001bd	74 60		 je	 SHORT $L31940

; 242  :     {
; 243  :         pCue = CONTAINING_RECORD(pEntry,CSoundCue,m_ListEntry);

  001bf	8b 45 f8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  001c2	83 e8 10	 sub	 eax, 16			; 00000010H
  001c5	89 45 e8	 mov	 DWORD PTR _pCue$[ebp], eax

; 244  :         pEntry = pEntry->Flink;        

  001c8	8b 4d f8	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  001cb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cd	89 55 f8	 mov	 DWORD PTR _pEntry$[ebp], edx

; 245  :         
; 246  :         //
; 247  :         // if another cue of the same layer is playing and a source was supplied
; 248  :         // enforce the layering behavior
; 249  :         // if now SoundSource was supplied but another cue of the same layer is playing
; 250  :         
; 251  :         if (pCue->m_pSoundEntry->wLayer == pSoundTable[pCueTable[dwCueIndex].dwSoundIndex].wLayer)

  001d0	8b 45 e8	 mov	 eax, DWORD PTR _pCue$[ebp]
  001d3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001d6	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  001da	8b 45 0c	 mov	 eax, DWORD PTR _dwCueIndex$[ebp]
  001dd	6b c0 18	 imul	 eax, 24			; 00000018H
  001e0	8b 4d ec	 mov	 ecx, DWORD PTR _pCueTable$[ebp]
  001e3	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  001e7	6b c0 1c	 imul	 eax, 28			; 0000001cH
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR _pSoundTable$[ebp]
  001ed	0f b7 44 01 12	 movzx	 eax, WORD PTR [ecx+eax+18]
  001f2	3b d0		 cmp	 edx, eax
  001f4	75 27		 jne	 SHORT $L31945

; 252  :         {
; 253  :       
; 254  :             if (pSoundSource == pCue->m_pControlSoundSource) {

  001f6	8b 4d e8	 mov	 ecx, DWORD PTR _pCue$[ebp]
  001f9	8b 55 f0	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  001fc	3b 91 f4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+244]
  00202	75 19		 jne	 SHORT $L31945

; 255  :                 
; 256  :                 //
; 257  :                 // the cues have the same layer and same voice which means the existing cue
; 258  :                 // must be stopped.
; 259  :                 //
; 260  :                 
; 261  :                 hr = pCue->Stop(XACT_FLAG_SOUNDCUE_SYNCHRONOUS);

  00204	68 00 00 00 10	 push	 268435456		; 10000000H
  00209	8b 45 e8	 mov	 eax, DWORD PTR _pCue$[ebp]
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 ?Stop@CSoundCue@XACT@@QAGJK@Z ; XACT::CSoundCue::Stop
  00212	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 262  :                 if (FAILED(hr)){

  00215	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00219	7d 02		 jge	 SHORT $L31945

; 263  :                     break;

  0021b	eb 02		 jmp	 SHORT $L31940
$L31945:

; 264  :                 }
; 265  :                 
; 266  :                 //
; 267  :                 // after calling stop on a cue you CANT assume its still allocated
; 268  :                 //
; 269  : 
; 270  :             }                        
; 271  :             
; 272  :         }                
; 273  :         
; 274  :     }

  0021d	eb 95		 jmp	 SHORT $L31939
$L31940:

; 275  :     
; 276  :     if (SUCCEEDED(hr) && !pNewCue)

  0021f	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00223	0f 8c 92 01 00
	00		 jl	 $L31950
  00229	83 7d f4 00	 cmp	 DWORD PTR _pNewCue$[ebp], 0
  0022d	0f 85 88 01 00
	00		 jne	 $L31950

; 277  :     {
; 278  :         //
; 279  :         // create a Cue instance
; 280  :         //
; 281  :         
; 282  :         hr = HRFROMP(pNewCue = NEW(CSoundCue));

  00233	68 f8 00 00 00	 push	 248			; 000000f8H
  00238	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0023d	83 c4 04	 add	 esp, 4
  00240	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T32255[ebp], eax
  00246	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR $T32255[ebp], 0
  0024d	74 13		 je	 SHORT $L32256
  0024f	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR $T32255[ebp]
  00255	e8 00 00 00 00	 call	 ??0CSoundCue@XACT@@QAE@XZ ; XACT::CSoundCue::CSoundCue
  0025a	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv199[ebp], eax
  00260	eb 0a		 jmp	 SHORT $L32257
$L32256:
  00262	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv199[ebp], 0
$L32257:
  0026c	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv199[ebp]
  00272	89 4d f4	 mov	 DWORD PTR _pNewCue$[ebp], ecx
  00275	33 d2		 xor	 edx, edx
  00277	83 7d f4 00	 cmp	 DWORD PTR _pNewCue$[ebp], 0
  0027b	0f 95 c2	 setne	 dl
  0027e	4a		 dec	 edx
  0027f	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  00285	89 55 e4	 mov	 DWORD PTR _hr$[ebp], edx

; 283  :         
; 284  :         if(SUCCEEDED(hr))

  00288	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0028c	7c 17		 jl	 SHORT $L31956

; 285  :         {
; 286  :             hr = pNewCue->Initialize(this, dwCueIndex, pSoundSource);

  0028e	8b 45 f0	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  00291	50		 push	 eax
  00292	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCueIndex$[ebp]
  00295	51		 push	 ecx
  00296	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00299	52		 push	 edx
  0029a	8b 4d f4	 mov	 ecx, DWORD PTR _pNewCue$[ebp]
  0029d	e8 00 00 00 00	 call	 ?Initialize@CSoundCue@XACT@@QAEJPAVCSoundBank@2@KPAVCSoundSource@2@@Z ; XACT::CSoundCue::Initialize
  002a2	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L31956:

; 287  :         }
; 288  :         
; 289  :         if (FAILED(hr))

  002a5	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002a9	7d 13		 jge	 SHORT $L31958

; 290  :         {
; 291  :             pNewCue->Release();

  002ab	8b 45 f4	 mov	 eax, DWORD PTR _pNewCue$[ebp]
  002ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b0	8b 55 f4	 mov	 edx, DWORD PTR _pNewCue$[ebp]
  002b3	52		 push	 edx
  002b4	ff 51 08	 call	 DWORD PTR [ecx+8]

; 292  :             pNewCue = NULL;

  002b7	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pNewCue$[ebp], 0
$L31958:

; 293  :         }
; 294  :         
; 295  :         if(SUCCEEDED(hr))

  002be	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002c2	7c 13		 jl	 SHORT $L31960

; 296  :         {        
; 297  : 
; 298  :             //
; 299  :             // add cue to our list
; 300  :             //
; 301  :             
; 302  :             InsertTailList(&m_lstCues,&pNewCue->m_ListEntry);

  002c4	8b 45 f4	 mov	 eax, DWORD PTR _pNewCue$[ebp]
  002c7	83 c0 10	 add	 eax, 16			; 00000010H
  002ca	50		 push	 eax
  002cb	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  002ce	83 c1 1c	 add	 ecx, 28			; 0000001cH
  002d1	51		 push	 ecx
  002d2	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList
$L31960:

; 303  :             
; 304  :         }
; 305  :         
; 306  :         if (SUCCEEDED(hr) && pSoundSource && pSoundSource->IsPositional()) {

  002d7	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002db	0f 8c da 00 00
	00		 jl	 $L31950
  002e1	83 7d f0 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  002e5	0f 84 d0 00 00
	00		 je	 $L31950
  002eb	8b 4d f0	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  002ee	e8 00 00 00 00	 call	 ?IsPositional@CSoundSource@XACT@@QAEHXZ ; XACT::CSoundSource::IsPositional
  002f3	85 c0		 test	 eax, eax
  002f5	0f 84 c0 00 00
	00		 je	 $L31950

; 307  :             
; 308  :             //
; 309  :             // set the 3d properties associated with the sound, on the destination voice
; 310  :             //
; 311  :             
; 312  :             PXACT_SOUNDBANK_SOUND_ENTRY pSoundEntry = &pSoundTable[pCueTable[dwCueIndex].dwSoundIndex];            

  002fb	8b 55 0c	 mov	 edx, DWORD PTR _dwCueIndex$[ebp]
  002fe	6b d2 18	 imul	 edx, 24			; 00000018H
  00301	8b 45 ec	 mov	 eax, DWORD PTR _pCueTable$[ebp]
  00304	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00308	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0030b	8b 55 fc	 mov	 edx, DWORD PTR _pSoundTable$[ebp]
  0030e	03 d1		 add	 edx, ecx
  00310	89 55 dc	 mov	 DWORD PTR _pSoundEntry$31963[ebp], edx

; 313  :             
; 314  :             if (pSoundEntry->dw3DParametersOffset != -1) {

  00313	8b 45 dc	 mov	 eax, DWORD PTR _pSoundEntry$31963[ebp]
  00316	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  0031a	0f 84 9b 00 00
	00		 je	 $L31950

; 315  :                 
; 316  :                 PXACT_SOUNDBANK_SOUND_3D_PARAMETERS pParams = (PXACT_SOUNDBANK_SOUND_3D_PARAMETERS)
; 317  :                     ((PUCHAR)m_pDataBuffer + pSoundEntry->dw3DParametersOffset);

  00320	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00323	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00326	8b 45 dc	 mov	 eax, DWORD PTR _pSoundEntry$31963[ebp]
  00329	03 50 04	 add	 edx, DWORD PTR [eax+4]
  0032c	89 55 84	 mov	 DWORD PTR _pParams$31965[ebp], edx

; 318  :                 
; 319  :                 DS3DBUFFER ds3db;

  0032f	8d 4d 88	 lea	 ecx, DWORD PTR _ds3db$31968[ebp]
  00332	e8 00 00 00 00	 call	 ??0_DS3DBUFFER@@QAE@XZ

; 320  :                 ZeroMemory(&ds3db,sizeof(DS3DBUFFER));

  00337	6a 4c		 push	 76			; 0000004cH
  00339	6a 00		 push	 0
  0033b	8d 4d 88	 lea	 ecx, DWORD PTR _ds3db$31968[ebp]
  0033e	51		 push	 ecx
  0033f	e8 00 00 00 00	 call	 _memset
  00344	83 c4 0c	 add	 esp, 12			; 0000000cH

; 321  :                 
; 322  :                 ds3db.dwSize = sizeof(DS3DBUFFER);

  00347	c7 45 88 4c 00
	00 00		 mov	 DWORD PTR _ds3db$31968[ebp], 76 ; 0000004cH

; 323  :                 ds3db.dwInsideConeAngle = pParams->dwInsideConeAngle;

  0034e	8b 55 84	 mov	 edx, DWORD PTR _pParams$31965[ebp]
  00351	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00354	89 45 a4	 mov	 DWORD PTR _ds3db$31968[ebp+28], eax

; 324  :                 ds3db.dwOutsideConeAngle = pParams->dwOutsideConeAngle;

  00357	8b 4d 84	 mov	 ecx, DWORD PTR _pParams$31965[ebp]
  0035a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0035d	89 55 a8	 mov	 DWORD PTR _ds3db$31968[ebp+32], edx

; 325  :                 ds3db.flMaxDistance = pParams->flMaxDistance;

  00360	8b 45 84	 mov	 eax, DWORD PTR _pParams$31965[ebp]
  00363	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00366	89 4d c0	 mov	 DWORD PTR _ds3db$31968[ebp+56], ecx

; 326  :                 ds3db.flMinDistance = pParams->flMinDistance;

  00369	8b 55 84	 mov	 edx, DWORD PTR _pParams$31965[ebp]
  0036c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0036f	89 45 bc	 mov	 DWORD PTR _ds3db$31968[ebp+52], eax

; 327  :                 ds3db.dwMode = pParams->dwMode;

  00372	8b 4d 84	 mov	 ecx, DWORD PTR _pParams$31965[ebp]
  00375	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00378	89 55 c4	 mov	 DWORD PTR _ds3db$31968[ebp+60], edx

; 328  :                 ds3db.lConeOutsideVolume = pParams->lConeOutsideVolume;

  0037b	8b 45 84	 mov	 eax, DWORD PTR _pParams$31965[ebp]
  0037e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00381	89 4d b8	 mov	 DWORD PTR _ds3db$31968[ebp+48], ecx

; 329  :                 ds3db.flDistanceFactor = pParams->flDistanceFactor;

  00384	8b 55 84	 mov	 edx, DWORD PTR _pParams$31965[ebp]
  00387	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0038a	89 45 c8	 mov	 DWORD PTR _ds3db$31968[ebp+64], eax

; 330  :                 ds3db.flDopplerFactor = pParams->flDopplerFactor;

  0038d	8b 4d 84	 mov	 ecx, DWORD PTR _pParams$31965[ebp]
  00390	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00393	89 55 d0	 mov	 DWORD PTR _ds3db$31968[ebp+72], edx

; 331  :                 ds3db.flRolloffFactor = pParams->flRolloffFactor;

  00396	8b 45 84	 mov	 eax, DWORD PTR _pParams$31965[ebp]
  00399	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0039c	89 4d cc	 mov	 DWORD PTR _ds3db$31968[ebp+68], ecx

; 332  :                 ds3db.vConeOrientation.x = 1;

  0039f	c7 45 ac 00 00
	80 3f		 mov	 DWORD PTR _ds3db$31968[ebp+36], 1065353216 ; 3f800000H

; 333  :                 
; 334  :                 hr = pSoundSource->m_HwVoice.pBuffer->SetAllParameters(&ds3db,DS3D_DEFERRED);

  003a6	6a 01		 push	 1
  003a8	8d 55 88	 lea	 edx, DWORD PTR _ds3db$31968[ebp]
  003ab	52		 push	 edx
  003ac	8b 45 f0	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  003af	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003b2	51		 push	 ecx
  003b3	e8 00 00 00 00	 call	 ?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z ; IDirectSoundBuffer::SetAllParameters
  003b8	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L31950:

; 335  :                 
; 336  :             }
; 337  :             
; 338  :         }
; 339  : 
; 340  :     } //if pNewCue
; 341  : 
; 342  :     if (SUCCEEDED(hr)) {

  003bb	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  003bf	0f 8c ca 00 00
	00		 jl	 $L31972

; 343  : 
; 344  :         if (ppCue) {

  003c5	83 7d 18 00	 cmp	 DWORD PTR _ppCue$[ebp], 0
  003c9	0f 84 c0 00 00
	00		 je	 $L31972

; 345  : 
; 346  :             *ppCue = (PXACTSOUNDCUE) pNewCue;

  003cf	8b 55 18	 mov	 edx, DWORD PTR _ppCue$[ebp]
  003d2	8b 45 f4	 mov	 eax, DWORD PTR _pNewCue$[ebp]
  003d5	89 02		 mov	 DWORD PTR [edx], eax

; 347  : 
; 348  :             //
; 349  :             // handle registration for notifications associated with a CueIndex
; 350  :             // Since the caller cant register a notification for a cue before it starts playing
; 351  :             // it instead registers one on the soundbank, for a specific cue index.
; 352  :             // then when the time comes to play the cue, we register the notification on the specific cue
; 353  :             //
; 354  : 
; 355  :             PCUE_INDEX_NOTIFICATION_CONTEXT pCueContext;
; 356  :             PNOTIFICATION_CONTEXT pContext;
; 357  : 
; 358  :             for (DWORD i=0;i<eXACTNotification_Max;i++) {

  003d7	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$31977[ebp], 0
  003e1	eb 0f		 jmp	 SHORT $L31978
$L31979:
  003e3	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _i$31977[ebp]
  003e9	83 c1 01	 add	 ecx, 1
  003ec	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _i$31977[ebp], ecx
$L31978:
  003f2	83 bd 78 ff ff
	ff 03		 cmp	 DWORD PTR _i$31977[ebp], 3
  003f9	0f 83 90 00 00
	00		 jae	 $L31972

; 359  : 
; 360  :                 pContext = GetNotificationContext(i);

  003ff	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$31977[ebp]
  00405	52		 push	 edx
  00406	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00409	e8 00 00 00 00	 call	 ?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundBank::GetNotificationContext
  0040e	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pContext$31976[ebp], eax

; 361  : 
; 362  :                 pCueContext = g_pEngine->GetCueNotificationContext(pContext,dwCueIndex);

  00414	8b 45 0c	 mov	 eax, DWORD PTR _dwCueIndex$[ebp]
  00417	50		 push	 eax
  00418	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _pContext$31976[ebp]
  0041e	51		 push	 ecx
  0041f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00425	e8 00 00 00 00	 call	 ?GetCueNotificationContext@CEngine@XACT@@QAEPAU_CUE_INDEX_NOTIFICATION_CONTEXT@2@PAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CEngine::GetCueNotificationContext
  0042a	89 45 80	 mov	 DWORD PTR _pCueContext$31975[ebp], eax

; 363  :                 if (pContext->bRegistered && pCueContext) {

  0042d	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _pContext$31976[ebp]
  00433	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00436	74 52		 je	 SHORT $L31981
  00438	83 7d 80 00	 cmp	 DWORD PTR _pCueContext$31975[ebp], 0
  0043c	74 4c		 je	 SHORT $L31981

; 364  : 
; 365  :                     XACT_NOTIFICATION_DESCRIPTION Desc;
; 366  : 
; 367  :                     memcpy(&Desc,
; 368  :                         &pContext->PendingNotification.Header,
; 369  :                         sizeof(Desc));

  0043e	6a 18		 push	 24			; 00000018H
  00440	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _pContext$31976[ebp]
  00446	83 c0 08	 add	 eax, 8
  00449	50		 push	 eax
  0044a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _Desc$31982[ebp]
  00450	51		 push	 ecx
  00451	e8 00 00 00 00	 call	 _memcpy
  00456	83 c4 0c	 add	 esp, 12			; 0000000cH

; 370  : 
; 371  :                     Desc.pSoundCue = (PXACTSOUNDCUE) pNewCue;

  00459	8b 55 f4	 mov	 edx, DWORD PTR _pNewCue$[ebp]
  0045c	89 95 68 ff ff
	ff		 mov	 DWORD PTR _Desc$31982[ebp+8], edx

; 372  :                     Desc.pSoundBank = NULL;

  00462	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _Desc$31982[ebp+4], 0

; 373  :                     Desc.dwSoundCueIndex = XACT_SOUNDCUE_INDEX_UNUSED;

  0046c	c7 85 6c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _Desc$31982[ebp+12], -1

; 374  : 
; 375  :                     //
; 376  :                     // register for this type of notification, on the cue
; 377  :                     //
; 378  : 
; 379  :                     g_pEngine->HandleNotificationRegistration(&Desc,TRUE);

  00476	6a 01		 push	 1
  00478	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _Desc$31982[ebp]
  0047e	50		 push	 eax
  0047f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00485	e8 00 00 00 00	 call	 ?HandleNotificationRegistration@CEngine@XACT@@QAEXPAU_XACT_NOTIFICATION_DESCRIPTION@@H@Z ; XACT::CEngine::HandleNotificationRegistration
$L31981:

; 380  : 
; 381  :                 }
; 382  : 
; 383  :             }

  0048a	e9 54 ff ff ff	 jmp	 $L31979
$L31972:

; 384  : 
; 385  :         }
; 386  : 
; 387  :     }
; 388  : 
; 389  :     if (SUCCEEDED(hr)) {

  0048f	83 7d e4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00493	7c 10		 jl	 SHORT $L31985

; 390  : 
; 391  :         //
; 392  :         // play the cue
; 393  :         //
; 394  :         
; 395  :         hr = pNewCue->Play(dwFlags);

  00495	8b 4d 14	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00498	51		 push	 ecx
  00499	8b 55 f4	 mov	 edx, DWORD PTR _pNewCue$[ebp]
  0049c	52		 push	 edx
  0049d	e8 00 00 00 00	 call	 ?Play@CSoundCue@XACT@@QAGJK@Z ; XACT::CSoundCue::Play
  004a2	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L31985:

; 396  :         
; 397  :     }
; 398  : 
; 399  : 
; 400  :     DPF_LEAVE_HRESULT(hr);
; 401  :     return hr;

  004a5	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]
  004a8	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T32258[ebp], eax
  004ae	8d 4d e0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  004b1	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  004b6	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T32258[ebp]

; 402  : }

  004bc	8b e5		 mov	 esp, ebp
  004be	5d		 pop	 ebp
  004bf	c2 14 00	 ret	 20			; 00000014H
?Play@CSoundBank@XACT@@QAGJKPAUIXACTSoundSource@@KPAPAUIXACTSoundCue@@@Z ENDP ; XACT::CSoundBank::Play
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetAllParameters@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z
XACTENG	SEGMENT
_this$ = 8
_pds3db$ = 12
_dwApply$ = 16
?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z PROC NEAR ; IDirectSoundBuffer::SetAllParameters, COMDAT

; 1992 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1993 :         return IDirectSoundBuffer_SetAllParameters(this, pds3db, dwApply);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pds3db$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetAllParameters@12

; 1994 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetAllParameters@IDirectSoundBuffer@@QAGJPBU_DS3DBUFFER@@K@Z ENDP ; IDirectSoundBuffer::SetAllParameters
XACTENG	ENDS
PUBLIC	?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList
PUBLIC	??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG_RD	SEGMENT
??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; XACT::InsertTailList, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 73		 push	 115			; 00000073H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 116  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 74		 push	 116			; 00000074H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 117  : 
; 118  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 119  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 120  :     
; 121  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 122  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 123  : 
; 124  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7c		 push	 124			; 0000007cH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 125  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; XACT::InsertTailList
XACTENG	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z PROC NEAR ; XACT::__AssertValidEntryList, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L29601

; 55   :     {
; 56   :         DwDbgAssert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 57   :     }
; 58   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L29600
$L29601:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L29605
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L29604
$L29605:

; 59   :     {
; 60   :         DwDbgAssert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 61   :     }
; 62   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L29600
$L29604:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L29609
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L29608
$L29609:

; 63   :     {
; 64   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L29611
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L29610
$L29611:

; 65   :         {
; 66   :             DwDbgAssert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L29610:

; 67   :         }
; 68   :     }
; 69   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L29600
$L29608:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L29614

; 70   :     {
; 71   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L29615

; 72   :         {
; 73   :             DwDbgAssert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L29615:

; 74   :         }
; 75   :     }
; 76   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L29600
$L29614:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L29600

; 77   :     {
; 78   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L29600

; 79   :         {
; 80   :             DwDbgAssert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L29600:

; 81   :         }
; 82   :     }
; 83   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ENDP ; XACT::__AssertValidEntryList
XACTENG	ENDS
EXTRN	_XactMemAlloc@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT
_cbBuffer$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 71   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     using namespace XACT;
; 73   :     return XactMemAlloc(cbBuffer, FALSE); 

  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _XactMemAlloc@8

; 74   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?IsValidCue@CSoundBank@XACT@@AAEHK@Z
XACTENG	SEGMENT
_this$ = -4
_dwCueIndex$ = 8
?IsValidCue@CSoundBank@XACT@@AAEHK@Z PROC NEAR		; XACT::CSoundBank::IsValidCue, COMDAT
; _this$ = ecx

; 391  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 392  :         
; 393  :         if (dwCueIndex > m_pFileHeader->dwCueEntryCount) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	8b 55 08	 mov	 edx, DWORD PTR _dwCueIndex$[ebp]
  00010	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00013	76 04		 jbe	 SHORT $L31001

; 394  :             return FALSE;

  00015	33 c0		 xor	 eax, eax
  00017	eb 05		 jmp	 SHORT $L31000
$L31001:

; 395  :         }
; 396  : 
; 397  :         return TRUE;

  00019	b8 01 00 00 00	 mov	 eax, 1
$L31000:

; 398  :     }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?IsValidCue@CSoundBank@XACT@@AAEHK@Z ENDP		; XACT::CSoundBank::IsValidCue
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?IsValidSoundSourceForSound@CSoundBank@XACT@@AAEHKK@Z
XACTENG	SEGMENT
_this$ = -4
_dwSoundSourceFlags$ = 8
_dwSoundFlags$ = 12
?IsValidSoundSourceForSound@CSoundBank@XACT@@AAEHKK@Z PROC NEAR ; XACT::CSoundBank::IsValidSoundSourceForSound, COMDAT
; _this$ = ecx

; 419  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 420  :         if ((dwSoundSourceFlags & XACT_FLAG_SOUNDSOURCE_3D) && (dwSoundFlags & XACT_FLAG_SOUNDSOURCE_3D)) {

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwSoundSourceFlags$[ebp]
  0000a	83 e0 02	 and	 eax, 2
  0000d	85 c0		 test	 eax, eax
  0000f	74 11		 je	 SHORT $L31013
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSoundFlags$[ebp]
  00014	83 e1 02	 and	 ecx, 2
  00017	85 c9		 test	 ecx, ecx
  00019	74 07		 je	 SHORT $L31013

; 421  :             return TRUE;

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	eb 38		 jmp	 SHORT $L31012
$L31013:

; 422  :         } else if ((dwSoundSourceFlags & XACT_FLAG_SOUNDSOURCE_3D) && (dwSoundFlags & XACT_FLAG_SOUNDSOURCE_2D)) {

  00022	8b 55 08	 mov	 edx, DWORD PTR _dwSoundSourceFlags$[ebp]
  00025	83 e2 02	 and	 edx, 2
  00028	85 d2		 test	 edx, edx
  0002a	74 11		 je	 SHORT $L31015
  0002c	8b 45 0c	 mov	 eax, DWORD PTR _dwSoundFlags$[ebp]
  0002f	83 e0 01	 and	 eax, 1
  00032	85 c0		 test	 eax, eax
  00034	74 07		 je	 SHORT $L31015

; 423  :             return TRUE;

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 1d		 jmp	 SHORT $L31012
$L31015:

; 424  :         } else if ((dwSoundSourceFlags & XACT_FLAG_SOUNDSOURCE_2D) && (dwSoundFlags & XACT_FLAG_SOUNDSOURCE_2D)) {

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _dwSoundSourceFlags$[ebp]
  00040	83 e1 01	 and	 ecx, 1
  00043	85 c9		 test	 ecx, ecx
  00045	74 11		 je	 SHORT $L31017
  00047	8b 55 0c	 mov	 edx, DWORD PTR _dwSoundFlags$[ebp]
  0004a	83 e2 01	 and	 edx, 1
  0004d	85 d2		 test	 edx, edx
  0004f	74 07		 je	 SHORT $L31017

; 425  :             return TRUE;

  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	eb 02		 jmp	 SHORT $L31012
$L31017:

; 426  :         } else {
; 427  :             return FALSE;

  00058	33 c0		 xor	 eax, eax
$L31012:

; 428  :         }
; 429  :     }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?IsValidSoundSourceForSound@CSoundBank@XACT@@AAEHKK@Z ENDP ; XACT::CSoundBank::IsValidSoundSourceForSound
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ PROC NEAR ; XACT::CSoundBank::GetSoundTable, COMDAT
; _this$ = ecx

; 448  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 449  :         return (PXACT_SOUNDBANK_SOUND_ENTRY) ((PUCHAR)m_pDataBuffer+sizeof(XACT_SOUNDBANK_FILE_HEADER)+
; 450  :             sizeof(XACT_SOUNDBANK_CUE_ENTRY)*m_pFileHeader->dwCueEntryCount);     

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00016	6b d2 18	 imul	 edx, 24			; 00000018H
  00019	8d 44 11 24	 lea	 eax, DWORD PTR [ecx+edx+36]

; 451  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ ENDP ; XACT::CSoundBank::GetSoundTable
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetFlags@CSoundSource@XACT@@QAEKXZ
XACTENG	SEGMENT
_this$ = -8
_dwSoundSourceFlags$ = -4
?GetFlags@CSoundSource@XACT@@QAEKXZ PROC NEAR		; XACT::CSoundSource::GetFlags, COMDAT
; _this$ = ecx

; 579  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 580  :         DWORD dwSoundSourceFlags = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwSoundSourceFlags$[ebp], 0

; 581  :         if (m_HwVoice.dwFlags & DSBCAPS_CTRL3D) {

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00016	83 e1 10	 and	 ecx, 16			; 00000010H
  00019	85 c9		 test	 ecx, ecx
  0001b	74 09		 je	 SHORT $L31172

; 582  :             dwSoundSourceFlags |= XACT_FLAG_SOUNDSOURCE_3D;

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _dwSoundSourceFlags$[ebp]
  00020	83 ca 02	 or	 edx, 2
  00023	89 55 fc	 mov	 DWORD PTR _dwSoundSourceFlags$[ebp], edx
$L31172:

; 583  :         }
; 584  : 
; 585  :         return dwSoundSourceFlags;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _dwSoundSourceFlags$[ebp]

; 586  :     }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?GetFlags@CSoundSource@XACT@@QAEKXZ ENDP		; XACT::CSoundSource::GetFlags
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT
_this$ = -4
?IsPositional@CSoundSource@XACT@@QAEHXZ PROC NEAR	; XACT::CSoundSource::IsPositional, COMDAT
; _this$ = ecx

; 589  :     {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  :         return (m_HwVoice.dwFlags & DSBCAPS_CTRL3D);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	83 e0 10	 and	 eax, 16			; 00000010H

; 591  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?IsPositional@CSoundSource@XACT@@QAEHXZ ENDP		; XACT::CSoundSource::IsPositional
XACTENG	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odt
;	COMDAT ??0_DS3DBUFFER@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0_DS3DBUFFER@@QAE@XZ PROC NEAR			; _DS3DBUFFER::_DS3DBUFFER, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 10	 add	 ecx, 16			; 00000010H
  00018	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 24	 add	 ecx, 36			; 00000024H
  00023	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0_DS3DBUFFER@@QAE@XZ ENDP				; _DS3DBUFFER::_DS3DBUFFER
; Function compile flags: /Odt
; File c:\xbox\public\sdk\inc\d3dx8math.h
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0D3DXVECTOR3@@QAE@XZ PROC NEAR			; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 103  :     D3DXVECTOR3() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
XACTENG	ENDS
PUBLIC	?Stop@CSoundBank@XACT@@QAGJKKPAUIXACTSoundCue@@@Z ; XACT::CSoundBank::Stop
PUBLIC	??_C@_0ED@FDJKGBOJ@You?5cant?5supply?5a?5valid?5cue?5inst@ ; `string'
PUBLIC	??_C@_0EA@JDJCFLLF@You?5cant?5supply?5both?5a?5valid?5cue@ ; `string'
PUBLIC	??_C@_0DJ@JMDEAIME@XACT_FLAG_SOUNDCUE_AUTORELEASE?5i@ ; `string'
;	COMDAT ??_C@_0ED@FDJKGBOJ@You?5cant?5supply?5a?5valid?5cue?5inst@
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundbank.cpp
XACTENG_RD	SEGMENT
??_C@_0ED@FDJKGBOJ@You?5cant?5supply?5a?5valid?5cue?5inst@ DB 'You cant s'
	DB	'upply a valid cue instance with an unspecified cue index', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EA@JDJCFLLF@You?5cant?5supply?5both?5a?5valid?5cue@
XACTENG_RD	SEGMENT
??_C@_0EA@JDJCFLLF@You?5cant?5supply?5both?5a?5valid?5cue@ DB 'You cant s'
	DB	'upply both a valid cue instance AND a valid cue index', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@JMDEAIME@XACT_FLAG_SOUNDCUE_AUTORELEASE?5i@
XACTENG_RD	SEGMENT
??_C@_0DJ@JMDEAIME@XACT_FLAG_SOUNDCUE_AUTORELEASE?5i@ DB 'XACT_FLAG_SOUND'
	DB	'CUE_AUTORELEASE is not valid for this API', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Stop@CSoundBank@XACT@@QAGJKKPAUIXACTSoundCue@@@Z
XACTENG	SEGMENT
$T32296 = -20
_pEntry$32008 = -16
___AutoLock$ = -12
_hr$ = -8
_pCue$ = -4
_this$ = 8
_dwCueIndex$ = 12
_dwFlags$ = 16
_pCueObject$ = 20
?Stop@CSoundBank@XACT@@QAGJKKPAUIXACTSoundCue@@@Z PROC NEAR ; XACT::CSoundBank::Stop, COMDAT

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 409  :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 410  :     CSoundCue *pCue = (CSoundCue *) pCueObject;

  0000d	8b 45 14	 mov	 eax, DWORD PTR _pCueObject$[ebp]
  00010	89 45 fc	 mov	 DWORD PTR _pCue$[ebp], eax

; 411  :     DPF_ENTER();
; 412  :     ENTER_EXTERNAL_METHOD();

  00013	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00016	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 413  : 
; 414  : #ifdef VALIDATE_PARAMETERS
; 415  : 
; 416  :     if((dwCueIndex != XACT_SOUNDCUE_INDEX_UNUSED) && !IsValidCue(dwCueIndex))

  0001b	83 7d 0c ff	 cmp	 DWORD PTR _dwCueIndex$[ebp], -1
  0001f	74 3d		 je	 SHORT $L32000
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCueIndex$[ebp]
  00024	51		 push	 ecx
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?IsValidCue@CSoundBank@XACT@@AAEHK@Z ; XACT::CSoundBank::IsValidCue
  0002d	85 c0		 test	 eax, eax
  0002f	75 2d		 jne	 SHORT $L32000

; 417  :     {
; 418  :         DPF_ERROR("Cue index is not valid for this soundbank");

  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  0003b	68 a2 01 00 00	 push	 418			; 000001a2H
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  00045	6a 01		 push	 1
  00047	6a 09		 push	 9
  00049	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0004e	83 c4 18	 add	 esp, 24			; 00000018H
  00051	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@HMBDIOCI@Cue?5index?5is?5not?5valid?5for?5this?5@
  00056	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0005b	83 c4 04	 add	 esp, 4
$L32000:

; 419  :     }
; 420  : 
; 421  :     if((dwCueIndex == XACT_SOUNDCUE_INDEX_UNUSED) && (pCueObject != NULL))

  0005e	83 7d 0c ff	 cmp	 DWORD PTR _dwCueIndex$[ebp], -1
  00062	75 33		 jne	 SHORT $L32001
  00064	83 7d 14 00	 cmp	 DWORD PTR _pCueObject$[ebp], 0
  00068	74 2d		 je	 SHORT $L32001

; 422  :     {
; 423  :         DPF_ERROR("You cant supply a valid cue instance with an unspecified cue index");

  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  00074	68 a7 01 00 00	 push	 423			; 000001a7H
  00079	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  0007e	6a 01		 push	 1
  00080	6a 09		 push	 9
  00082	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00087	83 c4 18	 add	 esp, 24			; 00000018H
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@FDJKGBOJ@You?5cant?5supply?5a?5valid?5cue?5inst@
  0008f	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00094	83 c4 04	 add	 esp, 4
$L32001:

; 424  :     }
; 425  : 
; 426  :     if((dwCueIndex != XACT_SOUNDCUE_INDEX_UNUSED) && (pCueObject != NULL))

  00097	83 7d 0c ff	 cmp	 DWORD PTR _dwCueIndex$[ebp], -1
  0009b	74 33		 je	 SHORT $L32003
  0009d	83 7d 14 00	 cmp	 DWORD PTR _pCueObject$[ebp], 0
  000a1	74 2d		 je	 SHORT $L32003

; 427  :     {
; 428  :         DPF_ERROR("You cant supply both a valid cue instance AND a valid cue index");

  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  000ad	68 ac 01 00 00	 push	 428			; 000001acH
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  000b7	6a 01		 push	 1
  000b9	6a 09		 push	 9
  000bb	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000c0	83 c4 18	 add	 esp, 24			; 00000018H
  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@JDJCFLLF@You?5cant?5supply?5both?5a?5valid?5cue@
  000c8	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000cd	83 c4 04	 add	 esp, 4
$L32003:

; 429  :     }
; 430  : 
; 431  :     if (dwFlags & XACT_FLAG_SOUNDCUE_AUTORELEASE) {

  000d0	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000d3	83 e2 01	 and	 edx, 1
  000d6	85 d2		 test	 edx, edx
  000d8	74 2d		 je	 SHORT $L32005

; 432  :         DPF_ERROR("XACT_FLAG_SOUNDCUE_AUTORELEASE is not valid for this API");

  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@IALOIFNP@CSoundBank?3?3Play?$AA@
  000e4	68 b0 01 00 00	 push	 432			; 000001b0H
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  000ee	6a 01		 push	 1
  000f0	6a 09		 push	 9
  000f2	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000f7	83 c4 18	 add	 esp, 24			; 00000018H
  000fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@JMDEAIME@XACT_FLAG_SOUNDCUE_AUTORELEASE?5i@
  000ff	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00104	83 c4 04	 add	 esp, 4
$L32005:

; 433  :     }
; 434  : 
; 435  : #endif
; 436  : 
; 437  :     //
; 438  :     // instead of calling release after calling stop, instruct the cue to free itself
; 439  :     // this solves the issue of a cue already being autorelease, us calling stop, cue
; 440  :     // freeing itself then us try to release again
; 441  :     //
; 442  : 
; 443  :     dwFlags |= XACT_FLAG_SOUNDCUE_AUTORELEASE; 

  00107	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0010a	83 c8 01	 or	 eax, 1
  0010d	89 45 10	 mov	 DWORD PTR _dwFlags$[ebp], eax

; 444  : 
; 445  :     if (pCue == NULL) {

  00110	83 7d fc 00	 cmp	 DWORD PTR _pCue$[ebp], 0
  00114	75 4a		 jne	 SHORT $L32007

; 446  : 
; 447  :         PLIST_ENTRY pEntry = m_lstCues.Flink;

  00116	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0011c	89 55 f0	 mov	 DWORD PTR _pEntry$32008[ebp], edx
$L32010:

; 448  :         while (pEntry != &m_lstCues) 

  0011f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00122	83 c0 1c	 add	 eax, 28			; 0000001cH
  00125	39 45 f0	 cmp	 DWORD PTR _pEntry$32008[ebp], eax
  00128	74 34		 je	 SHORT $L32011

; 449  :         {
; 450  :             pCue = CONTAINING_RECORD(pEntry,CSoundCue,m_ListEntry);

  0012a	8b 4d f0	 mov	 ecx, DWORD PTR _pEntry$32008[ebp]
  0012d	83 e9 10	 sub	 ecx, 16			; 00000010H
  00130	89 4d fc	 mov	 DWORD PTR _pCue$[ebp], ecx

; 451  :             pEntry = pEntry->Flink;        

  00133	8b 55 f0	 mov	 edx, DWORD PTR _pEntry$32008[ebp]
  00136	8b 02		 mov	 eax, DWORD PTR [edx]
  00138	89 45 f0	 mov	 DWORD PTR _pEntry$32008[ebp], eax

; 452  : 
; 453  :             //
; 454  :             // if the voice has already been associated with another cue, check the layer
; 455  :             // of the current cue with the layer of the already associated cue
; 456  :             //
; 457  :             
; 458  :             if ((pCue->m_dwCueIndex == dwCueIndex) ||
; 459  :                 (dwCueIndex == XACT_SOUNDCUE_INDEX_UNUSED))

  0013b	8b 4d fc	 mov	 ecx, DWORD PTR _pCue$[ebp]
  0013e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00141	3b 55 0c	 cmp	 edx, DWORD PTR _dwCueIndex$[ebp]
  00144	74 06		 je	 SHORT $L32017
  00146	83 7d 0c ff	 cmp	 DWORD PTR _dwCueIndex$[ebp], -1
  0014a	75 10		 jne	 SHORT $L32016
$L32017:

; 460  :             {                
; 461  :                 hr = pCue->Stop(dwFlags);

  0014c	8b 45 10	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0014f	50		 push	 eax
  00150	8b 4d fc	 mov	 ecx, DWORD PTR _pCue$[ebp]
  00153	51		 push	 ecx
  00154	e8 00 00 00 00	 call	 ?Stop@CSoundCue@XACT@@QAGJK@Z ; XACT::CSoundCue::Stop
  00159	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L32016:

; 462  :             }                        
; 463  :             
; 464  :         }

  0015c	eb c1		 jmp	 SHORT $L32010
$L32011:

; 465  : 
; 466  :     } else {

  0015e	eb 10		 jmp	 SHORT $L32018
$L32007:

; 467  : 
; 468  :         hr = pCue->Stop(dwFlags);

  00160	8b 55 10	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00163	52		 push	 edx
  00164	8b 45 fc	 mov	 eax, DWORD PTR _pCue$[ebp]
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 ?Stop@CSoundCue@XACT@@QAGJK@Z ; XACT::CSoundCue::Stop
  0016d	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L32018:

; 469  : 
; 470  :     }
; 471  :     
; 472  :             
; 473  :     DPF_LEAVE_HRESULT(hr);
; 474  :     return hr;

  00170	8b 4d f8	 mov	 ecx, DWORD PTR _hr$[ebp]
  00173	89 4d ec	 mov	 DWORD PTR $T32296[ebp], ecx
  00176	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00179	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0017e	8b 45 ec	 mov	 eax, DWORD PTR $T32296[ebp]

; 475  : 
; 476  : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 10 00	 ret	 16			; 00000010H
?Stop@CSoundBank@XACT@@QAGJKKPAUIXACTSoundCue@@@Z ENDP	; XACT::CSoundBank::Stop
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z
XACTENG	SEGMENT
_this$ = -12
$T32300 = -8
___AutoLock$ = -4
_dwType$ = 8
?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z PROC NEAR ; XACT::CSoundBank::GetNotificationContext, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 483  : 
; 484  :     DPF_ENTER();
; 485  :     ENTER_EXTERNAL_METHOD();    

  00009	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 486  :     return &m_aNotificationContexts[dwType];

  00011	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00014	c1 e0 06	 shl	 eax, 6
  00017	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8d 54 01 28	 lea	 edx, DWORD PTR [ecx+eax+40]
  0001e	89 55 f8	 mov	 DWORD PTR $T32300[ebp], edx
  00021	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00024	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00029	8b 45 f8	 mov	 eax, DWORD PTR $T32300[ebp]

; 487  : 
; 488  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetNotificationContext@CSoundBank@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ENDP ; XACT::CSoundBank::GetNotificationContext
XACTENG	ENDS
PUBLIC	?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z ; XACT::CSoundBank::ProcessRuntimeEvent
PUBLIC	??_C@_0CA@LBFGCMJE@CSoundBank?3?3ProcessRuntimeEvent?$AA@ ; `string'
PUBLIC	??_C@_0DF@BHGNGEON@?$CI0x?$CFx?$CJGot?5stop?5event?5without?5eve@ ; `string'
PUBLIC	??_C@_08BAFMHLII@pContext?$AA@			; `string'
PUBLIC	??0CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::~CAutoIrql
EXTRN	?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z:NEAR ; XACT::CEngine::AddNotificationToPendingList
;	COMDAT ??_C@_0CA@LBFGCMJE@CSoundBank?3?3ProcessRuntimeEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_0CA@LBFGCMJE@CSoundBank?3?3ProcessRuntimeEvent?$AA@ DB 'CSoundBank:'
	DB	':ProcessRuntimeEvent', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DF@BHGNGEON@?$CI0x?$CFx?$CJGot?5stop?5event?5without?5eve@
XACTENG_RD	SEGMENT
??_C@_0DF@BHGNGEON@?$CI0x?$CFx?$CJGot?5stop?5event?5without?5eve@ DB '(0x'
	DB	'%x)Got stop event without ever getting play event', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_08BAFMHLII@pContext?$AA@
XACTENG_RD	SEGMENT
??_C@_08BAFMHLII@pContext?$AA@ DB 'pContext', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z
XACTENG	SEGMENT
tv68 = -28
_this$ = -24
___AutoIrql$ = -20
_pContext$ = -12
_bHandledLocally$ = -8
_dwNotificationEvent$ = -4
_pEventDesc$ = 8
?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z PROC NEAR ; XACT::CSoundBank::ProcessRuntimeEvent, COMDAT
; _this$ = ecx

; 495  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 496  :     DWORD dwNotificationEvent;
; 497  :     BOOL bHandledLocally = FALSE;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bHandledLocally$[ebp], 0

; 498  :     PNOTIFICATION_CONTEXT pContext = NULL;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pContext$[ebp], 0

; 499  : 
; 500  :     AutoIrql();

  00017	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 501  :     switch (pEventDesc->Header.wType) {

  0001f	8b 45 08	 mov	 eax, DWORD PTR _pEventDesc$[ebp]
  00022	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00025	89 4d e4	 mov	 DWORD PTR tv68[ebp], ecx
  00028	83 7d e4 00	 cmp	 DWORD PTR tv68[ebp], 0
  0002c	0f 8c bb 00 00
	00		 jl	 $L32035
  00032	83 7d e4 01	 cmp	 DWORD PTR tv68[ebp], 1
  00036	7e 0b		 jle	 SHORT $L32038
  00038	83 7d e4 02	 cmp	 DWORD PTR tv68[ebp], 2
  0003c	74 3d		 je	 SHORT $L32040
  0003e	e9 aa 00 00 00	 jmp	 $L32035
$L32038:

; 502  : 
; 503  :     case eXACTEvent_PlayWithPitchAndVolumeVariation:
; 504  :     case eXACTEvent_Play:
; 505  : 
; 506  :         dwNotificationEvent = eXACTNotification_Start;

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwNotificationEvent$[ebp], 0

; 507  :         pContext = &m_aNotificationContexts[dwNotificationEvent];

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _dwNotificationEvent$[ebp]
  0004d	c1 e2 06	 shl	 edx, 6
  00050	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8d 4c 10 28	 lea	 ecx, DWORD PTR [eax+edx+40]
  00057	89 4d f4	 mov	 DWORD PTR _pContext$[ebp], ecx

; 508  : 
; 509  :         //
; 510  :         // increment playing count
; 511  :         //
; 512  : 
; 513  :         m_dwPlayingCount++;

  0005a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00060	83 c0 01	 add	 eax, 1
  00063	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 514  : 
; 515  :         if (m_dwPlayingCount == 1) {

  00069	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	83 7a 24 01	 cmp	 DWORD PTR [edx+36], 1
  00070	75 07		 jne	 SHORT $L32039

; 516  : 
; 517  :             //
; 518  :             // when the very first cue starts playing for the first time
; 519  :             // signal a notification that the soundbank has started playing
; 520  :             //
; 521  : 
; 522  :             bHandledLocally = TRUE;

  00072	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bHandledLocally$[ebp], 1
$L32039:

; 523  :         }    
; 524  : 
; 525  :         break;

  00079	eb 72		 jmp	 SHORT $L32035
$L32040:

; 526  : 
; 527  :     case eXACTEvent_Stop:
; 528  : 
; 529  :         dwNotificationEvent = eXACTNotification_Stop;

  0007b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dwNotificationEvent$[ebp], 1

; 530  :         pContext = &m_aNotificationContexts[dwNotificationEvent];

  00082	8b 45 fc	 mov	 eax, DWORD PTR _dwNotificationEvent$[ebp]
  00085	c1 e0 06	 shl	 eax, 6
  00088	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	8d 54 01 28	 lea	 edx, DWORD PTR [ecx+eax+40]
  0008f	89 55 f4	 mov	 DWORD PTR _pContext$[ebp], edx

; 531  : 
; 532  :         if(m_dwPlayingCount) {

  00092	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00095	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00099	74 11		 je	 SHORT $L32041

; 533  :             m_dwPlayingCount--;

  0009b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a1	83 ea 01	 sub	 edx, 1
  000a4	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 534  :         } else {

  000aa	eb 31		 jmp	 SHORT $L32042
$L32041:

; 535  :             DPF_INFO("(0x%x)Got stop event without ever getting play event",this);

  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@LBFGCMJE@CSoundBank?3?3ProcessRuntimeEvent?$AA@
  000b6	68 17 02 00 00	 push	 535			; 00000217H
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  000c0	6a 04		 push	 4
  000c2	6a 09		 push	 9
  000c4	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000c9	83 c4 18	 add	 esp, 24			; 00000018H
  000cc	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	51		 push	 ecx
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DF@BHGNGEON@?$CI0x?$CFx?$CJGot?5stop?5event?5without?5eve@
  000d5	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000da	83 c4 08	 add	 esp, 8
$L32042:

; 536  :         }
; 537  :        
; 538  :         if (m_dwPlayingCount == 0) {

  000dd	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  000e4	75 07		 jne	 SHORT $L32035

; 539  : 
; 540  :             //
; 541  :             // when all cues have stopped playing
; 542  :             // signal a notification
; 543  :             //
; 544  : 
; 545  :             bHandledLocally = TRUE;

  000e6	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bHandledLocally$[ebp], 1
$L32035:

; 546  :         }
; 547  : 
; 548  :         break;
; 549  :     }
; 550  : 
; 551  :     ASSERT(pContext);

  000ed	68 27 02 00 00	 push	 551			; 00000227H
  000f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@BOMMAIMP@c?3?2xbox?2private?2windows?2directx?2@
  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08BAFMHLII@pContext?$AA@
  000fc	33 c0		 xor	 eax, eax
  000fe	83 7d f4 00	 cmp	 DWORD PTR _pContext$[ebp], 0
  00102	0f 94 c0	 sete	 al
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0010b	83 c4 10	 add	 esp, 16			; 00000010H

; 552  : 
; 553  :     if (bHandledLocally) {

  0010e	83 7d f8 00	 cmp	 DWORD PTR _bHandledLocally$[ebp], 0
  00112	74 0f		 je	 SHORT $L32047

; 554  : 
; 555  :         //
; 556  :         // the following routine will only add a notification if it has been registered
; 557  :         //
; 558  : 
; 559  :         g_pEngine->AddNotificationToPendingList(pContext);

  00114	8b 4d f4	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00117	51		 push	 ecx
  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  0011e	e8 00 00 00 00	 call	 ?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z ; XACT::CEngine::AddNotificationToPendingList
$L32047:

; 560  : 
; 561  :     }            
; 562  : 
; 563  : }

  00123	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00126	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c2 04 00	 ret	 4
?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z ENDP ; XACT::CSoundBank::ProcessRuntimeEvent
XACTENG	ENDS
PUBLIC	??0CIrql@XACT@@QAE@XZ				; XACT::CIrql::CIrql
PUBLIC	?Raise@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\drvhlp.h
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@XACT@@QAE@XZ	; XACT::CIrql::CIrql

; 73   :     Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Raise

; 74   : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CIrql@XACT@@QAE@XZ PROC NEAR				; XACT::CIrql::CIrql, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 40   : }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@XACT@@QAE@XZ ENDP				; XACT::CIrql::CIrql
XACTENG	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Raise@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Raise, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L29522

; 45   :     {
; 46   :         m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L29522:

; 47   :     }
; 48   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Raise
XACTENG	ENDS
PUBLIC	?Lower@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Lower
; Function compile flags: /Odt
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   :     Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Lower

; 79   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::~CAutoIrql
XACTENG	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Lower@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Lower, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L29527

; 53   :     {
; 54   :         KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 55   :         m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L29527:

; 56   :     }
; 57   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Lower
XACTENG	ENDS
PUBLIC	?RemoveFromList@CSoundBank@XACT@@AAEXPAVCSoundCue@2@@Z ; XACT::CSoundBank::RemoveFromList
PUBLIC	?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\soundbank.cpp
;	COMDAT ?RemoveFromList@CSoundBank@XACT@@AAEXPAVCSoundCue@2@@Z
XACTENG	SEGMENT
_this$ = -8
___AutoLock$ = -4
_pCue$ = 8
?RemoveFromList@CSoundBank@XACT@@AAEXPAVCSoundCue@2@@Z PROC NEAR ; XACT::CSoundBank::RemoveFromList, COMDAT
; _this$ = ecx

; 569  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 570  :     DPF_ENTER();
; 571  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 572  :     
; 573  :     RemoveEntryList(&pCue->m_ListEntry);

  00011	8b 45 08	 mov	 eax, DWORD PTR _pCue$[ebp]
  00014	83 c0 10	 add	 eax, 16			; 00000010H
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 574  : }

  0001d	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00020	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?RemoveFromList@CSoundBank@XACT@@AAEXPAVCSoundCue@2@@Z ENDP ; XACT::CSoundBank::RemoveFromList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT
_Entry$ = 8
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z PROC NEAR ; XACT::RemoveEntryList, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d6 00 00 00	 push	 214			; 000000d6H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 215  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00018	68 d7 00 00 00	 push	 215			; 000000d7H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 01		 push	 1
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 216  : 
; 217  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 218  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 219  :     Entry->Flink = Entry->Blink = Entry;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx

; 220  : 
; 221  :     return Entry;

  00059	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 222  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ENDP	; XACT::RemoveEntryList
XACTENG	ENDS
END
