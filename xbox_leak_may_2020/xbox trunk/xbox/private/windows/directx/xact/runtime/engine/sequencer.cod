; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\sequencer.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XACTENG_URW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_URW	ENDS
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_04MKCNCBEG@PLAY?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@PMDIOCIB@PLAYWITHPITCHANDAVOLUME?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_04MDHMLCKF@STOP?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@HGFFKACP@PITCHANDAVOLUMEVARIATION?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@KBINAIOO@SETFREQUENCY?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_09CBKIJKIJ@SETVOLUME?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0M@BFBIFGKH@SETHEADROOM?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_06DAJMGEEC@SETLFO?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_05NJDCPNCA@SETEG?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_09CDADFHBB@SETFILTER?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_06HDFBNOJL@MARKER?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_09JPHOMLAD@LOOPSTART?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NCGKAHBC@LOOPEND?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BB@FEHCNDBJ@SETMIXBINVOLUMES?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@PMEPEDAH@SETEFFECTDATA?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@OOAKPKOM@m_paEvents?5?$DN?$DN?5NULL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@MAELMCKG@pEvent?9?$DOm_dwQueueIndex?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0L@LNEMANKP@m_paEvents?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OCAEJJGP@m_dwCapacity?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@DHPHDDHL@m_dwCapacity?5?$DO?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@GBFMEMNC@1?5?$DM?$DN?5dwIndex?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@KIPIJNBO@dwIndex?5?$DM?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0M@MEMCNIF@1?5?$DM?$DN?5dwDest?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@DIJKDJBI@dwDest?5?$DM?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@PIPJPNPG@1?5?$DM?$DN?5dwSource?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BF@KAJPHEPO@dwSource?5?$DM?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07DCPDJDHG@pResult?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BM@EEDIDGKH@pEvent?9?$DOm_dwQueueIndex?5?$DN?$DN?5i?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@NONNBAKB@CPriorityQueue?3?3Verify?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CO@EPJGEJJM@Error?3?5parent?3?5?$CFd?5is?5not?5less?5th@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_04DBOCKKH@pCue?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BB@DOKDJPLE@CEngine?3?3GetTime?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EF@LALMECOH@Sample?5counter?5wrapped?5?$CIas?5it?5sh@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@CBACOJHK@Sample?5counter?5decreased?5unexpec@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@IOMGGDHL@pTrack?9?$DOwSamplesPerSec?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07PGAALCHE@ppEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_06KCBOCDPD@pEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@BHDLDJBJ@CEngine?3?3FreeEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CH@BOMBDLDN@Freeing?5Event?5?$CI0x?$CFx?$CJ?5type?5?$CFd?0?5tr@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_06NFPEFOJH@pTrack?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@LHDKEIH@DispatchEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@FLFGDGMG@pSoundSource?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@EGEHHKKL@CEngine?3?3DispatchEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@ONBADOM@?$CI0x?$CFx?$CJ?5Event?5?$CI?$CFs?$CJ?5not?5recognised@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@JGPIGHNO@pEventContext?9?$DOm_pTrack?9?$DOpSoundS@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BM@JGEKOPOP@CEngine?3?3PrintTimeStampInfo?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EH@MNMNLHNJ@Function?5?$CI?$CFs?$CJ?0?5EventType?5?$CI?$CFs?$CJ?0?5E@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@DFGJFBGM@Function?5?$CI?$CFs?$CJ?0?5EventTime?5?$CI?$CFu?5?$CFu?$CJ@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RW	ENDS
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _IsEqualGUID@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _==@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_AddRef@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_Release@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_BeginScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_EndScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPalette_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _sqrtf@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetEffectData@IDirectSound@@QAGJKKPBXKK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetFrequency@IDirectSoundBuffer@@QAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetVolume@IDirectSoundBuffer@@QAGJJ@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetPitch@IDirectSoundBuffer@@QAGJJ@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetLFO@IDirectSoundBuffer@@QAGJPBU_DSLFODESC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetFilter@IDirectSoundBuffer@@QAGJPBU_DSFILTERDESC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetHeadroom@IDirectSoundBuffer@@QAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetFrequency@IDirectSoundStream@@QAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetVolume@IDirectSoundStream@@QAGJJ@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetPitch@IDirectSoundStream@@QAGJJ@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetLFO@IDirectSoundStream@@QAGJPBU_DSLFODESC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetFilter@IDirectSoundStream@@QAGJPBU_DSFILTERDESC@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetHeadroom@IDirectSoundStream@@QAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?MoveEntryTailList@XACT@@YGPAU_LIST_ENTRY@@PAU2@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_U@YAPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_V@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Initialized@CPriorityQueue@XACT@@QAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsLessThanOrEqual@_TRACK_EVENT_CONTEXT@XACT@@QBEHPB_J@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsLessThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsGreaterThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Compare@_TRACK_EVENT_CONTEXT@XACT@@QBEJPBU12@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CPriorityQueue@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CPriorityQueue@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Initialize@CPriorityQueue@XACT@@QAEJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Remove@CPriorityQueue@XACT@@QAEXPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetNextEventTime@CPriorityQueue@XACT@@QAEHPA_J@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?PopIfLessThanOrEqual@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@PB_J@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Pop@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Push@CPriorityQueue@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AdjustEventTimes@CPriorityQueue@XACT@@QAEX_J@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Move@CPriorityQueue@XACT@@AAEXKK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Swap@CPriorityQueue@XACT@@AAEXKK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Verify@CPriorityQueue@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddCueToSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?InitializeSequencer@CEngine@XACT@@UAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetTime@CEngine@XACT@@QAEXPA_J@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetEvent@CEngine@XACT@@AAEJPAPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?FreeAllEvents@CEngine@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetTimeOffset@CEngine@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Enqueue@CEngine@XACT@@UAGJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Dispatch@CEngine@XACT@@EAGJXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?DispatchEventsUntil@CEngine@XACT@@EAGJPB_J0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?DispatchEvent@CEngine@XACT@@EAGJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CreateEventVariation@CEngine@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetTimer@CEngine@XACT@@AAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?DPCTimerCallBack@CEngine@XACT@@CGXPAU_KDPC@@PAX11@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_7CRefCount@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XACTENG_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_g_aszXACTEventNames
PUBLIC	??_C@_04MKCNCBEG@PLAY?$AA@			; `string'
PUBLIC	??_C@_0BI@PMDIOCIB@PLAYWITHPITCHANDAVOLUME?$AA@	; `string'
PUBLIC	??_C@_04MDHMLCKF@STOP?$AA@			; `string'
PUBLIC	??_C@_0BJ@HGFFKACP@PITCHANDAVOLUMEVARIATION?$AA@ ; `string'
PUBLIC	??_C@_0N@KBINAIOO@SETFREQUENCY?$AA@		; `string'
PUBLIC	??_C@_09CBKIJKIJ@SETVOLUME?$AA@			; `string'
PUBLIC	??_C@_0M@BFBIFGKH@SETHEADROOM?$AA@		; `string'
PUBLIC	??_C@_06DAJMGEEC@SETLFO?$AA@			; `string'
PUBLIC	??_C@_05NJDCPNCA@SETEG?$AA@			; `string'
PUBLIC	??_C@_09CDADFHBB@SETFILTER?$AA@			; `string'
PUBLIC	??_C@_06HDFBNOJL@MARKER?$AA@			; `string'
PUBLIC	??_C@_09JPHOMLAD@LOOPSTART?$AA@			; `string'
PUBLIC	??_C@_07NCGKAHBC@LOOPEND?$AA@			; `string'
PUBLIC	??_C@_0BB@FEHCNDBJ@SETMIXBINVOLUMES?$AA@	; `string'
PUBLIC	??_C@_0O@PMEPEDAH@SETEFFECTDATA?$AA@		; `string'
PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
XACTENG_RD	ENDS
;	COMDAT ??_C@_04MKCNCBEG@PLAY?$AA@
XACTENG_RD	SEGMENT
??_C@_04MKCNCBEG@PLAY?$AA@ DB 'PLAY', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@PMDIOCIB@PLAYWITHPITCHANDAVOLUME?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@PMDIOCIB@PLAYWITHPITCHANDAVOLUME?$AA@ DB 'PLAYWITHPITCHANDAVOLU'
	DB	'ME', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_04MDHMLCKF@STOP?$AA@
XACTENG_RD	SEGMENT
??_C@_04MDHMLCKF@STOP?$AA@ DB 'STOP', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@HGFFKACP@PITCHANDAVOLUMEVARIATION?$AA@
XACTENG_RD	SEGMENT
??_C@_0BJ@HGFFKACP@PITCHANDAVOLUMEVARIATION?$AA@ DB 'PITCHANDAVOLUMEVARIA'
	DB	'TION', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@KBINAIOO@SETFREQUENCY?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@KBINAIOO@SETFREQUENCY?$AA@ DB 'SETFREQUENCY', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_09CBKIJKIJ@SETVOLUME?$AA@
XACTENG_RD	SEGMENT
??_C@_09CBKIJKIJ@SETVOLUME?$AA@ DB 'SETVOLUME', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0M@BFBIFGKH@SETHEADROOM?$AA@
XACTENG_RD	SEGMENT
??_C@_0M@BFBIFGKH@SETHEADROOM?$AA@ DB 'SETHEADROOM', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_06DAJMGEEC@SETLFO?$AA@
XACTENG_RD	SEGMENT
??_C@_06DAJMGEEC@SETLFO?$AA@ DB 'SETLFO', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_05NJDCPNCA@SETEG?$AA@
XACTENG_RD	SEGMENT
??_C@_05NJDCPNCA@SETEG?$AA@ DB 'SETEG', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_09CDADFHBB@SETFILTER?$AA@
XACTENG_RD	SEGMENT
??_C@_09CDADFHBB@SETFILTER?$AA@ DB 'SETFILTER', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_06HDFBNOJL@MARKER?$AA@
XACTENG_RD	SEGMENT
??_C@_06HDFBNOJL@MARKER?$AA@ DB 'MARKER', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_09JPHOMLAD@LOOPSTART?$AA@
XACTENG_RD	SEGMENT
??_C@_09JPHOMLAD@LOOPSTART?$AA@ DB 'LOOPSTART', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NCGKAHBC@LOOPEND?$AA@
XACTENG_RD	SEGMENT
??_C@_07NCGKAHBC@LOOPEND?$AA@ DB 'LOOPEND', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BB@FEHCNDBJ@SETMIXBINVOLUMES?$AA@
XACTENG_RD	SEGMENT
??_C@_0BB@FEHCNDBJ@SETMIXBINVOLUMES?$AA@ DB 'SETMIXBINVOLUMES', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@PMEPEDAH@SETEFFECTDATA?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@PMEPEDAH@SETEFFECTDATA?$AA@ DB 'SETEFFECTDATA', 00H ; `string'
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT
_g_aszXACTEventNames DD FLAT:??_C@_04MKCNCBEG@PLAY?$AA@
	DD	FLAT:??_C@_0BI@PMDIOCIB@PLAYWITHPITCHANDAVOLUME?$AA@
	DD	FLAT:??_C@_04MDHMLCKF@STOP?$AA@
	DD	FLAT:??_C@_0BJ@HGFFKACP@PITCHANDAVOLUMEVARIATION?$AA@
	DD	FLAT:??_C@_0N@KBINAIOO@SETFREQUENCY?$AA@
	DD	FLAT:??_C@_09CBKIJKIJ@SETVOLUME?$AA@
	DD	FLAT:??_C@_0M@BFBIFGKH@SETHEADROOM?$AA@
	DD	FLAT:??_C@_06DAJMGEEC@SETLFO?$AA@
	DD	FLAT:??_C@_05NJDCPNCA@SETEG?$AA@
	DD	FLAT:??_C@_09CDADFHBB@SETFILTER?$AA@
	DD	FLAT:??_C@_06HDFBNOJL@MARKER?$AA@
	DD	FLAT:??_C@_09JPHOMLAD@LOOPSTART?$AA@
	DD	FLAT:??_C@_07NCGKAHBC@LOOPEND?$AA@
	DD	FLAT:??_C@_0BB@FEHCNDBJ@SETMIXBINVOLUMES?$AA@
	DD	FLAT:??_C@_0O@PMEPEDAH@SETEFFECTDATA?$AA@
XACTENG_RW	ENDS
PUBLIC	?IsLessThanOrEqual@_TRACK_EVENT_CONTEXT@XACT@@QBEHPB_J@Z ; XACT::_TRACK_EVENT_CONTEXT::IsLessThanOrEqual
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
;	COMDAT ?IsLessThanOrEqual@_TRACK_EVENT_CONTEXT@XACT@@QBEHPB_J@Z
XACTENG	SEGMENT
tv66 = -16
tv70 = -12
tv69 = -8
_this$ = -4
_time$ = 8
?IsLessThanOrEqual@_TRACK_EVENT_CONTEXT@XACT@@QBEHPB_J@Z PROC NEAR ; XACT::_TRACK_EVENT_CONTEXT::IsLessThanOrEqual, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 60   :     return m_rtTimeStamp <= *time;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  00012	89 4d f4	 mov	 DWORD PTR tv70[ebp], ecx
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00018	8b 45 f4	 mov	 eax, DWORD PTR tv70[ebp]
  0001b	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0001e	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00021	7f 18		 jg	 SHORT $L32502
  00023	7c 0d		 jl	 SHORT $L32504
  00025	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00028	8b 45 f4	 mov	 eax, DWORD PTR tv70[ebp]
  0002b	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0002e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00030	77 09		 ja	 SHORT $L32502
$L32504:
  00032	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00039	eb 07		 jmp	 SHORT $L32503
$L32502:
  0003b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$L32503:
  00042	8b 45 f0	 mov	 eax, DWORD PTR tv66[ebp]

; 61   : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?IsLessThanOrEqual@_TRACK_EVENT_CONTEXT@XACT@@QBEHPB_J@Z ENDP ; XACT::_TRACK_EVENT_CONTEXT::IsLessThanOrEqual
XACTENG	ENDS
PUBLIC	?Compare@_TRACK_EVENT_CONTEXT@XACT@@QBEJPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::Compare
; Function compile flags: /Odt
;	COMDAT ?Compare@_TRACK_EVENT_CONTEXT@XACT@@QBEJPBU12@@Z
XACTENG	SEGMENT
tv86 = -20
tv85 = -16
tv73 = -12
tv72 = -8
_this$ = -4
_other$ = 8
?Compare@_TRACK_EVENT_CONTEXT@XACT@@QBEJPBU12@@Z PROC NEAR ; XACT::_TRACK_EVENT_CONTEXT::Compare, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   :     // Check time
; 76   :     if(m_rtTimeStamp < other->m_rtTimeStamp){

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _other$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR tv72[ebp], eax
  00012	89 4d f4	 mov	 DWORD PTR tv73[ebp], ecx
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv72[ebp]
  00018	8b 45 f4	 mov	 eax, DWORD PTR tv73[ebp]
  0001b	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  0001e	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  00021	7f 15		 jg	 SHORT $L31863
  00023	7c 0e		 jl	 SHORT $L32508
  00025	8b 55 f8	 mov	 edx, DWORD PTR tv72[ebp]
  00028	8b 45 f4	 mov	 eax, DWORD PTR tv73[ebp]
  0002b	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  0002e	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00031	73 05		 jae	 SHORT $L31863
$L32508:

; 77   :         return -1;

  00033	83 c8 ff	 or	 eax, -1
  00036	eb 33		 jmp	 SHORT $L31862
$L31863:

; 78   :     }
; 79   :     if(m_rtTimeStamp > other->m_rtTimeStamp){

  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  0003e	89 55 f0	 mov	 DWORD PTR tv85[ebp], edx
  00041	89 45 ec	 mov	 DWORD PTR tv86[ebp], eax
  00044	8b 4d f0	 mov	 ecx, DWORD PTR tv85[ebp]
  00047	8b 55 ec	 mov	 edx, DWORD PTR tv86[ebp]
  0004a	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0004d	3b 42 1c	 cmp	 eax, DWORD PTR [edx+28]
  00050	7c 17		 jl	 SHORT $L31864
  00052	7f 0e		 jg	 SHORT $L32509
  00054	8b 4d f0	 mov	 ecx, DWORD PTR tv85[ebp]
  00057	8b 55 ec	 mov	 edx, DWORD PTR tv86[ebp]
  0005a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0005d	3b 42 18	 cmp	 eax, DWORD PTR [edx+24]
  00060	76 07		 jbe	 SHORT $L31864
$L32509:

; 80   :         return 1;

  00062	b8 01 00 00 00	 mov	 eax, 1
  00067	eb 02		 jmp	 SHORT $L31862
$L31864:

; 81   :     }
; 82   :     return 0;

  00069	33 c0		 xor	 eax, eax
$L31862:

; 83   : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?Compare@_TRACK_EVENT_CONTEXT@XACT@@QBEJPBU12@@Z ENDP	; XACT::_TRACK_EVENT_CONTEXT::Compare
XACTENG	ENDS
PUBLIC	??0CPriorityQueue@XACT@@QAE@XZ			; XACT::CPriorityQueue::CPriorityQueue
; Function compile flags: /Odt
;	COMDAT ??0CPriorityQueue@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CPriorityQueue@XACT@@QAE@XZ PROC NEAR		; XACT::CPriorityQueue::CPriorityQueue, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 110  :     DPF_ENTER();
; 111  :     m_paEvents = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 112  :     m_dwCapacity = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 113  :     m_dwSize = 0;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 114  : 
; 115  :     DPF_LEAVE_VOID();
; 116  : }

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??0CPriorityQueue@XACT@@QAE@XZ ENDP			; XACT::CPriorityQueue::CPriorityQueue
XACTENG	ENDS
PUBLIC	??1CPriorityQueue@XACT@@QAE@XZ			; XACT::CPriorityQueue::~CPriorityQueue
; Function compile flags: /Odt
;	COMDAT ??1CPriorityQueue@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -8
$T32516 = -4
??1CPriorityQueue@XACT@@QAE@XZ PROC NEAR		; XACT::CPriorityQueue::~CPriorityQueue, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 123  :     DPF_ENTER();
; 124  :     if (m_paEvents) 

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 25		 je	 SHORT $L31870

; 125  :     {
; 126  :         DELETE_A(m_paEvents);

  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00017	74 1d		 je	 SHORT $L31870
  00019	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	89 45 fc	 mov	 DWORD PTR $T32516[ebp], eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR $T32516[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00030	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L31870:

; 127  :     }
; 128  : 
; 129  :     DPF_LEAVE_VOID();
; 130  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
??1CPriorityQueue@XACT@@QAE@XZ ENDP			; XACT::CPriorityQueue::~CPriorityQueue
XACTENG	ENDS
EXTRN	_XactMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??_V@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 105  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  :     using namespace XACT;
; 107  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 108  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
XACTENG	ENDS
PUBLIC	??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BD@OOAKPKOM@m_paEvents?5?$DN?$DN?5NULL?$AA@ ; `string'
PUBLIC	?Initialize@CPriorityQueue@XACT@@QAEJK@Z	; XACT::CPriorityQueue::Initialize
EXTRN	?DwDbgAssert@XACT@@YAXHPBD0I@Z:NEAR		; XACT::DwDbgAssert
;	COMDAT ??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
XACTENG_RD	SEGMENT
??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\engine\sequencer.cpp', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@OOAKPKOM@m_paEvents?5?$DN?$DN?5NULL?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@OOAKPKOM@m_paEvents?5?$DN?$DN?5NULL?$AA@ DB 'm_paEvents == NULL'
	DB	00H						; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Initialize@CPriorityQueue@XACT@@QAEJK@Z
XACTENG	SEGMENT
_this$ = -12
$T32523 = -8
_hr$ = -4
_dwMaxSize$ = 8
?Initialize@CPriorityQueue@XACT@@QAEJK@Z PROC NEAR	; XACT::CPriorityQueue::Initialize, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 137  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 138  :     DPF_ENTER();
; 139  :     ASSERT(m_paEvents == NULL);

  00010	68 8b 00 00 00	 push	 139			; 0000008bH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OOAKPKOM@m_paEvents?5?$DN?$DN?5NULL?$AA@
  0001f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00022	33 c9		 xor	 ecx, ecx
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	0f 95 c1	 setne	 cl
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 140  : 
; 141  :     hr = HRFROMP(m_paEvents = NEW_A(PTRACK_EVENT_CONTEXT,dwMaxSize));

  00033	8b 55 08	 mov	 edx, DWORD PTR _dwMaxSize$[ebp]
  00036	c1 e2 02	 shl	 edx, 2
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 f8	 mov	 DWORD PTR $T32523[ebp], eax
  00045	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 4d f8	 mov	 ecx, DWORD PTR $T32523[ebp]
  0004b	89 08		 mov	 DWORD PTR [eax], ecx
  0004d	33 d2		 xor	 edx, edx
  0004f	83 7d f8 00	 cmp	 DWORD PTR $T32523[ebp], 0
  00053	0f 95 c2	 setne	 dl
  00056	4a		 dec	 edx
  00057	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  0005d	89 55 fc	 mov	 DWORD PTR _hr$[ebp], edx

; 142  : 
; 143  :     if (SUCCEEDED(hr)) {

  00060	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00064	7c 09		 jl	 SHORT $L31887

; 144  : 
; 145  :         m_dwCapacity = dwMaxSize;

  00066	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _dwMaxSize$[ebp]
  0006c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$L31887:

; 146  :         VERIFY_PRIORITYQUEUE;
; 147  : 
; 148  :     }
; 149  : 
; 150  :     DPF_LEAVE_HRESULT(hr);
; 151  : 
; 152  :     return hr;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 153  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?Initialize@CPriorityQueue@XACT@@QAEJK@Z ENDP		; XACT::CPriorityQueue::Initialize
XACTENG	ENDS
EXTRN	_XactMemAlloc@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??_U@YAPAXI@Z
XACTENG	SEGMENT
_cbBuffer$ = 8
??_U@YAPAXI@Z PROC NEAR					; operator new[], COMDAT

; 77   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :     using namespace XACT;
; 79   :     return XactMemAlloc(cbBuffer, FALSE);

  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _XactMemAlloc@8

; 80   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??_U@YAPAXI@Z ENDP					; operator new[]
XACTENG	ENDS
PUBLIC	??_C@_0BH@MAELMCKG@pEvent?9?$DOm_dwQueueIndex?$AA@ ; `string'
PUBLIC	?Remove@CPriorityQueue@XACT@@QAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::Remove
PUBLIC	?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ ; XACT::CPriorityQueue::Pop2
PUBLIC	?Swap@CPriorityQueue@XACT@@AAEXKK@Z		; XACT::CPriorityQueue::Swap
;	COMDAT ??_C@_0BH@MAELMCKG@pEvent?9?$DOm_dwQueueIndex?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
XACTENG_RD	SEGMENT
??_C@_0BH@MAELMCKG@pEvent?9?$DOm_dwQueueIndex?$AA@ DB 'pEvent->m_dwQueueI'
	DB	'ndex', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Remove@CPriorityQueue@XACT@@QAEXPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -12
_parent$31899 = -8
_test_node$ = -4
_pEvent$ = 8
?Remove@CPriorityQueue@XACT@@QAEXPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CPriorityQueue::Remove, COMDAT
; _this$ = ecx

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 160  :     DPF_ENTER();
; 161  :     VERIFY_PRIORITYQUEUE;
; 162  : 
; 163  :     //
; 164  :     // Bubble the event to the top.
; 165  :     //
; 166  : 
; 167  :     ASSERT(pEvent->m_dwQueueIndex);

  00009	68 a7 00 00 00	 push	 167			; 000000a7H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@MAELMCKG@pEvent?9?$DOm_dwQueueIndex?$AA@
  00018	8b 45 08	 mov	 eax, DWORD PTR _pEvent$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00021	0f 94 c1	 sete	 cl
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 168  : 
; 169  :     DWORD test_node = pEvent->m_dwQueueIndex;

  0002d	8b 55 08	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00030	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00033	89 45 fc	 mov	 DWORD PTR _test_node$[ebp], eax
$L31897:

; 170  :     while(test_node > 1){

  00036	83 7d fc 01	 cmp	 DWORD PTR _test_node$[ebp], 1
  0003a	76 20		 jbe	 SHORT $L31898

; 171  :         DWORD parent = test_node / 2;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _test_node$[ebp]
  0003f	d1 e9		 shr	 ecx, 1
  00041	89 4d f8	 mov	 DWORD PTR _parent$31899[ebp], ecx

; 172  :         Swap(test_node, parent);

  00044	8b 55 f8	 mov	 edx, DWORD PTR _parent$31899[ebp]
  00047	52		 push	 edx
  00048	8b 45 fc	 mov	 eax, DWORD PTR _test_node$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?Swap@CPriorityQueue@XACT@@AAEXKK@Z ; XACT::CPriorityQueue::Swap

; 173  :         test_node = parent;

  00054	8b 4d f8	 mov	 ecx, DWORD PTR _parent$31899[ebp]
  00057	89 4d fc	 mov	 DWORD PTR _test_node$[ebp], ecx

; 174  :     }

  0005a	eb da		 jmp	 SHORT $L31897
$L31898:

; 175  : 
; 176  :     //
; 177  :     // Remove from queue - this balances the queue again
; 178  :     //
; 179  : 
; 180  :     Pop2();

  0005c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ ; XACT::CPriorityQueue::Pop2

; 181  : 
; 182  :     VERIFY_PRIORITYQUEUE;
; 183  : 
; 184  :     DPF_LEAVE_VOID();
; 185  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?Remove@CPriorityQueue@XACT@@QAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CPriorityQueue::Remove
XACTENG	ENDS
PUBLIC	?GetNextEventTime@CPriorityQueue@XACT@@QAEHPA_J@Z ; XACT::CPriorityQueue::GetNextEventTime
PUBLIC	?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
; Function compile flags: /Odt
;	COMDAT ?GetNextEventTime@CPriorityQueue@XACT@@QAEHPA_J@Z
XACTENG	SEGMENT
_this$ = -4
_pTime$ = 8
?GetNextEventTime@CPriorityQueue@XACT@@QAEHPA_J@Z PROC NEAR ; XACT::CPriorityQueue::GetNextEventTime, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 192  : 
; 193  :     DPF_ENTER();
; 194  :     VERIFY_PRIORITYQUEUE;
; 195  :     if(!m_dwSize){

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000e	75 04		 jne	 SHORT $L31906

; 196  :         return false;

  00010	33 c0		 xor	 eax, eax
  00012	eb 1d		 jmp	 SHORT $L31904
$L31906:

; 197  :     }
; 198  : 
; 199  :     *pTime = At(1)->m_rtTimeStamp;

  00014	6a 01		 push	 1
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pTime$[ebp]
  00021	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00024	89 11		 mov	 DWORD PTR [ecx], edx
  00026	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 200  :     return true;

  0002c	b8 01 00 00 00	 mov	 eax, 1
$L31904:

; 201  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?GetNextEventTime@CPriorityQueue@XACT@@QAEHPA_J@Z ENDP	; XACT::CPriorityQueue::GetNextEventTime
XACTENG	ENDS
PUBLIC	?PopIfLessThanOrEqual@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@PB_J@Z ; XACT::CPriorityQueue::PopIfLessThanOrEqual
; Function compile flags: /Odt
;	COMDAT ?PopIfLessThanOrEqual@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@PB_J@Z
XACTENG	SEGMENT
_this$ = -8
_pResult$ = -4
_rtTime$ = 8
?PopIfLessThanOrEqual@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@PB_J@Z PROC NEAR ; XACT::CPriorityQueue::PopIfLessThanOrEqual, COMDAT
; _this$ = ecx

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 
; 209  :     DPF_ENTER();
; 210  :     VERIFY_PRIORITYQUEUE;
; 211  :     PTRACK_EVENT_CONTEXT pResult = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pResult$[ebp], 0

; 212  : 
; 213  :     if(m_dwSize && At(1)->IsLessThanOrEqual(rtTime)){

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00017	74 24		 je	 SHORT $L31913
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _rtTime$[ebp]
  0001c	51		 push	 ecx
  0001d	6a 01		 push	 1
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 ?IsLessThanOrEqual@_TRACK_EVENT_CONTEXT@XACT@@QBEHPB_J@Z ; XACT::_TRACK_EVENT_CONTEXT::IsLessThanOrEqual
  0002e	85 c0		 test	 eax, eax
  00030	74 0b		 je	 SHORT $L31913

; 214  :         pResult = Pop2();

  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ ; XACT::CPriorityQueue::Pop2
  0003a	89 45 fc	 mov	 DWORD PTR _pResult$[ebp], eax
$L31913:

; 215  :     }
; 216  : 
; 217  :     return pResult;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _pResult$[ebp]

; 218  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?PopIfLessThanOrEqual@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@PB_J@Z ENDP ; XACT::CPriorityQueue::PopIfLessThanOrEqual
XACTENG	ENDS
PUBLIC	?Pop@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@XZ ; XACT::CPriorityQueue::Pop
; Function compile flags: /Odt
;	COMDAT ?Pop@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@XZ
XACTENG	SEGMENT
_this$ = -8
_pResult$ = -4
?Pop@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@XZ PROC NEAR ; XACT::CPriorityQueue::Pop, COMDAT
; _this$ = ecx

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 225  : 
; 226  :     DPF_ENTER();
; 227  :     VERIFY_PRIORITYQUEUE;
; 228  :     PTRACK_EVENT_CONTEXT pResult = Pop2();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ ; XACT::CPriorityQueue::Pop2
  00011	89 45 fc	 mov	 DWORD PTR _pResult$[ebp], eax

; 229  :     return pResult;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _pResult$[ebp]

; 230  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?Pop@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@XZ ENDP ; XACT::CPriorityQueue::Pop
XACTENG	ENDS
PUBLIC	?IsLessThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::IsLessThan
PUBLIC	?IsGreaterThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::IsGreaterThan
PUBLIC	?Move@CPriorityQueue@XACT@@AAEXKK@Z		; XACT::CPriorityQueue::Move
; Function compile flags: /Odt
;	COMDAT ?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ
XACTENG	SEGMENT
_this$ = -16
_child$31928 = -12
_pTop$ = -8
_test_node$ = -4
?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ PROC NEAR ; XACT::CPriorityQueue::Pop2, COMDAT
; _this$ = ecx

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 237  : 
; 238  :     DPF_ENTER();
; 239  : 
; 240  :     //
; 241  :     // Don't verify the queue, because it won't be valid if we're called from Remove
; 242  :     // (Because Remove has bubbled the item it wants to remove to the top of the heap.)
; 243  : 
; 244  :     if(m_dwSize <= 0){

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	77 07		 ja	 SHORT $L31922

; 245  :         return NULL;

  00012	33 c0		 xor	 eax, eax
  00014	e9 ed 00 00 00	 jmp	 $L31921
$L31922:

; 246  :     }
; 247  : 
; 248  :     // Return the top of the queue, and
; 249  :     // adjust the heap 
; 250  : 
; 251  :     PTRACK_EVENT_CONTEXT pTop = At(1);

  00019	6a 01		 push	 1
  0001b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  00023	89 45 f8	 mov	 DWORD PTR _pTop$[ebp], eax

; 252  :     Move(1, m_dwSize); // last element can be moved because it has no children, doesn't leave hole.

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	52		 push	 edx
  0002d	6a 01		 push	 1
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?Move@CPriorityQueue@XACT@@AAEXKK@Z ; XACT::CPriorityQueue::Move

; 253  : 
; 254  :     DWORD test_node = 1;

  00037	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _test_node$[ebp], 1
$L31926:

; 255  :     for(;;){
; 256  :         DWORD child;
; 257  :         if ( ( test_node * 2 ) >= m_dwSize )

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _test_node$[ebp]
  00041	d1 e0		 shl	 eax, 1
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00049	72 05		 jb	 SHORT $L31929

; 258  :             break;

  0004b	e9 9a 00 00 00	 jmp	 $L31927
$L31929:

; 259  :         if ( ( test_node * 2 + 1) >= m_dwSize )

  00050	8b 55 fc	 mov	 edx, DWORD PTR _test_node$[ebp]
  00053	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0005d	72 0a		 jb	 SHORT $L31930

; 260  :             child = test_node * 2;

  0005f	8b 55 fc	 mov	 edx, DWORD PTR _test_node$[ebp]
  00062	d1 e2		 shl	 edx, 1
  00064	89 55 f4	 mov	 DWORD PTR _child$31928[ebp], edx

; 261  :         else if ( At( test_node * 2)->IsLessThan(At(test_node * 2 + 1)) )

  00067	eb 3e		 jmp	 SHORT $L31931
$L31930:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _test_node$[ebp]
  0006c	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  00070	51		 push	 ecx
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  00079	50		 push	 eax
  0007a	8b 55 fc	 mov	 edx, DWORD PTR _test_node$[ebp]
  0007d	d1 e2		 shl	 edx, 1
  0007f	52		 push	 edx
  00080	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  00088	8b c8		 mov	 ecx, eax
  0008a	e8 00 00 00 00	 call	 ?IsLessThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::IsLessThan
  0008f	85 c0		 test	 eax, eax
  00091	74 0a		 je	 SHORT $L31932

; 262  :             child = test_node * 2;

  00093	8b 45 fc	 mov	 eax, DWORD PTR _test_node$[ebp]
  00096	d1 e0		 shl	 eax, 1
  00098	89 45 f4	 mov	 DWORD PTR _child$31928[ebp], eax

; 263  :         else

  0009b	eb 0a		 jmp	 SHORT $L31931
$L31932:

; 264  :             child = test_node * 2 + 1;

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _test_node$[ebp]
  000a0	8d 54 09 01	 lea	 edx, DWORD PTR [ecx+ecx+1]
  000a4	89 55 f4	 mov	 DWORD PTR _child$31928[ebp], edx
$L31931:

; 265  :         if ( At(test_node)->IsGreaterThan(At(child)) ) {

  000a7	8b 45 f4	 mov	 eax, DWORD PTR _child$31928[ebp]
  000aa	50		 push	 eax
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  000b3	50		 push	 eax
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _test_node$[ebp]
  000b7	51		 push	 ecx
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  000c0	8b c8		 mov	 ecx, eax
  000c2	e8 00 00 00 00	 call	 ?IsGreaterThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::IsGreaterThan
  000c7	85 c0		 test	 eax, eax
  000c9	74 18		 je	 SHORT $L31934

; 266  :             Swap(test_node, child);

  000cb	8b 55 f4	 mov	 edx, DWORD PTR _child$31928[ebp]
  000ce	52		 push	 edx
  000cf	8b 45 fc	 mov	 eax, DWORD PTR _test_node$[ebp]
  000d2	50		 push	 eax
  000d3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	e8 00 00 00 00	 call	 ?Swap@CPriorityQueue@XACT@@AAEXKK@Z ; XACT::CPriorityQueue::Swap

; 267  :             test_node = child;

  000db	8b 4d f4	 mov	 ecx, DWORD PTR _child$31928[ebp]
  000de	89 4d fc	 mov	 DWORD PTR _test_node$[ebp], ecx

; 268  :         } else

  000e1	eb 02		 jmp	 SHORT $L31935
$L31934:

; 269  :             break;

  000e3	eb 05		 jmp	 SHORT $L31927
$L31935:

; 270  :     }

  000e5	e9 54 ff ff ff	 jmp	 $L31926
$L31927:

; 271  : 
; 272  :     //
; 273  :     // no longer in queue
; 274  :     //
; 275  : 
; 276  :     --m_dwSize;

  000ea	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ed	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f0	83 e8 01	 sub	 eax, 1
  000f3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 277  :     pTop->m_dwQueueIndex = 0; 

  000f9	8b 55 f8	 mov	 edx, DWORD PTR _pTop$[ebp]
  000fc	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 278  : 
; 279  :     VERIFY_PRIORITYQUEUE;
; 280  :     return pTop;

  00103	8b 45 f8	 mov	 eax, DWORD PTR _pTop$[ebp]
$L31921:

; 281  : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?Pop2@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@XZ ENDP ; XACT::CPriorityQueue::Pop2
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?IsLessThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z
XACTENG	SEGMENT
_this$ = -4
_other$ = 8
?IsLessThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z PROC NEAR ; XACT::_TRACK_EVENT_CONTEXT::IsLessThan, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 65   :     return Compare(other) == -1;

  00007	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Compare@_TRACK_EVENT_CONTEXT@XACT@@QBEJPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::Compare
  00013	83 e8 ff	 sub	 eax, -1
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 66   : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?IsLessThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ENDP ; XACT::_TRACK_EVENT_CONTEXT::IsLessThan
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?IsGreaterThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z
XACTENG	SEGMENT
_this$ = -4
_other$ = 8
?IsGreaterThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z PROC NEAR ; XACT::_TRACK_EVENT_CONTEXT::IsGreaterThan, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   :     return Compare(other) == 1;

  00007	8b 45 08	 mov	 eax, DWORD PTR _other$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?Compare@_TRACK_EVENT_CONTEXT@XACT@@QBEJPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::Compare
  00013	83 e8 01	 sub	 eax, 1
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 71   : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?IsGreaterThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ENDP ; XACT::_TRACK_EVENT_CONTEXT::IsGreaterThan
XACTENG	ENDS
PUBLIC	??_C@_0L@LNEMANKP@m_paEvents?$AA@		; `string'
PUBLIC	??_C@_0N@OCAEJJGP@m_dwCapacity?$AA@		; `string'
PUBLIC	??_C@_0BJ@DHPHDDHL@m_dwCapacity?5?$DO?$DN?5m_dwSize?$AA@ ; `string'
PUBLIC	?Push@CPriorityQueue@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::Push
PUBLIC	?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::AtPut
;	COMDAT ??_C@_0L@LNEMANKP@m_paEvents?$AA@
XACTENG_RD	SEGMENT
??_C@_0L@LNEMANKP@m_paEvents?$AA@ DB 'm_paEvents', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OCAEJJGP@m_dwCapacity?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@OCAEJJGP@m_dwCapacity?$AA@ DB 'm_dwCapacity', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@DHPHDDHL@m_dwCapacity?5?$DO?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT
??_C@_0BJ@DHPHDDHL@m_dwCapacity?5?$DO?$DN?5m_dwSize?$AA@ DB 'm_dwCapacity'
	DB	' >= m_dwSize', 00H				; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Push@CPriorityQueue@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -16
_parent_node$31953 = -12
_hr$ = -8
_test_node$ = -4
_pEvent$ = 8
?Push@CPriorityQueue@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CPriorityQueue::Push, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 288  :     HRESULT hr = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 289  : 
; 290  :     DPF_ENTER();
; 291  :     VERIFY_PRIORITYQUEUE;
; 292  :     ASSERT(m_paEvents);

  00010	68 24 01 00 00	 push	 292			; 00000124H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@LNEMANKP@m_paEvents?$AA@
  0001f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00022	33 c9		 xor	 ecx, ecx
  00024	83 38 00	 cmp	 DWORD PTR [eax], 0
  00027	0f 94 c1	 sete	 cl
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 293  :     ASSERT(m_dwCapacity);

  00033	68 25 01 00 00	 push	 293			; 00000125H
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OCAEJJGP@m_dwCapacity?$AA@
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	33 c0		 xor	 eax, eax
  00047	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0004b	0f 94 c0	 sete	 al
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00054	83 c4 10	 add	 esp, 16			; 00000010H

; 294  :     ASSERT(m_dwCapacity >= m_dwSize);

  00057	68 26 01 00 00	 push	 294			; 00000126H
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DHPHDDHL@m_dwCapacity?5?$DO?$DN?5m_dwSize?$AA@
  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0006f	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00072	1b c9		 sbb	 ecx, ecx
  00074	f7 d9		 neg	 ecx
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 295  : 
; 296  :     if (m_dwCapacity <= m_dwSize){

  0007f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00082	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00085	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00088	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008b	77 07		 ja	 SHORT $L31947

; 297  :         return E_OUTOFMEMORY;

  0008d	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00092	eb 7c		 jmp	 SHORT $L31940
$L31947:

; 298  :     }
; 299  : 
; 300  :     //
; 301  :     // At and AtPut are one-based, so pre-increment
; 302  :     //
; 303  : 
; 304  :     AtPut(++m_dwSize, pEvent); 

  00094	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009a	83 c0 01	 add	 eax, 1
  0009d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000a3	8b 55 08	 mov	 edx, DWORD PTR _pEvent$[ebp]
  000a6	52		 push	 edx
  000a7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ad	51		 push	 ecx
  000ae	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::AtPut

; 305  : 
; 306  :     // Bubble into proper position
; 307  :     DWORD test_node = m_dwSize;

  000b6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000bc	89 45 fc	 mov	 DWORD PTR _test_node$[ebp], eax
$L31951:

; 308  :     while ( test_node > 1 ) {

  000bf	83 7d fc 01	 cmp	 DWORD PTR _test_node$[ebp], 1
  000c3	76 48		 jbe	 SHORT $L31952

; 309  :         DWORD parent_node = test_node/2;

  000c5	8b 4d fc	 mov	 ecx, DWORD PTR _test_node$[ebp]
  000c8	d1 e9		 shr	 ecx, 1
  000ca	89 4d f4	 mov	 DWORD PTR _parent_node$31953[ebp], ecx

; 310  :         if ( At(parent_node)->IsGreaterThan(At(test_node)) ){

  000cd	8b 55 fc	 mov	 edx, DWORD PTR _test_node$[ebp]
  000d0	52		 push	 edx
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  000d9	50		 push	 eax
  000da	8b 45 f4	 mov	 eax, DWORD PTR _parent_node$31953[ebp]
  000dd	50		 push	 eax
  000de	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  000e6	8b c8		 mov	 ecx, eax
  000e8	e8 00 00 00 00	 call	 ?IsGreaterThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::IsGreaterThan
  000ed	85 c0		 test	 eax, eax
  000ef	74 18		 je	 SHORT $L31954

; 311  :             Swap(parent_node, test_node);

  000f1	8b 4d fc	 mov	 ecx, DWORD PTR _test_node$[ebp]
  000f4	51		 push	 ecx
  000f5	8b 55 f4	 mov	 edx, DWORD PTR _parent_node$31953[ebp]
  000f8	52		 push	 edx
  000f9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	e8 00 00 00 00	 call	 ?Swap@CPriorityQueue@XACT@@AAEXKK@Z ; XACT::CPriorityQueue::Swap

; 312  :             test_node = parent_node;

  00101	8b 45 f4	 mov	 eax, DWORD PTR _parent_node$31953[ebp]
  00104	89 45 fc	 mov	 DWORD PTR _test_node$[ebp], eax

; 313  :         } else

  00107	eb 02		 jmp	 SHORT $L31955
$L31954:

; 314  :             break;

  00109	eb 02		 jmp	 SHORT $L31952
$L31955:

; 315  :     }

  0010b	eb b2		 jmp	 SHORT $L31951
$L31952:

; 316  : 
; 317  :     VERIFY_PRIORITYQUEUE;
; 318  :     DPF_LEAVE_HRESULT(hr);
; 319  :     return hr;

  0010d	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$L31940:

; 320  : }

  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
?Push@CPriorityQueue@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CPriorityQueue::Push
XACTENG	ENDS
PUBLIC	?AdjustEventTimes@CPriorityQueue@XACT@@QAEX_J@Z	; XACT::CPriorityQueue::AdjustEventTimes
; Function compile flags: /Odt
;	COMDAT ?AdjustEventTimes@CPriorityQueue@XACT@@QAEX_J@Z
XACTENG	SEGMENT
_this$ = -12
_pEvent$31965 = -8
_i$31961 = -4
_rtDelta$ = 8
?AdjustEventTimes@CPriorityQueue@XACT@@QAEX_J@Z PROC NEAR ; XACT::CPriorityQueue::AdjustEventTimes, COMDAT
; _this$ = ecx

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 327  :     DPF_ENTER();
; 328  :     for(DWORD i = 1; i <= m_dwSize; i++){

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$31961[ebp], 1
  00010	eb 09		 jmp	 SHORT $L31962
$L31963:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$31961[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$31961[ebp], eax
$L31962:
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _i$31961[ebp]
  00021	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00024	77 29		 ja	 SHORT $L31960

; 329  :         PTRACK_EVENT_CONTEXT pEvent = At(i);

  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$31961[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  00032	89 45 f8	 mov	 DWORD PTR _pEvent$31965[ebp], eax

; 330  :         pEvent->m_rtTimeStamp += rtDelta;

  00035	8b 4d f8	 mov	 ecx, DWORD PTR _pEvent$31965[ebp]
  00038	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0003b	03 55 08	 add	 edx, DWORD PTR _rtDelta$[ebp]
  0003e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00041	13 45 0c	 adc	 eax, DWORD PTR _rtDelta$[ebp+4]
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _pEvent$31965[ebp]
  00047	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0004a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 331  :     }

  0004d	eb c3		 jmp	 SHORT $L31963
$L31960:

; 332  : 
; 333  :     DPF_LEAVE_VOID();
; 334  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?AdjustEventTimes@CPriorityQueue@XACT@@QAEX_J@Z ENDP	; XACT::CPriorityQueue::AdjustEventTimes
XACTENG	ENDS
PUBLIC	??_C@_0N@GBFMEMNC@1?5?$DM?$DN?5dwIndex?$AA@	; `string'
PUBLIC	??_C@_0BE@KIPIJNBO@dwIndex?5?$DM?$DN?5m_dwSize?$AA@ ; `string'
;	COMDAT ??_C@_0N@GBFMEMNC@1?5?$DM?$DN?5dwIndex?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@GBFMEMNC@1?5?$DM?$DN?5dwIndex?$AA@ DB '1 <= dwIndex', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@KIPIJNBO@dwIndex?5?$DM?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT
??_C@_0BE@KIPIJNBO@dwIndex?5?$DM?$DN?5m_dwSize?$AA@ DB 'dwIndex <= m_dwSi'
	DB	'ze', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -4
_dwIndex$ = 8
_pEvent$ = 12
?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CPriorityQueue::AtPut, COMDAT
; _this$ = ecx

; 340  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 341  :     DPF_ENTER();
; 342  :     ASSERT(1 <= dwIndex);

  00007	68 56 01 00 00	 push	 342			; 00000156H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@GBFMEMNC@1?5?$DM?$DN?5dwIndex?$AA@
  00016	83 7d 08 01	 cmp	 DWORD PTR _dwIndex$[ebp], 1
  0001a	1b c0		 sbb	 eax, eax
  0001c	f7 d8		 neg	 eax
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 343  :     ASSERT(dwIndex <= m_dwSize);

  00027	68 57 01 00 00	 push	 343			; 00000157H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@KIPIJNBO@dwIndex?5?$DM?$DN?5m_dwSize?$AA@
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0003c	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  0003f	1b c0		 sbb	 eax, eax
  00041	f7 d8		 neg	 eax
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 344  :     m_paEvents[dwIndex-1] = pEvent;

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00057	89 4c 82 fc	 mov	 DWORD PTR [edx+eax*4-4], ecx

; 345  :     pEvent->m_dwQueueIndex = dwIndex;

  0005b	8b 55 0c	 mov	 edx, DWORD PTR _pEvent$[ebp]
  0005e	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00061	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 346  :     DPF_LEAVE_VOID();
; 347  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CPriorityQueue::AtPut
XACTENG	ENDS
PUBLIC	??_C@_0M@MEMCNIF@1?5?$DM?$DN?5dwDest?$AA@	; `string'
PUBLIC	??_C@_0BD@DIJKDJBI@dwDest?5?$DM?$DN?5m_dwSize?$AA@ ; `string'
PUBLIC	??_C@_0O@PIPJPNPG@1?5?$DM?$DN?5dwSource?$AA@	; `string'
PUBLIC	??_C@_0BF@KAJPHEPO@dwSource?5?$DM?$DN?5m_dwSize?$AA@ ; `string'
;	COMDAT ??_C@_0M@MEMCNIF@1?5?$DM?$DN?5dwDest?$AA@
XACTENG_RD	SEGMENT
??_C@_0M@MEMCNIF@1?5?$DM?$DN?5dwDest?$AA@ DB '1 <= dwDest', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@DIJKDJBI@dwDest?5?$DM?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@DIJKDJBI@dwDest?5?$DM?$DN?5m_dwSize?$AA@ DB 'dwDest <= m_dwSize'
	DB	00H						; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@PIPJPNPG@1?5?$DM?$DN?5dwSource?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@PIPJPNPG@1?5?$DM?$DN?5dwSource?$AA@ DB '1 <= dwSource', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BF@KAJPHEPO@dwSource?5?$DM?$DN?5m_dwSize?$AA@
XACTENG_RD	SEGMENT
??_C@_0BF@KAJPHEPO@dwSource?5?$DM?$DN?5m_dwSize?$AA@ DB 'dwSource <= m_dw'
	DB	'Size', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Move@CPriorityQueue@XACT@@AAEXKK@Z
XACTENG	SEGMENT
_this$ = -4
_dwDest$ = 8
_dwSource$ = 12
?Move@CPriorityQueue@XACT@@AAEXKK@Z PROC NEAR		; XACT::CPriorityQueue::Move, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  :     DPF_ENTER();
; 355  :     ASSERT(1 <= dwDest);

  00008	68 63 01 00 00	 push	 355			; 00000163H
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@MEMCNIF@1?5?$DM?$DN?5dwDest?$AA@
  00017	83 7d 08 01	 cmp	 DWORD PTR _dwDest$[ebp], 1
  0001b	1b c0		 sbb	 eax, eax
  0001d	f7 d8		 neg	 eax
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 356  :     ASSERT(dwDest <= m_dwSize);

  00028	68 64 01 00 00	 push	 356			; 00000164H
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@DIJKDJBI@dwDest?5?$DM?$DN?5m_dwSize?$AA@
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 55 08	 mov	 edx, DWORD PTR _dwDest$[ebp]
  0003d	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  00040	1b c0		 sbb	 eax, eax
  00042	f7 d8		 neg	 eax
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 357  :     ASSERT(1 <= dwSource);

  0004d	68 65 01 00 00	 push	 357			; 00000165H
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@PIPJPNPG@1?5?$DM?$DN?5dwSource?$AA@
  0005c	83 7d 0c 01	 cmp	 DWORD PTR _dwSource$[ebp], 1
  00060	1b c9		 sbb	 ecx, ecx
  00062	f7 d9		 neg	 ecx
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0006a	83 c4 10	 add	 esp, 16			; 00000010H

; 358  :     ASSERT(dwSource <= m_dwSize);

  0006d	68 66 01 00 00	 push	 358			; 00000166H
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@KAJPHEPO@dwSource?5?$DM?$DN?5m_dwSize?$AA@
  0007c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007f	8b 45 0c	 mov	 eax, DWORD PTR _dwSource$[ebp]
  00082	39 42 08	 cmp	 DWORD PTR [edx+8], eax
  00085	1b c9		 sbb	 ecx, ecx
  00087	f7 d9		 neg	 ecx
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0008f	83 c4 10	 add	 esp, 16			; 00000010H

; 359  :     if(dwSource != dwDest){

  00092	8b 55 0c	 mov	 edx, DWORD PTR _dwSource$[ebp]
  00095	3b 55 08	 cmp	 edx, DWORD PTR _dwDest$[ebp]
  00098	74 3a		 je	 SHORT $L31977

; 360  :         m_paEvents[dwDest-1] = m_paEvents[dwSource-1];

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 55 08	 mov	 edx, DWORD PTR _dwDest$[ebp]
  000a7	8b 75 0c	 mov	 esi, DWORD PTR _dwSource$[ebp]
  000aa	8b 4c b1 fc	 mov	 ecx, DWORD PTR [ecx+esi*4-4]
  000ae	89 4c 90 fc	 mov	 DWORD PTR [eax+edx*4-4], ecx

; 361  :         m_paEvents[dwDest-1]->m_dwQueueIndex = dwDest;

  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 02		 mov	 eax, DWORD PTR [edx]
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _dwDest$[ebp]
  000ba	8b 54 88 fc	 mov	 edx, DWORD PTR [eax+ecx*4-4]
  000be	8b 45 08	 mov	 eax, DWORD PTR _dwDest$[ebp]
  000c1	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 362  :         m_paEvents[dwSource-1] = 0;

  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c9	8b 45 0c	 mov	 eax, DWORD PTR _dwSource$[ebp]
  000cc	c7 44 82 fc 00
	00 00 00	 mov	 DWORD PTR [edx+eax*4-4], 0
$L31977:

; 363  :     }
; 364  :     DPF_LEAVE_VOID();
; 365  : }

  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
?Move@CPriorityQueue@XACT@@AAEXKK@Z ENDP		; XACT::CPriorityQueue::Move
XACTENG	ENDS
PUBLIC	??_C@_07DCPDJDHG@pResult?$AA@			; `string'
;	COMDAT ??_C@_07DCPDJDHG@pResult?$AA@
XACTENG_RD	SEGMENT
??_C@_07DCPDJDHG@pResult?$AA@ DB 'pResult', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z
XACTENG	SEGMENT
_this$ = -8
_pResult$ = -4
_dwIndex$ = 8
?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z PROC NEAR ; XACT::CPriorityQueue::At, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 372  :     DPF_ENTER();
; 373  :     ASSERT(1 <= dwIndex);

  00009	68 75 01 00 00	 push	 373			; 00000175H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@GBFMEMNC@1?5?$DM?$DN?5dwIndex?$AA@
  00018	83 7d 08 01	 cmp	 DWORD PTR _dwIndex$[ebp], 1
  0001c	1b c0		 sbb	 eax, eax
  0001e	f7 d8		 neg	 eax
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 374  :     ASSERT(dwIndex <= m_dwSize);

  00029	68 76 01 00 00	 push	 374			; 00000176H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@KIPIJNBO@dwIndex?5?$DM?$DN?5m_dwSize?$AA@
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0003e	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  00041	1b c0		 sbb	 eax, eax
  00043	f7 d8		 neg	 eax
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 375  :     PTRACK_EVENT_CONTEXT pResult = m_paEvents[dwIndex-1];

  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00056	8b 4c 82 fc	 mov	 ecx, DWORD PTR [edx+eax*4-4]
  0005a	89 4d fc	 mov	 DWORD PTR _pResult$[ebp], ecx

; 376  :     ASSERT(pResult);

  0005d	68 78 01 00 00	 push	 376			; 00000178H
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07DCPDJDHG@pResult?$AA@
  0006c	33 d2		 xor	 edx, edx
  0006e	83 7d fc 00	 cmp	 DWORD PTR _pResult$[ebp], 0
  00072	0f 94 c2	 sete	 dl
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 377  :     return pResult;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _pResult$[ebp]

; 378  : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ENDP ; XACT::CPriorityQueue::At
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?Swap@CPriorityQueue@XACT@@AAEXKK@Z
XACTENG	SEGMENT
_this$ = -8
_pTemp$ = -4
_dwIndex1$ = 8
_dwIndex2$ = 12
?Swap@CPriorityQueue@XACT@@AAEXKK@Z PROC NEAR		; XACT::CPriorityQueue::Swap, COMDAT
; _this$ = ecx

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 385  :     DPF_ENTER();
; 386  : 
; 387  :     PTRACK_EVENT_CONTEXT pTemp = At(dwIndex1);

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwIndex1$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  00015	89 45 fc	 mov	 DWORD PTR _pTemp$[ebp], eax

; 388  :     AtPut(dwIndex1, At(dwIndex2));

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _dwIndex2$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  00024	50		 push	 eax
  00025	8b 55 08	 mov	 edx, DWORD PTR _dwIndex1$[ebp]
  00028	52		 push	 edx
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::AtPut

; 389  :     AtPut(dwIndex2, pTemp);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _pTemp$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _dwIndex2$[ebp]
  00038	51		 push	 ecx
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?AtPut@CPriorityQueue@XACT@@AAEXKPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::AtPut

; 390  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?Swap@CPriorityQueue@XACT@@AAEXKK@Z ENDP		; XACT::CPriorityQueue::Swap
XACTENG	ENDS
PUBLIC	??_C@_0BM@EEDIDGKH@pEvent?9?$DOm_dwQueueIndex?5?$DN?$DN?5i?$AA@ ; `string'
PUBLIC	??_C@_0BH@NONNBAKB@CPriorityQueue?3?3Verify?$AA@ ; `string'
PUBLIC	??_C@_0CO@EPJGEJJM@Error?3?5parent?3?5?$CFd?5is?5not?5less?5th@ ; `string'
PUBLIC	??_C@_07NDMLHGOG@XACTENG?$AA@			; `string'
PUBLIC	?Initialized@CPriorityQueue@XACT@@QAEHXZ	; XACT::CPriorityQueue::Initialized
PUBLIC	?Verify@CPriorityQueue@XACT@@QAEXXZ		; XACT::CPriorityQueue::Verify
EXTRN	?DwDbgSetContext@XACT@@YAXKKPBDI00@Z:NEAR	; XACT::DwDbgSetContext
EXTRN	?DwDbgPrint@XACT@@YAXPBDZZ:NEAR			; XACT::DwDbgPrint
;	COMDAT ??_C@_0BM@EEDIDGKH@pEvent?9?$DOm_dwQueueIndex?5?$DN?$DN?5i?$AA@
XACTENG_RD	SEGMENT
??_C@_0BM@EEDIDGKH@pEvent?9?$DOm_dwQueueIndex?5?$DN?$DN?5i?$AA@ DB 'pEven'
	DB	't->m_dwQueueIndex == i', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT
??_C@_07NDMLHGOG@XACTENG?$AA@ DB 'XACTENG', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@NONNBAKB@CPriorityQueue?3?3Verify?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@NONNBAKB@CPriorityQueue?3?3Verify?$AA@ DB 'CPriorityQueue::Veri'
	DB	'fy', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CO@EPJGEJJM@Error?3?5parent?3?5?$CFd?5is?5not?5less?5th@
XACTENG_RD	SEGMENT
??_C@_0CO@EPJGEJJM@Error?3?5parent?3?5?$CFd?5is?5not?5less?5th@ DB 'Error'
	DB	': parent: %d is not less than child: %d', 0aH, 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Verify@CPriorityQueue@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -20
_pEvent$32006 = -16
_parent$32008 = -12
_i$32002 = -8
_dwMaxSize$31999 = -4
?Verify@CPriorityQueue@XACT@@QAEXXZ PROC NEAR		; XACT::CPriorityQueue::Verify, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 399  : 
; 400  :     if(Initialized()){

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?Initialized@CPriorityQueue@XACT@@QAEHXZ ; XACT::CPriorityQueue::Initialized
  00011	85 c0		 test	 eax, eax
  00013	0f 84 56 01 00
	00		 je	 $L31997

; 401  :         ASSERT(m_paEvents);

  00019	68 91 01 00 00	 push	 401			; 00000191H
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@LNEMANKP@m_paEvents?$AA@
  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	33 c9		 xor	 ecx, ecx
  0002d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00030	0f 94 c1	 sete	 cl
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00039	83 c4 10	 add	 esp, 16			; 00000010H

; 402  :         ASSERT(m_dwCapacity);

  0003c	68 92 01 00 00	 push	 402			; 00000192H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OCAEJJGP@m_dwCapacity?$AA@
  0004b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	33 c0		 xor	 eax, eax
  00050	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00054	0f 94 c0	 sete	 al
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0005d	83 c4 10	 add	 esp, 16			; 00000010H

; 403  :         ASSERT(m_dwCapacity >= m_dwSize);

  00060	68 93 01 00 00	 push	 403			; 00000193H
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0006a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@DHPHDDHL@m_dwCapacity?5?$DO?$DN?5m_dwSize?$AA@
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  0007b	1b c9		 sbb	 ecx, ecx
  0007d	f7 d9		 neg	 ecx
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00085	83 c4 10	 add	 esp, 16			; 00000010H

; 404  :         DWORD dwMaxSize = m_dwSize;

  00088	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008e	89 45 fc	 mov	 DWORD PTR _dwMaxSize$31999[ebp], eax

; 405  :         if(dwMaxSize > m_dwCapacity){

  00091	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	8b 55 fc	 mov	 edx, DWORD PTR _dwMaxSize$31999[ebp]
  00097	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0009a	76 09		 jbe	 SHORT $L32000

; 406  :             dwMaxSize = m_dwCapacity;

  0009c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a2	89 4d fc	 mov	 DWORD PTR _dwMaxSize$31999[ebp], ecx
$L32000:

; 407  :         }
; 408  : 
; 409  : #ifndef DO_FULL_VERIFY_PRIORITYQUEUE
; 410  :         if(dwMaxSize > 20){

  000a5	83 7d fc 14	 cmp	 DWORD PTR _dwMaxSize$31999[ebp], 20 ; 00000014H
  000a9	76 07		 jbe	 SHORT $L32001

; 411  :             dwMaxSize = 20;

  000ab	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR _dwMaxSize$31999[ebp], 20 ; 00000014H
$L32001:

; 412  :         }
; 413  : #endif
; 414  :         for(DWORD i = 1; i <= dwMaxSize; i++){

  000b2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$32002[ebp], 1
  000b9	eb 09		 jmp	 SHORT $L32003
$L32004:
  000bb	8b 55 f8	 mov	 edx, DWORD PTR _i$32002[ebp]
  000be	83 c2 01	 add	 edx, 1
  000c1	89 55 f8	 mov	 DWORD PTR _i$32002[ebp], edx
$L32003:
  000c4	8b 45 f8	 mov	 eax, DWORD PTR _i$32002[ebp]
  000c7	3b 45 fc	 cmp	 eax, DWORD PTR _dwMaxSize$31999[ebp]
  000ca	0f 87 9f 00 00
	00		 ja	 $L31997

; 415  :             PTRACK_EVENT_CONTEXT pEvent = At(i);

  000d0	8b 4d f8	 mov	 ecx, DWORD PTR _i$32002[ebp]
  000d3	51		 push	 ecx
  000d4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?At@CPriorityQueue@XACT@@AAEPAU_TRACK_EVENT_CONTEXT@2@K@Z ; XACT::CPriorityQueue::At
  000dc	89 45 f0	 mov	 DWORD PTR _pEvent$32006[ebp], eax

; 416  :             ASSERT(pEvent->m_dwQueueIndex == i);

  000df	68 a0 01 00 00	 push	 416			; 000001a0H
  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@EEDIDGKH@pEvent?9?$DOm_dwQueueIndex?5?$DN?$DN?5i?$AA@
  000ee	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$32006[ebp]
  000f1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f4	33 c9		 xor	 ecx, ecx
  000f6	3b 45 f8	 cmp	 eax, DWORD PTR _i$32002[ebp]
  000f9	0f 95 c1	 setne	 cl
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00102	83 c4 10	 add	 esp, 16			; 00000010H

; 417  :             int parent = i / 2;

  00105	8b 55 f8	 mov	 edx, DWORD PTR _i$32002[ebp]
  00108	d1 ea		 shr	 edx, 1
  0010a	89 55 f4	 mov	 DWORD PTR _parent$32008[ebp], edx

; 418  :             if(parent>0){

  0010d	83 7d f4 00	 cmp	 DWORD PTR _parent$32008[ebp], 0
  00111	7e 57		 jle	 SHORT $L32009

; 419  :                 if( !m_paEvents[parent-1]->IsLessThan(m_paEvents[i-1]) ){

  00113	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00116	8b 08		 mov	 ecx, DWORD PTR [eax]
  00118	8b 55 f8	 mov	 edx, DWORD PTR _i$32002[ebp]
  0011b	8b 44 91 fc	 mov	 eax, DWORD PTR [ecx+edx*4-4]
  0011f	50		 push	 eax
  00120	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	8b 11		 mov	 edx, DWORD PTR [ecx]
  00125	8b 45 f4	 mov	 eax, DWORD PTR _parent$32008[ebp]
  00128	8b 4c 82 fc	 mov	 ecx, DWORD PTR [edx+eax*4-4]
  0012c	e8 00 00 00 00	 call	 ?IsLessThan@_TRACK_EVENT_CONTEXT@XACT@@QBEHPBU12@@Z ; XACT::_TRACK_EVENT_CONTEXT::IsLessThan
  00131	85 c0		 test	 eax, eax
  00133	75 35		 jne	 SHORT $L32009

; 420  :                     DPF_ERROR("Error: parent: %d is not less than child: %d\n", parent, i);

  00135	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0013a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@NONNBAKB@CPriorityQueue?3?3Verify?$AA@
  0013f	68 a4 01 00 00	 push	 420			; 000001a4H
  00144	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00149	6a 01		 push	 1
  0014b	6a 09		 push	 9
  0014d	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00152	83 c4 18	 add	 esp, 24			; 00000018H
  00155	8b 4d f8	 mov	 ecx, DWORD PTR _i$32002[ebp]
  00158	51		 push	 ecx
  00159	8b 55 f4	 mov	 edx, DWORD PTR _parent$32008[ebp]
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EPJGEJJM@Error?3?5parent?3?5?$CFd?5is?5not?5less?5th@
  00162	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
$L32009:

; 421  :                 }
; 422  :             }
; 423  :         }

  0016a	e9 4c ff ff ff	 jmp	 $L32004
$L31997:

; 424  :     }
; 425  : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c3		 ret	 0
?Verify@CPriorityQueue@XACT@@QAEXXZ ENDP		; XACT::CPriorityQueue::Verify
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?Initialized@CPriorityQueue@XACT@@QAEHXZ
XACTENG	SEGMENT
_this$ = -4
?Initialized@CPriorityQueue@XACT@@QAEHXZ PROC NEAR	; XACT::CPriorityQueue::Initialized, COMDAT
; _this$ = ecx

; 828  :     __inline BOOL Initialized() { return m_paEvents != 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	0f 95 c1	 setne	 cl
  00012	8b c1		 mov	 eax, ecx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Initialized@CPriorityQueue@XACT@@QAEHXZ ENDP		; XACT::CPriorityQueue::Initialized
XACTENG	ENDS
PUBLIC	?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z ; XACT::CEngine::RemoveCueFromSequencerList
PUBLIC	??_C@_04DBOCKKH@pCue?$AA@			; `string'
PUBLIC	?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
PUBLIC	??0CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::CAutoLock
PUBLIC	??1CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::~CAutoLock
;	COMDAT ??_C@_04DBOCKKH@pCue?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
XACTENG_RD	SEGMENT
??_C@_04DBOCKKH@pCue?$AA@ DB 'pCue', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z
XACTENG	SEGMENT
_this$ = -16
$T32575 = -12
___AutoLock$ = -8
_hr$ = -4
_pCue$ = 8
?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z PROC NEAR ; XACT::CEngine::RemoveCueFromSequencerList, COMDAT
; _this$ = ecx

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 442  : 
; 443  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 444  :     DPF_ENTER();
; 445  :     ASSERT(pCue);

  00010	68 bd 01 00 00	 push	 445			; 000001bdH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04DBOCKKH@pCue?$AA@
  0001f	33 c0		 xor	 eax, eax
  00021	83 7d 08 00	 cmp	 DWORD PTR _pCue$[ebp], 0
  00025	0f 94 c0	 sete	 al
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 446  : 
; 447  :     ENTER_EXTERNAL_METHOD();

  00031	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00034	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 448  : 
; 449  :     RemoveEntryList(&pCue->m_SeqListEntry);    

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _pCue$[ebp]
  0003c	83 c1 18	 add	 ecx, 24			; 00000018H
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 450  :     pCue->Release();

  00045	8b 55 08	 mov	 edx, DWORD PTR _pCue$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _pCue$[ebp]
  0004d	51		 push	 ecx
  0004e	ff 50 08	 call	 DWORD PTR [eax+8]

; 451  :     
; 452  :     return hr;

  00051	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  00054	89 55 f4	 mov	 DWORD PTR $T32575[ebp], edx
  00057	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0005a	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0005f	8b 45 f4	 mov	 eax, DWORD PTR $T32575[ebp]

; 453  : 
; 454  : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z ENDP ; XACT::CEngine::RemoveCueFromSequencerList
XACTENG	ENDS
PUBLIC	?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList
PUBLIC	??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG_RD	SEGMENT
??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT
_Entry$ = 8
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z PROC NEAR ; XACT::RemoveEntryList, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d6 00 00 00	 push	 214			; 000000d6H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 215  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00018	68 d7 00 00 00	 push	 215			; 000000d7H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 01		 push	 1
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 216  : 
; 217  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 218  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 219  :     Entry->Flink = Entry->Blink = Entry;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx

; 220  : 
; 221  :     return Entry;

  00059	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 222  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ENDP	; XACT::RemoveEntryList
XACTENG	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z PROC NEAR ; XACT::__AssertValidEntryList, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L29601

; 55   :     {
; 56   :         DwDbgAssert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 57   :     }
; 58   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L29600
$L29601:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L29605
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L29604
$L29605:

; 59   :     {
; 60   :         DwDbgAssert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 61   :     }
; 62   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L29600
$L29604:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L29609
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L29608
$L29609:

; 63   :     {
; 64   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L29611
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L29610
$L29611:

; 65   :         {
; 66   :             DwDbgAssert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L29610:

; 67   :         }
; 68   :     }
; 69   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L29600
$L29608:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L29614

; 70   :     {
; 71   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L29615

; 72   :         {
; 73   :             DwDbgAssert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L29615:

; 74   :         }
; 75   :     }
; 76   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L29600
$L29614:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L29600

; 77   :     {
; 78   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L29600

; 79   :         {
; 80   :             DwDbgAssert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L29600:

; 81   :         }
; 82   :     }
; 83   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ENDP ; XACT::__AssertValidEntryList
XACTENG	ENDS
PUBLIC	?XACTEnterCriticalSection@@YGHXZ		; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::CAutoLock, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   :     m_fLocked = (BOOLEAN)XACTEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?XACTEnterCriticalSection@@YGHXZ ; XACTEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 83   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_XACTCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT
?XACTEnterCriticalSection@@YGHXZ PROC NEAR		; XACTEnterCriticalSection, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L30689

; 49   :     {
; 50   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L30688
$L30689:

; 51   :     }
; 52   : 
; 53   :     EnterCriticalSection(&g_XACTCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 54   : 
; 55   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L30688:

; 56   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?XACTEnterCriticalSection@@YGHXZ ENDP			; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
XACTENG	ENDS
PUBLIC	?XACTLeaveCriticalSection@@YGXXZ		; XACTLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   :     if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L30715

; 88   :     {
; 89   :         XACTLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?XACTLeaveCriticalSection@@YGXXZ ; XACTLeaveCriticalSection
$L30715:

; 90   :     }
; 91   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::~CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT
?XACTLeaveCriticalSection@@YGXXZ PROC NEAR		; XACTLeaveCriticalSection, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :     LeaveCriticalSection(&g_XACTCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 61   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?XACTLeaveCriticalSection@@YGXXZ ENDP			; XACTLeaveCriticalSection
XACTENG	ENDS
PUBLIC	?AddCueToSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z ; XACT::CEngine::AddCueToSequencerList
PUBLIC	?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z	; XACT::InsertTailList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
;	COMDAT ?AddCueToSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z
XACTENG	SEGMENT
_this$ = -16
$T32600 = -12
___AutoLock$ = -8
_hr$ = -4
_pCue$ = 8
?AddCueToSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z PROC NEAR ; XACT::CEngine::AddCueToSequencerList, COMDAT
; _this$ = ecx

; 460  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 461  :     HRESULT hr = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 462  :     DPF_ENTER();
; 463  :     ENTER_EXTERNAL_METHOD();

  00010	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 464  : 
; 465  :     InsertTailList(&m_lstActiveCues,&pCue->m_SeqListEntry);

  00018	8b 45 08	 mov	 eax, DWORD PTR _pCue$[ebp]
  0001b	83 c0 18	 add	 eax, 24			; 00000018H
  0001e	50		 push	 eax
  0001f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 38	 add	 ecx, 56			; 00000038H
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 466  :     pCue->AddRef();

  0002b	8b 55 08	 mov	 edx, DWORD PTR _pCue$[ebp]
  0002e	8b 02		 mov	 eax, DWORD PTR [edx]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _pCue$[ebp]
  00033	51		 push	 ecx
  00034	ff 50 04	 call	 DWORD PTR [eax+4]

; 467  : 
; 468  : 
; 469  :     DPF_LEAVE_HRESULT(hr);
; 470  :     return hr;

  00037	8b 55 fc	 mov	 edx, DWORD PTR _hr$[ebp]
  0003a	89 55 f4	 mov	 DWORD PTR $T32600[ebp], edx
  0003d	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00040	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00045	8b 45 f4	 mov	 eax, DWORD PTR $T32600[ebp]

; 471  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?AddCueToSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z ENDP ; XACT::CEngine::AddCueToSequencerList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; XACT::InsertTailList, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 73		 push	 115			; 00000073H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 116  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 74		 push	 116			; 00000074H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 117  : 
; 118  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 119  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 120  :     
; 121  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 122  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 123  : 
; 124  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7c		 push	 124			; 0000007cH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 125  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; XACT::InsertTailList
XACTENG	ENDS
PUBLIC	?InitializeSequencer@CEngine@XACT@@UAGJK@Z	; XACT::CEngine::InitializeSequencer
PUBLIC	?SetTimeOffset@CEngine@XACT@@QAEXXZ		; XACT::CEngine::SetTimeOffset
PUBLIC	??0CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::~CAutoIrql
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
;	COMDAT ?InitializeSequencer@CEngine@XACT@@UAGJK@Z
XACTENG	SEGMENT
tv76 = -28
$T32611 = -24
$T32608 = -20
$T32607 = -16
___AutoIrql$ = -12
_hr$ = -4
_this$ = 8
_dwMaxConcurrentEvents$ = 12
?InitializeSequencer@CEngine@XACT@@UAGJK@Z PROC NEAR	; XACT::CEngine::InitializeSequencer, COMDAT

; 477  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 478  : 
; 479  :     HRESULT hr = S_OK;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 480  :     AutoIrql();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 481  : 
; 482  :     if(m_bAllowQueueing){

  00015	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  0001c	74 17		 je	 SHORT $L32037

; 483  : 
; 484  :         //
; 485  :         // Already initialized
; 486  :         //
; 487  : 
; 488  :         return E_FAIL;

  0001e	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR $T32607[ebp], -2147467259 ; 80004005H
  00025	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00028	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  0002d	8b 45 f0	 mov	 eax, DWORD PTR $T32607[ebp]
  00030	e9 84 00 00 00	 jmp	 $L32033
$L32037:

; 489  :     }
; 490  : 
; 491  :     m_bAllowQueueing = TRUE;

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 41 64 01 00
	00 00		 mov	 DWORD PTR [ecx+100], 1

; 492  : 
; 493  :     hr = HRFROMP(m_pQueue = NEW(CPriorityQueue));

  0003f	6a 0c		 push	 12			; 0000000cH
  00041	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 ec	 mov	 DWORD PTR $T32608[ebp], eax
  0004c	83 7d ec 00	 cmp	 DWORD PTR $T32608[ebp], 0
  00050	74 0d		 je	 SHORT $L32609
  00052	8b 4d ec	 mov	 ecx, DWORD PTR $T32608[ebp]
  00055	e8 00 00 00 00	 call	 ??0CPriorityQueue@XACT@@QAE@XZ ; XACT::CPriorityQueue::CPriorityQueue
  0005a	89 45 e4	 mov	 DWORD PTR tv76[ebp], eax
  0005d	eb 07		 jmp	 SHORT $L32610
$L32609:
  0005f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
$L32610:
  00066	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00069	8b 45 e4	 mov	 eax, DWORD PTR tv76[ebp]
  0006c	89 82 f0 00 00
	00		 mov	 DWORD PTR [edx+240], eax
  00072	33 c9		 xor	 ecx, ecx
  00074	83 7d e4 00	 cmp	 DWORD PTR tv76[ebp], 0
  00078	0f 95 c1	 setne	 cl
  0007b	49		 dec	 ecx
  0007c	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00082	89 4d fc	 mov	 DWORD PTR _hr$[ebp], ecx

; 494  : 
; 495  :     if(SUCCEEDED(hr))

  00085	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	7c 15		 jl	 SHORT $L32045

; 496  :     {
; 497  :         hr = m_pQueue->Initialize(dwMaxConcurrentEvents);

  0008b	8b 55 0c	 mov	 edx, DWORD PTR _dwMaxConcurrentEvents$[ebp]
  0008e	52		 push	 edx
  0008f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  00098	e8 00 00 00 00	 call	 ?Initialize@CPriorityQueue@XACT@@QAEJK@Z ; XACT::CPriorityQueue::Initialize
  0009d	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
$L32045:

; 498  :     }
; 499  : 
; 500  :     SetTimeOffset();

  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?SetTimeOffset@CEngine@XACT@@QAEXXZ ; XACT::CEngine::SetTimeOffset

; 501  : 
; 502  :     DPF_LEAVE_HRESULT(hr);
; 503  :     return hr;

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _hr$[ebp]
  000ab	89 4d e8	 mov	 DWORD PTR $T32611[ebp], ecx
  000ae	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  000b1	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  000b6	8b 45 e8	 mov	 eax, DWORD PTR $T32611[ebp]
$L32033:

; 504  : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 08 00	 ret	 8
?InitializeSequencer@CEngine@XACT@@UAGJK@Z ENDP		; XACT::CEngine::InitializeSequencer
XACTENG	ENDS
PUBLIC	??0CIrql@XACT@@QAE@XZ				; XACT::CIrql::CIrql
PUBLIC	?Raise@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\drvhlp.h
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@XACT@@QAE@XZ	; XACT::CIrql::CIrql

; 73   :     Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Raise

; 74   : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CIrql@XACT@@QAE@XZ PROC NEAR				; XACT::CIrql::CIrql, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 40   : }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@XACT@@QAE@XZ ENDP				; XACT::CIrql::CIrql
XACTENG	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Raise@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Raise, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L29522

; 45   :     {
; 46   :         m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L29522:

; 47   :     }
; 48   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Raise
XACTENG	ENDS
PUBLIC	?Lower@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Lower
; Function compile flags: /Odt
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   :     Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Lower

; 79   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::~CAutoIrql
XACTENG	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Lower@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Lower, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L29527

; 53   :     {
; 54   :         KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 55   :         m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L29527:

; 56   :     }
; 57   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Lower
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
XACTENG	ENDS
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT
_cbBuffer$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 71   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     using namespace XACT;
; 73   :     return XactMemAlloc(cbBuffer, FALSE); 

  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _XactMemAlloc@8

; 74   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
XACTENG	ENDS
PUBLIC	?GetTime@CEngine@XACT@@QAEXPA_J@Z		; XACT::CEngine::GetTime
PUBLIC	??_C@_0BB@DOKDJPLE@CEngine?3?3GetTime?$AA@	; `string'
PUBLIC	??_C@_0EF@LALMECOH@Sample?5counter?5wrapped?5?$CIas?5it?5sh@ ; `string'
PUBLIC	??_C@_0DH@CBACOJHK@Sample?5counter?5decreased?5unexpec@ ; `string'
EXTRN	__allmul:NEAR
EXTRN	__alldiv:NEAR
;	COMDAT ??_C@_0BB@DOKDJPLE@CEngine?3?3GetTime?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
XACTENG_RD	SEGMENT
??_C@_0BB@DOKDJPLE@CEngine?3?3GetTime?$AA@ DB 'CEngine::GetTime', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EF@LALMECOH@Sample?5counter?5wrapped?5?$CIas?5it?5sh@
XACTENG_RD	SEGMENT
??_C@_0EF@LALMECOH@Sample?5counter?5wrapped?5?$CIas?5it?5sh@ DB 'Sample c'
	DB	'ounter wrapped (as it should every 24 hours. Was: %u is: %u', 0aH
	DB	00H						; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@CBACOJHK@Sample?5counter?5decreased?5unexpec@
XACTENG_RD	SEGMENT
??_C@_0DH@CBACOJHK@Sample?5counter?5decreased?5unexpec@ DB 'Sample counte'
	DB	'r decreased unexpectedly. Was: %u is: %u', 0aH, 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?GetTime@CEngine@XACT@@QAEXPA_J@Z
XACTENG	SEGMENT
_this$ = -36
___AutoIrql$ = -32
_delta$ = -24
_dwPosition$ = -12
_llTemp$ = -8
_prtCurrent$ = 8
?GetTime@CEngine@XACT@@QAEXPA_J@Z PROC NEAR		; XACT::CEngine::GetTime, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 511  :     DPF_ENTER();
; 512  :     AutoIrql();

  0000a	8d 4d e0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 513  : 
; 514  :     DWORD dwPosition = *((PDWORD)0xfe80200c);

  00012	a1 0c 20 80 fe	 mov	 eax, DWORD PTR ds:-25157620
  00017	89 45 f4	 mov	 DWORD PTR _dwPosition$[ebp], eax

; 515  : 
; 516  :     //
; 517  :     // Check if audio hw counter wrapped
; 518  :     //
; 519  : 
; 520  :     LONGLONG delta;
; 521  :     if(dwPosition < m_dwLastPosition){

  0001a	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 f4	 mov	 edx, DWORD PTR _dwPosition$[ebp]
  00020	3b 91 d4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+212]
  00026	0f 83 cc 00 00
	00		 jae	 $L32055

; 522  : 
; 523  :         if(dwPosition < 100000 && m_dwLastPosition > (1 << 30) ){

  0002c	81 7d f4 a0 86
	01 00		 cmp	 DWORD PTR _dwPosition$[ebp], 100000 ; 000186a0H
  00033	73 6c		 jae	 SHORT $L32056
  00035	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	81 b8 d4 00 00
	00 00 00 00 40	 cmp	 DWORD PTR [eax+212], 1073741824 ; 40000000H
  00042	76 5d		 jbe	 SHORT $L32056

; 524  : 
; 525  :             DPF_WARNING("Sample counter wrapped (as it should every 24 hours. Was: %u is: %u\n",
; 526  :                 m_dwLastPosition, dwPosition);

  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@DOKDJPLE@CEngine?3?3GetTime?$AA@
  0004e	68 0d 02 00 00	 push	 525			; 0000020dH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 03		 push	 3
  0005a	6a 09		 push	 9
  0005c	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00061	83 c4 18	 add	 esp, 24			; 00000018H
  00064	8b 4d f4	 mov	 ecx, DWORD PTR _dwPosition$[ebp]
  00067	51		 push	 ecx
  00068	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EF@LALMECOH@Sample?5counter?5wrapped?5?$CIas?5it?5sh@
  00077	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 527  :             delta = ((((LONGLONG) 1) << 32) + dwPosition) - m_dwLastPosition;

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _dwPosition$[ebp]
  00082	33 d2		 xor	 edx, edx
  00084	83 c1 00	 add	 ecx, 0
  00087	83 d2 01	 adc	 edx, 1
  0008a	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [eax+212]
  00093	33 f6		 xor	 esi, esi
  00095	2b c8		 sub	 ecx, eax
  00097	1b d6		 sbb	 edx, esi
  00099	89 4d e8	 mov	 DWORD PTR _delta$[ebp], ecx
  0009c	89 55 ec	 mov	 DWORD PTR _delta$[ebp+4], edx

; 528  : 
; 529  :         } else {

  0009f	eb 55		 jmp	 SHORT $L32060
$L32056:

; 530  : 
; 531  :             DPF_WARNING("Sample counter decreased unexpectedly. Was: %u is: %u\n",
; 532  :                 m_dwLastPosition, dwPosition);

  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@DOKDJPLE@CEngine?3?3GetTime?$AA@
  000ab	68 13 02 00 00	 push	 531			; 00000213H
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  000b5	6a 03		 push	 3
  000b7	6a 09		 push	 9
  000b9	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000be	83 c4 18	 add	 esp, 24			; 00000018H
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _dwPosition$[ebp]
  000c4	51		 push	 ecx
  000c5	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  000c8	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@CBACOJHK@Sample?5counter?5decreased?5unexpec@
  000d4	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 533  :             delta = 0;

  000dc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _delta$[ebp], 0
  000e3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _delta$[ebp+4], 0

; 534  :             m_dwLastPosition = dwPosition;

  000ea	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 55 f4	 mov	 edx, DWORD PTR _dwPosition$[ebp]
  000f0	89 91 d4 00 00
	00		 mov	 DWORD PTR [ecx+212], edx
$L32060:

; 535  : 
; 536  :         }
; 537  : 
; 538  :     } else {

  000f6	eb 14		 jmp	 SHORT $L32062
$L32055:

; 539  : 
; 540  :         delta = dwPosition - m_dwLastPosition;

  000f8	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  000fb	8b 4d f4	 mov	 ecx, DWORD PTR _dwPosition$[ebp]
  000fe	2b 88 d4 00 00
	00		 sub	 ecx, DWORD PTR [eax+212]
  00104	33 d2		 xor	 edx, edx
  00106	89 4d e8	 mov	 DWORD PTR _delta$[ebp], ecx
  00109	89 55 ec	 mov	 DWORD PTR _delta$[ebp+4], edx
$L32062:

; 541  : 
; 542  :     }
; 543  : 
; 544  :     m_dwLastPosition = dwPosition;

  0010c	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	8b 4d f4	 mov	 ecx, DWORD PTR _dwPosition$[ebp]
  00112	89 88 d4 00 00
	00		 mov	 DWORD PTR [eax+212], ecx

; 545  :     m_llSampleTime += delta;

  00118	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0011b	8b 82 d8 00 00
	00		 mov	 eax, DWORD PTR [edx+216]
  00121	03 45 e8	 add	 eax, DWORD PTR _delta$[ebp]
  00124	8b 8a dc 00 00
	00		 mov	 ecx, DWORD PTR [edx+220]
  0012a	13 4d ec	 adc	 ecx, DWORD PTR _delta$[ebp+4]
  0012d	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00130	89 82 d8 00 00
	00		 mov	 DWORD PTR [edx+216], eax
  00136	89 8a dc 00 00
	00		 mov	 DWORD PTR [edx+220], ecx

; 546  : 
; 547  :     LONGLONG llTemp = m_llSampleTime * 10000;

  0013c	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	6a 00		 push	 0
  00141	68 10 27 00 00	 push	 10000			; 00002710H
  00146	8b 88 dc 00 00
	00		 mov	 ecx, DWORD PTR [eax+220]
  0014c	51		 push	 ecx
  0014d	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR [eax+216]
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 __allmul
  00159	89 45 f8	 mov	 DWORD PTR _llTemp$[ebp], eax
  0015c	89 55 fc	 mov	 DWORD PTR _llTemp$[ebp+4], edx

; 548  :     llTemp /= 48000;

  0015f	6a 00		 push	 0
  00161	68 80 bb 00 00	 push	 48000			; 0000bb80H
  00166	8b 45 fc	 mov	 eax, DWORD PTR _llTemp$[ebp+4]
  00169	50		 push	 eax
  0016a	8b 4d f8	 mov	 ecx, DWORD PTR _llTemp$[ebp]
  0016d	51		 push	 ecx
  0016e	e8 00 00 00 00	 call	 __alldiv
  00173	89 45 f8	 mov	 DWORD PTR _llTemp$[ebp], eax
  00176	89 55 fc	 mov	 DWORD PTR _llTemp$[ebp+4], edx

; 549  :     llTemp *= 1000;

  00179	6a 00		 push	 0
  0017b	68 e8 03 00 00	 push	 1000			; 000003e8H
  00180	8b 55 fc	 mov	 edx, DWORD PTR _llTemp$[ebp+4]
  00183	52		 push	 edx
  00184	8b 45 f8	 mov	 eax, DWORD PTR _llTemp$[ebp]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 __allmul
  0018d	89 45 f8	 mov	 DWORD PTR _llTemp$[ebp], eax
  00190	89 55 fc	 mov	 DWORD PTR _llTemp$[ebp+4], edx

; 550  :     *prtCurrent = llTemp;

  00193	8b 4d 08	 mov	 ecx, DWORD PTR _prtCurrent$[ebp]
  00196	8b 55 f8	 mov	 edx, DWORD PTR _llTemp$[ebp]
  00199	89 11		 mov	 DWORD PTR [ecx], edx
  0019b	8b 45 fc	 mov	 eax, DWORD PTR _llTemp$[ebp+4]
  0019e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 551  : 
; 552  : 
; 553  :     DPF_LEAVE_VOID();
; 554  :     return;

  001a1	8d 4d e0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  001a4	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql

; 555  : }

  001a9	5e		 pop	 esi
  001aa	8b e5		 mov	 esp, ebp
  001ac	5d		 pop	 ebp
  001ad	c2 04 00	 ret	 4
?GetTime@CEngine@XACT@@QAEXPA_J@Z ENDP			; XACT::CEngine::GetTime
XACTENG	ENDS
PUBLIC	?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::CreateEventTimeStamp
PUBLIC	??_C@_0BH@IOMGGDHL@pTrack?9?$DOwSamplesPerSec?$AA@ ; `string'
;	COMDAT ??_C@_0BH@IOMGGDHL@pTrack?9?$DOwSamplesPerSec?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@IOMGGDHL@pTrack?9?$DOwSamplesPerSec?$AA@ DB 'pTrack->wSamplesPe'
	DB	'rSec', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -12
_llTemp$ = -8
_pTrack$ = 8
_pEventContext$ = 12
?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CEngine::CreateEventTimeStamp, COMDAT
; _this$ = ecx

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 563  : 
; 564  :     ASSERT(pTrack->wSamplesPerSec);        

  00009	68 34 02 00 00	 push	 564			; 00000234H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@IOMGGDHL@pTrack?9?$DOwSamplesPerSec?$AA@
  00018	8b 45 08	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0001b	0f b7 48 18	 movzx	 ecx, WORD PTR [eax+24]
  0001f	f7 d9		 neg	 ecx
  00021	1b c9		 sbb	 ecx, ecx
  00023	41		 inc	 ecx
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 565  : 
; 566  :     //
; 567  :     // the event time is calculated based on 
; 568  :     // 1)the source playback frequency of the track
; 569  :     // 2)the sample count offset into the track of the particular event
; 570  :     // 3)the track starting time (when the first PlayEvent was processed)
; 571  :     // 4) the offset between the audio hw clock and the system clock
; 572  :     //
; 573  : 
; 574  :     
; 575  :     LONGLONG llTemp = pEventContext->m_pEventHeader->lSampleTime * 10000;

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  00030	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	69 c9 10 27 00
	00		 imul	 ecx, 10000		; 00002710H
  0003c	33 d2		 xor	 edx, edx
  0003e	89 4d f8	 mov	 DWORD PTR _llTemp$[ebp], ecx
  00041	89 55 fc	 mov	 DWORD PTR _llTemp$[ebp+4], edx

; 576  :     llTemp /= pTrack->wSamplesPerSec;

  00044	8b 45 08	 mov	 eax, DWORD PTR _pTrack$[ebp]
  00047	0f b7 40 18	 movzx	 eax, WORD PTR [eax+24]
  0004b	99		 cdq
  0004c	52		 push	 edx
  0004d	50		 push	 eax
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _llTemp$[ebp+4]
  00051	51		 push	 ecx
  00052	8b 55 f8	 mov	 edx, DWORD PTR _llTemp$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 __alldiv
  0005b	89 45 f8	 mov	 DWORD PTR _llTemp$[ebp], eax
  0005e	89 55 fc	 mov	 DWORD PTR _llTemp$[ebp+4], edx

; 577  :     llTemp *= 1000;

  00061	6a 00		 push	 0
  00063	68 e8 03 00 00	 push	 1000			; 000003e8H
  00068	8b 45 fc	 mov	 eax, DWORD PTR _llTemp$[ebp+4]
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _llTemp$[ebp]
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 __allmul
  00075	89 45 f8	 mov	 DWORD PTR _llTemp$[ebp], eax
  00078	89 55 fc	 mov	 DWORD PTR _llTemp$[ebp+4], edx

; 578  :     pEventContext->m_rtTimeStamp = llTemp;

  0007b	8b 55 0c	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0007e	8b 45 f8	 mov	 eax, DWORD PTR _llTemp$[ebp]
  00081	89 42 18	 mov	 DWORD PTR [edx+24], eax
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _llTemp$[ebp+4]
  00087	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 579  : 
; 580  :     //
; 581  :     // add track starting time (this value came from the audio hw clock)
; 582  :     //
; 583  : 
; 584  :     pEventContext->m_rtTimeStamp += pTrack->rtStartTime;

  0008a	8b 55 0c	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0008d	8b 45 08	 mov	 eax, DWORD PTR _pTrack$[ebp]
  00090	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00093	03 48 20	 add	 ecx, DWORD PTR [eax+32]
  00096	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00099	13 50 24	 adc	 edx, DWORD PTR [eax+36]
  0009c	8b 45 0c	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  0009f	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  000a2	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 585  : 
; 586  :     //
; 587  :     // add offset of audio clock from system clock
; 588  :     //
; 589  : 
; 590  :     pEventContext->m_rtTimeStamp += m_rtTimeOffset;

  000a5	8b 4d 0c	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  000a8	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000ab	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000ae	03 82 e8 00 00
	00		 add	 eax, DWORD PTR [edx+232]
  000b4	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  000b7	13 8a ec 00 00
	00		 adc	 ecx, DWORD PTR [edx+236]
  000bd	8b 55 0c	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  000c0	89 42 18	 mov	 DWORD PTR [edx+24], eax
  000c3	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 591  : 
; 592  : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CEngine::CreateEventTimeStamp
XACTENG	ENDS
PUBLIC	?GetEvent@CEngine@XACT@@AAEJPAPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::GetEvent
PUBLIC	??_C@_07PGAALCHE@ppEvent?$AA@			; `string'
;	COMDAT ??_C@_07PGAALCHE@ppEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_07PGAALCHE@ppEvent?$AA@ DB 'ppEvent', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?GetEvent@CEngine@XACT@@AAEJPAPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -12
$T32641 = -8
_hr$ = -4
_ppEvent$ = 8
?GetEvent@CEngine@XACT@@AAEJPAPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CEngine::GetEvent, COMDAT
; _this$ = ecx

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 600  :     ASSERT(ppEvent);

  00009	68 58 02 00 00	 push	 600			; 00000258H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07PGAALCHE@ppEvent?$AA@
  00018	33 c0		 xor	 eax, eax
  0001a	83 7d 08 00	 cmp	 DWORD PTR _ppEvent$[ebp], 0
  0001e	0f 94 c0	 sete	 al
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 601  :     DPF_ENTER();
; 602  : 
; 603  :     HRESULT hr = HRFROMP(*ppEvent = NEW(TRACK_EVENT_CONTEXT));

  0002a	6a 20		 push	 32			; 00000020H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f8	 mov	 DWORD PTR $T32641[ebp], eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _ppEvent$[ebp]
  0003a	8b 55 f8	 mov	 edx, DWORD PTR $T32641[ebp]
  0003d	89 11		 mov	 DWORD PTR [ecx], edx
  0003f	33 c0		 xor	 eax, eax
  00041	83 7d f8 00	 cmp	 DWORD PTR $T32641[ebp], 0
  00045	0f 95 c0	 setne	 al
  00048	48		 dec	 eax
  00049	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  0004e	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax

; 604  : 
; 605  :     DPF_LEAVE_HRESULT(hr);
; 606  :     return hr;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 607  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?GetEvent@CEngine@XACT@@AAEJPAPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CEngine::GetEvent
XACTENG	ENDS
PUBLIC	?FreeAllEvents@CEngine@XACT@@QAEXXZ		; XACT::CEngine::FreeAllEvents
PUBLIC	?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::FreeEvent
; Function compile flags: /Odt
;	COMDAT ?FreeAllEvents@CEngine@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -16
_pEvent$32086 = -12
___AutoIrql$ = -8
?FreeAllEvents@CEngine@XACT@@QAEXXZ PROC NEAR		; XACT::CEngine::FreeAllEvents, COMDAT
; _this$ = ecx

; 613  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 614  :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 615  :     DPF_ENTER();
; 616  :     if(m_pQueue->Initialized()){

  00011	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  0001a	e8 00 00 00 00	 call	 ?Initialized@CPriorityQueue@XACT@@QAEHXZ ; XACT::CPriorityQueue::Initialized
  0001f	85 c0		 test	 eax, eax
  00021	74 25		 je	 SHORT $L32085
$L32088:

; 617  :         PTRACK_EVENT_CONTEXT pEvent;
; 618  :         while(pEvent = m_pQueue->Pop()){

  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 89 f0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+240]
  0002c	e8 00 00 00 00	 call	 ?Pop@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@XZ ; XACT::CPriorityQueue::Pop
  00031	89 45 f4	 mov	 DWORD PTR _pEvent$32086[ebp], eax
  00034	83 7d f4 00	 cmp	 DWORD PTR _pEvent$32086[ebp], 0
  00038	74 0e		 je	 SHORT $L32085

; 619  :             FreeEvent(pEvent);

  0003a	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$32086[ebp]
  0003d	52		 push	 edx
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::FreeEvent

; 620  :         }

  00046	eb db		 jmp	 SHORT $L32088
$L32085:

; 621  :     }
; 622  : }

  00048	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0004b	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?FreeAllEvents@CEngine@XACT@@QAEXXZ ENDP		; XACT::CEngine::FreeAllEvents
XACTENG	ENDS
PUBLIC	??_C@_06KCBOCDPD@pEvent?$AA@			; `string'
PUBLIC	??_C@_0BD@BHDLDJBJ@CEngine?3?3FreeEvent?$AA@	; `string'
PUBLIC	??_C@_0CH@BOMBDLDN@Freeing?5Event?5?$CI0x?$CFx?$CJ?5type?5?$CFd?0?5tr@ ; `string'
;	COMDAT ??_C@_06KCBOCDPD@pEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_06KCBOCDPD@pEvent?$AA@ DB 'pEvent', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@BHDLDJBJ@CEngine?3?3FreeEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@BHDLDJBJ@CEngine?3?3FreeEvent?$AA@ DB 'CEngine::FreeEvent', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CH@BOMBDLDN@Freeing?5Event?5?$CI0x?$CFx?$CJ?5type?5?$CFd?0?5tr@
XACTENG_RD	SEGMENT
??_C@_0CH@BOMBDLDN@Freeing?5Event?5?$CI0x?$CFx?$CJ?5type?5?$CFd?0?5tr@ DB 'F'
	DB	'reeing Event (0x%x) type %d, track %x', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -20
$T32649 = -16
$T32648 = -12
___AutoIrql$ = -8
_pEvent$ = 8
?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CEngine::FreeEvent, COMDAT
; _this$ = ecx

; 628  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 629  :     AutoIrql();

  00009	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 630  :     ASSERT(pEvent);

  00011	68 76 02 00 00	 push	 630			; 00000276H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06KCBOCDPD@pEvent?$AA@
  00020	33 c0		 xor	 eax, eax
  00022	83 7d 08 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  00026	0f 94 c0	 sete	 al
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 631  :     
; 632  :     DPF_ENTER();
; 633  : 
; 634  :     if (pEvent->m_pTrack)

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00035	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00039	74 4b		 je	 SHORT $L32096

; 635  :     {
; 636  : 
; 637  :         DPF_BLAB("Freeing Event (0x%x) type %d, track %x",
; 638  :             pEvent,
; 639  :             pEvent->m_pEventHeader->wType,
; 640  :             pEvent->m_pTrack);

  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@BHDLDJBJ@CEngine?3?3FreeEvent?$AA@
  00045	68 7d 02 00 00	 push	 637			; 0000027dH
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0004f	6a 05		 push	 5
  00051	6a 09		 push	 9
  00053	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00058	83 c4 18	 add	 esp, 24			; 00000018H
  0005b	8b 55 08	 mov	 edx, DWORD PTR _pEvent$[ebp]
  0005e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00061	50		 push	 eax
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00065	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00068	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0006b	50		 push	 eax
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  0006f	51		 push	 ecx
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@BOMBDLDN@Freeing?5Event?5?$CI0x?$CFx?$CJ?5type?5?$CFd?0?5tr@
  00075	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0007a	83 c4 10	 add	 esp, 16			; 00000010H

; 641  :         RemoveEntryList(&pEvent->m_ListEntry);

  0007d	8b 55 08	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00080	52		 push	 edx
  00081	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
$L32096:

; 642  : 
; 643  :     }
; 644  : 
; 645  :     if (pEvent->m_pEventHeader->dwFlags & XACT_FLAG_EVENT_RUNTIME){

  00086	8b 45 08	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00089	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008f	83 e2 01	 and	 edx, 1
  00092	85 d2		 test	 edx, edx
  00094	74 28		 je	 SHORT $L32099

; 646  : 
; 647  :         //
; 648  :         // API supplied event points to allocated context
; 649  :         //
; 650  : 
; 651  :         DELETE(pEvent->m_pEventHeader);

  00096	8b 45 08	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00099	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0009d	74 1f		 je	 SHORT $L32099
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  000a2	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a5	89 55 f4	 mov	 DWORD PTR $T32648[ebp], edx
  000a8	8b 45 f4	 mov	 eax, DWORD PTR $T32648[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b1	83 c4 04	 add	 esp, 4
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  000b7	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
$L32099:

; 652  :     }
; 653  : 
; 654  :     DELETE(pEvent);

  000be	83 7d 08 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  000c2	74 19		 je	 SHORT $L32102
  000c4	8b 55 08	 mov	 edx, DWORD PTR _pEvent$[ebp]
  000c7	89 55 f0	 mov	 DWORD PTR $T32649[ebp], edx
  000ca	8b 45 f0	 mov	 eax, DWORD PTR $T32649[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d3	83 c4 04	 add	 esp, 4
  000d6	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pEvent$[ebp], 0
$L32102:

; 655  : }

  000dd	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  000e0	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	c2 04 00	 ret	 4
?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CEngine::FreeEvent
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
XACTENG	ENDS
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 99   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  :     using namespace XACT;
; 101  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 102  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
XACTENG	ENDS
PUBLIC	?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z ; XACT::CEngine::FreeEventsAtOrAfter
PUBLIC	??_C@_06NFPEFOJH@pTrack?$AA@			; `string'
;	COMDAT ??_C@_06NFPEFOJH@pTrack?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
XACTENG_RD	SEGMENT
??_C@_06NFPEFOJH@pTrack?$AA@ DB 'pTrack', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z
XACTENG	SEGMENT
tv136 = -36
_this$ = -32
___AutoIrql$ = -28
_pEvent$ = -20
_rtCurrent$ = -16
_pEntry$ = -4
_pTrack$ = 8
_timeStamp$ = 12
?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z PROC NEAR ; XACT::CEngine::FreeEventsAtOrAfter, COMDAT
; _this$ = ecx

; 661  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 662  :     AutoIrql();

  00009	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 663  :     PTRACK_EVENT_CONTEXT pEvent;
; 664  :     PLIST_ENTRY pEntry;
; 665  :     REFERENCE_TIME rtCurrent;
; 666  : 
; 667  :     DPF_ENTER();
; 668  : 
; 669  :     //
; 670  :     // since we are at raised irql we can traverse the event list associated with a voice
; 671  :     // without asking the track to do it 
; 672  :     //
; 673  : 
; 674  :     ASSERT(pTrack);

  00011	68 a2 02 00 00	 push	 674			; 000002a2H
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06NFPEFOJH@pTrack?$AA@
  00020	33 c0		 xor	 eax, eax
  00022	83 7d 08 00	 cmp	 DWORD PTR _pTrack$[ebp], 0
  00026	0f 94 c0	 sete	 al
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 675  : 
; 676  :     pEntry = pTrack->lstEvents.Flink;

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  00035	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00038	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx

; 677  : 
; 678  :     GetTime(&rtCurrent);

  0003b	8d 45 f0	 lea	 eax, DWORD PTR _rtCurrent$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?GetTime@CEngine@XACT@@QAEXPA_J@Z ; XACT::CEngine::GetTime

; 679  : 
; 680  :     // Add timing offset. 
; 681  :     timeStamp += rtCurrent;

  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _timeStamp$[ebp]
  0004a	03 4d f0	 add	 ecx, DWORD PTR _rtCurrent$[ebp]
  0004d	8b 55 10	 mov	 edx, DWORD PTR _timeStamp$[ebp+4]
  00050	13 55 f4	 adc	 edx, DWORD PTR _rtCurrent$[ebp+4]
  00053	89 4d 0c	 mov	 DWORD PTR _timeStamp$[ebp], ecx
  00056	89 55 10	 mov	 DWORD PTR _timeStamp$[ebp+4], edx
$L32115:

; 682  : 
; 683  :     while (pEntry != &pTrack->lstEvents) {

  00059	8b 45 08	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0005c	83 c0 08	 add	 eax, 8
  0005f	39 45 fc	 cmp	 DWORD PTR _pEntry$[ebp], eax
  00062	74 55		 je	 SHORT $L32116

; 684  : 
; 685  :         pEvent = CONTAINING_RECORD(pEntry, TRACK_EVENT_CONTEXT, m_ListEntry);

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00067	89 4d ec	 mov	 DWORD PTR _pEvent$[ebp], ecx

; 686  : 
; 687  :         //
; 688  :         // grab the next pointer before removing this event from the list...
; 689  :         //
; 690  : 
; 691  :         pEntry = pEntry->Flink;

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  0006d	8b 02		 mov	 eax, DWORD PTR [edx]
  0006f	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 692  : 
; 693  :         //
; 694  :         // make sure the event was actually queued
; 695  :         // it can exist in the track list without being in the priority queue
; 696  :         // since this call could have pre-empted the enqueue
; 697  :         //
; 698  : 
; 699  :         if((pEvent->m_rtTimeStamp >= timeStamp) && pEvent->m_dwQueueIndex){

  00072	8b 4d ec	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00075	89 4d dc	 mov	 DWORD PTR tv136[ebp], ecx
  00078	8b 55 dc	 mov	 edx, DWORD PTR tv136[ebp]
  0007b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0007e	3b 45 10	 cmp	 eax, DWORD PTR _timeStamp$[ebp+4]
  00081	7c 28		 jl	 SHORT $L32121
  00083	7f 0b		 jg	 SHORT $L32656
  00085	8b 4d dc	 mov	 ecx, DWORD PTR tv136[ebp]
  00088	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0008b	3b 55 0c	 cmp	 edx, DWORD PTR _timeStamp$[ebp]
  0008e	72 1b		 jb	 SHORT $L32121
$L32656:
  00090	8b 45 ec	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00093	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00097	74 12		 je	 SHORT $L32121

; 700  :             m_pQueue->Remove(pEvent);            

  00099	8b 4d ec	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  0009c	51		 push	 ecx
  0009d	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	8b 8a f0 00 00
	00		 mov	 ecx, DWORD PTR [edx+240]
  000a6	e8 00 00 00 00	 call	 ?Remove@CPriorityQueue@XACT@@QAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::Remove
$L32121:

; 701  :         }
; 702  : 
; 703  :         FreeEvent(pEvent);

  000ab	8b 45 ec	 mov	 eax, DWORD PTR _pEvent$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	e8 00 00 00 00	 call	 ?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::FreeEvent

; 704  : 
; 705  :     }

  000b7	eb a0		 jmp	 SHORT $L32115
$L32116:

; 706  : 
; 707  : }

  000b9	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  000bc	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z ENDP ; XACT::CEngine::FreeEventsAtOrAfter
XACTENG	ENDS
EXTRN	__imp__KeQuerySystemTime@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetTimeOffset@CEngine@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -28
___AutoIrql$ = -24
_rtSampleTime$ = -16
_rtSystemTime$ = -8
?SetTimeOffset@CEngine@XACT@@QAEXXZ PROC NEAR		; XACT::CEngine::SetTimeOffset, COMDAT
; _this$ = ecx

; 713  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 714  :     REFERENCE_TIME rtSampleTime,rtSystemTime;
; 715  : 
; 716  :     //
; 717  :     // the audio hw clock and the system clock are two independent timers
; 718  :     // both values returned below are in unsing of 100 nsecs.
; 719  :     // Once in a while we adjust the offset between the clocks to create
; 720  :     // a time offset used to convert event timestamps (that are in audio hw sampletime)
; 721  :     // to absolute system times
; 722  :     //
; 723  : 
; 724  :     AutoIrql();

  00009	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 725  :     GetTime(&rtSampleTime);

  00011	8d 45 f0	 lea	 eax, DWORD PTR _rtSampleTime$[ebp]
  00014	50		 push	 eax
  00015	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetTime@CEngine@XACT@@QAEXPA_J@Z ; XACT::CEngine::GetTime

; 726  :     KeQuerySystemTime((PLARGE_INTEGER)&rtSystemTime);

  0001d	8d 4d f8	 lea	 ecx, DWORD PTR _rtSystemTime$[ebp]
  00020	51		 push	 ecx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 727  : 
; 728  :     m_rtTimeOffset = rtSystemTime - rtSampleTime;

  00027	8b 55 f8	 mov	 edx, DWORD PTR _rtSystemTime$[ebp]
  0002a	2b 55 f0	 sub	 edx, DWORD PTR _rtSampleTime$[ebp]
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _rtSystemTime$[ebp+4]
  00030	1b 45 f4	 sbb	 eax, DWORD PTR _rtSampleTime$[ebp+4]
  00033	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	89 91 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], edx
  0003c	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax

; 729  : 
; 730  : }

  00042	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00045	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?SetTimeOffset@CEngine@XACT@@QAEXXZ ENDP		; XACT::CEngine::SetTimeOffset
XACTENG	ENDS
PUBLIC	?Enqueue@CEngine@XACT@@UAGJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::Enqueue
PUBLIC	?SetTimer@CEngine@XACT@@AAEXXZ			; XACT::CEngine::SetTimer
; Function compile flags: /Odt
;	COMDAT ?Enqueue@CEngine@XACT@@UAGJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
tv131 = -44
$T32663 = -40
___AutoIrql$32144 = -36
___AutoIrql$32141 = -28
_hr$ = -20
_bProcessQueueUpToEvent$ = -16
_bExecuteNow$ = -12
_rtCurrentSystemTime$ = -8
_this$ = 8
_pEvent$ = 12
?Enqueue@CEngine@XACT@@UAGJPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CEngine::Enqueue, COMDAT

; 737  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 738  :     HRESULT hr = S_OK;

  00006	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 739  :     DPF_ENTER();
; 740  : 
; 741  :     REFERENCE_TIME rtCurrentSystemTime;
; 742  :     
; 743  : 
; 744  :     BOOL bExecuteNow = FALSE;

  0000d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bExecuteNow$[ebp], 0

; 745  :     BOOL bProcessQueueUpToEvent = FALSE;

  00014	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bProcessQueueUpToEvent$[ebp], 0

; 746  :         
; 747  :     KeQuerySystemTime((PLARGE_INTEGER)&rtCurrentSystemTime);

  0001b	8d 45 f8	 lea	 eax, DWORD PTR _rtCurrentSystemTime$[ebp]
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 748  :     
; 749  :     if(rtCurrentSystemTime >= pEvent->m_rtTimeStamp){

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00028	89 4d d4	 mov	 DWORD PTR tv131[ebp], ecx
  0002b	8b 55 d4	 mov	 edx, DWORD PTR tv131[ebp]
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _rtCurrentSystemTime$[ebp+4]
  00031	3b 42 1c	 cmp	 eax, DWORD PTR [edx+28]
  00034	7c 1b		 jl	 SHORT $L32139
  00036	7f 0b		 jg	 SHORT $L32664
  00038	8b 4d d4	 mov	 ecx, DWORD PTR tv131[ebp]
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _rtCurrentSystemTime$[ebp]
  0003e	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  00041	72 0e		 jb	 SHORT $L32139
$L32664:

; 750  :         
; 751  :         bExecuteNow = TRUE;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bExecuteNow$[ebp], 1

; 752  :         bProcessQueueUpToEvent = TRUE;

  0004a	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bProcessQueueUpToEvent$[ebp], 1
$L32139:

; 753  :         
; 754  :     }
; 755  :     
; 756  :     // If the event is scheduled for now or earlier, execute it right away.
; 757  :     if (bExecuteNow){

  00051	83 7d f4 00	 cmp	 DWORD PTR _bExecuteNow$[ebp], 0
  00055	74 42		 je	 SHORT $L32140

; 758  : 
; 759  :         AutoIrql();

  00057	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$32141[ebp]
  0005a	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 760  : 
; 761  :         if(bProcessQueueUpToEvent){

  0005f	83 7d f0 00	 cmp	 DWORD PTR _bProcessQueueUpToEvent$[ebp], 0
  00063	74 17		 je	 SHORT $L32142

; 762  :             DispatchEventsUntil(&pEvent->m_rtTimeStamp, &rtCurrentSystemTime);

  00065	8d 45 f8	 lea	 eax, DWORD PTR _rtCurrentSystemTime$[ebp]
  00068	50		 push	 eax
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  0006c	83 c1 18	 add	 ecx, 24			; 00000018H
  0006f	51		 push	 ecx
  00070	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00073	8b 02		 mov	 eax, DWORD PTR [edx]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	51		 push	 ecx
  00079	ff 50 0c	 call	 DWORD PTR [eax+12]
$L32142:

; 763  :         }
; 764  : 
; 765  :         hr = DispatchEvent(pEvent);

  0007c	8b 55 0c	 mov	 edx, DWORD PTR _pEvent$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00088	52		 push	 edx
  00089	ff 51 10	 call	 DWORD PTR [ecx+16]
  0008c	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 766  : 
; 767  :     } else {

  0008f	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoIrql$32141[ebp]
  00092	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  00097	eb 5a		 jmp	 SHORT $L32143
$L32140:

; 768  : 
; 769  :         AutoIrql();

  00099	8d 4d dc	 lea	 ecx, DWORD PTR ___AutoIrql$32144[ebp]
  0009c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 770  : 
; 771  :         if(!m_bAllowQueueing){

  000a1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  000a8	75 14		 jne	 SHORT $L32145

; 772  :             return E_FAIL;

  000aa	c7 45 d8 05 40
	00 80		 mov	 DWORD PTR $T32663[ebp], -2147467259 ; 80004005H
  000b1	8d 4d dc	 lea	 ecx, DWORD PTR ___AutoIrql$32144[ebp]
  000b4	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  000b9	8b 45 d8	 mov	 eax, DWORD PTR $T32663[ebp]
  000bc	eb 38		 jmp	 SHORT $L32132
$L32145:

; 773  :         }
; 774  : 
; 775  :         pEvent->m_dwQueueIndex = 0;         

  000be	8b 4d 0c	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  000c1	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 776  : 
; 777  :         hr = m_pQueue->Push(pEvent);

  000c8	8b 55 0c	 mov	 edx, DWORD PTR _pEvent$[ebp]
  000cb	52		 push	 edx
  000cc	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [eax+240]
  000d5	e8 00 00 00 00	 call	 ?Push@CPriorityQueue@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CPriorityQueue::Push
  000da	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 778  :                 
; 779  :         if(SUCCEEDED(hr)){

  000dd	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e1	7c 08		 jl	 SHORT $L32149

; 780  :             SetTimer();

  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	e8 00 00 00 00	 call	 ?SetTimer@CEngine@XACT@@AAEXXZ ; XACT::CEngine::SetTimer
$L32149:

; 781  :         }
; 782  : 
; 783  :     }

  000eb	8d 4d dc	 lea	 ecx, DWORD PTR ___AutoIrql$32144[ebp]
  000ee	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
$L32143:

; 784  : 
; 785  :     DPF_LEAVE_HRESULT(hr);
; 786  : 
; 787  :     return hr;

  000f3	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]
$L32132:

; 788  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 08 00	 ret	 8
?Enqueue@CEngine@XACT@@UAGJPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CEngine::Enqueue
XACTENG	ENDS
PUBLIC	?Dispatch@CEngine@XACT@@EAGJXZ			; XACT::CEngine::Dispatch
; Function compile flags: /Odt
;	COMDAT ?Dispatch@CEngine@XACT@@EAGJXZ
XACTENG	SEGMENT
_hr$ = -12
_now$ = -8
_this$ = 8
?Dispatch@CEngine@XACT@@EAGJXZ PROC NEAR		; XACT::CEngine::Dispatch, COMDAT

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 795  :     // Execute everything that's less than or equal to now.
; 796  :     HRESULT hr = S_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 797  :     DPF_ENTER();    
; 798  : 
; 799  :     REFERENCE_TIME now;
; 800  :     KeQuerySystemTime((PLARGE_INTEGER) &now);

  0000d	8d 45 f8	 lea	 eax, DWORD PTR _now$[ebp]
  00010	50		 push	 eax
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 801  : 
; 802  :     m_bTimerSet = FALSE;

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 803  : 
; 804  :     if(SUCCEEDED(hr)){

  00021	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00025	7c 17		 jl	 SHORT $L32158

; 805  :         hr = DispatchEventsUntil(&now, &now);

  00027	8d 55 f8	 lea	 edx, DWORD PTR _now$[ebp]
  0002a	52		 push	 edx
  0002b	8d 45 f8	 lea	 eax, DWORD PTR _now$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00037	50		 push	 eax
  00038	ff 52 0c	 call	 DWORD PTR [edx+12]
  0003b	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L32158:

; 806  :     }
; 807  : 
; 808  :     DPF_LEAVE_HRESULT(hr);
; 809  : 
; 810  :     return hr;

  0003e	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 811  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?Dispatch@CEngine@XACT@@EAGJXZ ENDP			; XACT::CEngine::Dispatch
XACTENG	ENDS
PUBLIC	?DispatchEventsUntil@CEngine@XACT@@EAGJPB_J0@Z	; XACT::CEngine::DispatchEventsUntil
; Function compile flags: /Odt
;	COMDAT ?DispatchEventsUntil@CEngine@XACT@@EAGJPB_J0@Z
XACTENG	SEGMENT
_pEvent$32169 = -12
_hr$ = -8
_bFirstEvent$ = -4
_this$ = 8
_pTime$ = 12
_pNow$ = 16
?DispatchEventsUntil@CEngine@XACT@@EAGJPB_J0@Z PROC NEAR ; XACT::CEngine::DispatchEventsUntil, COMDAT

; 818  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 819  :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 820  :     DPF_ENTER();
; 821  : 
; 822  :     BOOL bFirstEvent = TRUE;

  0000d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bFirstEvent$[ebp], 1

; 823  :     if(SUCCEEDED(hr)){

  00014	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00018	7c 30		 jl	 SHORT $L32168
$L32171:

; 824  : 
; 825  :         PTRACK_EVENT_CONTEXT pEvent;
; 826  : 
; 827  :         while(pEvent = m_pQueue->PopIfLessThanOrEqual(pNow)){

  0001a	8b 45 10	 mov	 eax, DWORD PTR _pNow$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 89 f0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+240]
  00027	e8 00 00 00 00	 call	 ?PopIfLessThanOrEqual@CPriorityQueue@XACT@@QAEPAU_TRACK_EVENT_CONTEXT@2@PB_J@Z ; XACT::CPriorityQueue::PopIfLessThanOrEqual
  0002c	89 45 f4	 mov	 DWORD PTR _pEvent$32169[ebp], eax
  0002f	83 7d f4 00	 cmp	 DWORD PTR _pEvent$32169[ebp], 0
  00033	74 15		 je	 SHORT $L32168

; 828  :             hr = DispatchEvent(pEvent);

  00035	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$32169[ebp]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00041	52		 push	 edx
  00042	ff 51 10	 call	 DWORD PTR [ecx+16]
  00045	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 829  :         }

  00048	eb d0		 jmp	 SHORT $L32171
$L32168:

; 830  : 
; 831  :     }
; 832  : 
; 833  :     SetTimer();

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?SetTimer@CEngine@XACT@@AAEXXZ ; XACT::CEngine::SetTimer

; 834  : 
; 835  :     DPF_LEAVE_HRESULT(hr);
; 836  : 
; 837  :     return hr;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 838  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
?DispatchEventsUntil@CEngine@XACT@@EAGJPB_J0@Z ENDP	; XACT::CEngine::DispatchEventsUntil
XACTENG	ENDS
PUBLIC	?CreateEventVariation@CEngine@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::CreateEventVariation
PUBLIC	?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z ; XACT::CEngine::PrintTimeStamps
PUBLIC	?DispatchEvent@CEngine@XACT@@EAGJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::DispatchEvent
PUBLIC	?SetFrequency@IDirectSoundStream@@QAGJK@Z	; IDirectSoundStream::SetFrequency
PUBLIC	?SetVolume@IDirectSoundStream@@QAGJJ@Z		; IDirectSoundStream::SetVolume
PUBLIC	?SetLFO@IDirectSoundStream@@QAGJPBU_DSLFODESC@@@Z ; IDirectSoundStream::SetLFO
PUBLIC	?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundStream::SetEG
PUBLIC	?SetFilter@IDirectSoundStream@@QAGJPBU_DSFILTERDESC@@@Z ; IDirectSoundStream::SetFilter
PUBLIC	?SetHeadroom@IDirectSoundStream@@QAGJK@Z	; IDirectSoundStream::SetHeadroom
PUBLIC	?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundStream::SetMixBinVolumes
PUBLIC	?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
PUBLIC	?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ ; XACT::CSoundSource::GetDSoundStream
PUBLIC	??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ ; `string'
PUBLIC	??_C@_0O@LHDKEIH@DispatchEvent?$AA@		; `string'
PUBLIC	??_C@_0N@FLFGDGMG@pSoundSource?$AA@		; `string'
PUBLIC	??_C@_0BH@EGEHHKKL@CEngine?3?3DispatchEvent?$AA@ ; `string'
PUBLIC	??_C@_0CB@ONBADOM@?$CI0x?$CFx?$CJ?5Event?5?$CI?$CFs?$CJ?5not?5recognised@ ; `string'
PUBLIC	?SetEffectData@IDirectSound@@QAGJKKPBXKK@Z	; IDirectSound::SetEffectData
PUBLIC	?SetFrequency@IDirectSoundBuffer@@QAGJK@Z	; IDirectSoundBuffer::SetFrequency
PUBLIC	?SetVolume@IDirectSoundBuffer@@QAGJJ@Z		; IDirectSoundBuffer::SetVolume
PUBLIC	?SetLFO@IDirectSoundBuffer@@QAGJPBU_DSLFODESC@@@Z ; IDirectSoundBuffer::SetLFO
PUBLIC	?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundBuffer::SetEG
PUBLIC	?SetFilter@IDirectSoundBuffer@@QAGJPBU_DSFILTERDESC@@@Z ; IDirectSoundBuffer::SetFilter
PUBLIC	?SetHeadroom@IDirectSoundBuffer@@QAGJK@Z	; IDirectSoundBuffer::SetHeadroom
PUBLIC	?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundBuffer::SetMixBinVolumes
EXTRN	?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z:NEAR ; XACT::CSoundCue::ProcessRuntimeEvent
EXTRN	?Stop@CSoundSource@XACT@@AAEJXZ:NEAR		; XACT::CSoundSource::Stop
EXTRN	?Play@CSoundSource@XACT@@AAEJXZ:NEAR		; XACT::CSoundSource::Play
;	COMDAT ??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
XACTENG_RD	SEGMENT
??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@ DB 'KeG'
	DB	'etCurrentIrql() >= DISPATCH_LEVEL', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@LHDKEIH@DispatchEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@LHDKEIH@DispatchEvent?$AA@ DB 'DispatchEvent', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@FLFGDGMG@pSoundSource?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@FLFGDGMG@pSoundSource?$AA@ DB 'pSoundSource', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@EGEHHKKL@CEngine?3?3DispatchEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@EGEHHKKL@CEngine?3?3DispatchEvent?$AA@ DB 'CEngine::DispatchEve'
	DB	'nt', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@ONBADOM@?$CI0x?$CFx?$CJ?5Event?5?$CI?$CFs?$CJ?5not?5recognised@
XACTENG_RD	SEGMENT
??_C@_0CB@ONBADOM@?$CI0x?$CFx?$CJ?5Event?5?$CI?$CFs?$CJ?5not?5recognised@ DB '('
	DB	'0x%x) Event (%s) not recognised', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?DispatchEvent@CEngine@XACT@@EAGJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
tv87 = -32
_dsMixBins$32226 = -28
_hr$ = -20
_pEvent$ = -16
_pDSBuffer$ = -12
_pSoundSource$ = -8
_pDSStream$ = -4
_this$ = 8
_pEventContext$ = 12
?DispatchEvent@CEngine@XACT@@EAGJPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CEngine::DispatchEvent, COMDAT

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 846  : 
; 847  :     ASSERT_IN_DPC;

  00006	68 4f 03 00 00	 push	 847			; 0000034fH
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  00015	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	33 c9		 xor	 ecx, ecx
  0001f	83 f8 02	 cmp	 eax, 2
  00022	0f 9c c1	 setl	 cl
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 848  :     HRESULT hr = S_OK;

  0002e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 849  : 
; 850  :     LPDIRECTSOUNDBUFFER pDSBuffer;
; 851  :     LPDIRECTSOUNDSTREAM pDSStream;
; 852  :     
; 853  :     PXACT_TRACK_EVENT pEvent = (PXACT_TRACK_EVENT) pEventContext->m_pEventHeader;

  00035	8b 55 0c	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  00038	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0003b	89 45 f0	 mov	 DWORD PTR _pEvent$[ebp], eax

; 854  :     CSoundSource *pSoundSource = pEventContext->m_pTrack->pSoundSource;

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00041	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 f8	 mov	 DWORD PTR _pSoundSource$[ebp], eax

; 855  : 
; 856  :     if (pSoundSource) {

  00049	83 7d f8 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  0004d	74 16		 je	 SHORT $L32185

; 857  :         pDSBuffer = pSoundSource->GetDSoundBuffer();

  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  00052	e8 00 00 00 00	 call	 ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
  00057	89 45 f4	 mov	 DWORD PTR _pDSBuffer$[ebp], eax

; 858  :         pDSStream = pSoundSource->GetDSoundStream();

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0005d	e8 00 00 00 00	 call	 ?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ ; XACT::CSoundSource::GetDSoundStream
  00062	89 45 fc	 mov	 DWORD PTR _pDSStream$[ebp], eax
$L32185:

; 859  :     }
; 860  : 
; 861  :     DPF_ENTER();
; 862  :     
; 863  :     PrintTimeStamps("DispatchEvent",pEventContext, pEventContext->m_rtTimeStamp,0);

  00065	6a 00		 push	 0
  00067	6a 00		 push	 0
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  0006c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0006f	52		 push	 edx
  00070	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00073	50		 push	 eax
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00077	51		 push	 ecx
  00078	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@LHDKEIH@DispatchEvent?$AA@
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z ; XACT::CEngine::PrintTimeStamps

; 864  : 
; 865  :     switch (pEvent->Header.wType) {

  00085	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00088	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0008b	89 45 e0	 mov	 DWORD PTR tv87[ebp], eax
  0008e	83 7d e0 0e	 cmp	 DWORD PTR tv87[ebp], 14	; 0000000eH
  00092	0f 87 5f 02 00
	00		 ja	 $L32231
  00098	8b 4d e0	 mov	 ecx, DWORD PTR tv87[ebp]
  0009b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L32674[ecx*4]
$L32191:

; 866  :     
; 867  :     case eXACTEvent_PitchAndVolumeVariation:
; 868  :         CreateEventVariation(pEventContext);

  000a2	8b 55 0c	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  000a5	52		 push	 edx
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ?CreateEventVariation@CEngine@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::CreateEventVariation

; 869  :         break;

  000ae	e9 87 02 00 00	 jmp	 $L32188
$L32192:

; 870  : 
; 871  :     case eXACTEvent_PlayWithPitchAndVolumeVariation:
; 872  :         CreateEventVariation(pEventContext);

  000b3	8b 45 0c	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  000b6	50		 push	 eax
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?CreateEventVariation@CEngine@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::CreateEventVariation
$L32193:

; 873  : 
; 874  :         //
; 875  :         // fall in below so we can now play the variation
; 876  :         //
; 877  : 
; 878  :     case eXACTEvent_Play:
; 879  :         
; 880  :         ASSERT(pSoundSource);

  000bf	68 70 03 00 00	 push	 880			; 00000370H
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  000c9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@FLFGDGMG@pSoundSource?$AA@
  000ce	33 c9		 xor	 ecx, ecx
  000d0	83 7d f8 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  000d4	0f 94 c1	 sete	 cl
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 881  :         hr = pSoundSource->Play();        

  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  000e3	e8 00 00 00 00	 call	 ?Play@CSoundSource@XACT@@AAEJXZ ; XACT::CSoundSource::Play
  000e8	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 882  :         pEventContext->m_pTrack->pSoundCue->ProcessRuntimeEvent(pEvent);

  000eb	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$[ebp]
  000ee	52		 push	 edx
  000ef	8b 45 0c	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  000f2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000f5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f8	e8 00 00 00 00	 call	 ?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z ; XACT::CSoundCue::ProcessRuntimeEvent

; 883  :         break;

  000fd	e9 38 02 00 00	 jmp	 $L32188
$L32195:

; 884  : 
; 885  :     case eXACTEvent_Stop:
; 886  : 
; 887  :         //
; 888  :         // stop the voice playing the current wave/fxin
; 889  :         //
; 890  : 
; 891  :         ASSERT(pSoundSource);

  00102	68 7b 03 00 00	 push	 891			; 0000037bH
  00107	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0010c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@FLFGDGMG@pSoundSource?$AA@
  00111	33 d2		 xor	 edx, edx
  00113	83 7d f8 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  00117	0f 94 c2	 sete	 dl
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00120	83 c4 10	 add	 esp, 16			; 00000010H

; 892  :         hr = pSoundSource->Stop();

  00123	8b 4d f8	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  00126	e8 00 00 00 00	 call	 ?Stop@CSoundSource@XACT@@AAEJXZ ; XACT::CSoundSource::Stop
  0012b	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 893  :         break;

  0012e	e9 07 02 00 00	 jmp	 $L32188
$L32196:

; 894  : 
; 895  :     case eXACTEvent_SetFrequency:
; 896  : 
; 897  :         if (pDSBuffer) {

  00133	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  00137	74 16		 je	 SHORT $L32197

; 898  :             hr = pDSBuffer->SetFrequency((DWORD)pEvent->EventData.SetFrequency.wFrequency);

  00139	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  0013c	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00140	51		 push	 ecx
  00141	8b 55 f4	 mov	 edx, DWORD PTR _pDSBuffer$[ebp]
  00144	52		 push	 edx
  00145	e8 00 00 00 00	 call	 ?SetFrequency@IDirectSoundBuffer@@QAGJK@Z ; IDirectSoundBuffer::SetFrequency
  0014a	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 899  :         } else {

  0014d	eb 14		 jmp	 SHORT $L32199
$L32197:

; 900  :             hr = pDSStream->SetFrequency((DWORD)pEvent->EventData.SetFrequency.wFrequency);

  0014f	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00152	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  00156	51		 push	 ecx
  00157	8b 55 fc	 mov	 edx, DWORD PTR _pDSStream$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 ?SetFrequency@IDirectSoundStream@@QAGJK@Z ; IDirectSoundStream::SetFrequency
  00160	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32199:

; 901  :         }
; 902  :         break;

  00163	e9 d2 01 00 00	 jmp	 $L32188
$L32201:

; 903  : 
; 904  :     case eXACTEvent_SetVolume:
; 905  : 
; 906  :         if (pDSBuffer) {

  00168	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  0016c	74 16		 je	 SHORT $L32202

; 907  :             hr = pDSBuffer->SetVolume((LONG)pEvent->EventData.SetVolume.sVolume);

  0016e	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00171	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  00175	51		 push	 ecx
  00176	8b 55 f4	 mov	 edx, DWORD PTR _pDSBuffer$[ebp]
  00179	52		 push	 edx
  0017a	e8 00 00 00 00	 call	 ?SetVolume@IDirectSoundBuffer@@QAGJJ@Z ; IDirectSoundBuffer::SetVolume
  0017f	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 908  :         } else {

  00182	eb 14		 jmp	 SHORT $L32204
$L32202:

; 909  :             hr = pDSStream->SetVolume((LONG)pEvent->EventData.SetVolume.sVolume);

  00184	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00187	0f bf 48 0c	 movsx	 ecx, WORD PTR [eax+12]
  0018b	51		 push	 ecx
  0018c	8b 55 fc	 mov	 edx, DWORD PTR _pDSStream$[ebp]
  0018f	52		 push	 edx
  00190	e8 00 00 00 00	 call	 ?SetVolume@IDirectSoundStream@@QAGJJ@Z ; IDirectSoundStream::SetVolume
  00195	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32204:

; 910  :         }
; 911  :         break;

  00198	e9 9d 01 00 00	 jmp	 $L32188
$L32206:

; 912  : 
; 913  :     case eXACTEvent_SetHeadroom:
; 914  : 
; 915  :         if (pDSBuffer) {

  0019d	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  001a1	74 16		 je	 SHORT $L32207

; 916  :             hr = pDSBuffer->SetHeadroom((DWORD)pEvent->EventData.SetHeadroom.wHeadroom);

  001a3	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  001a6	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  001aa	51		 push	 ecx
  001ab	8b 55 f4	 mov	 edx, DWORD PTR _pDSBuffer$[ebp]
  001ae	52		 push	 edx
  001af	e8 00 00 00 00	 call	 ?SetHeadroom@IDirectSoundBuffer@@QAGJK@Z ; IDirectSoundBuffer::SetHeadroom
  001b4	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 917  :         } else {

  001b7	eb 14		 jmp	 SHORT $L32209
$L32207:

; 918  :             hr = pDSStream->SetHeadroom((DWORD)pEvent->EventData.SetHeadroom.wHeadroom);

  001b9	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  001bc	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  001c0	51		 push	 ecx
  001c1	8b 55 fc	 mov	 edx, DWORD PTR _pDSStream$[ebp]
  001c4	52		 push	 edx
  001c5	e8 00 00 00 00	 call	 ?SetHeadroom@IDirectSoundStream@@QAGJK@Z ; IDirectSoundStream::SetHeadroom
  001ca	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32209:

; 919  :         }
; 920  :         break;

  001cd	e9 68 01 00 00	 jmp	 $L32188
$L32211:

; 921  : 
; 922  :     case eXACTEvent_SetLFO:
; 923  : 
; 924  :         if (pDSBuffer) {

  001d2	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  001d6	74 15		 je	 SHORT $L32212

; 925  :             hr = pDSBuffer->SetLFO(&pEvent->EventData.SetLFO.Desc);

  001d8	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  001db	83 c0 0c	 add	 eax, 12			; 0000000cH
  001de	50		 push	 eax
  001df	8b 4d f4	 mov	 ecx, DWORD PTR _pDSBuffer$[ebp]
  001e2	51		 push	 ecx
  001e3	e8 00 00 00 00	 call	 ?SetLFO@IDirectSoundBuffer@@QAGJPBU_DSLFODESC@@@Z ; IDirectSoundBuffer::SetLFO
  001e8	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 926  :         } else {

  001eb	eb 13		 jmp	 SHORT $L32213
$L32212:

; 927  :             hr = pDSStream->SetLFO(&pEvent->EventData.SetLFO.Desc);

  001ed	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$[ebp]
  001f0	83 c2 0c	 add	 edx, 12			; 0000000cH
  001f3	52		 push	 edx
  001f4	8b 45 fc	 mov	 eax, DWORD PTR _pDSStream$[ebp]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?SetLFO@IDirectSoundStream@@QAGJPBU_DSLFODESC@@@Z ; IDirectSoundStream::SetLFO
  001fd	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32213:

; 928  :         }
; 929  :         break;

  00200	e9 35 01 00 00	 jmp	 $L32188
$L32214:

; 930  : 
; 931  :     case eXACTEvent_SetEG:
; 932  : 
; 933  :         if (pDSBuffer) {

  00205	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  00209	74 15		 je	 SHORT $L32215

; 934  :             hr = pDSBuffer->SetEG(&pEvent->EventData.SetEG.Desc);

  0020b	8b 4d f0	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  0020e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00211	51		 push	 ecx
  00212	8b 55 f4	 mov	 edx, DWORD PTR _pDSBuffer$[ebp]
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundBuffer::SetEG
  0021b	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 935  :         } else {

  0021e	eb 13		 jmp	 SHORT $L32216
$L32215:

; 936  :             hr = pDSStream->SetEG(&pEvent->EventData.SetEG.Desc);

  00220	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00223	83 c0 0c	 add	 eax, 12			; 0000000cH
  00226	50		 push	 eax
  00227	8b 4d fc	 mov	 ecx, DWORD PTR _pDSStream$[ebp]
  0022a	51		 push	 ecx
  0022b	e8 00 00 00 00	 call	 ?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z ; IDirectSoundStream::SetEG
  00230	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32216:

; 937  :         }
; 938  :         break;

  00233	e9 02 01 00 00	 jmp	 $L32188
$L32217:

; 939  : 
; 940  :     case eXACTEvent_SetFilter:
; 941  : 
; 942  :         if (pDSBuffer) {

  00238	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  0023c	74 15		 je	 SHORT $L32218

; 943  :             hr = pDSBuffer->SetFilter(&pEvent->EventData.SetFilter.Desc);

  0023e	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00241	83 c2 0c	 add	 edx, 12			; 0000000cH
  00244	52		 push	 edx
  00245	8b 45 f4	 mov	 eax, DWORD PTR _pDSBuffer$[ebp]
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 ?SetFilter@IDirectSoundBuffer@@QAGJPBU_DSFILTERDESC@@@Z ; IDirectSoundBuffer::SetFilter
  0024e	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 944  :         } else {

  00251	eb 13		 jmp	 SHORT $L32219
$L32218:

; 945  :             hr = pDSStream->SetFilter(&pEvent->EventData.SetFilter.Desc);

  00253	8b 4d f0	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00256	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00259	51		 push	 ecx
  0025a	8b 55 fc	 mov	 edx, DWORD PTR _pDSStream$[ebp]
  0025d	52		 push	 edx
  0025e	e8 00 00 00 00	 call	 ?SetFilter@IDirectSoundStream@@QAGJPBU_DSFILTERDESC@@@Z ; IDirectSoundStream::SetFilter
  00263	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32219:

; 946  :         }
; 947  :         break;

  00266	e9 cf 00 00 00	 jmp	 $L32188
$L32220:

; 948  : 
; 949  :     case eXACTEvent_SetEffectData:
; 950  : 
; 951  :         hr = m_pDirectSound->SetEffectData(
; 952  :             (DWORD)pEvent->EventData.SetEffectData.wEffectIndex,
; 953  :             (DWORD)pEvent->EventData.SetEffectData.wOffset,
; 954  :             &pEvent->EventData.SetEffectData.dwData,
; 955  :             (DWORD)pEvent->EventData.SetEffectData.wDataSize,
; 956  :             DSFX_IMMEDIATE
; 957  :             );

  0026b	6a 00		 push	 0
  0026d	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  00270	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  00274	51		 push	 ecx
  00275	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00278	83 c2 14	 add	 edx, 20			; 00000014H
  0027b	52		 push	 edx
  0027c	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  0027f	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  00283	51		 push	 ecx
  00284	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00287	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  0028b	50		 push	 eax
  0028c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0028f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00292	52		 push	 edx
  00293	e8 00 00 00 00	 call	 ?SetEffectData@IDirectSound@@QAGJKKPBXKK@Z ; IDirectSound::SetEffectData
  00298	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 958  :         
; 959  :         break;

  0029b	e9 9a 00 00 00	 jmp	 $L32188
$L32224:

; 960  :     case eXACTEvent_Marker:
; 961  : 
; 962  :         //
; 963  :         // a marker event is purely a notification generator
; 964  :         //
; 965  : 
; 966  :         pEventContext->m_pTrack->pSoundCue->ProcessRuntimeEvent(pEvent);

  002a0	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  002a3	50		 push	 eax
  002a4	8b 4d 0c	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  002a7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  002aa	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002ad	e8 00 00 00 00	 call	 ?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z ; XACT::CSoundCue::ProcessRuntimeEvent

; 967  :         break;

  002b2	e9 83 00 00 00	 jmp	 $L32188
$L32225:

; 968  :         
; 969  :     case eXACTEvent_SetMixBinVolumes:
; 970  : 
; 971  :         DSMIXBINS dsMixBins;
; 972  :         dsMixBins.dwMixBinCount = pEvent->EventData.SetMixBinVolumes.dwCount;

  002b7	8b 45 f0	 mov	 eax, DWORD PTR _pEvent$[ebp]
  002ba	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002bd	89 4d e4	 mov	 DWORD PTR _dsMixBins$32226[ebp], ecx

; 973  :         dsMixBins.lpMixBinVolumePairs = pEvent->EventData.SetMixBinVolumes.aVolumePairs;

  002c0	8b 55 f0	 mov	 edx, DWORD PTR _pEvent$[ebp]
  002c3	83 c2 10	 add	 edx, 16			; 00000010H
  002c6	89 55 e8	 mov	 DWORD PTR _dsMixBins$32226[ebp+4], edx

; 974  : 
; 975  :         if (pDSBuffer) {

  002c9	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  002cd	74 12		 je	 SHORT $L32227

; 976  :             hr = pDSBuffer->SetMixBinVolumes(&dsMixBins);

  002cf	8d 45 e4	 lea	 eax, DWORD PTR _dsMixBins$32226[ebp]
  002d2	50		 push	 eax
  002d3	8b 4d f4	 mov	 ecx, DWORD PTR _pDSBuffer$[ebp]
  002d6	51		 push	 ecx
  002d7	e8 00 00 00 00	 call	 ?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundBuffer::SetMixBinVolumes
  002dc	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 977  :         } else {

  002df	eb 10		 jmp	 SHORT $L32228
$L32227:

; 978  :             hr = pDSStream->SetMixBinVolumes(&dsMixBins);

  002e1	8d 55 e4	 lea	 edx, DWORD PTR _dsMixBins$32226[ebp]
  002e4	52		 push	 edx
  002e5	8b 45 fc	 mov	 eax, DWORD PTR _pDSStream$[ebp]
  002e8	50		 push	 eax
  002e9	e8 00 00 00 00	 call	 ?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ; IDirectSoundStream::SetMixBinVolumes
  002ee	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32228:

; 979  :         }
; 980  : 
; 981  :         break;

  002f1	eb 47		 jmp	 SHORT $L32188
$L32229:

; 982  : 
; 983  :     case eXACTEvent_LoopStart:
; 984  :         break;

  002f3	eb 45		 jmp	 SHORT $L32188
$L32230:

; 985  :         
; 986  :     case eXACTEvent_LoopEnd:
; 987  :         break;

  002f5	eb 43		 jmp	 SHORT $L32188
$L32231:

; 988  :                     
; 989  :     default:
; 990  :         DPF_WARNING("(0x%x) Event (%s) not recognised",
; 991  :             this,
; 992  :             pEvent,
; 993  :             g_aszXACTEventNames[pEvent->Header.wType]);

  002f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  002fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@EGEHHKKL@CEngine?3?3DispatchEvent?$AA@
  00301	68 de 03 00 00	 push	 990			; 000003deH
  00306	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0030b	6a 03		 push	 3
  0030d	6a 09		 push	 9
  0030f	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00314	83 c4 18	 add	 esp, 24			; 00000018H
  00317	8b 4d f0	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  0031a	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0031d	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _g_aszXACTEventNames[edx*4]
  00324	50		 push	 eax
  00325	8b 4d f0	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00328	51		 push	 ecx
  00329	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0032c	52		 push	 edx
  0032d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@ONBADOM@?$CI0x?$CFx?$CJ?5Event?5?$CI?$CFs?$CJ?5not?5recognised@
  00332	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00337	83 c4 10	 add	 esp, 16			; 00000010H
$L32188:

; 994  :         break;
; 995  :     }
; 996  : 
; 997  :     //
; 998  :     // the event has been dispatched. we can now remove it from the track event list
; 999  :     // and release it
; 1000 :     //
; 1001 : 
; 1002 :     FreeEvent(pEventContext);

  0033a	8b 45 0c	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  0033d	50		 push	 eax
  0033e	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00341	e8 00 00 00 00	 call	 ?FreeEvent@CEngine@XACT@@AAEXPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::FreeEvent

; 1003 : 
; 1004 :     DPF_LEAVE_HRESULT(hr);
; 1005 :     return hr;

  00346	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]

; 1006 : }

  00349	8b e5		 mov	 esp, ebp
  0034b	5d		 pop	 ebp
  0034c	c2 08 00	 ret	 8
$L32674:
  0034f	00 00 00 00	 DD	 $L32193
  00353	00 00 00 00	 DD	 $L32192
  00357	00 00 00 00	 DD	 $L32195
  0035b	00 00 00 00	 DD	 $L32191
  0035f	00 00 00 00	 DD	 $L32196
  00363	00 00 00 00	 DD	 $L32201
  00367	00 00 00 00	 DD	 $L32206
  0036b	00 00 00 00	 DD	 $L32211
  0036f	00 00 00 00	 DD	 $L32214
  00373	00 00 00 00	 DD	 $L32217
  00377	00 00 00 00	 DD	 $L32224
  0037b	00 00 00 00	 DD	 $L32229
  0037f	00 00 00 00	 DD	 $L32230
  00383	00 00 00 00	 DD	 $L32225
  00387	00 00 00 00	 DD	 $L32220
?DispatchEvent@CEngine@XACT@@EAGJPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CEngine::DispatchEvent
XACTENG	ENDS
EXTRN	_IDirectSound_SetEffectData@24:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetEffectData@IDirectSound@@QAGJKKPBXKK@Z
XACTENG	SEGMENT
_this$ = 8
_dwEffectIndex$ = 12
_dwOffset$ = 16
_pvData$ = 20
_dwDataSize$ = 24
_dwApply$ = 28
?SetEffectData@IDirectSound@@QAGJKKPBXKK@Z PROC NEAR	; IDirectSound::SetEffectData, COMDAT

; 1756 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1757 :         return IDirectSound_SetEffectData(this, dwEffectIndex, dwOffset, pvData, dwDataSize, dwApply);

  00003	8b 45 1c	 mov	 eax, DWORD PTR _dwApply$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 18	 mov	 ecx, DWORD PTR _dwDataSize$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 14	 mov	 edx, DWORD PTR _pvData$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 10	 mov	 eax, DWORD PTR _dwOffset$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _dwEffectIndex$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 _IDirectSound_SetEffectData@24

; 1758 :     }

  00020	5d		 pop	 ebp
  00021	c2 18 00	 ret	 24			; 00000018H
?SetEffectData@IDirectSound@@QAGJKKPBXKK@Z ENDP		; IDirectSound::SetEffectData
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetFrequency@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetFrequency@IDirectSoundBuffer@@QAGJK@Z
XACTENG	SEGMENT
_this$ = 8
_dwFrequency$ = 12
?SetFrequency@IDirectSoundBuffer@@QAGJK@Z PROC NEAR	; IDirectSoundBuffer::SetFrequency, COMDAT

; 1942 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1943 :         return IDirectSoundBuffer_SetFrequency(this, dwFrequency);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetFrequency@8

; 1944 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetFrequency@IDirectSoundBuffer@@QAGJK@Z ENDP		; IDirectSoundBuffer::SetFrequency
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetVolume@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetVolume@IDirectSoundBuffer@@QAGJJ@Z
XACTENG	SEGMENT
_this$ = 8
_lVolume$ = 12
?SetVolume@IDirectSoundBuffer@@QAGJJ@Z PROC NEAR	; IDirectSoundBuffer::SetVolume, COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1948 :         return IDirectSoundBuffer_SetVolume(this, lVolume);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lVolume$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetVolume@8

; 1949 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetVolume@IDirectSoundBuffer@@QAGJJ@Z ENDP		; IDirectSoundBuffer::SetVolume
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetLFO@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetLFO@IDirectSoundBuffer@@QAGJPBU_DSLFODESC@@@Z
XACTENG	SEGMENT
_this$ = 8
_pLFODesc$ = 12
?SetLFO@IDirectSoundBuffer@@QAGJPBU_DSLFODESC@@@Z PROC NEAR ; IDirectSoundBuffer::SetLFO, COMDAT

; 1957 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1958 :         return IDirectSoundBuffer_SetLFO(this, pLFODesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pLFODesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetLFO@8

; 1959 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetLFO@IDirectSoundBuffer@@QAGJPBU_DSLFODESC@@@Z ENDP	; IDirectSoundBuffer::SetLFO
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetEG@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z
XACTENG	SEGMENT
_this$ = 8
_pEnvelopeDesc$ = 12
?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; IDirectSoundBuffer::SetEG, COMDAT

; 1962 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1963 :         return IDirectSoundBuffer_SetEG(this, pEnvelopeDesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pEnvelopeDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetEG@8

; 1964 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetEG@IDirectSoundBuffer@@QAGJPBU_DSENVELOPEDESC@@@Z ENDP ; IDirectSoundBuffer::SetEG
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetFilter@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetFilter@IDirectSoundBuffer@@QAGJPBU_DSFILTERDESC@@@Z
XACTENG	SEGMENT
_this$ = 8
_pFilterDesc$ = 12
?SetFilter@IDirectSoundBuffer@@QAGJPBU_DSFILTERDESC@@@Z PROC NEAR ; IDirectSoundBuffer::SetFilter, COMDAT

; 1967 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1968 :         return IDirectSoundBuffer_SetFilter(this, pFilterDesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pFilterDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetFilter@8

; 1969 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetFilter@IDirectSoundBuffer@@QAGJPBU_DSFILTERDESC@@@Z ENDP ; IDirectSoundBuffer::SetFilter
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetHeadroom@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetHeadroom@IDirectSoundBuffer@@QAGJK@Z
XACTENG	SEGMENT
_this$ = 8
_dwHeadroom$ = 12
?SetHeadroom@IDirectSoundBuffer@@QAGJK@Z PROC NEAR	; IDirectSoundBuffer::SetHeadroom, COMDAT

; 1972 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1973 :         return IDirectSoundBuffer_SetHeadroom(this, dwHeadroom);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwHeadroom$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetHeadroom@8

; 1974 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetHeadroom@IDirectSoundBuffer@@QAGJK@Z ENDP		; IDirectSoundBuffer::SetHeadroom
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetMixBinVolumes@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; IDirectSoundBuffer::SetMixBinVolumes, COMDAT

; 1987 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1988 :         return IDirectSoundBuffer_SetMixBinVolumes(this, pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetMixBinVolumes@8

; 1989 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetMixBinVolumes@IDirectSoundBuffer@@QAGJPBU_DSMIXBINS@@@Z ENDP ; IDirectSoundBuffer::SetMixBinVolumes
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetFrequency@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetFrequency@IDirectSoundStream@@QAGJK@Z
XACTENG	SEGMENT
_this$ = 8
_dwFrequency$ = 12
?SetFrequency@IDirectSoundStream@@QAGJK@Z PROC NEAR	; IDirectSoundStream::SetFrequency, COMDAT

; 2247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2248 :         return IDirectSoundStream_SetFrequency(this, dwFrequency);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwFrequency$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetFrequency@8

; 2249 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetFrequency@IDirectSoundStream@@QAGJK@Z ENDP		; IDirectSoundStream::SetFrequency
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetVolume@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetVolume@IDirectSoundStream@@QAGJJ@Z
XACTENG	SEGMENT
_this$ = 8
_lVolume$ = 12
?SetVolume@IDirectSoundStream@@QAGJJ@Z PROC NEAR	; IDirectSoundStream::SetVolume, COMDAT

; 2252 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2253 :         return IDirectSoundStream_SetVolume(this, lVolume);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lVolume$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetVolume@8

; 2254 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetVolume@IDirectSoundStream@@QAGJJ@Z ENDP		; IDirectSoundStream::SetVolume
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetLFO@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetLFO@IDirectSoundStream@@QAGJPBU_DSLFODESC@@@Z
XACTENG	SEGMENT
_this$ = 8
_pLFODesc$ = 12
?SetLFO@IDirectSoundStream@@QAGJPBU_DSLFODESC@@@Z PROC NEAR ; IDirectSoundStream::SetLFO, COMDAT

; 2262 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2263 :         return IDirectSoundStream_SetLFO(this, pLFODesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pLFODesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetLFO@8

; 2264 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetLFO@IDirectSoundStream@@QAGJPBU_DSLFODESC@@@Z ENDP	; IDirectSoundStream::SetLFO
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetEG@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z
XACTENG	SEGMENT
_this$ = 8
_pEnvelopeDesc$ = 12
?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z PROC NEAR ; IDirectSoundStream::SetEG, COMDAT

; 2267 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2268 :         return IDirectSoundStream_SetEG(this, pEnvelopeDesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pEnvelopeDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetEG@8

; 2269 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetEG@IDirectSoundStream@@QAGJPBU_DSENVELOPEDESC@@@Z ENDP ; IDirectSoundStream::SetEG
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetFilter@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetFilter@IDirectSoundStream@@QAGJPBU_DSFILTERDESC@@@Z
XACTENG	SEGMENT
_this$ = 8
_pFilterDesc$ = 12
?SetFilter@IDirectSoundStream@@QAGJPBU_DSFILTERDESC@@@Z PROC NEAR ; IDirectSoundStream::SetFilter, COMDAT

; 2272 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2273 :         return IDirectSoundStream_SetFilter(this, pFilterDesc);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pFilterDesc$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetFilter@8

; 2274 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetFilter@IDirectSoundStream@@QAGJPBU_DSFILTERDESC@@@Z ENDP ; IDirectSoundStream::SetFilter
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetHeadroom@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetHeadroom@IDirectSoundStream@@QAGJK@Z
XACTENG	SEGMENT
_this$ = 8
_dwHeadroom$ = 12
?SetHeadroom@IDirectSoundStream@@QAGJK@Z PROC NEAR	; IDirectSoundStream::SetHeadroom, COMDAT

; 2277 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2278 :         return IDirectSoundStream_SetHeadroom(this, dwHeadroom);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _dwHeadroom$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetHeadroom@8

; 2279 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetHeadroom@IDirectSoundStream@@QAGJK@Z ENDP		; IDirectSoundStream::SetHeadroom
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetMixBinVolumes@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z
XACTENG	SEGMENT
_this$ = 8
_pMixBins$ = 12
?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z PROC NEAR ; IDirectSoundStream::SetMixBinVolumes, COMDAT

; 2292 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2293 :         return IDirectSoundStream_SetMixBinVolumes(this, pMixBins);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pMixBins$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetMixBinVolumes@8

; 2294 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetMixBinVolumes@IDirectSoundStream@@QAGJPBU_DSMIXBINS@@@Z ENDP ; IDirectSoundStream::SetMixBinVolumes
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ PROC NEAR ; XACT::CSoundSource::GetDSoundBuffer, COMDAT
; _this$ = ecx

; 594  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 595  : 
; 596  :         return m_HwVoice.pBuffer;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 597  : 
; 598  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ENDP ; XACT::CSoundSource::GetDSoundBuffer
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ PROC NEAR ; XACT::CSoundSource::GetDSoundStream, COMDAT
; _this$ = ecx

; 601  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 602  : 
; 603  :         return m_HwVoice.pStream;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 604  : 
; 605  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ ENDP ; XACT::CSoundSource::GetDSoundStream
XACTENG	ENDS
PUBLIC	?SetPitch@IDirectSoundStream@@QAGJJ@Z		; IDirectSoundStream::SetPitch
PUBLIC	??_C@_0CG@JGPIGHNO@pEventContext?9?$DOm_pTrack?9?$DOpSoundS@ ; `string'
PUBLIC	?SetPitch@IDirectSoundBuffer@@QAGJJ@Z		; IDirectSoundBuffer::SetPitch
PUBLIC	__real@4f000000
EXTRN	_RtlRandom@4:NEAR
EXTRN	__imp__KeSaveFloatingPointState@4:NEAR
EXTRN	__imp__KeRestoreFloatingPointState@4:NEAR
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT ??_C@_0CG@JGPIGHNO@pEventContext?9?$DOm_pTrack?9?$DOpSoundS@
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
XACTENG_RD	SEGMENT
??_C@_0CG@JGPIGHNO@pEventContext?9?$DOm_pTrack?9?$DOpSoundS@ DB 'pEventCo'
	DB	'ntext->m_pTrack->pSoundSource', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT __real@4f000000
CONST	SEGMENT
__real@4f000000 DD 04f000000r			; 2.14748e+009
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CreateEventVariation@CEngine@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
tv230 = -68
tv227 = -64
tv214 = -60
tv211 = -56
tv205 = -52
tv94 = -44
_this$ = -40
_seed$32256 = -36
_fRange$ = -32
_hr$ = -28
_fRandom$ = -24
_pEvent$ = -20
_pVarDesc$ = -16
_pDSBuffer$ = -12
_pDSStream$ = -8
_fTemp$ = -4
_pEventContext$ = 8
?CreateEventVariation@CEngine@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CEngine::CreateEventVariation, COMDAT
; _this$ = ecx

; 1009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1010 : 
; 1011 :     
; 1012 :     HRESULT hr = S_OK;

  00009	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1013 : 
; 1014 :     ASSERT_IN_DPC;

  00010	68 f6 03 00 00	 push	 1014			; 000003f6H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@FGGNHBE@KeGetCurrentIrql?$CI?$CJ?5?$DO?$DN?5DISPATCH_L@
  0001f	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00024	0f b6 c0	 movzx	 eax, al
  00027	33 c9		 xor	 ecx, ecx
  00029	83 f8 02	 cmp	 eax, 2
  0002c	0f 9c c1	 setl	 cl
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00035	83 c4 10	 add	 esp, 16			; 00000010H

; 1015 :     KeSaveFloatingPointState(&m_fps);

  00038	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  00041	52		 push	 edx
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSaveFloatingPointState@4

; 1016 : 
; 1017 :     //
; 1018 :     // we will touch fp state, so save it here
; 1019 :     //
; 1020 : 
; 1021 : 
; 1022 :     FLOAT fTemp = 0.0f, fRange = 0.0f, fRandom = 1.0f;

  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fTemp$[ebp], 0
  0004f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _fRange$[ebp], 0
  00056	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR _fRandom$[ebp], 1065353216 ; 3f800000H

; 1023 :     
; 1024 :     LPDIRECTSOUNDBUFFER pDSBuffer;
; 1025 :     LPDIRECTSOUNDSTREAM pDSStream;
; 1026 :     
; 1027 :     PXACT_TRACK_EVENT pEvent = (PXACT_TRACK_EVENT) pEventContext->m_pEventHeader;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  00060	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00063	89 4d ec	 mov	 DWORD PTR _pEvent$[ebp], ecx

; 1028 :     PXACT_EVENT_PITCH_VOLUME_VAR_DESC pVarDesc = NULL;

  00066	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pVarDesc$[ebp], 0

; 1029 : 
; 1030 :     ASSERT (pEventContext->m_pTrack->pSoundSource);

  0006d	68 06 04 00 00	 push	 1030			; 00000406H
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00077	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@JGPIGHNO@pEventContext?9?$DOm_pTrack?9?$DOpSoundS@
  0007c	8b 55 08	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0007f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00082	33 c9		 xor	 ecx, ecx
  00084	83 38 00	 cmp	 DWORD PTR [eax], 0
  00087	0f 94 c1	 sete	 cl
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H

; 1031 :     pDSBuffer = pEventContext->m_pTrack->pSoundSource->GetDSoundBuffer();

  00093	8b 55 08	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  00096	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	e8 00 00 00 00	 call	 ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
  000a0	89 45 f4	 mov	 DWORD PTR _pDSBuffer$[ebp], eax

; 1032 :     pDSStream = pEventContext->m_pTrack->pSoundSource->GetDSoundStream();

  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  000a6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000a9	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000ab	e8 00 00 00 00	 call	 ?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ ; XACT::CSoundSource::GetDSoundStream
  000b0	89 45 f8	 mov	 DWORD PTR _pDSStream$[ebp], eax

; 1033 :     
; 1034 :     switch (pEvent->Header.wType) {

  000b3	8b 45 ec	 mov	 eax, DWORD PTR _pEvent$[ebp]
  000b6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000b9	89 4d d4	 mov	 DWORD PTR tv94[ebp], ecx
  000bc	83 7d d4 01	 cmp	 DWORD PTR tv94[ebp], 1
  000c0	74 14		 je	 SHORT $L32254
  000c2	83 7d d4 03	 cmp	 DWORD PTR tv94[ebp], 3
  000c6	74 05		 je	 SHORT $L32253
  000c8	e9 08 01 00 00	 jmp	 $L32250
$L32253:

; 1035 :     case eXACTEvent_PitchAndVolumeVariation:
; 1036 :         pVarDesc = &pEvent->EventData.PitchAndVolumeVariation.VarDesc;

  000cd	8b 55 ec	 mov	 edx, DWORD PTR _pEvent$[ebp]
  000d0	83 c2 0c	 add	 edx, 12			; 0000000cH
  000d3	89 55 f0	 mov	 DWORD PTR _pVarDesc$[ebp], edx
$L32254:

; 1037 : 
; 1038 :     case eXACTEvent_PlayWithPitchAndVolumeVariation:
; 1039 : 
; 1040 :         if (pVarDesc == NULL)

  000d6	83 7d f0 00	 cmp	 DWORD PTR _pVarDesc$[ebp], 0
  000da	75 09		 jne	 SHORT $L32255

; 1041 :             pVarDesc = &pEvent->EventData.PlayWithPitchAndVolumeVariation.VarDesc;

  000dc	8b 45 ec	 mov	 eax, DWORD PTR _pEvent$[ebp]
  000df	83 c0 10	 add	 eax, 16			; 00000010H
  000e2	89 45 f0	 mov	 DWORD PTR _pVarDesc$[ebp], eax
$L32255:

; 1042 : 
; 1043 :         ULONG seed = (ULONG)pEventContext->m_rtTimeStamp;

  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  000e8	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000eb	89 55 dc	 mov	 DWORD PTR _seed$32256[ebp], edx

; 1044 :         fRandom = (FLOAT)(RtlRandom(&seed) & 0x7FFFFFFF);

  000ee	8d 45 dc	 lea	 eax, DWORD PTR _seed$32256[ebp]
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _RtlRandom@4
  000f7	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  000fc	89 45 cc	 mov	 DWORD PTR tv205[ebp], eax
  000ff	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv205[ebp+4], 0
  00106	df 6d cc	 fild	 QWORD PTR tv205[ebp]
  00109	d9 55 e8	 fst	 DWORD PTR _fRandom$[ebp]

; 1045 :         fRandom = fRandom/(FLOAT)0x7FFFFFFF;

  0010c	d8 35 00 00 00
	00		 fdiv	 DWORD PTR __real@4f000000
  00112	d9 5d e8	 fstp	 DWORD PTR _fRandom$[ebp]

; 1046 : 
; 1047 :         fRange = (FLOAT)(pVarDesc->Pitch.sPitchHi - 
; 1048 :             pVarDesc->Pitch.sPitchLo);

  00115	8b 4d f0	 mov	 ecx, DWORD PTR _pVarDesc$[ebp]
  00118	0f bf 51 02	 movsx	 edx, WORD PTR [ecx+2]
  0011c	8b 45 f0	 mov	 eax, DWORD PTR _pVarDesc$[ebp]
  0011f	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00122	2b d1		 sub	 edx, ecx
  00124	89 55 c8	 mov	 DWORD PTR tv211[ebp], edx
  00127	db 45 c8	 fild	 DWORD PTR tv211[ebp]
  0012a	d9 5d e0	 fstp	 DWORD PTR _fRange$[ebp]

; 1049 :         
; 1050 :         //
; 1051 :         // create a random pitch value
; 1052 :         // 
; 1053 :         
; 1054 :         fTemp = fRandom*fRange + pVarDesc->Pitch.sPitchLo;

  0012d	d9 45 e8	 fld	 DWORD PTR _fRandom$[ebp]
  00130	d8 4d e0	 fmul	 DWORD PTR _fRange$[ebp]
  00133	8b 55 f0	 mov	 edx, DWORD PTR _pVarDesc$[ebp]
  00136	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00139	89 45 c4	 mov	 DWORD PTR tv214[ebp], eax
  0013c	da 45 c4	 fiadd	 DWORD PTR tv214[ebp]
  0013f	d9 5d fc	 fstp	 DWORD PTR _fTemp$[ebp]

; 1055 :         if (pDSBuffer) {

  00142	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  00146	74 17		 je	 SHORT $L32261

; 1056 :             hr = pDSBuffer->SetPitch((LONG)fTemp);

  00148	d9 45 fc	 fld	 DWORD PTR _fTemp$[ebp]
  0014b	e8 00 00 00 00	 call	 __ftol2
  00150	50		 push	 eax
  00151	8b 4d f4	 mov	 ecx, DWORD PTR _pDSBuffer$[ebp]
  00154	51		 push	 ecx
  00155	e8 00 00 00 00	 call	 ?SetPitch@IDirectSoundBuffer@@QAGJJ@Z ; IDirectSoundBuffer::SetPitch
  0015a	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 1057 :         } else {

  0015d	eb 15		 jmp	 SHORT $L32263
$L32261:

; 1058 :             hr = pDSStream->SetPitch((LONG)fTemp);

  0015f	d9 45 fc	 fld	 DWORD PTR _fTemp$[ebp]
  00162	e8 00 00 00 00	 call	 __ftol2
  00167	50		 push	 eax
  00168	8b 55 f8	 mov	 edx, DWORD PTR _pDSStream$[ebp]
  0016b	52		 push	 edx
  0016c	e8 00 00 00 00	 call	 ?SetPitch@IDirectSoundStream@@QAGJJ@Z ; IDirectSoundStream::SetPitch
  00171	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L32263:

; 1059 :         }
; 1060 : 
; 1061 :         //
; 1062 :         // create a random volume value
; 1063 :         // 
; 1064 :         
; 1065 :         fRange = (FLOAT)(pVarDesc->Volume.sVolHi - 
; 1066 :             pVarDesc->Volume.sVolLo);

  00174	8b 45 f0	 mov	 eax, DWORD PTR _pVarDesc$[ebp]
  00177	0f bf 48 06	 movsx	 ecx, WORD PTR [eax+6]
  0017b	8b 55 f0	 mov	 edx, DWORD PTR _pVarDesc$[ebp]
  0017e	0f bf 42 04	 movsx	 eax, WORD PTR [edx+4]
  00182	2b c8		 sub	 ecx, eax
  00184	89 4d c0	 mov	 DWORD PTR tv227[ebp], ecx
  00187	db 45 c0	 fild	 DWORD PTR tv227[ebp]
  0018a	d9 5d e0	 fstp	 DWORD PTR _fRange$[ebp]

; 1067 :         
; 1068 : 
; 1069 :         fTemp = fRandom*fRange + pVarDesc->Volume.sVolLo;

  0018d	d9 45 e8	 fld	 DWORD PTR _fRandom$[ebp]
  00190	d8 4d e0	 fmul	 DWORD PTR _fRange$[ebp]
  00193	8b 4d f0	 mov	 ecx, DWORD PTR _pVarDesc$[ebp]
  00196	0f bf 51 04	 movsx	 edx, WORD PTR [ecx+4]
  0019a	89 55 bc	 mov	 DWORD PTR tv230[ebp], edx
  0019d	da 45 bc	 fiadd	 DWORD PTR tv230[ebp]
  001a0	d9 5d fc	 fstp	 DWORD PTR _fTemp$[ebp]

; 1070 :         if (pDSBuffer) {

  001a3	83 7d f4 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  001a7	74 17		 je	 SHORT $L32266

; 1071 :             hr = pDSBuffer->SetVolume((LONG)fTemp);

  001a9	d9 45 fc	 fld	 DWORD PTR _fTemp$[ebp]
  001ac	e8 00 00 00 00	 call	 __ftol2
  001b1	50		 push	 eax
  001b2	8b 45 f4	 mov	 eax, DWORD PTR _pDSBuffer$[ebp]
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 ?SetVolume@IDirectSoundBuffer@@QAGJJ@Z ; IDirectSoundBuffer::SetVolume
  001bb	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax

; 1072 :         } else {

  001be	eb 15		 jmp	 SHORT $L32250
$L32266:

; 1073 :             hr = pDSStream->SetVolume((LONG)fTemp);

  001c0	d9 45 fc	 fld	 DWORD PTR _fTemp$[ebp]
  001c3	e8 00 00 00 00	 call	 __ftol2
  001c8	50		 push	 eax
  001c9	8b 4d f8	 mov	 ecx, DWORD PTR _pDSStream$[ebp]
  001cc	51		 push	 ecx
  001cd	e8 00 00 00 00	 call	 ?SetVolume@IDirectSoundStream@@QAGJJ@Z ; IDirectSoundStream::SetVolume
  001d2	89 45 e4	 mov	 DWORD PTR _hr$[ebp], eax
$L32250:

; 1074 :         }
; 1075 : 
; 1076 :         break; 
; 1077 :         
; 1078 :     } // switch
; 1079 : 
; 1080 : 
; 1081 :     KeRestoreFloatingPointState(&m_fps);

  001d5	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  001d8	81 c2 b4 00 00
	00		 add	 edx, 180		; 000000b4H
  001de	52		 push	 edx
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeRestoreFloatingPointState@4

; 1082 :     return hr;

  001e5	8b 45 e4	 mov	 eax, DWORD PTR _hr$[ebp]

; 1083 :    
; 1084 : }

  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 04 00	 ret	 4
?CreateEventVariation@CEngine@XACT@@QAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CEngine::CreateEventVariation
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetPitch@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetPitch@IDirectSoundBuffer@@QAGJJ@Z
XACTENG	SEGMENT
_this$ = 8
_lPitch$ = 12
?SetPitch@IDirectSoundBuffer@@QAGJJ@Z PROC NEAR		; IDirectSoundBuffer::SetPitch, COMDAT

; 1952 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1953 :         return IDirectSoundBuffer_SetPitch(this, lPitch);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lPitch$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetPitch@8

; 1954 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetPitch@IDirectSoundBuffer@@QAGJJ@Z ENDP		; IDirectSoundBuffer::SetPitch
XACTENG	ENDS
EXTRN	_IDirectSoundStream_SetPitch@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetPitch@IDirectSoundStream@@QAGJJ@Z
XACTENG	SEGMENT
_this$ = 8
_lPitch$ = 12
?SetPitch@IDirectSoundStream@@QAGJJ@Z PROC NEAR		; IDirectSoundStream::SetPitch, COMDAT

; 2257 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2258 :         return IDirectSoundStream_SetPitch(this, lPitch);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _lPitch$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundStream_SetPitch@8

; 2259 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetPitch@IDirectSoundStream@@QAGJJ@Z ENDP		; IDirectSoundStream::SetPitch
XACTENG	ENDS
EXTRN	__imp__KeSetTimer@16:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\sequencer.cpp
;	COMDAT ?SetTimer@CEngine@XACT@@AAEXXZ
XACTENG	SEGMENT
tv89 = -24
_this$ = -20
___AutoIrql$ = -16
_rtNextEventTime$ = -8
?SetTimer@CEngine@XACT@@AAEXXZ PROC NEAR		; XACT::CEngine::SetTimer, COMDAT
; _this$ = ecx

; 1090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1091 : 
; 1092 :     AutoIrql();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 1093 : 
; 1094 :     REFERENCE_TIME rtNextEventTime;
; 1095 :     if(m_pQueue->GetNextEventTime(&rtNextEventTime)){

  00011	8d 45 f8	 lea	 eax, DWORD PTR _rtNextEventTime$[ebp]
  00014	50		 push	 eax
  00015	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 89 f0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+240]
  0001e	e8 00 00 00 00	 call	 ?GetNextEventTime@CPriorityQueue@XACT@@QAEHPA_J@Z ; XACT::CPriorityQueue::GetNextEventTime
  00023	85 c0		 test	 eax, eax
  00025	74 6a		 je	 SHORT $L32275

; 1096 :         
; 1097 :         if(!m_bTimerSet || (rtNextEventTime < m_rtNextEventTime)){

  00027	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 68 00	 cmp	 DWORD PTR [edx+104], 0
  0002e	74 24		 je	 SHORT $L32277
  00030	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00033	89 45 e8	 mov	 DWORD PTR tv89[ebp], eax
  00036	8b 4d e8	 mov	 ecx, DWORD PTR tv89[ebp]
  00039	8b 55 fc	 mov	 edx, DWORD PTR _rtNextEventTime$[ebp+4]
  0003c	3b 91 e4 00 00
	00		 cmp	 edx, DWORD PTR [ecx+228]
  00042	7f 4d		 jg	 SHORT $L32275
  00044	7c 0e		 jl	 SHORT $L32277
  00046	8b 45 e8	 mov	 eax, DWORD PTR tv89[ebp]
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _rtNextEventTime$[ebp]
  0004c	3b 88 e0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+224]
  00052	73 3d		 jae	 SHORT $L32275
$L32277:

; 1098 :             
; 1099 :             m_rtNextEventTime = rtNextEventTime;

  00054	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 45 f8	 mov	 eax, DWORD PTR _rtNextEventTime$[ebp]
  0005a	89 82 e0 00 00
	00		 mov	 DWORD PTR [edx+224], eax
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _rtNextEventTime$[ebp+4]
  00063	89 8a e4 00 00
	00		 mov	 DWORD PTR [edx+228], ecx

; 1100 :             m_bTimerSet = TRUE;

  00069	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	c7 42 68 01 00
	00 00		 mov	 DWORD PTR [edx+104], 1

; 1101 :             
; 1102 :             KeSetTimer(&m_TimerObject, * (LARGE_INTEGER*) &rtNextEventTime, &m_DpcObject); 

  00073	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00076	05 98 00 00 00	 add	 eax, 152		; 00000098H
  0007b	50		 push	 eax
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _rtNextEventTime$[ebp+4]
  0007f	51		 push	 ecx
  00080	8b 55 f8	 mov	 edx, DWORD PTR _rtNextEventTime$[ebp]
  00083	52		 push	 edx
  00084	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00087	83 c0 70	 add	 eax, 112		; 00000070H
  0008a	50		 push	 eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetTimer@16
$L32275:

; 1103 :             
; 1104 :         }
; 1105 :         
; 1106 :     }
; 1107 : 
; 1108 :     return;

  00091	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00094	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql

; 1109 : }

  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?SetTimer@CEngine@XACT@@AAEXXZ ENDP			; XACT::CEngine::SetTimer
XACTENG	ENDS
PUBLIC	?DPCTimerCallBack@CEngine@XACT@@CGXPAU_KDPC@@PAX11@Z ; XACT::CEngine::DPCTimerCallBack
; Function compile flags: /Odt
;	COMDAT ?DPCTimerCallBack@CEngine@XACT@@CGXPAU_KDPC@@PAX11@Z
XACTENG	SEGMENT
_Dpc$ = 8
_DeferredContext$ = 12
_SystemArgument1$ = 16
_SystemArgument2$ = 20
?DPCTimerCallBack@CEngine@XACT@@CGXPAU_KDPC@@PAX11@Z PROC NEAR ; XACT::CEngine::DPCTimerCallBack, COMDAT

; 1117 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1118 :     ((CEngine*) DeferredContext)->Dispatch();

  00003	8b 45 0c	 mov	 eax, DWORD PTR _DeferredContext$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 0c	 mov	 edx, DWORD PTR _DeferredContext$[ebp]
  0000b	52		 push	 edx
  0000c	ff 51 08	 call	 DWORD PTR [ecx+8]

; 1119 : }

  0000f	5d		 pop	 ebp
  00010	c2 10 00	 ret	 16			; 00000010H
?DPCTimerCallBack@CEngine@XACT@@CGXPAU_KDPC@@PAX11@Z ENDP ; XACT::CEngine::DPCTimerCallBack
XACTENG	ENDS
PUBLIC	??_C@_0BM@JGEKOPOP@CEngine?3?3PrintTimeStampInfo?$AA@ ; `string'
PUBLIC	??_C@_0EH@MNMNLHNJ@Function?5?$CI?$CFs?$CJ?0?5EventType?5?$CI?$CFs?$CJ?0?5E@ ; `string'
PUBLIC	??_C@_0DH@DFGJFBGM@Function?5?$CI?$CFs?$CJ?0?5EventTime?5?$CI?$CFu?5?$CFu?$CJ@ ; `string'
;	COMDAT ??_C@_0BM@JGEKOPOP@CEngine?3?3PrintTimeStampInfo?$AA@
XACTENG_RD	SEGMENT
??_C@_0BM@JGEKOPOP@CEngine?3?3PrintTimeStampInfo?$AA@ DB 'CEngine::PrintT'
	DB	'imeStampInfo', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EH@MNMNLHNJ@Function?5?$CI?$CFs?$CJ?0?5EventType?5?$CI?$CFs?$CJ?0?5E@
XACTENG_RD	SEGMENT
??_C@_0EH@MNMNLHNJ@Function?5?$CI?$CFs?$CJ?0?5EventType?5?$CI?$CFs?$CJ?0?5E@ DB 'F'
	DB	'unction (%s), EventType (%s), EventTime (%u %u), currentTime '
	DB	'(%u %u)', 0aH, 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DH@DFGJFBGM@Function?5?$CI?$CFs?$CJ?0?5EventTime?5?$CI?$CFu?5?$CFu?$CJ@
XACTENG_RD	SEGMENT
??_C@_0DH@DFGJFBGM@Function?5?$CI?$CFs?$CJ?0?5EventTime?5?$CI?$CFu?5?$CFu?$CJ@ DB 'F'
	DB	'unction (%s), EventTime (%u %u), currentTime (%u %u)', 0aH, 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z
XACTENG	SEGMENT
_this$ = -20
_time$ = -16
_time1$ = -8
_lpcszName$ = 8
_pEvent$ = 12
_rt$ = 16
_rt1$ = 24
?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z PROC NEAR ; XACT::CEngine::PrintTimeStamps, COMDAT
; _this$ = ecx

; 1128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1129 : 
; 1130 : 
; 1131 :     LARGE_INTEGER time,time1;
; 1132 :     time.QuadPart = rt;

  00009	8b 45 10	 mov	 eax, DWORD PTR _rt$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR _time$[ebp], eax
  0000f	8b 4d 14	 mov	 ecx, DWORD PTR _rt$[ebp+4]
  00012	89 4d f4	 mov	 DWORD PTR _time$[ebp+4], ecx

; 1133 :     time1.QuadPart = rt1;

  00015	8b 55 18	 mov	 edx, DWORD PTR _rt1$[ebp]
  00018	89 55 f8	 mov	 DWORD PTR _time1$[ebp], edx
  0001b	8b 45 1c	 mov	 eax, DWORD PTR _rt1$[ebp+4]
  0001e	89 45 fc	 mov	 DWORD PTR _time1$[ebp+4], eax

; 1134 : 
; 1135 :     if (rt1 == 0) {

  00021	8b 4d 18	 mov	 ecx, DWORD PTR _rt1$[ebp]
  00024	0b 4d 1c	 or	 ecx, DWORD PTR _rt1$[ebp+4]
  00027	85 c9		 test	 ecx, ecx
  00029	75 0a		 jne	 SHORT $L32295

; 1136 :         KeQuerySystemTime(&time1);

  0002b	8d 55 f8	 lea	 edx, DWORD PTR _time1$[ebp]
  0002e	52		 push	 edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4
$L32295:

; 1137 :     }
; 1138 : 
; 1139 :     //
; 1140 :     // convert to milliseconds
; 1141 :     //
; 1142 : 
; 1143 :     time.QuadPart = time.QuadPart/10000;

  00035	6a 00		 push	 0
  00037	68 10 27 00 00	 push	 10000			; 00002710H
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _time$[ebp+4]
  0003f	50		 push	 eax
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _time$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 __alldiv
  00049	89 45 f0	 mov	 DWORD PTR _time$[ebp], eax
  0004c	89 55 f4	 mov	 DWORD PTR _time$[ebp+4], edx

; 1144 :     time1.QuadPart = time1.QuadPart/10000;

  0004f	6a 00		 push	 0
  00051	68 10 27 00 00	 push	 10000			; 00002710H
  00056	8b 55 fc	 mov	 edx, DWORD PTR _time1$[ebp+4]
  00059	52		 push	 edx
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _time1$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 __alldiv
  00063	89 45 f8	 mov	 DWORD PTR _time1$[ebp], eax
  00066	89 55 fc	 mov	 DWORD PTR _time1$[ebp+4], edx

; 1145 :     
; 1146 :     if (pEvent) {

  00069	83 7d 0c 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  0006d	74 54		 je	 SHORT $L32296

; 1147 :         
; 1148 :         DPF_BLAB("Function (%s), EventType (%s), EventTime (%u %u), currentTime (%u %u)\n",             
; 1149 :             lpcszName,
; 1150 :             g_aszXACTEventNames[pEvent->m_pEventHeader->wType],
; 1151 :             time.HighPart,
; 1152 :             time.LowPart,
; 1153 :             time1.HighPart,
; 1154 :             time1.LowPart);

  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00074	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@JGEKOPOP@CEngine?3?3PrintTimeStampInfo?$AA@
  00079	68 7c 04 00 00	 push	 1148			; 0000047cH
  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  00083	6a 05		 push	 5
  00085	6a 09		 push	 9
  00087	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0008c	83 c4 18	 add	 esp, 24			; 00000018H
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _time1$[ebp]
  00092	51		 push	 ecx
  00093	8b 55 fc	 mov	 edx, DWORD PTR _time1$[ebp+4]
  00096	52		 push	 edx
  00097	8b 45 f0	 mov	 eax, DWORD PTR _time$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR _time$[ebp+4]
  0009e	51		 push	 ecx
  0009f	8b 55 0c	 mov	 edx, DWORD PTR _pEvent$[ebp]
  000a2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000a5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000a8	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _g_aszXACTEventNames[ecx*4]
  000af	52		 push	 edx
  000b0	8b 45 08	 mov	 eax, DWORD PTR _lpcszName$[ebp]
  000b3	50		 push	 eax
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@MNMNLHNJ@Function?5?$CI?$CFs?$CJ?0?5EventType?5?$CI?$CFs?$CJ?0?5E@
  000b9	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000be	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1155 : 
; 1156 :     } else {

  000c1	eb 41		 jmp	 SHORT $L32292
$L32296:

; 1157 :         
; 1158 :         DPF_BLAB("Function (%s), EventTime (%u %u), currentTime (%u %u)\n", 
; 1159 :             lpcszName,
; 1160 :             time.HighPart,
; 1161 :             time.LowPart,
; 1162 :             time1.HighPart,
; 1163 :             time1.LowPart);

  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@JGEKOPOP@CEngine?3?3PrintTimeStampInfo?$AA@
  000cd	68 86 04 00 00	 push	 1158			; 00000486H
  000d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@MHEPIOOH@c?3?2xbox?2private?2windows?2directx?2@
  000d7	6a 05		 push	 5
  000d9	6a 09		 push	 9
  000db	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000e0	83 c4 18	 add	 esp, 24			; 00000018H
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _time1$[ebp]
  000e6	51		 push	 ecx
  000e7	8b 55 fc	 mov	 edx, DWORD PTR _time1$[ebp+4]
  000ea	52		 push	 edx
  000eb	8b 45 f0	 mov	 eax, DWORD PTR _time$[ebp]
  000ee	50		 push	 eax
  000ef	8b 4d f4	 mov	 ecx, DWORD PTR _time$[ebp+4]
  000f2	51		 push	 ecx
  000f3	8b 55 08	 mov	 edx, DWORD PTR _lpcszName$[ebp]
  000f6	52		 push	 edx
  000f7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@DFGJFBGM@Function?5?$CI?$CFs?$CJ?0?5EventTime?5?$CI?$CFu?5?$CFu?$CJ@
  000fc	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00101	83 c4 18	 add	 esp, 24			; 00000018H
$L32292:

; 1164 :     }
; 1165 : }

  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 18 00	 ret	 24			; 00000018H
?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z ENDP ; XACT::CEngine::PrintTimeStamps
XACTENG	ENDS
END
