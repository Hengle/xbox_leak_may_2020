; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\common.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04PFAOODAA@?$CFs?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KAJBENLI@Error?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09CKCJCCOK@Warning?3?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07BAMMBJFH@?0?5line?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02NDKNKOCB@?3?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@KGAPGFLH@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DNIHDBFJ@cbBuffer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08FADLHADM@pvBuffer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@IIFDJHMP@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGLDHGLI@DumpMemoryUsage?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@MIBDOIDJ@Begin?5memory?5usage?5dump?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@DICBIGIJ@End?5memory?5usage?5dump?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _KeGetCurrentIrql@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_AddRef@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_Release@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_BeginScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_EndScene@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPalette_Unlock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@XACT@@YGPAU_LIST_ENTRY@@PAU2@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dstrcpy@XACT@@YGPADPADPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DwDbgPrintStaticV@XACT@@YAXKKPBDI000PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DwDbgPrintStatic@XACT@@YAXKKPBDI000ZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DwDbgPrint@XACT@@YAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DwDbgAssert@XACT@@YAXHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DwDbgBreak@XACT@@YAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XactMemAlloc@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _XactMemFree@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DumpMemoryUsage@@YGXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pszBanner@?1??DwDbgAssert@XACT@@YAXHPBD0I@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?pszBanner@?1??DumpMemoryUsage@@YGXH@Z@4QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
PUBLIC	_g_dwXactDebugLevel
PUBLIC	_g_dwXactDebugBreakLevel
PUBLIC	_g_XactDebugContext
PUBLIC	_g_fXactDebugBreak
_BSS	SEGMENT
_g_XactDebugContext DB 0300H DUP (?)
_g_fXactDebugBreak DD 01H DUP (?)
_BSS	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
CONST	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
CONST	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
CONST	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
CONST	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
CONST	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
CONST	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
CONST	ENDS
_DATA	SEGMENT
_g_dwXactDebugLevel DD 04H
_g_dwXactDebugBreakLevel DD 02H
_DATA	ENDS
PUBLIC	?dstrcpy@XACT@@YGPADPADPBD@Z			; XACT::dstrcpy
PUBLIC	??_C@_04PFAOODAA@?$CFs?3?5?$AA@			; `string'
PUBLIC	??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@	; `string'
PUBLIC	??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@		; `string'
PUBLIC	??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@		; `string'
PUBLIC	??_C@_07KAJBENLI@Error?3?5?$AA@			; `string'
PUBLIC	??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@	; `string'
PUBLIC	??_C@_09CKCJCCOK@Warning?3?5?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	?DwDbgPrintStaticV@XACT@@YAXKKPBDI000PAD@Z	; XACT::DwDbgPrintStaticV
PUBLIC	?DwDbgBreak@XACT@@YAXXZ				; XACT::DwDbgBreak
EXTRN	_GetCurrentThreadId@0:NEAR
EXTRN	_sprintf:NEAR
EXTRN	_vsprintf:NEAR
EXTRN	_OutputDebugStringA@4:NEAR
;	COMDAT ??_C@_04PFAOODAA@?$CFs?3?5?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\common\debug.cpp
CONST	SEGMENT
??_C@_04PFAOODAA@?$CFs?3?5?$AA@ DB '%s: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@ DB '%hs(%lu): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@
CONST	SEGMENT
??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@ DB '%hs: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@
CONST	SEGMENT
??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@ DB '%.8lx: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KAJBENLI@Error?3?5?$AA@
CONST	SEGMENT
??_C@_07KAJBENLI@Error?3?5?$AA@ DB 'Error: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@ DB 'Resource failure: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CKCJCCOK@Warning?3?5?$AA@
CONST	SEGMENT
??_C@_09CKCJCCOK@Warning?3?5?$AA@ DB 'Warning: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DwDbgPrintStaticV@XACT@@YAXKKPBDI000PAD@Z
_TEXT	SEGMENT
tv136 = -2064
_szText$ = -2056
_szDebug$ = -1032
_pszWorking$ = -4
_dwFlags$ = 8
_dwLevel$ = 12
_pszFile$ = 16
_nLine$ = 20
_pszFunction$ = 24
_pszLibrary$ = 28
_pszFormat$ = 32
_va$ = 36
?DwDbgPrintStaticV@XACT@@YAXKKPBDI000PAD@Z PROC NEAR	; XACT::DwDbgPrintStaticV, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 08 00
	00		 sub	 esp, 2064		; 00000810H

; 99   :     CHAR                    szDebug[0x400];
; 100  :     CHAR                    szText[0x400];
; 101  :     LPSTR                   pszWorking;
; 102  :     DWORD                   dwWritten;
; 103  : 
; 104  :     if(dwLevel <= g_dwXactDebugLevel)

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwLevel$[ebp]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwXactDebugLevel
  00012	0f 87 95 01 00
	00		 ja	 $L29742

; 105  :     {
; 106  : 
; 107  : #ifdef DEBUG
; 108  : 
; 109  :         pszWorking = szDebug;

  00018	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _szDebug$[ebp]
  0001e	89 4d fc	 mov	 DWORD PTR _pszWorking$[ebp], ecx

; 110  : 
; 111  :         //
; 112  :         // Add the library name
; 113  :         //
; 114  : 
; 115  :         if((dwFlags & DPF_FLAGS_LIBRARY) && pszLibrary && *pszLibrary)

  00021	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00024	83 e2 01	 and	 edx, 1
  00027	85 d2		 test	 edx, edx
  00029	74 2d		 je	 SHORT $L29748
  0002b	83 7d 1c 00	 cmp	 DWORD PTR _pszLibrary$[ebp], 0
  0002f	74 27		 je	 SHORT $L29748
  00031	8b 45 1c	 mov	 eax, DWORD PTR _pszLibrary$[ebp]
  00034	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00037	85 c9		 test	 ecx, ecx
  00039	74 1d		 je	 SHORT $L29748

; 116  :         {
; 117  :             pszWorking += sprintf(pszWorking, "%s: ", pszLibrary);

  0003b	8b 55 1c	 mov	 edx, DWORD PTR _pszLibrary$[ebp]
  0003e	52		 push	 edx
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PFAOODAA@?$CFs?3?5?$AA@
  00044	8b 45 fc	 mov	 eax, DWORD PTR _pszWorking$[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 _sprintf
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  00053	03 c8		 add	 ecx, eax
  00055	89 4d fc	 mov	 DWORD PTR _pszWorking$[ebp], ecx
$L29748:

; 118  :         }
; 119  : 
; 120  :         //
; 121  :         // Add the source file and line number
; 122  :         //
; 123  : 
; 124  :         if((dwFlags & DPF_FLAGS_FILELINE) && pszFile && *pszFile)

  00058	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0005b	83 e2 02	 and	 edx, 2
  0005e	85 d2		 test	 edx, edx
  00060	74 31		 je	 SHORT $L29750
  00062	83 7d 10 00	 cmp	 DWORD PTR _pszFile$[ebp], 0
  00066	74 2b		 je	 SHORT $L29750
  00068	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  0006b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0006e	85 c9		 test	 ecx, ecx
  00070	74 21		 je	 SHORT $L29750

; 125  :         {
; 126  :             pszWorking += sprintf(pszWorking, "%hs(%lu): ", pszFile, nLine);

  00072	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  00075	52		 push	 edx
  00076	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@PAPNLNAE@?$CFhs?$CI?$CFlu?$CJ?3?5?$AA@
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _sprintf
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _pszWorking$[ebp]
  0008e	03 d0		 add	 edx, eax
  00090	89 55 fc	 mov	 DWORD PTR _pszWorking$[ebp], edx
$L29750:

; 127  :         }
; 128  : 
; 129  :         //
; 130  :         // Add the function name
; 131  :         //
; 132  : 
; 133  :         if((dwFlags & DPF_FLAGS_FUNCTIONNAME) && pszFunction && *pszFunction)

  00093	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00096	83 e0 08	 and	 eax, 8
  00099	85 c0		 test	 eax, eax
  0009b	74 2d		 je	 SHORT $L29752
  0009d	83 7d 18 00	 cmp	 DWORD PTR _pszFunction$[ebp], 0
  000a1	74 27		 je	 SHORT $L29752
  000a3	8b 4d 18	 mov	 ecx, DWORD PTR _pszFunction$[ebp]
  000a6	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000a9	85 d2		 test	 edx, edx
  000ab	74 1d		 je	 SHORT $L29752

; 134  :         {
; 135  :             pszWorking += sprintf(pszWorking, "%hs: ", pszFunction);

  000ad	8b 45 18	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  000b0	50		 push	 eax
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05HFOMLNMD@?$CFhs?3?5?$AA@
  000b6	8b 4d fc	 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 _sprintf
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _pszWorking$[ebp]
  000c5	03 d0		 add	 edx, eax
  000c7	89 55 fc	 mov	 DWORD PTR _pszWorking$[ebp], edx
$L29752:

; 136  :         }
; 137  : 
; 138  :         //
; 139  :         // Add process and thread id
; 140  :         //
; 141  : 
; 142  :         if(dwFlags & DPF_FLAGS_PROCESSTHREADID)

  000ca	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000cd	83 e0 04	 and	 eax, 4
  000d0	85 c0		 test	 eax, eax
  000d2	74 1f		 je	 SHORT $L29754

; 143  :         {
; 144  :             pszWorking += sprintf(pszWorking, "%.8lx: ", GetCurrentThreadId());

  000d4	e8 00 00 00 00	 call	 _GetCurrentThreadId@0
  000d9	50		 push	 eax
  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BCNBNNHO@?$CF?48lx?3?5?$AA@
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 _sprintf
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _pszWorking$[ebp]
  000ee	03 d0		 add	 edx, eax
  000f0	89 55 fc	 mov	 DWORD PTR _pszWorking$[ebp], edx
$L29754:

; 145  :         }
; 146  : 
; 147  :         //
; 148  :         // Add the type of message it is (i.e. error or warning)
; 149  :         //
; 150  : 
; 151  :         switch(dwLevel)
; 152  :         {

  000f3	8b 45 0c	 mov	 eax, DWORD PTR _dwLevel$[ebp]
  000f6	89 85 f0 f7 ff
	ff		 mov	 DWORD PTR tv136[ebp], eax
  000fc	83 bd f0 f7 ff
	ff 01		 cmp	 DWORD PTR tv136[ebp], 1
  00103	74 14		 je	 SHORT $L29760
  00105	83 bd f0 f7 ff
	ff 02		 cmp	 DWORD PTR tv136[ebp], 2
  0010c	74 1e		 je	 SHORT $L29762
  0010e	83 bd f0 f7 ff
	ff 03		 cmp	 DWORD PTR tv136[ebp], 3
  00115	74 28		 je	 SHORT $L29764
  00117	eb 37		 jmp	 SHORT $L29757
$L29760:

; 153  :             case DPFLVL_ERROR:
; 154  :                 pszWorking = dstrcpy(pszWorking, "Error: ");

  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07KAJBENLI@Error?3?5?$AA@
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR _pszWorking$[ebp]
  00121	51		 push	 ecx
  00122	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  00127	89 45 fc	 mov	 DWORD PTR _pszWorking$[ebp], eax

; 155  :                 break;

  0012a	eb 24		 jmp	 SHORT $L29757
$L29762:

; 156  : 
; 157  :             case DPFLVL_RESOURCE:
; 158  :                 pszWorking = dstrcpy(pszWorking, "Resource failure: ");

  0012c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@ELBNBAPH@Resource?5failure?3?5?$AA@
  00131	8b 55 fc	 mov	 edx, DWORD PTR _pszWorking$[ebp]
  00134	52		 push	 edx
  00135	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  0013a	89 45 fc	 mov	 DWORD PTR _pszWorking$[ebp], eax

; 159  :                 break;

  0013d	eb 11		 jmp	 SHORT $L29757
$L29764:

; 160  : 
; 161  :             case DPFLVL_WARNING:
; 162  :                 pszWorking = dstrcpy(pszWorking, "Warning: ");

  0013f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09CKCJCCOK@Warning?3?5?$AA@
  00144	8b 45 fc	 mov	 eax, DWORD PTR _pszWorking$[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  0014d	89 45 fc	 mov	 DWORD PTR _pszWorking$[ebp], eax
$L29757:

; 163  :                 break;
; 164  :         }
; 165  : 
; 166  : #endif // DEBUG
; 167  : 
; 168  :         //
; 169  :         // Add the debug string
; 170  :         //
; 171  : 
; 172  :         vsprintf(szText, pszFormat, va);

  00150	8b 4d 24	 mov	 ecx, DWORD PTR _va$[ebp]
  00153	51		 push	 ecx
  00154	8b 55 20	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  00157	52		 push	 edx
  00158	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _vsprintf
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  : 
; 174  : #ifdef DEBUG
; 175  :         
; 176  :         pszWorking = dstrcpy(pszWorking, szText);

  00167	8d 8d f8 f7 ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 55 fc	 mov	 edx, DWORD PTR _pszWorking$[ebp]
  00171	52		 push	 edx
  00172	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  00177	89 45 fc	 mov	 DWORD PTR _pszWorking$[ebp], eax

; 177  : 
; 178  :         //
; 179  :         // Add a carriage-return since OutputDebugString doesn't
; 180  :         //
; 181  : 
; 182  :         pszWorking = dstrcpy(pszWorking, "\n");

  0017a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  0017f	8b 45 fc	 mov	 eax, DWORD PTR _pszWorking$[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  00188	89 45 fc	 mov	 DWORD PTR _pszWorking$[ebp], eax

; 183  : 
; 184  :         //
; 185  :         // Output to the debugger
; 186  :         //
; 187  : 
; 188  :         OutputDebugStringA(szDebug);

  0018b	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _szDebug$[ebp]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 189  : 
; 190  :         //
; 191  :         // Break into the debugger
; 192  :         //
; 193  : 
; 194  :         if(dwLevel && (dwLevel <= g_dwXactDebugBreakLevel))

  00197	83 7d 0c 00	 cmp	 DWORD PTR _dwLevel$[ebp], 0
  0019b	74 10		 je	 SHORT $L29742
  0019d	8b 55 0c	 mov	 edx, DWORD PTR _dwLevel$[ebp]
  001a0	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_dwXactDebugBreakLevel
  001a6	77 05		 ja	 SHORT $L29742

; 195  :         {
; 196  :             DwDbgBreak();

  001a8	e8 00 00 00 00	 call	 ?DwDbgBreak@XACT@@YAXXZ	; XACT::DwDbgBreak
$L29742:

; 197  :         }
; 198  : 
; 199  : #endif // DEBUG
; 200  : 
; 201  :     }
; 202  : }

  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
?DwDbgPrintStaticV@XACT@@YAXKKPBDI000PAD@Z ENDP		; XACT::DwDbgPrintStaticV
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?dstrcpy@XACT@@YGPADPADPBD@Z
_TEXT	SEGMENT
_dst$ = 8
_src$ = 12
?dstrcpy@XACT@@YGPADPADPBD@Z PROC NEAR			; XACT::dstrcpy, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L29731:

; 55   :     while(*dst = *src)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  00009	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000b	88 10		 mov	 BYTE PTR [eax], dl
  0000d	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]
  00010	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00013	85 c9		 test	 ecx, ecx
  00015	74 14		 je	 SHORT $L29732

; 56   :     {
; 57   :         dst++;

  00017	8b 55 08	 mov	 edx, DWORD PTR _dst$[ebp]
  0001a	83 c2 01	 add	 edx, 1
  0001d	89 55 08	 mov	 DWORD PTR _dst$[ebp], edx

; 58   :         src++;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 0c	 mov	 DWORD PTR _src$[ebp], eax

; 59   :     }

  00029	eb d8		 jmp	 SHORT $L29731
$L29732:

; 60   :     
; 61   :     return dst;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _dst$[ebp]

; 62   : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?dstrcpy@XACT@@YGPADPADPBD@Z ENDP			; XACT::dstrcpy
_TEXT	ENDS
PUBLIC	?DwDbgPrintStatic@XACT@@YAXKKPBDI000ZZ		; XACT::DwDbgPrintStatic
; Function compile flags: /Odt
;	COMDAT ?DwDbgPrintStatic@XACT@@YAXKKPBDI000ZZ
_TEXT	SEGMENT
_va$ = -4
_dwFlags$ = 8
_dwLevel$ = 12
_pszFile$ = 16
_nLine$ = 20
_pszFunction$ = 24
_pszLibrary$ = 28
_pszFormat$ = 32
?DwDbgPrintStatic@XACT@@YAXKKPBDI000ZZ PROC NEAR	; XACT::DwDbgPrintStatic, COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 239  :     va_list                 va;
; 240  : 
; 241  :     va_start(va, pszFormat);

  00004	8d 45 24	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00007	89 45 fc	 mov	 DWORD PTR _va$[ebp], eax

; 242  :     DwDbgPrintStaticV(dwFlags, dwLevel, pszFile, nLine, pszFunction, pszLibrary, pszFormat, va);

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _va$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 20	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  00011	52		 push	 edx
  00012	8b 45 1c	 mov	 eax, DWORD PTR _pszLibrary$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 18	 mov	 ecx, DWORD PTR _pszFunction$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLevel$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?DwDbgPrintStaticV@XACT@@YAXKKPBDI000PAD@Z ; XACT::DwDbgPrintStaticV
  0002f	83 c4 20	 add	 esp, 32			; 00000020H

; 243  :     va_end(va);

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 244  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?DwDbgPrintStatic@XACT@@YAXKKPBDI000ZZ ENDP		; XACT::DwDbgPrintStatic
_TEXT	ENDS
PUBLIC	?DwDbgSetContext@XACT@@YAXKKPBDI00@Z		; XACT::DwDbgSetContext
; Function compile flags: /Odt
;	COMDAT ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z
_TEXT	SEGMENT
_irql$ = -1
_dwFlags$ = 8
_dwLevel$ = 12
_pszFile$ = 16
_nLine$ = 20
_pszFunction$ = 24
_pszLibrary$ = 28
?DwDbgSetContext@XACT@@YAXKKPBDI00@Z PROC NEAR		; XACT::DwDbgSetContext, COMDAT

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 277  : 
; 278  : #ifdef _XBOX
; 279  : 
; 280  :     const KIRQL             irql    = KeGetCurrentIrql();

  00004	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00009	88 45 ff	 mov	 BYTE PTR _irql$[ebp], al

; 281  : 
; 282  : #else // _XBOX
; 283  : 
; 284  :     static const UINT       irql    = 0;
; 285  : 
; 286  : #endif // _XBOX
; 287  : 
; 288  :     g_XactDebugContext[irql].dwFlags = dwFlags;

  0000c	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  00010	6b c0 18	 imul	 eax, 24			; 00000018H
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00016	89 88 00 00 00
	00		 mov	 DWORD PTR _g_XactDebugContext[eax], ecx

; 289  :     g_XactDebugContext[irql].dwLevel = dwLevel;

  0001c	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  00020	6b d2 18	 imul	 edx, 24			; 00000018H
  00023	8b 45 0c	 mov	 eax, DWORD PTR _dwLevel$[ebp]
  00026	89 82 04 00 00
	00		 mov	 DWORD PTR _g_XactDebugContext[edx+4], eax

; 290  :     g_XactDebugContext[irql].pszFile = pszFile;

  0002c	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  00030	6b c9 18	 imul	 ecx, 24			; 00000018H
  00033	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  00036	89 91 08 00 00
	00		 mov	 DWORD PTR _g_XactDebugContext[ecx+8], edx

; 291  :     g_XactDebugContext[irql].nLine = nLine;

  0003c	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  00040	6b c0 18	 imul	 eax, 24			; 00000018H
  00043	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00046	89 88 0c 00 00
	00		 mov	 DWORD PTR _g_XactDebugContext[eax+12], ecx

; 292  :     g_XactDebugContext[irql].pszFunction = pszFunction;

  0004c	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  00050	6b d2 18	 imul	 edx, 24			; 00000018H
  00053	8b 45 18	 mov	 eax, DWORD PTR _pszFunction$[ebp]
  00056	89 82 10 00 00
	00		 mov	 DWORD PTR _g_XactDebugContext[edx+16], eax

; 293  :     g_XactDebugContext[irql].pszLibrary = pszLibrary;

  0005c	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  00060	6b c9 18	 imul	 ecx, 24			; 00000018H
  00063	8b 55 1c	 mov	 edx, DWORD PTR _pszLibrary$[ebp]
  00066	89 91 14 00 00
	00		 mov	 DWORD PTR _g_XactDebugContext[ecx+20], edx

; 294  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ENDP		; XACT::DwDbgSetContext
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
_TEXT	ENDS
;	COMDAT _KeGetCurrentIrql@0
_TEXT	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
_TEXT	ENDS
PUBLIC	?DwDbgPrint@XACT@@YAXPBDZZ			; XACT::DwDbgPrint
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\debug.cpp
;	COMDAT ?DwDbgPrint@XACT@@YAXPBDZZ
_TEXT	SEGMENT
_va$ = -8
_irql$ = -1
_pszFormat$ = 8
?DwDbgPrint@XACT@@YAXPBDZZ PROC NEAR			; XACT::DwDbgPrint, COMDAT

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 320  : 
; 321  : #ifdef _XBOX
; 322  : 
; 323  :     const KIRQL             irql    = KeGetCurrentIrql();

  00006	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000b	88 45 ff	 mov	 BYTE PTR _irql$[ebp], al

; 324  : 
; 325  : #else // _XBOX
; 326  : 
; 327  :     static const UINT       irql    = 0;
; 328  : 
; 329  : #endif // _XBOX
; 330  : 
; 331  :     va_list                 va;
; 332  : 
; 333  :     va_start(va, pszFormat);

  0000e	8d 45 0c	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00011	89 45 f8	 mov	 DWORD PTR _va$[ebp], eax

; 334  :     DwDbgPrintStaticV(g_XactDebugContext[irql].dwFlags, g_XactDebugContext[irql].dwLevel, g_XactDebugContext[irql].pszFile, g_XactDebugContext[irql].nLine, g_XactDebugContext[irql].pszFunction, g_XactDebugContext[irql].pszLibrary, pszFormat, va);

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _va$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 08	 mov	 edx, DWORD PTR _pszFormat$[ebp]
  0001b	52		 push	 edx
  0001c	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  00020	6b c0 18	 imul	 eax, 24			; 00000018H
  00023	8b 88 14 00 00
	00		 mov	 ecx, DWORD PTR _g_XactDebugContext[eax+20]
  00029	51		 push	 ecx
  0002a	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  0002e	6b d2 18	 imul	 edx, 24			; 00000018H
  00031	8b 82 10 00 00
	00		 mov	 eax, DWORD PTR _g_XactDebugContext[edx+16]
  00037	50		 push	 eax
  00038	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  0003c	6b c9 18	 imul	 ecx, 24			; 00000018H
  0003f	8b 91 0c 00 00
	00		 mov	 edx, DWORD PTR _g_XactDebugContext[ecx+12]
  00045	52		 push	 edx
  00046	0f b6 45 ff	 movzx	 eax, BYTE PTR _irql$[ebp]
  0004a	6b c0 18	 imul	 eax, 24			; 00000018H
  0004d	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR _g_XactDebugContext[eax+8]
  00053	51		 push	 ecx
  00054	0f b6 55 ff	 movzx	 edx, BYTE PTR _irql$[ebp]
  00058	6b d2 18	 imul	 edx, 24			; 00000018H
  0005b	8b 82 04 00 00
	00		 mov	 eax, DWORD PTR _g_XactDebugContext[edx+4]
  00061	50		 push	 eax
  00062	0f b6 4d ff	 movzx	 ecx, BYTE PTR _irql$[ebp]
  00066	6b c9 18	 imul	 ecx, 24			; 00000018H
  00069	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _g_XactDebugContext[ecx]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 ?DwDbgPrintStaticV@XACT@@YAXKKPBDI000PAD@Z ; XACT::DwDbgPrintStaticV
  00075	83 c4 20	 add	 esp, 32			; 00000020H

; 335  :     va_end(va);

  00078	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _va$[ebp], 0

; 336  : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?DwDbgPrint@XACT@@YAXPBDZZ ENDP				; XACT::DwDbgPrint
_TEXT	ENDS
PUBLIC	??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `string'
PUBLIC	??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@	; `string'
PUBLIC	??_C@_07BAMMBJFH@?0?5line?5?$AA@		; `string'
PUBLIC	??_C@_02NDKNKOCB@?3?6?$AA@			; `string'
PUBLIC	?DwDbgAssert@XACT@@YAXHPBD0I@Z			; XACT::DwDbgAssert
EXTRN	__itoa:NEAR
EXTRN	_strlen:NEAR
;	COMDAT ?pszBanner@?1??DwDbgAssert@XACT@@YAXHPBD0I@Z@4QBDB
CONST	SEGMENT
?pszBanner@?1??DwDbgAssert@XACT@@YAXHPBD0I@Z@4QBDB DD FLAT:??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `XACT::DwDbgAssert'::`2'::pszBanner
CONST	ENDS
;	COMDAT ??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@
CONST	SEGMENT
??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@ DB 'Assertion failed in ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAMMBJFH@?0?5line?5?$AA@
CONST	SEGMENT
??_C@_07BAMMBJFH@?0?5line?5?$AA@ DB ', line ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NDKNKOCB@?3?6?$AA@
CONST	SEGMENT
??_C@_02NDKNKOCB@?3?6?$AA@ DB ':', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
CONST	SEGMENT
??_C@_0EP@LPAKAOHB@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ DB '*'
	DB	'*************************************************************'
	DB	'****************', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DwDbgAssert@XACT@@YAXHPBD0I@Z
_TEXT	SEGMENT
_szMessage$ = -1032
_pszMessage$ = -4
_fAssert$ = 8
_pszExpression$ = 12
_pszFile$ = 16
_nLine$ = 20
?DwDbgAssert@XACT@@YAXHPBD0I@Z PROC NEAR		; XACT::DwDbgAssert, COMDAT

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H

; 366  :     static const LPCSTR     pszBanner           = "******************************************************************************";
; 367  :     CHAR                    szMessage[0x400];
; 368  :     LPSTR                   pszMessage;
; 369  : 
; 370  :     if(fAssert)

  00009	83 7d 08 00	 cmp	 DWORD PTR _fAssert$[ebp], 0
  0000d	0f 84 ec 00 00
	00		 je	 $L29807

; 371  :     {
; 372  :         pszMessage = szMessage;

  00013	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szMessage$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 373  : 
; 374  :         pszMessage = dstrcpy(pszMessage, pszBanner);

  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszBanner@?1??DwDbgAssert@XACT@@YAXHPBD0I@Z@4QBDB
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  00026	52		 push	 edx
  00027	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  0002c	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 375  :         pszMessage = dstrcpy(pszMessage, "\n");

  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00034	8b 45 fc	 mov	 eax, DWORD PTR _pszMessage$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  0003d	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 376  :         pszMessage = dstrcpy(pszMessage, "Assertion failed in ");

  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@DPPFGDJL@Assertion?5failed?5in?5?$AA@
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  0004e	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 377  :         pszMessage = dstrcpy(pszMessage, pszFile);

  00051	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  00054	52		 push	 edx
  00055	8b 45 fc	 mov	 eax, DWORD PTR _pszMessage$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  0005e	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 378  :         pszMessage = dstrcpy(pszMessage, ", line ");

  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07BAMMBJFH@?0?5line?5?$AA@
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  0006f	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 379  :     
; 380  :         _itoa(nLine, pszMessage, 10);

  00072	6a 0a		 push	 10			; 0000000aH
  00074	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  00077	52		 push	 edx
  00078	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 __itoa
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 381  :         pszMessage += strlen(pszMessage);

  00084	8b 4d fc	 mov	 ecx, DWORD PTR _pszMessage$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 _strlen
  0008d	83 c4 04	 add	 esp, 4
  00090	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  00093	03 d0		 add	 edx, eax
  00095	89 55 fc	 mov	 DWORD PTR _pszMessage$[ebp], edx

; 382  : 
; 383  :         pszMessage = dstrcpy(pszMessage, ":\n");

  00098	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02NDKNKOCB@?3?6?$AA@
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _pszMessage$[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  000a6	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 384  :         pszMessage = dstrcpy(pszMessage, pszExpression);

  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _pszExpression$[ebp]
  000ac	51		 push	 ecx
  000ad	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  000b6	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 385  :         pszMessage = dstrcpy(pszMessage, "\n");

  000b9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000be	8b 45 fc	 mov	 eax, DWORD PTR _pszMessage$[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  000c7	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 386  :         pszMessage = dstrcpy(pszMessage, pszBanner);

  000ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszBanner@?1??DwDbgAssert@XACT@@YAXHPBD0I@Z@4QBDB
  000d0	51		 push	 ecx
  000d1	8b 55 fc	 mov	 edx, DWORD PTR _pszMessage$[ebp]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  000da	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 387  :         pszMessage = dstrcpy(pszMessage, "\n");

  000dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000e2	8b 45 fc	 mov	 eax, DWORD PTR _pszMessage$[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?dstrcpy@XACT@@YGPADPADPBD@Z ; XACT::dstrcpy
  000eb	89 45 fc	 mov	 DWORD PTR _pszMessage$[ebp], eax

; 388  : 
; 389  :         OutputDebugStringA(szMessage);

  000ee	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _szMessage$[ebp]
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 _OutputDebugStringA@4

; 390  :         DwDbgBreak();

  000fa	e8 00 00 00 00	 call	 ?DwDbgBreak@XACT@@YAXXZ	; XACT::DwDbgBreak
$L29807:

; 391  :     }
; 392  : }

  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
?DwDbgAssert@XACT@@YAXHPBD0I@Z ENDP			; XACT::DwDbgAssert
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DwDbgBreak@XACT@@YAXXZ
_TEXT	SEGMENT
?DwDbgBreak@XACT@@YAXXZ PROC NEAR			; XACT::DwDbgBreak, COMDAT

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  :     //
; 417  :     // Break in the debugger
; 418  :     //
; 419  :     
; 420  :     __asm int 3;

  00003	cc		 int	 3

; 421  : 
; 422  : #ifdef _XBOX
; 423  : 
; 424  :     //
; 425  :     // If we're at DISPATCH_LEVEL or higher, the VC debugger won't catch
; 426  :     // the break.
; 427  :     //
; 428  :     
; 429  :     if(KeGetCurrentIrql() >= DISPATCH_LEVEL)

  00004	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00009	0f b6 c0	 movzx	 eax, al
  0000c	83 f8 02	 cmp	 eax, 2
  0000f	7c 0a		 jl	 SHORT $L29819

; 430  :     {
; 431  :         g_fXactDebugBreak = TRUE;

  00011	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_fXactDebugBreak, 1
$L29819:

; 432  :     }
; 433  : 
; 434  : #endif // _XBOX
; 435  : 
; 436  : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?DwDbgBreak@XACT@@YAXXZ ENDP				; XACT::DwDbgBreak
_TEXT	ENDS
PUBLIC	_XactMemAlloc@8
PUBLIC	??_C@_0DP@KGAPGFLH@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_08DNIHDBFJ@cbBuffer?$AA@			; `string'
EXTRN	__imp__ExAllocatePoolWithTag@8:NEAR
EXTRN	_memset:NEAR
;	COMDAT ??_C@_0DP@KGAPGFLH@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\common\memmgr.cpp
CONST	SEGMENT
??_C@_0DP@KGAPGFLH@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\memmgr.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DNIHDBFJ@cbBuffer?$AA@
CONST	SEGMENT
??_C@_08DNIHDBFJ@cbBuffer?$AA@ DB 'cbBuffer', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _XactMemAlloc@8
_TEXT	SEGMENT
_pvBuffer$ = -4
_cbBuffer$ = 8
_fZeroInit$ = 12
_XactMemAlloc@8 PROC NEAR				; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 63   :     LPVOID                  pvBuffer;
; 64   : 
; 65   :     using namespace XACT;
; 66   :     ASSERT(cbBuffer);

  00004	6a 42		 push	 66			; 00000042H
  00006	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KGAPGFLH@c?3?2xbox?2private?2windows?2directx?2@
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DNIHDBFJ@cbBuffer?$AA@
  00010	33 c0		 xor	 eax, eax
  00012	83 7d 08 00	 cmp	 DWORD PTR _cbBuffer$[ebp], 0
  00016	0f 94 c0	 sete	 al
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 67   : 
; 68   :     pvBuffer = ExAllocatePoolWithTag(cbBuffer,'tcax');

  00022	68 78 61 63 74	 push	 1952670072		; 74636178H
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _cbBuffer$[ebp]
  0002a	51		 push	 ecx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@8
  00031	89 45 fc	 mov	 DWORD PTR _pvBuffer$[ebp], eax

; 69   :     memset(pvBuffer,0,cbBuffer);

  00034	8b 55 08	 mov	 edx, DWORD PTR _cbBuffer$[ebp]
  00037	52		 push	 edx
  00038	6a 00		 push	 0
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memset
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 70   : 
; 71   :     return pvBuffer;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _pvBuffer$[ebp]

; 72   : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
_XactMemAlloc@8 ENDP
_TEXT	ENDS
PUBLIC	_XactMemFree@4
PUBLIC	??_C@_08FADLHADM@pvBuffer?$AA@			; `string'
EXTRN	__imp__ExFreePool@4:NEAR
;	COMDAT ??_C@_08FADLHADM@pvBuffer?$AA@
CONST	SEGMENT
??_C@_08FADLHADM@pvBuffer?$AA@ DB 'pvBuffer', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _XactMemFree@4
_TEXT	SEGMENT
_pvBuffer$ = 8
_XactMemFree@4 PROC NEAR				; COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 98   :     using namespace XACT;
; 99   :     ASSERT(pvBuffer);	

  00003	6a 63		 push	 99			; 00000063H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@KGAPGFLH@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08FADLHADM@pvBuffer?$AA@
  0000f	33 c0		 xor	 eax, eax
  00011	83 7d 08 00	 cmp	 DWORD PTR _pvBuffer$[ebp], 0
  00015	0f 94 c0	 sete	 al
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001e	83 c4 10	 add	 esp, 16			; 00000010H

; 100  : 	ExFreePool(pvBuffer);

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePool@4

; 101  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_XactMemFree@4 ENDP
_TEXT	ENDS
PUBLIC	?DumpMemoryUsage@@YGXH@Z			; DumpMemoryUsage
PUBLIC	??_C@_0EP@IIFDJHMP@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_07NDMLHGOG@XACTENG?$AA@			; `string'
PUBLIC	??_C@_0BA@NGLDHGLI@DumpMemoryUsage?$AA@		; `string'
PUBLIC	??_C@_0BI@MIBDOIDJ@Begin?5memory?5usage?5dump?$AA@ ; `string'
PUBLIC	??_C@_0BG@DICBIGIJ@End?5memory?5usage?5dump?$AA@ ; `string'
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
CONST	SEGMENT
??_C@_07NDMLHGOG@XACTENG?$AA@ DB 'XACTENG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGLDHGLI@DumpMemoryUsage?$AA@
CONST	SEGMENT
??_C@_0BA@NGLDHGLI@DumpMemoryUsage?$AA@ DB 'DumpMemoryUsage', 00H ; `string'
CONST	ENDS
;	COMDAT ?pszBanner@?1??DumpMemoryUsage@@YGXH@Z@4QBDB
CONST	SEGMENT
?pszBanner@?1??DumpMemoryUsage@@YGXH@Z@4QBDB DD FLAT:??_C@_0EP@IIFDJHMP@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `DumpMemoryUsage'::`2'::pszBanner
CONST	ENDS
;	COMDAT ??_C@_0BI@MIBDOIDJ@Begin?5memory?5usage?5dump?$AA@
CONST	SEGMENT
??_C@_0BI@MIBDOIDJ@Begin?5memory?5usage?5dump?$AA@ DB 'Begin memory usage'
	DB	' dump', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DICBIGIJ@End?5memory?5usage?5dump?$AA@
CONST	SEGMENT
??_C@_0BG@DICBIGIJ@End?5memory?5usage?5dump?$AA@ DB 'End memory usage dum'
	DB	'p', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@IIFDJHMP@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0EP@IIFDJHMP@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'-------------------------------------------------------------'
	DB	'----------------', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DumpMemoryUsage@@YGXH@Z
_TEXT	SEGMENT
_fAssertNone$ = 8
?DumpMemoryUsage@@YGXH@Z PROC NEAR			; DumpMemoryUsage, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 313  : 
; 314  :     using namespace XACT;
; 315  : #ifdef DEBUG
; 316  : 
; 317  :     static const LPCSTR     pszBanner           = "------------------------------------------------------------------------------";
; 318  : 
; 319  : #ifdef TRACK_MEMORY_USAGE
; 320  : 
; 321  :     PLIST_ENTRY             pleEntry;
; 322  :     LPDSMEMTRACK            pTracking;
; 323  : 
; 324  : #endif // TRACK_MEMORY_USAGE
; 325  : 
; 326  :     DwDbgSetContext(DPF_FLAGS_LIBRARY, DPFLVL_ABSOLUTE, NULL, 0, DPF_FNAME, DPF_LIBRARY);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@NGLDHGLI@DumpMemoryUsage?$AA@
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 01		 push	 1
  00015	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 327  :     DwDbgPrint(pszBanner);

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszBanner@?1??DumpMemoryUsage@@YGXH@Z@4QBDB
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00028	83 c4 04	 add	 esp, 4

; 328  :     DwDbgPrint("Begin memory usage dump");

  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MIBDOIDJ@Begin?5memory?5usage?5dump?$AA@
  00030	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00035	83 c4 04	 add	 esp, 4

; 329  :     DwDbgPrint(pszBanner);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszBanner@?1??DumpMemoryUsage@@YGXH@Z@4QBDB
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00044	83 c4 04	 add	 esp, 4

; 330  :     
; 331  : #ifdef TRACK_MEMORY_USAGE
; 332  : 
; 333  :     //
; 334  :     // Raise IRQL for synchronization
; 335  :     //
; 336  : 
; 337  :     AutoIrql();
; 338  :   
; 339  :     //
; 340  :     // Show specifically what allocations are remaining
; 341  :     //
; 342  :     
; 343  :     if(g_lstMemoryTracking.Flink)
; 344  :     {
; 345  :         if(!IsListEmpty(&g_lstMemoryTracking))
; 346  :         {
; 347  :             for(pleEntry = g_lstMemoryTracking.Flink; pleEntry != &g_lstMemoryTracking; pleEntry = pleEntry->Flink)
; 348  :             {
; 349  :                 AssertValidEntryList(pleEntry, ASSERT_IN_LIST);
; 350  :             
; 351  :                 pTracking = CONTAINING_RECORD(pleEntry, DSMEMTRACK, leListEntry);
; 352  : 
; 353  :                 DwDbgSetContext(DPF_FLAGS_FILELINE, DPFLVL_ABSOLUTE, pTracking->pszFile, pTracking->nLine, DPF_FNAME, DPF_LIBRARY);
; 354  :                 DwDbgPrint("%x (%lu bytes, type %s)", pTracking + 1, pTracking->cbSize, pTracking->pszClass);
; 355  :             }
; 356  : 
; 357  :             DwDbgSetContext(DPF_FLAGS_LIBRARY, DPFLVL_ABSOLUTE, NULL, 0, DPF_FNAME, DPF_LIBRARY);
; 358  :             DwDbgPrint(pszBanner);
; 359  :         }
; 360  :     }
; 361  : 
; 362  : #endif // TRACK_MEMORY_USAGE
; 363  : 
; 364  : 
; 365  :     DwDbgPrint(pszBanner);

  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pszBanner@?1??DumpMemoryUsage@@YGXH@Z@4QBDB
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00053	83 c4 04	 add	 esp, 4

; 366  :     DwDbgPrint("End memory usage dump");

  00056	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@DICBIGIJ@End?5memory?5usage?5dump?$AA@
  0005b	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00060	83 c4 04	 add	 esp, 4

; 367  :     DwDbgPrint(pszBanner);

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszBanner@?1??DumpMemoryUsage@@YGXH@Z@4QBDB
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0006e	83 c4 04	 add	 esp, 4

; 368  : 
; 369  : #endif // DEBUG
; 370  : 
; 371  : }

  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
?DumpMemoryUsage@@YGXH@Z ENDP				; DumpMemoryUsage
_TEXT	ENDS
END
