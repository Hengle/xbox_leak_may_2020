; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\wavebank.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XACTENG_URW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_URW	ENDS
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_09DNMHMJFP@g_pEngine?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_06FCHHOKPD@pvData?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_06HDDMAKPI@dwSize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BG@FDPGLKFL@CWaveBank?3?3Initialize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BP@GJJNAJBO@Invalid?5wavebank?5header?5?$CI0x?$CFx?$CJ?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BP@FAPONNOA@CWaveBank?3?3AllocateSoundSource?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0FC@LHDKKKEI@Voice?5form?5available?5list?5was?5st@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07HPANBCJA@pSource?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CC@IKOGKKIB@pSource?9?$DOm_pWaveBankOwner?5?$DN?$DN?5thi@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JKCKNDLK@CWaveBank?3?3StopAllCues?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0IJ@HLDCMPCA@You?5are?5un?9registering?5wavebank?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RW	ENDS
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _IsEqualGUID@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _==@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_AddRef@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_Release@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_BeginScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_EndScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPalette_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _sqrtf@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?MoveEntryTailList@XACT@@YGPAU_LIST_ENTRY@@PAU2@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetFriendlyName@CSoundCue@XACT@@QAEPBDXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsPlaying@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CWaveBank@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CWaveBank@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CWaveBank@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCWaveBank@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CWaveBank@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Initialize@CWaveBank@XACT@@QAEJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?FreeSoundSource@CWaveBank@XACT@@QAEXPAVCSoundSource@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddCueToList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?RemoveCueFromList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?StopAllCues@CWaveBank@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_7CRefCount@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWaveBank@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XACTENG_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
XACTENG_RD	ENDS
PUBLIC	??0CWaveBank@XACT@@QAE@XZ			; XACT::CWaveBank::CWaveBank
PUBLIC	?AddRef@CWaveBank@XACT@@UAGKXZ			; XACT::CWaveBank::AddRef
PUBLIC	?Release@CWaveBank@XACT@@UAGKXZ			; XACT::CWaveBank::Release
PUBLIC	??_7CWaveBank@XACT@@6B@				; XACT::CWaveBank::`vftable'
PUBLIC	??_GCWaveBank@XACT@@UAEPAXI@Z			; XACT::CWaveBank::`scalar deleting destructor'
PUBLIC	??0CRefCount@XACT@@QAE@K@Z			; XACT::CRefCount::CRefCount
EXTRN	??_ECWaveBank@XACT@@UAEPAXI@Z:NEAR		; XACT::CWaveBank::`vector deleting destructor'
;	COMDAT ??_7CWaveBank@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\engine\wavebank.cpp
CONST	SEGMENT
??_7CWaveBank@XACT@@6B@ DD FLAT:??_ECWaveBank@XACT@@UAEPAXI@Z ; XACT::CWaveBank::`vftable'
	DD	FLAT:?AddRef@CWaveBank@XACT@@UAGKXZ
	DD	FLAT:?Release@CWaveBank@XACT@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWaveBank@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CWaveBank@XACT@@QAE@XZ PROC NEAR			; XACT::CWaveBank::CWaveBank, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@XACT@@QAE@K@Z ; XACT::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBank@XACT@@6B@

; 29   :     DPF_ENTER();
; 30   :     InitializeListHead(&m_ListEntry);

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 28	 add	 ecx, 40			; 00000028H
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0002f	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 31   :     InitializeListHead(&m_lstCues);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 c0 20	 add	 eax, 32			; 00000020H
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00047	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 32   :     InitializeListHead(&m_lstAvailableSources);

  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	83 c2 18	 add	 edx, 24			; 00000018H
  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0005f	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 33   : 
; 34   :     DPF_LEAVE_VOID();
; 35   : }

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
??0CWaveBank@XACT@@QAE@XZ ENDP				; XACT::CWaveBank::CWaveBank
XACTENG	ENDS
PUBLIC	?AddRef@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::AddRef
PUBLIC	?Release@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::Release
PUBLIC	??_7CRefCount@XACT@@6B@				; XACT::CRefCount::`vftable'
PUBLIC	??_GCRefCount@XACT@@UAEPAXI@Z			; XACT::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@XACT@@UAEPAXI@Z:NEAR		; XACT::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\common\refcount.h
CONST	SEGMENT
??_7CRefCount@XACT@@6B@ DD FLAT:??_ECRefCount@XACT@@UAEPAXI@Z ; XACT::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@XACT@@UAGKXZ
	DD	FLAT:?Release@CRefCount@XACT@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@XACT@@QAE@K@Z PROC NEAR			; XACT::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 36   : }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@XACT@@QAE@K@Z ENDP				; XACT::CRefCount::CRefCount
XACTENG	ENDS
PUBLIC	??1CRefCount@XACT@@UAE@XZ			; XACT::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@XACT@@UAEPAXI@Z PROC NEAR			; XACT::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L29682
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L29682:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@XACT@@UAEPAXI@Z ENDP			; XACT::CRefCount::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
EXTRN	?DwDbgAssert@XACT@@YAXHPBD0I@Z:NEAR		; XACT::DwDbgAssert
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\refcount.h', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CRefCount@XACT@@UAE@XZ PROC NEAR			; XACT::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@

; 40   :     ASSERT(!m_dwRefCount);

  00010	6a 28		 push	 40			; 00000028H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 41   : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@XACT@@UAE@XZ ENDP				; XACT::CRefCount::~CRefCount
XACTENG	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
_this$ = 8
?AddRef@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::AddRef, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   :     ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2d		 push	 45			; 0000002dH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 46   :     return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 47   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::AddRef
XACTENG	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
tv84 = -12
$T32080 = -8
$T32079 = -4
_this$ = 8
?Release@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::Release, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 51   :     ASSERT(m_dwRefCount);

  00006	6a 33		 push	 51			; 00000033H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 52   : 
; 53   :     if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L29699

; 54   :     {
; 55   :         if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L29699

; 56   :         {
; 57   :             delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T32080[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T32080[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T32079[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T32079[ebp], 0
  00058	74 11		 je	 SHORT $L32081
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T32079[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T32079[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L32082
$L32081:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L32082:

; 58   :             return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L29697
$L29699:

; 59   :         }
; 60   :     }
; 61   : 
; 62   :     return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L29697:

; 63   : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::Release
XACTENG	ENDS
EXTRN	_XactMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 99   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  :     using namespace XACT;
; 101  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 102  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
XACTENG	ENDS
PUBLIC	??0CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::CAutoLock
PUBLIC	??1CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::~CAutoLock
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ?AddRef@CWaveBank@XACT@@UAGKXZ
XACTENG	SEGMENT
$T32089 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CWaveBank@XACT@@UAGKXZ PROC NEAR		; XACT::CWaveBank::AddRef, COMDAT

; 721  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 722  :     _ENTER_EXTERNAL_METHOD("CWaveBank::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 723  :     return CRefCount::AddRef();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?AddRef@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::AddRef
  00017	89 45 f8	 mov	 DWORD PTR $T32089[ebp], eax
  0001a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001d	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00022	8b 45 f8	 mov	 eax, DWORD PTR $T32089[ebp]

; 724  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AddRef@CWaveBank@XACT@@UAGKXZ ENDP			; XACT::CWaveBank::AddRef
XACTENG	ENDS
PUBLIC	?XACTEnterCriticalSection@@YGHXZ		; XACTEnterCriticalSection
; Function compile flags: /Odt
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::CAutoLock, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   :     m_fLocked = (BOOLEAN)XACTEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?XACTEnterCriticalSection@@YGHXZ ; XACTEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 83   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_XACTCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT
?XACTEnterCriticalSection@@YGHXZ PROC NEAR		; XACTEnterCriticalSection, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L30689

; 49   :     {
; 50   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L30688
$L30689:

; 51   :     }
; 52   : 
; 53   :     EnterCriticalSection(&g_XACTCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 54   : 
; 55   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L30688:

; 56   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?XACTEnterCriticalSection@@YGHXZ ENDP			; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
XACTENG	ENDS
PUBLIC	?XACTLeaveCriticalSection@@YGXXZ		; XACTLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   :     if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L30715

; 88   :     {
; 89   :         XACTLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?XACTLeaveCriticalSection@@YGXXZ ; XACTLeaveCriticalSection
$L30715:

; 90   :     }
; 91   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::~CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT
?XACTLeaveCriticalSection@@YGXXZ PROC NEAR		; XACTLeaveCriticalSection, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :     LeaveCriticalSection(&g_XACTCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 61   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?XACTLeaveCriticalSection@@YGXXZ ENDP			; XACTLeaveCriticalSection
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?Release@CWaveBank@XACT@@UAGKXZ
XACTENG	SEGMENT
$T32108 = -8
___AutoLock$ = -4
_this$ = 8
?Release@CWaveBank@XACT@@UAGKXZ PROC NEAR		; XACT::CWaveBank::Release, COMDAT

; 728  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 729  :     _ENTER_EXTERNAL_METHOD("CWaveBank::Release");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 730  :     return CRefCount::Release();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?Release@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::Release
  00017	89 45 f8	 mov	 DWORD PTR $T32108[ebp], eax
  0001a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001d	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00022	8b 45 f8	 mov	 eax, DWORD PTR $T32108[ebp]

; 731  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Release@CWaveBank@XACT@@UAGKXZ ENDP			; XACT::CWaveBank::Release
XACTENG	ENDS
PUBLIC	??1CWaveBank@XACT@@UAE@XZ			; XACT::CWaveBank::~CWaveBank
; Function compile flags: /Odt
;	COMDAT ??_GCWaveBank@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCWaveBank@XACT@@UAEPAXI@Z PROC NEAR			; XACT::CWaveBank::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWaveBank@XACT@@UAE@XZ ; XACT::CWaveBank::~CWaveBank
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L31838
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L31838:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWaveBank@XACT@@UAEPAXI@Z ENDP			; XACT::CWaveBank::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
PUBLIC	?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z ; XACT::CSoundSource::SetWaveBankOwner
PUBLIC	?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
PUBLIC	?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z	; IDirectSoundBuffer::SetBufferData
EXTRN	_g_pEngine:DWORD
EXTRN	?Release@CEngine@XACT@@QAGKXZ:NEAR		; XACT::CEngine::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\wavebank.cpp
;	COMDAT ??1CWaveBank@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -20
_pBuffer$31853 = -16
___AutoLock$ = -12
_pSource$ = -8
_pEntry$ = -4
??1CWaveBank@XACT@@UAE@XZ PROC NEAR			; XACT::CWaveBank::~CWaveBank, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBank@XACT@@6B@

; 45   :     ENTER_EXTERNAL_METHOD();

  00012	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 46   :     CSoundSource *pSource;
; 47   : 
; 48   :     DPF_ENTER();
; 49   :     PLIST_ENTRY pEntry;
; 50   : 
; 51   :     g_pEngine->Release();

  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ?Release@CEngine@XACT@@QAGKXZ ; XACT::CEngine::Release

; 52   :  
; 53   :     m_WaveBankData.pvData = NULL;

  00026	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00029	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 54   :     m_WaveBankData.dwDataSize = 0;

  00030	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 55   : 
; 56   :     pEntry = m_lstAvailableSources.Flink;

  0003a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00040	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx
$L31847:

; 57   :     while (pEntry != &m_lstAvailableSources){

  00043	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 c0 18	 add	 eax, 24			; 00000018H
  00049	39 45 fc	 cmp	 DWORD PTR _pEntry$[ebp], eax
  0004c	74 53		 je	 SHORT $L31848

; 58   : 
; 59   :         pSource = CONTAINING_RECORD(pEntry,CSoundSource,m_ListEntry);

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00051	83 e9 08	 sub	 ecx, 8
  00054	89 4d f8	 mov	 DWORD PTR _pSource$[ebp], ecx

; 60   :         pEntry = pEntry->Flink;

  00057	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 61   : 
; 62   :         pSource->SetWaveBankOwner(NULL);

  0005f	6a 00		 push	 0
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00064	e8 00 00 00 00	 call	 ?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z ; XACT::CSoundSource::SetWaveBankOwner

; 63   : 
; 64   :         //
; 65   :         // tell dsound to release the page SGEs
; 66   :         //
; 67   : 
; 68   :         if (LPDIRECTSOUNDBUFFER pBuffer = pSource->GetDSoundBuffer()) {

  00069	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0006c	e8 00 00 00 00	 call	 ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
  00071	89 45 f0	 mov	 DWORD PTR _pBuffer$31853[ebp], eax
  00074	83 7d f0 00	 cmp	 DWORD PTR _pBuffer$31853[ebp], 0
  00078	74 0d		 je	 SHORT $L31854

; 69   :             pBuffer->SetBufferData(0,0);

  0007a	6a 00		 push	 0
  0007c	6a 00		 push	 0
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _pBuffer$31853[ebp]
  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData
$L31854:

; 70   :         }
; 71   : 
; 72   :         RemoveEntryList(&pSource->m_ListEntry);

  00087	8b 55 f8	 mov	 edx, DWORD PTR _pSource$[ebp]
  0008a	83 c2 08	 add	 edx, 8
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 73   :         pSource->Release();

  00093	8b 45 f8	 mov	 eax, DWORD PTR _pSource$[ebp]
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	8b 55 f8	 mov	 edx, DWORD PTR _pSource$[ebp]
  0009b	52		 push	 edx
  0009c	ff 51 08	 call	 DWORD PTR [ecx+8]

; 74   : 
; 75   :     }

  0009f	eb a2		 jmp	 SHORT $L31847
$L31848:

; 76   : 
; 77   :     DPF_LEAVE_VOID();
; 78   : }

  000a1	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000a9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
??1CWaveBank@XACT@@UAE@XZ ENDP				; XACT::CWaveBank::~CWaveBank
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetBufferData@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT
_this$ = 8
_pvBufferData$ = 12
_dwBufferBytes$ = 16
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z PROC NEAR	; IDirectSoundBuffer::SetBufferData, COMDAT

; 2107 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2108 :         return IDirectSoundBuffer_SetBufferData(this, pvBufferData, dwBufferBytes);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetBufferData@12

; 2109 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ENDP	; IDirectSoundBuffer::SetBufferData
XACTENG	ENDS
PUBLIC	?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList
PUBLIC	??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG_RD	SEGMENT
??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z
XACTENG	SEGMENT
_Entry$ = 8
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z PROC NEAR ; XACT::RemoveEntryList, COMDAT

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d6 00 00 00	 push	 214			; 000000d6H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 215  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00018	68 d7 00 00 00	 push	 215			; 000000d7H
  0001d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00022	6a 01		 push	 1
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 216  : 
; 217  :     Entry->Flink->Blink = Entry->Blink;

  0002d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00035	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00038	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 218  :     Entry->Blink->Flink = Entry->Flink;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 219  :     Entry->Flink = Entry->Blink = Entry;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00051	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00054	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00057	89 08		 mov	 DWORD PTR [eax], ecx

; 220  : 
; 221  :     return Entry;

  00059	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 222  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ENDP	; XACT::RemoveEntryList
XACTENG	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z PROC NEAR ; XACT::__AssertValidEntryList, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L29601

; 55   :     {
; 56   :         DwDbgAssert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 57   :     }
; 58   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L29600
$L29601:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L29605
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L29604
$L29605:

; 59   :     {
; 60   :         DwDbgAssert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 61   :     }
; 62   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L29600
$L29604:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L29609
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L29608
$L29609:

; 63   :     {
; 64   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L29611
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L29610
$L29611:

; 65   :         {
; 66   :             DwDbgAssert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L29610:

; 67   :         }
; 68   :     }
; 69   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L29600
$L29608:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L29614

; 70   :     {
; 71   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L29615

; 72   :         {
; 73   :             DwDbgAssert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L29615:

; 74   :         }
; 75   :     }
; 76   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L29600
$L29614:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L29600

; 77   :     {
; 78   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L29600

; 79   :         {
; 80   :             DwDbgAssert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L29600:

; 81   :         }
; 82   :     }
; 83   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ENDP ; XACT::__AssertValidEntryList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ PROC NEAR ; XACT::CSoundSource::GetDSoundBuffer, COMDAT
; _this$ = ecx

; 594  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 595  : 
; 596  :         return m_HwVoice.pBuffer;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 597  : 
; 598  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ENDP ; XACT::CSoundSource::GetDSoundBuffer
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z
XACTENG	SEGMENT
_this$ = -4
_pWaveBank$ = 8
?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z PROC NEAR ; XACT::CSoundSource::SetWaveBankOwner, COMDAT
; _this$ = ecx

; 626  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 627  : 
; 628  :         m_pWaveBankOwner = pWaveBank;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveBank$[ebp]
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 629  : 
; 630  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z ENDP ; XACT::CSoundSource::SetWaveBankOwner
XACTENG	ENDS
PUBLIC	??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_09DNMHMJFP@g_pEngine?$AA@			; `string'
PUBLIC	??_C@_06FCHHOKPD@pvData?$AA@			; `string'
PUBLIC	??_C@_06HDDMAKPI@dwSize?$AA@			; `string'
PUBLIC	??_C@_0BG@FDPGLKFL@CWaveBank?3?3Initialize?$AA@	; `string'
PUBLIC	??_C@_0BP@GJJNAJBO@Invalid?5wavebank?5header?5?$CI0x?$CFx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_07NDMLHGOG@XACTENG?$AA@			; `string'
PUBLIC	?Initialize@CWaveBank@XACT@@QAEJPAXK@Z		; XACT::CWaveBank::Initialize
PUBLIC	?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z ; XACT::CWaveBank::AllocateSoundSource
PUBLIC	?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z ; XACT::CWaveBank::SetBufferData
EXTRN	?AddRef@CEngine@XACT@@QAGKXZ:NEAR		; XACT::CEngine::AddRef
EXTRN	?DwDbgSetContext@XACT@@YAXKKPBDI00@Z:NEAR	; XACT::DwDbgSetContext
EXTRN	?DwDbgPrint@XACT@@YAXPBDZZ:NEAR			; XACT::DwDbgPrint
;	COMDAT ??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\engine\wavebank.cpp
XACTENG_RD	SEGMENT
??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\engine\wavebank.cpp', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_09DNMHMJFP@g_pEngine?$AA@
XACTENG_RD	SEGMENT
??_C@_09DNMHMJFP@g_pEngine?$AA@ DB 'g_pEngine', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_06FCHHOKPD@pvData?$AA@
XACTENG_RD	SEGMENT
??_C@_06FCHHOKPD@pvData?$AA@ DB 'pvData', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_06HDDMAKPI@dwSize?$AA@
XACTENG_RD	SEGMENT
??_C@_06HDDMAKPI@dwSize?$AA@ DB 'dwSize', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT
??_C@_07NDMLHGOG@XACTENG?$AA@ DB 'XACTENG', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BG@FDPGLKFL@CWaveBank?3?3Initialize?$AA@
XACTENG_RD	SEGMENT
??_C@_0BG@FDPGLKFL@CWaveBank?3?3Initialize?$AA@ DB 'CWaveBank::Initialize'
	DB	00H						; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BP@GJJNAJBO@Invalid?5wavebank?5header?5?$CI0x?$CFx?$CJ?$AA@
XACTENG_RD	SEGMENT
??_C@_0BP@GJJNAJBO@Invalid?5wavebank?5header?5?$CI0x?$CFx?$CJ?$AA@ DB 'In'
	DB	'valid wavebank header (0x%x)', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Initialize@CWaveBank@XACT@@QAEJPAXK@Z
XACTENG	SEGMENT
_this$ = -24
$T32133 = -20
___AutoLock$ = -16
_hr$ = -12
_dwOffset$ = -8
_pSource$ = -4
_pvData$ = 8
_dwSize$ = 12
?Initialize@CWaveBank@XACT@@QAEJPAXK@Z PROC NEAR	; XACT::CWaveBank::Initialize, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 85   :     HRESULT hr = S_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 86   :     DWORD dwOffset = 0;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwOffset$[ebp], 0

; 87   :     CSoundSource *pSource;
; 88   : 
; 89   :     ENTER_EXTERNAL_METHOD();

  00017	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 90   :     DPF_ENTER();
; 91   : 
; 92   :     ASSERT(g_pEngine);    

  0001f	6a 5c		 push	 92			; 0000005cH
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09DNMHMJFP@g_pEngine?$AA@
  0002b	33 c0		 xor	 eax, eax
  0002d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pEngine, 0
  00034	0f 94 c0	 sete	 al
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 93   :     ASSERT(pvData);

  00040	6a 5d		 push	 93			; 0000005dH
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06FCHHOKPD@pvData?$AA@
  0004c	33 c9		 xor	 ecx, ecx
  0004e	83 7d 08 00	 cmp	 DWORD PTR _pvData$[ebp], 0
  00052	0f 94 c1	 sete	 cl
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0005b	83 c4 10	 add	 esp, 16			; 00000010H

; 94   :     ASSERT(dwSize);

  0005e	6a 5e		 push	 94			; 0000005eH
  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  00065	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06HDDMAKPI@dwSize?$AA@
  0006a	33 d2		 xor	 edx, edx
  0006c	83 7d 0c 00	 cmp	 DWORD PTR _dwSize$[ebp], 0
  00070	0f 94 c2	 sete	 dl
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 95   : 
; 96   :     g_pEngine->AddRef();

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pEngine
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?AddRef@CEngine@XACT@@QAGKXZ ; XACT::CEngine::AddRef

; 97   : 
; 98   :     hr = AllocateSoundSource(&pSource);

  00087	8d 4d fc	 lea	 ecx, DWORD PTR _pSource$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z ; XACT::CWaveBank::AllocateSoundSource
  00093	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax

; 99   : 
; 100  :     if (SUCCEEDED(hr)) {

  00096	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009a	7c 67		 jl	 SHORT $L31870

; 101  : 
; 102  :         m_WaveBankData.pHeader = (LPWAVEBANKHEADER)((PUCHAR)pvData+dwOffset);

  0009c	8b 55 08	 mov	 edx, DWORD PTR _pvData$[ebp]
  0009f	03 55 f8	 add	 edx, DWORD PTR _dwOffset$[ebp]
  000a2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 103  :         
; 104  : #ifdef VALIDATE_PARAMETERS
; 105  :         //
; 106  :         // Validate the header
; 107  :         //
; 108  :         
; 109  :         if (m_WaveBankData.pHeader->dwSignature  != WAVEBANKHEADER_SIGNATURE ||
; 110  :             m_WaveBankData.pHeader->dwVersion    != WAVEBANKHEADER_VERSION ||
; 111  :             m_WaveBankData.pHeader->dwEntryCount == 0)

  000a8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ae	81 3a 57 42 4e
	44		 cmp	 DWORD PTR [edx], 1145979479 ; 444e4257H
  000b4	75 18		 jne	 SHORT $L31874
  000b6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000bc	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  000c0	75 0c		 jne	 SHORT $L31874
  000c2	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000c8	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000cc	75 35		 jne	 SHORT $L31870
$L31874:

; 112  :         {
; 113  :             DPF_ERROR("Invalid wavebank header (0x%x)", pvData);

  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000d3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FDPGLKFL@CWaveBank?3?3Initialize?$AA@
  000d8	6a 71		 push	 113			; 00000071H
  000da	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  000df	6a 01		 push	 1
  000e1	6a 09		 push	 9
  000e3	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000e8	83 c4 18	 add	 esp, 24			; 00000018H
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _pvData$[ebp]
  000ee	51		 push	 ecx
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GJJNAJBO@Invalid?5wavebank?5header?5?$CI0x?$CFx?$CJ?$AA@
  000f4	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000f9	83 c4 08	 add	 esp, 8

; 114  :             hr = E_FAIL;

  000fc	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L31870:

; 115  :         }
; 116  : #endif
; 117  :         
; 118  :     }
; 119  : 
; 120  :     if (SUCCEEDED(hr)) {

  00103	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00107	7c 55		 jl	 SHORT $L31879

; 121  :         
; 122  :         dwOffset += sizeof(WAVEBANKHEADER);

  00109	8b 55 f8	 mov	 edx, DWORD PTR _dwOffset$[ebp]
  0010c	83 c2 24	 add	 edx, 36			; 00000024H
  0010f	89 55 f8	 mov	 DWORD PTR _dwOffset$[ebp], edx

; 123  :         m_WaveBankData.paMetaData = (LPWAVEBANKENTRY) ((PUCHAR)pvData + dwOffset);

  00112	8b 45 08	 mov	 eax, DWORD PTR _pvData$[ebp]
  00115	03 45 f8	 add	 eax, DWORD PTR _dwOffset$[ebp]
  00118	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 124  :         
; 125  :         dwOffset += m_WaveBankData.pHeader->dwEntryCount*sizeof(WAVEBANKENTRY);

  0011e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00121	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00124	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00127	6b c9 14	 imul	 ecx, 20			; 00000014H
  0012a	8b 55 f8	 mov	 edx, DWORD PTR _dwOffset$[ebp]
  0012d	03 d1		 add	 edx, ecx
  0012f	89 55 f8	 mov	 DWORD PTR _dwOffset$[ebp], edx

; 126  :         m_WaveBankData.pvData = (PVOID) ((PUCHAR)pvData+dwOffset);

  00132	8b 45 08	 mov	 eax, DWORD PTR _pvData$[ebp]
  00135	03 45 f8	 add	 eax, DWORD PTR _dwOffset$[ebp]
  00138	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 127  :         m_WaveBankData.dwDataSize = dwSize - dwOffset;

  0013e	8b 55 0c	 mov	 edx, DWORD PTR _dwSize$[ebp]
  00141	2b 55 f8	 sub	 edx, DWORD PTR _dwOffset$[ebp]
  00144	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00147	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 128  :         
; 129  :         //
; 130  :         // map one 2d voice to span the entire data buffer.
; 131  :         // this makes dsound pre-allocate the SGEs required by all the waves in the bank
; 132  :         // and minimizes latency when playing voices pointing to this wavebank later
; 133  :         //
; 134  : 
; 135  :         hr = SetBufferData(pSource->GetDSoundBuffer());

  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0014d	e8 00 00 00 00	 call	 ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
  00152	50		 push	 eax
  00153	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	e8 00 00 00 00	 call	 ?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z ; XACT::CWaveBank::SetBufferData
  0015b	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L31879:

; 136  : 
; 137  :     }
; 138  : 
; 139  :     //
; 140  :     // the first voice is available for use by a cue since we just used it to map wave data
; 141  :     // AllocateSoundSource addrefs the source one extra time to bring the voice total to at least 3
; 142  :     // this way when its released it looks like it was released from a cue and it gets
; 143  :     // freed back to the wavebank freelist
; 144  :     //    
; 145  : 
; 146  :     if (SUCCEEDED(hr)) {

  0015e	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00162	7c 0c		 jl	 SHORT $L31887

; 147  : 
; 148  :         pSource->Release();

  00164	8b 4d fc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00167	8b 11		 mov	 edx, DWORD PTR [ecx]
  00169	8b 45 fc	 mov	 eax, DWORD PTR _pSource$[ebp]
  0016c	50		 push	 eax
  0016d	ff 52 08	 call	 DWORD PTR [edx+8]
$L31887:

; 149  : 
; 150  :     }
; 151  : 
; 152  :     DPF_LEAVE_HRESULT(hr);
; 153  :     return hr;

  00170	8b 4d f4	 mov	 ecx, DWORD PTR _hr$[ebp]
  00173	89 4d ec	 mov	 DWORD PTR $T32133[ebp], ecx
  00176	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00179	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0017e	8b 45 ec	 mov	 eax, DWORD PTR $T32133[ebp]

; 154  : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 08 00	 ret	 8
?Initialize@CWaveBank@XACT@@QAEJPAXK@Z ENDP		; XACT::CWaveBank::Initialize
XACTENG	ENDS
PUBLIC	??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_07OFNMHBKJ@pBuffer?$AA@			; `string'
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG_RD	SEGMENT
??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\inc\xacti.h', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT
??_C@_07OFNMHBKJ@pBuffer?$AA@ DB 'pBuffer', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z
XACTENG	SEGMENT
_this$ = -4
_pBuffer$ = 8
?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z PROC NEAR ; XACT::CWaveBank::SetBufferData, COMDAT
; _this$ = ecx

; 703  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 704  : 
; 705  :         ASSERT(pBuffer);

  00007	68 c1 02 00 00	 push	 705			; 000002c1H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OFNMHBKJ@pBuffer?$AA@
  00016	33 c0		 xor	 eax, eax
  00018	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 706  :         return pBuffer->SetBufferData(m_WaveBankData.pvData, m_WaveBankData.dwDataSize);

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	52		 push	 edx
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00035	51		 push	 ecx
  00036	8b 55 08	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData

; 707  : 
; 708  :     }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z ENDP ; XACT::CWaveBank::SetBufferData
XACTENG	ENDS
PUBLIC	??_C@_0BP@FAPONNOA@CWaveBank?3?3AllocateSoundSource?$AA@ ; `string'
PUBLIC	??_C@_0FC@LHDKKKEI@Voice?5form?5available?5list?5was?5st@ ; `string'
PUBLIC	?IsPlaying@CSoundSource@XACT@@QAEHXZ		; XACT::CSoundSource::IsPlaying
EXTRN	?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z:NEAR ; XACT::CEngine::CreateSoundSourceInternal
;	COMDAT ??_C@_0BP@FAPONNOA@CWaveBank?3?3AllocateSoundSource?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\wavebank.cpp
XACTENG_RD	SEGMENT
??_C@_0BP@FAPONNOA@CWaveBank?3?3AllocateSoundSource?$AA@ DB 'CWaveBank::A'
	DB	'llocateSoundSource', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0FC@LHDKKKEI@Voice?5form?5available?5list?5was?5st@
XACTENG_RD	SEGMENT
??_C@_0FC@LHDKKKEI@Voice?5form?5available?5list?5was?5st@ DB 'Voice form '
	DB	'available list was still playing in hw, attempting re-alloc o'
	DB	'f new one', 00H				; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z
XACTENG	SEGMENT
_this$ = -24
$T32140 = -20
___AutoLock$ = -16
_hr$ = -12
_pSource$ = -8
_pEntry$ = -4
_ppSource$ = 8
?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z PROC NEAR ; XACT::CWaveBank::AllocateSoundSource, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 
; 162  :     HRESULT hr = S_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 163  :     ENTER_EXTERNAL_METHOD();

  00010	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock
$L31899:

; 164  : 
; 165  :     PLIST_ENTRY pEntry;
; 166  :     CSoundSource *pSource;
; 167  : 
; 168  :     while (TRUE && SUCCEEDED(hr)) {

  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 c2 00 00
	00		 je	 $L31900
  00025	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00029	0f 8c b8 00 00
	00		 jl	 $L31900

; 169  : 
; 170  :         if (!IsListEmpty(&m_lstAvailableSources)) {

  0002f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 18	 add	 ecx, 24			; 00000018H
  00035	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00038	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  0003b	74 1a		 je	 SHORT $L31902

; 171  :             
; 172  :             pEntry = RemoveHeadList(&m_lstAvailableSources);

  0003d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList
  00049	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax

; 173  :             pSource = CONTAINING_RECORD(pEntry,CSoundSource,m_ListEntry);

  0004c	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  0004f	83 ea 08	 sub	 edx, 8
  00052	89 55 f8	 mov	 DWORD PTR _pSource$[ebp], edx

; 174  :             
; 175  :         } else {

  00055	eb 16		 jmp	 SHORT $L31907
$L31902:

; 176  :             
; 177  :             //
; 178  :             // get one from the engine
; 179  :             //
; 180  :             
; 181  :             hr = g_pEngine->CreateSoundSourceInternal(XACT_FLAG_SOUNDSOURCE_2D,NULL,&pSource);        

  00057	8d 45 f8	 lea	 eax, DWORD PTR _pSource$[ebp]
  0005a	50		 push	 eax
  0005b	6a 00		 push	 0
  0005d	6a 01		 push	 1
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00065	e8 00 00 00 00	 call	 ?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z ; XACT::CEngine::CreateSoundSourceInternal
  0006a	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L31907:

; 182  :             
; 183  :         }
; 184  :         
; 185  :         if (SUCCEEDED(hr)){

  0006d	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00071	7c 20		 jl	 SHORT $L31909

; 186  :             
; 187  :             pSource->AddRef();

  00073	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	8b 45 f8	 mov	 eax, DWORD PTR _pSource$[ebp]
  0007b	50		 push	 eax
  0007c	ff 52 04	 call	 DWORD PTR [edx+4]

; 188  :             pSource->SetWaveBankOwner(this);

  0007f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	51		 push	 ecx
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00086	e8 00 00 00 00	 call	 ?SetWaveBankOwner@CSoundSource@XACT@@QAEXPAVCWaveBank@2@@Z ; XACT::CSoundSource::SetWaveBankOwner

; 189  :             *ppSource = pSource;

  0008b	8b 55 08	 mov	 edx, DWORD PTR _ppSource$[ebp]
  0008e	8b 45 f8	 mov	 eax, DWORD PTR _pSource$[ebp]
  00091	89 02		 mov	 DWORD PTR [edx], eax
$L31909:

; 190  :             
; 191  :         }
; 192  :         
; 193  :         if (SUCCEEDED(hr) && pSource->IsPlaying()) {

  00093	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00097	7c 47		 jl	 SHORT $L31911
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0009c	e8 00 00 00 00	 call	 ?IsPlaying@CSoundSource@XACT@@QAEHXZ ; XACT::CSoundSource::IsPlaying
  000a1	85 c0		 test	 eax, eax
  000a3	74 3b		 je	 SHORT $L31911

; 194  : 
; 195  :             DPF_WARNING("Voice form available list was still playing in hw, attempting re-alloc of new one");

  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@FAPONNOA@CWaveBank?3?3AllocateSoundSource?$AA@
  000af	68 c3 00 00 00	 push	 195			; 000000c3H
  000b4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  000b9	6a 03		 push	 3
  000bb	6a 09		 push	 9
  000bd	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000c2	83 c4 18	 add	 esp, 24			; 00000018H
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FC@LHDKKKEI@Voice?5form?5available?5list?5was?5st@
  000ca	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000cf	83 c4 04	 add	 esp, 4

; 196  : 
; 197  :             //
; 198  :             // hmm the free voice we got is still playing...
; 199  :             // we d rather allocate a new one and leave this one alone for now
; 200  :             //
; 201  :             
; 202  :             pSource->Release();

  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  000d5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d7	8b 45 f8	 mov	 eax, DWORD PTR _pSource$[ebp]
  000da	50		 push	 eax
  000db	ff 52 08	 call	 DWORD PTR [edx+8]

; 203  :             
; 204  :         } else {

  000de	eb 02		 jmp	 SHORT $L31914
$L31911:

; 205  :             break;

  000e0	eb 05		 jmp	 SHORT $L31900
$L31914:

; 206  :         }
; 207  : 
; 208  :     }

  000e2	e9 31 ff ff ff	 jmp	 $L31899
$L31900:

; 209  : 
; 210  :     DPF_LEAVE_HRESULT(hr);
; 211  :     return hr;

  000e7	8b 4d f4	 mov	 ecx, DWORD PTR _hr$[ebp]
  000ea	89 4d ec	 mov	 DWORD PTR $T32140[ebp], ecx
  000ed	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000f0	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000f5	8b 45 ec	 mov	 eax, DWORD PTR $T32140[ebp]

; 212  : 
; 213  : }

  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
?AllocateSoundSource@CWaveBank@XACT@@QAEJPAPAVCSoundSource@2@@Z ENDP ; XACT::CWaveBank::AllocateSoundSource
XACTENG	ENDS
PUBLIC	?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z	; IDirectSoundBuffer::GetStatus
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ?IsPlaying@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT
_this$ = -8
_dwStatus$ = -4
?IsPlaying@CSoundSource@XACT@@QAEHXZ PROC NEAR		; XACT::CSoundSource::IsPlaying, COMDAT
; _this$ = ecx

; 608  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 609  : 
; 610  :         DWORD dwStatus;
; 611  : 
; 612  :         if (m_HwVoice.pBuffer) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	74 18		 je	 SHORT $L31182

; 613  :             
; 614  :             m_HwVoice.pBuffer->GetStatus(&dwStatus);

  00012	8d 4d fc	 lea	 ecx, DWORD PTR _dwStatus$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ; IDirectSoundBuffer::GetStatus

; 615  :             return (dwStatus & DSBSTATUS_PLAYING);

  00022	8b 45 fc	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00025	83 e0 01	 and	 eax, 1
  00028	eb 1e		 jmp	 SHORT $L31180
$L31182:

; 616  : 
; 617  :         } else {
; 618  : 
; 619  :             m_HwVoice.pStream->GetStatus(&dwStatus);

  0002a	8d 4d fc	 lea	 ecx, DWORD PTR _dwStatus$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	52		 push	 edx
  0003d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 620  :             return (dwStatus & (DSSTREAMSTATUS_PLAYING | DSSTREAMSTATUS_PAUSED ));

  00040	8b 45 fc	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00043	25 00 00 03 00	 and	 eax, 196608		; 00030000H
$L31180:

; 621  :         }
; 622  : 
; 623  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?IsPlaying@CSoundSource@XACT@@QAEHXZ ENDP		; XACT::CSoundSource::IsPlaying
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_GetStatus@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z PROC NEAR	; IDirectSoundBuffer::GetStatus, COMDAT

; 2092 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2093 :         return IDirectSoundBuffer_GetStatus(this, pdwStatus);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_GetStatus@8

; 2094 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ENDP		; IDirectSoundBuffer::GetStatus
XACTENG	ENDS
PUBLIC	??_C@_07HPANBCJA@pSource?$AA@			; `string'
PUBLIC	??_C@_0CC@IKOGKKIB@pSource?9?$DOm_pWaveBankOwner?5?$DN?$DN?5thi@ ; `string'
PUBLIC	?FreeSoundSource@CWaveBank@XACT@@QAEXPAVCSoundSource@2@@Z ; XACT::CWaveBank::FreeSoundSource
PUBLIC	?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z	; XACT::InsertTailList
;	COMDAT ??_C@_07HPANBCJA@pSource?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\wavebank.cpp
XACTENG_RD	SEGMENT
??_C@_07HPANBCJA@pSource?$AA@ DB 'pSource', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CC@IKOGKKIB@pSource?9?$DOm_pWaveBankOwner?5?$DN?$DN?5thi@
XACTENG_RD	SEGMENT
??_C@_0CC@IKOGKKIB@pSource?9?$DOm_pWaveBankOwner?5?$DN?$DN?5thi@ DB 'pSou'
	DB	'rce->m_pWaveBankOwner == this', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?FreeSoundSource@CWaveBank@XACT@@QAEXPAVCSoundSource@2@@Z
XACTENG	SEGMENT
_this$ = -8
___AutoLock$ = -4
_pSource$ = 8
?FreeSoundSource@CWaveBank@XACT@@QAEXPAVCSoundSource@2@@Z PROC NEAR ; XACT::CWaveBank::FreeSoundSource, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 
; 221  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 222  : 
; 223  :     ASSERT(pSource);

  00011	68 df 00 00 00	 push	 223			; 000000dfH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HPANBCJA@pSource?$AA@
  00020	33 c0		 xor	 eax, eax
  00022	83 7d 08 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00026	0f 94 c0	 sete	 al
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002f	83 c4 10	 add	 esp, 16			; 00000010H

; 224  :     ASSERT(pSource->m_pWaveBankOwner == this);

  00032	68 e0 00 00 00	 push	 224			; 000000e0H
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@IKOGKKIB@pSource?9?$DOm_pWaveBankOwner?5?$DN?$DN?5thi@
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00044	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00047	33 c0		 xor	 eax, eax
  00049	3b 55 f8	 cmp	 edx, DWORD PTR _this$[ebp]
  0004c	0f 95 c0	 setne	 al
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 225  : 
; 226  :     InsertTailList(&m_lstAvailableSources,&pSource->m_ListEntry);

  00058	8b 4d 08	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0005b	83 c1 08	 add	 ecx, 8
  0005e	51		 push	 ecx
  0005f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00062	83 c2 18	 add	 edx, 24			; 00000018H
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 227  : 
; 228  : }

  0006b	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0006e	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?FreeSoundSource@CWaveBank@XACT@@QAEXPAVCSoundSource@2@@Z ENDP ; XACT::CWaveBank::FreeSoundSource
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; XACT::InsertTailList, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 73		 push	 115			; 00000073H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 116  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 74		 push	 116			; 00000074H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 117  : 
; 118  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 119  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 120  :     
; 121  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 122  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 123  : 
; 124  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7c		 push	 124			; 0000007cH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 125  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; XACT::InsertTailList
XACTENG	ENDS
PUBLIC	?AddCueToList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z ; XACT::CWaveBank::AddCueToList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\wavebank.cpp
;	COMDAT ?AddCueToList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -8
___AutoLock$ = -4
_pEntry$ = 8
?AddCueToList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z PROC NEAR ; XACT::CWaveBank::AddCueToList, COMDAT
; _this$ = ecx

; 236  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 237  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 238  :     InsertTailList(&m_lstCues,
; 239  :         &pEntry->ListEntry);

  00011	8b 45 08	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 20	 add	 ecx, 32			; 00000020H
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 240  : 
; 241  : }

  00024	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00027	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?AddCueToList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z ENDP ; XACT::CWaveBank::AddCueToList
XACTENG	ENDS
PUBLIC	?RemoveCueFromList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z ; XACT::CWaveBank::RemoveCueFromList
; Function compile flags: /Odt
;	COMDAT ?RemoveCueFromList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z
XACTENG	SEGMENT
_this$ = -8
___AutoLock$ = -4
_pEntry$ = 8
?RemoveCueFromList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z PROC NEAR ; XACT::CWaveBank::RemoveCueFromList, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 248  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 249  :     RemoveEntryList(&pEntry->ListEntry);

  00011	8b 45 08	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?RemoveEntryList@XACT@@YGPAU_LIST_ENTRY@@PAU2@@Z ; XACT::RemoveEntryList

; 250  : }

  0001d	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00020	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?RemoveCueFromList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z ENDP ; XACT::CWaveBank::RemoveCueFromList
XACTENG	ENDS
PUBLIC	??_C@_0BH@JKCKNDLK@CWaveBank?3?3StopAllCues?$AA@ ; `string'
PUBLIC	??_C@_0IJ@HLDCMPCA@You?5are?5un?9registering?5wavebank?5@ ; `string'
PUBLIC	?GetFriendlyName@CSoundCue@XACT@@QAEPBDXZ	; XACT::CSoundCue::GetFriendlyName
PUBLIC	?StopAllCues@CWaveBank@XACT@@QAEXXZ		; XACT::CWaveBank::StopAllCues
EXTRN	?Stop@CSoundCue@XACT@@QAGJK@Z:NEAR		; XACT::CSoundCue::Stop
;	COMDAT ??_C@_0BH@JKCKNDLK@CWaveBank?3?3StopAllCues?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@JKCKNDLK@CWaveBank?3?3StopAllCues?$AA@ DB 'CWaveBank::StopAllCu'
	DB	'es', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0IJ@HLDCMPCA@You?5are?5un?9registering?5wavebank?5@
XACTENG_RD	SEGMENT
??_C@_0IJ@HLDCMPCA@You?5are?5un?9registering?5wavebank?5@ DB 'You are un-'
	DB	'registering wavebank 0x%x still referenced by cue %s.', 0aH, ' '
	DB	'       This can cause breakup and glitching. Cue %x is no lon'
	DB	'ger valid', 00H				; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?StopAllCues@CWaveBank@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -20
___AutoLock$ = -16
_pCue$ = -12
_pEntry$ = -8
_pCueEntry$ = -4
?StopAllCues@CWaveBank@XACT@@QAEXXZ PROC NEAR		; XACT::CWaveBank::StopAllCues, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 257  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 258  :     CSoundCue *pCue = NULL;

  00011	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pCue$[ebp], 0

; 259  :     PWAVEBANK_CUE_CONTEXT pCueEntry;
; 260  : 
; 261  :     //
; 262  :     // stop all cues associated with this wavebank
; 263  :     //
; 264  : 
; 265  :     PLIST_ENTRY pEntry = m_lstCues.Flink;

  00018	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001e	89 4d f8	 mov	 DWORD PTR _pEntry$[ebp], ecx
$L31941:

; 266  :     while (pEntry != &m_lstCues){

  00021	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00024	83 c2 20	 add	 edx, 32			; 00000020H
  00027	39 55 f8	 cmp	 DWORD PTR _pEntry$[ebp], edx
  0002a	74 67		 je	 SHORT $L31942

; 267  : 
; 268  :         pCueEntry = CONTAINING_RECORD(pEntry,WAVEBANK_CUE_CONTEXT,ListEntry);

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  0002f	83 e8 04	 sub	 eax, 4
  00032	89 45 fc	 mov	 DWORD PTR _pCueEntry$[ebp], eax

; 269  :         pCue = pCueEntry->pSoundCue;

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _pCueEntry$[ebp]
  00038	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003a	89 55 f4	 mov	 DWORD PTR _pCue$[ebp], edx

; 270  :         pEntry = pEntry->Flink;

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	89 4d f8	 mov	 DWORD PTR _pEntry$[ebp], ecx

; 271  : 
; 272  :         DPF_WARNING("You are un-registering wavebank 0x%x still referenced by cue %s.\n"\
; 273  :             "        This can cause breakup and glitching. Cue %x is no longer valid",
; 274  :             this,
; 275  :             pCue->GetFriendlyName(),
; 276  :             pCue);

  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0004a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JKCKNDLK@CWaveBank?3?3StopAllCues?$AA@
  0004f	68 10 01 00 00	 push	 272			; 00000110H
  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EB@GJGICHBD@c?3?2xbox?2private?2windows?2directx?2@
  00059	6a 03		 push	 3
  0005b	6a 09		 push	 9
  0005d	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00062	83 c4 18	 add	 esp, 24			; 00000018H
  00065	8b 55 f4	 mov	 edx, DWORD PTR _pCue$[ebp]
  00068	52		 push	 edx
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _pCue$[ebp]
  0006c	e8 00 00 00 00	 call	 ?GetFriendlyName@CSoundCue@XACT@@QAEPBDXZ ; XACT::CSoundCue::GetFriendlyName
  00071	50		 push	 eax
  00072	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0IJ@HLDCMPCA@You?5are?5un?9registering?5wavebank?5@
  0007b	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00080	83 c4 10	 add	 esp, 16			; 00000010H

; 277  : 
; 278  :         pCue->Stop(XACT_FLAG_SOUNDCUE_SYNCHRONOUS | XACT_FLAG_SOUNDCUE_AUTORELEASE);

  00083	68 01 00 00 10	 push	 268435457		; 10000001H
  00088	8b 4d f4	 mov	 ecx, DWORD PTR _pCue$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ?Stop@CSoundCue@XACT@@QAGJK@Z ; XACT::CSoundCue::Stop

; 279  : 
; 280  :     }

  00091	eb 8e		 jmp	 SHORT $L31941
$L31942:

; 281  : 
; 282  : }

  00093	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00096	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
?StopAllCues@CWaveBank@XACT@@QAEXXZ ENDP		; XACT::CWaveBank::StopAllCues
XACTENG	ENDS
PUBLIC	?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z	; XACT::CSoundBank::GetCueFriendlyName
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ?GetFriendlyName@CSoundCue@XACT@@QAEPBDXZ
XACTENG	SEGMENT
_this$ = -4
?GetFriendlyName@CSoundCue@XACT@@QAEPBDXZ PROC NEAR	; XACT::CSoundCue::GetFriendlyName, COMDAT
; _this$ = ecx

; 508  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 509  :         return m_pSoundBank->GetCueFriendlyName(m_dwCueIndex);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0000d	51		 push	 ecx
  0000e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00011	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00014	e8 00 00 00 00	 call	 ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z ; XACT::CSoundBank::GetCueFriendlyName

; 510  :     }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?GetFriendlyName@CSoundCue@XACT@@QAEPBDXZ ENDP		; XACT::CSoundCue::GetFriendlyName
XACTENG	ENDS
PUBLIC	?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ; XACT::CSoundBank::GetCueTable
; Function compile flags: /Odt
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT
_this$ = -8
_pCueTable$ = -4
_dwCueIndex$ = 8
?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z PROC NEAR ; XACT::CSoundBank::GetCueFriendlyName, COMDAT
; _this$ = ecx

; 442  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 443  :         PXACT_SOUNDBANK_CUE_ENTRY pCueTable = GetCueTable();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ; XACT::CSoundBank::GetCueTable
  00011	89 45 fc	 mov	 DWORD PTR _pCueTable$[ebp], eax

; 444  :         return pCueTable[dwCueIndex].szFriendlyName;

  00014	8b 45 08	 mov	 eax, DWORD PTR _dwCueIndex$[ebp]
  00017	6b c0 18	 imul	 eax, 24			; 00000018H
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _pCueTable$[ebp]
  0001d	8d 44 01 08	 lea	 eax, DWORD PTR [ecx+eax+8]

; 445  :     }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z ENDP	; XACT::CSoundBank::GetCueFriendlyName
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ PROC NEAR ; XACT::CSoundBank::GetCueTable, COMDAT
; _this$ = ecx

; 437  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 438  :         return (PXACT_SOUNDBANK_CUE_ENTRY) ((PUCHAR)m_pDataBuffer+sizeof(XACT_SOUNDBANK_FILE_HEADER));       

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	83 c0 24	 add	 eax, 36			; 00000024H

; 439  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ENDP ; XACT::CSoundBank::GetCueTable
XACTENG	ENDS
END
