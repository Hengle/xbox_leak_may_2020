; Listing generated by Microsoft (R) Optimizing Compiler Version 13.00.9254.1 

	TITLE	.\cue.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
XACTENG_URW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_URW	ENDS
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FEMHCPBP@Invalid?5soundbank?5signature?5in?5h@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CL@DBJIOONK@Invalid?5version?5?$CI?$CFd?$CJ?5in?5header?4?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@BBNFMNOE@m_pSoundBank?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0L@HCBGEFNH@pSoundBank?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BG@EOHDLHJN@CSoundCue?3?3Initialize?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DD@BLAOFBOE@Wavebank?5?$CI?$CFs?$CJ?5not?5registered?5yet@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@FFDNKENF@dwOldState?5?$CB?$DN?5CUE_STATE_PLAYING?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0ED@LEAGLJCG@pTrack?9?$DOpContentEntry?9?$DOwEventEnt@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CK@DNCBGNLO@dwTrackIndex?5?$DM?5m_pSoundEntry?9?$DOwT@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_06KCBOCDPD@pEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@KFACCGJP@CSoundCue?3?3SubmitEvent?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CI@OOEDLAHP@Could?5not?5allocate?5voice?5for?5Pla@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@JIKBNEFO@pTrack?9?$DOwLoopCount?5?$DN?$DN?50?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@FEIIDANN@Starting?5to?5play?5cue?50x?$CFx?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@JPJHEHCO@Cue?50x?$CFx?5not?5initialized?5yet?$CB?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@OBFKINOC@Cue?50x?$CFx?5Already?5Playing?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BC@FNGJEHGK@Stopping?5cue?50x?$CFx?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@CFIAAKAB@Cue?50x?$CFx?5not?5playing?5yet?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@PPOBJNMI@Cue?50x?$CFx?5Already?5stopped?$AA@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DA@CFCCCPC@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CP@GHJBDHLG@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
XACTENG_RW	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RW	ENDS
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _IsEqualGUID@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _==@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_AddRef@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_Release@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _Direct3D_GetAdapterCount@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_BeginScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_EndScene@0
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_GetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetRenderState@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DDevice_SetTextureStageState@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DResource_MoveResourceMemory@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DTexture_UnlockRect@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolumeTexture_UnlockBox@8
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DCubeTexture_UnlockRect@12
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVertexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Lock@20
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DIndexBuffer_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPalette_Unlock@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DSurface_UnlockRect@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DVolume_UnlockBox@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _sqrtf@4
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?MoveEntryTailList@XACT@@YGPAU_LIST_ENTRY@@PAU2@0@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_U@YAPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_V@YAXPAX@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetCueFriendlyName@CSoundBank@XACT@@AAEPBDK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsPlaying@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetWaveBankEntry@CWaveBank@XACT@@QAEPAU_WAVEBANKENTRY@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??0CSoundCue@XACT@@QAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??_GCSoundCue@XACT@@UAEPAXI@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ??1CSoundCue@XACT@@UAE@XZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?AddRef@CSoundCue@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Release@CSoundCue@XACT@@UAGKXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Initialize@CSoundCue@XACT@@QAEJPAVCSoundBank@2@KPAVCSoundSource@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Play@CSoundCue@XACT@@QAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?Stop@CSoundCue@XACT@@QAGJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetWaveBank@CSoundCue@XACT@@QAEXKPAPAVCWaveBank@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?ScheduleTrackEvents@CSoundCue@XACT@@IAEJK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?ScheduleRuntimeEvent@CSoundCue@XACT@@IAEJPAUXACT_TRACK_EVENT@@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?SubmitEvent@CSoundCue@XACT@@AAEJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundCue@XACT@@IAEHXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?DoWork@CSoundCue@XACT@@QAEXXZ
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT ?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z
XACTENG	SEGMENT PARA USE32 PUBLIC ''
XACTENG	ENDS
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT ??_7CSoundCue@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@XACT@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT DWORD USE32 PUBLIC ''
XACTENG_RD	ENDS
FLAT	GROUP _DATA, CONST, _BSS, XACTENG_RW
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_D3DPRIMITIVETOVERTEXCOUNT
PUBLIC	_D3DSIMPLERENDERSTATEENCODE
PUBLIC	_D3DTEXTUREDIRECTENCODE
PUBLIC	_D3DDIRTYFROMRENDERSTATE
PUBLIC	_D3DDIRTYFROMTEXTURESTATE
;	COMDAT _D3DPRIMITIVETOVERTEXCOUNT
XACTENG_RD	SEGMENT
_D3DPRIMITIVETOVERTEXCOUNT DD 00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03H
	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	02H
	DD	04H
	DD	00H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DSIMPLERENDERSTATEENCODE
XACTENG_RD	SEGMENT
_D3DSIMPLERENDERSTATEENCODE DD 040260H
	DD	040264H
	DD	040268H
	DD	04026cH
	DD	040270H
	DD	040274H
	DD	040278H
	DD	04027cH
	DD	040288H
	DD	04028cH
	DD	040a60H
	DD	040a64H
	DD	040a68H
	DD	040a6cH
	DD	040a70H
	DD	040a74H
	DD	040a78H
	DD	040a7cH
	DD	040a80H
	DD	040a84H
	DD	040a88H
	DD	040a8cH
	DD	040a90H
	DD	040a94H
	DD	040a98H
	DD	040a9cH
	DD	040aa0H
	DD	040aa4H
	DD	040aa8H
	DD	040aacH
	DD	040ab0H
	DD	040ab4H
	DD	040ab8H
	DD	040abcH
	DD	040ac0H
	DD	040ac4H
	DD	040ac8H
	DD	040accH
	DD	040ad0H
	DD	040ad4H
	DD	040ad8H
	DD	040adcH
	DD	0417f8H
	DD	041e20H
	DD	041e24H
	DD	041e40H
	DD	041e44H
	DD	041e48H
	DD	041e4cH
	DD	041e50H
	DD	041e54H
	DD	041e58H
	DD	041e5cH
	DD	041e60H
	DD	041d90H
	DD	041e74H
	DD	041e78H
	DD	040354H
	DD	04033cH
	DD	040304H
	DD	040300H
	DD	040340H
	DD	040344H
	DD	040348H
	DD	04035cH
	DD	040310H
	DD	04037cH
	DD	040358H
	DD	040374H
	DD	040378H
	DD	040364H
	DD	040368H
	DD	04036cH
	DD	040360H
	DD	040350H
	DD	04034cH
	DD	0409f8H
	DD	040384H
	DD	040388H
	DD	040330H
	DD	040334H
	DD	040338H
XACTENG_RD	ENDS
;	COMDAT _D3DTEXTUREDIRECTENCODE
XACTENG_RD	SEGMENT
_D3DTEXTUREDIRECTENCODE DD 081b00H
	DD	081b40H
	DD	081b80H
	DD	081bc0H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMRENDERSTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMRENDERSTATE DD 02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	02000H
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	01200H
	DD	03000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	01000H
	DD	0100H
	DD	0100H
	DD	0900H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
XACTENG_RD	ENDS
;	COMDAT _D3DDIRTYFROMTEXTURESTATE
XACTENG_RD	SEGMENT
_D3DDIRTYFROMTEXTURESTATE DD 0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0fH
	DD	0480fH
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0800H
	DD	0400H
XACTENG_RD	ENDS
PUBLIC	??0CSoundCue@XACT@@QAE@XZ			; XACT::CSoundCue::CSoundCue
PUBLIC	?AddRef@CSoundCue@XACT@@UAGKXZ			; XACT::CSoundCue::AddRef
PUBLIC	?Release@CSoundCue@XACT@@UAGKXZ			; XACT::CSoundCue::Release
PUBLIC	??_7CSoundCue@XACT@@6B@				; XACT::CSoundCue::`vftable'
PUBLIC	??_GCSoundCue@XACT@@UAEPAXI@Z			; XACT::CSoundCue::`scalar deleting destructor'
PUBLIC	??0CRefCount@XACT@@QAE@K@Z			; XACT::CRefCount::CRefCount
EXTRN	??_ECSoundCue@XACT@@UAEPAXI@Z:NEAR		; XACT::CSoundCue::`vector deleting destructor'
;	COMDAT ??_7CSoundCue@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\engine\cue.cpp
CONST	SEGMENT
??_7CSoundCue@XACT@@6B@ DD FLAT:??_ECSoundCue@XACT@@UAEPAXI@Z ; XACT::CSoundCue::`vftable'
	DD	FLAT:?AddRef@CSoundCue@XACT@@UAGKXZ
	DD	FLAT:?Release@CSoundCue@XACT@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CSoundCue@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CSoundCue@XACT@@QAE@XZ PROC NEAR			; XACT::CSoundCue::CSoundCue, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@XACT@@QAE@K@Z ; XACT::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSoundCue@XACT@@6B@

; 28   :     DPF_ENTER();
; 29   : 
; 30   :     m_dwCueIndex = -1;

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	c7 41 24 ff ff
	ff ff		 mov	 DWORD PTR [ecx+36], -1

; 31   :     InitializeListHead(&m_SeqListEntry);

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	83 c2 18	 add	 edx, 24			; 00000018H
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00039	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 32   :     InitializeListHead(&m_ListEntry);

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 10	 add	 ecx, 16			; 00000010H
  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00051	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 33   : 
; 34   :     m_dwState = CUE_STATE_CREATED;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	c7 80 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+236], 0

; 35   : 
; 36   :     DPF_LEAVE_VOID();
; 37   : }

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
??0CSoundCue@XACT@@QAE@XZ ENDP				; XACT::CSoundCue::CSoundCue
XACTENG	ENDS
PUBLIC	?AddRef@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::AddRef
PUBLIC	?Release@CRefCount@XACT@@UAGKXZ			; XACT::CRefCount::Release
PUBLIC	??_7CRefCount@XACT@@6B@				; XACT::CRefCount::`vftable'
PUBLIC	??_GCRefCount@XACT@@UAEPAXI@Z			; XACT::CRefCount::`scalar deleting destructor'
EXTRN	??_ECRefCount@XACT@@UAEPAXI@Z:NEAR		; XACT::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@XACT@@6B@
; File c:\xbox\private\windows\directx\xact\runtime\common\refcount.h
CONST	SEGMENT
??_7CRefCount@XACT@@6B@ DD FLAT:??_ECRefCount@XACT@@UAEPAXI@Z ; XACT::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@XACT@@UAGKXZ
	DD	FLAT:?Release@CRefCount@XACT@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@XACT@@QAE@K@Z
XACTENG	SEGMENT
_this$ = -4
_dwInitialRefCount$ = 8
??0CRefCount@XACT@@QAE@K@Z PROC NEAR			; XACT::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _dwInitialRefCount$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 36   : }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@XACT@@QAE@K@Z ENDP				; XACT::CRefCount::CRefCount
XACTENG	ENDS
PUBLIC	??1CRefCount@XACT@@UAE@XZ			; XACT::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCRefCount@XACT@@UAEPAXI@Z PROC NEAR			; XACT::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L29682
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L29682:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@XACT@@UAEPAXI@Z ENDP			; XACT::CRefCount::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@		; `string'
EXTRN	?DwDbgAssert@XACT@@YAXHPBD0I@Z:NEAR		; XACT::DwDbgAssert
;	COMDAT ??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\refcount.h', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??1CRefCount@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CRefCount@XACT@@UAE@XZ PROC NEAR			; XACT::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@XACT@@6B@

; 40   :     ASSERT(!m_dwRefCount);

  00010	6a 28		 push	 40			; 00000028H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GGBLDHEI@?$CBm_dwRefCount?$AA@
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 41   : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@XACT@@UAE@XZ ENDP				; XACT::CRefCount::~CRefCount
XACTENG	ENDS
PUBLIC	??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
XACTENG_RD	SEGMENT
??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0'
	DB	'UL', 00H					; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?AddRef@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
_this$ = 8
?AddRef@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::AddRef, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   :     ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2d		 push	 45			; 0000002dH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@DAEOBIBM@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 46   :     return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 47   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::AddRef
XACTENG	ENDS
PUBLIC	??_C@_0N@OILPJBKD@m_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@OILPJBKD@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Release@CRefCount@XACT@@UAGKXZ
XACTENG	SEGMENT
tv84 = -12
$T32368 = -8
$T32367 = -4
_this$ = 8
?Release@CRefCount@XACT@@UAGKXZ PROC NEAR		; XACT::CRefCount::Release, COMDAT

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 51   :     ASSERT(m_dwRefCount);

  00006	6a 33		 push	 51			; 00000033H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@FDDAALAG@c?3?2xbox?2private?2windows?2directx?2@
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@OILPJBKD@m_dwRefCount?$AA@
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 52   : 
; 53   :     if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L29699

; 54   :     {
; 55   :         if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L29699

; 56   :         {
; 57   :             delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T32368[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T32368[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T32367[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T32367[ebp], 0
  00058	74 11		 je	 SHORT $L32369
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T32367[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T32367[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
  00069	eb 07		 jmp	 SHORT $L32370
$L32369:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$L32370:

; 58   :             return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L29697
$L29699:

; 59   :         }
; 60   :     }
; 61   : 
; 62   :     return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L29697:

; 63   : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@XACT@@UAGKXZ ENDP			; XACT::CRefCount::Release
XACTENG	ENDS
EXTRN	_XactMemFree@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??3@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 99   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  :     using namespace XACT;
; 101  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 102  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
XACTENG	ENDS
PUBLIC	??1CSoundCue@XACT@@UAE@XZ			; XACT::CSoundCue::~CSoundCue
; Function compile flags: /Odt
;	COMDAT ??_GCSoundCue@XACT@@UAEPAXI@Z
XACTENG	SEGMENT
_this$ = -4
___flags$ = 8
??_GCSoundCue@XACT@@UAEPAXI@Z PROC NEAR			; XACT::CSoundCue::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CSoundCue@XACT@@UAE@XZ ; XACT::CSoundCue::~CSoundCue
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L31838
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L31838:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCSoundCue@XACT@@UAEPAXI@Z ENDP			; XACT::CSoundCue::`scalar deleting destructor'
XACTENG	ENDS
PUBLIC	??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@BBNFMNOE@m_pSoundBank?$AA@		; `string'
PUBLIC	?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ ; XACT::CSoundCue::GetWaveBankTable
PUBLIC	??0CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::CAutoLock
PUBLIC	??1CAutoLock@XACT@@QAE@XZ			; XACT::CAutoLock::~CAutoLock
EXTRN	_g_pEngine:DWORD
EXTRN	?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z:NEAR ; XACT::CEngine::RemoveCueFromSequencerList
EXTRN	?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z:NEAR ; XACT::CEngine::FreeEventsAtOrAfter
EXTRN	?RemoveFromList@CSoundBank@XACT@@AAEXPAVCSoundCue@2@@Z:NEAR ; XACT::CSoundBank::RemoveFromList
EXTRN	?RemoveCueFromList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z:NEAR ; XACT::CWaveBank::RemoveCueFromList
;	COMDAT ??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\engine\cue.cpp
XACTENG_RD	SEGMENT
??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\engine\cue.cpp', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0N@BBNFMNOE@m_pSoundBank?$AA@
XACTENG_RD	SEGMENT
??_C@_0N@BBNFMNOE@m_pSoundBank?$AA@ DB 'm_pSoundBank', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ??1CSoundCue@XACT@@UAE@XZ
XACTENG	SEGMENT
_this$ = -40
$T32381 = -36
$T32380 = -32
_i$31858 = -28
_pWaveBank$31853 = -24
_i$31849 = -20
___AutoLock$ = -16
_pWaveBankEntry$ = -12
??1CSoundCue@XACT@@UAE@XZ PROC NEAR			; XACT::CSoundCue::~CSoundCue, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CSoundCue@XACT@@6B@

; 47   :     DPF_ENTER();
; 48   :     PLIST_ENTRY pEntry;
; 49   :     CSoundCue *pCue;
; 50   : 
; 51   :     ENTER_EXTERNAL_METHOD();    

  00012	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00015	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 52   : 
; 53   :     //
; 54   :     // remove from sequencer list
; 55   :     //
; 56   :     
; 57   :     if (!IsListEmpty(&m_SeqListEntry)){

  0001a	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 c1 18	 add	 ecx, 24			; 00000018H
  00020	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00023	39 4a 18	 cmp	 DWORD PTR [edx+24], ecx
  00026	74 0f		 je	 SHORT $L31846

; 58   :         g_pEngine->RemoveCueFromSequencerList(this);

  00028	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	50		 push	 eax
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00032	e8 00 00 00 00	 call	 ?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z ; XACT::CEngine::RemoveCueFromSequencerList
$L31846:

; 59   :     }
; 60   : 
; 61   :     //
; 62   :     // remove us from the soundbank linked list
; 63   :     //
; 64   :     
; 65   :     m_pSoundBank->RemoveFromList(this);

  00037	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00041	e8 00 00 00 00	 call	 ?RemoveFromList@CSoundBank@XACT@@AAEXPAVCSoundCue@2@@Z ; XACT::CSoundBank::RemoveFromList

; 66   :    
; 67   :     //
; 68   :     // release any wavebank references
; 69   :     //
; 70   : 
; 71   :     PXACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY pWaveBankEntry = GetWaveBankTable();

  00046	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ ; XACT::CSoundCue::GetWaveBankTable
  0004e	89 45 f4	 mov	 DWORD PTR _pWaveBankEntry$[ebp], eax

; 72   : 
; 73   :     if (m_paWaveBankEntries) {

  00051	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00058	74 7c		 je	 SHORT $L31848

; 74   : 
; 75   :         for (DWORD i=0;i<m_pSoundEntry->wWaveBankCount;i++) {

  0005a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$31849[ebp], 0
  00061	eb 09		 jmp	 SHORT $L31850
$L31851:
  00063	8b 4d ec	 mov	 ecx, DWORD PTR _i$31849[ebp]
  00066	83 c1 01	 add	 ecx, 1
  00069	89 4d ec	 mov	 DWORD PTR _i$31849[ebp], ecx
$L31850:
  0006c	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00072	0f b7 48 18	 movzx	 ecx, WORD PTR [eax+24]
  00076	39 4d ec	 cmp	 DWORD PTR _i$31849[ebp], ecx
  00079	73 33		 jae	 SHORT $L31852

; 76   :             
; 77   :             CWaveBank *pWaveBank = (CWaveBank *)pWaveBankEntry[i].dwDataOffset;

  0007b	8b 55 ec	 mov	 edx, DWORD PTR _i$31849[ebp]
  0007e	6b d2 14	 imul	 edx, 20			; 00000014H
  00081	8b 45 f4	 mov	 eax, DWORD PTR _pWaveBankEntry$[ebp]
  00084	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00088	89 4d e8	 mov	 DWORD PTR _pWaveBank$31853[ebp], ecx

; 78   :             pWaveBank->RemoveCueFromList(&m_paWaveBankEntries[i]);

  0008b	8b 55 ec	 mov	 edx, DWORD PTR _i$31849[ebp]
  0008e	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00091	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00094	03 50 20	 add	 edx, DWORD PTR [eax+32]
  00097	52		 push	 edx
  00098	8b 4d e8	 mov	 ecx, DWORD PTR _pWaveBank$31853[ebp]
  0009b	e8 00 00 00 00	 call	 ?RemoveCueFromList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z ; XACT::CWaveBank::RemoveCueFromList

; 79   :             pWaveBank->Release();

  000a0	8b 4d e8	 mov	 ecx, DWORD PTR _pWaveBank$31853[ebp]
  000a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a5	8b 45 e8	 mov	 eax, DWORD PTR _pWaveBank$31853[ebp]
  000a8	50		 push	 eax
  000a9	ff 52 08	 call	 DWORD PTR [edx+8]

; 80   :             
; 81   :         }

  000ac	eb b5		 jmp	 SHORT $L31851
$L31852:

; 82   : 
; 83   :         DELETE_A(m_paWaveBankEntries);

  000ae	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  000b5	74 1f		 je	 SHORT $L31848
  000b7	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000bd	89 45 e0	 mov	 DWORD PTR $T32380[ebp], eax
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR $T32380[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000c9	83 c4 04	 add	 esp, 4
  000cc	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
$L31848:

; 84   : 
; 85   :     }
; 86   : 
; 87   :     if (m_paTracks) {

  000d6	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [eax+232], 0
  000e0	0f 84 b2 00 00
	00		 je	 $L31857

; 88   :         
; 89   :         //
; 90   :         // go thorugh each track and free the voices we had allocated
; 91   :         //
; 92   :         
; 93   :         for (DWORD i=0;i<m_pSoundEntry->wTrackCount;i++) {

  000e6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$31858[ebp], 0
  000ed	eb 09		 jmp	 SHORT $L31859
$L31860:
  000ef	8b 4d e4	 mov	 ecx, DWORD PTR _i$31858[ebp]
  000f2	83 c1 01	 add	 ecx, 1
  000f5	89 4d e4	 mov	 DWORD PTR _i$31858[ebp], ecx
$L31859:
  000f8	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000fb	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000fe	0f b7 48 16	 movzx	 ecx, WORD PTR [eax+22]
  00102	39 4d e4	 cmp	 DWORD PTR _i$31858[ebp], ecx
  00105	73 60		 jae	 SHORT $L31861

; 94   :             
; 95   :             g_pEngine->FreeEventsAtOrAfter(&m_paTracks[i],0);

  00107	6a 00		 push	 0
  00109	6a 00		 push	 0
  0010b	8b 55 e4	 mov	 edx, DWORD PTR _i$31858[ebp]
  0010e	6b d2 30	 imul	 edx, 48			; 00000030H
  00111	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00114	03 90 e8 00 00
	00		 add	 edx, DWORD PTR [eax+232]
  0011a	52		 push	 edx
  0011b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00121	e8 00 00 00 00	 call	 ?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z ; XACT::CEngine::FreeEventsAtOrAfter

; 96   :             
; 97   :             if (m_paTracks[i].pSoundSource) {

  00126	8b 4d e4	 mov	 ecx, DWORD PTR _i$31858[ebp]
  00129	6b c9 30	 imul	 ecx, 48			; 00000030H
  0012c	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0012f	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00135	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00139	74 2a		 je	 SHORT $L31862

; 98   :                 m_paTracks[i].pSoundSource->Release();        

  0013b	8b 4d e4	 mov	 ecx, DWORD PTR _i$31858[ebp]
  0013e	6b c9 30	 imul	 ecx, 48			; 00000030H
  00141	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00144	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0014a	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  0014d	8b 55 e4	 mov	 edx, DWORD PTR _i$31858[ebp]
  00150	6b d2 30	 imul	 edx, 48			; 00000030H
  00153	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00156	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [eax+232]
  0015c	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  0015f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00161	52		 push	 edx
  00162	ff 50 08	 call	 DWORD PTR [eax+8]
$L31862:

; 99   :             }
; 100  :                         
; 101  :         }

  00165	eb 88		 jmp	 SHORT $L31860
$L31861:

; 102  :         
; 103  :         DELETE(m_paTracks);

  00167	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	83 b9 e8 00 00
	00 00		 cmp	 DWORD PTR [ecx+232], 0
  00171	74 25		 je	 SHORT $L31857
  00173	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  00176	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0017c	89 45 dc	 mov	 DWORD PTR $T32381[ebp], eax
  0017f	8b 4d dc	 mov	 ecx, DWORD PTR $T32381[ebp]
  00182	51		 push	 ecx
  00183	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00188	83 c4 04	 add	 esp, 4
  0018b	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	c7 82 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+232], 0
$L31857:

; 104  :         
; 105  :     }
; 106  : 
; 107  :     ASSERT(m_pSoundBank);

  00198	6a 6b		 push	 107			; 0000006bH
  0019a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  0019f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BBNFMNOE@m_pSoundBank?$AA@
  001a4	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  001a7	33 c9		 xor	 ecx, ecx
  001a9	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  001ad	0f 94 c1	 sete	 cl
  001b0	51		 push	 ecx
  001b1	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  001b6	83 c4 10	 add	 esp, 16			; 00000010H

; 108  :     
; 109  :     //
; 110  :     // free destination voice
; 111  :     //
; 112  : 
; 113  :     if (m_pControlSoundSource) {

  001b9	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  001bc	83 ba f4 00 00
	00 00		 cmp	 DWORD PTR [edx+244], 0
  001c3	74 18		 je	 SHORT $L31867

; 114  :         m_pControlSoundSource->Release();

  001c5	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  001c8	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [eax+244]
  001ce	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  001d1	8b 82 f4 00 00
	00		 mov	 eax, DWORD PTR [edx+244]
  001d7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001d9	50		 push	 eax
  001da	ff 51 08	 call	 DWORD PTR [ecx+8]
$L31867:

; 115  :     }
; 116  : 
; 117  :     DPF_LEAVE_VOID();
; 118  : }

  001dd	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  001e0	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  001e5	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	e8 00 00 00 00	 call	 ??1CRefCount@XACT@@UAE@XZ ; XACT::CRefCount::~CRefCount
  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c3		 ret	 0
??1CSoundCue@XACT@@UAE@XZ ENDP				; XACT::CSoundCue::~CSoundCue
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
XACTENG	ENDS
;	COMDAT ??_V@YAXPAX@Z
XACTENG	SEGMENT
_pvBuffer$ = 8
??_V@YAXPAX@Z PROC NEAR					; operator delete[], COMDAT

; 105  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  :     using namespace XACT;
; 107  :     XactMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _XactMemFree@4

; 108  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??_V@YAXPAX@Z ENDP					; operator delete[]
XACTENG	ENDS
PUBLIC	?XACTEnterCriticalSection@@YGHXZ		; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??0CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::CAutoLock, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   :     m_fLocked = (BOOLEAN)XACTEnterCriticalSection();

  00007	e8 00 00 00 00	 call	 ?XACTEnterCriticalSection@@YGHXZ ; XACTEnterCriticalSection
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 83   : }

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??0CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlEnterCriticalSection@4:NEAR
EXTRN	_g_XACTCriticalSection:BYTE
; Function compile flags: /Odt
;	COMDAT ?XACTEnterCriticalSection@@YGHXZ
XACTENG	SEGMENT
?XACTEnterCriticalSection@@YGHXZ PROC NEAR		; XACTEnterCriticalSection, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   :     if(PASSIVE_LEVEL != KeGetCurrentIrql())

  00003	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 04		 je	 SHORT $L30689

; 49   :     {
; 50   :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 10		 jmp	 SHORT $L30688
$L30689:

; 51   :     }
; 52   : 
; 53   :     EnterCriticalSection(&g_XACTCriticalSection); 

  00013	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlEnterCriticalSection@4

; 54   : 
; 55   :     return TRUE;

  0001e	b8 01 00 00 00	 mov	 eax, 1
$L30688:

; 56   : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?XACTEnterCriticalSection@@YGHXZ ENDP			; XACTEnterCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\ntos\inc\i386.h
XACTENG	ENDS
;	COMDAT _KeGetCurrentIrql@0
XACTENG	SEGMENT
_KeGetCurrentIrql@0 PROC NEAR				; COMDAT

; 1496 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1497 : #if defined(_NTSYSTEM_)
; 1498 :     return KeGetPcr()->Irql;
; 1499 : #else
; 1500 :     __asm {  movzx eax, byte ptr fs:[0] KPCR.Irql }

  00003	64 0f b6 05 24
	00 00 00	 movzx	 eax, BYTE PTR fs:36

; 1501 : #endif
; 1502 : }    

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_KeGetCurrentIrql@0 ENDP
XACTENG	ENDS
PUBLIC	?XACTLeaveCriticalSection@@YGXXZ		; XACTLeaveCriticalSection
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ??1CAutoLock@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoLock@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoLock::~CAutoLock, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   :     if(m_fLocked)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 05		 je	 SHORT $L30715

; 88   :     {
; 89   :         XACTLeaveCriticalSection();

  0000f	e8 00 00 00 00	 call	 ?XACTLeaveCriticalSection@@YGXXZ ; XACTLeaveCriticalSection
$L30715:

; 90   :     }
; 91   : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??1CAutoLock@XACT@@QAE@XZ ENDP				; XACT::CAutoLock::~CAutoLock
XACTENG	ENDS
EXTRN	__imp__RtlLeaveCriticalSection@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?XACTLeaveCriticalSection@@YGXXZ
XACTENG	SEGMENT
?XACTLeaveCriticalSection@@YGXXZ PROC NEAR		; XACTLeaveCriticalSection, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :     LeaveCriticalSection(&g_XACTCriticalSection);

  00003	68 00 00 00 00	 push	 OFFSET FLAT:_g_XACTCriticalSection
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlLeaveCriticalSection@4

; 61   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?XACTLeaveCriticalSection@@YGXXZ ENDP			; XACTLeaveCriticalSection
XACTENG	ENDS
PUBLIC	?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ	; XACT::CSoundBank::GetBaseDataOffset
; Function compile flags: /Odt
;	COMDAT ?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ PROC NEAR ; XACT::CSoundCue::GetWaveBankTable, COMDAT
; _this$ = ecx

; 513  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 514  :         return (PXACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY) ((PUCHAR)m_pSoundBank->GetBaseDataOffset() + m_pSoundEntry->dwWaveBankTableOffset);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000d	e8 00 00 00 00	 call	 ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ ; XACT::CSoundBank::GetBaseDataOffset
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00018	03 42 0c	 add	 eax, DWORD PTR [edx+12]

; 515  :     }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ ENDP ; XACT::CSoundCue::GetWaveBankTable
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ
XACTENG	SEGMENT
_this$ = -4
?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ PROC NEAR	; XACT::CSoundBank::GetBaseDataOffset, COMDAT
; _this$ = ecx

; 454  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 455  :         return (PUCHAR)m_pDataBuffer;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 456  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ ENDP	; XACT::CSoundBank::GetBaseDataOffset
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\cue.cpp
XACTENG	ENDS
;	COMDAT ?AddRef@CSoundCue@XACT@@UAGKXZ
XACTENG	SEGMENT
$T32409 = -8
___AutoLock$ = -4
_this$ = 8
?AddRef@CSoundCue@XACT@@UAGKXZ PROC NEAR		; XACT::CSoundCue::AddRef, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 122  :     ENTER_EXTERNAL_METHOD("CCueInstance::AddRef");

  00006	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 123  :     return CRefCount::AddRef();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?AddRef@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::AddRef
  00017	89 45 f8	 mov	 DWORD PTR $T32409[ebp], eax
  0001a	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0001d	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00022	8b 45 f8	 mov	 eax, DWORD PTR $T32409[ebp]

; 124  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?AddRef@CSoundCue@XACT@@UAGKXZ ENDP			; XACT::CSoundCue::AddRef
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?Release@CSoundCue@XACT@@UAGKXZ
XACTENG	SEGMENT
$T32413 = -12
___AutoLock$ = -8
_dwCount$ = -4
_this$ = 8
?Release@CSoundCue@XACT@@UAGKXZ PROC NEAR		; XACT::CSoundCue::Release, COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 129  :     ENTER_EXTERNAL_METHOD("CCueInstance::Release");

  00006	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00009	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 130  : 
; 131  :     DWORD dwCount = CRefCount::Release();

  0000e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?Release@CRefCount@XACT@@UAGKXZ ; XACT::CRefCount::Release
  00017	89 45 fc	 mov	 DWORD PTR _dwCount$[ebp], eax

; 132  :     if ((dwCount == 1) && (m_dwFlags & XACT_FLAG_SOUNDCUE_AUTORELEASE)){

  0001a	83 7d fc 01	 cmp	 DWORD PTR _dwCount$[ebp], 1
  0001e	75 1f		 jne	 SHORT $L31880
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 91 f0 00 00
	00		 mov	 edx, DWORD PTR [ecx+240]
  00029	83 e2 01	 and	 edx, 1
  0002c	85 d2		 test	 edx, edx
  0002e	74 0f		 je	 SHORT $L31880

; 133  : 
; 134  :         //
; 135  :         // if auto release is set and refcount is down to one
; 136  :         // it means that we are no longer in the sequencer list
; 137  :         // and we can free ourselves
; 138  :         //
; 139  : 
; 140  :         dwCount = Release();

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00038	52		 push	 edx
  00039	ff 51 08	 call	 DWORD PTR [ecx+8]
  0003c	89 45 fc	 mov	 DWORD PTR _dwCount$[ebp], eax
$L31880:

; 141  : 
; 142  :     }
; 143  : 
; 144  :     return dwCount;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _dwCount$[ebp]
  00042	89 45 f4	 mov	 DWORD PTR $T32413[ebp], eax
  00045	8d 4d f8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00048	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  0004d	8b 45 f4	 mov	 eax, DWORD PTR $T32413[ebp]

; 145  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?Release@CSoundCue@XACT@@UAGKXZ ENDP			; XACT::CSoundCue::Release
XACTENG	ENDS
PUBLIC	??_C@_0L@HCBGEFNH@pSoundBank?$AA@		; `string'
PUBLIC	??_C@_0BG@EOHDLHJN@CSoundCue?3?3Initialize?$AA@	; `string'
PUBLIC	??_C@_0DD@BLAOFBOE@Wavebank?5?$CI?$CFs?$CJ?5not?5registered?5yet@ ; `string'
PUBLIC	?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ; XACT::CSoundBank::GetCueTable
PUBLIC	?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ ; XACT::CSoundBank::GetSoundTable
PUBLIC	??_C@_07NDMLHGOG@XACTENG?$AA@			; `string'
PUBLIC	?Initialize@CSoundCue@XACT@@QAEJPAVCSoundBank@2@KPAVCSoundSource@2@@Z ; XACT::CSoundCue::Initialize
PUBLIC	?IsPositional@CSoundSource@XACT@@QAEHXZ		; XACT::CSoundSource::IsPositional
EXTRN	?GetWaveBank@CEngine@XACT@@QAEJPBDPAPAVCWaveBank@2@@Z:NEAR ; XACT::CEngine::GetWaveBank
EXTRN	?AddCueToList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z:NEAR ; XACT::CWaveBank::AddCueToList
EXTRN	?DwDbgSetContext@XACT@@YAXKKPBDI00@Z:NEAR	; XACT::DwDbgSetContext
EXTRN	?DwDbgPrint@XACT@@YAXPBDZZ:NEAR			; XACT::DwDbgPrint
;	COMDAT ??_C@_0L@HCBGEFNH@pSoundBank?$AA@
XACTENG_RD	SEGMENT
??_C@_0L@HCBGEFNH@pSoundBank?$AA@ DB 'pSoundBank', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_07NDMLHGOG@XACTENG?$AA@
XACTENG_RD	SEGMENT
??_C@_07NDMLHGOG@XACTENG?$AA@ DB 'XACTENG', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BG@EOHDLHJN@CSoundCue?3?3Initialize?$AA@
XACTENG_RD	SEGMENT
??_C@_0BG@EOHDLHJN@CSoundCue?3?3Initialize?$AA@ DB 'CSoundCue::Initialize'
	DB	00H						; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DD@BLAOFBOE@Wavebank?5?$CI?$CFs?$CJ?5not?5registered?5yet@
XACTENG_RD	SEGMENT
??_C@_0DD@BLAOFBOE@Wavebank?5?$CI?$CFs?$CJ?5not?5registered?5yet@ DB 'Wav'
	DB	'ebank (%s) not registered yet. Cue can not play', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Initialize@CSoundCue@XACT@@QAEJPAVCSoundBank@2@KPAVCSoundSource@2@@Z
XACTENG	SEGMENT
_this$ = -52
$T32419 = -48
$T32418 = -44
$T32417 = -40
_i$31928 = -36
_pWaveBank$31915 = -32
_i$31902 = -28
_pWaveBankEntry$31901 = -24
___AutoLock$ = -20
_hr$ = -16
_pWaveBank$ = -12
_pCueTable$ = -8
_pSoundTable$ = -4
_pSoundBank$ = 8
_dwCueIndex$ = 12
_pSoundSource$ = 16
?Initialize@CSoundCue@XACT@@QAEJPAVCSoundBank@2@KPAVCSoundSource@2@@Z PROC NEAR ; XACT::CSoundCue::Initialize, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  :     HRESULT hr = S_OK;

  0000a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 155  :     CWaveBank *pWaveBank;
; 156  :     ENTER_EXTERNAL_METHOD();

  00011	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00014	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 157  :     DPF_ENTER();
; 158  : 
; 159  :     ASSERT(pSoundBank);

  00019	68 9f 00 00 00	 push	 159			; 0000009fH
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00023	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@HCBGEFNH@pSoundBank?$AA@
  00028	33 c0		 xor	 eax, eax
  0002a	83 7d 08 00	 cmp	 DWORD PTR _pSoundBank$[ebp], 0
  0002e	0f 94 c0	 sete	 al
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 160  : 
; 161  :     //
; 162  :     // we dont dont ADDREF he soundbank since its valid for it to dissappear while Cues are active
; 163  :     // it will delete all cues in thread safe manner when the soundbank is deleted
; 164  :     //
; 165  : 
; 166  :     m_pSoundBank = pSoundBank;

  0003a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _pSoundBank$[ebp]
  00040	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 167  : 
; 168  :     m_dwCueIndex = dwCueIndex;

  00043	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCueIndex$[ebp]
  00049	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 169  : 
; 170  :     PXACT_SOUNDBANK_CUE_ENTRY pCueTable = pSoundBank->GetCueTable();

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pSoundBank$[ebp]
  0004f	e8 00 00 00 00	 call	 ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ; XACT::CSoundBank::GetCueTable
  00054	89 45 f8	 mov	 DWORD PTR _pCueTable$[ebp], eax

; 171  :     PXACT_SOUNDBANK_SOUND_ENTRY pSoundTable = pSoundBank->GetSoundTable();

  00057	8b 4d 08	 mov	 ecx, DWORD PTR _pSoundBank$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ ; XACT::CSoundBank::GetSoundTable
  0005f	89 45 fc	 mov	 DWORD PTR _pSoundTable$[ebp], eax

; 172  : 
; 173  :     m_pSoundEntry = &pSoundTable[pCueTable[dwCueIndex].dwSoundIndex];

  00062	8b 55 0c	 mov	 edx, DWORD PTR _dwCueIndex$[ebp]
  00065	6b d2 18	 imul	 edx, 24			; 00000018H
  00068	8b 45 f8	 mov	 eax, DWORD PTR _pCueTable$[ebp]
  0006b	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  0006f	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00072	8b 55 fc	 mov	 edx, DWORD PTR _pSoundTable$[ebp]
  00075	03 d1		 add	 edx, ecx
  00077	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 174  : 
; 175  :     //
; 176  :     // allocate a context entry for each wavebank we belong to
; 177  :     // this entry alows each wavebank to track us independently of other wavebanks
; 178  :     //
; 179  : 
; 180  :     hr = HRFROMP( m_paWaveBankEntries = NEW_A(WAVEBANK_CUE_CONTEXT,m_pSoundEntry->wWaveBankCount));

  0007d	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00083	0f b7 42 18	 movzx	 eax, WORD PTR [edx+24]
  00087	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00090	83 c4 04	 add	 esp, 4
  00093	89 45 d8	 mov	 DWORD PTR $T32417[ebp], eax
  00096	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 55 d8	 mov	 edx, DWORD PTR $T32417[ebp]
  0009c	89 51 20	 mov	 DWORD PTR [ecx+32], edx
  0009f	33 c0		 xor	 eax, eax
  000a1	83 7d d8 00	 cmp	 DWORD PTR $T32417[ebp], 0
  000a5	0f 95 c0	 setne	 al
  000a8	48		 dec	 eax
  000a9	25 0e 00 07 80	 and	 eax, -2147024882	; 8007000eH
  000ae	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 181  : 
; 182  :     if (SUCCEEDED(hr)) {

  000b1	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000b5	0f 8c 41 01 00
	00		 jl	 $L31900

; 183  : 
; 184  :         //
; 185  :         // we need to find the wavebank object for each wavebank referenced by this sound
; 186  :         // this will allow track events to quickly get the wavebank 
; 187  :         // they require
; 188  :         //
; 189  :         
; 190  :         PXACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY pWaveBankEntry = GetWaveBankTable();

  000bb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	e8 00 00 00 00	 call	 ?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ ; XACT::CSoundCue::GetWaveBankTable
  000c3	89 45 e8	 mov	 DWORD PTR _pWaveBankEntry$31901[ebp], eax

; 191  :         for (DWORD i=0;i<m_pSoundEntry->wWaveBankCount;i++) {

  000c6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$31902[ebp], 0
  000cd	eb 09		 jmp	 SHORT $L31903
$L31904:
  000cf	8b 4d e4	 mov	 ecx, DWORD PTR _i$31902[ebp]
  000d2	83 c1 01	 add	 ecx, 1
  000d5	89 4d e4	 mov	 DWORD PTR _i$31902[ebp], ecx
$L31903:
  000d8	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  000db	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000de	0f b7 48 18	 movzx	 ecx, WORD PTR [eax+24]
  000e2	39 4d e4	 cmp	 DWORD PTR _i$31902[ebp], ecx
  000e5	0f 83 11 01 00
	00		 jae	 $L31900

; 192  :             
; 193  :             if (!pWaveBankEntry[i].dwDataOffset) {

  000eb	8b 55 e4	 mov	 edx, DWORD PTR _i$31902[ebp]
  000ee	6b d2 14	 imul	 edx, 20			; 00000014H
  000f1	8b 45 e8	 mov	 eax, DWORD PTR _pWaveBankEntry$31901[ebp]
  000f4	83 7c 10 10 00	 cmp	 DWORD PTR [eax+edx+16], 0
  000f9	75 6f		 jne	 SHORT $L31906

; 194  :                 
; 195  :                 hr = g_pEngine->GetWaveBank(pWaveBankEntry[i].szFriendlyName,&pWaveBank);

  000fb	8d 4d f4	 lea	 ecx, DWORD PTR _pWaveBank$[ebp]
  000fe	51		 push	 ecx
  000ff	8b 55 e4	 mov	 edx, DWORD PTR _i$31902[ebp]
  00102	6b d2 14	 imul	 edx, 20			; 00000014H
  00105	8b 45 e8	 mov	 eax, DWORD PTR _pWaveBankEntry$31901[ebp]
  00108	03 c2		 add	 eax, edx
  0010a	50		 push	 eax
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00111	e8 00 00 00 00	 call	 ?GetWaveBank@CEngine@XACT@@QAEJPBDPAPAVCWaveBank@2@@Z ; XACT::CEngine::GetWaveBank
  00116	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax

; 196  :                 
; 197  :                 if (SUCCEEDED(hr)) {

  00119	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011d	7c 12		 jl	 SHORT $L31908

; 198  :                     
; 199  :                     pWaveBankEntry[i].dwDataOffset = (DWORD) pWaveBank;

  0011f	8b 4d e4	 mov	 ecx, DWORD PTR _i$31902[ebp]
  00122	6b c9 14	 imul	 ecx, 20			; 00000014H
  00125	8b 55 e8	 mov	 edx, DWORD PTR _pWaveBankEntry$31901[ebp]
  00128	8b 45 f4	 mov	 eax, DWORD PTR _pWaveBank$[ebp]
  0012b	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 200  :                     
; 201  :                     //
; 202  :                     // addref the wavebank so it does not magically go away from our
; 203  :                     // under our nose
; 204  :                     //
; 205  :                     
; 206  :                 } else {

  0012f	eb 39		 jmp	 SHORT $L31906
$L31908:

; 207  :                     
; 208  :                     DPF_ERROR("Wavebank (%s) not registered yet. Cue can not play",
; 209  :                         pWaveBankEntry[i].szFriendlyName);

  00131	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00136	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EOHDLHJN@CSoundCue?3?3Initialize?$AA@
  0013b	68 d0 00 00 00	 push	 208			; 000000d0H
  00140	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00145	6a 01		 push	 1
  00147	6a 09		 push	 9
  00149	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0014e	83 c4 18	 add	 esp, 24			; 00000018H
  00151	8b 4d e4	 mov	 ecx, DWORD PTR _i$31902[ebp]
  00154	6b c9 14	 imul	 ecx, 20			; 00000014H
  00157	8b 55 e8	 mov	 edx, DWORD PTR _pWaveBankEntry$31901[ebp]
  0015a	03 d1		 add	 edx, ecx
  0015c	52		 push	 edx
  0015d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@BLAOFBOE@Wavebank?5?$CI?$CFs?$CJ?5not?5registered?5yet@
  00162	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00167	83 c4 08	 add	 esp, 8
$L31906:

; 210  :                     
; 211  :                 }
; 212  :                 
; 213  :             }
; 214  :             
; 215  :             if (SUCCEEDED(hr)) {

  0016a	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0016e	0f 8c 83 00 00
	00		 jl	 $L31914

; 216  : 
; 217  :                 CWaveBank *pWaveBank = (CWaveBank *) pWaveBankEntry[i].dwDataOffset;

  00174	8b 45 e4	 mov	 eax, DWORD PTR _i$31902[ebp]
  00177	6b c0 14	 imul	 eax, 20			; 00000014H
  0017a	8b 4d e8	 mov	 ecx, DWORD PTR _pWaveBankEntry$31901[ebp]
  0017d	8b 54 01 10	 mov	 edx, DWORD PTR [ecx+eax+16]
  00181	89 55 e0	 mov	 DWORD PTR _pWaveBank$31915[ebp], edx

; 218  :                 pWaveBank->AddRef();

  00184	8b 45 e0	 mov	 eax, DWORD PTR _pWaveBank$31915[ebp]
  00187	8b 08		 mov	 ecx, DWORD PTR [eax]
  00189	8b 55 e0	 mov	 edx, DWORD PTR _pWaveBank$31915[ebp]
  0018c	52		 push	 edx
  0018d	ff 51 04	 call	 DWORD PTR [ecx+4]

; 219  : 
; 220  :                 m_paWaveBankEntries[i].pSoundCue = this;

  00190	8b 45 e4	 mov	 eax, DWORD PTR _i$31902[ebp]
  00193	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00196	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00199	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0019c	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 221  :                 InitializeListHead(&m_paWaveBankEntries[i].ListEntry);

  001a2	8b 55 e4	 mov	 edx, DWORD PTR _i$31902[ebp]
  001a5	6b d2 0c	 imul	 edx, 12			; 0000000cH
  001a8	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ae	8d 54 11 04	 lea	 edx, DWORD PTR [ecx+edx+4]
  001b2	8b 45 e4	 mov	 eax, DWORD PTR _i$31902[ebp]
  001b5	6b c0 0c	 imul	 eax, 12			; 0000000cH
  001b8	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bb	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  001be	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx
  001c2	8b 55 e4	 mov	 edx, DWORD PTR _i$31902[ebp]
  001c5	6b d2 0c	 imul	 edx, 12			; 0000000cH
  001c8	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ce	8b 45 e4	 mov	 eax, DWORD PTR _i$31902[ebp]
  001d1	6b c0 0c	 imul	 eax, 12			; 0000000cH
  001d4	8b 75 cc	 mov	 esi, DWORD PTR _this$[ebp]
  001d7	8b 76 20	 mov	 esi, DWORD PTR [esi+32]
  001da	8b 4c 11 08	 mov	 ecx, DWORD PTR [ecx+edx+8]
  001de	89 4c 06 04	 mov	 DWORD PTR [esi+eax+4], ecx

; 222  : 
; 223  :                 pWaveBank->AddCueToList(&m_paWaveBankEntries[i]);

  001e2	8b 55 e4	 mov	 edx, DWORD PTR _i$31902[ebp]
  001e5	6b d2 0c	 imul	 edx, 12			; 0000000cH
  001e8	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  001eb	03 50 20	 add	 edx, DWORD PTR [eax+32]
  001ee	52		 push	 edx
  001ef	8b 4d e0	 mov	 ecx, DWORD PTR _pWaveBank$31915[ebp]
  001f2	e8 00 00 00 00	 call	 ?AddCueToList@CWaveBank@XACT@@QAEXPAU_WAVEBANK_CUE_CONTEXT@2@@Z ; XACT::CWaveBank::AddCueToList
$L31914:

; 224  : 
; 225  :             }
; 226  :             
; 227  :         }

  001f7	e9 d3 fe ff ff	 jmp	 $L31904
$L31900:

; 228  :         
; 229  :     }
; 230  : 
; 231  :     if (SUCCEEDED(hr)) {

  001fc	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00200	7c 2a		 jl	 SHORT $L31918

; 232  : 
; 233  :         if (pSoundSource) {

  00202	83 7d 10 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  00206	74 24		 je	 SHORT $L31918

; 234  :             
; 235  :             m_pControlSoundSource = pSoundSource->IsPositional() ? pSoundSource : NULL;            

  00208	8b 4d 10	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0020b	e8 00 00 00 00	 call	 ?IsPositional@CSoundSource@XACT@@QAEHXZ ; XACT::CSoundSource::IsPositional
  00210	f7 d8		 neg	 eax
  00212	1b c0		 sbb	 eax, eax
  00214	23 45 10	 and	 eax, DWORD PTR _pSoundSource$[ebp]
  00217	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	89 81 f4 00 00
	00		 mov	 DWORD PTR [ecx+244], eax

; 236  :             
; 237  :             //
; 238  :             // addref SoundSource. This should bring the current refcount to at least 3
; 239  :             // one ref on creation from the engine, one when calling CreateSoundSource or 
; 240  :             // CreateSoundSourceInternal and one from associating it with a Cue
; 241  :             //
; 242  :             
; 243  :             pSoundSource->AddRef();            

  00220	8b 55 10	 mov	 edx, DWORD PTR _pSoundSource$[ebp]
  00223	8b 02		 mov	 eax, DWORD PTR [edx]
  00225	8b 4d 10	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  00228	51		 push	 ecx
  00229	ff 50 04	 call	 DWORD PTR [eax+4]
$L31918:

; 244  :             
; 245  :         }
; 246  :         
; 247  :     }
; 248  :         
; 249  :     if (SUCCEEDED(hr)) {

  0022c	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00230	7c 38		 jl	 SHORT $L31921

; 250  : 
; 251  :         //
; 252  :         // create an array of track contexts
; 253  :         //
; 254  :         
; 255  :         hr = HRFROMP(m_paTracks = NEW_A(TRACK_CONTEXT,m_pSoundEntry->wTrackCount));

  00232	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00235	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00238	0f b7 48 16	 movzx	 ecx, WORD PTR [eax+22]
  0023c	6b c9 30	 imul	 ecx, 48			; 00000030H
  0023f	51		 push	 ecx
  00240	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00245	83 c4 04	 add	 esp, 4
  00248	89 45 d4	 mov	 DWORD PTR $T32418[ebp], eax
  0024b	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  0024e	8b 45 d4	 mov	 eax, DWORD PTR $T32418[ebp]
  00251	89 82 e8 00 00
	00		 mov	 DWORD PTR [edx+232], eax
  00257	33 c9		 xor	 ecx, ecx
  00259	83 7d d4 00	 cmp	 DWORD PTR $T32418[ebp], 0
  0025d	0f 95 c1	 setne	 cl
  00260	49		 dec	 ecx
  00261	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  00267	89 4d f0	 mov	 DWORD PTR _hr$[ebp], ecx
$L31921:

; 256  :         
; 257  :     }
; 258  : 
; 259  :     if (SUCCEEDED(hr)) {

  0026a	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0026e	0f 8c fc 00 00
	00		 jl	 $L31927

; 260  : 
; 261  :         for (DWORD i=0;i<m_pSoundEntry->wTrackCount;i++)

  00274	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$31928[ebp], 0
  0027b	eb 09		 jmp	 SHORT $L31929
$L31930:
  0027d	8b 55 dc	 mov	 edx, DWORD PTR _i$31928[ebp]
  00280	83 c2 01	 add	 edx, 1
  00283	89 55 dc	 mov	 DWORD PTR _i$31928[ebp], edx
$L31929:
  00286	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00289	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0028c	0f b7 51 16	 movzx	 edx, WORD PTR [ecx+22]
  00290	39 55 dc	 cmp	 DWORD PTR _i$31928[ebp], edx
  00293	0f 83 d7 00 00
	00		 jae	 $L31927

; 262  :         {
; 263  :             InitializeListHead(&m_paTracks[i].lstEvents);

  00299	8b 45 dc	 mov	 eax, DWORD PTR _i$31928[ebp]
  0029c	6b c0 30	 imul	 eax, 48			; 00000030H
  0029f	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a2	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  002a8	8d 44 02 08	 lea	 eax, DWORD PTR [edx+eax+8]
  002ac	8b 4d dc	 mov	 ecx, DWORD PTR _i$31928[ebp]
  002af	6b c9 30	 imul	 ecx, 48			; 00000030H
  002b2	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  002b5	8b 92 e8 00 00
	00		 mov	 edx, DWORD PTR [edx+232]
  002bb	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax
  002bf	8b 45 dc	 mov	 eax, DWORD PTR _i$31928[ebp]
  002c2	6b c0 30	 imul	 eax, 48			; 00000030H
  002c5	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c8	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  002ce	8b 4d dc	 mov	 ecx, DWORD PTR _i$31928[ebp]
  002d1	6b c9 30	 imul	 ecx, 48			; 00000030H
  002d4	8b 75 cc	 mov	 esi, DWORD PTR _this$[ebp]
  002d7	8b b6 e8 00 00
	00		 mov	 esi, DWORD PTR [esi+232]
  002dd	8b 54 02 0c	 mov	 edx, DWORD PTR [edx+eax+12]
  002e1	89 54 0e 08	 mov	 DWORD PTR [esi+ecx+8], edx

; 264  :             m_paTracks[i].pSoundCue = this;

  002e5	8b 45 dc	 mov	 eax, DWORD PTR _i$31928[ebp]
  002e8	6b c0 30	 imul	 eax, 48			; 00000030H
  002eb	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ee	8b 91 e8 00 00
	00		 mov	 edx, DWORD PTR [ecx+232]
  002f4	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f7	89 4c 02 04	 mov	 DWORD PTR [edx+eax+4], ecx

; 265  :             m_paTracks[i].wSamplesPerSec = 48000;

  002fb	8b 55 dc	 mov	 edx, DWORD PTR _i$31928[ebp]
  002fe	6b d2 30	 imul	 edx, 48			; 00000030H
  00301	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00304	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  0030a	66 c7 44 11 18
	80 bb		 mov	 WORD PTR [ecx+edx+24], 48000 ; 0000bb80H

; 266  :             m_paTracks[i].pContentEntry = (PXACT_SOUNDBANK_TRACK_ENTRY)
; 267  :                 ((PUCHAR)m_pSoundBank->GetBaseDataOffset() + m_pSoundEntry->dwTrackTableOffset +
; 268  :                 sizeof(XACT_SOUNDBANK_TRACK_ENTRY)*i);

  00311	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00314	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00317	e8 00 00 00 00	 call	 ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ ; XACT::CSoundBank::GetBaseDataOffset
  0031c	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00322	03 42 08	 add	 eax, DWORD PTR [edx+8]
  00325	8b 4d dc	 mov	 ecx, DWORD PTR _i$31928[ebp]
  00328	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  0032b	8b 45 dc	 mov	 eax, DWORD PTR _i$31928[ebp]
  0032e	6b c0 30	 imul	 eax, 48			; 00000030H
  00331	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00334	8b 89 e8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+232]
  0033a	89 54 01 28	 mov	 DWORD PTR [ecx+eax+40], edx

; 269  : 
; 270  :             if (i == 0 && pSoundSource && !pSoundSource->IsPositional()){

  0033e	83 7d dc 00	 cmp	 DWORD PTR _i$31928[ebp], 0
  00342	75 27		 jne	 SHORT $L31935
  00344	83 7d 10 00	 cmp	 DWORD PTR _pSoundSource$[ebp], 0
  00348	74 21		 je	 SHORT $L31935
  0034a	8b 4d 10	 mov	 ecx, DWORD PTR _pSoundSource$[ebp]
  0034d	e8 00 00 00 00	 call	 ?IsPositional@CSoundSource@XACT@@QAEHXZ ; XACT::CSoundSource::IsPositional
  00352	85 c0		 test	 eax, eax
  00354	75 15		 jne	 SHORT $L31935

; 271  : 
; 272  :                 //
; 273  :                 // a non 3d sound source is just used as track source, not submix
; 274  :                 // destination
; 275  :                 //
; 276  : 
; 277  :                 m_paTracks[i].pSoundSource = pSoundSource;

  00356	8b 55 dc	 mov	 edx, DWORD PTR _i$31928[ebp]
  00359	6b d2 30	 imul	 edx, 48			; 00000030H
  0035c	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0035f	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00365	8b 45 10	 mov	 eax, DWORD PTR _pSoundSource$[ebp]
  00368	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
$L31935:

; 278  :             }
; 279  : 
; 280  :         }

  0036b	e9 0d ff ff ff	 jmp	 $L31930
$L31927:

; 281  : 
; 282  :     }
; 283  : 
; 284  :     if (SUCCEEDED(hr)) {

  00370	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00374	7c 0d		 jl	 SHORT $L31937

; 285  : 
; 286  :         m_dwState = CUE_STATE_INITIALIZED;

  00376	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00379	c7 81 ec 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+236], 1
$L31937:

; 287  : 
; 288  :     }
; 289  : 
; 290  :     DPF_LEAVE_HRESULT(hr);
; 291  : 
; 292  :     return hr;

  00383	8b 55 f0	 mov	 edx, DWORD PTR _hr$[ebp]
  00386	89 55 d0	 mov	 DWORD PTR $T32419[ebp], edx
  00389	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0038c	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00391	8b 45 d0	 mov	 eax, DWORD PTR $T32419[ebp]

; 293  : }

  00394	5e		 pop	 esi
  00395	8b e5		 mov	 esp, ebp
  00397	5d		 pop	 ebp
  00398	c2 0c 00	 ret	 12			; 0000000cH
?Initialize@CSoundCue@XACT@@QAEJPAVCSoundBank@2@KPAVCSoundSource@2@@Z ENDP ; XACT::CSoundCue::Initialize
XACTENG	ENDS
EXTRN	_XactMemAlloc@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
;	COMDAT ??_U@YAPAXI@Z
XACTENG	SEGMENT
_cbBuffer$ = 8
??_U@YAPAXI@Z PROC NEAR					; operator new[], COMDAT

; 77   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :     using namespace XACT;
; 79   :     return XactMemAlloc(cbBuffer, FALSE);

  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _XactMemAlloc@8

; 80   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??_U@YAPAXI@Z ENDP					; operator new[]
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ PROC NEAR ; XACT::CSoundBank::GetCueTable, COMDAT
; _this$ = ecx

; 437  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 438  :         return (PXACT_SOUNDBANK_CUE_ENTRY) ((PUCHAR)m_pDataBuffer+sizeof(XACT_SOUNDBANK_FILE_HEADER));       

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	83 c0 24	 add	 eax, 36			; 00000024H

; 439  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?GetCueTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_CUE_ENTRY@@XZ ENDP ; XACT::CSoundBank::GetCueTable
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ PROC NEAR ; XACT::CSoundBank::GetSoundTable, COMDAT
; _this$ = ecx

; 448  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 449  :         return (PXACT_SOUNDBANK_SOUND_ENTRY) ((PUCHAR)m_pDataBuffer+sizeof(XACT_SOUNDBANK_FILE_HEADER)+
; 450  :             sizeof(XACT_SOUNDBANK_CUE_ENTRY)*m_pFileHeader->dwCueEntryCount);     

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00010	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00013	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00016	6b d2 18	 imul	 edx, 24			; 00000018H
  00019	8d 44 11 24	 lea	 eax, DWORD PTR [ecx+edx+36]

; 451  :     }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetSoundTable@CSoundBank@XACT@@AAEPAU_XACT_SOUNDBANK_SOUND_ENTRY@@XZ ENDP ; XACT::CSoundBank::GetSoundTable
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT
_this$ = -4
?IsPositional@CSoundSource@XACT@@QAEHXZ PROC NEAR	; XACT::CSoundSource::IsPositional, COMDAT
; _this$ = ecx

; 589  :     {        

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  :         return (m_HwVoice.dwFlags & DSBCAPS_CTRL3D);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000d	83 e0 10	 and	 eax, 16			; 00000010H

; 591  :     }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?IsPositional@CSoundSource@XACT@@QAEHXZ ENDP		; XACT::CSoundSource::IsPositional
XACTENG	ENDS
PUBLIC	??_C@_0CA@FFDNKENF@dwOldState?5?$CB?$DN?5CUE_STATE_PLAYING?$AA@ ; `string'
PUBLIC	?Play@CSoundCue@XACT@@QAGJK@Z			; XACT::CSoundCue::Play
PUBLIC	?ScheduleTrackEvents@CSoundCue@XACT@@IAEJK@Z	; XACT::CSoundCue::ScheduleTrackEvents
PUBLIC	?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z ; XACT::CSoundCue::CheckStateTransition
EXTRN	?AddCueToSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z:NEAR ; XACT::CEngine::AddCueToSequencerList
;	COMDAT ??_C@_0CA@FFDNKENF@dwOldState?5?$CB?$DN?5CUE_STATE_PLAYING?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\cue.cpp
XACTENG_RD	SEGMENT
??_C@_0CA@FFDNKENF@dwOldState?5?$CB?$DN?5CUE_STATE_PLAYING?$AA@ DB 'dwOld'
	DB	'State != CUE_STATE_PLAYING', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?Play@CSoundCue@XACT@@QAGJK@Z
XACTENG	SEGMENT
$T32435 = -16
___AutoLock$ = -12
_hr$ = -8
_dwOldState$ = -4
_this$ = 8
_dwFlags$ = 12
?Play@CSoundCue@XACT@@QAGJK@Z PROC NEAR			; XACT::CSoundCue::Play, COMDAT

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 300  :     HRESULT hr = S_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 301  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 302  :     DWORD dwOldState;
; 303  : 
; 304  :     DPF_ENTER();
; 305  : 
; 306  :     CheckStateTransition(CUE_STATE_PLAYING,&dwOldState);    

  00015	8d 45 fc	 lea	 eax, DWORD PTR _dwOldState$[ebp]
  00018	50		 push	 eax
  00019	6a 02		 push	 2
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z ; XACT::CSoundCue::CheckStateTransition

; 307  :     ASSERT(dwOldState != CUE_STATE_PLAYING);

  00023	68 33 01 00 00	 push	 307			; 00000133H
  00028	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  0002d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@FFDNKENF@dwOldState?5?$CB?$DN?5CUE_STATE_PLAYING?$AA@
  00032	33 c9		 xor	 ecx, ecx
  00034	83 7d fc 02	 cmp	 DWORD PTR _dwOldState$[ebp], 2
  00038	0f 94 c1	 sete	 cl
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00041	83 c4 10	 add	 esp, 16			; 00000010H

; 308  :     
; 309  :     //
; 310  :     // if we are autorelease add flags to state
; 311  :     //
; 312  : 
; 313  :     m_dwFlags = dwFlags;

  00044	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00047	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0004a	89 82 f0 00 00
	00		 mov	 DWORD PTR [edx+240], eax

; 314  : 
; 315  :     //
; 316  :     // First time play
; 317  :     // add ourselves to the core sequencer so our track events can start
; 318  :     // getting processed
; 319  :     //
; 320  :     
; 321  :     hr = g_pEngine->AddCueToSequencerList(this);

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	51		 push	 ecx
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  0005a	e8 00 00 00 00	 call	 ?AddCueToSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z ; XACT::CEngine::AddCueToSequencerList
  0005f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 322  : 
; 323  :     //
; 324  :     // start scheduling track events right away
; 325  :     //
; 326  : 
; 327  :     if (SUCCEEDED(hr)) {

  00062	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00066	7c 10		 jl	 SHORT $L31949

; 328  : 
; 329  :         hr = ScheduleTrackEvents(XACT_ENGINE_SCHEDULE_QUANTUM);

  00068	68 50 c3 00 00	 push	 50000			; 0000c350H
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?ScheduleTrackEvents@CSoundCue@XACT@@IAEJK@Z ; XACT::CSoundCue::ScheduleTrackEvents
  00075	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L31949:

; 330  : 
; 331  :     }
; 332  : 
; 333  :     DPF_LEAVE_HRESULT(hr);
; 334  :     return hr;

  00078	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  0007b	89 55 f0	 mov	 DWORD PTR $T32435[ebp], edx
  0007e	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00081	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00086	8b 45 f0	 mov	 eax, DWORD PTR $T32435[ebp]

; 335  : 
; 336  : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
?Play@CSoundCue@XACT@@QAGJK@Z ENDP			; XACT::CSoundCue::Play
XACTENG	ENDS
PUBLIC	?Stop@CSoundCue@XACT@@QAGJK@Z			; XACT::CSoundCue::Stop
PUBLIC	?DoWork@CSoundCue@XACT@@QAEXXZ			; XACT::CSoundCue::DoWork
EXTRN	?Stop@CSoundSource@XACT@@AAEJXZ:NEAR		; XACT::CSoundSource::Stop
; Function compile flags: /Odt
;	COMDAT ?Stop@CSoundCue@XACT@@QAGJK@Z
XACTENG	SEGMENT
$T32439 = -24
_i$31960 = -20
___AutoLock$ = -16
_hr$ = -12
_this$ = 8
_dwFlags$ = 12
?Stop@CSoundCue@XACT@@QAGJK@Z PROC NEAR			; XACT::CSoundCue::Stop, COMDAT

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 344  :     HRESULT hr = S_OK;

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 345  :     ENTER_EXTERNAL_METHOD();

  0000d	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 346  :     PLIST_ENTRY pEntry;
; 347  :     CSoundCue *pCue;
; 348  : 
; 349  :     DPF_ENTER();
; 350  : 
; 351  :     CheckStateTransition(CUE_STATE_STOPPING,NULL);    

  00015	6a 00		 push	 0
  00017	6a 03		 push	 3
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z ; XACT::CSoundCue::CheckStateTransition

; 352  : 
; 353  :     //
; 354  :     // tell the hw voices associated with this cue to stop now
; 355  :     // this way by the time dowork is called more time has elapsed
; 356  :     //
; 357  : 
; 358  :     for (DWORD i=0;i<m_pSoundEntry->wTrackCount;i++) {

  00021	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$31960[ebp], 0
  00028	eb 09		 jmp	 SHORT $L31961
$L31962:
  0002a	8b 45 ec	 mov	 eax, DWORD PTR _i$31960[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 ec	 mov	 DWORD PTR _i$31960[ebp], eax
$L31961:
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00039	0f b7 42 16	 movzx	 eax, WORD PTR [edx+22]
  0003d	39 45 ec	 cmp	 DWORD PTR _i$31960[ebp], eax
  00040	73 2e		 jae	 SHORT $L31963

; 359  :                         
; 360  :         if (m_paTracks[i].pSoundSource) {            

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _i$31960[ebp]
  00045	6b c9 30	 imul	 ecx, 48			; 00000030H
  00048	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00051	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00055	74 17		 je	 SHORT $L31964

; 361  :             m_paTracks[i].pSoundSource->Stop();                        

  00057	8b 4d ec	 mov	 ecx, DWORD PTR _i$31960[ebp]
  0005a	6b c9 30	 imul	 ecx, 48			; 00000030H
  0005d	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  00066	8b 0c 01	 mov	 ecx, DWORD PTR [ecx+eax]
  00069	e8 00 00 00 00	 call	 ?Stop@CSoundSource@XACT@@AAEJXZ ; XACT::CSoundSource::Stop
$L31964:

; 362  :         }
; 363  :         
; 364  :     }

  0006e	eb ba		 jmp	 SHORT $L31962
$L31963:

; 365  : 
; 366  :     if (dwFlags & XACT_FLAG_SOUNDCUE_AUTORELEASE) {

  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00073	83 e1 01	 and	 ecx, 1
  00076	85 c9		 test	 ecx, ecx
  00078	74 15		 je	 SHORT $L31965

; 367  : 
; 368  :         //
; 369  :         // the caller indicated that it wants stop to release the cue when its done...
; 370  :         //
; 371  : 
; 372  :         m_dwFlags |= XACT_FLAG_SOUNDCUE_AUTORELEASE;

  0007a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 82 f0 00 00
	00		 mov	 eax, DWORD PTR [edx+240]
  00083	83 c8 01	 or	 eax, 1
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	89 81 f0 00 00
	00		 mov	 DWORD PTR [ecx+240], eax
$L31965:

; 373  : 
; 374  :     }
; 375  : 
; 376  :     if (dwFlags & XACT_FLAG_SOUNDCUE_SYNCHRONOUS) {

  0008f	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00092	81 e2 00 00 00
	10		 and	 edx, 268435456		; 10000000H
  00098	85 d2		 test	 edx, edx
  0009a	74 08		 je	 SHORT $L31966

; 377  : 
; 378  :         //
; 379  :         // do work will stop and release this cue
; 380  :         //
; 381  : 
; 382  :         DoWork();

  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?DoWork@CSoundCue@XACT@@QAEXXZ ; XACT::CSoundCue::DoWork
$L31966:

; 383  :     }
; 384  : 
; 385  :     DPF_LEAVE_HRESULT(hr);
; 386  :     return hr;

  000a4	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
  000a7	89 45 e8	 mov	 DWORD PTR $T32439[ebp], eax
  000aa	8d 4d f0	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  000ad	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  000b2	8b 45 e8	 mov	 eax, DWORD PTR $T32439[ebp]

; 387  : 
; 388  : }

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?Stop@CSoundCue@XACT@@QAGJK@Z ENDP			; XACT::CSoundCue::Stop
XACTENG	ENDS
PUBLIC	?GetWaveBank@CSoundCue@XACT@@QAEXKPAPAVCWaveBank@2@@Z ; XACT::CSoundCue::GetWaveBank
; Function compile flags: /Odt
;	COMDAT ?GetWaveBank@CSoundCue@XACT@@QAEXKPAPAVCWaveBank@2@@Z
XACTENG	SEGMENT
_this$ = -12
_pWaveBankEntry$ = -8
_pWaveBank$ = -4
_dwWaveBankIndex$ = 8
_ppWaveBank$ = 12
?GetWaveBank@CSoundCue@XACT@@QAEXKPAPAVCWaveBank@2@@Z PROC NEAR ; XACT::CSoundCue::GetWaveBank, COMDAT
; _this$ = ecx

; 407  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 408  :     DPF_ENTER();
; 409  : 
; 410  :     PXACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY pWaveBankEntry = GetWaveBankTable();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetWaveBankTable@CSoundCue@XACT@@QAEPAU_XACT_SOUNDBANK_WAVEBANK_TABLE_ENTRY@@XZ ; XACT::CSoundCue::GetWaveBankTable
  00011	89 45 f8	 mov	 DWORD PTR _pWaveBankEntry$[ebp], eax

; 411  :     pWaveBankEntry += dwWaveBankIndex;

  00014	8b 45 08	 mov	 eax, DWORD PTR _dwWaveBankIndex$[ebp]
  00017	6b c0 14	 imul	 eax, 20			; 00000014H
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _pWaveBankEntry$[ebp]
  0001d	03 c8		 add	 ecx, eax
  0001f	89 4d f8	 mov	 DWORD PTR _pWaveBankEntry$[ebp], ecx

; 412  :     
; 413  :     CWaveBank *pWaveBank = (CWaveBank*) pWaveBankEntry->dwDataOffset;

  00022	8b 55 f8	 mov	 edx, DWORD PTR _pWaveBankEntry$[ebp]
  00025	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00028	89 45 fc	 mov	 DWORD PTR _pWaveBank$[ebp], eax

; 414  :     *ppWaveBank = pWaveBank;

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppWaveBank$[ebp]
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _pWaveBank$[ebp]
  00031	89 11		 mov	 DWORD PTR [ecx], edx

; 415  :     
; 416  : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?GetWaveBank@CSoundCue@XACT@@QAEXKPAPAVCWaveBank@2@@Z ENDP ; XACT::CSoundCue::GetWaveBank
XACTENG	ENDS
PUBLIC	??_C@_0ED@LEAGLJCG@pTrack?9?$DOpContentEntry?9?$DOwEventEnt@ ; `string'
PUBLIC	?SubmitEvent@CSoundCue@XACT@@AAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CSoundCue::SubmitEvent
EXTRN	__imp__KeQuerySystemTime@4:NEAR
;	COMDAT ??_C@_0ED@LEAGLJCG@pTrack?9?$DOpContentEntry?9?$DOwEventEnt@
XACTENG_RD	SEGMENT
??_C@_0ED@LEAGLJCG@pTrack?9?$DOpContentEntry?9?$DOwEventEnt@ DB 'pTrack->'
	DB	'pContentEntry->wEventEntryCount >= pTrack->wNextEventIndex', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?ScheduleTrackEvents@CSoundCue@XACT@@IAEJK@Z
XACTENG	SEGMENT
tv227 = -48
_this$ = -44
$T32447 = -40
$T32446 = -36
_i$31987 = -32
___AutoLock$ = -28
_pTrack$ = -24
_hr$ = -20
_pEventContext$ = -16
_pEvent$ = -12
_rtTimeThreshold$ = -8
_dwQuantum$ = 8
?ScheduleTrackEvents@CSoundCue@XACT@@IAEJK@Z PROC NEAR	; XACT::CSoundCue::ScheduleTrackEvents, COMDAT
; _this$ = ecx

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 428  :     HRESULT hr = S_OK;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 429  :     PTRACK_CONTEXT pTrack;
; 430  :     PTRACK_EVENT_CONTEXT pEventContext;
; 431  :     PXACT_TRACK_EVENT pEvent;
; 432  :     
; 433  :     REFERENCE_TIME rtTimeThreshold;
; 434  :     
; 435  :     ENTER_EXTERNAL_METHOD();

  00010	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 436  :     
; 437  :     DPF_ENTER();
; 438  :     
; 439  :     //
; 440  :     // run through content for all tracks and submit events up to the time
; 441  :     // of the current time + dwQuantum
; 442  :     //
; 443  :     
; 444  :     for (DWORD i=0;i<m_pSoundEntry->wTrackCount;i++) {

  00018	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$31987[ebp], 0
  0001f	eb 09		 jmp	 SHORT $L31988
$L31989:
  00021	8b 45 e0	 mov	 eax, DWORD PTR _i$31987[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 e0	 mov	 DWORD PTR _i$31987[ebp], eax
$L31988:
  0002a	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00030	0f b7 42 16	 movzx	 eax, WORD PTR [edx+22]
  00034	39 45 e0	 cmp	 DWORD PTR _i$31987[ebp], eax
  00037	0f 83 77 01 00
	00		 jae	 $L31990

; 445  :         
; 446  :         pTrack = &m_paTracks[i];

  0003d	8b 4d e0	 mov	 ecx, DWORD PTR _i$31987[ebp]
  00040	6b c9 30	 imul	 ecx, 48			; 00000030H
  00043	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00046	03 8a e8 00 00
	00		 add	 ecx, DWORD PTR [edx+232]
  0004c	89 4d e8	 mov	 DWORD PTR _pTrack$[ebp], ecx

; 447  :         ASSERT(pTrack->pContentEntry->wEventEntryCount >= pTrack->wNextEventIndex);

  0004f	68 bf 01 00 00	 push	 447			; 000001bfH
  00054	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0ED@LEAGLJCG@pTrack?9?$DOpContentEntry?9?$DOwEventEnt@
  0005e	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  00061	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00064	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  00068	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0006b	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  0006f	33 c0		 xor	 eax, eax
  00071	3b d1		 cmp	 edx, ecx
  00073	0f 9c c0	 setl	 al
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 448  :         
; 449  :         KeQuerySystemTime((PLARGE_INTEGER)&rtTimeThreshold);

  0007f	8d 4d f8	 lea	 ecx, DWORD PTR _rtTimeThreshold$[ebp]
  00082	51		 push	 ecx
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeQuerySystemTime@4

; 450  :         
; 451  :         rtTimeThreshold += dwQuantum;            

  00089	8b 55 08	 mov	 edx, DWORD PTR _dwQuantum$[ebp]
  0008c	33 c0		 xor	 eax, eax
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _rtTimeThreshold$[ebp]
  00091	03 ca		 add	 ecx, edx
  00093	8b 55 fc	 mov	 edx, DWORD PTR _rtTimeThreshold$[ebp+4]
  00096	13 d0		 adc	 edx, eax
  00098	89 4d f8	 mov	 DWORD PTR _rtTimeThreshold$[ebp], ecx
  0009b	89 55 fc	 mov	 DWORD PTR _rtTimeThreshold$[ebp+4], edx

; 452  :         
; 453  :         //
; 454  :         // this track might have already reached the end of its event table
; 455  :         //
; 456  :         
; 457  :         if (pTrack->wNextEventIndex >= pTrack->pContentEntry->wEventEntryCount)

  0009e	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  000a1	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  000a5	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  000a8	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000ab	0f b7 50 02	 movzx	 edx, WORD PTR [eax+2]
  000af	3b ca		 cmp	 ecx, edx
  000b1	7c 05		 jl	 SHORT $L31994

; 458  :         {
; 459  :             continue;

  000b3	e9 69 ff ff ff	 jmp	 $L31989
$L31994:

; 460  :         }
; 461  :         
; 462  :         do {
; 463  :             //
; 464  :             // retrieve the next event we need to queue up
; 465  :             // and create an event context for it
; 466  :             //
; 467  :             
; 468  :             hr = HRFROMP(pEventContext = NEW(TRACK_EVENT_CONTEXT));

  000b8	6a 20		 push	 32			; 00000020H
  000ba	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bf	83 c4 04	 add	 esp, 4
  000c2	89 45 dc	 mov	 DWORD PTR $T32446[ebp], eax
  000c5	8b 45 dc	 mov	 eax, DWORD PTR $T32446[ebp]
  000c8	89 45 f0	 mov	 DWORD PTR _pEventContext$[ebp], eax
  000cb	33 c9		 xor	 ecx, ecx
  000cd	83 7d f0 00	 cmp	 DWORD PTR _pEventContext$[ebp], 0
  000d1	0f 95 c1	 setne	 cl
  000d4	49		 dec	 ecx
  000d5	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  000db	89 4d ec	 mov	 DWORD PTR _hr$[ebp], ecx

; 469  :             
; 470  :             if (SUCCEEDED(hr)) {

  000de	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e2	7c 46		 jl	 SHORT $L32002

; 471  :                 
; 472  :                 InitializeListHead(&pEventContext->m_ListEntry);

  000e4	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  000e7	8b 45 f0	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  000ea	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000ed	8b 4d f0	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  000f0	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  000f3	89 11		 mov	 DWORD PTR [ecx], edx

; 473  :                 pEventContext->m_pTrack = pTrack;

  000f5	8b 45 f0	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  000f8	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  000fb	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 474  : 
; 475  :                 //
; 476  :                 // fine the event data in the content. We create the absolute data offset into the
; 477  :                 // soundbank by 
; 478  :                 // 1) getting the base soundbank data pointer +
; 479  :                 // 2) base data pointer for all events of this tracks
; 480  :                 // 3) data offset of this event form the start of the event data for the track
; 481  :                 //
; 482  : 
; 483  :                 pEventContext->m_pEventHeader = (PXACT_TRACK_EVENT_HEADER) 
; 484  :                     (m_pSoundBank->GetBaseDataOffset() + pTrack->pContentEntry->dwEventDataOffset +
; 485  :                      pTrack->wNextEventDataOffset);

  000fe	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00101	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00104	e8 00 00 00 00	 call	 ?GetBaseDataOffset@CSoundBank@XACT@@AAEPAEXZ ; XACT::CSoundBank::GetBaseDataOffset
  00109	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  0010c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0010f	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00112	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  00115	0f b7 51 10	 movzx	 edx, WORD PTR [ecx+16]
  00119	03 c2		 add	 eax, edx
  0011b	8b 4d f0	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  0011e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 486  :                 
; 487  :                 pEvent = (PXACT_TRACK_EVENT) pEventContext->m_pEventHeader;

  00121	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  00124	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00127	89 45 f4	 mov	 DWORD PTR _pEvent$[ebp], eax
$L32002:

; 488  :                 
; 489  :             }
; 490  : 
; 491  :             //
; 492  :             // increment event pointers into the content
; 493  :             //
; 494  :             
; 495  :             if (SUCCEEDED(hr)) {

  0012a	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0012e	7c 2b		 jl	 SHORT $L32006

; 496  :                 
; 497  :                 pTrack->wNextEventIndex++;

  00130	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  00133	66 8b 51 12	 mov	 dx, WORD PTR [ecx+18]
  00137	66 83 c2 01	 add	 dx, 1
  0013b	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0013e	66 89 50 12	 mov	 WORD PTR [eax+18], dx

; 498  :                 pTrack->wNextEventDataOffset += sizeof(XACT_TRACK_EVENT_HEADER) + pEvent->Header.wSize;

  00142	8b 4d f4	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00145	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  00149	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0014c	0f b7 48 10	 movzx	 ecx, WORD PTR [eax+16]
  00150	8d 54 11 0c	 lea	 edx, DWORD PTR [ecx+edx+12]
  00154	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  00157	66 89 50 10	 mov	 WORD PTR [eax+16], dx
$L32006:

; 499  :                 
; 500  :             }
; 501  : 
; 502  :             //
; 503  :             // process and submit event to sequencer
; 504  :             //
; 505  : 
; 506  :             if (SUCCEEDED(hr)) {

  0015b	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015f	7c 0f		 jl	 SHORT $L32009

; 507  :                 hr = SubmitEvent(pEventContext);

  00161	8b 4d f0	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00164	51		 push	 ecx
  00165	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00168	e8 00 00 00 00	 call	 ?SubmitEvent@CSoundCue@XACT@@AAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CSoundCue::SubmitEvent
  0016d	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32009:

; 508  :             }
; 509  : 
; 510  :             if (pTrack->wNextEventIndex >= pTrack->pContentEntry->wEventEntryCount)

  00170	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00173	0f b7 42 12	 movzx	 eax, WORD PTR [edx+18]
  00177	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  0017a	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0017d	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  00181	3b c1		 cmp	 eax, ecx
  00183	7c 02		 jl	 SHORT $L31995

; 511  :             {
; 512  :                 break;

  00185	eb 28		 jmp	 SHORT $L31996
$L31995:

; 513  :             }
; 514  : 
; 515  :             
; 516  :         } while ((pEventContext->m_rtTimeStamp < rtTimeThreshold) && SUCCEEDED(hr));

  00187	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0018a	89 55 d0	 mov	 DWORD PTR tv227[ebp], edx
  0018d	8b 45 d0	 mov	 eax, DWORD PTR tv227[ebp]
  00190	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00193	3b 4d fc	 cmp	 ecx, DWORD PTR _rtTimeThreshold$[ebp+4]
  00196	7f 17		 jg	 SHORT $L31996
  00198	7c 0b		 jl	 SHORT $L32448
  0019a	8b 55 d0	 mov	 edx, DWORD PTR tv227[ebp]
  0019d	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  001a0	3b 45 f8	 cmp	 eax, DWORD PTR _rtTimeThreshold$[ebp]
  001a3	73 0a		 jae	 SHORT $L31996
$L32448:
  001a5	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001a9	0f 8d 09 ff ff
	ff		 jge	 $L31994
$L31996:

; 517  :         
; 518  :     }

  001af	e9 6d fe ff ff	 jmp	 $L31989
$L31990:

; 519  :     
; 520  :     DPF_LEAVE_HRESULT(hr);
; 521  :     return hr;

  001b4	8b 4d ec	 mov	 ecx, DWORD PTR _hr$[ebp]
  001b7	89 4d d8	 mov	 DWORD PTR $T32447[ebp], ecx
  001ba	8d 4d e4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  001bd	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  001c2	8b 45 d8	 mov	 eax, DWORD PTR $T32447[ebp]

; 522  :     
; 523  : }

  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c2 04 00	 ret	 4
?ScheduleTrackEvents@CSoundCue@XACT@@IAEJK@Z ENDP	; XACT::CSoundCue::ScheduleTrackEvents
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\common.h
XACTENG	ENDS
;	COMDAT ??2@YAPAXI@Z
XACTENG	SEGMENT
_cbBuffer$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 71   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     using namespace XACT;
; 73   :     return XactMemAlloc(cbBuffer, FALSE); 

  00003	6a 00		 push	 0
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _XactMemAlloc@8

; 74   : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??2@YAPAXI@Z ENDP					; operator new
XACTENG	ENDS
PUBLIC	??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@ ; `string'
PUBLIC	??_C@_0CK@DNCBGNLO@dwTrackIndex?5?$DM?5m_pSoundEntry?9?$DOwT@ ; `string'
PUBLIC	?ScheduleRuntimeEvent@CSoundCue@XACT@@IAEJPAUXACT_TRACK_EVENT@@K@Z ; XACT::CSoundCue::ScheduleRuntimeEvent
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
; File c:\xbox\private\windows\directx\xact\runtime\engine\cue.cpp
XACTENG_RD	SEGMENT
??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@ DB 'Ke'
	DB	'GetCurrentIrql() == PASSIVE_LEVEL', 00H	; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CK@DNCBGNLO@dwTrackIndex?5?$DM?5m_pSoundEntry?9?$DOwT@
XACTENG_RD	SEGMENT
??_C@_0CK@DNCBGNLO@dwTrackIndex?5?$DM?5m_pSoundEntry?9?$DOwT@ DB 'dwTrack'
	DB	'Index < m_pSoundEntry->wTrackCount', 00H	; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?ScheduleRuntimeEvent@CSoundCue@XACT@@IAEJPAUXACT_TRACK_EVENT@@K@Z
XACTENG	SEGMENT
tv219 = -68
tv210 = -64
_this$ = -56
$T32459 = -52
$T32458 = -48
$T32457 = -44
$T32456 = -40
$T32455 = -36
_fTemp$32048 = -32
_i$32030 = -28
___AutoLock$ = -24
_hr$ = -20
_pEventContext$ = -16
_dwEnd$ = -12
_pEvent$ = -8
_dwStart$ = -4
_pEventDesc$ = 8
_dwTrackIndex$ = 12
?ScheduleRuntimeEvent@CSoundCue@XACT@@IAEJPAUXACT_TRACK_EVENT@@K@Z PROC NEAR ; XACT::CSoundCue::ScheduleRuntimeEvent, COMDAT
; _this$ = ecx

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 530  :     HRESULT hr = S_OK;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 531  :     DWORD dwStart, dwEnd;
; 532  :     PTRACK_EVENT_CONTEXT pEventContext = NULL;

  00010	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pEventContext$[ebp], 0

; 533  :     PXACT_TRACK_EVENT pEvent = NULL;

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pEvent$[ebp], 0

; 534  : 
; 535  :     ENTER_EXTERNAL_METHOD();

  0001e	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00021	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 536  :     ASSERT_IN_PASSIVE;

  00026	68 18 02 00 00	 push	 536			; 00000218H
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@KKOENIAD@KeGetCurrentIrql?$CI?$CJ?5?$DN?$DN?5PASSIVE_LE@
  00035	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	f7 d8		 neg	 eax
  0003f	1b c0		 sbb	 eax, eax
  00041	f7 d8		 neg	 eax
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 537  : 
; 538  :     if (dwTrackIndex == XACT_TRACK_INDEX_UNUSED) {

  0004c	83 7d 0c ff	 cmp	 DWORD PTR _dwTrackIndex$[ebp], -1
  00050	75 16		 jne	 SHORT $L32027

; 539  : 
; 540  :         //
; 541  :         // this events needs to be scheduled for all tracks
; 542  :         //
; 543  : 
; 544  :         dwStart = 0; dwEnd = m_pSoundEntry->wTrackCount;

  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwStart$[ebp], 0
  00059	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0005f	0f b7 42 16	 movzx	 eax, WORD PTR [edx+22]
  00063	89 45 f4	 mov	 DWORD PTR _dwEnd$[ebp], eax

; 545  : 
; 546  :     } else {

  00066	eb 37		 jmp	 SHORT $L32028
$L32027:

; 547  : 
; 548  :         ASSERT(dwTrackIndex < m_pSoundEntry->wTrackCount);

  00068	68 24 02 00 00	 push	 548			; 00000224H
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CK@DNCBGNLO@dwTrackIndex?5?$DM?5m_pSoundEntry?9?$DOwT@
  00077	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0007d	0f b7 42 16	 movzx	 eax, WORD PTR [edx+22]
  00081	39 45 0c	 cmp	 DWORD PTR _dwTrackIndex$[ebp], eax
  00084	1b c9		 sbb	 ecx, ecx
  00086	41		 inc	 ecx
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0008d	83 c4 10	 add	 esp, 16			; 00000010H

; 549  :         dwStart = dwTrackIndex;

  00090	8b 55 0c	 mov	 edx, DWORD PTR _dwTrackIndex$[ebp]
  00093	89 55 fc	 mov	 DWORD PTR _dwStart$[ebp], edx

; 550  :         dwEnd = dwTrackIndex+1;

  00096	8b 45 0c	 mov	 eax, DWORD PTR _dwTrackIndex$[ebp]
  00099	83 c0 01	 add	 eax, 1
  0009c	89 45 f4	 mov	 DWORD PTR _dwEnd$[ebp], eax
$L32028:

; 551  : 
; 552  :     }
; 553  :     
; 554  : 
; 555  :     for (DWORD i=dwStart;i<dwEnd;i++) {

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  000a2	89 4d e4	 mov	 DWORD PTR _i$32030[ebp], ecx
  000a5	eb 09		 jmp	 SHORT $L32031
$L32032:
  000a7	8b 55 e4	 mov	 edx, DWORD PTR _i$32030[ebp]
  000aa	83 c2 01	 add	 edx, 1
  000ad	89 55 e4	 mov	 DWORD PTR _i$32030[ebp], edx
$L32031:
  000b0	8b 45 e4	 mov	 eax, DWORD PTR _i$32030[ebp]
  000b3	3b 45 f4	 cmp	 eax, DWORD PTR _dwEnd$[ebp]
  000b6	0f 83 66 01 00
	00		 jae	 $L32033

; 556  :         
; 557  :         //
; 558  :         // create an event context for this event
; 559  :         //
; 560  :         
; 561  :         hr = HRFROMP(pEventContext = NEW(TRACK_EVENT_CONTEXT));

  000bc	6a 20		 push	 32			; 00000020H
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c3	83 c4 04	 add	 esp, 4
  000c6	89 45 dc	 mov	 DWORD PTR $T32455[ebp], eax
  000c9	8b 4d dc	 mov	 ecx, DWORD PTR $T32455[ebp]
  000cc	89 4d f0	 mov	 DWORD PTR _pEventContext$[ebp], ecx
  000cf	33 d2		 xor	 edx, edx
  000d1	83 7d f0 00	 cmp	 DWORD PTR _pEventContext$[ebp], 0
  000d5	0f 95 c2	 setne	 dl
  000d8	4a		 dec	 edx
  000d9	81 e2 0e 00 07
	80		 and	 edx, -2147024882	; 8007000eH
  000df	89 55 ec	 mov	 DWORD PTR _hr$[ebp], edx

; 562  :         
; 563  :         if (SUCCEEDED(hr)) {            

  000e2	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000e6	7c 28		 jl	 SHORT $L32039

; 564  :             hr = HRFROMP(pEvent = NEW(XACT_TRACK_EVENT));            

  000e8	6a 50		 push	 80			; 00000050H
  000ea	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ef	83 c4 04	 add	 esp, 4
  000f2	89 45 d8	 mov	 DWORD PTR $T32456[ebp], eax
  000f5	8b 45 d8	 mov	 eax, DWORD PTR $T32456[ebp]
  000f8	89 45 f8	 mov	 DWORD PTR _pEvent$[ebp], eax
  000fb	33 c9		 xor	 ecx, ecx
  000fd	83 7d f8 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  00101	0f 95 c1	 setne	 cl
  00104	49		 dec	 ecx
  00105	81 e1 0e 00 07
	80		 and	 ecx, -2147024882	; 8007000eH
  0010b	89 4d ec	 mov	 DWORD PTR _hr$[ebp], ecx

; 565  :         } else {

  0010e	eb 07		 jmp	 SHORT $L32044
$L32039:

; 566  :             pEvent = NULL;

  00110	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pEvent$[ebp], 0
$L32044:

; 567  :         }
; 568  :         
; 569  :         if (SUCCEEDED(hr)) {            

  00117	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011b	0f 8c b0 00 00
	00		 jl	 $L32046

; 570  : 
; 571  :             //
; 572  :             // copy user event desc
; 573  :             //            
; 574  : 
; 575  :             memcpy(pEvent,pEventDesc,sizeof(XACT_TRACK_EVENT));            

  00121	6a 50		 push	 80			; 00000050H
  00123	8b 55 08	 mov	 edx, DWORD PTR _pEventDesc$[ebp]
  00126	52		 push	 edx
  00127	8b 45 f8	 mov	 eax, DWORD PTR _pEvent$[ebp]
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _memcpy
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  : 
; 577  :             //
; 578  :             // setup the event context
; 579  :             //            
; 580  : 
; 581  :             pEventContext->m_pEventHeader = &pEvent->Header;

  00133	8b 4d f0	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00136	8b 55 f8	 mov	 edx, DWORD PTR _pEvent$[ebp]
  00139	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 582  :             pEventContext->m_pTrack = &m_paTracks[i];

  0013c	8b 45 e4	 mov	 eax, DWORD PTR _i$32030[ebp]
  0013f	6b c0 30	 imul	 eax, 48			; 00000030H
  00142	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	03 81 e8 00 00
	00		 add	 eax, DWORD PTR [ecx+232]
  0014b	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0014e	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 583  :             InitializeListHead(&pEventContext->m_ListEntry);

  00151	8b 45 f0	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  00154	8b 4d f0	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00157	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0015a	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0015d	8b 45 f0	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  00160	89 02		 mov	 DWORD PTR [edx], eax

; 584  : 
; 585  :             //
; 586  :             // the sample time has to be adjusted based on the real playback
; 587  :             // frequency of the track. When the event was submitted 48k was assumed
; 588  :             //
; 589  : 
; 590  :             FLOAT fTemp = (FLOAT) pEventContext->m_pEventHeader->lSampleTime;

  00162	8b 4d f0	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00165	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00168	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0016b	89 45 c0	 mov	 DWORD PTR tv210[ebp], eax
  0016e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv210[ebp+4], 0
  00175	df 6d c0	 fild	 QWORD PTR tv210[ebp]
  00178	d9 5d e0	 fstp	 DWORD PTR _fTemp$32048[ebp]

; 591  :             fTemp = fTemp * (48000/m_paTracks[i].wSamplesPerSec);

  0017b	8b 4d e4	 mov	 ecx, DWORD PTR _i$32030[ebp]
  0017e	6b c9 30	 imul	 ecx, 48			; 00000030H
  00181	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00184	8b 82 e8 00 00
	00		 mov	 eax, DWORD PTR [edx+232]
  0018a	0f b7 4c 08 18	 movzx	 ecx, WORD PTR [eax+ecx+24]
  0018f	b8 80 bb 00 00	 mov	 eax, 48000		; 0000bb80H
  00194	99		 cdq
  00195	f7 f9		 idiv	 ecx
  00197	89 45 bc	 mov	 DWORD PTR tv219[ebp], eax
  0019a	db 45 bc	 fild	 DWORD PTR tv219[ebp]
  0019d	d8 4d e0	 fmul	 DWORD PTR _fTemp$32048[ebp]
  001a0	d9 55 e0	 fst	 DWORD PTR _fTemp$32048[ebp]

; 592  :             pEventContext->m_pEventHeader->lSampleTime = (LONG) fTemp;

  001a3	e8 00 00 00 00	 call	 __ftol2
  001a8	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  001ab	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  001ae	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 593  : 
; 594  :             //
; 595  :             // flag this event as being external
; 596  :             //
; 597  : 
; 598  :             pEvent->Header.dwFlags |= XACT_FLAG_EVENT_RUNTIME;

  001b1	8b 55 f8	 mov	 edx, DWORD PTR _pEvent$[ebp]
  001b4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001b7	83 c8 01	 or	 eax, 1
  001ba	8b 4d f8	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  001bd	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 599  : 
; 600  :             //
; 601  :             // submit event to sequencer
; 602  :             //
; 603  : 
; 604  :             hr = SubmitEvent(pEventContext);

  001c0	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  001c3	52		 push	 edx
  001c4	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	e8 00 00 00 00	 call	 ?SubmitEvent@CSoundCue@XACT@@AAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CSoundCue::SubmitEvent
  001cc	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 605  :             
; 606  :         } else {            

  001cf	eb 4c		 jmp	 SHORT $L32051
$L32046:

; 607  : 
; 608  :             if (pEvent)

  001d1	83 7d f8 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  001d5	74 1f		 je	 SHORT $L32052

; 609  :                 DELETE(pEvent);

  001d7	83 7d f8 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  001db	74 19		 je	 SHORT $L32052
  001dd	8b 45 f8	 mov	 eax, DWORD PTR _pEvent$[ebp]
  001e0	89 45 d4	 mov	 DWORD PTR $T32457[ebp], eax
  001e3	8b 4d d4	 mov	 ecx, DWORD PTR $T32457[ebp]
  001e6	51		 push	 ecx
  001e7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ec	83 c4 04	 add	 esp, 4
  001ef	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pEvent$[ebp], 0
$L32052:

; 610  :             
; 611  :             if (pEventContext)

  001f6	83 7d f0 00	 cmp	 DWORD PTR _pEventContext$[ebp], 0
  001fa	74 1f		 je	 SHORT $L32055

; 612  :                 DELETE(pEventContext);

  001fc	83 7d f0 00	 cmp	 DWORD PTR _pEventContext$[ebp], 0
  00200	74 19		 je	 SHORT $L32055
  00202	8b 55 f0	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  00205	89 55 d0	 mov	 DWORD PTR $T32458[ebp], edx
  00208	8b 45 d0	 mov	 eax, DWORD PTR $T32458[ebp]
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00211	83 c4 04	 add	 esp, 4
  00214	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pEventContext$[ebp], 0
$L32055:

; 613  : 
; 614  :             break;

  0021b	eb 05		 jmp	 SHORT $L32033
$L32051:

; 615  :         }
; 616  : 
; 617  :     }

  0021d	e9 85 fe ff ff	 jmp	 $L32032
$L32033:

; 618  : 
; 619  :     return hr;

  00222	8b 4d ec	 mov	 ecx, DWORD PTR _hr$[ebp]
  00225	89 4d cc	 mov	 DWORD PTR $T32459[ebp], ecx
  00228	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0022b	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00230	8b 45 cc	 mov	 eax, DWORD PTR $T32459[ebp]

; 620  : }

  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c2 08 00	 ret	 8
?ScheduleRuntimeEvent@CSoundCue@XACT@@IAEJPAUXACT_TRACK_EVENT@@K@Z ENDP ; XACT::CSoundCue::ScheduleRuntimeEvent
XACTENG	ENDS
PUBLIC	??_C@_06KCBOCDPD@pEvent?$AA@			; `string'
PUBLIC	??_C@_0BH@KFACCGJP@CSoundCue?3?3SubmitEvent?$AA@ ; `string'
PUBLIC	??_C@_0CI@OOEDLAHP@Could?5not?5allocate?5voice?5for?5Pla@ ; `string'
PUBLIC	?IsPositional@CSoundCue@XACT@@IAEHXZ		; XACT::CSoundCue::IsPositional
PUBLIC	??_C@_0BI@JIKBNEFO@pTrack?9?$DOwLoopCount?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
PUBLIC	?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ ; XACT::CSoundSource::GetDSoundStream
PUBLIC	?GetWaveBankEntry@CWaveBank@XACT@@QAEPAU_WAVEBANKENTRY@@K@Z ; XACT::CWaveBank::GetWaveBankEntry
PUBLIC	?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z ; XACT::CWaveBank::SetBufferData
PUBLIC	??0CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::CAutoIrql
PUBLIC	??1CAutoIrql@XACT@@QAE@XZ			; XACT::CAutoIrql::~CAutoIrql
PUBLIC	?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z ; IDirectSoundBuffer::SetFormat
PUBLIC	?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ; IDirectSoundBuffer::SetOutputBuffer
PUBLIC	?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z	; XACT::InsertTailList
PUBLIC	?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z	; IDirectSoundBuffer::SetPlayRegion
PUBLIC	?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z	; IDirectSoundBuffer::SetLoopRegion
EXTRN	?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z:NEAR ; XACT::CEngine::CreateSoundSourceInternal
EXTRN	?GetTime@CEngine@XACT@@QAEXPA_J@Z:NEAR		; XACT::CEngine::GetTime
EXTRN	?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z:NEAR ; XACT::CEngine::CreateEventTimeStamp
EXTRN	?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z:NEAR ; XACT::CEngine::PrintTimeStamps
EXTRN	_XAudioCreatePcmFormat@16:NEAR
EXTRN	_XAudioCreateAdpcmFormat@12:NEAR
;	COMDAT ??_C@_06KCBOCDPD@pEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_06KCBOCDPD@pEvent?$AA@ DB 'pEvent', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@KFACCGJP@CSoundCue?3?3SubmitEvent?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@KFACCGJP@CSoundCue?3?3SubmitEvent?$AA@ DB 'CSoundCue::SubmitEve'
	DB	'nt', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CI@OOEDLAHP@Could?5not?5allocate?5voice?5for?5Pla@
XACTENG_RD	SEGMENT
??_C@_0CI@OOEDLAHP@Could?5not?5allocate?5voice?5for?5Pla@ DB 'Could not a'
	DB	'llocate voice for Play event', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BI@JIKBNEFO@pTrack?9?$DOwLoopCount?5?$DN?$DN?50?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@JIKBNEFO@pTrack?9?$DOwLoopCount?5?$DN?$DN?50?$AA@ DB 'pTrack->w'
	DB	'LoopCount == 0', 00H			; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?SubmitEvent@CSoundCue@XACT@@AAEJPAU_TRACK_EVENT_CONTEXT@2@@Z
XACTENG	SEGMENT
tv75 = -68
_this$ = -64
___AutoIrql$32111 = -60
_pWaveBankEntry$32081 = -52
_waveFormat$32079 = -48
_pWaveBank$32080 = -28
_pTrack$ = -24
_hr$ = -20
_bUpdateTrackTime$ = -16
_pEvent$ = -12
_pDSBuffer$ = -8
_pDSStream$ = -4
_pEventContext$ = 8
?SubmitEvent@CSoundCue@XACT@@AAEJPAU_TRACK_EVENT_CONTEXT@2@@Z PROC NEAR ; XACT::CSoundCue::SubmitEvent, COMDAT
; _this$ = ecx

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 627  : 
; 628  :     HRESULT hr = S_OK;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 629  :     PXACT_TRACK_EVENT pEvent = (PXACT_TRACK_EVENT) pEventContext->m_pEventHeader;

  00010	8b 45 08	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  00013	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00016	89 4d f4	 mov	 DWORD PTR _pEvent$[ebp], ecx

; 630  :     PTRACK_CONTEXT pTrack = pEventContext->m_pTrack;

  00019	8b 55 08	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0001c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001f	89 45 e8	 mov	 DWORD PTR _pTrack$[ebp], eax

; 631  : 
; 632  :     LPDIRECTSOUNDBUFFER pDSBuffer;
; 633  :     LPDIRECTSOUNDSTREAM pDSStream;
; 634  :     BOOL bUpdateTrackTime = FALSE;

  00022	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bUpdateTrackTime$[ebp], 0

; 635  : 
; 636  :     ASSERT(pEvent);

  00029	68 7c 02 00 00	 push	 636			; 0000027cH
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06KCBOCDPD@pEvent?$AA@
  00038	33 c9		 xor	 ecx, ecx
  0003a	83 7d f4 00	 cmp	 DWORD PTR _pEvent$[ebp], 0
  0003e	0f 94 c1	 sete	 cl
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00047	83 c4 10	 add	 esp, 16			; 00000010H

; 637  :     
; 638  :     //
; 639  :     // some events need special processing before they are added to the schedule
; 640  :     //    
; 641  : 
; 642  :     switch (pEventContext->m_pEventHeader->wType) {

  0004a	8b 55 08	 mov	 edx, DWORD PTR _pEventContext$[ebp]
  0004d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00050	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00053	89 4d bc	 mov	 DWORD PTR tv75[ebp], ecx
  00056	83 7d bc 0c	 cmp	 DWORD PTR tv75[ebp], 12	; 0000000cH
  0005a	0f 87 83 02 00
	00		 ja	 $L32073
  00060	8b 55 bc	 mov	 edx, DWORD PTR tv75[ebp]
  00063	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $L32465[edx]
  0006a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L32466[eax*4]
$L32076:

; 643  :     case eXACTEvent_PlayWithPitchAndVolumeVariation:
; 644  :     case eXACTEvent_Play:
; 645  :         
; 646  :         if (pEvent->Header.dwFlags & XACT_FLAG_EVENT_USES_FXIN) {                    

  00071	8b 4d f4	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  00074	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00077	83 e2 02	 and	 edx, 2
  0007a	85 d2		 test	 edx, edx
  0007c	74 05		 je	 SHORT $L32077

; 647  :             //
; 648  :             // TODO set the buffer to read from an FXIN
; 649  :             //                                                            
; 650  :         } else {

  0007e	e9 b8 01 00 00	 jmp	 $L32078
$L32077:

; 651  :             
; 652  :             WAVEBANKUNIWAVEFORMAT waveFormat;
; 653  :             CWaveBank *pWaveBank;
; 654  :             LPWAVEBANKENTRY pWaveBankEntry;
; 655  :             
; 656  :             GetWaveBank(pEvent->EventData.Play.PlayDesc.WaveSource.wBankIndex,&pWaveBank);

  00083	8d 45 e4	 lea	 eax, DWORD PTR _pWaveBank$32080[ebp]
  00086	50		 push	 eax
  00087	8b 4d f4	 mov	 ecx, DWORD PTR _pEvent$[ebp]
  0008a	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  0008e	52		 push	 edx
  0008f	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?GetWaveBank@CSoundCue@XACT@@QAEXKPAPAVCWaveBank@2@@Z ; XACT::CSoundCue::GetWaveBank

; 657  :             
; 658  :             //
; 659  :             // get the actual wavebank entry describing the wave we want to play
; 660  :             //
; 661  :             
; 662  :             pWaveBankEntry = pWaveBank->GetWaveBankEntry(                
; 663  :                 pEvent->EventData.Play.PlayDesc.WaveSource.wWaveIndex);

  00097	8b 45 f4	 mov	 eax, DWORD PTR _pEvent$[ebp]
  0009a	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  0009e	51		 push	 ecx
  0009f	8b 4d e4	 mov	 ecx, DWORD PTR _pWaveBank$32080[ebp]
  000a2	e8 00 00 00 00	 call	 ?GetWaveBankEntry@CWaveBank@XACT@@QAEPAU_WAVEBANKENTRY@@K@Z ; XACT::CWaveBank::GetWaveBankEntry
  000a7	89 45 cc	 mov	 DWORD PTR _pWaveBankEntry$32081[ebp], eax

; 664  :             
; 665  :             //
; 666  :             // if this track has no source voice allocated it for it, get one now
; 667  :             //
; 668  :             
; 669  :             if (pTrack->pSoundSource == NULL) {

  000aa	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  000ad	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000b0	75 53		 jne	 SHORT $L32082

; 670  :                 
; 671  :                 hr = g_pEngine->CreateSoundSourceInternal(
; 672  :                     XACT_FLAG_SOUNDSOURCE_2D,
; 673  :                     pWaveBank,
; 674  :                     &pTrack->pSoundSource);

  000b2	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d e4	 mov	 ecx, DWORD PTR _pWaveBank$32080[ebp]
  000b9	51		 push	 ecx
  000ba	6a 01		 push	 1
  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  000c2	e8 00 00 00 00	 call	 ?CreateSoundSourceInternal@CEngine@XACT@@QAEJKPAVCWaveBank@2@PAPAVCSoundSource@2@@Z ; XACT::CEngine::CreateSoundSourceInternal
  000c7	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 675  :                 
; 676  :                 if (FAILED(hr)) {

  000ca	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ce	7d 35		 jge	 SHORT $L32082

; 677  :                     
; 678  :                     DPF_ERROR("Could not allocate voice for Play event");

  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KFACCGJP@CSoundCue?3?3SubmitEvent?$AA@
  000da	68 a6 02 00 00	 push	 678			; 000002a6H
  000df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  000e4	6a 01		 push	 1
  000e6	6a 09		 push	 9
  000e8	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000ed	83 c4 18	 add	 esp, 24			; 00000018H
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@OOEDLAHP@Could?5not?5allocate?5voice?5for?5Pla@
  000f5	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000fa	83 c4 04	 add	 esp, 4

; 679  :                     return hr;

  000fd	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]
  00100	e9 6d 02 00 00	 jmp	 $L32062
$L32082:

; 680  :                 }
; 681  :                 
; 682  :             }
; 683  :             
; 684  :             pDSBuffer = pTrack->pSoundSource->GetDSoundBuffer();

  00105	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00108	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0010a	e8 00 00 00 00	 call	 ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
  0010f	89 45 f8	 mov	 DWORD PTR _pDSBuffer$[ebp], eax

; 685  :             pDSStream = pTrack->pSoundSource->GetDSoundStream();

  00112	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  00115	8b 08		 mov	 ecx, DWORD PTR [eax]
  00117	e8 00 00 00 00	 call	 ?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ ; XACT::CSoundSource::GetDSoundStream
  0011c	89 45 fc	 mov	 DWORD PTR _pDSStream$[ebp], eax

; 686  :             
; 687  :             //
; 688  :             // set the proper format for the hw buffer/stream
; 689  :             //
; 690  :             
; 691  :             if (pWaveBankEntry->Format.wFormatTag == WAVEBANKMINIFORMAT_TAG_PCM) {

  0011f	8b 4d cc	 mov	 ecx, DWORD PTR _pWaveBankEntry$32081[ebp]
  00122	8b 11		 mov	 edx, DWORD PTR [ecx]
  00124	83 e2 01	 and	 edx, 1
  00127	85 d2		 test	 edx, edx
  00129	75 3b		 jne	 SHORT $L32087

; 692  :                 
; 693  :                 XAudioCreatePcmFormat(pWaveBankEntry->Format.nChannels,
; 694  :                     pWaveBankEntry->Format.nSamplesPerSec,
; 695  :                     (pWaveBankEntry->Format.wBitsPerSample == WAVEBANKMINIFORMAT_BITDEPTH_8 ) ? 8 : 16, 
; 696  :                     &waveFormat.WaveFormatEx);

  0012b	8d 45 d0	 lea	 eax, DWORD PTR _waveFormat$32079[ebp]
  0012e	50		 push	 eax
  0012f	8b 4d cc	 mov	 ecx, DWORD PTR _pWaveBankEntry$32081[ebp]
  00132	8b 11		 mov	 edx, DWORD PTR [ecx]
  00134	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00137	83 e2 01	 and	 edx, 1
  0013a	f7 da		 neg	 edx
  0013c	1b d2		 sbb	 edx, edx
  0013e	83 e2 08	 and	 edx, 8
  00141	83 c2 08	 add	 edx, 8
  00144	52		 push	 edx
  00145	8b 45 cc	 mov	 eax, DWORD PTR _pWaveBankEntry$32081[ebp]
  00148	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014a	c1 e9 04	 shr	 ecx, 4
  0014d	81 e1 ff ff ff
	07		 and	 ecx, 134217727		; 07ffffffH
  00153	51		 push	 ecx
  00154	8b 55 cc	 mov	 edx, DWORD PTR _pWaveBankEntry$32081[ebp]
  00157	8b 02		 mov	 eax, DWORD PTR [edx]
  00159	d1 e8		 shr	 eax, 1
  0015b	83 e0 07	 and	 eax, 7
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 _XAudioCreatePcmFormat@16

; 697  :                 
; 698  :             } else {

  00164	eb 22		 jmp	 SHORT $L32088
$L32087:

; 699  :                 
; 700  :                 XAudioCreateAdpcmFormat(pWaveBankEntry->Format.nChannels,
; 701  :                     pWaveBankEntry->Format.nSamplesPerSec,
; 702  :                     &waveFormat.AdpcmWaveFormat);

  00166	8d 4d d0	 lea	 ecx, DWORD PTR _waveFormat$32079[ebp]
  00169	51		 push	 ecx
  0016a	8b 55 cc	 mov	 edx, DWORD PTR _pWaveBankEntry$32081[ebp]
  0016d	8b 02		 mov	 eax, DWORD PTR [edx]
  0016f	c1 e8 04	 shr	 eax, 4
  00172	25 ff ff ff 07	 and	 eax, 134217727		; 07ffffffH
  00177	50		 push	 eax
  00178	8b 4d cc	 mov	 ecx, DWORD PTR _pWaveBankEntry$32081[ebp]
  0017b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017d	d1 ea		 shr	 edx, 1
  0017f	83 e2 07	 and	 edx, 7
  00182	52		 push	 edx
  00183	e8 00 00 00 00	 call	 _XAudioCreateAdpcmFormat@12
$L32088:

; 703  :                 
; 704  :             }
; 705  :             
; 706  :             //
; 707  :             // keep track of what source freq the wave is so the 
; 708  :             // sample time stamps in each event can be properly converted
; 709  :             //
; 710  :             
; 711  :             pTrack->wSamplesPerSec = (WORD)waveFormat.WaveFormatEx.nSamplesPerSec;

  00188	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0018b	66 8b 4d d4	 mov	 cx, WORD PTR _waveFormat$32079[ebp+4]
  0018f	66 89 48 18	 mov	 WORD PTR [eax+24], cx

; 712  :             
; 713  :             //
; 714  :             // BUGBUG at this point we should morph a buffer into a stream, 
; 715  :             // if the wavebank is streamed
; 716  :             //
; 717  :             
; 718  :             if (pDSBuffer) {                    

  00193	83 7d f8 00	 cmp	 DWORD PTR _pDSBuffer$[ebp], 0
  00197	0f 84 9e 00 00
	00		 je	 $L32078

; 719  :                 
; 720  :                 hr = pDSBuffer->SetFormat(&waveFormat.WaveFormatEx);

  0019d	8d 55 d0	 lea	 edx, DWORD PTR _waveFormat$32079[ebp]
  001a0	52		 push	 edx
  001a1	8b 45 f8	 mov	 eax, DWORD PTR _pDSBuffer$[ebp]
  001a4	50		 push	 eax
  001a5	e8 00 00 00 00	 call	 ?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z ; IDirectSoundBuffer::SetFormat
  001aa	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 721  :                 
; 722  :                 //
; 723  :                 // the buffer size to span entire wavebank. a voice has already been associated with this wavebank
; 724  :                 // making this call very fast
; 725  :                 //
; 726  :                 
; 727  :                 if (SUCCEEDED(hr)){

  001ad	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001b1	7c 0f		 jl	 SHORT $L32092

; 728  :                     
; 729  :                     hr = pWaveBank->SetBufferData(pDSBuffer);

  001b3	8b 4d f8	 mov	 ecx, DWORD PTR _pDSBuffer$[ebp]
  001b6	51		 push	 ecx
  001b7	8b 4d e4	 mov	 ecx, DWORD PTR _pWaveBank$32080[ebp]
  001ba	e8 00 00 00 00	 call	 ?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z ; XACT::CWaveBank::SetBufferData
  001bf	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32092:

; 730  :                     
; 731  :                 }
; 732  :                 
; 733  :                 if (SUCCEEDED(hr)){

  001c2	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c6	7c 1a		 jl	 SHORT $L32094

; 734  :                     
; 735  :                     //
; 736  :                     // set the correct play region for this wave and wavebank
; 737  :                     //
; 738  :                     
; 739  :                     hr = pDSBuffer->SetPlayRegion(
; 740  :                         pWaveBankEntry->PlayRegion.dwStart,
; 741  :                         pWaveBankEntry->PlayRegion.dwLength);

  001c8	8b 55 cc	 mov	 edx, DWORD PTR _pWaveBankEntry$32081[ebp]
  001cb	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001ce	50		 push	 eax
  001cf	8b 4d cc	 mov	 ecx, DWORD PTR _pWaveBankEntry$32081[ebp]
  001d2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d5	52		 push	 edx
  001d6	8b 45 f8	 mov	 eax, DWORD PTR _pDSBuffer$[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z ; IDirectSoundBuffer::SetPlayRegion
  001df	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32094:

; 742  :                     
; 743  :                 }
; 744  :                 
; 745  :                 if (SUCCEEDED(hr)) {

  001e2	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001e6	7c 1a		 jl	 SHORT $L32096

; 746  :                     
; 747  :                     //
; 748  :                     // set loop region
; 749  :                     //
; 750  :                     
; 751  :                     hr = pDSBuffer->SetLoopRegion(
; 752  :                         pWaveBankEntry->LoopRegion.dwStart,
; 753  :                         pWaveBankEntry->LoopRegion.dwLength);

  001e8	8b 4d cc	 mov	 ecx, DWORD PTR _pWaveBankEntry$32081[ebp]
  001eb	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001ee	52		 push	 edx
  001ef	8b 45 cc	 mov	 eax, DWORD PTR _pWaveBankEntry$32081[ebp]
  001f2	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001f5	51		 push	 ecx
  001f6	8b 55 f8	 mov	 edx, DWORD PTR _pDSBuffer$[ebp]
  001f9	52		 push	 edx
  001fa	e8 00 00 00 00	 call	 ?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z ; IDirectSoundBuffer::SetLoopRegion
  001ff	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32096:

; 754  :                     
; 755  :                 }
; 756  :                 
; 757  :                 if (SUCCEEDED(hr)) {

  00202	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00206	7c 33		 jl	 SHORT $L32078

; 758  :                     
; 759  :                     //
; 760  :                     // associate this source voice with a destination
; 761  :                     //
; 762  :                     
; 763  :                     if (IsPositional() && m_pControlSoundSource){

  00208	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0020b	e8 00 00 00 00	 call	 ?IsPositional@CSoundCue@XACT@@IAEHXZ ; XACT::CSoundCue::IsPositional
  00210	85 c0		 test	 eax, eax
  00212	74 27		 je	 SHORT $L32078
  00214	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00217	83 b8 f4 00 00
	00 00		 cmp	 DWORD PTR [eax+244], 0
  0021e	74 1b		 je	 SHORT $L32078

; 764  :                         hr = pDSBuffer->SetOutputBuffer(m_pControlSoundSource->GetDSoundBuffer());

  00220	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  00223	8b 89 f4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+244]
  00229	e8 00 00 00 00	 call	 ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ; XACT::CSoundSource::GetDSoundBuffer
  0022e	50		 push	 eax
  0022f	8b 55 f8	 mov	 edx, DWORD PTR _pDSBuffer$[ebp]
  00232	52		 push	 edx
  00233	e8 00 00 00 00	 call	 ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ; IDirectSoundBuffer::SetOutputBuffer
  00238	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32078:

; 765  :                     }
; 766  :                     
; 767  :                 }
; 768  :                 
; 769  :             } else { // if DSBUffer
; 770  :                 
; 771  :                 //
; 772  :                 // Stream
; 773  :                 // Get some packets with disk data and submit them to the sound source
; 774  :                 // for streaming
; 775  :                 //
; 776  :                 
; 777  :             }
; 778  :             
; 779  :         } // if FXSOURCE
; 780  :          
; 781  :         if (pTrack->wNextEventIndex == 0) {        

  0023b	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  0023e	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00242	85 c9		 test	 ecx, ecx
  00244	75 07		 jne	 SHORT $L32101

; 782  : 
; 783  :             //
; 784  :             // this is the firt play event for this track.
; 785  :             // record the start time
; 786  :             //            
; 787  : 
; 788  :             bUpdateTrackTime = TRUE;

  00246	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bUpdateTrackTime$[ebp], 1
$L32101:

; 789  :         }
; 790  :         
; 791  :         break;

  0024d	e9 91 00 00 00	 jmp	 $L32073
$L32103:

; 792  :          
; 793  :     case eXACTEvent_Stop:
; 794  :         
; 795  :         //
; 796  :         // stop does not need any additional processing
; 797  :         //
; 798  :         
; 799  :         break;
; 800  :       
; 801  :     case eXACTEvent_LoopStart:
; 802  :         
; 803  :         //
; 804  :         // loop is starting set the loop count,remember index to jump to
; 805  :         // on loop end. Loops work like this:
; 806  :         // When the loopStart event is encountered we setup the number of loop
; 807  :         // we need to execute and the event index into the context we need to loop
; 808  :         // BACK after the loop ends. that event is the LoopStart
; 809  :         // event. When we encounter a loopEnd event, we jump back to the cached index.
; 810  :         // and we actually skip the LoopStart event on any loop after the first one
; 811  :         //
; 812  :         
; 813  :         ASSERT(pTrack->wLoopCount == 0);

  00252	68 2d 03 00 00	 push	 813			; 0000032dH
  00257	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  0025c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@JIKBNEFO@pTrack?9?$DOwLoopCount?5?$DN?$DN?50?$AA@
  00261	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00264	0f b7 42 1a	 movzx	 eax, WORD PTR [edx+26]
  00268	f7 d8		 neg	 eax
  0026a	1b c0		 sbb	 eax, eax
  0026c	f7 d8		 neg	 eax
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00274	83 c4 10	 add	 esp, 16			; 00000010H

; 814  :         pTrack->wLoopCount = pEvent->EventData.LoopStart.wLoopCount;

  00277	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  0027a	8b 55 f4	 mov	 edx, DWORD PTR _pEvent$[ebp]
  0027d	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  00281	66 89 41 1a	 mov	 WORD PTR [ecx+26], ax

; 815  :         pTrack->wLoopStartEventIndex = pTrack->wNextEventIndex;

  00285	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  00288	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  0028b	66 8b 42 12	 mov	 ax, WORD PTR [edx+18]
  0028f	66 89 41 16	 mov	 WORD PTR [ecx+22], ax

; 816  :         pTrack->wLoopStartEventDataOffset = pTrack->wNextEventDataOffset;

  00293	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  00296	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00299	66 8b 42 10	 mov	 ax, WORD PTR [edx+16]
  0029d	66 89 41 14	 mov	 WORD PTR [ecx+20], ax

; 817  :             
; 818  :         break;

  002a1	eb 40		 jmp	 SHORT $L32073
$L32105:

; 819  :         
; 820  :     case eXACTEvent_LoopEnd:
; 821  : 
; 822  :         //
; 823  :         // this event will never make it to the sequencer during looping
; 824  :         // since it resets the current event index into the content back to the 
; 825  :         // loop start ...
; 826  :         //
; 827  : 
; 828  :         if (pTrack->wLoopCount) {

  002a3	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  002a6	0f b7 51 1a	 movzx	 edx, WORD PTR [ecx+26]
  002aa	85 d2		 test	 edx, edx
  002ac	74 35		 je	 SHORT $L32073

; 829  :             
; 830  :             //
; 831  :             // make the track go back to the loop start index
; 832  :             //
; 833  :             
; 834  :             pTrack->wNextEventIndex = pTrack->wLoopStartEventIndex;

  002ae	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  002b1	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  002b4	66 8b 51 16	 mov	 dx, WORD PTR [ecx+22]
  002b8	66 89 50 12	 mov	 WORD PTR [eax+18], dx

; 835  :             pTrack->wNextEventDataOffset = pTrack->wLoopStartEventDataOffset;

  002bc	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  002bf	8b 4d e8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  002c2	66 8b 51 14	 mov	 dx, WORD PTR [ecx+20]
  002c6	66 89 50 10	 mov	 WORD PTR [eax+16], dx

; 836  :             
; 837  :             //
; 838  :             // decrement loop count
; 839  :             //
; 840  :             
; 841  :             pTrack->wLoopCount--;

  002ca	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  002cd	66 8b 48 1a	 mov	 cx, WORD PTR [eax+26]
  002d1	66 83 e9 01	 sub	 cx, 1
  002d5	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  002d8	66 89 4a 1a	 mov	 WORD PTR [edx+26], cx

; 842  : 
; 843  :             //
; 844  :             // each time we loop, we update the start time of our track
; 845  :             // so the events are scheduled relative to the start of the loop
; 846  :             //
; 847  : 
; 848  :             bUpdateTrackTime = TRUE;

  002dc	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bUpdateTrackTime$[ebp], 1
$L32073:

; 849  :             
; 850  :         }
; 851  : 
; 852  :         break;
; 853  : 
; 854  :     default:
; 855  :         
; 856  :         break;
; 857  :         
; 858  :         
; 859  :     } //switch
; 860  : 
; 861  :     if (bUpdateTrackTime) {

  002e3	83 7d f0 00	 cmp	 DWORD PTR _bUpdateTrackTime$[ebp], 0
  002e7	74 12		 je	 SHORT $L32108

; 862  : 
; 863  :         g_pEngine->GetTime(&pTrack->rtStartTime);                    

  002e9	8b 45 e8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  002ec	83 c0 20	 add	 eax, 32			; 00000020H
  002ef	50		 push	 eax
  002f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  002f6	e8 00 00 00 00	 call	 ?GetTime@CEngine@XACT@@QAEXPA_J@Z ; XACT::CEngine::GetTime
$L32108:

; 864  : 
; 865  :     }
; 866  : 
; 867  :     //
; 868  :     // create an absolute system reference time from event time stamp(in samples)
; 869  :     //
; 870  : 
; 871  :     if (SUCCEEDED(hr)) {

  002fb	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002ff	7c 6e		 jl	 SHORT $L32110

; 872  : 
; 873  :         g_pEngine->CreateEventTimeStamp(pTrack,
; 874  :             pEventContext);

  00301	8b 4d 08	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00304	51		 push	 ecx
  00305	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00308	52		 push	 edx
  00309	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  0030f	e8 00 00 00 00	 call	 ?CreateEventTimeStamp@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@PAU_TRACK_EVENT_CONTEXT@2@@Z ; XACT::CEngine::CreateEventTimeStamp

; 875  :         
; 876  :         g_pEngine->PrintTimeStamps(DPF_FNAME,
; 877  :             pEventContext,
; 878  :             pEventContext->m_rtTimeStamp,
; 879  :             0);

  00314	6a 00		 push	 0
  00316	6a 00		 push	 0
  00318	8b 45 08	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  0031b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0031e	51		 push	 ecx
  0031f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00322	52		 push	 edx
  00323	8b 45 08	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  00326	50		 push	 eax
  00327	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@KFACCGJP@CSoundCue?3?3SubmitEvent?$AA@
  0032c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00332	e8 00 00 00 00	 call	 ?PrintTimeStamps@CEngine@XACT@@QAEXPBDPAU_TRACK_EVENT_CONTEXT@2@_J2@Z ; XACT::CEngine::PrintTimeStamps

; 880  :         
; 881  :         //
; 882  :         // add to list of events for this track
; 883  :         //
; 884  :         
; 885  :         {
; 886  :             AutoIrql();

  00337	8d 4d c4	 lea	 ecx, DWORD PTR ___AutoIrql$32111[ebp]
  0033a	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 887  :             InsertTailList(&pTrack->lstEvents,&pEventContext->m_ListEntry);

  0033f	8b 4d 08	 mov	 ecx, DWORD PTR _pEventContext$[ebp]
  00342	51		 push	 ecx
  00343	8b 55 e8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00346	83 c2 08	 add	 edx, 8
  00349	52		 push	 edx
  0034a	e8 00 00 00 00	 call	 ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ; XACT::InsertTailList

; 888  :         }

  0034f	8d 4d c4	 lea	 ecx, DWORD PTR ___AutoIrql$32111[ebp]
  00352	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql

; 889  :         
; 890  :         //
; 891  :         // enqueue this event
; 892  :         //
; 893  :         
; 894  :         hr = g_pEngine->Enqueue(pEventContext);

  00357	8b 45 08	 mov	 eax, DWORD PTR _pEventContext$[ebp]
  0035a	50		 push	 eax
  0035b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00361	8b 11		 mov	 edx, DWORD PTR [ecx]
  00363	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pEngine
  00368	50		 push	 eax
  00369	ff 52 04	 call	 DWORD PTR [edx+4]
  0036c	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax
$L32110:

; 895  :         
; 896  :     }
; 897  : 
; 898  :     return hr;

  0036f	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]
$L32062:

; 899  : 
; 900  : }

  00372	8b e5		 mov	 esp, ebp
  00374	5d		 pop	 ebp
  00375	c2 04 00	 ret	 4
$L32466:
  00378	00 00 00 00	 DD	 $L32076
  0037c	00 00 00 00	 DD	 $L32103
  00380	00 00 00 00	 DD	 $L32105
  00384	00 00 00 00	 DD	 $L32073
$L32465:
  00388	00		 DB	 0
  00389	00		 DB	 0
  0038a	03		 DB	 3
  0038b	03		 DB	 3
  0038c	03		 DB	 3
  0038d	03		 DB	 3
  0038e	03		 DB	 3
  0038f	03		 DB	 3
  00390	03		 DB	 3
  00391	03		 DB	 3
  00392	03		 DB	 3
  00393	01		 DB	 1
  00394	02		 DB	 2
?SubmitEvent@CSoundCue@XACT@@AAEJPAU_TRACK_EVENT_CONTEXT@2@@Z ENDP ; XACT::CSoundCue::SubmitEvent
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetFormat@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z
XACTENG	SEGMENT
_this$ = 8
_pwfxFormat$ = 12
?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z PROC NEAR ; IDirectSoundBuffer::SetFormat, COMDAT

; 1937 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1938 :         return IDirectSoundBuffer_SetFormat(this, pwfxFormat);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetFormat@8

; 1939 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetFormat@IDirectSoundBuffer@@QAGJPBUtWAVEFORMATEX@@@Z ENDP ; IDirectSoundBuffer::SetFormat
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetOutputBuffer@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z
XACTENG	SEGMENT
_this$ = 8
_pOutputBuffer$ = 12
?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z PROC NEAR ; IDirectSoundBuffer::SetOutputBuffer, COMDAT

; 1977 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1978 :         return IDirectSoundBuffer_SetOutputBuffer(this, pOutputBuffer);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pOutputBuffer$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetOutputBuffer@8

; 1979 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?SetOutputBuffer@IDirectSoundBuffer@@QAGJPAU1@@Z ENDP	; IDirectSoundBuffer::SetOutputBuffer
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetPlayRegion@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z
XACTENG	SEGMENT
_this$ = 8
_dwPlayStart$ = 12
_dwPlayLength$ = 16
?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z PROC NEAR	; IDirectSoundBuffer::SetPlayRegion, COMDAT

; 2082 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2083 :         return IDirectSoundBuffer_SetPlayRegion(this, dwPlayStart, dwPlayLength);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwPlayLength$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _dwPlayStart$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetPlayRegion@12

; 2084 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetPlayRegion@IDirectSoundBuffer@@QAGJKK@Z ENDP	; IDirectSoundBuffer::SetPlayRegion
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetLoopRegion@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z
XACTENG	SEGMENT
_this$ = 8
_dwLoopStart$ = 12
_dwLoopLength$ = 16
?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z PROC NEAR	; IDirectSoundBuffer::SetLoopRegion, COMDAT

; 2087 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2088 :         return IDirectSoundBuffer_SetLoopRegion(this, dwLoopStart, dwLoopLength);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwLoopLength$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _dwLoopStart$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetLoopRegion@12

; 2089 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetLoopRegion@IDirectSoundBuffer@@QAGJKK@Z ENDP	; IDirectSoundBuffer::SetLoopRegion
XACTENG	ENDS
PUBLIC	??0CIrql@XACT@@QAE@XZ				; XACT::CIrql::CIrql
PUBLIC	?Raise@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Raise
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\common\drvhlp.h
;	COMDAT ??0CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::CAutoIrql, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CIrql@XACT@@QAE@XZ	; XACT::CIrql::CIrql

; 73   :     Raise();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Raise@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Raise

; 74   : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::CAutoIrql
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ??0CIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??0CIrql@XACT@@QAE@XZ PROC NEAR				; XACT::CIrql::CIrql, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     m_fRaised = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 40   : }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??0CIrql@XACT@@QAE@XZ ENDP				; XACT::CIrql::CIrql
XACTENG	ENDS
EXTRN	__imp_@KfRaiseIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Raise@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Raise@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Raise, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   :     if(m_fRaised = (KeGetCurrentIrql() < DISPATCH_LEVEL))

  00007	e8 00 00 00 00	 call	 _KeGetCurrentIrql@0
  0000c	0f b6 c0	 movzx	 eax, al
  0000f	33 c9		 xor	 ecx, ecx
  00011	83 f8 02	 cmp	 eax, 2
  00014	0f 9c c1	 setl	 cl
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00024	74 0d		 je	 SHORT $L29522

; 45   :     {
; 46   :         m_irql = KfRaiseIrql(DISPATCH_LEVEL);

  00026	b1 02		 mov	 cl, 2
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfRaiseIrql@4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	88 01		 mov	 BYTE PTR [ecx], al
$L29522:

; 47   :     }
; 48   : }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?Raise@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Raise
XACTENG	ENDS
PUBLIC	?Lower@CIrql@XACT@@QAEXXZ			; XACT::CIrql::Lower
; Function compile flags: /Odt
;	COMDAT ??1CAutoIrql@XACT@@QAE@XZ
XACTENG	SEGMENT
_this$ = -4
??1CAutoIrql@XACT@@QAE@XZ PROC NEAR			; XACT::CAutoIrql::~CAutoIrql, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 78   :     Lower();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Lower@CIrql@XACT@@QAEXXZ ; XACT::CIrql::Lower

; 79   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CAutoIrql@XACT@@QAE@XZ ENDP				; XACT::CAutoIrql::~CAutoIrql
XACTENG	ENDS
EXTRN	__imp_@KfLowerIrql@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Lower@CIrql@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -4
?Lower@CIrql@XACT@@QAEXXZ PROC NEAR			; XACT::CIrql::Lower, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :     if(m_fRaised)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 15		 je	 SHORT $L29527

; 53   :     {
; 54   :         KfLowerIrql(m_irql);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8a 09		 mov	 cl, BYTE PTR [ecx]
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@KfLowerIrql@4

; 55   :         m_fRaised = FALSE;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$L29527:

; 56   :     }
; 57   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?Lower@CIrql@XACT@@QAEXXZ ENDP				; XACT::CIrql::Lower
XACTENG	ENDS
PUBLIC	?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList
PUBLIC	??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\runtime\common\ntlist.h
XACTENG_RD	SEGMENT
??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z
XACTENG	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; XACT::InsertTailList, COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 73		 push	 115			; 00000073H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 116  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 74		 push	 116			; 00000074H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 117  : 
; 118  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 119  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 120  :     
; 121  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 122  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 123  : 
; 124  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7c		 push	 124			; 0000007cH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@ODCKAJDD@c?3?2xbox?2private?2windows?2directx?2@
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ; XACT::__AssertValidEntryList

; 125  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@XACT@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; XACT::InsertTailList
XACTENG	ENDS
PUBLIC	??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ ; `string'
PUBLIC	??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ ; `string'
PUBLIC	??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
XACTENG_RD	SEGMENT
??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry po'
	DB	'inter', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
XACTENG_RD	SEGMENT
??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@ DB 'List entry c'
	DB	'ontains NULL pointer', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
XACTENG_RD	SEGMENT
??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@ DB 'List entry '
	DB	'partially points to itself', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in '
	DB	'list', 00H					; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
XACTENG_RD	SEGMENT
??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z
XACTENG	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z PROC NEAR ; XACT::__AssertValidEntryList, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L29601

; 55   :     {
; 56   :         DwDbgAssert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@MLBFKIOK@NULL?5list?5entry?5pointer?$AA@
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 57   :     }
; 58   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L29600
$L29601:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L29605
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L29604
$L29605:

; 59   :     {
; 60   :         DwDbgAssert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@FLABCILB@List?5entry?5contains?5NULL?5pointer@
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 61   :     }
; 62   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L29600
$L29604:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L29609
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L29608
$L29609:

; 63   :     {
; 64   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L29611
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L29610
$L29611:

; 65   :         {
; 66   :             DwDbgAssert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@FMEINEKN@List?5entry?5partially?5points?5to?5i@
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L29610:

; 67   :         }
; 68   :     }
; 69   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L29600
$L29608:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L29614

; 70   :     {
; 71   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	3b 55 08	 cmp	 edx, DWORD PTR _Entry$[ebp]
  000a3	75 17		 jne	 SHORT $L29615

; 72   :         {
; 73   :             DwDbgAssert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@JIBNMDFM@List?5entry?5not?5in?5list?$AA@
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L29615:

; 74   :         }
; 75   :     }
; 76   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L29600
$L29614:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L29600

; 77   :     {
; 78   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 02		 mov	 eax, DWORD PTR [edx]
  000c9	3b 45 08	 cmp	 eax, DWORD PTR _Entry$[ebp]
  000cc	74 17		 je	 SHORT $L29600

; 79   :         {
; 80   :             DwDbgAssert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@MCAPMFFH@List?5entry?5in?5list?$AA@
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L29600:

; 81   :         }
; 82   :     }
; 83   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@XACT@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@1@PBDI@Z ENDP ; XACT::__AssertValidEntryList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
XACTENG	ENDS
;	COMDAT ?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ PROC NEAR ; XACT::CSoundSource::GetDSoundBuffer, COMDAT
; _this$ = ecx

; 594  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 595  : 
; 596  :         return m_HwVoice.pBuffer;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 597  : 
; 598  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDSoundBuffer@CSoundSource@XACT@@QAEPAUIDirectSoundBuffer@@XZ ENDP ; XACT::CSoundSource::GetDSoundBuffer
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ
XACTENG	SEGMENT
_this$ = -4
?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ PROC NEAR ; XACT::CSoundSource::GetDSoundStream, COMDAT
; _this$ = ecx

; 601  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 602  : 
; 603  :         return m_HwVoice.pStream;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 604  : 
; 605  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDSoundStream@CSoundSource@XACT@@QAEPAUIDirectSoundStream@@XZ ENDP ; XACT::CSoundSource::GetDSoundStream
; Function compile flags: /Odt
XACTENG	ENDS
;	COMDAT ?GetWaveBankEntry@CWaveBank@XACT@@QAEPAU_WAVEBANKENTRY@@K@Z
XACTENG	SEGMENT
_this$ = -4
_dwWaveIndex$ = 8
?GetWaveBankEntry@CWaveBank@XACT@@QAEPAU_WAVEBANKENTRY@@K@Z PROC NEAR ; XACT::CWaveBank::GetWaveBankEntry, COMDAT
; _this$ = ecx

; 696  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 697  : 
; 698  :         return &m_WaveBankData.paMetaData[dwWaveIndex];

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwWaveIndex$[ebp]
  0000a	6b c0 14	 imul	 eax, 20			; 00000014H
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 699  : 
; 700  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?GetWaveBankEntry@CWaveBank@XACT@@QAEPAU_WAVEBANKENTRY@@K@Z ENDP ; XACT::CWaveBank::GetWaveBankEntry
XACTENG	ENDS
PUBLIC	??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_07OFNMHBKJ@pBuffer?$AA@			; `string'
PUBLIC	?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z	; IDirectSoundBuffer::SetBufferData
;	COMDAT ??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
XACTENG_RD	SEGMENT
??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\pr'
	DB	'ivate\windows\directx\xact\runtime\inc\xacti.h', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_07OFNMHBKJ@pBuffer?$AA@
XACTENG_RD	SEGMENT
??_C@_07OFNMHBKJ@pBuffer?$AA@ DB 'pBuffer', 00H		; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z
XACTENG	SEGMENT
_this$ = -4
_pBuffer$ = 8
?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z PROC NEAR ; XACT::CWaveBank::SetBufferData, COMDAT
; _this$ = ecx

; 703  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 704  : 
; 705  :         ASSERT(pBuffer);

  00007	68 c1 02 00 00	 push	 705			; 000002c1H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@KLBKCGNG@c?3?2xbox?2private?2windows?2directx?2@
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OFNMHBKJ@pBuffer?$AA@
  00016	33 c0		 xor	 eax, eax
  00018	83 7d 08 00	 cmp	 DWORD PTR _pBuffer$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?DwDbgAssert@XACT@@YAXHPBD0I@Z ; XACT::DwDbgAssert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 706  :         return pBuffer->SetBufferData(m_WaveBankData.pvData, m_WaveBankData.dwDataSize);

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	52		 push	 edx
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00035	51		 push	 ecx
  00036	8b 55 08	 mov	 edx, DWORD PTR _pBuffer$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ; IDirectSoundBuffer::SetBufferData

; 707  : 
; 708  :     }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?SetBufferData@CWaveBank@XACT@@QAEJPAUIDirectSoundBuffer@@@Z ENDP ; XACT::CWaveBank::SetBufferData
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_SetBufferData@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z
XACTENG	SEGMENT
_this$ = 8
_pvBufferData$ = 12
_dwBufferBytes$ = 16
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z PROC NEAR	; IDirectSoundBuffer::SetBufferData, COMDAT

; 2107 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2108 :         return IDirectSoundBuffer_SetBufferData(this, pvBufferData, dwBufferBytes);

  00003	8b 45 10	 mov	 eax, DWORD PTR _dwBufferBytes$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _pvBufferData$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _IDirectSoundBuffer_SetBufferData@12

; 2109 :     }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
?SetBufferData@IDirectSoundBuffer@@QAGJPAXK@Z ENDP	; IDirectSoundBuffer::SetBufferData
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\engine\cue.cpp
XACTENG	ENDS
;	COMDAT ?IsPositional@CSoundCue@XACT@@IAEHXZ
XACTENG	SEGMENT
_this$ = -4
?IsPositional@CSoundCue@XACT@@IAEHXZ PROC NEAR		; XACT::CSoundCue::IsPositional, COMDAT
; _this$ = ecx

; 906  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 907  :     DPF_ENTER();
; 908  :     return (m_pSoundEntry->dwFlags & XACT_FLAG_SOUND_3D);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	83 e0 01	 and	 eax, 1

; 909  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?IsPositional@CSoundCue@XACT@@IAEHXZ ENDP		; XACT::CSoundCue::IsPositional
XACTENG	ENDS
PUBLIC	?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z ; XACT::CSoundCue::ProcessRuntimeEvent
PUBLIC	?IsPlaying@CSoundSource@XACT@@QAEHXZ		; XACT::CSoundSource::IsPlaying
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT ?DoWork@CSoundCue@XACT@@QAEXXZ
XACTENG	SEGMENT
_this$ = -108
_Event$32135 = -104
___AutoIrql$32129 = -24
_i$32123 = -16
___AutoLock$ = -12
_pTrack$ = -8
_dwStoppedTracks$ = -4
?DoWork@CSoundCue@XACT@@QAEXXZ PROC NEAR		; XACT::CSoundCue::DoWork, COMDAT
; _this$ = ecx

; 915  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	89 4d 94	 mov	 DWORD PTR _this$[ebp], ecx

; 916  :     DPF_ENTER();
; 917  : 
; 918  :     ENTER_EXTERNAL_METHOD();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 919  : 
; 920  :     PTRACK_CONTEXT pTrack;
; 921  :     DWORD dwStoppedTracks = 0;

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwStoppedTracks$[ebp], 0

; 922  :     
; 923  :     if ((m_dwState == CUE_STATE_STOPPED) || (m_dwState == CUE_STATE_INITIALIZED)) {

  00018	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 b8 ec 00 00
	00 04		 cmp	 DWORD PTR [eax+236], 4
  00022	74 0c		 je	 SHORT $L32122
  00024	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 b9 ec 00 00
	00 01		 cmp	 DWORD PTR [ecx+236], 1
  0002e	75 0d		 jne	 SHORT $L32121
$L32122:

; 924  :         return;

  00030	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00033	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00038	e9 51 01 00 00	 jmp	 $L32117
$L32121:

; 925  :     }
; 926  : 
; 927  :     //
; 928  :     // figure out if we are still playing
; 929  :     //
; 930  : 
; 931  :     for (DWORD i=0;i<m_pSoundEntry->wTrackCount;i++) {

  0003d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$32123[ebp], 0
  00044	eb 09		 jmp	 SHORT $L32124
$L32125:
  00046	8b 55 f0	 mov	 edx, DWORD PTR _i$32123[ebp]
  00049	83 c2 01	 add	 edx, 1
  0004c	89 55 f0	 mov	 DWORD PTR _i$32123[ebp], edx
$L32124:
  0004f	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00055	0f b7 51 16	 movzx	 edx, WORD PTR [ecx+22]
  00059	39 55 f0	 cmp	 DWORD PTR _i$32123[ebp], edx
  0005c	0f 83 c9 00 00
	00		 jae	 $L32126

; 932  :         
; 933  :         pTrack = &m_paTracks[i];

  00062	8b 45 f0	 mov	 eax, DWORD PTR _i$32123[ebp]
  00065	6b c0 30	 imul	 eax, 48			; 00000030H
  00068	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	03 81 e8 00 00
	00		 add	 eax, DWORD PTR [ecx+232]
  00071	89 45 f8	 mov	 DWORD PTR _pTrack$[ebp], eax

; 934  :         
; 935  :         if (m_dwState == CUE_STATE_STOPPING) {

  00074	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  00077	83 ba ec 00 00
	00 03		 cmp	 DWORD PTR [edx+236], 3
  0007e	75 32		 jne	 SHORT $L32127

; 936  :             
; 937  :             //
; 938  :             // stopped was called on the api
; 939  :             // remove any events still scheduled
; 940  :             // this essentialy forces a stop no matter what the tracks are doing
; 941  :             //
; 942  :                         
; 943  :             if (pTrack->wNextEventIndex) {

  00080	8b 45 f8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  00083	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  00087	85 c9		 test	 ecx, ecx
  00089	74 13		 je	 SHORT $L32128

; 944  :                 g_pEngine->FreeEventsAtOrAfter(pTrack,0);

  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	8b 55 f8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  00092	52		 push	 edx
  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00099	e8 00 00 00 00	 call	 ?FreeEventsAtOrAfter@CEngine@XACT@@QAEXPAU_TRACK_CONTEXT@2@_J@Z ; XACT::CEngine::FreeEventsAtOrAfter
$L32128:

; 945  :             }
; 946  :             
; 947  :             //
; 948  :             // set index to zero to signal the track is back to initial state
; 949  :             //
; 950  :             
; 951  :             pTrack->wNextEventIndex = 0;

  0009e	8b 45 f8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  000a1	66 c7 40 12 00
	00		 mov	 WORD PTR [eax+18], 0

; 952  :             
; 953  :             dwStoppedTracks++;

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _dwStoppedTracks$[ebp]
  000aa	83 c1 01	 add	 ecx, 1
  000ad	89 4d fc	 mov	 DWORD PTR _dwStoppedTracks$[ebp], ecx

; 954  :             continue;

  000b0	eb 94		 jmp	 SHORT $L32125
$L32127:

; 955  :             
; 956  :         }
; 957  : 
; 958  :         //
; 959  :         // A track is considered playing if any of the following is true:
; 960  :         // 1) it has a voice associted with it and the voice is playing
; 961  :         // 2) its current event index < then the eventCount for the track
; 962  :         //
; 963  :                 
; 964  :         {
; 965  :             AutoIrql();

  000b2	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$32129[ebp]
  000b5	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 966  :             if (!IsListEmpty(&pTrack->lstEvents)) {

  000ba	8b 55 f8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  000bd	83 c2 08	 add	 edx, 8
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  000c3	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  000c6	74 0d		 je	 SHORT $L32130

; 967  :                 
; 968  :                 //
; 969  :                 // still playing, there are queued events waiting to be dispatched, 
; 970  :                 //
; 971  :                 
; 972  :                 continue;

  000c8	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$32129[ebp]
  000cb	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  000d0	e9 71 ff ff ff	 jmp	 $L32125
$L32130:

; 973  :             }
; 974  :         }

  000d5	8d 4d e8	 lea	 ecx, DWORD PTR ___AutoIrql$32129[ebp]
  000d8	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql

; 975  :         
; 976  :         if (pTrack->wNextEventIndex && 
; 977  :             (pTrack->wNextEventIndex < pTrack->pContentEntry->wEventEntryCount)) {

  000dd	8b 4d f8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  000e0	0f b7 51 12	 movzx	 edx, WORD PTR [ecx+18]
  000e4	85 d2		 test	 edx, edx
  000e6	74 1a		 je	 SHORT $L32131
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  000eb	0f b7 48 12	 movzx	 ecx, WORD PTR [eax+18]
  000ef	8b 55 f8	 mov	 edx, DWORD PTR _pTrack$[ebp]
  000f2	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000f5	0f b7 50 02	 movzx	 edx, WORD PTR [eax+2]
  000f9	3b ca		 cmp	 ecx, edx
  000fb	7d 05		 jge	 SHORT $L32131

; 978  :             
; 979  :             //
; 980  :             // still playing, track was started and are events left to be scheduled
; 981  :             //
; 982  :             
; 983  :             continue;

  000fd	e9 44 ff ff ff	 jmp	 $L32125
$L32131:

; 984  :         }
; 985  :         
; 986  :         if (pTrack->pSoundSource) {

  00102	8b 45 f8	 mov	 eax, DWORD PTR _pTrack$[ebp]
  00105	83 38 00	 cmp	 DWORD PTR [eax], 0
  00108	74 13		 je	 SHORT $L32132

; 987  :             
; 988  :             if (pTrack->pSoundSource->IsPlaying()) {

  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _pTrack$[ebp]
  0010d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0010f	e8 00 00 00 00	 call	 ?IsPlaying@CSoundSource@XACT@@QAEHXZ ; XACT::CSoundSource::IsPlaying
  00114	85 c0		 test	 eax, eax
  00116	74 05		 je	 SHORT $L32132

; 989  :                 continue;

  00118	e9 29 ff ff ff	 jmp	 $L32125
$L32132:

; 990  :             }
; 991  :         }
; 992  :         
; 993  :         //
; 994  :         // if we made it here it means the track is stopped
; 995  :         //
; 996  :         
; 997  :         dwStoppedTracks++;

  0011d	8b 55 fc	 mov	 edx, DWORD PTR _dwStoppedTracks$[ebp]
  00120	83 c2 01	 add	 edx, 1
  00123	89 55 fc	 mov	 DWORD PTR _dwStoppedTracks$[ebp], edx

; 998  :         
; 999  :     }

  00126	e9 1b ff ff ff	 jmp	 $L32125
$L32126:

; 1000 : 
; 1001 :     if (dwStoppedTracks == m_pSoundEntry->wTrackCount) {

  0012b	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00131	0f b7 51 16	 movzx	 edx, WORD PTR [ecx+22]
  00135	39 55 fc	 cmp	 DWORD PTR _dwStoppedTracks$[ebp], edx
  00138	75 3f		 jne	 SHORT $L32134

; 1002 : 
; 1003 :         XACT_TRACK_EVENT Event;
; 1004 : 
; 1005 :         //
; 1006 :         // all tracks are stopped, mark this voice as stopped
; 1007 :         //
; 1008 : 
; 1009 :         CheckStateTransition(CUE_STATE_STOPPED,NULL);

  0013a	6a 00		 push	 0
  0013c	6a 04		 push	 4
  0013e	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z ; XACT::CSoundCue::CheckStateTransition

; 1010 :         
; 1011 :         memset(&Event,0,sizeof(Event));

  00146	6a 50		 push	 80			; 00000050H
  00148	6a 00		 push	 0
  0014a	8d 45 98	 lea	 eax, DWORD PTR _Event$32135[ebp]
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _memset
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1012 :         Event.Header.wType = eXACTEvent_Stop;

  00156	66 c7 45 98 02
	00		 mov	 WORD PTR _Event$32135[ebp], 2

; 1013 :         
; 1014 :         //
; 1015 :         // call the cue in case we need to generate a notification
; 1016 :         // we pass in a stop event we just created here to signal the entire
; 1017 :         // cue has stopped playing
; 1018 :         //
; 1019 :         
; 1020 :         ProcessRuntimeEvent(&Event);

  0015c	8d 4d 98	 lea	 ecx, DWORD PTR _Event$32135[ebp]
  0015f	51		 push	 ecx
  00160	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  00163	e8 00 00 00 00	 call	 ?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z ; XACT::CSoundCue::ProcessRuntimeEvent

; 1021 : 
; 1022 :         //
; 1023 :         // cue is stopped, remove from active linked list
; 1024 :         //
; 1025 :         
; 1026 :         g_pEngine->RemoveCueFromSequencerList(this);

  00168	8b 55 94	 mov	 edx, DWORD PTR _this$[ebp]
  0016b	52		 push	 edx
  0016c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  00172	e8 00 00 00 00	 call	 ?RemoveCueFromSequencerList@CEngine@XACT@@QAEJPAVCSoundCue@2@@Z ; XACT::CEngine::RemoveCueFromSequencerList

; 1027 :         
; 1028 :     } else {

  00177	eb 0d		 jmp	 SHORT $L32136
$L32134:

; 1029 : 
; 1030 :         //
; 1031 :         // we are still playing, schedule some more events
; 1032 :         //
; 1033 : 
; 1034 :         ScheduleTrackEvents(XACT_ENGINE_SCHEDULE_QUANTUM);

  00179	68 50 c3 00 00	 push	 50000			; 0000c350H
  0017e	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  00181	e8 00 00 00 00	 call	 ?ScheduleTrackEvents@CSoundCue@XACT@@IAEJK@Z ; XACT::CSoundCue::ScheduleTrackEvents
$L32136:

; 1035 : 
; 1036 :     }
; 1037 : 
; 1038 :     return ;

  00186	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00189	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
$L32117:

; 1039 : }

  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c3		 ret	 0
?DoWork@CSoundCue@XACT@@QAEXXZ ENDP			; XACT::CSoundCue::DoWork
XACTENG	ENDS
PUBLIC	?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z	; IDirectSoundBuffer::GetStatus
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\runtime\inc\xacti.h
;	COMDAT ?IsPlaying@CSoundSource@XACT@@QAEHXZ
XACTENG	SEGMENT
_this$ = -8
_dwStatus$ = -4
?IsPlaying@CSoundSource@XACT@@QAEHXZ PROC NEAR		; XACT::CSoundSource::IsPlaying, COMDAT
; _this$ = ecx

; 608  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 609  : 
; 610  :         DWORD dwStatus;
; 611  : 
; 612  :         if (m_HwVoice.pBuffer) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	74 18		 je	 SHORT $L31182

; 613  :             
; 614  :             m_HwVoice.pBuffer->GetStatus(&dwStatus);

  00012	8d 4d fc	 lea	 ecx, DWORD PTR _dwStatus$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ; IDirectSoundBuffer::GetStatus

; 615  :             return (dwStatus & DSBSTATUS_PLAYING);

  00022	8b 45 fc	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00025	83 e0 01	 and	 eax, 1
  00028	eb 1e		 jmp	 SHORT $L31180
$L31182:

; 616  : 
; 617  :         } else {
; 618  : 
; 619  :             m_HwVoice.pStream->GetStatus(&dwStatus);

  0002a	8d 4d fc	 lea	 ecx, DWORD PTR _dwStatus$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00031	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	52		 push	 edx
  0003d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 620  :             return (dwStatus & (DSSTREAMSTATUS_PLAYING | DSSTREAMSTATUS_PAUSED ));

  00040	8b 45 fc	 mov	 eax, DWORD PTR _dwStatus$[ebp]
  00043	25 00 00 03 00	 and	 eax, 196608		; 00030000H
$L31180:

; 621  :         }
; 622  : 
; 623  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?IsPlaying@CSoundSource@XACT@@QAEHXZ ENDP		; XACT::CSoundSource::IsPlaying
XACTENG	ENDS
EXTRN	_IDirectSoundBuffer_GetStatus@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\inc\dsoundp.h
;	COMDAT ?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z
XACTENG	SEGMENT
_this$ = 8
_pdwStatus$ = 12
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z PROC NEAR	; IDirectSoundBuffer::GetStatus, COMDAT

; 2092 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2093 :         return IDirectSoundBuffer_GetStatus(this, pdwStatus);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _pdwStatus$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _IDirectSoundBuffer_GetStatus@8

; 2094 :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?GetStatus@IDirectSoundBuffer@@QAGJPAK@Z ENDP		; IDirectSoundBuffer::GetStatus
XACTENG	ENDS
PUBLIC	??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@ ; `string'
PUBLIC	??_C@_0BK@FEIIDANN@Starting?5to?5play?5cue?50x?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0BO@JPJHEHCO@Cue?50x?$CFx?5not?5initialized?5yet?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OBFKINOC@Cue?50x?$CFx?5Already?5Playing?$AA@ ; `string'
PUBLIC	??_C@_0BC@FNGJEHGK@Stopping?5cue?50x?$CFx?$AA@	; `string'
PUBLIC	??_C@_0BJ@CFIAAKAB@Cue?50x?$CFx?5not?5playing?5yet?$AA@ ; `string'
PUBLIC	??_C@_0BJ@PPOBJNMI@Cue?50x?$CFx?5Already?5stopped?$AA@ ; `string'
PUBLIC	??_C@_0DA@CFCCCPC@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@ ; `string'
PUBLIC	??_C@_0CP@GHJBDHLG@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@ ; `string'
;	COMDAT ??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
; File c:\xbox\private\windows\directx\xact\runtime\engine\cue.cpp
XACTENG_RD	SEGMENT
??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@ DB 'CSoundCue::'
	DB	'CheckStateTransition', 00H			; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BK@FEIIDANN@Starting?5to?5play?5cue?50x?$CFx?$AA@
XACTENG_RD	SEGMENT
??_C@_0BK@FEIIDANN@Starting?5to?5play?5cue?50x?$CFx?$AA@ DB 'Starting to '
	DB	'play cue 0x%x', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BO@JPJHEHCO@Cue?50x?$CFx?5not?5initialized?5yet?$CB?$AA@
XACTENG_RD	SEGMENT
??_C@_0BO@JPJHEHCO@Cue?50x?$CFx?5not?5initialized?5yet?$CB?$AA@ DB 'Cue 0'
	DB	'x%x not initialized yet!', 00H		; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@OBFKINOC@Cue?50x?$CFx?5Already?5Playing?$AA@
XACTENG_RD	SEGMENT
??_C@_0BJ@OBFKINOC@Cue?50x?$CFx?5Already?5Playing?$AA@ DB 'Cue 0x%x Alrea'
	DB	'dy Playing', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BC@FNGJEHGK@Stopping?5cue?50x?$CFx?$AA@
XACTENG_RD	SEGMENT
??_C@_0BC@FNGJEHGK@Stopping?5cue?50x?$CFx?$AA@ DB 'Stopping cue 0x%x', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@CFIAAKAB@Cue?50x?$CFx?5not?5playing?5yet?$AA@
XACTENG_RD	SEGMENT
??_C@_0BJ@CFIAAKAB@Cue?50x?$CFx?5not?5playing?5yet?$AA@ DB 'Cue 0x%x not '
	DB	'playing yet', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0BJ@PPOBJNMI@Cue?50x?$CFx?5Already?5stopped?$AA@
XACTENG_RD	SEGMENT
??_C@_0BJ@PPOBJNMI@Cue?50x?$CFx?5Already?5stopped?$AA@ DB 'Cue 0x%x Alrea'
	DB	'dy stopped', 00H				; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0DA@CFCCCPC@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@
XACTENG_RD	SEGMENT
??_C@_0DA@CFCCCPC@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@ DB 'Cue '
	DB	'0x%x is now stopped (was in Stopping state)', 00H ; `string'
XACTENG_RD	ENDS
;	COMDAT ??_C@_0CP@GHJBDHLG@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@
XACTENG_RD	SEGMENT
??_C@_0CP@GHJBDHLG@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@ DB 'Cue'
	DB	' 0x%x is now stopped (was in Playing state)', 00H ; `string'
; Function compile flags: /Odt
XACTENG_RD	ENDS
;	COMDAT ?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z
XACTENG	SEGMENT
tv161 = -32
tv95 = -28
tv69 = -24
tv67 = -20
_this$ = -16
___AutoIrql$ = -12
_hr$ = -4
_dwNewState$ = 8
_pdwOldState$ = 12
?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z PROC NEAR ; XACT::CSoundCue::CheckStateTransition, COMDAT
; _this$ = ecx

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1046 :     AutoIrql();

  00009	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 1047 :     HRESULT hr = S_OK;

  00011	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1048 :     DPF_ENTER();
; 1049 : 
; 1050 :     //
; 1051 :     // validate state transition depending on new state
; 1052 :     //
; 1053 : 
; 1054 :     switch (dwNewState) {

  00018	8b 45 08	 mov	 eax, DWORD PTR _dwNewState$[ebp]
  0001b	89 45 ec	 mov	 DWORD PTR tv67[ebp], eax
  0001e	83 7d ec 02	 cmp	 DWORD PTR tv67[ebp], 2
  00022	74 19		 je	 SHORT $L32149
  00024	83 7d ec 03	 cmp	 DWORD PTR tv67[ebp], 3
  00028	0f 84 c7 00 00
	00		 je	 $L32161
  0002e	83 7d ec 04	 cmp	 DWORD PTR tv67[ebp], 4
  00032	0f 84 ab 01 00
	00		 je	 $L32173
  00038	e9 8f 02 00 00	 jmp	 $L32146
$L32149:

; 1055 :     case CUE_STATE_PLAYING:
; 1056 :         
; 1057 :         switch (m_dwState) {

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 91 ec 00 00
	00		 mov	 edx, DWORD PTR [ecx+236]
  00046	89 55 e8	 mov	 DWORD PTR tv69[ebp], edx
  00049	83 7d e8 04	 cmp	 DWORD PTR tv69[ebp], 4
  0004d	0f 87 9d 00 00
	00		 ja	 $L32151
  00053	8b 45 e8	 mov	 eax, DWORD PTR tv69[ebp]
  00056	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L32530[eax*4]
$L32154:

; 1058 :         case CUE_STATE_STOPPED:
; 1059 :         case CUE_STATE_INITIALIZED:
; 1060 :             
; 1061 :             //
; 1062 :             // valid transition
; 1063 :             //
; 1064 :             
; 1065 :             DPF_INFO("Starting to play cue 0x%x",this);

  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00062	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  00067	68 29 04 00 00	 push	 1065			; 00000429H
  0006c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00071	6a 04		 push	 4
  00073	6a 09		 push	 9
  00075	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0007a	83 c4 18	 add	 esp, 24			; 00000018H
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	51		 push	 ecx
  00081	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@FEIIDANN@Starting?5to?5play?5cue?50x?$CFx?$AA@
  00086	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  0008b	83 c4 08	 add	 esp, 8

; 1066 :             break;

  0008e	eb 60		 jmp	 SHORT $L32151
$L32157:

; 1067 :         case CUE_STATE_CREATED:
; 1068 :             
; 1069 :             DPF_ERROR("Cue 0x%x not initialized yet!");

  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00095	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  0009a	68 2d 04 00 00	 push	 1069			; 0000042dH
  0009f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  000a4	6a 01		 push	 1
  000a6	6a 09		 push	 9
  000a8	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000ad	83 c4 18	 add	 esp, 24			; 00000018H
  000b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@JPJHEHCO@Cue?50x?$CFx?5not?5initialized?5yet?$CB?$AA@
  000b5	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000ba	83 c4 04	 add	 esp, 4

; 1070 :             break;

  000bd	eb 31		 jmp	 SHORT $L32151
$L32159:

; 1071 :             
; 1072 :         case CUE_STATE_PLAYING:
; 1073 :                        
; 1074 :             DPF_INFO("Cue 0x%x Already Playing",this);           

  000bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  000c4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  000c9	68 32 04 00 00	 push	 1074			; 00000432H
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  000d3	6a 04		 push	 4
  000d5	6a 09		 push	 9
  000d7	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  000dc	83 c4 18	 add	 esp, 24			; 00000018H
  000df	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	52		 push	 edx
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@OBFKINOC@Cue?50x?$CFx?5Already?5Playing?$AA@
  000e8	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  000ed	83 c4 08	 add	 esp, 8
$L32151:

; 1075 :             break;
; 1076 :             
; 1077 :         }
; 1078 :         
; 1079 :         break;

  000f0	e9 d7 01 00 00	 jmp	 $L32146
$L32161:

; 1080 :         
; 1081 :     case CUE_STATE_STOPPING:
; 1082 :             
; 1083 :         switch (m_dwState) {

  000f5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  000fe	89 4d e4	 mov	 DWORD PTR tv95[ebp], ecx
  00101	83 7d e4 04	 cmp	 DWORD PTR tv95[ebp], 4
  00105	0f 87 d3 00 00
	00		 ja	 $L32163
  0010b	8b 55 e4	 mov	 edx, DWORD PTR tv95[ebp]
  0010e	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L32531[edx*4]
$L32166:

; 1084 :         case CUE_STATE_PLAYING:
; 1085 :             
; 1086 :             //
; 1087 :             // valid transition
; 1088 :             //
; 1089 :             DPF_INFO("Stopping cue 0x%x",this);

  00115	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0011a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  0011f	68 41 04 00 00	 push	 1089			; 00000441H
  00124	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00129	6a 04		 push	 4
  0012b	6a 09		 push	 9
  0012d	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00132	83 c4 18	 add	 esp, 24			; 00000018H
  00135	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00138	50		 push	 eax
  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@FNGJEHGK@Stopping?5cue?50x?$CFx?$AA@
  0013e	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00143	83 c4 08	 add	 esp, 8

; 1090 :             break;

  00146	e9 93 00 00 00	 jmp	 $L32163
$L32168:

; 1091 :             
; 1092 :         case CUE_STATE_INITIALIZED:
; 1093 :             
; 1094 :             DPF_WARNING("Cue 0x%x not playing yet",this);

  0014b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  00155	68 46 04 00 00	 push	 1094			; 00000446H
  0015a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  0015f	6a 03		 push	 3
  00161	6a 09		 push	 9
  00163	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00168	83 c4 18	 add	 esp, 24			; 00000018H
  0016b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	51		 push	 ecx
  0016f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CFIAAKAB@Cue?50x?$CFx?5not?5playing?5yet?$AA@
  00174	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00179	83 c4 08	 add	 esp, 8

; 1095 :             break;

  0017c	eb 60		 jmp	 SHORT $L32163
$L32170:

; 1096 :             
; 1097 :         case CUE_STATE_CREATED:
; 1098 :             
; 1099 :             DPF_ERROR("Cue 0x%x not initialized yet!");

  0017e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00183	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  00188	68 4b 04 00 00	 push	 1099			; 0000044bH
  0018d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00192	6a 01		 push	 1
  00194	6a 09		 push	 9
  00196	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
  0019e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@JPJHEHCO@Cue?50x?$CFx?5not?5initialized?5yet?$CB?$AA@
  001a3	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  001a8	83 c4 04	 add	 esp, 4

; 1100 :             break;

  001ab	eb 31		 jmp	 SHORT $L32163
$L32171:

; 1101 :             
; 1102 :         case CUE_STATE_STOPPED:
; 1103 :             
; 1104 :             DPF_WARNING("Cue 0x%x Already stopped",this);

  001ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  001b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  001b7	68 50 04 00 00	 push	 1104			; 00000450H
  001bc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  001c1	6a 03		 push	 3
  001c3	6a 09		 push	 9
  001c5	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  001ca	83 c4 18	 add	 esp, 24			; 00000018H
  001cd	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001d0	52		 push	 edx
  001d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@PPOBJNMI@Cue?50x?$CFx?5Already?5stopped?$AA@
  001d6	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  001db	83 c4 08	 add	 esp, 8
$L32163:

; 1105 :             break;
; 1106 :             
; 1107 :         }
; 1108 :         
; 1109 :         break;

  001de	e9 e9 00 00 00	 jmp	 $L32146
$L32173:

; 1110 :         
; 1111 :     case CUE_STATE_STOPPED:
; 1112 :         
; 1113 :         switch (m_dwState) {

  001e3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001e6	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [eax+236]
  001ec	89 4d e0	 mov	 DWORD PTR tv161[ebp], ecx
  001ef	83 7d e0 03	 cmp	 DWORD PTR tv161[ebp], 3
  001f3	0f 87 d3 00 00
	00		 ja	 $L32146
  001f9	8b 55 e0	 mov	 edx, DWORD PTR tv161[ebp]
  001fc	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L32532[edx*4]
$L32178:

; 1114 :         case CUE_STATE_STOPPING:
; 1115 :             
; 1116 :             //
; 1117 :             // valid transition
; 1118 :             //
; 1119 :             
; 1120 :             DPF_INFO("Cue 0x%x is now stopped (was in Stopping state)",this);

  00203	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00208	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  0020d	68 60 04 00 00	 push	 1120			; 00000460H
  00212	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00217	6a 04		 push	 4
  00219	6a 09		 push	 9
  0021b	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00220	83 c4 18	 add	 esp, 24			; 00000018H
  00223	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@CFCCCPC@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@
  0022c	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00231	83 c4 08	 add	 esp, 8

; 1121 :             break;

  00234	e9 93 00 00 00	 jmp	 $L32146
$L32180:

; 1122 :             
; 1123 :         case CUE_STATE_INITIALIZED:
; 1124 :             
; 1125 :             DPF_WARNING("Cue 0x%x not playing yet",this);

  00239	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  0023e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  00243	68 65 04 00 00	 push	 1125			; 00000465H
  00248	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  0024d	6a 03		 push	 3
  0024f	6a 09		 push	 9
  00251	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00256	83 c4 18	 add	 esp, 24			; 00000018H
  00259	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0025c	51		 push	 ecx
  0025d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CFIAAKAB@Cue?50x?$CFx?5not?5playing?5yet?$AA@
  00262	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00267	83 c4 08	 add	 esp, 8

; 1126 :             break;

  0026a	eb 60		 jmp	 SHORT $L32146
$L32181:

; 1127 :             
; 1128 :         case CUE_STATE_CREATED:
; 1129 :             
; 1130 :             DPF_ERROR("Cue 0x%x not initialized yet!");

  0026c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  00271	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  00276	68 6a 04 00 00	 push	 1130			; 0000046aH
  0027b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  00280	6a 01		 push	 1
  00282	6a 09		 push	 9
  00284	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  00289	83 c4 18	 add	 esp, 24			; 00000018H
  0028c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@JPJHEHCO@Cue?50x?$CFx?5not?5initialized?5yet?$CB?$AA@
  00291	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  00296	83 c4 04	 add	 esp, 4

; 1131 :             break;

  00299	eb 31		 jmp	 SHORT $L32146
$L32182:

; 1132 :             
; 1133 :         case CUE_STATE_PLAYING:
; 1134 :             
; 1135 :             DPF_INFO("Cue 0x%x is now stopped (was in Playing state)",this);

  0029b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NDMLHGOG@XACTENG?$AA@
  002a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@BAGKCIGN@CSoundCue?3?3CheckStateTransition?$AA@
  002a5	68 6f 04 00 00	 push	 1135			; 0000046fH
  002aa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DM@DGCPMAGF@c?3?2xbox?2private?2windows?2directx?2@
  002af	6a 04		 push	 4
  002b1	6a 09		 push	 9
  002b3	e8 00 00 00 00	 call	 ?DwDbgSetContext@XACT@@YAXKKPBDI00@Z ; XACT::DwDbgSetContext
  002b8	83 c4 18	 add	 esp, 24			; 00000018H
  002bb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002be	52		 push	 edx
  002bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@GHJBDHLG@Cue?50x?$CFx?5is?5now?5stopped?5?$CIwas?5in?5@
  002c4	e8 00 00 00 00	 call	 ?DwDbgPrint@XACT@@YAXPBDZZ ; XACT::DwDbgPrint
  002c9	83 c4 08	 add	 esp, 8
$L32146:

; 1136 :             break;
; 1137 :             
; 1138 :         }
; 1139 :         
; 1140 :         break;        
; 1141 :         
; 1142 :     }
; 1143 : 
; 1144 :     if (pdwOldState) {

  002cc	83 7d 0c 00	 cmp	 DWORD PTR _pdwOldState$[ebp], 0
  002d0	74 0e		 je	 SHORT $L32184

; 1145 :         *pdwOldState = m_dwState;

  002d2	8b 45 0c	 mov	 eax, DWORD PTR _pdwOldState$[ebp]
  002d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002d8	8b 91 ec 00 00
	00		 mov	 edx, DWORD PTR [ecx+236]
  002de	89 10		 mov	 DWORD PTR [eax], edx
$L32184:

; 1146 :     }
; 1147 : 
; 1148 :     m_dwState = dwNewState;

  002e0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002e3	8b 4d 08	 mov	 ecx, DWORD PTR _dwNewState$[ebp]
  002e6	89 88 ec 00 00
	00		 mov	 DWORD PTR [eax+236], ecx

; 1149 : 
; 1150 : }

  002ec	8d 4d f4	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  002ef	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  002f4	8b e5		 mov	 esp, ebp
  002f6	5d		 pop	 ebp
  002f7	c2 08 00	 ret	 8
$L32530:
  002fa	00 00 00 00	 DD	 $L32157
  002fe	00 00 00 00	 DD	 $L32154
  00302	00 00 00 00	 DD	 $L32159
  00306	00 00 00 00	 DD	 $L32151
  0030a	00 00 00 00	 DD	 $L32154
$L32531:
  0030e	00 00 00 00	 DD	 $L32170
  00312	00 00 00 00	 DD	 $L32168
  00316	00 00 00 00	 DD	 $L32166
  0031a	00 00 00 00	 DD	 $L32163
  0031e	00 00 00 00	 DD	 $L32171
$L32532:
  00322	00 00 00 00	 DD	 $L32181
  00326	00 00 00 00	 DD	 $L32180
  0032a	00 00 00 00	 DD	 $L32182
  0032e	00 00 00 00	 DD	 $L32178
?CheckStateTransition@CSoundCue@XACT@@AAEXKPAK@Z ENDP	; XACT::CSoundCue::CheckStateTransition
XACTENG	ENDS
EXTRN	?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z:NEAR ; XACT::CEngine::AddNotificationToPendingList
EXTRN	?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z:NEAR ; XACT::CSoundBank::ProcessRuntimeEvent
; Function compile flags: /Odt
;	COMDAT ?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z
XACTENG	SEGMENT
tv142 = -32
tv68 = -28
_this$ = -24
___AutoIrql$ = -20
_pContext$ = -12
_bHandledLocally$ = -8
_dwNotificationEvent$ = -4
_pEventDesc$ = 8
?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z PROC NEAR ; XACT::CSoundCue::ProcessRuntimeEvent, COMDAT
; _this$ = ecx

; 1156 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1157 :     AutoIrql();

  00009	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::CAutoIrql

; 1158 : 
; 1159 :     BOOL bHandledLocally = TRUE;

  00011	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _bHandledLocally$[ebp], 1

; 1160 :     
; 1161 :     PNOTIFICATION_CONTEXT pContext;
; 1162 :     DWORD dwNotificationEvent = -1;

  00018	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _dwNotificationEvent$[ebp], -1

; 1163 : 
; 1164 :     //
; 1165 :     // generate notifications based on runtime events, if the user
; 1166 :     // has registered appropriately
; 1167 :     //
; 1168 : 
; 1169 :     switch (pEventDesc->Header.wType) {

  0001f	8b 45 08	 mov	 eax, DWORD PTR _pEventDesc$[ebp]
  00022	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00025	89 4d e4	 mov	 DWORD PTR tv68[ebp], ecx
  00028	83 7d e4 0a	 cmp	 DWORD PTR tv68[ebp], 10	; 0000000aH
  0002c	0f 87 b7 00 00
	00		 ja	 $L32194
  00032	8b 55 e4	 mov	 edx, DWORD PTR tv68[ebp]
  00035	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $L32536[edx]
  0003c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L32537[eax*4]
$L32197:

; 1170 : 
; 1171 :     case eXACTEvent_PlayWithPitchAndVolumeVariation:
; 1172 :     case eXACTEvent_Play:
; 1173 :         
; 1174 :         dwNotificationEvent = eXACTNotification_Start;

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwNotificationEvent$[ebp], 0

; 1175 :         pContext = &m_aNotificationContexts[dwNotificationEvent];

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _dwNotificationEvent$[ebp]
  0004d	c1 e1 06	 shl	 ecx, 6
  00050	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8d 44 0a 28	 lea	 eax, DWORD PTR [edx+ecx+40]
  00057	89 45 f4	 mov	 DWORD PTR _pContext$[ebp], eax

; 1176 : 
; 1177 :         //
; 1178 :         // only the first play event of ANY track matters...
; 1179 :         // dont handle the notification for any subsequent plays
; 1180 :         //
; 1181 : 
; 1182 :         if (pContext->bRegistered && (pContext->PendingNotification.rtTimeStamp != 0))

  0005a	8b 4d f4	 mov	 ecx, DWORD PTR _pContext$[ebp]
  0005d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00060	74 1f		 je	 SHORT $L32198
  00062	8b 55 f4	 mov	 edx, DWORD PTR _pContext$[ebp]
  00065	89 55 e0	 mov	 DWORD PTR tv142[ebp], edx
  00068	8b 45 e0	 mov	 eax, DWORD PTR tv142[ebp]
  0006b	8b 4d e0	 mov	 ecx, DWORD PTR tv142[ebp]
  0006e	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00071	0b 51 2c	 or	 edx, DWORD PTR [ecx+44]
  00074	85 d2		 test	 edx, edx
  00076	74 09		 je	 SHORT $L32198

; 1183 :         {
; 1184 : 
; 1185 :             bHandledLocally = FALSE;

  00078	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bHandledLocally$[ebp], 0

; 1186 : 
; 1187 :         } else {

  0007f	eb 0f		 jmp	 SHORT $L32199
$L32198:

; 1188 : 
; 1189 :             //
; 1190 :             // call the soundbank in case it has some notifications registered for this
; 1191 :             //
; 1192 :             
; 1193 :             m_pSoundBank->ProcessRuntimeEvent(pEventDesc);

  00081	8b 45 08	 mov	 eax, DWORD PTR _pEventDesc$[ebp]
  00084	50		 push	 eax
  00085	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0008b	e8 00 00 00 00	 call	 ?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z ; XACT::CSoundBank::ProcessRuntimeEvent
$L32199:

; 1194 :         }
; 1195 : 
; 1196 :         break;

  00090	eb 57		 jmp	 SHORT $L32194
$L32200:

; 1197 : 
; 1198 :     case eXACTEvent_Stop:
; 1199 : 
; 1200 :         //
; 1201 :         // Stop is a special case. This is not a stop that got dispatched from the
; 1202 :         // sequencer. Its instead a made-up stop called from when the Cue realizes all its
; 1203 :         // tracks have stopped playing
; 1204 :         //
; 1205 : 
; 1206 :         dwNotificationEvent = eXACTNotification_Stop;

  00092	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _dwNotificationEvent$[ebp], 1

; 1207 :         pContext = &m_aNotificationContexts[dwNotificationEvent];

  00099	8b 55 fc	 mov	 edx, DWORD PTR _dwNotificationEvent$[ebp]
  0009c	c1 e2 06	 shl	 edx, 6
  0009f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8d 4c 10 28	 lea	 ecx, DWORD PTR [eax+edx+40]
  000a6	89 4d f4	 mov	 DWORD PTR _pContext$[ebp], ecx

; 1208 : 
; 1209 :         //
; 1210 :         // call the soundbank in case it has some notifications registered for this
; 1211 :         //
; 1212 : 
; 1213 :         m_pSoundBank->ProcessRuntimeEvent(pEventDesc);

  000a9	8b 55 08	 mov	 edx, DWORD PTR _pEventDesc$[ebp]
  000ac	52		 push	 edx
  000ad	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b3	e8 00 00 00 00	 call	 ?ProcessRuntimeEvent@CSoundBank@XACT@@QAEXPAUXACT_TRACK_EVENT@@@Z ; XACT::CSoundBank::ProcessRuntimeEvent

; 1214 :         break;

  000b8	eb 2f		 jmp	 SHORT $L32194
$L32201:

; 1215 : 
; 1216 :     case eXACTEvent_Marker:
; 1217 :         dwNotificationEvent = eXACTNotification_Marker;

  000ba	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _dwNotificationEvent$[ebp], 2

; 1218 :         pContext = &m_aNotificationContexts[dwNotificationEvent];

  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _dwNotificationEvent$[ebp]
  000c4	c1 e1 06	 shl	 ecx, 6
  000c7	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000ca	8d 44 0a 28	 lea	 eax, DWORD PTR [edx+ecx+40]
  000ce	89 45 f4	 mov	 DWORD PTR _pContext$[ebp], eax

; 1219 : 
; 1220 :         //
; 1221 :         // copy data to cached context
; 1222 :         //
; 1223 : 
; 1224 :         memcpy(pContext->PendingNotification.Data.Marker.bData,
; 1225 :             pEventDesc->EventData.Marker.bData, XACT_SIZEOF_MARKER_DATA);

  000d1	6a 08		 push	 8
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _pEventDesc$[ebp]
  000d6	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000d9	51		 push	 ecx
  000da	8b 55 f4	 mov	 edx, DWORD PTR _pContext$[ebp]
  000dd	83 c2 20	 add	 edx, 32			; 00000020H
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 _memcpy
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
$L32194:

; 1226 : 
; 1227 :         break;
; 1228 :     }
; 1229 : 
; 1230 :     if (bHandledLocally) {

  000e9	83 7d f8 00	 cmp	 DWORD PTR _bHandledLocally$[ebp], 0
  000ed	74 0f		 je	 SHORT $L32202

; 1231 : 
; 1232 :         g_pEngine->AddNotificationToPendingList(pContext);

  000ef	8b 45 f4	 mov	 eax, DWORD PTR _pContext$[ebp]
  000f2	50		 push	 eax
  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pEngine
  000f9	e8 00 00 00 00	 call	 ?AddNotificationToPendingList@CEngine@XACT@@QAEXPAU_NOTIFICATION_CONTEXT@2@@Z ; XACT::CEngine::AddNotificationToPendingList
$L32202:

; 1233 : 
; 1234 :     }            
; 1235 : 
; 1236 : }

  000fe	8d 4d ec	 lea	 ecx, DWORD PTR ___AutoIrql$[ebp]
  00101	e8 00 00 00 00	 call	 ??1CAutoIrql@XACT@@QAE@XZ ; XACT::CAutoIrql::~CAutoIrql
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
$L32537:
  0010c	00 00 00 00	 DD	 $L32197
  00110	00 00 00 00	 DD	 $L32200
  00114	00 00 00 00	 DD	 $L32201
  00118	00 00 00 00	 DD	 $L32194
$L32536:
  0011c	00		 DB	 0
  0011d	00		 DB	 0
  0011e	01		 DB	 1
  0011f	03		 DB	 3
  00120	03		 DB	 3
  00121	03		 DB	 3
  00122	03		 DB	 3
  00123	03		 DB	 3
  00124	03		 DB	 3
  00125	03		 DB	 3
  00126	02		 DB	 2
?ProcessRuntimeEvent@CSoundCue@XACT@@IAEXPAUXACT_TRACK_EVENT@@@Z ENDP ; XACT::CSoundCue::ProcessRuntimeEvent
XACTENG	ENDS
PUBLIC	?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ; XACT::CSoundCue::GetNotificationContext
; Function compile flags: /Odt
;	COMDAT ?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z
XACTENG	SEGMENT
_this$ = -12
$T32541 = -8
___AutoLock$ = -4
_dwType$ = 8
?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z PROC NEAR ; XACT::CSoundCue::GetNotificationContext, COMDAT
; _this$ = ecx

; 1243 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1244 : 
; 1245 :     DPF_ENTER();
; 1246 :     ENTER_EXTERNAL_METHOD();    

  00009	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::CAutoLock

; 1247 :     return &m_aNotificationContexts[dwType];

  00011	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00014	c1 e0 06	 shl	 eax, 6
  00017	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8d 54 01 28	 lea	 edx, DWORD PTR [ecx+eax+40]
  0001e	89 55 f8	 mov	 DWORD PTR $T32541[ebp], edx
  00021	8d 4d fc	 lea	 ecx, DWORD PTR ___AutoLock$[ebp]
  00024	e8 00 00 00 00	 call	 ??1CAutoLock@XACT@@QAE@XZ ; XACT::CAutoLock::~CAutoLock
  00029	8b 45 f8	 mov	 eax, DWORD PTR $T32541[ebp]

; 1248 : 
; 1249 : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetNotificationContext@CSoundCue@XACT@@QAEPAU_NOTIFICATION_CONTEXT@2@K@Z ENDP ; XACT::CSoundCue::GetNotificationContext
XACTENG	ENDS
END
