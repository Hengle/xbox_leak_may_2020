; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DBCK@?$CBm_pParent?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04CONG@hWnd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07MMMB@pWindow?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@KBDH@m_dwValidSignature?5?$DN?$DN?5pWindow?9?$DOm@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07OBKI@plParam?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07GECF@pCreate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@EGFH@pMdiCreate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04JNGL@pCtx?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@IPFA@m_dwValidSignature?5?$DN?$DN?5pCtx?9?$DOdwSi@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@JEII@?$CBpWindow?9?$DOm_hWnd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E13
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWindow@@QAE@III@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWindow@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWindow@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowContext@CWindow@@KGXPAUHWND__@@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeWindowContext@CWindow@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnInitialCreate@CWindow@@KGPAV1@PAUHWND__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destroy@CWindow@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HandleMessage@CWindow@@UAEHIIJPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRedraw@CWindow@@UAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CWindow@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	_g_hInstance
PUBLIC	_g_szAppTitle
PUBLIC	?m_dwValidSignature@CWindow@@1KB		; CWindow::m_dwValidSignature
_BSS	SEGMENT
_g_hInstance DD	01H DUP (?)
_g_szAppTitle DB 0100H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_$S14	DD	FLAT:_$E13
CRT$XCU	ENDS
CONST	SEGMENT
?m_dwValidSignature@CWindow@@1KB DD 020646e77H		; CWindow::m_dwValidSignature
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT _$E13
_TEXT	SEGMENT
_$E13	PROC NEAR					; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 _$E12
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
_$E13	ENDP
_TEXT	ENDS
EXTRN	__imp__GetModuleHandleA@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.cpp
;	COMDAT _$E12
_TEXT	SEGMENT
_$E12	PROC NEAR					; COMDAT

; 16   : const HINSTANCE g_hInstance = GetModuleHandle(NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR _g_hInstance, eax
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_$E12	ENDP
_TEXT	ENDS
PUBLIC	??0CWindow@@QAE@III@Z				; CWindow::CWindow
PUBLIC	?IsWindow@CWindow@@UAEHXZ			; CWindow::IsWindow
PUBLIC	?Destroy@CWindow@@UAEXXZ			; CWindow::Destroy
PUBLIC	?SetRedraw@CWindow@@UAEHH@Z			; CWindow::SetRedraw
PUBLIC	?SendMessageA@CWindow@@UAEJIIJ@Z		; CWindow::SendMessageA
PUBLIC	?PostMessageA@CWindow@@UAEJIIJ@Z		; CWindow::PostMessageA
PUBLIC	?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z	; CWindow::SendDlgItemMessageA
PUBLIC	?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z		; CWindow::GetDlgItem
PUBLIC	?SetWindowTextA@CWindow@@UAEHPBD@Z		; CWindow::SetWindowTextA
PUBLIC	?SetDlgItemTextA@CWindow@@UAEHHPBD@Z		; CWindow::SetDlgItemTextA
PUBLIC	?SetDlgItemInt@CWindow@@UAEHHIH@Z		; CWindow::SetDlgItemInt
PUBLIC	?GetDlgItemTextA@CWindow@@UAEHHPADH@Z		; CWindow::GetDlgItemTextA
PUBLIC	?GetDlgItemInt@CWindow@@UAEIHPAHH@Z		; CWindow::GetDlgItemInt
PUBLIC	?MoveWindow@CWindow@@UAEHHHHHH@Z		; CWindow::MoveWindow
PUBLIC	?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z	; CWindow::MoveWindow
PUBLIC	?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetWindowRect
PUBLIC	?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetClientRect
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z	; CWindow::ScreenToClient
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::ScreenToClient
PUBLIC	?DragAcceptFiles@CWindow@@UAEXH@Z		; CWindow::DragAcceptFiles
PUBLIC	??BCWindow@@UAEPAUHWND__@@XZ			; CWindow::operator HWND__ *
PUBLIC	?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z	; CWindow::DispatchMessageA
PUBLIC	?OnCreate@CWindow@@UAEHPAXPAJ@Z			; CWindow::OnCreate
PUBLIC	?OnClose@CWindow@@UAEHPAJ@Z			; CWindow::OnClose
PUBLIC	?OnDestroy@CWindow@@UAEHPAJ@Z			; CWindow::OnDestroy
PUBLIC	?OnSize@CWindow@@UAEHIIIPAJ@Z			; CWindow::OnSize
PUBLIC	?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z	; CWindow::OnCommand
PUBLIC	?OnSysCommand@CWindow@@UAEHIPAJ@Z		; CWindow::OnSysCommand
PUBLIC	?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z	; CWindow::OnNotify
PUBLIC	?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z	; CWindow::OnEraseBackground
PUBLIC	?OnPaint@CWindow@@UAEHPAJ@Z			; CWindow::OnPaint
PUBLIC	?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z	; CWindow::OnContextMenu
PUBLIC	?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z	; CWindow::OnDropFiles
PUBLIC	?HandleMessage@CWindow@@UAEHIIJPAJ@Z		; CWindow::HandleMessage
PUBLIC	?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z	; CWindow::OnScroll
PUBLIC	?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z	; CWindow::OnScroll
PUBLIC	?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z	; CWindow::DefWindowProcA
PUBLIC	?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z	; CWindow::Create
PUBLIC	??_7CWindow@@6B@				; CWindow::`vftable'
PUBLIC	??_GCWindow@@UAEPAXI@Z				; CWindow::`scalar deleting destructor'
PUBLIC	??_ECWindow@@UAEPAXI@Z				; CWindow::`vector deleting destructor'
EXTRN	__purecall:NEAR
EXTRN	__imp__LoadAcceleratorsA@8:NEAR
EXTRN	__imp__LoadMenuA@8:NEAR
;	COMDAT ??_7CWindow@@6B@
CONST	SEGMENT
??_7CWindow@@6B@ DD FLAT:??_ECWindow@@UAEPAXI@Z		; CWindow::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CWindow@@UAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnSize@CWindow@@UAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CWindow@@UAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWindow@@QAE@III@Z
_TEXT	SEGMENT
_nMenuId$ = 8
_nAccelId$ = 12
_nWindowType$ = 16
_this$ = -4
??0CWindow@@QAE@III@Z PROC NEAR				; CWindow::CWindow, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 77 6e
	64 20		 mov	 DWORD PTR [eax+4], 543452791 ; 20646e77H
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 55 10	 mov	 edx, DWORD PTR _nWindowType$[ebp]
  00017	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWindow@@6B@ ; CWindow::`vftable'

; 58   : 
; 59   : #ifndef WNDWRAP_USE_SET_WINDOW_LONG
; 60   : 
; 61   :     if(!m_lstWindows.Flink || !m_lstWindows.Blink)
; 62   :     {
; 63   :         ASSERT(!m_lstWindows.Flink && !m_lstWindows.Blink);
; 64   :         InitializeListHead(&m_lstWindows);
; 65   :     }
; 66   :     
; 67   :     InitializeListHead(&m_leWindows);
; 68   : 
; 69   : #endif // WNDWRAP_USE_SET_WINDOW_LONG
; 70   : 
; 71   :     InitializeListHead(&m_lstChildren);

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 10	 add	 ecx, 16			; 00000010H
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00038	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 72   :     InitializeListHead(&m_leChildren);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 c0 28	 add	 eax, 40			; 00000028H
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00050	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 73   : 
; 74   :     m_pParent = NULL;

  00053	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 75   :     m_hWnd = NULL;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 76   :     m_hMenu = NULL;

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 77   :     m_hAccel = NULL;

  00071	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00074	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 78   :     m_fRedraw = TRUE;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 40 24 01 00
	00 00		 mov	 DWORD PTR [eax+36], 1

; 79   : 
; 80   :     if(-1 != nMenuId)

  00085	83 7d 08 ff	 cmp	 DWORD PTR _nMenuId$[ebp], -1
  00089	74 1d		 je	 SHORT $L49647

; 81   :     {
; 82   :         m_hMenu = LoadMenu(g_hInstance, MAKEINTRESOURCE(nMenuId));

  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _nMenuId$[ebp]
  0008e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00094	51		 push	 ecx
  00095	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hInstance
  0009b	52		 push	 edx
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadMenuA@8
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$L49647:

; 83   :     }
; 84   : 
; 85   :     if(-1 != nAccelId)

  000a8	83 7d 0c ff	 cmp	 DWORD PTR _nAccelId$[ebp], -1
  000ac	74 1c		 je	 SHORT $L49651

; 86   :     {
; 87   :         m_hAccel = LoadAccelerators(g_hInstance, MAKEINTRESOURCE(nAccelId));

  000ae	8b 55 0c	 mov	 edx, DWORD PTR _nAccelId$[ebp]
  000b1	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  000b7	52		 push	 edx
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hInstance
  000bd	50		 push	 eax
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadAcceleratorsA@8
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	89 41 20	 mov	 DWORD PTR [ecx+32], eax
$L49651:

; 88   :     }
; 89   : }

  000ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 0c 00	 ret	 12			; 0000000cH
??0CWindow@@QAE@III@Z ENDP				; CWindow::CWindow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCreate@CWindow@@UAEHPAXPAJ@Z PROC NEAR		; CWindow::OnCreate, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 242  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnCreate@CWindow@@UAEHPAXPAJ@Z ENDP			; CWindow::OnCreate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnClose@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnClose, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 247  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnClose@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnClose
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDestroy@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnDestroy, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 252  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnDestroy@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnDestroy
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSize@CWindow@@UAEHIIIPAJ@Z PROC NEAR			; CWindow::OnSize, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 257  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnSize@CWindow@@UAEHIIIPAJ@Z ENDP			; CWindow::OnSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z PROC NEAR	; CWindow::OnCommand, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 261  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 262  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z ENDP		; CWindow::OnCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSysCommand@CWindow@@UAEHIPAJ@Z PROC NEAR		; CWindow::OnSysCommand, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 266  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 267  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnSysCommand@CWindow@@UAEHIPAJ@Z ENDP			; CWindow::OnSysCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z PROC NEAR	; CWindow::OnNotify, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 272  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z ENDP		; CWindow::OnNotify
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z PROC NEAR ; CWindow::OnEraseBackground, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 277  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z ENDP	; CWindow::OnEraseBackground
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnPaint@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnPaint, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 282  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnPaint@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnPaint
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z PROC NEAR	; CWindow::OnScroll, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 287  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z ENDP		; CWindow::OnScroll
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z PROC NEAR ; CWindow::OnContextMenu, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 292  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z ENDP	; CWindow::OnContextMenu
_TEXT	ENDS
EXTRN	__imp__DefWindowProcA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z PROC NEAR	; CWindow::DefWindowProcA, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  :     return ::DefWindowProc(hWnd, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16

; 297  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z ENDP	; CWindow::DefWindowProcA
_TEXT	ENDS
PUBLIC	??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_04BEIE@this?$AA@				; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\base\wndwrap.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT
??_C@_04BEIE@this?$AA@ DB 'this', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCWindow@@UAEPAUHWND__@@XZ PROC NEAR			; CWindow::operator HWND__ *, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 301  :     ASSERT(this);

  00007	68 2d 01 00 00	 push	 301			; 0000012dH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04BEIE@this?$AA@ ; `string'
  00016	33 c0		 xor	 eax, eax
  00018	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 302  :     return m_hWnd;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 303  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??BCWindow@@UAEPAUHWND__@@XZ ENDP			; CWindow::operator HWND__ *
_TEXT	ENDS
PUBLIC	??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@	; `string'
EXTRN	__imp__IsWindow@4:NEAR
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ DB '::IsWindow(m_hWnd)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsWindow@CWindow@@UAEHXZ PROC NEAR			; CWindow::IsWindow, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  :     if(!m_hWnd)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0000e	75 04		 jne	 SHORT $L49125

; 308  :     {
; 309  :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 2f		 jmp	 SHORT $L49124
$L49125:

; 310  :     }
; 311  : 
; 312  :     ASSERT(::IsWindow(m_hWnd));

  00014	68 38 01 00 00	 push	 312			; 00000138H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ ; `string'
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	40		 inc	 eax
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 313  : 
; 314  :     return TRUE;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$L49124:

; 315  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?IsWindow@CWindow@@UAEHXZ ENDP				; CWindow::IsWindow
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?SendMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::SendMessageA, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     return ::SendMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 320  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::SendMessageA
_TEXT	ENDS
EXTRN	__imp__PostMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?PostMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::PostMessageA, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  :     return ::PostMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 325  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?PostMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::PostMessageA
_TEXT	ENDS
EXTRN	__imp__SetWindowTextA@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT
_pszText$ = 8
_this$ = -4
?SetWindowTextA@CWindow@@UAEHPBD@Z PROC NEAR		; CWindow::SetWindowTextA, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  :     return ::SetWindowText(m_hWnd, pszText);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 330  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetWindowTextA@CWindow@@UAEHPBD@Z ENDP			; CWindow::SetWindowTextA
_TEXT	ENDS
EXTRN	__imp__MoveWindow@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_nWidth$ = 16
_nHeight$ = 20
_fRepaint$ = 24
_this$ = -4
?MoveWindow@CWindow@@UAEHHHHHH@Z PROC NEAR		; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :     return ::MoveWindow(m_hWnd, x, y, nWidth, nHeight, fRepaint);

  00007	8b 45 18	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 335  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?MoveWindow@CWindow@@UAEHHHHHH@Z ENDP			; CWindow::MoveWindow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_fRepaint$ = 12
_this$ = -4
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z PROC NEAR	; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  :     return ::MoveWindow(m_hWnd, prcWindow->left, prcWindow->top, prcWindow->right - prcWindow->left, prcWindow->bottom - prcWindow->top, fRepaint);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 340  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z ENDP		; CWindow::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_this$ = -4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetWindowRect, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :     return ::GetWindowRect(m_hWnd, prcWindow);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 345  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetWindowRect
_TEXT	ENDS
EXTRN	__imp__GetClientRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcClient$ = 8
_this$ = -4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetClientRect, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 349  :     return ::GetClientRect(m_hWnd, prcClient);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcClient$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 350  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetClientRect
_TEXT	ENDS
EXTRN	__imp__ScreenToClient@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_ppt$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  :     return ::ScreenToClient(m_hWnd, ppt);

  00007	8b 45 08	 mov	 eax, DWORD PTR _ppt$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 355  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z ENDP	; CWindow::ScreenToClient
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prc$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  :     if(!::ScreenToClient(m_hWnd, (LPPOINT)&prc->left))

  00007	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
  00018	85 c0		 test	 eax, eax
  0001a	75 04		 jne	 SHORT $L49173

; 360  :     {
; 361  :         return FALSE;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 14		 jmp	 SHORT $L49171
$L49173:

; 362  :     }
; 363  : 
; 364  :     return ::ScreenToClient(m_hWnd, (LPPOINT)&prc->right);

  00020	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  00023	83 c0 08	 add	 eax, 8
  00026	50		 push	 eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002d	52		 push	 edx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
$L49171:

; 365  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z ENDP	; CWindow::ScreenToClient
_TEXT	ENDS
EXTRN	__imp__SendDlgItemMessageA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT
_nItemId$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z PROC NEAR	; CWindow::SendDlgItemMessageA, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 369  :     return ::SendDlgItemMessage(m_hWnd, nItemId, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 370  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z ENDP		; CWindow::SendDlgItemMessageA
_TEXT	ENDS
EXTRN	__imp__GetDlgItem@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT
_nItemId$ = 8
_this$ = -4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z PROC NEAR	; CWindow::GetDlgItem, COMDAT
; _this$ = ecx

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :     return ::GetDlgItem(m_hWnd, nItemId);

  00007	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 375  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z ENDP		; CWindow::GetDlgItem
_TEXT	ENDS
EXTRN	__imp__SetDlgItemTextA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_this$ = -4
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z PROC NEAR		; CWindow::SetDlgItemTextA, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  :     return ::SetDlgItemText(m_hWnd, nItemId, pszString);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nItemId$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 380  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z ENDP		; CWindow::SetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__SetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_nValue$ = 12
_fSigned$ = 16
_this$ = -4
?SetDlgItemInt@CWindow@@UAEHHIH@Z PROC NEAR		; CWindow::SetDlgItemInt, COMDAT
; _this$ = ecx

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 384  :     return ::SetDlgItemInt(m_hWnd, nItemId, nValue, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nValue$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemInt@16

; 385  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetDlgItemInt@CWindow@@UAEHHIH@Z ENDP			; CWindow::SetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__GetDlgItemTextA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_nLength$ = 16
_this$ = -4
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z PROC NEAR		; CWindow::GetDlgItemTextA, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :     return ::GetDlgItemText(m_hWnd, nItemId, pszString, nLength);

  00007	8b 45 10	 mov	 eax, DWORD PTR _nLength$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 390  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z ENDP		; CWindow::GetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__GetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pfTranslated$ = 12
_fSigned$ = 16
_this$ = -4
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z PROC NEAR		; CWindow::GetDlgItemInt, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :     return ::GetDlgItemInt(m_hWnd, nItemId, pfTranslated, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pfTranslated$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemInt@16

; 395  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z ENDP		; CWindow::GetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__DragAcceptFiles@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT
_fAccept$ = 8
_this$ = -4
?DragAcceptFiles@CWindow@@UAEXH@Z PROC NEAR		; CWindow::DragAcceptFiles, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 399  :     ::DragAcceptFiles(m_hWnd, fAccept);

  00007	8b 45 08	 mov	 eax, DWORD PTR _fAccept$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 400  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?DragAcceptFiles@CWindow@@UAEXH@Z ENDP			; CWindow::DragAcceptFiles
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z PROC NEAR	; CWindow::OnDropFiles, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 404  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 405  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z ENDP	; CWindow::OnDropFiles
_TEXT	ENDS
PUBLIC	??1CWindow@@UAE@XZ				; CWindow::~CWindow
; Function compile flags: /Odt
;	COMDAT ??_GCWindow@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCWindow@@UAEPAXI@Z PROC NEAR			; CWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWindow@@UAE@XZ	; CWindow::~CWindow
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L49658
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L49658:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWindow@@UAEPAXI@Z ENDP				; CWindow::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.cpp
_TEXT	ENDS
;	COMDAT ??1CWindow@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CWindow@@UAE@XZ PROC NEAR				; CWindow::~CWindow, COMDAT
; _this$ = ecx

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWindow@@6B@ ; CWindow::`vftable'

; 115  :     //
; 116  :     // Destroy the window
; 117  :     //
; 118  :     
; 119  :     Destroy();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Destroy@CWindow@@UAEXXZ ; CWindow::Destroy

; 120  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CWindow@@UAE@XZ ENDP					; CWindow::~CWindow
_TEXT	ENDS
PUBLIC	?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z		; CWindow::GetHWND
PUBLIC	?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z	; CWindow::WindowProc
PUBLIC	?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z		; InsertTailList
PUBLIC	??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0L@DBCK@?$CBm_pParent?$AA@		; `string'
EXTRN	__imp__GetClassInfoExA@12:NEAR
EXTRN	__imp__CreateWindowExA@48:NEAR
;	COMDAT ??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\base\wndwrap.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBCK@?$CBm_pParent?$AA@
CONST	SEGMENT
??_C@_0L@DBCK@?$CBm_pParent?$AA@ DB '!m_pParent', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
_TEXT	SEGMENT
_pParent$ = 8
_pszClassName$ = 12
_pszWindowName$ = 16
_dwExStyle$ = 20
_dwStyle$ = 24
_x$ = 28
_y$ = 32
_nWidth$ = 36
_nHeight$ = 40
_nControlId$ = 44
_pvParam$ = 48
_this$ = -64
_wc$ = -60
_ctx$ = -12
?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z PROC NEAR	; CWindow::Create, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	57		 push	 edi
  00007	89 4d c0	 mov	 DWORD PTR _this$[ebp], ecx

; 167  :     WNDCLASSEX              wc  = { 0 };

  0000a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp], 0
  00011	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00016	33 c0		 xor	 eax, eax
  00018	8d 7d c8	 lea	 edi, DWORD PTR _wc$[ebp+4]
  0001b	f3 ab		 rep stosd

; 168  :     WINDOWCREATECTX         ctx;
; 169  : 
; 170  :     ASSERT(!m_pParent);

  0001d	68 aa 00 00 00	 push	 170			; 000000aaH
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@DBCK@?$CBm_pParent?$AA@ ; `string'
  0002c	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	33 c9		 xor	 ecx, ecx
  00031	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00035	0f 95 c1	 setne	 cl
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 171  :     m_pParent = pParent;

  00041	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 45 08	 mov	 eax, DWORD PTR _pParent$[ebp]
  00047	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 172  : 
; 173  :     //
; 174  :     // Check to see if the window class uses our WindowProc to process
; 175  :     // messages.  If it doesn't, pass the creation context directly to
; 176  :     // CreateWindowEx instead of munging it.  We'll never get a WM_CREATE
; 177  :     // message, so there's no point in changing the parameter. Also, some 
; 178  :     // windows require specific data be passed to their WM_CREATE handler
; 179  :     // (MDICLIENT for example).
; 180  :     //
; 181  : 
; 182  :     wc.cbSize = sizeof(wc);

  0004a	c7 45 c4 30 00
	00 00		 mov	 DWORD PTR _wc$[ebp], 48	; 00000030H

; 183  :     
; 184  :     if(GetClassInfoEx(g_hInstance, pszClassName, &wc))

  00051	8d 4d c4	 lea	 ecx, DWORD PTR _wc$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 0c	 mov	 edx, DWORD PTR _pszClassName$[ebp]
  00058	52		 push	 edx
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hInstance
  0005e	50		 push	 eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassInfoExA@12
  00065	85 c0		 test	 eax, eax
  00067	74 22		 je	 SHORT $L49681

; 185  :     {
; 186  :         if(WindowProc == wc.lpfnWndProc)

  00069	81 7d cc 00 00
	00 00		 cmp	 DWORD PTR _wc$[ebp+8], OFFSET FLAT:?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z ; CWindow::WindowProc
  00070	75 19		 jne	 SHORT $L49682

; 187  :         {
; 188  :             ctx.dwSignature = m_dwValidSignature;

  00072	c7 45 f4 77 6e
	64 20		 mov	 DWORD PTR _ctx$[ebp], 543452791 ; 20646e77H

; 189  :             ctx.pWindow = this;

  00079	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	89 4d f8	 mov	 DWORD PTR _ctx$[ebp+4], ecx

; 190  :             ctx.pvContext = pvParam;

  0007f	8b 55 30	 mov	 edx, DWORD PTR _pvParam$[ebp]
  00082	89 55 fc	 mov	 DWORD PTR _ctx$[ebp+8], edx

; 191  : 
; 192  :             pvParam = &ctx;

  00085	8d 45 f4	 lea	 eax, DWORD PTR _ctx$[ebp]
  00088	89 45 30	 mov	 DWORD PTR _pvParam$[ebp], eax
$L49682:
$L49681:

; 193  :         }
; 194  :     }
; 195  :     
; 196  :     if(!(m_hWnd = CreateWindowEx(dwExStyle, pszClassName, pszWindowName, dwStyle, x, y, nWidth, nHeight, GetHWND(pParent), m_hMenu ? m_hMenu : (HMENU)nControlId, g_hInstance, pvParam)))

  0008b	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00092	74 0b		 je	 SHORT $L50097
  00094	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0009a	89 45 bc	 mov	 DWORD PTR -68+[ebp], eax
  0009d	eb 06		 jmp	 SHORT $L50098
$L50097:
  0009f	8b 4d 2c	 mov	 ecx, DWORD PTR _nControlId$[ebp]
  000a2	89 4d bc	 mov	 DWORD PTR -68+[ebp], ecx
$L50098:
  000a5	8b 55 30	 mov	 edx, DWORD PTR _pvParam$[ebp]
  000a8	52		 push	 edx
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hInstance
  000ae	50		 push	 eax
  000af	8b 4d bc	 mov	 ecx, DWORD PTR -68+[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 08	 mov	 edx, DWORD PTR _pParent$[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z ; CWindow::GetHWND
  000bc	50		 push	 eax
  000bd	8b 45 28	 mov	 eax, DWORD PTR _nHeight$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d 24	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  000c4	51		 push	 ecx
  000c5	8b 55 20	 mov	 edx, DWORD PTR _y$[ebp]
  000c8	52		 push	 edx
  000c9	8b 45 1c	 mov	 eax, DWORD PTR _x$[ebp]
  000cc	50		 push	 eax
  000cd	8b 4d 18	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  000d0	51		 push	 ecx
  000d1	8b 55 10	 mov	 edx, DWORD PTR _pszWindowName$[ebp]
  000d4	52		 push	 edx
  000d5	8b 45 0c	 mov	 eax, DWORD PTR _pszClassName$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 14	 mov	 ecx, DWORD PTR _dwExStyle$[ebp]
  000dc	51		 push	 ecx
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  000e3	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  000e6	89 42 18	 mov	 DWORD PTR [edx+24], eax
  000e9	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000f0	75 04		 jne	 SHORT $L49684

; 197  :     {
; 198  :         return FALSE;

  000f2	33 c0		 xor	 eax, eax
  000f4	eb 24		 jmp	 SHORT $L49676
$L49684:

; 199  :     }
; 200  : 
; 201  :     if(m_pParent)

  000f6	8b 4d c0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  000fd	74 16		 je	 SHORT $L49685

; 202  :     {
; 203  :         InsertTailList(&m_pParent->m_lstChildren, &m_leChildren);

  000ff	8b 55 c0	 mov	 edx, DWORD PTR _this$[ebp]
  00102	83 c2 28	 add	 edx, 40			; 00000028H
  00105	52		 push	 edx
  00106	8b 45 c0	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0010c	83 c1 10	 add	 ecx, 16			; 00000010H
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailList
$L49685:

; 204  :     }
; 205  : 
; 206  :     return TRUE;

  00115	b8 01 00 00 00	 mov	 eax, 1
$L49676:

; 207  : }

  0011a	5f		 pop	 edi
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 2c 00	 ret	 44			; 0000002cH
?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z ENDP		; CWindow::Create
_TEXT	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
CONST	SEGMENT
??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z
_TEXT	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailList, COMDAT

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 117  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	6a 75		 push	 117			; 00000075H
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000a	6a 00		 push	 0
  0000c	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 118  :     AssertValidEntryList(Entry, ASSERT_NOT_IN_LIST);

  00015	6a 76		 push	 118			; 00000076H
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001c	6a 02		 push	 2
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 119  : 
; 120  :     Entry->Flink = ListHead;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 121  :     Entry->Blink = ListHead->Blink;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 122  :     
; 123  :     Entry->Blink->Flink = Entry;

  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00044	89 02		 mov	 DWORD PTR [edx], eax

; 124  :     Entry->Flink->Blink = Entry;

  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 125  : 
; 126  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00051	6a 7e		 push	 126			; 0000007eH
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00058	6a 01		 push	 1
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 127  : }    

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?InsertTailList@@YGXPAU_LIST_ENTRY@@0@Z ENDP		; InsertTailList
_TEXT	ENDS
PUBLIC	??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@	; `string'
PUBLIC	??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@	; `string'
PUBLIC	??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT
??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry pointe'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT
??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ DB 'List entry conta'
	DB	'ins NULL pointer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT
??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ DB 'List entry part'
	DB	'ially points to itself', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT
??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in list'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT
??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L47475

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@ ; `string'
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L47477
$L47475:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L47479
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L47478
$L47479:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ ; `string'
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L47481
$L47478:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L47483
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L47482
$L47483:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L47485
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L47484
$L47485:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ ; `string'
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L47484:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L47487
$L47482:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L47488

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000a1	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a3	75 17		 jne	 SHORT $L47489

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@ ; `string'
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L47489:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L47491
$L47488:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L47492

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  000ca	3b 02		 cmp	 eax, DWORD PTR [edx]
  000cc	74 17		 je	 SHORT $L47493

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@ ; `string'
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L47493:
$L47492:
$L47491:
$L47487:
$L47481:
$L47477:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z
_TEXT	SEGMENT
_pWindow$ = 8
?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z PROC NEAR	; CWindow::GetHWND, COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 236  :     return pWindow ? pWindow->m_hWnd : NULL;

  00004	83 7d 08 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00008	74 0b		 je	 SHORT $L50108
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  0000d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00010	89 4d fc	 mov	 DWORD PTR -4+[ebp], ecx
  00013	eb 07		 jmp	 SHORT $L50109
$L50108:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR -4+[ebp], 0
$L50109:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR -4+[ebp]

; 237  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z ENDP		; CWindow::GetHWND
_TEXT	ENDS
EXTRN	__imp__TranslateAcceleratorA@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.cpp
;	COMDAT ?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
_TEXT	SEGMENT
_pMsg$ = 8
_this$ = -16
_fDispatched$ = -8
_pleEntry$ = -12
_pChild$ = -4
?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z PROC NEAR	; CWindow::DispatchMessageA, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 234  :     BOOL                    fDispatched = FALSE;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fDispatched$[ebp], 0

; 235  :     PLIST_ENTRY             pleEntry;
; 236  :     CWindow *               pChild;
; 237  : 
; 238  :     //
; 239  :     // See if any of our children can do anything with this message.  If they
; 240  :     // cant, we don't have anything special to do.
; 241  :     //
; 242  : 
; 243  :     for(pleEntry = m_lstChildren.Flink; pleEntry != &m_lstChildren; pleEntry = pleEntry->Flink)

  00010	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00016	89 4d f4	 mov	 DWORD PTR _pleEntry$[ebp], ecx
  00019	eb 08		 jmp	 SHORT $L49693
$L49694:
  0001b	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
$L49693:
  00023	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 10	 add	 ecx, 16			; 00000010H
  00029	39 4d f4	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  0002c	74 25		 je	 SHORT $L49695

; 244  :     {
; 245  :         pChild = CONTAINING_RECORD(pleEntry, CWindow, m_leChildren);

  0002e	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00031	83 ea 28	 sub	 edx, 40			; 00000028H
  00034	89 55 fc	 mov	 DWORD PTR _pChild$[ebp], edx

; 246  : 
; 247  :         if(fDispatched = pChild->DispatchMessage(pMsg))

  00037	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _pChild$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _pChild$[ebp]
  00043	ff 52 5c	 call	 DWORD PTR [edx+92]
  00046	89 45 f8	 mov	 DWORD PTR _fDispatched$[ebp], eax
  00049	83 7d f8 00	 cmp	 DWORD PTR _fDispatched$[ebp], 0
  0004d	74 02		 je	 SHORT $L49700

; 248  :         {
; 249  :             break;

  0004f	eb 02		 jmp	 SHORT $L49695
$L49700:

; 250  :         }
; 251  :     }

  00051	eb c8		 jmp	 SHORT $L49694
$L49695:

; 252  : 
; 253  :     if(!fDispatched && m_hAccel)

  00053	83 7d f8 00	 cmp	 DWORD PTR _fDispatched$[ebp], 0
  00057	75 24		 jne	 SHORT $L49701
  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00060	74 1b		 je	 SHORT $L49701

; 254  :     {
; 255  :         fDispatched = TranslateAccelerator(m_hWnd, m_hAccel, pMsg);

  00062	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00069	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0006c	50		 push	 eax
  0006d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00073	52		 push	 edx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateAcceleratorA@12
  0007a	89 45 f8	 mov	 DWORD PTR _fDispatched$[ebp], eax
$L49701:

; 256  :     }
; 257  : 
; 258  :     return fDispatched;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _fDispatched$[ebp]

; 259  : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z ENDP	; CWindow::DispatchMessageA
_TEXT	ENDS
PUBLIC	?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z	; CWindow::GetWindowContext
PUBLIC	?OnInitialCreate@CWindow@@KGPAV1@PAUHWND__@@PAJ@Z ; CWindow::OnInitialCreate
; Function compile flags: /Odt
;	COMDAT ?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_lResult$ = -8
_pWindow$ = -4
?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z PROC NEAR	; CWindow::WindowProc, COMDAT

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 292  :     LRESULT                 lResult     = 0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _lResult$[ebp], 0

; 293  :     CWindow *               pWindow;
; 294  : 
; 295  :     //
; 296  :     // Get the "this" pointer from the window object
; 297  :     // 
; 298  :     // We're special-casing WM_CREATE because it actually contains the window
; 299  :     // handle we use to add ourselves to the global window list.
; 300  :     //
; 301  :     
; 302  :     if(WM_CREATE == uMsg)

  0000d	83 7d 0c 01	 cmp	 DWORD PTR _uMsg$[ebp], 1
  00011	75 12		 jne	 SHORT $L49710

; 303  :     {
; 304  :         pWindow = OnInitialCreate(hWnd, &lParam);

  00013	8d 45 14	 lea	 eax, DWORD PTR _lParam$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ?OnInitialCreate@CWindow@@KGPAV1@PAUHWND__@@PAJ@Z ; CWindow::OnInitialCreate
  00020	89 45 fc	 mov	 DWORD PTR _pWindow$[ebp], eax

; 305  :     }
; 306  :     else

  00023	eb 0c		 jmp	 SHORT $L49711
$L49710:

; 307  :     {
; 308  :         pWindow = GetWindowContext(hWnd);

  00025	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z ; CWindow::GetWindowContext
  0002e	89 45 fc	 mov	 DWORD PTR _pWindow$[ebp], eax
$L49711:

; 309  :     }
; 310  : 
; 311  :     if(!pWindow)

  00031	83 7d fc 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00035	75 18		 jne	 SHORT $L49712

; 312  :     {
; 313  :         return ::DefWindowProc(hWnd, uMsg, wParam, lParam);

  00037	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00042	52		 push	 edx
  00043	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00046	50		 push	 eax
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  0004d	eb 63		 jmp	 SHORT $L49707
$L49712:

; 314  :     }
; 315  : 
; 316  :     //
; 317  :     // Hand off to the message dispatcher
; 318  :     //
; 319  : 
; 320  :     if(!pWindow->HandleMessage(uMsg, wParam, lParam, &lResult))

  0004f	8d 4d f8	 lea	 ecx, DWORD PTR _lResult$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00056	52		 push	 edx
  00057	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _uMsg$[ebp]
  0005e	51		 push	 ecx
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _pWindow$[ebp]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _pWindow$[ebp]
  00067	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]
  0006d	85 c0		 test	 eax, eax
  0006f	75 21		 jne	 SHORT $L49713

; 321  :     {
; 322  :         lResult = pWindow->DefWindowProc(hWnd, uMsg, wParam, lParam);

  00071	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  00078	52		 push	 edx
  00079	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 fc	 mov	 edx, DWORD PTR _pWindow$[ebp]
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _pWindow$[ebp]
  00089	ff 90 98 00 00
	00		 call	 DWORD PTR [eax+152]
  0008f	89 45 f8	 mov	 DWORD PTR _lResult$[ebp], eax
$L49713:

; 323  :     }
; 324  : 
; 325  :     //
; 326  :     // Special-case WM_DESTROY to delete the window object
; 327  :     //
; 328  : 
; 329  :     if(WM_DESTROY == uMsg)

  00092	83 7d 0c 02	 cmp	 DWORD PTR _uMsg$[ebp], 2
  00096	75 17		 jne	 SHORT $L49714

; 330  :     {
; 331  :         pWindow->Destroy();

  00098	8b 4d fc	 mov	 ecx, DWORD PTR _pWindow$[ebp]
  0009b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _pWindow$[ebp]
  000a0	ff 52 10	 call	 DWORD PTR [edx+16]

; 332  :         pWindow->Release();

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _pWindow$[ebp]
  000a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _pWindow$[ebp]
  000ab	52		 push	 edx
  000ac	ff 51 08	 call	 DWORD PTR [ecx+8]
$L49714:

; 333  :     }
; 334  : 
; 335  :     return lResult;

  000af	8b 45 f8	 mov	 eax, DWORD PTR _lResult$[ebp]
$L49707:

; 336  : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 10 00	 ret	 16			; 00000010H
?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z ENDP		; CWindow::WindowProc
_TEXT	ENDS
PUBLIC	?SetWindowContext@CWindow@@KGXPAUHWND__@@PAV1@@Z ; CWindow::SetWindowContext
PUBLIC	??_C@_04CONG@hWnd?$AA@				; `string'
PUBLIC	??_C@_07MMMB@pWindow?$AA@			; `string'
EXTRN	__imp__SetWindowLongA@12:NEAR
;	COMDAT ??_C@_04CONG@hWnd?$AA@
CONST	SEGMENT
??_C@_04CONG@hWnd?$AA@ DB 'hWnd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMMB@pWindow?$AA@
CONST	SEGMENT
??_C@_07MMMB@pWindow?$AA@ DB 'pWindow', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetWindowContext@CWindow@@KGXPAUHWND__@@PAV1@@Z
_TEXT	SEGMENT
_hWnd$ = 8
_pWindow$ = 12
?SetWindowContext@CWindow@@KGXPAUHWND__@@PAV1@@Z PROC NEAR ; CWindow::SetWindowContext, COMDAT

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 365  :     ASSERT(hWnd);

  00003	68 6d 01 00 00	 push	 365			; 0000016dH
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04CONG@hWnd?$AA@ ; `string'
  00012	33 c0		 xor	 eax, eax
  00014	83 7d 08 00	 cmp	 DWORD PTR _hWnd$[ebp], 0
  00018	0f 94 c0	 sete	 al
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 366  :     ASSERT(pWindow);

  00024	68 6e 01 00 00	 push	 366			; 0000016eH
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07MMMB@pWindow?$AA@ ; `string'
  00033	33 c9		 xor	 ecx, ecx
  00035	83 7d 0c 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00039	0f 94 c1	 sete	 cl
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 367  : 
; 368  : #ifdef WNDWRAP_USE_SET_WINDOW_LONG
; 369  : 
; 370  :     SetWindowLong(hWnd, GWL_USERDATA, (LONG)pWindow);

  00045	8b 55 0c	 mov	 edx, DWORD PTR _pWindow$[ebp]
  00048	52		 push	 edx
  00049	6a eb		 push	 -21			; ffffffebH
  0004b	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0004e	50		 push	 eax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 371  : 
; 372  : #else // WNDWRAP_USE_SET_WINDOW_LONG
; 373  : 
; 374  :     InsertTailList(&m_lstWindows, &pWindow->m_leWindows);
; 375  : 
; 376  : #endif // WNDWRAP_USE_SET_WINDOW_LONG
; 377  : 
; 378  : }

  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?SetWindowContext@CWindow@@KGXPAUHWND__@@PAV1@@Z ENDP	; CWindow::SetWindowContext
_TEXT	ENDS
PUBLIC	?FreeWindowContext@CWindow@@IAEXXZ		; CWindow::FreeWindowContext
; Function compile flags: /Odt
;	COMDAT ?FreeWindowContext@CWindow@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4
?FreeWindowContext@CWindow@@IAEXXZ PROC NEAR		; CWindow::FreeWindowContext, COMDAT
; _this$ = ecx

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 405  : 
; 406  : #ifdef WNDWRAP_USE_SET_WINDOW_LONG
; 407  : 
; 408  :     SetWindowLong(m_hWnd, GWL_USERDATA, 0);

  00007	6a 00		 push	 0
  00009	6a eb		 push	 -21			; ffffffebH
  0000b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00011	51		 push	 ecx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 409  : 
; 410  : #else // WNDWRAP_USE_SET_WINDOW_LONG
; 411  : 
; 412  :     RemoveEntryList(&m_leWindows);
; 413  : 
; 414  : #endif // WNDWRAP_USE_SET_WINDOW_LONG
; 415  : 
; 416  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?FreeWindowContext@CWindow@@IAEXXZ ENDP			; CWindow::FreeWindowContext
_TEXT	ENDS
PUBLIC	??_C@_0CN@KBDH@m_dwValidSignature?5?$DN?$DN?5pWindow?9?$DOm@ ; `string'
EXTRN	__imp__GetWindowLongA@8:NEAR
;	COMDAT ??_C@_0CN@KBDH@m_dwValidSignature?5?$DN?$DN?5pWindow?9?$DOm@
CONST	SEGMENT
??_C@_0CN@KBDH@m_dwValidSignature?5?$DN?$DN?5pWindow?9?$DOm@ DB 'm_dwVali'
	DB	'dSignature == pWindow->m_dwSignature', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8
_pWindow$ = -8
?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z PROC NEAR ; CWindow::GetWindowContext, COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 443  :     CWindow *               pWindow;
; 444  :     PLIST_ENTRY             pleEntry;
; 445  : 
; 446  : #ifdef WNDWRAP_USE_SET_WINDOW_LONG
; 447  : 
; 448  :     pWindow = (CWindow *)GetWindowLong(hWnd, GWL_USERDATA);

  00006	6a eb		 push	 -21			; ffffffebH
  00008	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00012	89 45 f8	 mov	 DWORD PTR _pWindow$[ebp], eax

; 449  : 
; 450  : #else //  WNDWRAP_USE_SET_WINDOW_LONG
; 451  : 
; 452  :     pleEntry = m_lstWindows.Flink;
; 453  :     pWindow = NULL;
; 454  :     
; 455  :     while(pleEntry != &m_lstWindows)
; 456  :     {
; 457  :         pWindow = CONTAINING_RECORD(pleEntry, CWindow, m_leWindows);
; 458  : 
; 459  :         if(pWindow->m_hWnd)
; 460  :         {
; 461  :             if(hWnd == pWindow->m_hWnd)
; 462  :             {
; 463  :                 break;
; 464  :             }
; 465  :         }
; 466  : 
; 467  :         pleEntry = pleEntry->Flink;
; 468  :         pWindow = NULL;
; 469  :     }
; 470  : 
; 471  : #endif //  WNDWRAP_USE_SET_WINDOW_LONG
; 472  : 
; 473  :     if(pWindow)

  00015	83 7d f8 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00019	74 27		 je	 SHORT $L49732

; 474  :     {
; 475  :         ASSERT(m_dwValidSignature == pWindow->m_dwSignature);

  0001b	68 db 01 00 00	 push	 475			; 000001dbH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@KBDH@m_dwValidSignature?5?$DN?$DN?5pWindow?9?$DOm@ ; `string'
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _pWindow$[ebp]
  0002d	33 d2		 xor	 edx, edx
  0002f	81 79 04 77 6e
	64 20		 cmp	 DWORD PTR [ecx+4], 543452791 ; 20646e77H
  00036	0f 95 c2	 setne	 dl
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
$L49732:

; 476  :     }
; 477  : 
; 478  :     return pWindow;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _pWindow$[ebp]

; 479  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z ENDP	; CWindow::GetWindowContext
_TEXT	ENDS
PUBLIC	??_C@_07OBKI@plParam?$AA@			; `string'
PUBLIC	??_C@_07GECF@pCreate?$AA@			; `string'
PUBLIC	??_C@_0L@EGFH@pMdiCreate?$AA@			; `string'
PUBLIC	??_C@_04JNGL@pCtx?$AA@				; `string'
PUBLIC	??_C@_0CI@IPFA@m_dwValidSignature?5?$DN?$DN?5pCtx?9?$DOdwSi@ ; `string'
PUBLIC	??_C@_0BB@JEII@?$CBpWindow?9?$DOm_hWnd?$AA@	; `string'
;	COMDAT ??_C@_07OBKI@plParam?$AA@
CONST	SEGMENT
??_C@_07OBKI@plParam?$AA@ DB 'plParam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GECF@pCreate?$AA@
CONST	SEGMENT
??_C@_07GECF@pCreate?$AA@ DB 'pCreate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EGFH@pMdiCreate?$AA@
CONST	SEGMENT
??_C@_0L@EGFH@pMdiCreate?$AA@ DB 'pMdiCreate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JNGL@pCtx?$AA@
CONST	SEGMENT
??_C@_04JNGL@pCtx?$AA@ DB 'pCtx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IPFA@m_dwValidSignature?5?$DN?$DN?5pCtx?9?$DOdwSi@
CONST	SEGMENT
??_C@_0CI@IPFA@m_dwValidSignature?5?$DN?$DN?5pCtx?9?$DOdwSi@ DB 'm_dwVali'
	DB	'dSignature == pCtx->dwSignature', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JEII@?$CBpWindow?9?$DOm_hWnd?$AA@
CONST	SEGMENT
??_C@_0BB@JEII@?$CBpWindow?9?$DOm_hWnd?$AA@ DB '!pWindow->m_hWnd', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?OnInitialCreate@CWindow@@KGPAV1@PAUHWND__@@PAJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_plParam$ = 12
_pWindow$ = -16
_lResult$ = -24
_pCreate$ = -4
_pMdiCreate$ = -12
_pCtx$ = -8
?OnInitialCreate@CWindow@@KGPAV1@PAUHWND__@@PAJ@Z PROC NEAR ; CWindow::OnInitialCreate, COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 508  :     CWindow *               pWindow     = NULL;

  00006	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pWindow$[ebp], 0

; 509  :     LRESULT                 lResult     = 0;

  0000d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _lResult$[ebp], 0

; 510  :     LPCREATESTRUCT          pCreate;
; 511  :     LPMDICREATESTRUCT       pMdiCreate;
; 512  :     LPCWINDOWCREATECTX      pCtx;
; 513  :     BOOL                    fHandled;
; 514  : 
; 515  :     ASSERT(hWnd);

  00014	68 03 02 00 00	 push	 515			; 00000203H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04CONG@hWnd?$AA@ ; `string'
  00023	33 c0		 xor	 eax, eax
  00025	83 7d 08 00	 cmp	 DWORD PTR _hWnd$[ebp], 0
  00029	0f 94 c0	 sete	 al
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 516  :     ASSERT(plParam);

  00035	68 04 02 00 00	 push	 516			; 00000204H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OBKI@plParam?$AA@ ; `string'
  00044	33 c9		 xor	 ecx, ecx
  00046	83 7d 0c 00	 cmp	 DWORD PTR _plParam$[ebp], 0
  0004a	0f 94 c1	 sete	 cl
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00053	83 c4 10	 add	 esp, 16			; 00000010H

; 517  : 
; 518  :     //
; 519  :     // Get the CWindow object from the message parameters
; 520  :     //
; 521  : 
; 522  :     pCreate = (LPCREATESTRUCT)*plParam;

  00056	8b 55 0c	 mov	 edx, DWORD PTR _plParam$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	89 45 fc	 mov	 DWORD PTR _pCreate$[ebp], eax

; 523  :     ASSERT(pCreate);

  0005e	68 0b 02 00 00	 push	 523			; 0000020bH
  00063	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00068	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07GECF@pCreate?$AA@ ; `string'
  0006d	33 c9		 xor	 ecx, ecx
  0006f	83 7d fc 00	 cmp	 DWORD PTR _pCreate$[ebp], 0
  00073	0f 94 c1	 sete	 cl
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007c	83 c4 10	 add	 esp, 16			; 00000010H

; 524  : 
; 525  :     if(pCreate->dwExStyle & WS_EX_MDICHILD)

  0007f	8b 55 fc	 mov	 edx, DWORD PTR _pCreate$[ebp]
  00082	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00085	83 e0 40	 and	 eax, 64			; 00000040H
  00088	85 c0		 test	 eax, eax
  0008a	74 55		 je	 SHORT $L49747

; 526  :     {
; 527  :         pMdiCreate = (LPMDICREATESTRUCT)pCreate->lpCreateParams;

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _pCreate$[ebp]
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	89 55 f4	 mov	 DWORD PTR _pMdiCreate$[ebp], edx

; 528  :         ASSERT(pMdiCreate);

  00094	68 10 02 00 00	 push	 528			; 00000210H
  00099	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0009e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@EGFH@pMdiCreate?$AA@ ; `string'
  000a3	33 c0		 xor	 eax, eax
  000a5	83 7d f4 00	 cmp	 DWORD PTR _pMdiCreate$[ebp], 0
  000a9	0f 94 c0	 sete	 al
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b2	83 c4 10	 add	 esp, 16			; 00000010H

; 529  : 
; 530  :         pCtx = (LPCWINDOWCREATECTX)pMdiCreate->lParam;

  000b5	8b 4d f4	 mov	 ecx, DWORD PTR _pMdiCreate$[ebp]
  000b8	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000bb	89 55 f8	 mov	 DWORD PTR _pCtx$[ebp], edx

; 531  :         ASSERT(pCtx);

  000be	68 13 02 00 00	 push	 531			; 00000213H
  000c3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNGL@pCtx?$AA@ ; `string'
  000cd	33 c0		 xor	 eax, eax
  000cf	83 7d f8 00	 cmp	 DWORD PTR _pCtx$[ebp], 0
  000d3	0f 94 c0	 sete	 al
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000dc	83 c4 10	 add	 esp, 16			; 00000010H

; 532  :     }
; 533  :     else

  000df	eb 29		 jmp	 SHORT $L49752
$L49747:

; 534  :     {
; 535  :         pCtx = (LPCWINDOWCREATECTX)pCreate->lpCreateParams;

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _pCreate$[ebp]
  000e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e6	89 55 f8	 mov	 DWORD PTR _pCtx$[ebp], edx

; 536  :         ASSERT(pCtx);

  000e9	68 18 02 00 00	 push	 536			; 00000218H
  000ee	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JNGL@pCtx?$AA@ ; `string'
  000f8	33 c0		 xor	 eax, eax
  000fa	83 7d f8 00	 cmp	 DWORD PTR _pCtx$[ebp], 0
  000fe	0f 94 c0	 sete	 al
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00107	83 c4 10	 add	 esp, 16			; 00000010H
$L49752:

; 537  :     }
; 538  : 
; 539  :     ASSERT(m_dwValidSignature == pCtx->dwSignature);

  0010a	68 1b 02 00 00	 push	 539			; 0000021bH
  0010f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00114	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@IPFA@m_dwValidSignature?5?$DN?$DN?5pCtx?9?$DOdwSi@ ; `string'
  00119	8b 4d f8	 mov	 ecx, DWORD PTR _pCtx$[ebp]
  0011c	33 d2		 xor	 edx, edx
  0011e	81 39 77 6e 64
	20		 cmp	 DWORD PTR [ecx], 543452791 ; 20646e77H
  00124	0f 95 c2	 setne	 dl
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0012d	83 c4 10	 add	 esp, 16			; 00000010H

; 540  : 
; 541  :     pWindow = pCtx->pWindow;

  00130	8b 45 f8	 mov	 eax, DWORD PTR _pCtx$[ebp]
  00133	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00136	89 4d f0	 mov	 DWORD PTR _pWindow$[ebp], ecx

; 542  :     ASSERT(pWindow);

  00139	68 1e 02 00 00	 push	 542			; 0000021eH
  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07MMMB@pWindow?$AA@ ; `string'
  00148	33 d2		 xor	 edx, edx
  0014a	83 7d f0 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  0014e	0f 94 c2	 sete	 dl
  00151	52		 push	 edx
  00152	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00157	83 c4 10	 add	 esp, 16			; 00000010H

; 543  : 
; 544  :     *plParam = (LPARAM)pCtx->pvContext;

  0015a	8b 45 0c	 mov	 eax, DWORD PTR _plParam$[ebp]
  0015d	8b 4d f8	 mov	 ecx, DWORD PTR _pCtx$[ebp]
  00160	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00163	89 10		 mov	 DWORD PTR [eax], edx

; 545  : 
; 546  :     ASSERT(!pWindow->m_hWnd);

  00165	68 22 02 00 00	 push	 546			; 00000222H
  0016a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@CEEB@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0016f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BB@JEII@?$CBpWindow?9?$DOm_hWnd?$AA@ ; `string'
  00174	8b 45 f0	 mov	 eax, DWORD PTR _pWindow$[ebp]
  00177	33 c9		 xor	 ecx, ecx
  00179	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0017d	0f 95 c1	 setne	 cl
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00186	83 c4 10	 add	 esp, 16			; 00000010H

; 547  :     pWindow->m_hWnd = hWnd;

  00189	8b 55 f0	 mov	 edx, DWORD PTR _pWindow$[ebp]
  0018c	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0018f	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 548  : 
; 549  :     //
; 550  :     // Store the HWND => CWindow lookup data
; 551  :     //
; 552  : 
; 553  :     SetWindowContext(hWnd, pWindow);

  00192	8b 4d f0	 mov	 ecx, DWORD PTR _pWindow$[ebp]
  00195	51		 push	 ecx
  00196	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  00199	52		 push	 edx
  0019a	e8 00 00 00 00	 call	 ?SetWindowContext@CWindow@@KGXPAUHWND__@@PAV1@@Z ; CWindow::SetWindowContext

; 554  : 
; 555  :     //
; 556  :     // Increment the window object's reference count
; 557  :     //
; 558  : 
; 559  :     pWindow->AddRef();

  0019f	8b 45 f0	 mov	 eax, DWORD PTR _pWindow$[ebp]
  001a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a4	8b 55 f0	 mov	 edx, DWORD PTR _pWindow$[ebp]
  001a7	52		 push	 edx
  001a8	ff 51 04	 call	 DWORD PTR [ecx+4]

; 560  : 
; 561  :     return pWindow;

  001ab	8b 45 f0	 mov	 eax, DWORD PTR _pWindow$[ebp]

; 562  : }

  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 08 00	 ret	 8
?OnInitialCreate@CWindow@@KGPAV1@PAUHWND__@@PAJ@Z ENDP	; CWindow::OnInitialCreate
_TEXT	ENDS
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
EXTRN	__imp__DestroyWindow@4:NEAR
EXTRN	__imp__DestroyAcceleratorTable@4:NEAR
EXTRN	__imp__DestroyMenu@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?Destroy@CWindow@@UAEXXZ
_TEXT	SEGMENT
_this$ = -16
_lResult$ = -12
_pleEntry$ = -8
_pChild$ = -4
?Destroy@CWindow@@UAEXXZ PROC NEAR			; CWindow::Destroy, COMDAT
; _this$ = ecx

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 589  :     LRESULT                 lResult     = 0;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lResult$[ebp], 0

; 590  :     PLIST_ENTRY             pleEntry;
; 591  :     CWindow *               pChild;
; 592  : 
; 593  :     //
; 594  :     // Call the OnDestroy handler
; 595  :     //
; 596  : 
; 597  :     if(m_hWnd)

  00010	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00017	74 0f		 je	 SHORT $L49764

; 598  :     {
; 599  :         OnDestroy(&lResult);

  00019	8d 4d f4	 lea	 ecx, DWORD PTR _lResult$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	ff 50 68	 call	 DWORD PTR [eax+104]
$L49764:

; 600  :     }
; 601  : 
; 602  :     //
; 603  :     // Free the HWND => CWindow lookup data so we don't get any more messages
; 604  :     //
; 605  : 
; 606  :     if(m_hWnd)

  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0002f	74 08		 je	 SHORT $L49765

; 607  :     {
; 608  :         FreeWindowContext();

  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?FreeWindowContext@CWindow@@IAEXXZ ; CWindow::FreeWindowContext
$L49765:
$L49767:

; 609  :     }
; 610  : 
; 611  :     //
; 612  :     // Detach all child windows
; 613  :     //
; 614  : 
; 615  :     while((pleEntry = RemoveEntryList(m_lstChildren.Flink)) != &m_lstChildren)

  00039	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList
  00045	89 45 f8	 mov	 DWORD PTR _pleEntry$[ebp], eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 10	 add	 ecx, 16			; 00000010H
  0004e	39 4d f8	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  00051	74 16		 je	 SHORT $L49768

; 616  :     {
; 617  :         pChild = CONTAINING_RECORD(pleEntry, CWindow, m_leChildren);

  00053	8b 55 f8	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00056	83 ea 28	 sub	 edx, 40			; 00000028H
  00059	89 55 fc	 mov	 DWORD PTR _pChild$[ebp], edx

; 618  : 
; 619  :         pChild->Destroy();

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _pChild$[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _pChild$[ebp]
  00064	ff 52 10	 call	 DWORD PTR [edx+16]

; 620  :     }

  00067	eb d0		 jmp	 SHORT $L49767
$L49768:

; 621  : 
; 622  :     //
; 623  :     // Destroy the window
; 624  :     //
; 625  : 
; 626  :     if(m_hWnd)

  00069	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00070	74 4a		 je	 SHORT $L49773

; 627  :     {
; 628  :         if((WNDTYPE_MDICHILD == m_nWindowType) && m_pParent)

  00072	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	83 79 08 03	 cmp	 DWORD PTR [ecx+8], 3
  00079	75 2a		 jne	 SHORT $L49774
  0007b	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00082	74 21		 je	 SHORT $L49774

; 629  :         {
; 630  :             m_pParent->SendMessage(WM_MDIDESTROY, (WPARAM)m_hWnd);

  00084	6a 00		 push	 0
  00086	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0008c	51		 push	 ecx
  0008d	68 21 02 00 00	 push	 545			; 00000221H
  00092	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00095	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00098	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0009e	8b 10		 mov	 edx, DWORD PTR [eax]
  000a0	ff 52 18	 call	 DWORD PTR [edx+24]

; 631  :         }
; 632  :         else

  000a3	eb 0d		 jmp	 SHORT $L49776
$L49774:

; 633  :         {
; 634  :             DestroyWindow(m_hWnd);

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000ab	51		 push	 ecx
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyWindow@4
$L49776:

; 635  :         }
; 636  : 
; 637  :         m_hWnd = NULL;

  000b2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
$L49773:

; 638  :     }
; 639  : 
; 640  :     //
; 641  :     // Detach from the parent
; 642  :     //
; 643  : 
; 644  :     RemoveEntryList(&m_leChildren);

  000bc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	83 c0 28	 add	 eax, 40			; 00000028H
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 645  :     m_pParent = NULL;

  000c8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 646  : 
; 647  :     //
; 648  :     // Free resources
; 649  :     //
; 650  : 
; 651  :     DestroyMenu(m_hMenu);

  000d2	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000d8	50		 push	 eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyMenu@4

; 652  :     m_hMenu = NULL;

  000df	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 653  : 
; 654  :     DestroyAcceleratorTable(m_hAccel);

  000e9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DestroyAcceleratorTable@4

; 655  :     m_hMenu = NULL;

  000f6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 656  : }

  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
?Destroy@CWindow@@UAEXXZ ENDP				; CWindow::Destroy
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
_TEXT	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
_TEXT	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0001e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00020	74 2c		 je	 SHORT $L47515

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L47515:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.cpp
_TEXT	ENDS
;	COMDAT ?HandleMessage@CWindow@@UAEHIIJPAJ@Z
_TEXT	SEGMENT
_fHandled$ = -4
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_plResult$ = 20
_this$ = -8
?HandleMessage@CWindow@@UAEHIIJPAJ@Z PROC NEAR		; CWindow::HandleMessage, COMDAT
; _this$ = ecx

; 688  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 689  :     BOOL                    fHandled;
; 690  :     
; 691  :     // DPF_ABSOLUTE("%x %x %x %x", m_hWnd, uMsg, wParam, lParam);
; 692  :     
; 693  :     switch(uMsg)
; 694  :     {

  00009	8b 45 08	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  0000f	83 7d f4 7b	 cmp	 DWORD PTR -12+[ebp], 123 ; 0000007bH
  00013	77 2f		 ja	 SHORT $L50137
  00015	83 7d f4 7b	 cmp	 DWORD PTR -12+[ebp], 123 ; 0000007bH
  00019	0f 84 7e 01 00
	00		 je	 $L49811
  0001f	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  00022	83 e9 01	 sub	 ecx, 1
  00025	89 4d f4	 mov	 DWORD PTR -12+[ebp], ecx
  00028	83 7d f4 4d	 cmp	 DWORD PTR -12+[ebp], 77	; 0000004dH
  0002c	0f 87 10 02 00
	00		 ja	 $L49829
  00032	8b 55 f4	 mov	 edx, DWORD PTR -12+[ebp]
  00035	33 c0		 xor	 eax, eax
  00037	8a 82 00 00 00
	00		 mov	 al, BYTE PTR $L50139[edx]
  0003d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L50140[eax*4]
$L50137:
  00044	81 7d f4 14 01
	00 00		 cmp	 DWORD PTR -12+[ebp], 276 ; 00000114H
  0004b	77 2c		 ja	 SHORT $L50138
  0004d	81 7d f4 14 01
	00 00		 cmp	 DWORD PTR -12+[ebp], 276 ; 00000114H
  00054	0f 84 90 01 00
	00		 je	 $L49821
  0005a	81 7d f4 11 01
	00 00		 cmp	 DWORD PTR -12+[ebp], 273 ; 00000111H
  00061	0f 84 94 00 00
	00		 je	 $L49799
  00067	81 7d f4 12 01
	00 00		 cmp	 DWORD PTR -12+[ebp], 274 ; 00000112H
  0006e	0f 84 be 00 00
	00		 je	 $L49805
  00074	e9 c9 01 00 00	 jmp	 $L49829
$L50138:
  00079	81 7d f4 15 01
	00 00		 cmp	 DWORD PTR -12+[ebp], 277 ; 00000115H
  00080	0f 84 8f 01 00
	00		 je	 $L49825
  00086	81 7d f4 33 02
	00 00		 cmp	 DWORD PTR -12+[ebp], 563 ; 00000233H
  0008d	0f 84 3c 01 00
	00		 je	 $L49819
  00093	e9 aa 01 00 00	 jmp	 $L49829
$L49789:

; 695  :         //
; 696  :         // Basic handlers
; 697  :         //
; 698  :         
; 699  :         case WM_CREATE:
; 700  :             fHandled = OnCreate((LPVOID)lParam, plResult);

  00098	8b 4d 14	 mov	 ecx, DWORD PTR _plResult$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  0009f	52		 push	 edx
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 10		 mov	 edx, DWORD PTR [eax]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	ff 52 60	 call	 DWORD PTR [edx+96]
  000ab	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 701  :             break;

  000ae	e9 96 01 00 00	 jmp	 $L49786
$L49791:

; 702  :         
; 703  :         case WM_CLOSE:
; 704  :             fHandled = OnClose(plResult);

  000b3	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  000b6	50		 push	 eax
  000b7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	ff 52 64	 call	 DWORD PTR [edx+100]
  000c2	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 705  :             break;

  000c5	e9 7f 01 00 00	 jmp	 $L49786
$L49792:

; 706  :         
; 707  :         case WM_SIZE:
; 708  :             fHandled = OnSize(wParam, (short)LOWORD(lParam), (short)HIWORD(lParam), plResult);

  000ca	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  000d1	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000d4	0f bf d1	 movsx	 edx, cx
  000d7	52		 push	 edx
  000d8	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  000db	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000e0	0f bf c8	 movsx	 ecx, ax
  000e3	51		 push	 ecx
  000e4	8b 55 0c	 mov	 edx, DWORD PTR _wParam$[ebp]
  000e7	52		 push	 edx
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 10		 mov	 edx, DWORD PTR [eax]
  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	ff 52 6c	 call	 DWORD PTR [edx+108]
  000f3	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 709  :             break;

  000f6	e9 4e 01 00 00	 jmp	 $L49786
$L49799:

; 710  : 
; 711  :         case WM_COMMAND:
; 712  :             fHandled = OnCommand(HIWORD(wParam), LOWORD(wParam), (HWND)lParam, plResult);

  000fb	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  000fe	50		 push	 eax
  000ff	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00102	51		 push	 ecx
  00103	8b 55 0c	 mov	 edx, DWORD PTR _wParam$[ebp]
  00106	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0010c	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00112	52		 push	 edx
  00113	8b 45 0c	 mov	 eax, DWORD PTR _wParam$[ebp]
  00116	c1 e8 10	 shr	 eax, 16			; 00000010H
  00119	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0011e	50		 push	 eax
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	8b 11		 mov	 edx, DWORD PTR [ecx]
  00124	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	ff 52 70	 call	 DWORD PTR [edx+112]
  0012a	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 713  :             break;

  0012d	e9 17 01 00 00	 jmp	 $L49786
$L49805:

; 714  :         
; 715  :         case WM_SYSCOMMAND:
; 716  :             fHandled = OnSysCommand(wParam, plResult);

  00132	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  00135	50		 push	 eax
  00136	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00139	51		 push	 ecx
  0013a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	8b 02		 mov	 eax, DWORD PTR [edx]
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	ff 50 74	 call	 DWORD PTR [eax+116]
  00145	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 717  :             break;

  00148	e9 fc 00 00 00	 jmp	 $L49786
$L49806:

; 718  :         
; 719  :         case WM_NOTIFY:
; 720  :             fHandled = OnNotify((LPNMHDR)lParam, plResult);

  0014d	8b 4d 14	 mov	 ecx, DWORD PTR _plResult$[ebp]
  00150	51		 push	 ecx
  00151	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  00154	52		 push	 edx
  00155	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8b 10		 mov	 edx, DWORD PTR [eax]
  0015a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	ff 52 78	 call	 DWORD PTR [edx+120]
  00160	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 721  :             break;

  00163	e9 e1 00 00 00	 jmp	 $L49786
$L49808:

; 722  : 
; 723  :         case WM_ERASEBKGND:
; 724  :             fHandled = OnEraseBackground((HDC)wParam, plResult);

  00168	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  0016b	50		 push	 eax
  0016c	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0016f	51		 push	 ecx
  00170	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00173	8b 02		 mov	 eax, DWORD PTR [edx]
  00175	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00178	ff 50 7c	 call	 DWORD PTR [eax+124]
  0017b	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 725  :             break;

  0017e	e9 c6 00 00 00	 jmp	 $L49786
$L49810:

; 726  : 
; 727  :         case WM_PAINT:
; 728  :             fHandled = OnPaint(plResult);

  00183	8b 4d 14	 mov	 ecx, DWORD PTR _plResult$[ebp]
  00186	51		 push	 ecx
  00187	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0018a	8b 02		 mov	 eax, DWORD PTR [edx]
  0018c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	ff 90 80 00 00
	00		 call	 DWORD PTR [eax+128]
  00195	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 729  :             break;

  00198	e9 ac 00 00 00	 jmp	 $L49786
$L49811:

; 730  : 
; 731  :         case WM_CONTEXTMENU:
; 732  :             fHandled = OnContextMenu((HWND)wParam, (short)LOWORD(lParam), (short)HIWORD(lParam), plResult);

  0019d	8b 4d 14	 mov	 ecx, DWORD PTR _plResult$[ebp]
  001a0	51		 push	 ecx
  001a1	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  001a4	c1 ea 10	 shr	 edx, 16			; 00000010H
  001a7	0f bf c2	 movsx	 eax, dx
  001aa	50		 push	 eax
  001ab	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  001ae	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001b4	0f bf d1	 movsx	 edx, cx
  001b7	52		 push	 edx
  001b8	8b 45 0c	 mov	 eax, DWORD PTR _wParam$[ebp]
  001bb	50		 push	 eax
  001bc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	ff 92 84 00 00
	00		 call	 DWORD PTR [edx+132]
  001ca	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 733  :             break;

  001cd	eb 7a		 jmp	 SHORT $L49786
$L49819:

; 734  : 
; 735  :         case WM_DROPFILES:
; 736  :             fHandled = OnDropFiles((HDROP)wParam, plResult);

  001cf	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  001d2	50		 push	 eax
  001d3	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  001d6	51		 push	 ecx
  001d7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001da	8b 02		 mov	 eax, DWORD PTR [edx]
  001dc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001df	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
  001e5	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 737  :             break;

  001e8	eb 5f		 jmp	 SHORT $L49786
$L49821:

; 738  :         
; 739  :         //
; 740  :         // Advanced handlers
; 741  :         //
; 742  : 
; 743  :         case WM_HSCROLL:
; 744  :             fHandled = OnScroll(SB_HORZ, LOWORD(wParam), (HWND)lParam, plResult);

  001ea	8b 4d 14	 mov	 ecx, DWORD PTR _plResult$[ebp]
  001ed	51		 push	 ecx
  001ee	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  001f1	52		 push	 edx
  001f2	8b 45 0c	 mov	 eax, DWORD PTR _wParam$[ebp]
  001f5	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001fa	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001ff	50		 push	 eax
  00200	6a 00		 push	 0
  00202	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00205	8b 11		 mov	 edx, DWORD PTR [ecx]
  00207	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0020a	ff 92 90 00 00
	00		 call	 DWORD PTR [edx+144]
  00210	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 745  :             break;

  00213	eb 34		 jmp	 SHORT $L49786
$L49825:

; 746  :         
; 747  :         case WM_VSCROLL:
; 748  :             fHandled = OnScroll(SB_VERT, LOWORD(wParam), (HWND)lParam, plResult);

  00215	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  00218	50		 push	 eax
  00219	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0021c	51		 push	 ecx
  0021d	8b 55 0c	 mov	 edx, DWORD PTR _wParam$[ebp]
  00220	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00226	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0022c	52		 push	 edx
  0022d	6a 01		 push	 1
  0022f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00232	8b 10		 mov	 edx, DWORD PTR [eax]
  00234	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00237	ff 92 90 00 00
	00		 call	 DWORD PTR [edx+144]
  0023d	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 749  :             break;

  00240	eb 07		 jmp	 SHORT $L49786
$L49829:

; 750  : 
; 751  :         //
; 752  :         // No handler
; 753  :         //
; 754  : 
; 755  :         default:
; 756  :             fHandled = FALSE;

  00242	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fHandled$[ebp], 0
$L49786:

; 757  :             break;
; 758  :     }
; 759  : 
; 760  :     return fHandled;

  00249	8b 45 fc	 mov	 eax, DWORD PTR _fHandled$[ebp]

; 761  : }

  0024c	8b e5		 mov	 esp, ebp
  0024e	5d		 pop	 ebp
  0024f	c2 10 00	 ret	 16			; 00000010H
$L50140:
  00252	00 00 00 00	 DD	 $L49789
  00256	00 00 00 00	 DD	 $L49792
  0025a	00 00 00 00	 DD	 $L49810
  0025e	00 00 00 00	 DD	 $L49791
  00262	00 00 00 00	 DD	 $L49808
  00266	00 00 00 00	 DD	 $L49806
  0026a	00 00 00 00	 DD	 $L49829
$L50139:
  0026e	00		 DB	 0
  0026f	06		 DB	 6
  00270	06		 DB	 6
  00271	06		 DB	 6
  00272	01		 DB	 1
  00273	06		 DB	 6
  00274	06		 DB	 6
  00275	06		 DB	 6
  00276	06		 DB	 6
  00277	06		 DB	 6
  00278	06		 DB	 6
  00279	06		 DB	 6
  0027a	06		 DB	 6
  0027b	06		 DB	 6
  0027c	02		 DB	 2
  0027d	03		 DB	 3
  0027e	06		 DB	 6
  0027f	06		 DB	 6
  00280	06		 DB	 6
  00281	04		 DB	 4
  00282	06		 DB	 6
  00283	06		 DB	 6
  00284	06		 DB	 6
  00285	06		 DB	 6
  00286	06		 DB	 6
  00287	06		 DB	 6
  00288	06		 DB	 6
  00289	06		 DB	 6
  0028a	06		 DB	 6
  0028b	06		 DB	 6
  0028c	06		 DB	 6
  0028d	06		 DB	 6
  0028e	06		 DB	 6
  0028f	06		 DB	 6
  00290	06		 DB	 6
  00291	06		 DB	 6
  00292	06		 DB	 6
  00293	06		 DB	 6
  00294	06		 DB	 6
  00295	06		 DB	 6
  00296	06		 DB	 6
  00297	06		 DB	 6
  00298	06		 DB	 6
  00299	06		 DB	 6
  0029a	06		 DB	 6
  0029b	06		 DB	 6
  0029c	06		 DB	 6
  0029d	06		 DB	 6
  0029e	06		 DB	 6
  0029f	06		 DB	 6
  002a0	06		 DB	 6
  002a1	06		 DB	 6
  002a2	06		 DB	 6
  002a3	06		 DB	 6
  002a4	06		 DB	 6
  002a5	06		 DB	 6
  002a6	06		 DB	 6
  002a7	06		 DB	 6
  002a8	06		 DB	 6
  002a9	06		 DB	 6
  002aa	06		 DB	 6
  002ab	06		 DB	 6
  002ac	06		 DB	 6
  002ad	06		 DB	 6
  002ae	06		 DB	 6
  002af	06		 DB	 6
  002b0	06		 DB	 6
  002b1	06		 DB	 6
  002b2	06		 DB	 6
  002b3	06		 DB	 6
  002b4	06		 DB	 6
  002b5	06		 DB	 6
  002b6	06		 DB	 6
  002b7	06		 DB	 6
  002b8	06		 DB	 6
  002b9	06		 DB	 6
  002ba	06		 DB	 6
  002bb	05		 DB	 5
?HandleMessage@CWindow@@UAEHIIJPAJ@Z ENDP		; CWindow::HandleMessage
_TEXT	ENDS
EXTRN	__imp__GetScrollInfo@12:NEAR
EXTRN	__imp__SetScrollPos@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT
_nScrollBarType$ = 8
_nRequest$ = 12
_hWndScrollBar$ = 16
_plResult$ = 20
_this$ = -32
_si$ = -28
?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z PROC NEAR	; CWindow::OnScroll, COMDAT
; _this$ = ecx

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 795  :     SCROLLINFO              si;
; 796  : 
; 797  :     if(SB_ENDSCROLL == nRequest)

  00009	83 7d 0c 08	 cmp	 DWORD PTR _nRequest$[ebp], 8
  0000d	75 07		 jne	 SHORT $L49838

; 798  :     {
; 799  :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	e9 f8 00 00 00	 jmp	 $L49836
$L49838:

; 800  :     }
; 801  : 
; 802  :     //
; 803  :     // The WM_H/VSCROLL message sucks ass.  It doesn't actually update the
; 804  :     // position or tell us anything valuable, so we have to do it manually.
; 805  :     //
; 806  : 
; 807  :     si.cbSize = sizeof(si);

  00016	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _si$[ebp], 28	; 0000001cH

; 808  :     si.fMask = SIF_ALL;

  0001d	c7 45 e8 17 00
	00 00		 mov	 DWORD PTR _si$[ebp+4], 23 ; 00000017H

; 809  : 
; 810  :     if(!GetScrollInfo(m_hWnd, nScrollBarType, &si))

  00024	8d 45 e4	 lea	 eax, DWORD PTR _si$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _nScrollBarType$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetScrollInfo@12
  00039	85 c0		 test	 eax, eax
  0003b	75 07		 jne	 SHORT $L49839

; 811  :     {
; 812  :         return FALSE;

  0003d	33 c0		 xor	 eax, eax
  0003f	e9 ca 00 00 00	 jmp	 $L49836
$L49839:

; 813  :     }
; 814  : 
; 815  :     switch(nRequest)
; 816  :     {

  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _nRequest$[ebp]
  00047	89 4d dc	 mov	 DWORD PTR -36+[ebp], ecx
  0004a	83 7d dc 07	 cmp	 DWORD PTR -36+[ebp], 7
  0004e	77 4c		 ja	 SHORT $L49841
  00050	8b 55 dc	 mov	 edx, DWORD PTR -36+[ebp]
  00053	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L50148[edx*4]
$L49844:

; 817  :         case SB_BOTTOM:
; 818  :             si.nPos = si.nMin;

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _si$[ebp+8]
  0005d	89 45 f8	 mov	 DWORD PTR _si$[ebp+20], eax

; 819  :             break;

  00060	eb 3a		 jmp	 SHORT $L49841
$L49845:

; 820  : 
; 821  :         case SB_TOP:
; 822  :             si.nPos = si.nMax;

  00062	8b 4d f0	 mov	 ecx, DWORD PTR _si$[ebp+12]
  00065	89 4d f8	 mov	 DWORD PTR _si$[ebp+20], ecx

; 823  :             break;

  00068	eb 32		 jmp	 SHORT $L49841
$L49846:

; 824  : 
; 825  :         case SB_LINEDOWN:
; 826  :             si.nPos++;

  0006a	8b 55 f8	 mov	 edx, DWORD PTR _si$[ebp+20]
  0006d	83 c2 01	 add	 edx, 1
  00070	89 55 f8	 mov	 DWORD PTR _si$[ebp+20], edx

; 827  :             break;

  00073	eb 27		 jmp	 SHORT $L49841
$L49847:

; 828  : 
; 829  :         case SB_LINEUP:
; 830  :             si.nPos--;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _si$[ebp+20]
  00078	83 e8 01	 sub	 eax, 1
  0007b	89 45 f8	 mov	 DWORD PTR _si$[ebp+20], eax

; 831  :             break;

  0007e	eb 1c		 jmp	 SHORT $L49841
$L49848:

; 832  : 
; 833  :         case SB_PAGEDOWN:
; 834  :             si.nPos += si.nPage;

  00080	8b 4d f8	 mov	 ecx, DWORD PTR _si$[ebp+20]
  00083	03 4d f4	 add	 ecx, DWORD PTR _si$[ebp+16]
  00086	89 4d f8	 mov	 DWORD PTR _si$[ebp+20], ecx

; 835  :             break;

  00089	eb 11		 jmp	 SHORT $L49841
$L49849:

; 836  : 
; 837  :         case SB_PAGEUP:
; 838  :             si.nPos -= si.nPage;

  0008b	8b 55 f8	 mov	 edx, DWORD PTR _si$[ebp+20]
  0008e	2b 55 f4	 sub	 edx, DWORD PTR _si$[ebp+16]
  00091	89 55 f8	 mov	 DWORD PTR _si$[ebp+20], edx

; 839  :             break;

  00094	eb 06		 jmp	 SHORT $L49841
$L49850:

; 840  : 
; 841  :         case SB_THUMBTRACK:
; 842  :             si.nPos = si.nTrackPos;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _si$[ebp+24]
  00099	89 45 f8	 mov	 DWORD PTR _si$[ebp+20], eax
$L49841:

; 843  :             break;
; 844  :     }
; 845  : 
; 846  :     si.nPos = min(si.nPos, si.nMax);

  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _si$[ebp+20]
  0009f	3b 4d f0	 cmp	 ecx, DWORD PTR _si$[ebp+12]
  000a2	7d 08		 jge	 SHORT $L50144
  000a4	8b 55 f8	 mov	 edx, DWORD PTR _si$[ebp+20]
  000a7	89 55 d8	 mov	 DWORD PTR -40+[ebp], edx
  000aa	eb 06		 jmp	 SHORT $L50145
$L50144:
  000ac	8b 45 f0	 mov	 eax, DWORD PTR _si$[ebp+12]
  000af	89 45 d8	 mov	 DWORD PTR -40+[ebp], eax
$L50145:
  000b2	8b 4d d8	 mov	 ecx, DWORD PTR -40+[ebp]
  000b5	89 4d f8	 mov	 DWORD PTR _si$[ebp+20], ecx

; 847  :     si.nPos = max(si.nPos, si.nMin);

  000b8	8b 55 f8	 mov	 edx, DWORD PTR _si$[ebp+20]
  000bb	3b 55 ec	 cmp	 edx, DWORD PTR _si$[ebp+8]
  000be	7e 08		 jle	 SHORT $L50146
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _si$[ebp+20]
  000c3	89 45 d4	 mov	 DWORD PTR -44+[ebp], eax
  000c6	eb 06		 jmp	 SHORT $L50147
$L50146:
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR _si$[ebp+8]
  000cb	89 4d d4	 mov	 DWORD PTR -44+[ebp], ecx
$L50147:
  000ce	8b 55 d4	 mov	 edx, DWORD PTR -44+[ebp]
  000d1	89 55 f8	 mov	 DWORD PTR _si$[ebp+20], edx

; 848  : 
; 849  :     SetScrollPos(m_hWnd, nScrollBarType, si.nPos, TRUE);

  000d4	6a 01		 push	 1
  000d6	8b 45 f8	 mov	 eax, DWORD PTR _si$[ebp+20]
  000d9	50		 push	 eax
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _nScrollBarType$[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000e1	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollPos@16

; 850  : 
; 851  :     //
; 852  :     // Call the handler
; 853  :     //
; 854  : 
; 855  :     OnScroll(nScrollBarType, hWndScrollBar, si.nPos, plResult);

  000eb	8b 4d 14	 mov	 ecx, DWORD PTR _plResult$[ebp]
  000ee	51		 push	 ecx
  000ef	8b 55 f8	 mov	 edx, DWORD PTR _si$[ebp+20]
  000f2	52		 push	 edx
  000f3	8b 45 10	 mov	 eax, DWORD PTR _hWndScrollBar$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _nScrollBarType$[ebp]
  000fa	51		 push	 ecx
  000fb	8b 55 e0	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	8b 02		 mov	 eax, DWORD PTR [edx]
  00100	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	ff 90 94 00 00
	00		 call	 DWORD PTR [eax+148]

; 856  : 
; 857  :     return TRUE;

  00109	b8 01 00 00 00	 mov	 eax, 1
$L49836:

; 858  : }

  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 10 00	 ret	 16			; 00000010H
$L50148:
  00114	00 00 00 00	 DD	 $L49847
  00118	00 00 00 00	 DD	 $L49846
  0011c	00 00 00 00	 DD	 $L49849
  00120	00 00 00 00	 DD	 $L49848
  00124	00 00 00 00	 DD	 $L49841
  00128	00 00 00 00	 DD	 $L49850
  0012c	00 00 00 00	 DD	 $L49845
  00130	00 00 00 00	 DD	 $L49844
?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z ENDP		; CWindow::OnScroll
_TEXT	ENDS
EXTRN	__imp__UpdateWindow@4:NEAR
EXTRN	__imp__InvalidateRect@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetRedraw@CWindow@@UAEHH@Z
_TEXT	SEGMENT
_fRedraw$ = 8
_this$ = -8
_fPrevious$ = -4
?SetRedraw@CWindow@@UAEHH@Z PROC NEAR			; CWindow::SetRedraw, COMDAT
; _this$ = ecx

; 884  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 885  :     const BOOL              fPrevious   = m_fRedraw;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0000f	89 4d fc	 mov	 DWORD PTR _fPrevious$[ebp], ecx

; 886  : 
; 887  :     if(fPrevious != fRedraw)

  00012	8b 55 fc	 mov	 edx, DWORD PTR _fPrevious$[ebp]
  00015	3b 55 08	 cmp	 edx, DWORD PTR _fRedraw$[ebp]
  00018	74 40		 je	 SHORT $L49856

; 888  :     {
; 889  :         m_fRedraw = fRedraw;

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _fRedraw$[ebp]
  00020	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 890  : 
; 891  :         SendMessage(WM_SETREDRAW, fRedraw);

  00023	6a 00		 push	 0
  00025	8b 55 08	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  00028	52		 push	 edx
  00029	6a 0b		 push	 11			; 0000000bH
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	ff 52 18	 call	 DWORD PTR [edx+24]

; 892  : 
; 893  :         if(fRedraw)

  00036	83 7d 08 00	 cmp	 DWORD PTR _fRedraw$[ebp], 0
  0003a	74 1e		 je	 SHORT $L49857

; 894  :         {
; 895  :             InvalidateRect(m_hWnd, NULL, FALSE);

  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00046	51		 push	 ecx
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 896  :             UpdateWindow(m_hWnd);

  0004d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00050	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4
$L49857:
$L49856:

; 897  :         }
; 898  :     }
; 899  : 
; 900  :     return fPrevious;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _fPrevious$[ebp]

; 901  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?SetRedraw@CWindow@@UAEHH@Z ENDP			; CWindow::SetRedraw
_TEXT	ENDS
END
