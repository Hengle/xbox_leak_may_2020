; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\xact\host\gui\main\audition.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EC@CLP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@GHLG@hdc?5?$DN?$DN?5m_hdc?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05KMJF@ADPCM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05HMEK@8?9bit?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@PLCC@CGuiWaveBankEntry?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@OJDF@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@HCEK@CGuiWaveBank?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DBBB@Xbox?5MRU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@LPKH@XAUD?$CBconnect?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MCE@CRemoteAudition?3?3Connect?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@KNDJ@DmGetXboxName?5failed?5with?5?$CFx?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@MMPP@DmOpenConnection?5failed?5with?5?$CFx?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@IELM@DmSendCommand?$CI?$CFs?$CJ?5failed?5with?5?$CFx@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDPP@XAUD?$CBdisconnect?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@JNDA@XAUD?$CBWaveBank?4PlayEntry?5?$CC?$CFs?$CC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05FAFH@T?3?2?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03NCAD@XAC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04EHOP@BYTE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PCFE@?2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@BJPK@CRemoteAudition?3?3Play?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CC@FALO@DmSendFile?$CI?$CFs?0?5?$CFs?$CJ?5failed?5with?5?$CF@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@OPDH@XAUD?$CBWaveBank?4StopAll?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09PHNP@pvContext?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CDialog@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CDialog@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CDialog@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreObject@CTempSelectObject@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetResolution@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBankHeaderSize@CWaveBank@@KGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRemoteAudition@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRemoteAudition@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRemoteAudition@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Connect@CRemoteAudition@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Disconnect@CRemoteAudition@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StopAll@CRemoteAudition@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CXboxConnectionDialog@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCXboxConnectionDialog@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CXboxConnectionDialog@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CXboxConnectionDialog@@MAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCmdOK@CXboxConnectionDialog@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CXboxConnectionDialog@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRemoteAudition@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@LPKH@XAUD?$CBconnect?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BD@JDPP@XAUD?$CBdisconnect?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BN@JNDA@XAUD?$CBWaveBank?4PlayEntry?5?$CC?$CFs?$CC?$AA@ ; `string'
PUBLIC	??_C@_05FAFH@T?3?2?$CFs?$AA@			; `string'
;	COMDAT ??_C@_0BA@LPKH@XAUD?$CBconnect?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BA@LPKH@XAUD?$CBconnect?5?$CFs?$AA@ DB 'XAUD!connect %s', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
?pszCommandTemplate@?1??Connect@CRemoteAudition@@UAEHXZ@4QBDB DD FLAT:??_C@_0BA@LPKH@XAUD?$CBconnect?5?$CFs?$AA@ ; `CRemoteAudition::Connect'::`2'::pszCommandTemplate
CONST	ENDS
;	COMDAT ??_C@_0BD@JDPP@XAUD?$CBdisconnect?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@JDPP@XAUD?$CBdisconnect?5?$CFs?$AA@ DB 'XAUD!disconnect %s', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
?pszCommandTemplate@?1??Disconnect@CRemoteAudition@@UAEXXZ@4QBDB DD FLAT:??_C@_0BD@JDPP@XAUD?$CBdisconnect?5?$CFs?$AA@ ; `CRemoteAudition::Disconnect'::`2'::pszCommandTemplate
CONST	ENDS
;	COMDAT ??_C@_0BN@JNDA@XAUD?$CBWaveBank?4PlayEntry?5?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_0BN@JNDA@XAUD?$CBWaveBank?4PlayEntry?5?$CC?$CFs?$CC?$AA@ DB 'XAUD!W'
	DB	'aveBank.PlayEntry "%s"', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?pszCommandTemplate@?1??Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z@4QBDB DD FLAT:??_C@_0BN@JNDA@XAUD?$CBWaveBank?4PlayEntry?5?$CC?$CFs?$CC?$AA@ ; `CRemoteAudition::Play'::`2'::pszCommandTemplate
CONST	ENDS
;	COMDAT ??_C@_05FAFH@T?3?2?$CFs?$AA@
CONST	SEGMENT
??_C@_05FAFH@T?3?2?$CFs?$AA@ DB 'T:\%s', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?pszDstPathTemplate@?1??Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z@4QBDB DD FLAT:??_C@_05FAFH@T?3?2?$CFs?$AA@ ; `CRemoteAudition::Play'::`2'::pszDstPathTemplate
?dwCopyBufferSize@?1??Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z@4KB DD 040000H ; `CRemoteAudition::Play'::`2'::dwCopyBufferSize
CONST	ENDS
PUBLIC	??0CRemoteAudition@@QAE@XZ			; CRemoteAudition::CRemoteAudition
PUBLIC	?Connect@CRemoteAudition@@UAEHXZ		; CRemoteAudition::Connect
PUBLIC	?Disconnect@CRemoteAudition@@UAEXXZ		; CRemoteAudition::Disconnect
PUBLIC	?Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z ; CRemoteAudition::Play
PUBLIC	?StopAll@CRemoteAudition@@UAEXXZ		; CRemoteAudition::StopAll
PUBLIC	??_7CRemoteAudition@@6B@			; CRemoteAudition::`vftable'
PUBLIC	??_GCRemoteAudition@@UAEPAXI@Z			; CRemoteAudition::`scalar deleting destructor'
PUBLIC	??_ECRemoteAudition@@UAEPAXI@Z			; CRemoteAudition::`vector deleting destructor'
;	COMDAT ??_7CRemoteAudition@@6B@
; File c:\xbox\private\windows\directx\xact\host\gui\main\audition.cpp
CONST	SEGMENT
??_7CRemoteAudition@@6B@ DD FLAT:??_ECRemoteAudition@@UAEPAXI@Z ; CRemoteAudition::`vftable'
	DD	FLAT:?Connect@CRemoteAudition@@UAEHXZ
	DD	FLAT:?Disconnect@CRemoteAudition@@UAEXXZ
	DD	FLAT:?Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z
	DD	FLAT:?StopAll@CRemoteAudition@@UAEXXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRemoteAudition@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CRemoteAudition@@QAE@XZ PROC NEAR			; CRemoteAudition::CRemoteAudition, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRemoteAudition@@6B@ ; CRemoteAudition::`vftable'

; 40   :     m_pxbdm = NULL;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 41   : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CRemoteAudition@@QAE@XZ ENDP				; CRemoteAudition::CRemoteAudition
_TEXT	ENDS
PUBLIC	??1CRemoteAudition@@UAE@XZ			; CRemoteAudition::~CRemoteAudition
; Function compile flags: /Odt
;	COMDAT ??_GCRemoteAudition@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCRemoteAudition@@UAEPAXI@Z PROC NEAR		; CRemoteAudition::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRemoteAudition@@UAE@XZ ; CRemoteAudition::~CRemoteAudition
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L52579
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L52579:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRemoteAudition@@UAEPAXI@Z ENDP			; CRemoteAudition::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\main\audition.cpp
_TEXT	ENDS
;	COMDAT ??1CRemoteAudition@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CRemoteAudition@@UAE@XZ PROC NEAR			; CRemoteAudition::~CRemoteAudition, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRemoteAudition@@6B@ ; CRemoteAudition::`vftable'

; 67   :     Disconnect();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Disconnect@CRemoteAudition@@UAEXXZ ; CRemoteAudition::Disconnect

; 68   : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CRemoteAudition@@UAE@XZ ENDP				; CRemoteAudition::~CRemoteAudition
_TEXT	ENDS
PUBLIC	??_C@_08DBBB@Xbox?5MRU?$AA@			; `string'
PUBLIC	??_C@_07FEMJ@XACTGUI?$AA@			; `string'
PUBLIC	??_C@_0BJ@MCE@CRemoteAudition?3?3Connect?$AA@	; `string'
PUBLIC	??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BN@KNDJ@DmGetXboxName?5failed?5with?5?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0CA@MMPP@DmOpenConnection?5failed?5with?5?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0CB@IELM@DmSendCommand?$CI?$CFs?$CJ?5failed?5with?5?$CFx@ ; `string'
PUBLIC	??0CXboxConnectionDialog@@QAE@XZ		; CXboxConnectionDialog::CXboxConnectionDialog
PUBLIC	??1CXboxConnectionDialog@@UAE@XZ		; CXboxConnectionDialog::~CXboxConnectionDialog
EXTRN	_g_szAppTitle:BYTE
EXTRN	?g_pApplication@@3PAVCApplication@@A:DWORD	; g_pApplication
EXTRN	_sprintf:NEAR
EXTRN	__imp__DmOpenConnection@4:NEAR
EXTRN	__imp__DmCloseConnection@4:NEAR
EXTRN	__imp__DmSendCommand@16:NEAR
EXTRN	__imp__DmGetXboxName@8:NEAR
EXTRN	__imp__DmSetXboxNameNoRegister@4:NEAR
EXTRN	?DoModal@CDialog@@UAEHPAVCWindow@@PAX@Z:NEAR	; CDialog::DoModal
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	??0CMRU@@QAE@PAUHKEY__@@PBD@Z:NEAR		; CMRU::CMRU
EXTRN	??1CMRU@@UAE@XZ:NEAR				; CMRU::~CMRU
EXTRN	?AddItem@CMRU@@UAEXPBDH@Z:NEAR			; CMRU::AddItem
EXTRN	?GetItems@CMRU@@UAEPADXZ:NEAR			; CMRU::GetItems
;	COMDAT ??_C@_08DBBB@Xbox?5MRU?$AA@
CONST	SEGMENT
??_C@_08DBBB@Xbox?5MRU?$AA@ DB 'Xbox MRU', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT
??_C@_07FEMJ@XACTGUI?$AA@ DB 'XACTGUI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MCE@CRemoteAudition?3?3Connect?$AA@
CONST	SEGMENT
??_C@_0BJ@MCE@CRemoteAudition?3?3Connect?$AA@ DB 'CRemoteAudition::Connec'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\main\audition.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KNDJ@DmGetXboxName?5failed?5with?5?$CFx?$AA@
CONST	SEGMENT
??_C@_0BN@KNDJ@DmGetXboxName?5failed?5with?5?$CFx?$AA@ DB 'DmGetXboxName '
	DB	'failed with %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MMPP@DmOpenConnection?5failed?5with?5?$CFx?$AA@
CONST	SEGMENT
??_C@_0CA@MMPP@DmOpenConnection?5failed?5with?5?$CFx?$AA@ DB 'DmOpenConne'
	DB	'ction failed with %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IELM@DmSendCommand?$CI?$CFs?$CJ?5failed?5with?5?$CFx@
CONST	SEGMENT
??_C@_0CB@IELM@DmSendCommand?$CI?$CFs?$CJ?5failed?5with?5?$CFx@ DB 'DmSen'
	DB	'dCommand(%s) failed with %x', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Connect@CRemoteAudition@@UAEHXZ
_TEXT	SEGMENT
$T52896 = -2216
$T52897 = -2220
_this$ = -2224
_MRU$ = -1936
_Dialog$ = -568
_ConnectData$ = -2208
_szDefault$ = -512
_szCommand$ = -256
_nResult$ = -2212
_fSuccess$ = -1944
_dwSize$ = -1940
?Connect@CRemoteAudition@@UAEHXZ PROC NEAR		; CRemoteAudition::Connect, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 08 00
	00		 sub	 esp, 2224		; 000008b0H
  00009	89 8d 50 f7 ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 95   :     CMRU                    MRU(g_pApplication->m_Registry, REGKEY_XBOX_MRU);

  0000f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08DBBB@Xbox?5MRU?$AA@ ; `string'
  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  0001a	83 c1 04	 add	 ecx, 4
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	ff 52 1c	 call	 DWORD PTR [edx+28]
  00028	50		 push	 eax
  00029	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR _MRU$[ebp]
  0002f	e8 00 00 00 00	 call	 ??0CMRU@@QAE@PAUHKEY__@@PBD@Z ; CMRU::CMRU

; 96   : 
; 97   :     static const LPCTSTR    pszCommandTemplate  = TEXT("XAUD!connect %s");
; 98   :     CXboxConnectionDialog   Dialog;

  00034	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR _Dialog$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0CXboxConnectionDialog@@QAE@XZ ; CXboxConnectionDialog::CXboxConnectionDialog

; 99   :     XBOXCONNECTDATA         ConnectData;
; 100  :     TCHAR                   szDefault[0x100];
; 101  :     TCHAR                   szCommand[0x100];
; 102  :     int                     nResult;
; 103  :     BOOL                    fSuccess;
; 104  :     DWORD                   dwSize;
; 105  :     
; 106  :     if(m_pxbdm)

  0003f	8b 85 50 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00049	74 2b		 je	 SHORT $L52600

; 107  :     {
; 108  :         return TRUE;

  0004b	c7 85 58 f7 ff
	ff 01 00 00 00	 mov	 DWORD PTR $T52896[ebp], 1
  00055	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR _Dialog$[ebp]
  0005b	e8 00 00 00 00	 call	 ??1CXboxConnectionDialog@@UAE@XZ ; CXboxConnectionDialog::~CXboxConnectionDialog
  00060	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR _MRU$[ebp]
  00066	e8 00 00 00 00	 call	 ??1CMRU@@UAE@XZ		; CMRU::~CMRU
  0006b	8b 85 58 f7 ff
	ff		 mov	 eax, DWORD PTR $T52896[ebp]
  00071	e9 c5 02 00 00	 jmp	 $L52587
$L52600:

; 109  :     }
; 110  : 
; 111  :     _stprintf(szCommand, pszCommandTemplate, g_szAppTitle);

  00076	68 00 00 00 00	 push	 OFFSET FLAT:_g_szAppTitle
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszCommandTemplate@?1??Connect@CRemoteAudition@@UAEHXZ@4QBDB
  00081	51		 push	 ecx
  00082	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _szCommand$[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _sprintf
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 112  : 
; 113  :     //
; 114  :     // Get the default Xbox name and make sure it's in the MRU
; 115  :     //
; 116  : 
; 117  :     dwSize = NUMELMS(szDefault);

  00091	c7 85 6c f8 ff
	ff 00 01 00 00	 mov	 DWORD PTR _dwSize$[ebp], 256 ; 00000100H

; 118  : 
; 119  :     if(XBDM_NOERR == (nResult = DmGetXboxName(szDefault, &dwSize)))

  0009b	8d 85 6c f8 ff
	ff		 lea	 eax, DWORD PTR _dwSize$[ebp]
  000a1	50		 push	 eax
  000a2	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR _szDefault$[ebp]
  000a8	51		 push	 ecx
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmGetXboxName@8
  000af	89 85 5c f7 ff
	ff		 mov	 DWORD PTR _nResult$[ebp], eax
  000b5	81 bd 5c f7 ff
	ff 00 00 db 02	 cmp	 DWORD PTR _nResult$[ebp], 47906816 ; 02db0000H
  000bf	75 16		 jne	 SHORT $L52606

; 120  :     {
; 121  :         MRU.AddItem(szDefault);

  000c1	6a 01		 push	 1
  000c3	8d 95 00 fe ff
	ff		 lea	 edx, DWORD PTR _szDefault$[ebp]
  000c9	52		 push	 edx
  000ca	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR _MRU$[ebp]
  000d0	e8 00 00 00 00	 call	 ?AddItem@CMRU@@UAEXPBDH@Z ; CMRU::AddItem

; 122  :     }
; 123  :     else

  000d5	eb 31		 jmp	 SHORT $L52607
$L52606:

; 124  :     {
; 125  :         DPF_ERROR("DmGetXboxName failed with %x", nResult);

  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  000dc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MCE@CRemoteAudition?3?3Connect?$AA@ ; `string'
  000e1	6a 7d		 push	 125			; 0000007dH
  000e3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000e8	6a 01		 push	 1
  000ea	6a 09		 push	 9
  000ec	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000f1	83 c4 18	 add	 esp, 24			; 00000018H
  000f4	8b 85 5c f7 ff
	ff		 mov	 eax, DWORD PTR _nResult$[ebp]
  000fa	50		 push	 eax
  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@KNDJ@DmGetXboxName?5failed?5with?5?$CFx?$AA@ ; `string'
  00100	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00105	83 c4 08	 add	 esp, 8
$L52607:

; 126  :     }
; 127  : 
; 128  :     //
; 129  :     // Get MRU data
; 130  :     //
; 131  : 
; 132  :     ConnectData.pszAddressList = MRU.GetItems();

  00108	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR _MRU$[ebp]
  0010e	e8 00 00 00 00	 call	 ?GetItems@CMRU@@UAEPADXZ ; CMRU::GetItems
  00113	89 85 60 f7 ff
	ff		 mov	 DWORD PTR _ConnectData$[ebp], eax
$L52613:

; 133  : 
; 134  :     //
; 135  :     // Enter the connection loop
; 136  :     //
; 137  : 
; 138  :     while(TRUE)

  00119	b9 01 00 00 00	 mov	 ecx, 1
  0011e	85 c9		 test	 ecx, ecx
  00120	0f 84 61 01 00
	00		 je	 $L52614

; 139  :     {
; 140  :         //
; 141  :         // Show the connection dialog.  The dialog will write directly to
; 142  :         // our m_szAddress buffer.
; 143  :         //
; 144  : 
; 145  :         if(!(fSuccess = Dialog.DoModal(&g_pApplication->m_MainFrame, &ConnectData)))

  00126	8d 95 60 f7 ff
	ff		 lea	 edx, DWORD PTR _ConnectData$[ebp]
  0012c	52		 push	 edx
  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  00132	83 c0 10	 add	 eax, 16			; 00000010H
  00135	50		 push	 eax
  00136	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR _Dialog$[ebp]
  0013c	e8 00 00 00 00	 call	 ?DoModal@CDialog@@UAEHPAVCWindow@@PAX@Z ; CDialog::DoModal
  00141	89 85 68 f8 ff
	ff		 mov	 DWORD PTR _fSuccess$[ebp], eax
  00147	83 bd 68 f8 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0014e	75 05		 jne	 SHORT $L52615

; 146  :         {
; 147  :             break;

  00150	e9 32 01 00 00	 jmp	 $L52614
$L52615:

; 148  :         }
; 149  : 
; 150  :         //
; 151  :         // If the address is valid, use it
; 152  :         //
; 153  : 
; 154  :         if(fSuccess && ConnectData.szAddress[0])

  00155	83 bd 68 f8 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0015c	74 18		 je	 SHORT $L52616
  0015e	0f be 8d 64 f7
	ff ff		 movsx	 ecx, BYTE PTR _ConnectData$[ebp+4]
  00165	85 c9		 test	 ecx, ecx
  00167	74 0d		 je	 SHORT $L52616

; 155  :         {
; 156  :             DmSetXboxNameNoRegister(ConnectData.szAddress);

  00169	8d 95 64 f7 ff
	ff		 lea	 edx, DWORD PTR _ConnectData$[ebp+4]
  0016f	52		 push	 edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmSetXboxNameNoRegister@4
$L52616:

; 157  :         }
; 158  : 
; 159  :         //
; 160  :         // Connect to the Xbox
; 161  :         //
; 162  : 
; 163  :         if(fSuccess)

  00176	83 bd 68 f8 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0017d	74 60		 je	 SHORT $L52617

; 164  :         {
; 165  :             if(XBDM_NOERR != (nResult = DmOpenConnection(&m_pxbdm)))

  0017f	8b 85 50 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00185	83 c0 04	 add	 eax, 4
  00188	50		 push	 eax
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmOpenConnection@4
  0018f	89 85 5c f7 ff
	ff		 mov	 DWORD PTR _nResult$[ebp], eax
  00195	81 bd 5c f7 ff
	ff 00 00 db 02	 cmp	 DWORD PTR _nResult$[ebp], 47906816 ; 02db0000H
  0019f	74 3e		 je	 SHORT $L52622

; 166  :             {
; 167  :                 DPF_ERROR("DmOpenConnection failed with %x", nResult);

  001a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  001a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MCE@CRemoteAudition?3?3Connect?$AA@ ; `string'
  001ab	68 a7 00 00 00	 push	 167			; 000000a7H
  001b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  001b5	6a 01		 push	 1
  001b7	6a 09		 push	 9
  001b9	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001be	83 c4 18	 add	 esp, 24			; 00000018H
  001c1	8b 8d 5c f7 ff
	ff		 mov	 ecx, DWORD PTR _nResult$[ebp]
  001c7	51		 push	 ecx
  001c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@MMPP@DmOpenConnection?5failed?5with?5?$CFx?$AA@ ; `string'
  001cd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001d2	83 c4 08	 add	 esp, 8

; 168  :                 fSuccess = FALSE;

  001d5	c7 85 68 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _fSuccess$[ebp], 0
$L52622:
$L52617:

; 169  :             }
; 170  :         }
; 171  : 
; 172  :         //
; 173  :         // Connect to AudConsole
; 174  :         //
; 175  : 
; 176  :         if(fSuccess)

  001df	83 bd 68 f8 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  001e6	74 72		 je	 SHORT $L52624

; 177  :         {
; 178  :             if(XBDM_NOERR != (nResult = DmSendCommand(m_pxbdm, szCommand, NULL, NULL)))

  001e8	6a 00		 push	 0
  001ea	6a 00		 push	 0
  001ec	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _szCommand$[ebp]
  001f2	52		 push	 edx
  001f3	8b 85 50 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001fc	51		 push	 ecx
  001fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmSendCommand@16
  00203	89 85 5c f7 ff
	ff		 mov	 DWORD PTR _nResult$[ebp], eax
  00209	81 bd 5c f7 ff
	ff 00 00 db 02	 cmp	 DWORD PTR _nResult$[ebp], 47906816 ; 02db0000H
  00213	74 45		 je	 SHORT $L52629

; 179  :             {
; 180  :                 DPF_ERROR("DmSendCommand(%s) failed with %x", szCommand, nResult);

  00215	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  0021a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@MCE@CRemoteAudition?3?3Connect?$AA@ ; `string'
  0021f	68 b4 00 00 00	 push	 180			; 000000b4H
  00224	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00229	6a 01		 push	 1
  0022b	6a 09		 push	 9
  0022d	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00232	83 c4 18	 add	 esp, 24			; 00000018H
  00235	8b 95 5c f7 ff
	ff		 mov	 edx, DWORD PTR _nResult$[ebp]
  0023b	52		 push	 edx
  0023c	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szCommand$[ebp]
  00242	50		 push	 eax
  00243	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@IELM@DmSendCommand?$CI?$CFs?$CJ?5failed?5with?5?$CFx@ ; `string'
  00248	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0024d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 181  :                 fSuccess = FALSE;

  00250	c7 85 68 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _fSuccess$[ebp], 0
$L52629:
$L52624:

; 182  :             }
; 183  :         }
; 184  : 
; 185  :         //
; 186  :         // If anything went wrong, try again
; 187  :         //
; 188  : 
; 189  :         if(fSuccess)

  0025a	83 bd 68 f8 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00261	74 02		 je	 SHORT $L52631

; 190  :         {
; 191  :             break;

  00263	eb 22		 jmp	 SHORT $L52614
$L52631:

; 192  :         }
; 193  :         else
; 194  :         {
; 195  :             DmCloseConnection(m_pxbdm);

  00265	8b 8d 50 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0026b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0026e	52		 push	 edx
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmCloseConnection@4

; 196  :             m_pxbdm = NULL;

  00275	8b 85 50 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0027b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 197  :         }
; 198  :     }

  00282	e9 92 fe ff ff	 jmp	 $L52613
$L52614:

; 199  : 
; 200  :     //
; 201  :     // Add the address to the MRU
; 202  :     //
; 203  : 
; 204  :     if(fSuccess && ConnectData.szAddress[0])

  00287	83 bd 68 f8 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0028e	74 1f		 je	 SHORT $L52633
  00290	0f be 8d 64 f7
	ff ff		 movsx	 ecx, BYTE PTR _ConnectData$[ebp+4]
  00297	85 c9		 test	 ecx, ecx
  00299	74 14		 je	 SHORT $L52633

; 205  :     {
; 206  :         MRU.AddItem(ConnectData.szAddress);

  0029b	6a 01		 push	 1
  0029d	8d 95 64 f7 ff
	ff		 lea	 edx, DWORD PTR _ConnectData$[ebp+4]
  002a3	52		 push	 edx
  002a4	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR _MRU$[ebp]
  002aa	e8 00 00 00 00	 call	 ?AddItem@CMRU@@UAEXPBDH@Z ; CMRU::AddItem
$L52633:

; 207  :     }
; 208  : 
; 209  :     //
; 210  :     // Update commands
; 211  :     //
; 212  : 
; 213  :     if(fSuccess)

  002af	83 bd 68 f8 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  002b6	74 3c		 je	 SHORT $L52634

; 214  :     {
; 215  :         g_pApplication->m_MainFrame.EnableCommand(ID_CONNECT, FALSE);

  002b8	6a 00		 push	 0
  002ba	68 5f 9c 00 00	 push	 40031			; 00009c5fH
  002bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  002c5	83 c1 10	 add	 ecx, 16			; 00000010H
  002c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  002cd	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  002d0	ff 92 b0 00 00
	00		 call	 DWORD PTR [edx+176]

; 216  :         g_pApplication->m_MainFrame.EnableCommand(ID_DISCONNECT, TRUE);

  002d6	6a 01		 push	 1
  002d8	68 60 9c 00 00	 push	 40032			; 00009c60H
  002dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  002e3	83 c1 10	 add	 ecx, 16			; 00000010H
  002e6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  002eb	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  002ee	ff 92 b0 00 00
	00		 call	 DWORD PTR [edx+176]
$L52634:

; 217  :     }
; 218  : 
; 219  :     //
; 220  :     // Clean up
; 221  :     //
; 222  : 
; 223  :     MEMFREE(ConnectData.pszAddressList);

  002f4	83 bd 60 f7 ff
	ff 00		 cmp	 DWORD PTR _ConnectData$[ebp], 0
  002fb	74 16		 je	 SHORT $L52635
  002fd	8b 85 60 f7 ff
	ff		 mov	 eax, DWORD PTR _ConnectData$[ebp]
  00303	50		 push	 eax
  00304	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  00309	c7 85 60 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ConnectData$[ebp], 0
$L52635:

; 224  : 
; 225  :     return fSuccess;

  00313	8b 8d 68 f8 ff
	ff		 mov	 ecx, DWORD PTR _fSuccess$[ebp]
  00319	89 8d 54 f7 ff
	ff		 mov	 DWORD PTR $T52897[ebp], ecx
  0031f	8d 8d c8 fd ff
	ff		 lea	 ecx, DWORD PTR _Dialog$[ebp]
  00325	e8 00 00 00 00	 call	 ??1CXboxConnectionDialog@@UAE@XZ ; CXboxConnectionDialog::~CXboxConnectionDialog
  0032a	8d 8d 70 f8 ff
	ff		 lea	 ecx, DWORD PTR _MRU$[ebp]
  00330	e8 00 00 00 00	 call	 ??1CMRU@@UAE@XZ		; CMRU::~CMRU
  00335	8b 85 54 f7 ff
	ff		 mov	 eax, DWORD PTR $T52897[ebp]
$L52587:

; 226  : }

  0033b	8b e5		 mov	 esp, ebp
  0033d	5d		 pop	 ebp
  0033e	c3		 ret	 0
?Connect@CRemoteAudition@@UAEHXZ ENDP			; CRemoteAudition::Connect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Disconnect@CRemoteAudition@@UAEXXZ
_TEXT	SEGMENT
_this$ = -264
_szCommand$ = -256
?Disconnect@CRemoteAudition@@UAEXXZ PROC NEAR		; CRemoteAudition::Disconnect, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 253  :     static const LPCTSTR    pszCommandTemplate  = TEXT("XAUD!disconnect %s");
; 254  :     TCHAR                   szCommand[0x100];
; 255  :     int                     nResult;
; 256  :     
; 257  :     if(!m_pxbdm)

  0000f	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00015	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00019	75 05		 jne	 SHORT $L52646

; 258  :     {
; 259  :         return;

  0001b	e9 8f 00 00 00	 jmp	 $L52640
$L52646:

; 260  :     }
; 261  : 
; 262  :     //
; 263  :     // Disconnect
; 264  :     //
; 265  :     
; 266  :     _stprintf(szCommand, pszCommandTemplate, g_szAppTitle);

  00020	68 00 00 00 00	 push	 OFFSET FLAT:_g_szAppTitle
  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszCommandTemplate@?1??Disconnect@CRemoteAudition@@UAEXXZ@4QBDB
  0002b	51		 push	 ecx
  0002c	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _szCommand$[ebp]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _sprintf
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 267  : 
; 268  :     DmSendCommand(m_pxbdm, szCommand, NULL, NULL);

  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szCommand$[ebp]
  00045	50		 push	 eax
  00046	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004f	52		 push	 edx
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmSendCommand@16

; 269  :     DmCloseConnection(m_pxbdm);

  00056	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmCloseConnection@4

; 270  : 
; 271  :     m_pxbdm = NULL;

  00066	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0006c	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 272  : 
; 273  :     //
; 274  :     // Update commands
; 275  :     //
; 276  : 
; 277  :     g_pApplication->m_MainFrame.EnableCommand(ID_CONNECT, TRUE);

  00073	6a 01		 push	 1
  00075	68 5f 9c 00 00	 push	 40031			; 00009c5fH
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  00080	83 c1 10	 add	 ecx, 16			; 00000010H
  00083	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  00088	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0008b	ff 92 b0 00 00
	00		 call	 DWORD PTR [edx+176]

; 278  :     g_pApplication->m_MainFrame.EnableCommand(ID_DISCONNECT, FALSE);

  00091	6a 00		 push	 0
  00093	68 60 9c 00 00	 push	 40032			; 00009c60H
  00098	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  0009e	83 c1 10	 add	 ecx, 16			; 00000010H
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pApplication@@3PAVCApplication@@A ; g_pApplication
  000a6	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000a9	ff 92 b0 00 00
	00		 call	 DWORD PTR [edx+176]
$L52640:

; 279  : }

  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
?Disconnect@CRemoteAudition@@UAEXXZ ENDP		; CRemoteAudition::Disconnect
_TEXT	ENDS
PUBLIC	??_C@_03NCAD@XAC?$AA@				; `string'
PUBLIC	??_C@_04EHOP@BYTE?$AA@				; `string'
PUBLIC	??_C@_01PCFE@?2?$AA@				; `string'
PUBLIC	??_C@_0BG@BJPK@CRemoteAudition?3?3Play?$AA@	; `string'
PUBLIC	??_C@_0CC@FALO@DmSendFile?$CI?$CFs?0?5?$CFs?$CJ?5failed?5with?5?$CF@ ; `string'
EXTRN	__imp__DeleteFileA@4:NEAR
EXTRN	??0CStdFileStream@WaveLoader@@QAE@XZ:NEAR	; WaveLoader::CStdFileStream::CStdFileStream
EXTRN	??1CStdFileStream@WaveLoader@@QAE@XZ:NEAR	; WaveLoader::CStdFileStream::~CStdFileStream
EXTRN	?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z:NEAR ; WaveLoader::CStdFileStream::Open
EXTRN	?Close@CStdFileStream@WaveLoader@@QAEXXZ:NEAR	; WaveLoader::CStdFileStream::Close
EXTRN	?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z:NEAR ; WaveLoader::CStdFileStream::Write
EXTRN	__imp__DmSendFileA@8:NEAR
EXTRN	__imp__DmMkdir@4:NEAR
EXTRN	_strcat:NEAR
EXTRN	?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolAlloc
EXTRN	__imp__GetTempFileNameA@16:NEAR
EXTRN	__imp__GetCurrentDirectoryA@8:NEAR
EXTRN	__splitpath:NEAR
EXTRN	?m_dwMinAlignment@CWaveBank@@2KB:DWORD		; CWaveBank::m_dwMinAlignment
;	COMDAT ??_C@_03NCAD@XAC?$AA@
CONST	SEGMENT
??_C@_03NCAD@XAC?$AA@ DB 'XAC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHOP@BYTE?$AA@
CONST	SEGMENT
??_C@_04EHOP@BYTE?$AA@ DB 'BYTE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PCFE@?2?$AA@
CONST	SEGMENT
??_C@_01PCFE@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BJPK@CRemoteAudition?3?3Play?$AA@
CONST	SEGMENT
??_C@_0BG@BJPK@CRemoteAudition?3?3Play?$AA@ DB 'CRemoteAudition::Play', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FALO@DmSendFile?$CI?$CFs?0?5?$CFs?$CJ?5failed?5with?5?$CF@
CONST	SEGMENT
??_C@_0CC@FALO@DmSendFile?$CI?$CFs?0?5?$CFs?$CJ?5failed?5with?5?$CF@ DB 'D'
	DB	'mSendFile(%s, %s) failed with %x', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z
_TEXT	SEGMENT
$T52904 = -2128
$T52905 = -2132
_pEntry$ = 8
_this$ = -2136
_dwOffset$ = -1832
_pvCopyBuffer$ = -1828
_szCurDir$ = -2096
_szSrcFile$ = -1824
_szDstFile$ = -1560
_szFileTitle$ = -1296
_szCommand$ = -1024
_DataFile$ = -1032
_Entry$ = -2124
_fSuccess$ = -2100
_nResult$ = -2104
?Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z PROC NEAR ; CRemoteAudition::Play, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 08 00
	00		 sub	 esp, 2136		; 00000858H
  00009	89 8d a8 f7 ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 306  :     static const LPCSTR     pszCommandTemplate      = "XAUD!WaveBank.PlayEntry \"%s\"";
; 307  :     static const LPCSTR     pszDstPathTemplate      = "T:\\%s";
; 308  :     static const DWORD      dwCopyBufferSize        = 256 * 1024;
; 309  :     DWORD                   dwOffset                = 0;

  0000f	c7 85 d8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwOffset$[ebp], 0

; 310  :     LPVOID                  pvCopyBuffer            = NULL;

  00019	c7 85 dc f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pvCopyBuffer$[ebp], 0

; 311  :     TCHAR                   szCurDir[MAX_PATH];
; 312  :     TCHAR                   szSrcFile[MAX_PATH];
; 313  :     TCHAR                   szDstFile[MAX_PATH];
; 314  :     TCHAR                   szFileTitle[MAX_PATH];
; 315  :     CHAR                    szCommand[0x400];
; 316  :     CStdFileStream          DataFile;

  00023	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _DataFile$[ebp]
  00029	e8 00 00 00 00	 call	 ??0CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::CStdFileStream

; 317  :     WAVEBANKENTRY           Entry;
; 318  :     BOOL                    fSuccess;
; 319  :     int                     nResult;
; 320  : 
; 321  :     //
; 322  :     // Make sure we're connected
; 323  :     //
; 324  : 
; 325  :     if(!Connect())

  0002e	8b 85 a8 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	8b 8d a8 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	ff 52 04	 call	 DWORD PTR [edx+4]
  0003f	85 c0		 test	 eax, eax
  00041	75 20		 jne	 SHORT $L52670

; 326  :     {
; 327  :         return FALSE;

  00043	c7 85 b0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T52904[ebp], 0
  0004d	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _DataFile$[ebp]
  00053	e8 00 00 00 00	 call	 ??1CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::~CStdFileStream
  00058	8b 85 b0 f7 ff
	ff		 mov	 eax, DWORD PTR $T52904[ebp]
  0005e	e9 33 03 00 00	 jmp	 $L52650
$L52670:

; 328  :     }
; 329  : 
; 330  :     //
; 331  :     // Open a temporary file
; 332  :     //
; 333  : 
; 334  :     GetCurrentDirectory(NUMELMS(szCurDir), szCurDir);

  00063	8d 85 d0 f7 ff
	ff		 lea	 eax, DWORD PTR _szCurDir$[ebp]
  00069	50		 push	 eax
  0006a	68 04 01 00 00	 push	 260			; 00000104H
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentDirectoryA@8

; 335  :     GetTempFileName(szCurDir, TEXT("XAC"), 0, szSrcFile);

  00075	8d 8d e0 f8 ff
	ff		 lea	 ecx, DWORD PTR _szSrcFile$[ebp]
  0007b	51		 push	 ecx
  0007c	6a 00		 push	 0
  0007e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_03NCAD@XAC?$AA@ ; `string'
  00083	8d 95 d0 f7 ff
	ff		 lea	 edx, DWORD PTR _szCurDir$[ebp]
  00089	52		 push	 edx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempFileNameA@16

; 336  : 
; 337  :     fSuccess = SUCCEEDED(DataFile.Open(szSrcFile, GENERIC_READ | GENERIC_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_TEMPORARY | FILE_FLAG_SEQUENTIAL_SCAN));

  00090	68 00 01 00 08	 push	 134217984		; 08000100H
  00095	6a 02		 push	 2
  00097	6a 00		 push	 0
  00099	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  0009e	8d 85 e0 f8 ff
	ff		 lea	 eax, DWORD PTR _szSrcFile$[ebp]
  000a4	50		 push	 eax
  000a5	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _DataFile$[ebp]
  000ab	e8 00 00 00 00	 call	 ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z ; WaveLoader::CStdFileStream::Open
  000b0	33 c9		 xor	 ecx, ecx
  000b2	85 c0		 test	 eax, eax
  000b4	0f 9d c1	 setge	 cl
  000b7	89 8d cc f7 ff
	ff		 mov	 DWORD PTR _fSuccess$[ebp], ecx

; 338  : 
; 339  :     //
; 340  :     // Get entry meta-data and write it to the file
; 341  :     //
; 342  : 
; 343  :     if(fSuccess)

  000bd	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  000c4	74 2e		 je	 SHORT $L52674

; 344  :     {
; 345  :         fSuccess = SUCCEEDED(pEntry->GetMetaData(&Entry, 0, CWaveBank::m_dwMinAlignment, &dwOffset));

  000c6	8d 95 d8 f8 ff
	ff		 lea	 edx, DWORD PTR _dwOffset$[ebp]
  000cc	52		 push	 edx
  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwMinAlignment@CWaveBank@@2KB ; CWaveBank::m_dwMinAlignment
  000d2	50		 push	 eax
  000d3	6a 00		 push	 0
  000d5	8d 8d b4 f7 ff
	ff		 lea	 ecx, DWORD PTR _Entry$[ebp]
  000db	51		 push	 ecx
  000dc	8b 55 08	 mov	 edx, DWORD PTR _pEntry$[ebp]
  000df	8b 02		 mov	 eax, DWORD PTR [edx]
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  000e4	ff 50 18	 call	 DWORD PTR [eax+24]
  000e7	33 c9		 xor	 ecx, ecx
  000e9	85 c0		 test	 eax, eax
  000eb	0f 9d c1	 setge	 cl
  000ee	89 8d cc f7 ff
	ff		 mov	 DWORD PTR _fSuccess$[ebp], ecx
$L52674:

; 346  :     }
; 347  : 
; 348  :     if(fSuccess)

  000f4	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  000fb	74 23		 je	 SHORT $L52676

; 349  :     {
; 350  :         fSuccess = SUCCEEDED(DataFile.Write(&Entry, sizeof(Entry)));

  000fd	6a 00		 push	 0
  000ff	6a 14		 push	 20			; 00000014H
  00101	8d 95 b4 f7 ff
	ff		 lea	 edx, DWORD PTR _Entry$[ebp]
  00107	52		 push	 edx
  00108	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _DataFile$[ebp]
  0010e	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  00113	33 c9		 xor	 ecx, ecx
  00115	85 c0		 test	 eax, eax
  00117	0f 9d c1	 setge	 cl
  0011a	89 8d cc f7 ff
	ff		 mov	 DWORD PTR _fSuccess$[ebp], ecx
$L52676:

; 351  :     }
; 352  :     
; 353  :     //
; 354  :     // Allocate the copy buffer
; 355  :     //
; 356  : 
; 357  :     if(fSuccess)

  00120	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00127	74 38		 je	 SHORT $L52678

; 358  :     {
; 359  :         fSuccess = MAKEBOOL(pvCopyBuffer = MEMALLOC(BYTE, dwCopyBufferSize));

  00129	6a 01		 push	 1
  0012b	68 00 00 04 00	 push	 262144			; 00040000H
  00130	68 44 53 64 61	 push	 1633964868		; 61645344H
  00135	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04EHOP@BYTE?$AA@ ; `string'
  0013a	68 67 01 00 00	 push	 359			; 00000167H
  0013f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00144	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc
  00149	89 85 dc f8 ff
	ff		 mov	 DWORD PTR _pvCopyBuffer$[ebp], eax
  0014f	33 d2		 xor	 edx, edx
  00151	83 bd dc f8 ff
	ff 00		 cmp	 DWORD PTR _pvCopyBuffer$[ebp], 0
  00158	0f 95 c2	 setne	 dl
  0015b	89 95 cc f7 ff
	ff		 mov	 DWORD PTR _fSuccess$[ebp], edx
$L52678:

; 360  :     }
; 361  : 
; 362  :     //
; 363  :     // Get wave data
; 364  :     //
; 365  : 
; 366  :     if(fSuccess)

  00161	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00168	74 36		 je	 SHORT $L52682

; 367  :     {
; 368  :         fSuccess = SUCCEEDED(pEntry->CommitWaveData(NULL, &DataFile, sizeof(Entry), &Entry, pvCopyBuffer, dwCopyBufferSize));

  0016a	68 00 00 04 00	 push	 262144			; 00040000H
  0016f	8b 85 dc f8 ff
	ff		 mov	 eax, DWORD PTR _pvCopyBuffer$[ebp]
  00175	50		 push	 eax
  00176	8d 8d b4 f7 ff
	ff		 lea	 ecx, DWORD PTR _Entry$[ebp]
  0017c	51		 push	 ecx
  0017d	6a 14		 push	 20			; 00000014H
  0017f	8d 95 f8 fb ff
	ff		 lea	 edx, DWORD PTR _DataFile$[ebp]
  00185	52		 push	 edx
  00186	6a 00		 push	 0
  00188	8b 45 08	 mov	 eax, DWORD PTR _pEntry$[ebp]
  0018b	8b 10		 mov	 edx, DWORD PTR [eax]
  0018d	8b 4d 08	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00190	ff 52 1c	 call	 DWORD PTR [edx+28]
  00193	33 c9		 xor	 ecx, ecx
  00195	85 c0		 test	 eax, eax
  00197	0f 9d c1	 setge	 cl
  0019a	89 8d cc f7 ff
	ff		 mov	 DWORD PTR _fSuccess$[ebp], ecx
$L52682:

; 369  :     }
; 370  : 
; 371  :     //
; 372  :     // Close the file so XBDM can read it
; 373  :     //
; 374  : 
; 375  :     if(fSuccess)

  001a0	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  001a7	74 0b		 je	 SHORT $L52684

; 376  :     {
; 377  :         DataFile.Close();

  001a9	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _DataFile$[ebp]
  001af	e8 00 00 00 00	 call	 ?Close@CStdFileStream@WaveLoader@@QAEXXZ ; WaveLoader::CStdFileStream::Close
$L52684:

; 378  :     }
; 379  : 
; 380  :     //
; 381  :     // Send the file to the Xbox
; 382  :     //
; 383  : 
; 384  :     if(fSuccess)

  001b4	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  001bb	74 2d		 je	 SHORT $L52685

; 385  :     {
; 386  :         _stprintf(szDstFile, pszDstPathTemplate, pEntry->m_pParent->m_szBankName);

  001bd	8b 55 08	 mov	 edx, DWORD PTR _pEntry$[ebp]
  001c0	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c3	83 c0 10	 add	 eax, 16			; 00000010H
  001c6	50		 push	 eax
  001c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszDstPathTemplate@?1??Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z@4QBDB
  001cd	51		 push	 ecx
  001ce	8d 95 e8 f9 ff
	ff		 lea	 edx, DWORD PTR _szDstFile$[ebp]
  001d4	52		 push	 edx
  001d5	e8 00 00 00 00	 call	 _sprintf
  001da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  : 
; 388  :         DmMkdir(szDstFile);

  001dd	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _szDstFile$[ebp]
  001e3	50		 push	 eax
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmMkdir@4
$L52685:

; 389  :     }
; 390  :     
; 391  :     if(fSuccess)

  001ea	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  001f1	0f 84 bb 00 00
	00		 je	 $L52686

; 392  :     {
; 393  :         _splitpath(pEntry->m_szFileName, NULL, NULL, szFileTitle, NULL);

  001f7	6a 00		 push	 0
  001f9	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR _szFileTitle$[ebp]
  001ff	51		 push	 ecx
  00200	6a 00		 push	 0
  00202	6a 00		 push	 0
  00204	8b 55 08	 mov	 edx, DWORD PTR _pEntry$[ebp]
  00207	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  0020d	52		 push	 edx
  0020e	e8 00 00 00 00	 call	 __splitpath
  00213	83 c4 14	 add	 esp, 20			; 00000014H

; 394  :         
; 395  :         _tcscat(szDstFile, TEXT("\\"));

  00216	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01PCFE@?2?$AA@ ; `string'
  0021b	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _szDstFile$[ebp]
  00221	50		 push	 eax
  00222	e8 00 00 00 00	 call	 _strcat
  00227	83 c4 08	 add	 esp, 8

; 396  :         _tcscat(szDstFile, szFileTitle);

  0022a	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR _szFileTitle$[ebp]
  00230	51		 push	 ecx
  00231	8d 95 e8 f9 ff
	ff		 lea	 edx, DWORD PTR _szDstFile$[ebp]
  00237	52		 push	 edx
  00238	e8 00 00 00 00	 call	 _strcat
  0023d	83 c4 08	 add	 esp, 8

; 397  :         
; 398  :         if(XBDM_NOERR != (nResult = DmSendFile(szSrcFile, szDstFile)))

  00240	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _szDstFile$[ebp]
  00246	50		 push	 eax
  00247	8d 8d e0 f8 ff
	ff		 lea	 ecx, DWORD PTR _szSrcFile$[ebp]
  0024d	51		 push	 ecx
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmSendFileA@8
  00254	89 85 c8 f7 ff
	ff		 mov	 DWORD PTR _nResult$[ebp], eax
  0025a	81 bd c8 f7 ff
	ff 00 00 db 02	 cmp	 DWORD PTR _nResult$[ebp], 47906816 ; 02db0000H
  00264	74 4c		 je	 SHORT $L52692

; 399  :         {
; 400  :             DPF_ERROR("DmSendFile(%s, %s) failed with %x", szSrcFile, szDstFile, nResult);

  00266	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  0026b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@BJPK@CRemoteAudition?3?3Play?$AA@ ; `string'
  00270	68 90 01 00 00	 push	 400			; 00000190H
  00275	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0027a	6a 01		 push	 1
  0027c	6a 09		 push	 9
  0027e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00283	83 c4 18	 add	 esp, 24			; 00000018H
  00286	8b 95 c8 f7 ff
	ff		 mov	 edx, DWORD PTR _nResult$[ebp]
  0028c	52		 push	 edx
  0028d	8d 85 e8 f9 ff
	ff		 lea	 eax, DWORD PTR _szDstFile$[ebp]
  00293	50		 push	 eax
  00294	8d 8d e0 f8 ff
	ff		 lea	 ecx, DWORD PTR _szSrcFile$[ebp]
  0029a	51		 push	 ecx
  0029b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CC@FALO@DmSendFile?$CI?$CFs?0?5?$CFs?$CJ?5failed?5with?5?$CF@ ; `string'
  002a0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002a5	83 c4 10	 add	 esp, 16			; 00000010H

; 401  :             fSuccess = FALSE;

  002a8	c7 85 cc f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _fSuccess$[ebp], 0
$L52692:
$L52686:

; 402  :         }
; 403  :     }
; 404  : 
; 405  :     //
; 406  :     // Tell the Xbox to play the file
; 407  :     //
; 408  : 
; 409  :     if(fSuccess)

  002b2	83 bd cc f7 ff
	ff 00		 cmp	 DWORD PTR _fSuccess$[ebp], 0
  002b9	0f 84 8e 00 00
	00		 je	 $L52695

; 410  :     {
; 411  :         sprintf(szCommand, pszCommandTemplate, szDstFile);

  002bf	8d 95 e8 f9 ff
	ff		 lea	 edx, DWORD PTR _szDstFile$[ebp]
  002c5	52		 push	 edx
  002c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszCommandTemplate@?1??Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z@4QBDB
  002cb	50		 push	 eax
  002cc	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _szCommand$[ebp]
  002d2	51		 push	 ecx
  002d3	e8 00 00 00 00	 call	 _sprintf
  002d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 412  :         
; 413  :         if(XBDM_NOERR != (nResult = DmSendCommand(m_pxbdm, szCommand, NULL, NULL)))

  002db	6a 00		 push	 0
  002dd	6a 00		 push	 0
  002df	8d 95 00 fc ff
	ff		 lea	 edx, DWORD PTR _szCommand$[ebp]
  002e5	52		 push	 edx
  002e6	8b 85 a8 f7 ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002ec	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002ef	51		 push	 ecx
  002f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmSendCommand@16
  002f6	89 85 c8 f7 ff
	ff		 mov	 DWORD PTR _nResult$[ebp], eax
  002fc	81 bd c8 f7 ff
	ff 00 00 db 02	 cmp	 DWORD PTR _nResult$[ebp], 47906816 ; 02db0000H
  00306	74 45		 je	 SHORT $L52700

; 414  :         {
; 415  :             DPF_ERROR("DmSendCommand(%s) failed with %x", szCommand, nResult);

  00308	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  0030d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@BJPK@CRemoteAudition?3?3Play?$AA@ ; `string'
  00312	68 9f 01 00 00	 push	 415			; 0000019fH
  00317	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0031c	6a 01		 push	 1
  0031e	6a 09		 push	 9
  00320	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00325	83 c4 18	 add	 esp, 24			; 00000018H
  00328	8b 95 c8 f7 ff
	ff		 mov	 edx, DWORD PTR _nResult$[ebp]
  0032e	52		 push	 edx
  0032f	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _szCommand$[ebp]
  00335	50		 push	 eax
  00336	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@IELM@DmSendCommand?$CI?$CFs?$CJ?5failed?5with?5?$CFx@ ; `string'
  0033b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00340	83 c4 0c	 add	 esp, 12			; 0000000cH

; 416  :             fSuccess = FALSE;

  00343	c7 85 cc f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _fSuccess$[ebp], 0
$L52700:
$L52695:

; 417  :         }
; 418  :     }
; 419  : 
; 420  :     //
; 421  :     // Clean up
; 422  :     //
; 423  : 
; 424  :     DeleteFile(szSrcFile);

  0034d	8d 8d e0 f8 ff
	ff		 lea	 ecx, DWORD PTR _szSrcFile$[ebp]
  00353	51		 push	 ecx
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4

; 425  :     
; 426  :     MEMFREE(pvCopyBuffer);

  0035a	83 bd dc f8 ff
	ff 00		 cmp	 DWORD PTR _pvCopyBuffer$[ebp], 0
  00361	74 16		 je	 SHORT $L52701
  00363	8b 95 dc f8 ff
	ff		 mov	 edx, DWORD PTR _pvCopyBuffer$[ebp]
  00369	52		 push	 edx
  0036a	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  0036f	c7 85 dc f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _pvCopyBuffer$[ebp], 0
$L52701:

; 427  : 
; 428  :     return fSuccess;

  00379	8b 85 cc f7 ff
	ff		 mov	 eax, DWORD PTR _fSuccess$[ebp]
  0037f	89 85 ac f7 ff
	ff		 mov	 DWORD PTR $T52905[ebp], eax
  00385	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _DataFile$[ebp]
  0038b	e8 00 00 00 00	 call	 ??1CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::~CStdFileStream
  00390	8b 85 ac f7 ff
	ff		 mov	 eax, DWORD PTR $T52905[ebp]
$L52650:

; 429  : }

  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 04 00	 ret	 4
?Play@CRemoteAudition@@UAEHPAVCWaveBankEntry@@@Z ENDP	; CRemoteAudition::Play
_TEXT	ENDS
PUBLIC	??_C@_0BG@OPDH@XAUD?$CBWaveBank?4StopAll?$AA@	; `string'
;	COMDAT ??_C@_0BG@OPDH@XAUD?$CBWaveBank?4StopAll?$AA@
CONST	SEGMENT
??_C@_0BG@OPDH@XAUD?$CBWaveBank?4StopAll?$AA@ DB 'XAUD!WaveBank.StopAll', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?StopAll@CRemoteAudition@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?StopAll@CRemoteAudition@@UAEXXZ PROC NEAR		; CRemoteAudition::StopAll, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  :     DmSendCommand(m_pxbdm, "XAUD!WaveBank.StopAll", NULL, NULL);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@OPDH@XAUD?$CBWaveBank?4StopAll?$AA@ ; `string'
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DmSendCommand@16

; 457  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?StopAll@CRemoteAudition@@UAEXXZ ENDP			; CRemoteAudition::StopAll
_TEXT	ENDS
PUBLIC	?IsWindow@CWindow@@UAEHXZ			; CWindow::IsWindow
PUBLIC	?SendMessageA@CWindow@@UAEJIIJ@Z		; CWindow::SendMessageA
PUBLIC	?PostMessageA@CWindow@@UAEJIIJ@Z		; CWindow::PostMessageA
PUBLIC	?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z	; CWindow::SendDlgItemMessageA
PUBLIC	?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z		; CWindow::GetDlgItem
PUBLIC	?SetWindowTextA@CWindow@@UAEHPBD@Z		; CWindow::SetWindowTextA
PUBLIC	?SetDlgItemTextA@CWindow@@UAEHHPBD@Z		; CWindow::SetDlgItemTextA
PUBLIC	?SetDlgItemInt@CWindow@@UAEHHIH@Z		; CWindow::SetDlgItemInt
PUBLIC	?GetDlgItemTextA@CWindow@@UAEHHPADH@Z		; CWindow::GetDlgItemTextA
PUBLIC	?GetDlgItemInt@CWindow@@UAEIHPAHH@Z		; CWindow::GetDlgItemInt
PUBLIC	?MoveWindow@CWindow@@UAEHHHHHH@Z		; CWindow::MoveWindow
PUBLIC	?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z	; CWindow::MoveWindow
PUBLIC	?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetWindowRect
PUBLIC	?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetClientRect
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z	; CWindow::ScreenToClient
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::ScreenToClient
PUBLIC	?DragAcceptFiles@CWindow@@UAEXH@Z		; CWindow::DragAcceptFiles
PUBLIC	??BCWindow@@UAEPAUHWND__@@XZ			; CWindow::operator HWND__ *
PUBLIC	?OnDestroy@CWindow@@UAEHPAJ@Z			; CWindow::OnDestroy
PUBLIC	?OnSize@CWindow@@UAEHIIIPAJ@Z			; CWindow::OnSize
PUBLIC	?OnSysCommand@CWindow@@UAEHIPAJ@Z		; CWindow::OnSysCommand
PUBLIC	?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z	; CWindow::OnNotify
PUBLIC	?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z	; CWindow::OnEraseBackground
PUBLIC	?OnPaint@CWindow@@UAEHPAJ@Z			; CWindow::OnPaint
PUBLIC	?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z	; CWindow::OnContextMenu
PUBLIC	?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z	; CWindow::OnDropFiles
PUBLIC	?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z	; CWindow::OnScroll
PUBLIC	?AddRef@CDialog@@UAGKXZ				; CDialog::AddRef
PUBLIC	?Release@CDialog@@UAGKXZ			; CDialog::Release
PUBLIC	?DefWindowProcA@CDialog@@UAEJPAUHWND__@@IIJ@Z	; CDialog::DefWindowProcA
PUBLIC	?OnCreate@CXboxConnectionDialog@@MAEHPAXPAJ@Z	; CXboxConnectionDialog::OnCreate
PUBLIC	?OnCmdOK@CXboxConnectionDialog@@MAEXXZ		; CXboxConnectionDialog::OnCmdOK
PUBLIC	??_7CXboxConnectionDialog@@6B@			; CXboxConnectionDialog::`vftable'
PUBLIC	??_GCXboxConnectionDialog@@UAEPAXI@Z		; CXboxConnectionDialog::`scalar deleting destructor'
PUBLIC	??_ECXboxConnectionDialog@@UAEPAXI@Z		; CXboxConnectionDialog::`vector deleting destructor'
EXTRN	?Destroy@CWindow@@UAEXXZ:NEAR			; CWindow::Destroy
EXTRN	?SetRedraw@CWindow@@UAEHH@Z:NEAR		; CWindow::SetRedraw
EXTRN	?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z:NEAR ; CWindow::DispatchMessageA
EXTRN	?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z:NEAR	; CWindow::OnScroll
EXTRN	?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z:NEAR	; CWindow::Create
EXTRN	??0CDialog@@QAE@I@Z:NEAR			; CDialog::CDialog
EXTRN	?Create@CDialog@@UAEHPAVCWindow@@PAX@Z:NEAR	; CDialog::Create
EXTRN	?HandleMessage@CDialog@@UAEHIIJPAJ@Z:NEAR	; CDialog::HandleMessage
EXTRN	?OnCommand@CDialog@@UAEHIIPAUHWND__@@PAJ@Z:NEAR	; CDialog::OnCommand
EXTRN	?OnClose@CDialog@@UAEHPAJ@Z:NEAR		; CDialog::OnClose
EXTRN	?OnCmdCancel@CDialog@@UAEXXZ:NEAR		; CDialog::OnCmdCancel
;	COMDAT ??_7CXboxConnectionDialog@@6B@
CONST	SEGMENT
??_7CXboxConnectionDialog@@6B@ DD FLAT:??_ECXboxConnectionDialog@@UAEPAXI@Z ; CXboxConnectionDialog::`vftable'
	DD	FLAT:?AddRef@CDialog@@UAGKXZ
	DD	FLAT:?Release@CDialog@@UAGKXZ
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CXboxConnectionDialog@@MAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CDialog@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnSize@CWindow@@UAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CDialog@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CDialog@@UAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CDialog@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
	DD	FLAT:?Create@CDialog@@UAEHPAVCWindow@@PAX@Z
	DD	FLAT:?DoModal@CDialog@@UAEHPAVCWindow@@PAX@Z
	DD	FLAT:?OnCmdOK@CXboxConnectionDialog@@MAEXXZ
	DD	FLAT:?OnCmdCancel@CDialog@@UAEXXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CXboxConnectionDialog@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CXboxConnectionDialog@@QAE@XZ PROC NEAR		; CXboxConnectionDialog::CXboxConnectionDialog, COMDAT
; _this$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 73		 push	 115			; 00000073H
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CDialog@@QAE@I@Z	; CDialog::CDialog
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CXboxConnectionDialog@@6B@ ; CXboxConnectionDialog::`vftable'

; 484  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CXboxConnectionDialog@@QAE@XZ ENDP			; CXboxConnectionDialog::CXboxConnectionDialog
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDestroy@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnDestroy, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 252  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnDestroy@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnDestroy
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSize@CWindow@@UAEHIIIPAJ@Z PROC NEAR			; CWindow::OnSize, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 257  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnSize@CWindow@@UAEHIIIPAJ@Z ENDP			; CWindow::OnSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSysCommand@CWindow@@UAEHIPAJ@Z PROC NEAR		; CWindow::OnSysCommand, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 266  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 267  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnSysCommand@CWindow@@UAEHIPAJ@Z ENDP			; CWindow::OnSysCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z PROC NEAR	; CWindow::OnNotify, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 272  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z ENDP		; CWindow::OnNotify
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z PROC NEAR ; CWindow::OnEraseBackground, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 277  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z ENDP	; CWindow::OnEraseBackground
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnPaint@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnPaint, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 282  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnPaint@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnPaint
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z PROC NEAR	; CWindow::OnScroll, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 287  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z ENDP		; CWindow::OnScroll
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z PROC NEAR ; CWindow::OnContextMenu, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 292  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z ENDP	; CWindow::OnContextMenu
_TEXT	ENDS
PUBLIC	??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_04BEIE@this?$AA@				; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\base\wndwrap.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT
??_C@_04BEIE@this?$AA@ DB 'this', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCWindow@@UAEPAUHWND__@@XZ PROC NEAR			; CWindow::operator HWND__ *, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 301  :     ASSERT(this);

  00007	68 2d 01 00 00	 push	 301			; 0000012dH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04BEIE@this?$AA@ ; `string'
  00016	33 c0		 xor	 eax, eax
  00018	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 302  :     return m_hWnd;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 303  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??BCWindow@@UAEPAUHWND__@@XZ ENDP			; CWindow::operator HWND__ *
_TEXT	ENDS
PUBLIC	??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@	; `string'
EXTRN	__imp__IsWindow@4:NEAR
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ DB '::IsWindow(m_hWnd)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsWindow@CWindow@@UAEHXZ PROC NEAR			; CWindow::IsWindow, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  :     if(!m_hWnd)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0000e	75 04		 jne	 SHORT $L49126

; 308  :     {
; 309  :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 2f		 jmp	 SHORT $L49125
$L49126:

; 310  :     }
; 311  : 
; 312  :     ASSERT(::IsWindow(m_hWnd));

  00014	68 38 01 00 00	 push	 312			; 00000138H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ ; `string'
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	40		 inc	 eax
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 313  : 
; 314  :     return TRUE;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$L49125:

; 315  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?IsWindow@CWindow@@UAEHXZ ENDP				; CWindow::IsWindow
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?SendMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::SendMessageA, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     return ::SendMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 320  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::SendMessageA
_TEXT	ENDS
EXTRN	__imp__PostMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?PostMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::PostMessageA, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  :     return ::PostMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 325  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?PostMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::PostMessageA
_TEXT	ENDS
EXTRN	__imp__SetWindowTextA@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT
_pszText$ = 8
_this$ = -4
?SetWindowTextA@CWindow@@UAEHPBD@Z PROC NEAR		; CWindow::SetWindowTextA, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  :     return ::SetWindowText(m_hWnd, pszText);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 330  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetWindowTextA@CWindow@@UAEHPBD@Z ENDP			; CWindow::SetWindowTextA
_TEXT	ENDS
EXTRN	__imp__MoveWindow@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_nWidth$ = 16
_nHeight$ = 20
_fRepaint$ = 24
_this$ = -4
?MoveWindow@CWindow@@UAEHHHHHH@Z PROC NEAR		; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :     return ::MoveWindow(m_hWnd, x, y, nWidth, nHeight, fRepaint);

  00007	8b 45 18	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 335  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?MoveWindow@CWindow@@UAEHHHHHH@Z ENDP			; CWindow::MoveWindow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_fRepaint$ = 12
_this$ = -4
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z PROC NEAR	; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  :     return ::MoveWindow(m_hWnd, prcWindow->left, prcWindow->top, prcWindow->right - prcWindow->left, prcWindow->bottom - prcWindow->top, fRepaint);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 340  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z ENDP		; CWindow::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_this$ = -4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetWindowRect, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :     return ::GetWindowRect(m_hWnd, prcWindow);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 345  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetWindowRect
_TEXT	ENDS
EXTRN	__imp__GetClientRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcClient$ = 8
_this$ = -4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetClientRect, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 349  :     return ::GetClientRect(m_hWnd, prcClient);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcClient$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 350  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetClientRect
_TEXT	ENDS
EXTRN	__imp__ScreenToClient@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_ppt$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  :     return ::ScreenToClient(m_hWnd, ppt);

  00007	8b 45 08	 mov	 eax, DWORD PTR _ppt$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 355  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z ENDP	; CWindow::ScreenToClient
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prc$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  :     if(!::ScreenToClient(m_hWnd, (LPPOINT)&prc->left))

  00007	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
  00018	85 c0		 test	 eax, eax
  0001a	75 04		 jne	 SHORT $L49174

; 360  :     {
; 361  :         return FALSE;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 14		 jmp	 SHORT $L49172
$L49174:

; 362  :     }
; 363  : 
; 364  :     return ::ScreenToClient(m_hWnd, (LPPOINT)&prc->right);

  00020	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  00023	83 c0 08	 add	 eax, 8
  00026	50		 push	 eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002d	52		 push	 edx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
$L49172:

; 365  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z ENDP	; CWindow::ScreenToClient
_TEXT	ENDS
EXTRN	__imp__SendDlgItemMessageA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT
_nItemId$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z PROC NEAR	; CWindow::SendDlgItemMessageA, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 369  :     return ::SendDlgItemMessage(m_hWnd, nItemId, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 370  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z ENDP		; CWindow::SendDlgItemMessageA
_TEXT	ENDS
EXTRN	__imp__GetDlgItem@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT
_nItemId$ = 8
_this$ = -4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z PROC NEAR	; CWindow::GetDlgItem, COMDAT
; _this$ = ecx

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :     return ::GetDlgItem(m_hWnd, nItemId);

  00007	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 375  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z ENDP		; CWindow::GetDlgItem
_TEXT	ENDS
EXTRN	__imp__SetDlgItemTextA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_this$ = -4
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z PROC NEAR		; CWindow::SetDlgItemTextA, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  :     return ::SetDlgItemText(m_hWnd, nItemId, pszString);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nItemId$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 380  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z ENDP		; CWindow::SetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__SetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_nValue$ = 12
_fSigned$ = 16
_this$ = -4
?SetDlgItemInt@CWindow@@UAEHHIH@Z PROC NEAR		; CWindow::SetDlgItemInt, COMDAT
; _this$ = ecx

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 384  :     return ::SetDlgItemInt(m_hWnd, nItemId, nValue, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nValue$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemInt@16

; 385  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetDlgItemInt@CWindow@@UAEHHIH@Z ENDP			; CWindow::SetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__GetDlgItemTextA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_nLength$ = 16
_this$ = -4
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z PROC NEAR		; CWindow::GetDlgItemTextA, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :     return ::GetDlgItemText(m_hWnd, nItemId, pszString, nLength);

  00007	8b 45 10	 mov	 eax, DWORD PTR _nLength$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 390  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z ENDP		; CWindow::GetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__GetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pfTranslated$ = 12
_fSigned$ = 16
_this$ = -4
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z PROC NEAR		; CWindow::GetDlgItemInt, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :     return ::GetDlgItemInt(m_hWnd, nItemId, pfTranslated, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pfTranslated$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemInt@16

; 395  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z ENDP		; CWindow::GetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__DragAcceptFiles@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT
_fAccept$ = 8
_this$ = -4
?DragAcceptFiles@CWindow@@UAEXH@Z PROC NEAR		; CWindow::DragAcceptFiles, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 399  :     ::DragAcceptFiles(m_hWnd, fAccept);

  00007	8b 45 08	 mov	 eax, DWORD PTR _fAccept$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 400  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?DragAcceptFiles@CWindow@@UAEXH@Z ENDP			; CWindow::DragAcceptFiles
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z PROC NEAR	; CWindow::OnDropFiles, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 404  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 405  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z ENDP	; CWindow::OnDropFiles
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\dlgwrap.h
_TEXT	ENDS
;	COMDAT ?AddRef@CDialog@@UAGKXZ
_TEXT	SEGMENT
?AddRef@CDialog@@UAGKXZ PROC NEAR			; CDialog::AddRef, COMDAT

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :     return 1;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 70   : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?AddRef@CDialog@@UAGKXZ ENDP				; CDialog::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CDialog@@UAGKXZ
_TEXT	SEGMENT
?Release@CDialog@@UAGKXZ PROC NEAR			; CDialog::Release, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   :     return 1;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 75   : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?Release@CDialog@@UAGKXZ ENDP				; CDialog::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CDialog@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_this$ = -4
?DefWindowProcA@CDialog@@UAEJPAUHWND__@@IIJ@Z PROC NEAR	; CDialog::DefWindowProcA, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 79   :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 80   : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?DefWindowProcA@CDialog@@UAEJPAUHWND__@@IIJ@Z ENDP	; CDialog::DefWindowProcA
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_GCXboxConnectionDialog@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCXboxConnectionDialog@@UAEPAXI@Z PROC NEAR		; CXboxConnectionDialog::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CXboxConnectionDialog@@UAE@XZ ; CXboxConnectionDialog::~CXboxConnectionDialog
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L52715
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L52715:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCXboxConnectionDialog@@UAEPAXI@Z ENDP		; CXboxConnectionDialog::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CDialog@@UAE@XZ:NEAR				; CDialog::~CDialog
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\main\audition.cpp
;	COMDAT ??1CXboxConnectionDialog@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CXboxConnectionDialog@@UAE@XZ PROC NEAR		; CXboxConnectionDialog::~CXboxConnectionDialog, COMDAT
; _this$ = ecx

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CXboxConnectionDialog@@6B@ ; CXboxConnectionDialog::`vftable'

; 510  : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CDialog@@UAE@XZ	; CDialog::~CDialog
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CXboxConnectionDialog@@UAE@XZ ENDP			; CXboxConnectionDialog::~CXboxConnectionDialog
_TEXT	ENDS
PUBLIC	?OnCreate@CWindow@@UAEHPAXPAJ@Z			; CWindow::OnCreate
PUBLIC	??_C@_09PHNP@pvContext?$AA@			; `string'
EXTRN	_strlen:NEAR
;	COMDAT ??_C@_09PHNP@pvContext?$AA@
CONST	SEGMENT
??_C@_09PHNP@pvContext?$AA@ DB 'pvContext', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?OnCreate@CXboxConnectionDialog@@MAEHPAXPAJ@Z
_TEXT	SEGMENT
_pvContext$ = 8
_plResult$ = 12
_this$ = -8
_pszAddressList$ = -4
?OnCreate@CXboxConnectionDialog@@MAEHPAXPAJ@Z PROC NEAR	; CXboxConnectionDialog::OnCreate, COMDAT
; _this$ = ecx

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 539  :     LPTSTR                  pszAddressList;
; 540  :     
; 541  :     if(CDialog::OnCreate(pvContext, plResult))

  00009	8b 45 0c	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pvContext$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?OnCreate@CWindow@@UAEHPAXPAJ@Z ; CWindow::OnCreate
  00019	85 c0		 test	 eax, eax
  0001b	74 0a		 je	 SHORT $L52726

; 542  :     {
; 543  :         return TRUE;

  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	e9 98 00 00 00	 jmp	 $L52724
$L52726:

; 544  :     }
; 545  : 
; 546  :     //
; 547  :     // Save connection data
; 548  :     //
; 549  : 
; 550  :     ASSERT(pvContext);

  00027	68 26 02 00 00	 push	 550			; 00000226H
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@KJDF@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09PHNP@pvContext?$AA@ ; `string'
  00036	33 d2		 xor	 edx, edx
  00038	83 7d 08 00	 cmp	 DWORD PTR _pvContext$[ebp], 0
  0003c	0f 94 c2	 sete	 dl
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00045	83 c4 10	 add	 esp, 16			; 00000010H

; 551  :     m_pData = (LPXBOXCONNECTDATA)pvContext;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _pvContext$[ebp]
  0004e	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 552  : 
; 553  :     //
; 554  :     // Add addresses from the address list
; 555  :     //
; 556  : 
; 557  :     if(m_pData->pszAddressList)

  00051	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00054	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00057	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005a	74 48		 je	 SHORT $L52729

; 558  :     {
; 559  :         pszAddressList = m_pData->pszAddressList;

  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	89 45 fc	 mov	 DWORD PTR _pszAddressList$[ebp], eax
$L52731:

; 560  : 
; 561  :         while(*pszAddressList)

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _pszAddressList$[ebp]
  0006a	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0006d	85 d2		 test	 edx, edx
  0006f	74 33		 je	 SHORT $L52732

; 562  :         {
; 563  :             SendDlgItemMessage(IDC_ADDRESS_LIST, CB_ADDSTRING, 0, (LPARAM)pszAddressList);

  00071	8b 45 fc	 mov	 eax, DWORD PTR _pszAddressList$[ebp]
  00074	50		 push	 eax
  00075	6a 00		 push	 0
  00077	68 43 01 00 00	 push	 323			; 00000143H
  0007c	68 f0 03 00 00	 push	 1008			; 000003f0H
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	ff 52 20	 call	 DWORD PTR [edx+32]

; 564  : 
; 565  :             pszAddressList += _tcslen(pszAddressList) + 1;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _pszAddressList$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _strlen
  00095	83 c4 04	 add	 esp, 4
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _pszAddressList$[ebp]
  0009b	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0009f	89 55 fc	 mov	 DWORD PTR _pszAddressList$[ebp], edx

; 566  :         }

  000a2	eb c3		 jmp	 SHORT $L52731
$L52732:
$L52729:

; 567  :     }
; 568  : 
; 569  :     //
; 570  :     // Set the default list item
; 571  :     //
; 572  : 
; 573  :     SendDlgItemMessage(IDC_ADDRESS_LIST, CB_SETCURSEL, 0);

  000a4	6a 00		 push	 0
  000a6	6a 00		 push	 0
  000a8	68 4e 01 00 00	 push	 334			; 0000014eH
  000ad	68 f0 03 00 00	 push	 1008			; 000003f0H
  000b2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 10		 mov	 edx, DWORD PTR [eax]
  000b7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	ff 52 20	 call	 DWORD PTR [edx+32]

; 574  : 
; 575  :     return FALSE;

  000bd	33 c0		 xor	 eax, eax
$L52724:

; 576  : }

  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
?OnCreate@CXboxConnectionDialog@@MAEHPAXPAJ@Z ENDP	; CXboxConnectionDialog::OnCreate
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCreate@CWindow@@UAEHPAXPAJ@Z PROC NEAR		; CWindow::OnCreate, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 242  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnCreate@CWindow@@UAEHPAXPAJ@Z ENDP			; CWindow::OnCreate
_TEXT	ENDS
EXTRN	?OnCmdOK@CDialog@@UAEXXZ:NEAR			; CDialog::OnCmdOK
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\main\audition.cpp
;	COMDAT ?OnCmdOK@CXboxConnectionDialog@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnCmdOK@CXboxConnectionDialog@@MAEXXZ PROC NEAR	; CXboxConnectionDialog::OnCmdOK, COMDAT
; _this$ = ecx

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 603  :     //
; 604  :     // Get the address
; 605  :     //
; 606  : 
; 607  :     GetDlgItemText(IDC_ADDRESS_LIST, m_pData->szAddress, NUMELMS(m_pData->szAddress));

  00007	68 00 01 00 00	 push	 256			; 00000100H
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00012	83 c1 04	 add	 ecx, 4
  00015	51		 push	 ecx
  00016	68 f0 03 00 00	 push	 1008			; 000003f0H
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	ff 50 34	 call	 DWORD PTR [eax+52]

; 608  : 
; 609  :     //
; 610  :     // Hand off to the base class
; 611  :     //
; 612  : 
; 613  :     CDialog::OnCmdOK();

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?OnCmdOK@CDialog@@UAEXXZ ; CDialog::OnCmdOK

; 614  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?OnCmdOK@CXboxConnectionDialog@@MAEXXZ ENDP		; CXboxConnectionDialog::OnCmdOK
_TEXT	ENDS
END
