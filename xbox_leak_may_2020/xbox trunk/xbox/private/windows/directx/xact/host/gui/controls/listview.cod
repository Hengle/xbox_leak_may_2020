; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EC@CLP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@GHLG@hdc?5?$DN?$DN?5m_hdc?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@ODF@XACT?3GUI?3ListView?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@NFAI@SysListView32?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@NLPC@m_hLargeImageList?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@IBKI@m_hSmallImageList?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PFHL@pszText?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@POGL@hLargeIcon?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MOJE@hSmallIcon?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@OABB@nLargeImageIndex?5?$DN?$DN?5nSmallImageI@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CP@HDMB@CListViewType?$CIthis?0?5pszText?0?5nLa@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@IJLG@nColumnIndex?5?$DM?5m_nColumnCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EA@PDIO@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_DECEND@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EA@HPBA@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_ASCEND@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05DLIH@pList?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMDN@CListViewItem?3?3Create?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCMH@Type?5not?5registered?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreObject@CTempSelectObject@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetResolution@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CListViewCtrl@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CListViewCtrl@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSelectedCount@CListView@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetText@CListViewItem@@UAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EditLabel@CListViewItem@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtrFromListIndex@CListView@@UAEPAVCListViewItem@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnEndLabelEdit@CListViewItem@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnStateChanged@CListViewItem@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDoubleClick@CListViewItem@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CListViewCtrl@@UAEHPAVCListView@@KKHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListView@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListView@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListViewCtrl@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CListViewCtrl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListViewCtrl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CListView@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CListView@@UAEHPAVCWindow@@KKKHHHHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HandleMessage@CListView@@UAEHIIJPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CListView@@UAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDestroy@CListView@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDeleteItem@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CListView@@UAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnNotify@CListView@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnColumnClick@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnEndLabelEdit@CListView@@UAEHPAUtagLVDISPINFO@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnItemChanged@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDoubleClick@CListView@@UAEXPAUtagNMHDR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterType@CListView@@UAEHPBDPAUHICON__@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertColumn@CListView@@UAEHPBDW4LVCTYPE@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertColumns@CListView@@UAEHPBULVCOLUMNDATA@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Sort@CListView@@UAEXIK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSortCallback@CListView@@CGHJJJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NumericSortCallback@CListView@@CGHJJJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResizeColumn@CListView@@UAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResizeColumns@CListView@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindRegisteredType@CListView@@UAEPAVCListViewType@@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FixItemIndices@CListView@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListView@@UAEPAVCListViewItem@@PAV2@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SelectAll@CListView@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListViewType@@QAE@PAVCListView@@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListViewType@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CListViewType@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CListViewItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCListViewItem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CListViewItem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CListViewItem@@UAEHPAVCListView@@PBD1PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@CListViewItem@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetColumnText@CListViewItem@@UAEXHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetColumnValue@CListViewItem@@UAEXHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PtrFromListIndex@CListViewItem@@SGPAV1@PAVCListView@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetListIndex@CListViewItem@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDelete@CListViewItem@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSelection@CListViewItem@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CListView@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CListViewCtrl@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CListViewItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CListViewType@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?m_pszClassName@CListView@@2QBDB		; CListView::m_pszClassName
PUBLIC	??_C@_0BC@ODF@XACT?3GUI?3ListView?$AA@		; `string'
;	COMDAT ??_C@_0BC@ODF@XACT?3GUI?3ListView?$AA@
CONST	SEGMENT
??_C@_0BC@ODF@XACT?3GUI?3ListView?$AA@ DB 'XACT:GUI:ListView', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
?m_pszClassName@CListView@@2QBDB DD FLAT:??_C@_0BC@ODF@XACT?3GUI?3ListView?$AA@ ; CListView::m_pszClassName
?dwExStyle@?1??OnCreate@CListView@@UAEHPAXPAJ@Z@4KB DD 00H ; `CListView::OnCreate'::`2'::dwExStyle
?dwStyle@?1??OnCreate@CListView@@UAEHPAXPAJ@Z@4KB DD 050000040H ; `CListView::OnCreate'::`2'::dwStyle
CONST	ENDS
PUBLIC	?Create@CListViewCtrl@@UAEHPAVCListView@@KKHHHH@Z ; CListViewCtrl::Create
PUBLIC	??_C@_0O@NFAI@SysListView32?$AA@		; `string'
EXTRN	?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z:NEAR	; CWindow::Create
;	COMDAT ??_C@_0O@NFAI@SysListView32?$AA@
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
CONST	SEGMENT
??_C@_0O@NFAI@SysListView32?$AA@ DB 'SysListView32', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Create@CListViewCtrl@@UAEHPAVCListView@@KKHHHH@Z
_TEXT	SEGMENT
_pParent$ = 8
_dwExStyle$ = 12
_dwStyle$ = 16
_x$ = 20
_y$ = 24
_nWidth$ = 28
_nHeight$ = 32
_this$ = -4
?Create@CListViewCtrl@@UAEHPAVCListView@@KKHHHH@Z PROC NEAR ; CListViewCtrl::Create, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   :     return CWindow::Create(pParent, WC_LISTVIEW, NULL, dwExStyle, dwStyle, x, y, nWidth, nHeight);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 45 20	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 1c	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 18	 mov	 edx, DWORD PTR _y$[ebp]
  00016	52		 push	 edx
  00017	8b 45 14	 mov	 eax, DWORD PTR _x$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 0c	 mov	 edx, DWORD PTR _dwExStyle$[ebp]
  00022	52		 push	 edx
  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@NFAI@SysListView32?$AA@ ; `string'
  0002a	8b 45 08	 mov	 eax, DWORD PTR _pParent$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z ; CWindow::Create

; 62   : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 1c 00	 ret	 28			; 0000001cH
?Create@CListViewCtrl@@UAEHPAVCListView@@KKHHHH@Z ENDP	; CListViewCtrl::Create
_TEXT	ENDS
PUBLIC	?IsWindow@CWindow@@UAEHXZ			; CWindow::IsWindow
PUBLIC	?SendMessageA@CWindow@@UAEJIIJ@Z		; CWindow::SendMessageA
PUBLIC	?PostMessageA@CWindow@@UAEJIIJ@Z		; CWindow::PostMessageA
PUBLIC	?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z	; CWindow::SendDlgItemMessageA
PUBLIC	?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z		; CWindow::GetDlgItem
PUBLIC	?SetWindowTextA@CWindow@@UAEHPBD@Z		; CWindow::SetWindowTextA
PUBLIC	?SetDlgItemTextA@CWindow@@UAEHHPBD@Z		; CWindow::SetDlgItemTextA
PUBLIC	?SetDlgItemInt@CWindow@@UAEHHIH@Z		; CWindow::SetDlgItemInt
PUBLIC	?GetDlgItemTextA@CWindow@@UAEHHPADH@Z		; CWindow::GetDlgItemTextA
PUBLIC	?GetDlgItemInt@CWindow@@UAEIHPAHH@Z		; CWindow::GetDlgItemInt
PUBLIC	?MoveWindow@CWindow@@UAEHHHHHH@Z		; CWindow::MoveWindow
PUBLIC	?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z	; CWindow::MoveWindow
PUBLIC	?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetWindowRect
PUBLIC	?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetClientRect
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z	; CWindow::ScreenToClient
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::ScreenToClient
PUBLIC	?DragAcceptFiles@CWindow@@UAEXH@Z		; CWindow::DragAcceptFiles
PUBLIC	??BCWindow@@UAEPAUHWND__@@XZ			; CWindow::operator HWND__ *
PUBLIC	?OnClose@CWindow@@UAEHPAJ@Z			; CWindow::OnClose
PUBLIC	?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z	; CWindow::OnCommand
PUBLIC	?OnSysCommand@CWindow@@UAEHIPAJ@Z		; CWindow::OnSysCommand
PUBLIC	?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z	; CWindow::OnEraseBackground
PUBLIC	?OnPaint@CWindow@@UAEHPAJ@Z			; CWindow::OnPaint
PUBLIC	?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z	; CWindow::OnContextMenu
PUBLIC	?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z	; CWindow::OnDropFiles
PUBLIC	?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z	; CWindow::OnScroll
PUBLIC	?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z	; CWindow::DefWindowProcA
PUBLIC	??0CListViewCtrl@@QAE@XZ			; CListViewCtrl::CListViewCtrl
PUBLIC	??0CListView@@QAE@XZ				; CListView::CListView
PUBLIC	?Create@CListView@@UAEHPAVCWindow@@KKKHHHHI@Z	; CListView::Create
PUBLIC	?InsertColumn@CListView@@UAEHPBDW4LVCTYPE@@H@Z	; CListView::InsertColumn
PUBLIC	?InsertColumns@CListView@@UAEHPBULVCOLUMNDATA@@I@Z ; CListView::InsertColumns
PUBLIC	?ResizeColumn@CListView@@UAEXI@Z		; CListView::ResizeColumn
PUBLIC	?ResizeColumns@CListView@@UAEXXZ		; CListView::ResizeColumns
PUBLIC	?GetSelectedCount@CListView@@UAEHXZ		; CListView::GetSelectedCount
PUBLIC	?GetNextItem@CListView@@UAEPAVCListViewItem@@PAV2@K@Z ; CListView::GetNextItem
PUBLIC	?PtrFromListIndex@CListView@@UAEPAVCListViewItem@@H@Z ; CListView::PtrFromListIndex
PUBLIC	?SelectAll@CListView@@UAEXH@Z			; CListView::SelectAll
PUBLIC	?Sort@CListView@@UAEXIK@Z			; CListView::Sort
PUBLIC	?RegisterType@CListView@@UAEHPBDPAUHICON__@@1@Z	; CListView::RegisterType
PUBLIC	?FindRegisteredType@CListView@@UAEPAVCListViewType@@PBD@Z ; CListView::FindRegisteredType
PUBLIC	?HandleMessage@CListView@@UAEHIIJPAJ@Z		; CListView::HandleMessage
PUBLIC	?OnCreate@CListView@@UAEHPAXPAJ@Z		; CListView::OnCreate
PUBLIC	?OnDestroy@CListView@@UAEHPAJ@Z			; CListView::OnDestroy
PUBLIC	?OnSize@CListView@@UAEHIIIPAJ@Z			; CListView::OnSize
PUBLIC	?OnNotify@CListView@@UAEHPAUtagNMHDR@@PAJ@Z	; CListView::OnNotify
PUBLIC	?OnColumnClick@CListView@@UAEXPAUtagNMLISTVIEW@@@Z ; CListView::OnColumnClick
PUBLIC	?OnDeleteItem@CListView@@UAEXPAUtagNMLISTVIEW@@@Z ; CListView::OnDeleteItem
PUBLIC	?OnEndLabelEdit@CListView@@UAEHPAUtagLVDISPINFO@@@Z ; CListView::OnEndLabelEdit
PUBLIC	?OnItemChanged@CListView@@UAEXPAUtagNMLISTVIEW@@@Z ; CListView::OnItemChanged
PUBLIC	?OnDoubleClick@CListView@@UAEXPAUtagNMHDR@@@Z	; CListView::OnDoubleClick
PUBLIC	?FixItemIndices@CListView@@UAEXXZ		; CListView::FixItemIndices
PUBLIC	??_7CListView@@6B@				; CListView::`vftable'
PUBLIC	??_GCListView@@UAEPAXI@Z			; CListView::`scalar deleting destructor'
PUBLIC	??_ECListView@@UAEPAXI@Z			; CListView::`vector deleting destructor'
EXTRN	__purecall:NEAR
EXTRN	__imp__ImageList_Create@20:NEAR
EXTRN	??0CWindow@@QAE@III@Z:NEAR			; CWindow::CWindow
EXTRN	?Destroy@CWindow@@UAEXXZ:NEAR			; CWindow::Destroy
EXTRN	?SetRedraw@CWindow@@UAEHH@Z:NEAR		; CWindow::SetRedraw
EXTRN	?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z:NEAR ; CWindow::DispatchMessageA
EXTRN	?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z:NEAR	; CWindow::OnScroll
;	COMDAT ??_7CListView@@6B@
CONST	SEGMENT
??_7CListView@@6B@ DD FLAT:??_ECListView@@UAEPAXI@Z	; CListView::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CListView@@UAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CListView@@UAEHPAJ@Z
	DD	FLAT:?OnSize@CListView@@UAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CListView@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CListView@@UAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
	DD	FLAT:?Create@CListView@@UAEHPAVCWindow@@KKKHHHHI@Z
	DD	FLAT:?InsertColumn@CListView@@UAEHPBDW4LVCTYPE@@H@Z
	DD	FLAT:?InsertColumns@CListView@@UAEHPBULVCOLUMNDATA@@I@Z
	DD	FLAT:?ResizeColumn@CListView@@UAEXI@Z
	DD	FLAT:?ResizeColumns@CListView@@UAEXXZ
	DD	FLAT:?GetSelectedCount@CListView@@UAEHXZ
	DD	FLAT:?GetNextItem@CListView@@UAEPAVCListViewItem@@PAV2@K@Z
	DD	FLAT:?PtrFromListIndex@CListView@@UAEPAVCListViewItem@@H@Z
	DD	FLAT:?SelectAll@CListView@@UAEXH@Z
	DD	FLAT:?Sort@CListView@@UAEXIK@Z
	DD	FLAT:?RegisterType@CListView@@UAEHPBDPAUHICON__@@1@Z
	DD	FLAT:?FindRegisteredType@CListView@@UAEPAVCListViewType@@PBD@Z
	DD	FLAT:?OnColumnClick@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
	DD	FLAT:?OnDeleteItem@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
	DD	FLAT:?OnEndLabelEdit@CListView@@UAEHPAUtagLVDISPINFO@@@Z
	DD	FLAT:?OnItemChanged@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
	DD	FLAT:?OnDoubleClick@CListView@@UAEXPAUtagNMHDR@@@Z
	DD	FLAT:?FixItemIndices@CListView@@UAEXXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CListView@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CListView@@QAE@XZ PROC NEAR				; CListView::CListView, COMDAT
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a ff		 push	 -1
  0000b	6a ff		 push	 -1
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CWindow@@QAE@III@Z	; CWindow::CWindow
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 30	 add	 ecx, 48			; 00000030H
  0001b	e8 00 00 00 00	 call	 ??0CListViewCtrl@@QAE@XZ ; CListViewCtrl::CListViewCtrl
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListView@@6B@ ; CListView::`vftable'

; 88   :     //
; 89   :     // Initialize the type list
; 90   :     //
; 91   :     
; 92   :     InitializeListHead(&m_lstTypes);

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 68	 add	 ecx, 104		; 00000068H
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	89 4a 68	 mov	 DWORD PTR [edx+104], ecx
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  0003e	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 93   : 
; 94   :     //
; 95   :     // Create the image lists
; 96   :     //
; 97   : 
; 98   :     m_hLargeImageList = ImageList_Create(32, 32, ILC_COLOR16 | ILC_MASK, 0, 0x100);

  00041	68 00 01 00 00	 push	 256			; 00000100H
  00046	6a 00		 push	 0
  00048	6a 11		 push	 17			; 00000011H
  0004a	6a 20		 push	 32			; 00000020H
  0004c	6a 20		 push	 32			; 00000020H
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Create@20
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 99   :     m_hSmallImageList = ImageList_Create(16, 16, ILC_COLOR16 | ILC_MASK, 0, 0x100);

  0005a	68 00 01 00 00	 push	 256			; 00000100H
  0005f	6a 00		 push	 0
  00061	6a 11		 push	 17			; 00000011H
  00063	6a 10		 push	 16			; 00000010H
  00065	6a 10		 push	 16			; 00000010H
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Create@20
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00070	89 42 64	 mov	 DWORD PTR [edx+100], eax

; 100  : }

  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
??0CListView@@QAE@XZ ENDP				; CListView::CListView
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnClose@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnClose, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 247  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnClose@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnClose
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z PROC NEAR	; CWindow::OnCommand, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 261  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 262  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z ENDP		; CWindow::OnCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSysCommand@CWindow@@UAEHIPAJ@Z PROC NEAR		; CWindow::OnSysCommand, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 266  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 267  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnSysCommand@CWindow@@UAEHIPAJ@Z ENDP			; CWindow::OnSysCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z PROC NEAR ; CWindow::OnEraseBackground, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 277  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z ENDP	; CWindow::OnEraseBackground
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnPaint@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnPaint, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 282  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnPaint@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnPaint
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z PROC NEAR	; CWindow::OnScroll, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 287  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z ENDP		; CWindow::OnScroll
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z PROC NEAR ; CWindow::OnContextMenu, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 292  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z ENDP	; CWindow::OnContextMenu
_TEXT	ENDS
EXTRN	__imp__DefWindowProcA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z PROC NEAR	; CWindow::DefWindowProcA, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  :     return ::DefWindowProc(hWnd, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16

; 297  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z ENDP	; CWindow::DefWindowProcA
_TEXT	ENDS
PUBLIC	??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_04BEIE@this?$AA@				; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\base\wndwrap.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT
??_C@_04BEIE@this?$AA@ DB 'this', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCWindow@@UAEPAUHWND__@@XZ PROC NEAR			; CWindow::operator HWND__ *, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 301  :     ASSERT(this);

  00007	68 2d 01 00 00	 push	 301			; 0000012dH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04BEIE@this?$AA@ ; `string'
  00016	33 c0		 xor	 eax, eax
  00018	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 302  :     return m_hWnd;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 303  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??BCWindow@@UAEPAUHWND__@@XZ ENDP			; CWindow::operator HWND__ *
_TEXT	ENDS
PUBLIC	??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@	; `string'
EXTRN	__imp__IsWindow@4:NEAR
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ DB '::IsWindow(m_hWnd)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsWindow@CWindow@@UAEHXZ PROC NEAR			; CWindow::IsWindow, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  :     if(!m_hWnd)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0000e	75 04		 jne	 SHORT $L49126

; 308  :     {
; 309  :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 2f		 jmp	 SHORT $L49125
$L49126:

; 310  :     }
; 311  : 
; 312  :     ASSERT(::IsWindow(m_hWnd));

  00014	68 38 01 00 00	 push	 312			; 00000138H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ ; `string'
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	40		 inc	 eax
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 313  : 
; 314  :     return TRUE;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$L49125:

; 315  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?IsWindow@CWindow@@UAEHXZ ENDP				; CWindow::IsWindow
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?SendMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::SendMessageA, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     return ::SendMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 320  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::SendMessageA
_TEXT	ENDS
EXTRN	__imp__PostMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?PostMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::PostMessageA, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  :     return ::PostMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 325  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?PostMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::PostMessageA
_TEXT	ENDS
EXTRN	__imp__SetWindowTextA@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT
_pszText$ = 8
_this$ = -4
?SetWindowTextA@CWindow@@UAEHPBD@Z PROC NEAR		; CWindow::SetWindowTextA, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  :     return ::SetWindowText(m_hWnd, pszText);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 330  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetWindowTextA@CWindow@@UAEHPBD@Z ENDP			; CWindow::SetWindowTextA
_TEXT	ENDS
EXTRN	__imp__MoveWindow@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_nWidth$ = 16
_nHeight$ = 20
_fRepaint$ = 24
_this$ = -4
?MoveWindow@CWindow@@UAEHHHHHH@Z PROC NEAR		; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :     return ::MoveWindow(m_hWnd, x, y, nWidth, nHeight, fRepaint);

  00007	8b 45 18	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 335  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?MoveWindow@CWindow@@UAEHHHHHH@Z ENDP			; CWindow::MoveWindow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_fRepaint$ = 12
_this$ = -4
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z PROC NEAR	; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  :     return ::MoveWindow(m_hWnd, prcWindow->left, prcWindow->top, prcWindow->right - prcWindow->left, prcWindow->bottom - prcWindow->top, fRepaint);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 340  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z ENDP		; CWindow::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_this$ = -4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetWindowRect, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :     return ::GetWindowRect(m_hWnd, prcWindow);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 345  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetWindowRect
_TEXT	ENDS
EXTRN	__imp__GetClientRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcClient$ = 8
_this$ = -4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetClientRect, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 349  :     return ::GetClientRect(m_hWnd, prcClient);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcClient$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 350  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetClientRect
_TEXT	ENDS
EXTRN	__imp__ScreenToClient@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_ppt$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  :     return ::ScreenToClient(m_hWnd, ppt);

  00007	8b 45 08	 mov	 eax, DWORD PTR _ppt$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 355  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z ENDP	; CWindow::ScreenToClient
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prc$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  :     if(!::ScreenToClient(m_hWnd, (LPPOINT)&prc->left))

  00007	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
  00018	85 c0		 test	 eax, eax
  0001a	75 04		 jne	 SHORT $L49174

; 360  :     {
; 361  :         return FALSE;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 14		 jmp	 SHORT $L49172
$L49174:

; 362  :     }
; 363  : 
; 364  :     return ::ScreenToClient(m_hWnd, (LPPOINT)&prc->right);

  00020	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  00023	83 c0 08	 add	 eax, 8
  00026	50		 push	 eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002d	52		 push	 edx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
$L49172:

; 365  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z ENDP	; CWindow::ScreenToClient
_TEXT	ENDS
EXTRN	__imp__SendDlgItemMessageA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT
_nItemId$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z PROC NEAR	; CWindow::SendDlgItemMessageA, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 369  :     return ::SendDlgItemMessage(m_hWnd, nItemId, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 370  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z ENDP		; CWindow::SendDlgItemMessageA
_TEXT	ENDS
EXTRN	__imp__GetDlgItem@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT
_nItemId$ = 8
_this$ = -4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z PROC NEAR	; CWindow::GetDlgItem, COMDAT
; _this$ = ecx

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :     return ::GetDlgItem(m_hWnd, nItemId);

  00007	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 375  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z ENDP		; CWindow::GetDlgItem
_TEXT	ENDS
EXTRN	__imp__SetDlgItemTextA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_this$ = -4
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z PROC NEAR		; CWindow::SetDlgItemTextA, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  :     return ::SetDlgItemText(m_hWnd, nItemId, pszString);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nItemId$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 380  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z ENDP		; CWindow::SetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__SetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_nValue$ = 12
_fSigned$ = 16
_this$ = -4
?SetDlgItemInt@CWindow@@UAEHHIH@Z PROC NEAR		; CWindow::SetDlgItemInt, COMDAT
; _this$ = ecx

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 384  :     return ::SetDlgItemInt(m_hWnd, nItemId, nValue, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nValue$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemInt@16

; 385  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetDlgItemInt@CWindow@@UAEHHIH@Z ENDP			; CWindow::SetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__GetDlgItemTextA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_nLength$ = 16
_this$ = -4
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z PROC NEAR		; CWindow::GetDlgItemTextA, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :     return ::GetDlgItemText(m_hWnd, nItemId, pszString, nLength);

  00007	8b 45 10	 mov	 eax, DWORD PTR _nLength$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 390  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z ENDP		; CWindow::GetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__GetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pfTranslated$ = 12
_fSigned$ = 16
_this$ = -4
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z PROC NEAR		; CWindow::GetDlgItemInt, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :     return ::GetDlgItemInt(m_hWnd, nItemId, pfTranslated, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pfTranslated$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemInt@16

; 395  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z ENDP		; CWindow::GetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__DragAcceptFiles@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT
_fAccept$ = 8
_this$ = -4
?DragAcceptFiles@CWindow@@UAEXH@Z PROC NEAR		; CWindow::DragAcceptFiles, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 399  :     ::DragAcceptFiles(m_hWnd, fAccept);

  00007	8b 45 08	 mov	 eax, DWORD PTR _fAccept$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 400  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?DragAcceptFiles@CWindow@@UAEXH@Z ENDP			; CWindow::DragAcceptFiles
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z PROC NEAR	; CWindow::OnDropFiles, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 404  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 405  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z ENDP	; CWindow::OnDropFiles
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.h
_TEXT	ENDS
;	COMDAT ?GetSelectedCount@CListView@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetSelectedCount@CListView@@UAEHXZ PROC NEAR		; CListView::GetSelectedCount, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 156  :     return ListView_GetSelectedCount(m_ListCtrl.m_hWnd);

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 32 10 00 00	 push	 4146			; 00001032H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 157  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetSelectedCount@CListView@@UAEHXZ ENDP		; CListView::GetSelectedCount
_TEXT	ENDS
PUBLIC	?PtrFromListIndex@CListViewItem@@SGPAV1@PAVCListView@@H@Z ; CListViewItem::PtrFromListIndex
; Function compile flags: /Odt
;	COMDAT ?PtrFromListIndex@CListView@@UAEPAVCListViewItem@@H@Z
_TEXT	SEGMENT
_nItemIndex$ = 8
_this$ = -4
?PtrFromListIndex@CListView@@UAEPAVCListViewItem@@H@Z PROC NEAR ; CListView::PtrFromListIndex, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 236  :     return CListViewItem::PtrFromListIndex(this, nItemIndex);

  00007	8b 45 08	 mov	 eax, DWORD PTR _nItemIndex$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?PtrFromListIndex@CListViewItem@@SGPAV1@PAVCListView@@H@Z ; CListViewItem::PtrFromListIndex

; 237  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?PtrFromListIndex@CListView@@UAEPAVCListViewItem@@H@Z ENDP ; CListView::PtrFromListIndex
_TEXT	ENDS
PUBLIC	??1CListView@@UAE@XZ				; CListView::~CListView
; Function compile flags: /Odt
;	COMDAT ??_GCListView@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCListView@@UAEPAXI@Z PROC NEAR			; CListView::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CListView@@UAE@XZ	; CListView::~CListView
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L50475
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L50475:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCListView@@UAEPAXI@Z ENDP				; CListView::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?OnCreate@CWindow@@UAEHPAXPAJ@Z			; CWindow::OnCreate
PUBLIC	?OnDestroy@CWindow@@UAEHPAJ@Z			; CWindow::OnDestroy
PUBLIC	?OnSize@CWindow@@UAEHIIIPAJ@Z			; CWindow::OnSize
PUBLIC	?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z	; CWindow::OnNotify
PUBLIC	?AddRef@CListViewCtrl@@UAGKXZ			; CListViewCtrl::AddRef
PUBLIC	?Release@CListViewCtrl@@UAGKXZ			; CListViewCtrl::Release
PUBLIC	??_7CListViewCtrl@@6B@				; CListViewCtrl::`vftable'
PUBLIC	??_GCListViewCtrl@@UAEPAXI@Z			; CListViewCtrl::`scalar deleting destructor'
PUBLIC	??_ECListViewCtrl@@UAEPAXI@Z			; CListViewCtrl::`vector deleting destructor'
EXTRN	?HandleMessage@CWindow@@UAEHIIJPAJ@Z:NEAR	; CWindow::HandleMessage
;	COMDAT ??_7CListViewCtrl@@6B@
CONST	SEGMENT
??_7CListViewCtrl@@6B@ DD FLAT:??_ECListViewCtrl@@UAEPAXI@Z ; CListViewCtrl::`vftable'
	DD	FLAT:?AddRef@CListViewCtrl@@UAGKXZ
	DD	FLAT:?Release@CListViewCtrl@@UAGKXZ
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CWindow@@UAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnSize@CWindow@@UAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CWindow@@UAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
	DD	FLAT:?Create@CListViewCtrl@@UAEHPAVCListView@@KKHHHH@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CListViewCtrl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CListViewCtrl@@QAE@XZ PROC NEAR			; CListViewCtrl::CListViewCtrl, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a ff		 push	 -1
  0000b	6a ff		 push	 -1
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CWindow@@QAE@III@Z	; CWindow::CWindow
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListViewCtrl@@6B@ ; CListViewCtrl::`vftable'
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0CListViewCtrl@@QAE@XZ ENDP				; CListViewCtrl::CListViewCtrl
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCreate@CWindow@@UAEHPAXPAJ@Z PROC NEAR		; CWindow::OnCreate, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 242  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnCreate@CWindow@@UAEHPAXPAJ@Z ENDP			; CWindow::OnCreate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDestroy@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnDestroy, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 252  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnDestroy@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnDestroy
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSize@CWindow@@UAEHIIIPAJ@Z PROC NEAR			; CWindow::OnSize, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 257  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnSize@CWindow@@UAEHIIIPAJ@Z ENDP			; CWindow::OnSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z PROC NEAR	; CWindow::OnNotify, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 272  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z ENDP		; CWindow::OnNotify
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.h
_TEXT	ENDS
;	COMDAT ?AddRef@CListViewCtrl@@UAGKXZ
_TEXT	SEGMENT
?AddRef@CListViewCtrl@@UAGKXZ PROC NEAR			; CListViewCtrl::AddRef, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   :     return 1;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 75   : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?AddRef@CListViewCtrl@@UAGKXZ ENDP			; CListViewCtrl::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CListViewCtrl@@UAGKXZ
_TEXT	SEGMENT
?Release@CListViewCtrl@@UAGKXZ PROC NEAR		; CListViewCtrl::Release, COMDAT

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   :     return 1;

  00003	b8 01 00 00 00	 mov	 eax, 1

; 80   : }

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?Release@CListViewCtrl@@UAGKXZ ENDP			; CListViewCtrl::Release
_TEXT	ENDS
PUBLIC	??1CListViewCtrl@@UAE@XZ			; CListViewCtrl::~CListViewCtrl
; Function compile flags: /Odt
;	COMDAT ??_GCListViewCtrl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCListViewCtrl@@UAEPAXI@Z PROC NEAR			; CListViewCtrl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CListViewCtrl@@UAE@XZ ; CListViewCtrl::~CListViewCtrl
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L50483
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L50483:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCListViewCtrl@@UAEPAXI@Z ENDP			; CListViewCtrl::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CWindow@@UAE@XZ:NEAR				; CWindow::~CWindow
; Function compile flags: /Odt
;	COMDAT ??1CListViewCtrl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CListViewCtrl@@UAE@XZ PROC NEAR			; CListViewCtrl::~CListViewCtrl, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWindow@@UAE@XZ	; CWindow::~CWindow
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CListViewCtrl@@UAE@XZ ENDP				; CListViewCtrl::~CListViewCtrl
_TEXT	ENDS
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
EXTRN	__imp__ImageList_Destroy@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
;	COMDAT ??1CListView@@UAE@XZ
_TEXT	SEGMENT
_this$ = -12
_pType$ = -4
_pleEntry$ = -8
??1CListView@@UAE@XZ PROC NEAR				; CListView::~CListView, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListView@@6B@ ; CListView::`vftable'
$L50491:

; 126  :     CListViewType *         pType;
; 127  :     PLIST_ENTRY             pleEntry;
; 128  :     
; 129  :     //
; 130  :     // Free registered types
; 131  :     //
; 132  : 
; 133  :     while((pleEntry = RemoveEntryList(m_lstTypes.Flink)) != &m_lstTypes)

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList
  0001e	89 45 f8	 mov	 DWORD PTR _pleEntry$[ebp], eax
  00021	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c0 68	 add	 eax, 104		; 00000068H
  00027	39 45 f8	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  0002a	74 24		 je	 SHORT $L50492

; 134  :     {
; 135  :         pType = CONTAINING_RECORD(pleEntry, CListViewType, m_leTypes);

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0002f	83 e9 08	 sub	 ecx, 8
  00032	89 4d fc	 mov	 DWORD PTR _pType$[ebp], ecx

; 136  : 
; 137  :         RELEASE(pType);

  00035	83 7d fc 00	 cmp	 DWORD PTR _pType$[ebp], 0
  00039	74 13		 je	 SHORT $L50497
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _pType$[ebp]
  0003e	8b 02		 mov	 eax, DWORD PTR [edx]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _pType$[ebp]
  00043	51		 push	 ecx
  00044	ff 50 08	 call	 DWORD PTR [eax+8]
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pType$[ebp], 0
$L50497:

; 138  :     }

  0004e	eb c2		 jmp	 SHORT $L50491
$L50492:

; 139  : 
; 140  :     //
; 141  :     // Free the image lists
; 142  :     //
; 143  : 
; 144  :     ImageList_Destroy(m_hLargeImageList);

  00050	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Destroy@4

; 145  :     ImageList_Destroy(m_hSmallImageList);

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  00063	52		 push	 edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_Destroy@4

; 146  : }

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 30	 add	 ecx, 48			; 00000030H
  00070	e8 00 00 00 00	 call	 ??1CListViewCtrl@@UAE@XZ ; CListViewCtrl::~CListViewCtrl
  00075	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ??1CWindow@@UAE@XZ	; CWindow::~CWindow
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??1CListView@@UAE@XZ ENDP				; CListView::~CListView
_TEXT	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
CONST	SEGMENT
??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
_TEXT	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0001e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00020	74 2c		 je	 SHORT $L47516

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L47516:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
_TEXT	ENDS
PUBLIC	??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@	; `string'
PUBLIC	??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@	; `string'
PUBLIC	??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@	; `string'
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT
??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry pointe'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT
??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ DB 'List entry conta'
	DB	'ins NULL pointer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT
??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ DB 'List entry part'
	DB	'ially points to itself', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT
??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in list'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT
??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L47476

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@ ; `string'
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L47478
$L47476:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L47480
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L47479
$L47480:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ ; `string'
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L47482
$L47479:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L47484
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L47483
$L47484:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L47486
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L47485
$L47486:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ ; `string'
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L47485:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L47488
$L47483:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L47489

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000a1	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a3	75 17		 jne	 SHORT $L47490

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@ ; `string'
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L47490:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L47492
$L47489:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L47493

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  000ca	3b 02		 cmp	 eax, DWORD PTR [edx]
  000cc	74 17		 je	 SHORT $L47494

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@ ; `string'
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L47494:
$L47493:
$L47492:
$L47488:
$L47482:
$L47478:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
_TEXT	ENDS
EXTRN	_g_hInstance:DWORD
EXTRN	__imp__RegisterClassExA@4:NEAR
EXTRN	?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z:NEAR	; CWindow::WindowProc
EXTRN	__imp__LoadCursorA@8:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
;	COMDAT ?Create@CListView@@UAEHPAVCWindow@@KKKHHHHI@Z
_TEXT	SEGMENT
_pParent$ = 8
_dwExStyle$ = 12
_dwStyle$ = 16
_dwListExStyle$ = 20
_x$ = 24
_y$ = 28
_nWidth$ = 32
_nHeight$ = 36
_nControlId$ = 40
_this$ = -60
_wc$ = -56
_adwStyles$ = -8
?Create@CListView@@UAEHPAVCWindow@@KKKHHHHI@Z PROC NEAR	; CListView::Create, COMDAT
; _this$ = ecx

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 182  :     WNDCLASSEX              wc              = { 0 };

  0000a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp], 0
  00011	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00016	33 c0		 xor	 eax, eax
  00018	8d 7d cc	 lea	 edi, DWORD PTR _wc$[ebp+4]
  0001b	f3 ab		 rep stosd

; 183  :     DWORD                   adwStyles[2];
; 184  : 
; 185  :     //
; 186  :     // Mask off and save the list-view specific style bits
; 187  :     //
; 188  : 
; 189  :     adwStyles[0] = LOWORD(dwStyle);

  0001d	8b 45 10	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00020	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00025	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002a	89 45 f8	 mov	 DWORD PTR _adwStyles$[ebp], eax

; 190  :     dwStyle &= ~adwStyles[0];

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _adwStyles$[ebp]
  00030	f7 d1		 not	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00035	23 d1		 and	 edx, ecx
  00037	89 55 10	 mov	 DWORD PTR _dwStyle$[ebp], edx

; 191  : 
; 192  :     adwStyles[1] = dwListExStyle;

  0003a	8b 45 14	 mov	 eax, DWORD PTR _dwListExStyle$[ebp]
  0003d	89 45 fc	 mov	 DWORD PTR _adwStyles$[ebp+4], eax

; 193  : 
; 194  :     //
; 195  :     // Register the window class
; 196  :     //
; 197  : 
; 198  :     wc.cbSize = sizeof(wc);

  00040	c7 45 c8 30 00
	00 00		 mov	 DWORD PTR _wc$[ebp], 48	; 00000030H

; 199  :     wc.lpfnWndProc = WindowProc;

  00047	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+8], OFFSET FLAT:?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z ; CWindow::WindowProc

; 200  :     wc.hInstance = g_hInstance;

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hInstance
  00054	89 4d dc	 mov	 DWORD PTR _wc$[ebp+20], ecx

; 201  :     wc.hCursor = LoadCursor(NULL, IDC_ARROW);

  00057	68 00 7f 00 00	 push	 32512			; 00007f00H
  0005c	6a 00		 push	 0
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00064	89 45 e4	 mov	 DWORD PTR _wc$[ebp+28], eax

; 202  :     wc.hbrBackground = (HBRUSH)(COLOR_3DFACE + 1);

  00067	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR _wc$[ebp+32], 16 ; 00000010H

; 203  :     wc.lpszClassName = m_pszClassName;

  0006e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_pszClassName@CListView@@2QBDB ; CListView::m_pszClassName
  00074	89 55 f0	 mov	 DWORD PTR _wc$[ebp+40], edx

; 204  : 
; 205  :     RegisterClassEx(&wc);

  00077	8d 45 c8	 lea	 eax, DWORD PTR _wc$[ebp]
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4

; 206  : 
; 207  :     //
; 208  :     // Create the window
; 209  :     //
; 210  : 
; 211  :     return CWindow::Create(pParent, m_pszClassName, NULL, dwExStyle, dwStyle, x, y, nWidth, nHeight, nControlId, (LPVOID)&adwStyles);

  00081	8d 4d f8	 lea	 ecx, DWORD PTR _adwStyles$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 28	 mov	 edx, DWORD PTR _nControlId$[ebp]
  00088	52		 push	 edx
  00089	8b 45 24	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 20	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  00090	51		 push	 ecx
  00091	8b 55 1c	 mov	 edx, DWORD PTR _y$[ebp]
  00094	52		 push	 edx
  00095	8b 45 18	 mov	 eax, DWORD PTR _x$[ebp]
  00098	50		 push	 eax
  00099	8b 4d 10	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  0009c	51		 push	 ecx
  0009d	8b 55 0c	 mov	 edx, DWORD PTR _dwExStyle$[ebp]
  000a0	52		 push	 edx
  000a1	6a 00		 push	 0
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pszClassName@CListView@@2QBDB ; CListView::m_pszClassName
  000a8	50		 push	 eax
  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _pParent$[ebp]
  000ac	51		 push	 ecx
  000ad	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	e8 00 00 00 00	 call	 ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z ; CWindow::Create

; 212  : }

  000b5	5f		 pop	 edi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 24 00	 ret	 36			; 00000024H
?Create@CListView@@UAEHPAVCWindow@@KKKHHHHI@Z ENDP	; CListView::Create
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?HandleMessage@CListView@@UAEHIIJPAJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_plResult$ = 20
_this$ = -8
_fHandled$ = -4
?HandleMessage@CListView@@UAEHIIJPAJ@Z PROC NEAR	; CListView::HandleMessage, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 245  :     BOOL                    fHandled;
; 246  :     
; 247  :     switch(uMsg)
; 248  :     {

  00009	8b 45 08	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  0000f	81 7d f4 01 c4
	00 00		 cmp	 DWORD PTR -12+[ebp], 50177 ; 0000c401H
  00016	74 02		 je	 SHORT $L50531
  00018	eb 10		 jmp	 SHORT $L50532
$L50531:

; 249  :         case LVM_FIXITEMINDICES:
; 250  :             FixItemIndices();

  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	ff 92 e4 00 00
	00		 call	 DWORD PTR [edx+228]

; 251  :             break;

  00028	eb 1b		 jmp	 SHORT $L50528
$L50532:

; 252  :         
; 253  :         default:
; 254  :             fHandled = CWindow::HandleMessage(uMsg, wParam, lParam, plResult);

  0002a	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR _wParam$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?HandleMessage@CWindow@@UAEHIIJPAJ@Z ; CWindow::HandleMessage
  00042	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax
$L50528:

; 255  :             break;
; 256  :     }
; 257  : 
; 258  :     return fHandled;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _fHandled$[ebp]

; 259  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 10 00	 ret	 16			; 00000010H
?HandleMessage@CListView@@UAEHIIJPAJ@Z ENDP		; CListView::HandleMessage
_TEXT	ENDS
PUBLIC	??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BC@NLPC@m_hLargeImageList?$AA@		; `string'
PUBLIC	??_C@_0BC@IBKI@m_hSmallImageList?$AA@		; `string'
EXTRN	__imp__ImageList_SetBkColor@8:NEAR
;	COMDAT ??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\private'
	DB	'\windows\directx\xact\host\gui\controls\listview.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NLPC@m_hLargeImageList?$AA@
CONST	SEGMENT
??_C@_0BC@NLPC@m_hLargeImageList?$AA@ DB 'm_hLargeImageList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IBKI@m_hSmallImageList?$AA@
CONST	SEGMENT
??_C@_0BC@IBKI@m_hSmallImageList?$AA@ DB 'm_hSmallImageList', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?OnCreate@CListView@@UAEHPAXPAJ@Z
_TEXT	SEGMENT
_pvContext$ = 8
_plResult$ = 12
_this$ = -12
_adwStyles$ = -4
_fSuccess$ = -8
?OnCreate@CListView@@UAEHPAXPAJ@Z PROC NEAR		; CListView::OnCreate, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 288  :     static const DWORD      dwExStyle   = 0;
; 289  :     static const DWORD      dwStyle     = WS_CHILD | WS_VISIBLE | LVS_SHAREIMAGELISTS;
; 290  :     const DWORD *           adwStyles   = (const DWORD *)pvContext;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pvContext$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _adwStyles$[ebp], eax

; 291  :     BOOL                    fSuccess;
; 292  : 
; 293  :     if(CWindow::OnCreate(pvContext, plResult))

  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _plResult$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR _pvContext$[ebp]
  00016	52		 push	 edx
  00017	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?OnCreate@CWindow@@UAEHPAXPAJ@Z ; CWindow::OnCreate
  0001f	85 c0		 test	 eax, eax
  00021	74 0a		 je	 SHORT $L50545

; 294  :     {
; 295  :         return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	e9 71 01 00 00	 jmp	 $L50537
$L50545:

; 296  :     }
; 297  : 
; 298  :     //
; 299  :     // Create the list-view control
; 300  :     //
; 301  : 
; 302  :     fSuccess = m_ListCtrl.Create(this, dwExStyle, dwStyle | adwStyles[0]);

  0002d	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00032	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00037	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0003c	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00041	8b 45 fc	 mov	 eax, DWORD PTR _adwStyles$[ebp]
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	81 c9 40 00 00
	50		 or	 ecx, 1342177344		; 50000040H
  0004c	51		 push	 ecx
  0004d	6a 00		 push	 0
  0004f	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00052	52		 push	 edx
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 30	 add	 ecx, 48			; 00000030H
  00059	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0005f	ff 92 a0 00 00
	00		 call	 DWORD PTR [edx+160]
  00065	89 45 f8	 mov	 DWORD PTR _fSuccess$[ebp], eax

; 303  : 
; 304  :     //
; 305  :     // Set extended list-view style
; 306  :     //
; 307  : 
; 308  :     if(fSuccess)

  00068	83 7d f8 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0006c	74 24		 je	 SHORT $L50546

; 309  :     {
; 310  :         ListView_SetExtendedListViewStyle(m_ListCtrl, adwStyles[1]);

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _adwStyles$[ebp]
  00071	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00074	51		 push	 ecx
  00075	6a 00		 push	 0
  00077	68 36 10 00 00	 push	 4150			; 00001036H
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 30	 add	 ecx, 48			; 00000030H
  00082	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00085	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00088	ff 50 58	 call	 DWORD PTR [eax+88]
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$L50546:

; 311  :     }
; 312  :     
; 313  :     //
; 314  :     // Set the image lists
; 315  :     //
; 316  : 
; 317  :     if(fSuccess)

  00092	83 7d f8 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00096	0f 84 ea 00 00
	00		 je	 $L50548

; 318  :     {
; 319  :         ASSERT(m_hLargeImageList);

  0009c	68 3f 01 00 00	 push	 319			; 0000013fH
  000a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@NLPC@m_hLargeImageList?$AA@ ; `string'
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	33 d2		 xor	 edx, edx
  000b0	83 79 60 00	 cmp	 DWORD PTR [ecx+96], 0
  000b4	0f 94 c2	 sete	 dl
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000bd	83 c4 10	 add	 esp, 16			; 00000010H

; 320  :         ASSERT(m_hSmallImageList);

  000c0	68 40 01 00 00	 push	 320			; 00000140H
  000c5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@IBKI@m_hSmallImageList?$AA@ ; `string'
  000cf	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	33 c9		 xor	 ecx, ecx
  000d4	83 78 64 00	 cmp	 DWORD PTR [eax+100], 0
  000d8	0f 94 c1	 sete	 cl
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e1	83 c4 10	 add	 esp, 16			; 00000010H

; 321  :         
; 322  :         ListView_SetImageList(m_ListCtrl, m_hLargeImageList, LVSIL_NORMAL);

  000e4	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000e7	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  000ea	50		 push	 eax
  000eb	6a 00		 push	 0
  000ed	68 03 10 00 00	 push	 4099			; 00001003H
  000f2	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	83 c1 30	 add	 ecx, 48			; 00000030H
  000f8	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000fb	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000fe	ff 50 58	 call	 DWORD PTR [eax+88]
  00101	50		 push	 eax
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 323  :         ListView_SetImageList(m_ListCtrl, m_hSmallImageList, LVSIL_SMALL);

  00108	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  0010e	52		 push	 edx
  0010f	6a 01		 push	 1
  00111	68 03 10 00 00	 push	 4099			; 00001003H
  00116	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	83 c1 30	 add	 ecx, 48			; 00000030H
  0011c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00122	ff 52 58	 call	 DWORD PTR [edx+88]
  00125	50		 push	 eax
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 324  : 
; 325  :         ImageList_SetBkColor(m_hLargeImageList, ListView_GetBkColor(m_ListCtrl));

  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	68 00 10 00 00	 push	 4096			; 00001000H
  00135	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	83 c1 30	 add	 ecx, 48			; 00000030H
  0013b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0013e	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00141	ff 52 58	 call	 DWORD PTR [edx+88]
  00144	50		 push	 eax
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0014b	50		 push	 eax
  0014c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0014f	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00152	51		 push	 ecx
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_SetBkColor@8

; 326  :         ImageList_SetBkColor(m_hSmallImageList, ListView_GetBkColor(m_ListCtrl));

  00159	6a 00		 push	 0
  0015b	6a 00		 push	 0
  0015d	68 00 10 00 00	 push	 4096			; 00001000H
  00162	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	83 c1 30	 add	 ecx, 48			; 00000030H
  00168	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0016b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0016e	ff 50 58	 call	 DWORD PTR [eax+88]
  00171	50		 push	 eax
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00178	50		 push	 eax
  00179	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0017c	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  0017f	52		 push	 edx
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_SetBkColor@8
$L50548:

; 327  :     }
; 328  : 
; 329  :     //
; 330  :     // Success
; 331  :     //
; 332  : 
; 333  :     if(!fSuccess)

  00186	83 7d f8 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0018a	75 10		 jne	 SHORT $L50562

; 334  :     {
; 335  :         *plResult = 0;

  0018c	8b 45 0c	 mov	 eax, DWORD PTR _plResult$[ebp]
  0018f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 336  :         return TRUE;

  00195	b8 01 00 00 00	 mov	 eax, 1
  0019a	eb 02		 jmp	 SHORT $L50537
$L50562:

; 337  :     }
; 338  : 
; 339  :     return FALSE;

  0019c	33 c0		 xor	 eax, eax
$L50537:

; 340  : }

  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c2 08 00	 ret	 8
?OnCreate@CListView@@UAEHPAXPAJ@Z ENDP			; CListView::OnCreate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDestroy@CListView@@UAEHPAJ@Z
_TEXT	SEGMENT
_plResult$ = 8
_this$ = -4
?OnDestroy@CListView@@UAEHPAJ@Z PROC NEAR		; CListView::OnDestroy, COMDAT
; _this$ = ecx

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 367  :     if(CWindow::OnDestroy(plResult))

  00007	8b 45 08	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?OnDestroy@CWindow@@UAEHPAJ@Z ; CWindow::OnDestroy
  00013	85 c0		 test	 eax, eax
  00015	74 07		 je	 SHORT $L50567

; 368  :     {
; 369  :         return TRUE;

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	eb 21		 jmp	 SHORT $L50566
$L50567:

; 370  :     }
; 371  : 
; 372  :     ListView_DeleteAllItems(m_ListCtrl);

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	68 09 10 00 00	 push	 4105			; 00001009H
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 30	 add	 ecx, 48			; 00000030H
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00033	ff 50 58	 call	 DWORD PTR [eax+88]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 373  : 
; 374  :     return FALSE;

  0003d	33 c0		 xor	 eax, eax
$L50566:

; 375  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?OnDestroy@CListView@@UAEHPAJ@Z ENDP			; CListView::OnDestroy
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDeleteItem@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
_TEXT	SEGMENT
_pHdr$ = 8
_this$ = -8
_pItem$ = -4
?OnDeleteItem@CListView@@UAEXPAUtagNMLISTVIEW@@@Z PROC NEAR ; CListView::OnDeleteItem, COMDAT
; _this$ = ecx

; 401  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 402  :     CListViewItem *         pItem   = CListViewItem::PtrFromListIndex(this, pHdr->iItem);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  0000c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000f	51		 push	 ecx
  00010	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ?PtrFromListIndex@CListViewItem@@SGPAV1@PAVCListView@@H@Z ; CListViewItem::PtrFromListIndex
  00019	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax

; 403  : 
; 404  :     //
; 405  :     // Notify the item
; 406  :     //
; 407  : 
; 408  :     pItem->OnDelete();

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00024	ff 52 20	 call	 DWORD PTR [edx+32]

; 409  : 
; 410  :     //
; 411  :     // Post a message to ourselves to update the item indices *after* the
; 412  :     // item has been deleted.
; 413  :     //
; 414  : 
; 415  :     PostMessage(LVM_FIXITEMINDICES);

  00027	6a 00		 push	 0
  00029	6a 00		 push	 0
  0002b	68 01 c4 00 00	 push	 50177			; 0000c401H
  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	ff 52 1c	 call	 DWORD PTR [edx+28]

; 416  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?OnDeleteItem@CListView@@UAEXPAUtagNMLISTVIEW@@@Z ENDP	; CListView::OnDeleteItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSize@CListView@@UAEHIIIPAJ@Z
_TEXT	SEGMENT
_nType$ = 8
_nWidth$ = 12
_nHeight$ = 16
_plResult$ = 20
_this$ = -4
?OnSize@CListView@@UAEHIIIPAJ@Z PROC NEAR		; CListView::OnSize, COMDAT
; _this$ = ecx

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 449  :     if(CWindow::OnSize(nType, nWidth, nHeight, plResult))

  00007	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nType$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?OnSize@CWindow@@UAEHIIIPAJ@Z ; CWindow::OnSize
  0001f	85 c0		 test	 eax, eax
  00021	74 07		 je	 SHORT $L50581

; 450  :     {
; 451  :         return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	eb 1f		 jmp	 SHORT $L50580
$L50581:

; 452  :     }
; 453  :     
; 454  :     m_ListCtrl.MoveWindow(0, 0, nWidth, nHeight);

  0002a	6a 01		 push	 1
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00033	52		 push	 edx
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	83 c1 30	 add	 ecx, 48			; 00000030H
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00044	ff 52 40	 call	 DWORD PTR [edx+64]

; 455  : 
; 456  :     return FALSE;

  00047	33 c0		 xor	 eax, eax
$L50580:

; 457  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
?OnSize@CListView@@UAEHIIIPAJ@Z ENDP			; CListView::OnSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnNotify@CListView@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT
_pHdr$ = 8
_plResult$ = 12
_this$ = -4
?OnNotify@CListView@@UAEHPAUtagNMHDR@@PAJ@Z PROC NEAR	; CListView::OnNotify, COMDAT
; _this$ = ecx

; 485  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 486  :     if(CWindow::OnNotify(pHdr, plResult))

  00009	8b 45 0c	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pHdr$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z ; CWindow::OnNotify
  00019	85 c0		 test	 eax, eax
  0001b	74 0a		 je	 SHORT $L50587

; 487  :     {
; 488  :         return TRUE;

  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	e9 98 00 00 00	 jmp	 $L50586
$L50587:

; 489  :     }
; 490  :     
; 491  :     //
; 492  :     // We're intercepting certain messages and passing the rest along to
; 493  :     // the parent to be processed
; 494  :     //
; 495  :     
; 496  :     switch(pHdr->code)
; 497  :     {

  00027	8b 55 08	 mov	 edx, DWORD PTR _pHdr$[ebp]
  0002a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002d	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR -8+[ebp]
  00033	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00036	89 4d f8	 mov	 DWORD PTR -8+[ebp], ecx
  00039	83 7d f8 69	 cmp	 DWORD PTR -8+[ebp], 105	; 00000069H
  0003d	77 7e		 ja	 SHORT $L50589
  0003f	8b 55 f8	 mov	 edx, DWORD PTR -8+[ebp]
  00042	33 c0		 xor	 eax, eax
  00044	8a 82 00 00 00
	00		 mov	 al, BYTE PTR $L51272[edx]
  0004a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L51273[eax*4]
$L50592:

; 498  :         case LVN_DELETEITEM:
; 499  :             OnDeleteItem((LPNMLISTVIEW)pHdr);

  00051	8b 4d 08	 mov	 ecx, DWORD PTR _pHdr$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	8b 02		 mov	 eax, DWORD PTR [edx]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	ff 90 d4 00 00
	00		 call	 DWORD PTR [eax+212]

; 500  :             break;

  00063	eb 58		 jmp	 SHORT $L50589
$L50594:

; 501  : 
; 502  :         case LVN_COLUMNCLICK:
; 503  :             OnColumnClick((LPNMLISTVIEW)pHdr);

  00065	8b 4d 08	 mov	 ecx, DWORD PTR _pHdr$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	8b 02		 mov	 eax, DWORD PTR [edx]
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	ff 90 d0 00 00
	00		 call	 DWORD PTR [eax+208]

; 504  :             break;

  00077	eb 44		 jmp	 SHORT $L50589
$L50596:

; 505  : 
; 506  :         case LVN_ENDLABELEDIT:
; 507  :             *plResult = OnEndLabelEdit((LPNMLVDISPINFO)pHdr);

  00079	8b 4d 08	 mov	 ecx, DWORD PTR _pHdr$[ebp]
  0007c	51		 push	 ecx
  0007d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	ff 90 d8 00 00
	00		 call	 DWORD PTR [eax+216]
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _plResult$[ebp]
  0008e	89 01		 mov	 DWORD PTR [ecx], eax

; 508  :             return TRUE;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	eb 28		 jmp	 SHORT $L50586
$L50598:

; 509  : 
; 510  :         case LVN_ITEMCHANGED:
; 511  :             OnItemChanged((LPNMLISTVIEW)pHdr);

  00097	8b 55 08	 mov	 edx, DWORD PTR _pHdr$[ebp]
  0009a	52		 push	 edx
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b 10		 mov	 edx, DWORD PTR [eax]
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	ff 92 dc 00 00
	00		 call	 DWORD PTR [edx+220]

; 512  :             break;

  000a9	eb 12		 jmp	 SHORT $L50589
$L50600:

; 513  : 
; 514  :         case NM_DBLCLK:
; 515  :         case NM_RETURN:
; 516  :             OnDoubleClick(pHdr);

  000ab	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	ff 92 e0 00 00
	00		 call	 DWORD PTR [edx+224]
$L50589:

; 517  :             break;
; 518  :     };
; 519  : 
; 520  :     return FALSE;

  000bd	33 c0		 xor	 eax, eax
$L50586:

; 521  : }

  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 08 00	 ret	 8
$L51273:
  000c5	00 00 00 00	 DD	 $L50594
  000c9	00 00 00 00	 DD	 $L50596
  000cd	00 00 00 00	 DD	 $L50592
  000d1	00 00 00 00	 DD	 $L50598
  000d5	00 00 00 00	 DD	 $L50600
  000d9	00 00 00 00	 DD	 $L50589
$L51272:
  000dd	00		 DB	 0
  000de	05		 DB	 5
  000df	01		 DB	 1
  000e0	05		 DB	 5
  000e1	05		 DB	 5
  000e2	02		 DB	 2
  000e3	05		 DB	 5
  000e4	03		 DB	 3
  000e5	05		 DB	 5
  000e6	05		 DB	 5
  000e7	05		 DB	 5
  000e8	05		 DB	 5
  000e9	05		 DB	 5
  000ea	05		 DB	 5
  000eb	05		 DB	 5
  000ec	05		 DB	 5
  000ed	05		 DB	 5
  000ee	05		 DB	 5
  000ef	05		 DB	 5
  000f0	05		 DB	 5
  000f1	05		 DB	 5
  000f2	05		 DB	 5
  000f3	05		 DB	 5
  000f4	05		 DB	 5
  000f5	05		 DB	 5
  000f6	05		 DB	 5
  000f7	05		 DB	 5
  000f8	05		 DB	 5
  000f9	05		 DB	 5
  000fa	05		 DB	 5
  000fb	05		 DB	 5
  000fc	05		 DB	 5
  000fd	05		 DB	 5
  000fe	05		 DB	 5
  000ff	05		 DB	 5
  00100	05		 DB	 5
  00101	05		 DB	 5
  00102	05		 DB	 5
  00103	05		 DB	 5
  00104	05		 DB	 5
  00105	05		 DB	 5
  00106	05		 DB	 5
  00107	05		 DB	 5
  00108	05		 DB	 5
  00109	05		 DB	 5
  0010a	05		 DB	 5
  0010b	05		 DB	 5
  0010c	05		 DB	 5
  0010d	05		 DB	 5
  0010e	05		 DB	 5
  0010f	05		 DB	 5
  00110	05		 DB	 5
  00111	05		 DB	 5
  00112	05		 DB	 5
  00113	05		 DB	 5
  00114	05		 DB	 5
  00115	05		 DB	 5
  00116	05		 DB	 5
  00117	05		 DB	 5
  00118	05		 DB	 5
  00119	05		 DB	 5
  0011a	05		 DB	 5
  0011b	05		 DB	 5
  0011c	05		 DB	 5
  0011d	05		 DB	 5
  0011e	05		 DB	 5
  0011f	05		 DB	 5
  00120	05		 DB	 5
  00121	05		 DB	 5
  00122	05		 DB	 5
  00123	05		 DB	 5
  00124	05		 DB	 5
  00125	05		 DB	 5
  00126	05		 DB	 5
  00127	05		 DB	 5
  00128	05		 DB	 5
  00129	05		 DB	 5
  0012a	05		 DB	 5
  0012b	05		 DB	 5
  0012c	05		 DB	 5
  0012d	05		 DB	 5
  0012e	05		 DB	 5
  0012f	05		 DB	 5
  00130	05		 DB	 5
  00131	05		 DB	 5
  00132	05		 DB	 5
  00133	05		 DB	 5
  00134	05		 DB	 5
  00135	05		 DB	 5
  00136	05		 DB	 5
  00137	05		 DB	 5
  00138	05		 DB	 5
  00139	05		 DB	 5
  0013a	05		 DB	 5
  0013b	05		 DB	 5
  0013c	05		 DB	 5
  0013d	05		 DB	 5
  0013e	05		 DB	 5
  0013f	05		 DB	 5
  00140	05		 DB	 5
  00141	05		 DB	 5
  00142	05		 DB	 5
  00143	05		 DB	 5
  00144	05		 DB	 5
  00145	04		 DB	 4
  00146	04		 DB	 4
?OnNotify@CListView@@UAEHPAUtagNMHDR@@PAJ@Z ENDP	; CListView::OnNotify
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnColumnClick@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
_TEXT	SEGMENT
_pHdr$ = 8
_this$ = -4
?OnColumnClick@CListView@@UAEXPAUtagNMLISTVIEW@@@Z PROC NEAR ; CListView::OnColumnClick, COMDAT
; _this$ = ecx

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 548  :     //
; 549  :     // Resort the list
; 550  :     //
; 551  : 
; 552  :     Sort(pHdr->iSubItem, LVSORT_TOGGLE_DIRECTION);

  00007	6a 01		 push	 1
  00009	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  0000c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000f	51		 push	 ecx
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	ff 90 c4 00 00
	00		 call	 DWORD PTR [eax+196]

; 553  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?OnColumnClick@CListView@@UAEXPAUtagNMLISTVIEW@@@Z ENDP	; CListView::OnColumnClick
_TEXT	ENDS
PUBLIC	?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z	; CListViewItem::PtrFromListCtx
; Function compile flags: /Odt
;	COMDAT ?OnEndLabelEdit@CListView@@UAEHPAUtagLVDISPINFO@@@Z
_TEXT	SEGMENT
_pHdr$ = 8
_this$ = -8
_pItem$ = -4
?OnEndLabelEdit@CListView@@UAEHPAUtagLVDISPINFO@@@Z PROC NEAR ; CListView::OnEndLabelEdit, COMDAT
; _this$ = ecx

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 580  :     CListViewItem *         pItem   = pItem->PtrFromListCtx(pHdr->item.lParam);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  0000c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z ; CListViewItem::PtrFromListCtx
  00015	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax

; 581  : 
; 582  :     if(!pHdr->item.pszText)

  00018	8b 55 08	 mov	 edx, DWORD PTR _pHdr$[ebp]
  0001b	83 7a 20 00	 cmp	 DWORD PTR [edx+32], 0
  0001f	75 04		 jne	 SHORT $L50610

; 583  :     {
; 584  :         return FALSE;

  00021	33 c0		 xor	 eax, eax
  00023	eb 23		 jmp	 SHORT $L50608
$L50610:

; 585  :     }
; 586  : 
; 587  :     if(!*pHdr->item.pszText)

  00025	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  00028	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0002b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0002e	85 d2		 test	 edx, edx
  00030	75 04		 jne	 SHORT $L50611

; 588  :     {
; 589  :         return FALSE;

  00032	33 c0		 xor	 eax, eax
  00034	eb 12		 jmp	 SHORT $L50608
$L50611:

; 590  :     }
; 591  : 
; 592  :     return pItem->OnEndLabelEdit(pHdr->item.pszText);

  00036	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  00039	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0003c	51		 push	 ecx
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _pItem$[ebp]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00045	ff 50 24	 call	 DWORD PTR [eax+36]
$L50608:

; 593  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?OnEndLabelEdit@CListView@@UAEHPAUtagLVDISPINFO@@@Z ENDP ; CListView::OnEndLabelEdit
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.h
_TEXT	ENDS
;	COMDAT ?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z
_TEXT	SEGMENT
_lParam$ = 8
?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z PROC NEAR	; CListViewItem::PtrFromListCtx, COMDAT

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :     return (CListViewItem *)lParam;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lParam$[ebp]

; 232  : }

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z ENDP		; CListViewItem::PtrFromListCtx
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
_TEXT	ENDS
;	COMDAT ?OnItemChanged@CListView@@UAEXPAUtagNMLISTVIEW@@@Z
_TEXT	SEGMENT
_pHdr$ = 8
_this$ = -8
_pItem$ = -4
?OnItemChanged@CListView@@UAEXPAUtagNMLISTVIEW@@@Z PROC NEAR ; CListView::OnItemChanged, COMDAT
; _this$ = ecx

; 619  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 620  :     CListViewItem *         pItem   = pItem->PtrFromListCtx(pHdr->lParam);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  0000c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z ; CListViewItem::PtrFromListCtx
  00015	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax

; 621  : 
; 622  :     if(pHdr->uChanged & LVIF_STATE)

  00018	8b 55 08	 mov	 edx, DWORD PTR _pHdr$[ebp]
  0001b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0001e	83 e0 08	 and	 eax, 8
  00021	85 c0		 test	 eax, eax
  00023	74 19		 je	 SHORT $L50617

; 623  :     {
; 624  :         pItem->OnStateChanged(pHdr->uOldState, pHdr->uNewState);

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _pHdr$[ebp]
  00028	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR _pHdr$[ebp]
  0002f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00032	51		 push	 ecx
  00033	8b 55 fc	 mov	 edx, DWORD PTR _pItem$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  0003b	ff 50 28	 call	 DWORD PTR [eax+40]
$L50617:

; 625  :     }
; 626  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?OnItemChanged@CListView@@UAEXPAUtagNMLISTVIEW@@@Z ENDP	; CListView::OnItemChanged
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDoubleClick@CListView@@UAEXPAUtagNMHDR@@@Z
_TEXT	SEGMENT
_this$ = -8
_pItem$ = -4
?OnDoubleClick@CListView@@UAEXPAUtagNMHDR@@@Z PROC NEAR	; CListView::OnDoubleClick, COMDAT
; _this$ = ecx

; 652  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 653  :     CListViewItem *         pItem   = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 0
$L50624:

; 654  : 
; 655  :     //
; 656  :     // Find the selected item or items and call the activation callback
; 657  :     //
; 658  : 
; 659  :     while(pItem = GetNextItem(pItem, LVNI_SELECTED))

  00010	6a 02		 push	 2
  00012	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00015	50		 push	 eax
  00016	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	ff 92 b8 00 00
	00		 call	 DWORD PTR [edx+184]
  00024	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax
  00027	83 7d fc 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0002b	74 0d		 je	 SHORT $L50625

; 660  :     {
; 661  :         pItem->OnDoubleClick();

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00035	ff 52 2c	 call	 DWORD PTR [edx+44]

; 662  :     }

  00038	eb d6		 jmp	 SHORT $L50624
$L50625:

; 663  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?OnDoubleClick@CListView@@UAEXPAUtagNMHDR@@@Z ENDP	; CListView::OnDoubleClick
_TEXT	ENDS
PUBLIC	??0CListViewType@@QAE@PAVCListView@@PBDH@Z	; CListViewType::CListViewType
PUBLIC	??_C@_07PFHL@pszText?$AA@			; `string'
PUBLIC	??_C@_0L@POGL@hLargeIcon?$AA@			; `string'
PUBLIC	??_C@_0L@MOJE@hSmallIcon?$AA@			; `string'
PUBLIC	??_C@_0CF@OABB@nLargeImageIndex?5?$DN?$DN?5nSmallImageI@ ; `string'
PUBLIC	??_C@_0CP@HDMB@CListViewType?$CIthis?0?5pszText?0?5nLa@ ; `string'
EXTRN	__imp__ImageList_ReplaceIcon@12:NEAR
;	COMDAT ??_C@_07PFHL@pszText?$AA@
CONST	SEGMENT
??_C@_07PFHL@pszText?$AA@ DB 'pszText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POGL@hLargeIcon?$AA@
CONST	SEGMENT
??_C@_0L@POGL@hLargeIcon?$AA@ DB 'hLargeIcon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MOJE@hSmallIcon?$AA@
CONST	SEGMENT
??_C@_0L@MOJE@hSmallIcon?$AA@ DB 'hSmallIcon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OABB@nLargeImageIndex?5?$DN?$DN?5nSmallImageI@
CONST	SEGMENT
??_C@_0CF@OABB@nLargeImageIndex?5?$DN?$DN?5nSmallImageI@ DB 'nLargeImageI'
	DB	'ndex == nSmallImageIndex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HDMB@CListViewType?$CIthis?0?5pszText?0?5nLa@
CONST	SEGMENT
??_C@_0CP@HDMB@CListViewType?$CIthis?0?5pszText?0?5nLa@ DB 'CListViewType'
	DB	'(this, pszText, nLargeImageIndex)', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?RegisterType@CListView@@UAEHPBDPAUHICON__@@1@Z
_TEXT	SEGMENT
$T51292 = -16
_pszText$ = 8
_hLargeIcon$ = 12
_hSmallIcon$ = 16
_this$ = -20
_pType$ = -8
_nLargeImageIndex$ = -12
_nSmallImageIndex$ = -4
?RegisterType@CListView@@UAEHPBDPAUHICON__@@1@Z PROC NEAR ; CListView::RegisterType, COMDAT
; _this$ = ecx

; 692  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 693  :     CListViewType *         pType;
; 694  :     int                     nLargeImageIndex;
; 695  :     int                     nSmallImageIndex;
; 696  : 
; 697  :     ASSERT(pszText);

  00009	68 b9 02 00 00	 push	 697			; 000002b9H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07PFHL@pszText?$AA@ ; `string'
  00018	33 c0		 xor	 eax, eax
  0001a	83 7d 08 00	 cmp	 DWORD PTR _pszText$[ebp], 0
  0001e	0f 94 c0	 sete	 al
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 698  :     ASSERT(hLargeIcon);

  0002a	68 ba 02 00 00	 push	 698			; 000002baH
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00034	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@POGL@hLargeIcon?$AA@ ; `string'
  00039	33 c9		 xor	 ecx, ecx
  0003b	83 7d 0c 00	 cmp	 DWORD PTR _hLargeIcon$[ebp], 0
  0003f	0f 94 c1	 sete	 cl
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 699  :     ASSERT(hSmallIcon);

  0004b	68 bb 02 00 00	 push	 699			; 000002bbH
  00050	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00055	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@MOJE@hSmallIcon?$AA@ ; `string'
  0005a	33 d2		 xor	 edx, edx
  0005c	83 7d 10 00	 cmp	 DWORD PTR _hSmallIcon$[ebp], 0
  00060	0f 94 c2	 sete	 dl
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 700  : 
; 701  :     //
; 702  :     // Make sure the type isn't already registered
; 703  :     //
; 704  : 
; 705  :     if(FindRegisteredType(pszText))

  0006c	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	8b 11		 mov	 edx, DWORD PTR [ecx]
  00075	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	ff 92 cc 00 00
	00		 call	 DWORD PTR [edx+204]
  0007e	85 c0		 test	 eax, eax
  00080	74 0a		 je	 SHORT $L50638

; 706  :     {
; 707  :         return TRUE;

  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	e9 c0 00 00 00	 jmp	 $L50631
$L50638:

; 708  :     }
; 709  : 
; 710  :     //
; 711  :     // Add the icon to the image list
; 712  :     //
; 713  : 
; 714  :     if(-1 == (nLargeImageIndex = ImageList_AddIcon(m_hLargeImageList, hLargeIcon)))

  0008c	8b 45 0c	 mov	 eax, DWORD PTR _hLargeIcon$[ebp]
  0008f	50		 push	 eax
  00090	6a ff		 push	 -1
  00092	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00098	52		 push	 edx
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_ReplaceIcon@12
  0009f	89 45 f4	 mov	 DWORD PTR _nLargeImageIndex$[ebp], eax
  000a2	83 7d f4 ff	 cmp	 DWORD PTR _nLargeImageIndex$[ebp], -1
  000a6	75 07		 jne	 SHORT $L50639

; 715  :     {
; 716  :         return FALSE;

  000a8	33 c0		 xor	 eax, eax
  000aa	e9 9d 00 00 00	 jmp	 $L50631
$L50639:

; 717  :     }
; 718  : 
; 719  :     if(-1 == (nSmallImageIndex = ImageList_AddIcon(m_hSmallImageList, hSmallIcon)))

  000af	8b 45 10	 mov	 eax, DWORD PTR _hSmallIcon$[ebp]
  000b2	50		 push	 eax
  000b3	6a ff		 push	 -1
  000b5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	8b 51 64	 mov	 edx, DWORD PTR [ecx+100]
  000bb	52		 push	 edx
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ImageList_ReplaceIcon@12
  000c2	89 45 fc	 mov	 DWORD PTR _nSmallImageIndex$[ebp], eax
  000c5	83 7d fc ff	 cmp	 DWORD PTR _nSmallImageIndex$[ebp], -1
  000c9	75 04		 jne	 SHORT $L50640

; 720  :     {
; 721  :         return FALSE;

  000cb	33 c0		 xor	 eax, eax
  000cd	eb 7d		 jmp	 SHORT $L50631
$L50640:

; 722  :     }
; 723  : 
; 724  :     ASSERT(nLargeImageIndex == nSmallImageIndex);

  000cf	68 d4 02 00 00	 push	 724			; 000002d4H
  000d4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000d9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OABB@nLargeImageIndex?5?$DN?$DN?5nSmallImageI@ ; `string'
  000de	8b 45 f4	 mov	 eax, DWORD PTR _nLargeImageIndex$[ebp]
  000e1	33 c9		 xor	 ecx, ecx
  000e3	3b 45 fc	 cmp	 eax, DWORD PTR _nSmallImageIndex$[ebp]
  000e6	0f 95 c1	 setne	 cl
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000ef	83 c4 10	 add	 esp, 16			; 00000010H

; 725  : 
; 726  :     //
; 727  :     // Add the type to the list
; 728  :     //
; 729  :     
; 730  :     if(!(pType = NEW(CListViewType(this, pszText, nLargeImageIndex))))

  000f2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CP@HDMB@CListViewType?$CIthis?0?5pszText?0?5nLa@ ; `string'
  000f7	68 da 02 00 00	 push	 730			; 000002daH
  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00101	68 14 01 00 00	 push	 276			; 00000114H
  00106	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  0010b	83 c4 10	 add	 esp, 16			; 00000010H
  0010e	89 45 f0	 mov	 DWORD PTR $T51292[ebp], eax
  00111	83 7d f0 00	 cmp	 DWORD PTR $T51292[ebp], 0
  00115	74 19		 je	 SHORT $L51293
  00117	8b 55 f4	 mov	 edx, DWORD PTR _nLargeImageIndex$[ebp]
  0011a	52		 push	 edx
  0011b	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0011e	50		 push	 eax
  0011f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	51		 push	 ecx
  00123	8b 4d f0	 mov	 ecx, DWORD PTR $T51292[ebp]
  00126	e8 00 00 00 00	 call	 ??0CListViewType@@QAE@PAVCListView@@PBDH@Z ; CListViewType::CListViewType
  0012b	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  0012e	eb 07		 jmp	 SHORT $L51294
$L51293:
  00130	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L51294:
  00137	8b 55 e8	 mov	 edx, DWORD PTR -24+[ebp]
  0013a	89 55 f8	 mov	 DWORD PTR _pType$[ebp], edx
  0013d	83 7d f8 00	 cmp	 DWORD PTR _pType$[ebp], 0
  00141	75 04		 jne	 SHORT $L50644

; 731  :     {
; 732  :         return FALSE;

  00143	33 c0		 xor	 eax, eax
  00145	eb 05		 jmp	 SHORT $L50631
$L50644:

; 733  :     }
; 734  : 
; 735  :     return TRUE;

  00147	b8 01 00 00 00	 mov	 eax, 1
$L50631:

; 736  : }

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 0c 00	 ret	 12			; 0000000cH
?RegisterType@CListView@@UAEHPBDPAUHICON__@@1@Z ENDP	; CListView::RegisterType
_TEXT	ENDS
EXTRN	?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolAlloc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
_TEXT	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  :     return DirectSound::CMemoryManager::TrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc

; 234  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
_TEXT	ENDS
;	COMDAT ?InsertColumn@CListView@@UAEHPBDW4LVCTYPE@@H@Z
_TEXT	SEGMENT
_pszText$ = 8
_nDataType$ = 12
_fSortAscending$ = 16
_this$ = -36
_lvc$ = -32
?InsertColumn@CListView@@UAEHPBDW4LVCTYPE@@H@Z PROC NEAR ; CListView::InsertColumn, COMDAT
; _this$ = ecx

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 767  :     LVCOLUMN                lvc;
; 768  :     
; 769  :     //
; 770  :     // Insert the column
; 771  :     //
; 772  : 
; 773  :     lvc.mask = LVCF_SUBITEM | LVCF_TEXT;

  00009	c7 45 e0 0c 00
	00 00		 mov	 DWORD PTR _lvc$[ebp], 12 ; 0000000cH

; 774  :     lvc.pszText = (LPTSTR)pszText;

  00010	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  00013	89 45 ec	 mov	 DWORD PTR _lvc$[ebp+12], eax

; 775  :     lvc.iSubItem = m_nColumnCount;

  00016	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 91 f0 01 00
	00		 mov	 edx, DWORD PTR [ecx+496]
  0001f	89 55 f4	 mov	 DWORD PTR _lvc$[ebp+20], edx

; 776  : 
; 777  :     if(-1 == ListView_InsertColumn(m_ListCtrl, m_nColumnCount, &lvc))

  00022	8d 45 e0	 lea	 eax, DWORD PTR _lvc$[ebp]
  00025	50		 push	 eax
  00026	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 91 f0 01 00
	00		 mov	 edx, DWORD PTR [ecx+496]
  0002f	52		 push	 edx
  00030	68 1b 10 00 00	 push	 4123			; 0000101bH
  00035	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 30	 add	 ecx, 48			; 00000030H
  0003b	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00041	ff 52 58	 call	 DWORD PTR [edx+88]
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0004b	83 f8 ff	 cmp	 eax, -1
  0004e	75 04		 jne	 SHORT $L50659

; 778  :     {
; 779  :         return FALSE;

  00050	33 c0		 xor	 eax, eax
  00052	eb 75		 jmp	 SHORT $L50651
$L50659:

; 780  :     }
; 781  : 
; 782  :     //
; 783  :     // Save the column's data
; 784  :     //
; 785  : 
; 786  :     m_aColumnData[m_nColumnCount].nHeaderStringId = -1;

  00054	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 88 f0 01 00
	00		 mov	 ecx, DWORD PTR [eax+496]
  0005d	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00060	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	c7 44 0a 70 ff
	ff ff ff	 mov	 DWORD PTR [edx+ecx+112], -1

; 787  :     m_aColumnData[m_nColumnCount].nDataType = nDataType;

  0006b	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 88 f0 01 00
	00		 mov	 ecx, DWORD PTR [eax+496]
  00074	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00077	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _nDataType$[ebp]
  0007d	89 44 0a 74	 mov	 DWORD PTR [edx+ecx+116], eax

; 788  :     m_aColumnData[m_nColumnCount].fSortAscending = fSortAscending;

  00081	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	8b 91 f0 01 00
	00		 mov	 edx, DWORD PTR [ecx+496]
  0008a	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0008d	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR _fSortAscending$[ebp]
  00093	89 4c 10 78	 mov	 DWORD PTR [eax+edx+120], ecx

; 789  : 
; 790  :     //
; 791  :     // Resize the column
; 792  :     //
; 793  : 
; 794  :     ResizeColumn(m_nColumnCount);

  00097	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  0009a	8b 82 f0 01 00
	00		 mov	 eax, DWORD PTR [edx+496]
  000a0	50		 push	 eax
  000a1	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a6	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	ff 92 ac 00 00
	00		 call	 DWORD PTR [edx+172]

; 795  : 
; 796  :     //
; 797  :     // Increment the column count
; 798  :     //
; 799  : 
; 800  :     m_nColumnCount++;

  000af	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  000b2	8b 88 f0 01 00
	00		 mov	 ecx, DWORD PTR [eax+496]
  000b8	83 c1 01	 add	 ecx, 1
  000bb	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  000be	89 8a f0 01 00
	00		 mov	 DWORD PTR [edx+496], ecx

; 801  : 
; 802  :     return TRUE;

  000c4	b8 01 00 00 00	 mov	 eax, 1
$L50651:

; 803  : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 0c 00	 ret	 12			; 0000000cH
?InsertColumn@CListView@@UAEHPBDW4LVCTYPE@@H@Z ENDP	; CListView::InsertColumn
_TEXT	ENDS
EXTRN	_FormatStringResourceStatic:NEAR
; Function compile flags: /Odt
;	COMDAT ?InsertColumns@CListView@@UAEHPBULVCOLUMNDATA@@I@Z
_TEXT	SEGMENT
_paColumnData$ = 8
_nColumnCount$ = 12
_this$ = -12
_fSuccess$ = -8
_fRedraw$ = -4
?InsertColumns@CListView@@UAEHPBULVCOLUMNDATA@@I@Z PROC NEAR ; CListView::InsertColumns, COMDAT
; _this$ = ecx

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 832  :     BOOL                    fSuccess    = TRUE;

  00009	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 1

; 833  :     BOOL                    fRedraw;
; 834  : 
; 835  :     fRedraw = SetRedraw(FALSE);

  00010	6a 00		 push	 0
  00012	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	ff 52 14	 call	 DWORD PTR [edx+20]
  0001d	89 45 fc	 mov	 DWORD PTR _fRedraw$[ebp], eax
$L50668:

; 836  : 
; 837  :     while(fSuccess && nColumnCount--)

  00020	83 7d f8 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00024	74 49		 je	 SHORT $L50669
  00026	8b 45 0c	 mov	 eax, DWORD PTR _nColumnCount$[ebp]
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _nColumnCount$[ebp]
  0002c	83 e9 01	 sub	 ecx, 1
  0002f	89 4d 0c	 mov	 DWORD PTR _nColumnCount$[ebp], ecx
  00032	85 c0		 test	 eax, eax
  00034	74 39		 je	 SHORT $L50669

; 838  :     {
; 839  :         fSuccess = InsertColumn(FormatStringResourceStatic(paColumnData->nHeaderStringId), paColumnData->nDataType, paColumnData->fSortAscending);

  00036	8b 55 08	 mov	 edx, DWORD PTR _paColumnData$[ebp]
  00039	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0003c	50		 push	 eax
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _paColumnData$[ebp]
  00040	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00043	52		 push	 edx
  00044	8b 45 08	 mov	 eax, DWORD PTR _paColumnData$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _FormatStringResourceStatic
  0004f	83 c4 04	 add	 esp, 4
  00052	50		 push	 eax
  00053	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  00061	89 45 f8	 mov	 DWORD PTR _fSuccess$[ebp], eax

; 840  : 
; 841  :         paColumnData++;

  00064	8b 4d 08	 mov	 ecx, DWORD PTR _paColumnData$[ebp]
  00067	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0006a	89 4d 08	 mov	 DWORD PTR _paColumnData$[ebp], ecx

; 842  :     }

  0006d	eb b1		 jmp	 SHORT $L50668
$L50669:

; 843  : 
; 844  :     SetRedraw(fRedraw);

  0006f	8b 55 fc	 mov	 edx, DWORD PTR _fRedraw$[ebp]
  00072	52		 push	 edx
  00073	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 10		 mov	 edx, DWORD PTR [eax]
  00078	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	ff 52 14	 call	 DWORD PTR [edx+20]

; 845  : 
; 846  :     return fSuccess;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _fSuccess$[ebp]

; 847  : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?InsertColumns@CListView@@UAEHPBULVCOLUMNDATA@@I@Z ENDP	; CListView::InsertColumns
_TEXT	ENDS
PUBLIC	?StringSortCallback@CListView@@CGHJJJ@Z		; CListView::StringSortCallback
PUBLIC	?NumericSortCallback@CListView@@CGHJJJ@Z	; CListView::NumericSortCallback
PUBLIC	??_C@_0BO@IJLG@nColumnIndex?5?$DM?5m_nColumnCount?$AA@ ; `string'
PUBLIC	??_C@_0EA@PDIO@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_DECEND@ ; `string'
PUBLIC	??_C@_0EA@HPBA@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_ASCEND@ ; `string'
;	COMDAT ??_C@_0BO@IJLG@nColumnIndex?5?$DM?5m_nColumnCount?$AA@
CONST	SEGMENT
??_C@_0BO@IJLG@nColumnIndex?5?$DM?5m_nColumnCount?$AA@ DB 'nColumnIndex <'
	DB	' m_nColumnCount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@PDIO@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_DECEND@
CONST	SEGMENT
??_C@_0EA@PDIO@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_DECEND@ DB '!(dwFl'
	DB	'ags & (LVSORT_FORCE_DECENDING | LVSORT_TOGGLE_DIRECTION))', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@HPBA@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_ASCEND@
CONST	SEGMENT
??_C@_0EA@HPBA@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_ASCEND@ DB '!(dwFl'
	DB	'ags & (LVSORT_FORCE_ASCENDING | LVSORT_TOGGLE_DIRECTION))', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Sort@CListView@@UAEXIK@Z
_TEXT	SEGMENT
_nColumnIndex$ = 8
_dwFlags$ = 12
_this$ = -16
_SortData$ = -12
?Sort@CListView@@UAEXIK@Z PROC NEAR			; CListView::Sort, COMDAT
; _this$ = ecx

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 876  :     LVSORTITEMDATA          SortData;
; 877  :     
; 878  :     //
; 879  :     // If the column index is -1, use the last column someone sorted by
; 880  :     //
; 881  :     
; 882  :     if(-1 == nColumnIndex)

  00009	83 7d 08 ff	 cmp	 DWORD PTR _nColumnIndex$[ebp], -1
  0000d	75 0c		 jne	 SHORT $L50676

; 883  :     {
; 884  :         nColumnIndex = m_nLastSortColumn;

  0000f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 88 f4 01 00
	00		 mov	 ecx, DWORD PTR [eax+500]
  00018	89 4d 08	 mov	 DWORD PTR _nColumnIndex$[ebp], ecx
$L50676:

; 885  :     }
; 886  :     
; 887  :     //
; 888  :     // Set up sort data
; 889  :     //
; 890  :     
; 891  :     ASSERT(nColumnIndex < m_nColumnCount);

  0001b	68 7b 03 00 00	 push	 891			; 0000037bH
  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@IJLG@nColumnIndex?5?$DM?5m_nColumnCount?$AA@ ; `string'
  0002a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 45 08	 mov	 eax, DWORD PTR _nColumnIndex$[ebp]
  00030	3b 82 f0 01 00
	00		 cmp	 eax, DWORD PTR [edx+496]
  00036	1b c9		 sbb	 ecx, ecx
  00038	41		 inc	 ecx
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003f	83 c4 10	 add	 esp, 16			; 00000010H

; 892  : 
; 893  :     SortData.hWnd = m_ListCtrl;

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 30	 add	 ecx, 48			; 00000030H
  00048	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0004e	ff 50 58	 call	 DWORD PTR [eax+88]
  00051	89 45 f4	 mov	 DWORD PTR _SortData$[ebp], eax

; 894  :     SortData.nSubItem = nColumnIndex;

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _nColumnIndex$[ebp]
  00057	89 4d f8	 mov	 DWORD PTR _SortData$[ebp+4], ecx

; 895  : 
; 896  :     if(dwFlags & LVSORT_FORCE_ASCENDING)

  0005a	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0005d	83 e2 02	 and	 edx, 2
  00060	85 d2		 test	 edx, edx
  00062	74 2d		 je	 SHORT $L50678

; 897  :     {
; 898  :         ASSERT(!(dwFlags & (LVSORT_FORCE_DECENDING | LVSORT_TOGGLE_DIRECTION)));

  00064	68 82 03 00 00	 push	 898			; 00000382H
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0006e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@PDIO@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_DECEND@ ; `string'
  00073	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00076	83 e0 05	 and	 eax, 5
  00079	f7 d8		 neg	 eax
  0007b	1b c0		 sbb	 eax, eax
  0007d	f7 d8		 neg	 eax
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00085	83 c4 10	 add	 esp, 16			; 00000010H

; 899  :         SortData.fAscending = TRUE;

  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _SortData$[ebp+8], 1

; 900  :     }
; 901  :     else if(dwFlags & LVSORT_FORCE_DECENDING)

  0008f	eb 71		 jmp	 SHORT $L50680
$L50678:
  00091	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00094	83 e1 04	 and	 ecx, 4
  00097	85 c9		 test	 ecx, ecx
  00099	74 2d		 je	 SHORT $L50681

; 902  :     {
; 903  :         ASSERT(!(dwFlags & (LVSORT_FORCE_ASCENDING | LVSORT_TOGGLE_DIRECTION)));

  0009b	68 87 03 00 00	 push	 903			; 00000387H
  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@HPBA@?$CB?$CIdwFlags?5?$CG?5?$CILVSORT_FORCE_ASCEND@ ; `string'
  000aa	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  000ad	83 e2 03	 and	 edx, 3
  000b0	f7 da		 neg	 edx
  000b2	1b d2		 sbb	 edx, edx
  000b4	f7 da		 neg	 edx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000bc	83 c4 10	 add	 esp, 16			; 00000010H

; 904  :         SortData.fAscending = FALSE;

  000bf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _SortData$[ebp+8], 0

; 905  :     }
; 906  :     else

  000c6	eb 3a		 jmp	 SHORT $L50683
$L50681:

; 907  :     {
; 908  :         SortData.fAscending = m_aColumnData[nColumnIndex].fSortAscending;

  000c8	8b 45 08	 mov	 eax, DWORD PTR _nColumnIndex$[ebp]
  000cb	6b c0 0c	 imul	 eax, 12			; 0000000cH
  000ce	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 54 01 78	 mov	 edx, DWORD PTR [ecx+eax+120]
  000d5	89 55 fc	 mov	 DWORD PTR _SortData$[ebp+8], edx

; 909  : 
; 910  :         if(dwFlags & LVSORT_TOGGLE_DIRECTION)

  000d8	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  000db	83 e0 01	 and	 eax, 1
  000de	85 c0		 test	 eax, eax
  000e0	74 20		 je	 SHORT $L50684

; 911  :         {
; 912  :             m_aColumnData[nColumnIndex].fSortAscending = !m_aColumnData[nColumnIndex].fSortAscending;

  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _nColumnIndex$[ebp]
  000e5	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  000e8	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000eb	33 c0		 xor	 eax, eax
  000ed	83 7c 0a 78 00	 cmp	 DWORD PTR [edx+ecx+120], 0
  000f2	0f 94 c0	 sete	 al
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _nColumnIndex$[ebp]
  000f8	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  000fb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	89 44 0a 78	 mov	 DWORD PTR [edx+ecx+120], eax
$L50684:
$L50683:
$L50680:

; 913  :         }
; 914  :     }
; 915  : 
; 916  :     //
; 917  :     // Sort
; 918  :     //
; 919  : 
; 920  :     if(LVCTYPE_NUMBER == m_aColumnData[nColumnIndex].nDataType)

  00102	8b 45 08	 mov	 eax, DWORD PTR _nColumnIndex$[ebp]
  00105	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00108	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	83 7c 01 74 01	 cmp	 DWORD PTR [ecx+eax+116], 1
  00110	75 26		 jne	 SHORT $L50685

; 921  :     {
; 922  :         ListView_SortItemsEx(m_ListCtrl, NumericSortCallback, &SortData);

  00112	68 00 00 00 00	 push	 OFFSET FLAT:?NumericSortCallback@CListView@@CGHJJJ@Z ; CListView::NumericSortCallback
  00117	8d 55 f4	 lea	 edx, DWORD PTR _SortData$[ebp]
  0011a	52		 push	 edx
  0011b	68 51 10 00 00	 push	 4177			; 00001051H
  00120	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	83 c1 30	 add	 ecx, 48			; 00000030H
  00126	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00129	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0012c	ff 52 58	 call	 DWORD PTR [edx+88]
  0012f	50		 push	 eax
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 923  :     }
; 924  :     else

  00136	eb 24		 jmp	 SHORT $L50691
$L50685:

; 925  :     {
; 926  :         ListView_SortItemsEx(m_ListCtrl, StringSortCallback, &SortData);

  00138	68 00 00 00 00	 push	 OFFSET FLAT:?StringSortCallback@CListView@@CGHJJJ@Z ; CListView::StringSortCallback
  0013d	8d 45 f4	 lea	 eax, DWORD PTR _SortData$[ebp]
  00140	50		 push	 eax
  00141	68 51 10 00 00	 push	 4177			; 00001051H
  00146	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	83 c1 30	 add	 ecx, 48			; 00000030H
  0014c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0014f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00152	ff 50 58	 call	 DWORD PTR [eax+88]
  00155	50		 push	 eax
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$L50691:

; 927  :     }
; 928  : 
; 929  :     //
; 930  :     // Save the column index
; 931  :     //
; 932  :     
; 933  :     m_nLastSortColumn = nColumnIndex;

  0015c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	8b 55 08	 mov	 edx, DWORD PTR _nColumnIndex$[ebp]
  00162	89 91 f4 01 00
	00		 mov	 DWORD PTR [ecx+500], edx

; 934  : 
; 935  :     //
; 936  :     // Any time we sort, all the child items lose their item indices because
; 937  :     // the stupid list-view stores everything as an index, not a handle.
; 938  :     //
; 939  : 
; 940  :     FixItemIndices();

  00168	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0016b	8b 10		 mov	 edx, DWORD PTR [eax]
  0016d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	ff 92 e4 00 00
	00		 call	 DWORD PTR [edx+228]

; 941  : }

  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
?Sort@CListView@@UAEXIK@Z ENDP				; CListView::Sort
_TEXT	ENDS
EXTRN	_strcmp:NEAR
; Function compile flags: /Odt
;	COMDAT ?StringSortCallback@CListView@@CGHJJJ@Z
_TEXT	SEGMENT
_nItem0$ = 8
_nItem1$ = 12
_lContext$ = 16
_pContext$ = -4
_szText$ = -520
_nResult$ = -524
__ms_lvi$50706 = -564
__ms_lvi$50710 = -604
?StringSortCallback@CListView@@CGHJJJ@Z PROC NEAR	; CListView::StringSortCallback, COMDAT

; 973  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH

; 974  :     LPCLVSORTITEMDATA       pContext            = (LPCLVSORTITEMDATA)lContext;

  00009	8b 45 10	 mov	 eax, DWORD PTR _lContext$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _pContext$[ebp], eax

; 975  :     CHAR                    szText[2][0x100];
; 976  :     int                     nResult;
; 977  :     
; 978  :     ListView_GetItemText(pContext->hWnd, nItem0, pContext->nSubItem, szText[0], NUMELMS(szText[0]));

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 95 d4 fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50706[ebp+8], edx
  0001b	c7 85 e4 fd ff
	ff 00 01 00 00	 mov	 DWORD PTR __ms_lvi$50706[ebp+24], 256 ; 00000100H
  00025	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0002b	89 85 e0 fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50706[ebp+20], eax
  00031	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR __ms_lvi$50706[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR _nItem0$[ebp]
  0003b	52		 push	 edx
  0003c	68 2d 10 00 00	 push	 4141			; 0000102dH
  00041	8b 45 fc	 mov	 eax, DWORD PTR _pContext$[ebp]
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	51		 push	 ecx
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 979  :     ListView_GetItemText(pContext->hWnd, nItem1, pContext->nSubItem, szText[1], NUMELMS(szText[1]));

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _pContext$[ebp]
  00050	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00053	89 85 ac fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50710[ebp+8], eax
  00059	c7 85 bc fd ff
	ff 00 01 00 00	 mov	 DWORD PTR __ms_lvi$50710[ebp+24], 256 ; 00000100H
  00063	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp+256]
  00069	89 8d b8 fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50710[ebp+20], ecx
  0006f	8d 95 a4 fd ff
	ff		 lea	 edx, DWORD PTR __ms_lvi$50710[ebp]
  00075	52		 push	 edx
  00076	8b 45 0c	 mov	 eax, DWORD PTR _nItem1$[ebp]
  00079	50		 push	 eax
  0007a	68 2d 10 00 00	 push	 4141			; 0000102dH
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	52		 push	 edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 980  : 
; 981  :     nResult = strcmp(szText[0], szText[1]);

  0008b	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp+256]
  00091	50		 push	 eax
  00092	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 _strcmp
  0009e	83 c4 08	 add	 esp, 8
  000a1	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _nResult$[ebp], eax

; 982  : 
; 983  :     if(!pContext->fAscending)

  000a7	8b 55 fc	 mov	 edx, DWORD PTR _pContext$[ebp]
  000aa	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000ae	75 0e		 jne	 SHORT $L50714

; 984  :     {
; 985  :         nResult = -nResult;

  000b0	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _nResult$[ebp]
  000b6	f7 d8		 neg	 eax
  000b8	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _nResult$[ebp], eax
$L50714:

; 986  :     }
; 987  : 
; 988  :     return nResult;

  000be	8b 85 f4 fd ff
	ff		 mov	 eax, DWORD PTR _nResult$[ebp]

; 989  : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 0c 00	 ret	 12			; 0000000cH
?StringSortCallback@CListView@@CGHJJJ@Z ENDP		; CListView::StringSortCallback
_TEXT	ENDS
EXTRN	_atoi:NEAR
; Function compile flags: /Odt
;	COMDAT ?NumericSortCallback@CListView@@CGHJJJ@Z
_TEXT	SEGMENT
_nItem0$ = 8
_nItem1$ = 12
_lContext$ = 16
_pContext$ = -4
_szText$ = -520
_nValue$ = -528
_nResult$ = -532
__ms_lvi$50725 = -572
__ms_lvi$50729 = -612
?NumericSortCallback@CListView@@CGHJJJ@Z PROC NEAR	; CListView::NumericSortCallback, COMDAT

; 1021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 02 00
	00		 sub	 esp, 612		; 00000264H

; 1022 :     LPCLVSORTITEMDATA       pContext            = (LPCLVSORTITEMDATA)lContext;

  00009	8b 45 10	 mov	 eax, DWORD PTR _lContext$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _pContext$[ebp], eax

; 1023 :     CHAR                    szText[2][0x100];
; 1024 :     int                     nValue[2];
; 1025 :     int                     nResult;
; 1026 :     
; 1027 :     ListView_GetItemText(pContext->hWnd, nItem0, pContext->nSubItem, szText[0], NUMELMS(szText[0]));

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00012	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00015	89 95 cc fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50725[ebp+8], edx
  0001b	c7 85 dc fd ff
	ff 00 01 00 00	 mov	 DWORD PTR __ms_lvi$50725[ebp+24], 256 ; 00000100H
  00025	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0002b	89 85 d8 fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50725[ebp+20], eax
  00031	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR __ms_lvi$50725[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR _nItem0$[ebp]
  0003b	52		 push	 edx
  0003c	68 2d 10 00 00	 push	 4141			; 0000102dH
  00041	8b 45 fc	 mov	 eax, DWORD PTR _pContext$[ebp]
  00044	8b 08		 mov	 ecx, DWORD PTR [eax]
  00046	51		 push	 ecx
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1028 :     ListView_GetItemText(pContext->hWnd, nItem1, pContext->nSubItem, szText[1], NUMELMS(szText[1]));

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _pContext$[ebp]
  00050	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00053	89 85 a4 fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50729[ebp+8], eax
  00059	c7 85 b4 fd ff
	ff 00 01 00 00	 mov	 DWORD PTR __ms_lvi$50729[ebp+24], 256 ; 00000100H
  00063	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp+256]
  00069	89 8d b0 fd ff
	ff		 mov	 DWORD PTR __ms_lvi$50729[ebp+20], ecx
  0006f	8d 95 9c fd ff
	ff		 lea	 edx, DWORD PTR __ms_lvi$50729[ebp]
  00075	52		 push	 edx
  00076	8b 45 0c	 mov	 eax, DWORD PTR _nItem1$[ebp]
  00079	50		 push	 eax
  0007a	68 2d 10 00 00	 push	 4141			; 0000102dH
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _pContext$[ebp]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	52		 push	 edx
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1029 : 
; 1030 :     nValue[0] = atoi(szText[0]);

  0008b	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _atoi
  00097	83 c4 04	 add	 esp, 4
  0009a	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _nValue$[ebp], eax

; 1031 :     nValue[1] = atoi(szText[1]);

  000a0	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp+256]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 _atoi
  000ac	83 c4 04	 add	 esp, 4
  000af	89 85 f4 fd ff
	ff		 mov	 DWORD PTR _nValue$[ebp+4], eax

; 1032 : 
; 1033 :     nResult = nValue[0] - nValue[1];

  000b5	8b 95 f0 fd ff
	ff		 mov	 edx, DWORD PTR _nValue$[ebp]
  000bb	2b 95 f4 fd ff
	ff		 sub	 edx, DWORD PTR _nValue$[ebp+4]
  000c1	89 95 ec fd ff
	ff		 mov	 DWORD PTR _nResult$[ebp], edx

; 1034 : 
; 1035 :     if(!pContext->fAscending)

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _pContext$[ebp]
  000ca	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  000ce	75 0e		 jne	 SHORT $L50733

; 1036 :     {
; 1037 :         nResult = -nResult;

  000d0	8b 8d ec fd ff
	ff		 mov	 ecx, DWORD PTR _nResult$[ebp]
  000d6	f7 d9		 neg	 ecx
  000d8	89 8d ec fd ff
	ff		 mov	 DWORD PTR _nResult$[ebp], ecx
$L50733:

; 1038 :     }
; 1039 : 
; 1040 :     return nResult;

  000de	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _nResult$[ebp]

; 1041 : }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 0c 00	 ret	 12			; 0000000cH
?NumericSortCallback@CListView@@CGHJJJ@Z ENDP		; CListView::NumericSortCallback
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ResizeColumn@CListView@@UAEXI@Z
_TEXT	SEGMENT
_nColumn$ = 8
_this$ = -16
_nColumnWidth$ = -12
_nItemWidth$ = -4
_fRedraw$ = -8
?ResizeColumn@CListView@@UAEXI@Z PROC NEAR		; CListView::ResizeColumn, COMDAT
; _this$ = ecx

; 1067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1068 : 
; 1069 : #if 0
; 1070 : 
; 1071 :     static const int        nMarginWidth    = 7;
; 1072 :     CHAR                    szText[0x100];
; 1073 :     int                     nLargestWidth;
; 1074 :     int                     nWidth;
; 1075 :     int                     nCount;
; 1076 :     LVCOLUMN                lvc;
; 1077 :     int                     i;
; 1078 :     
; 1079 :     //
; 1080 :     // Get the width of the column header text
; 1081 :     //
; 1082 : 
; 1083 :     lvc.mask = LVCF_TEXT;
; 1084 :     lvc.pszText = szText;
; 1085 :     lvc.cchTextMax = NUMELMS(szText);
; 1086 :     
; 1087 :     ListView_GetColumn(m_ListCtrl, nColumn, &lvc);
; 1088 : 
; 1089 :     nLargestWidth = ListView_GetStringWidth(m_ListCtrl, szText);
; 1090 : 
; 1091 :     //
; 1092 :     // Get the width of each item in the column
; 1093 :     //
; 1094 : 
; 1095 :     nCount = ListView_GetItemCount(m_ListCtrl);
; 1096 :     
; 1097 :     for(i = 0; i < nCount; i++)
; 1098 :     {
; 1099 :         ListView_GetItemText(m_ListCtrl, i, nColumn, szText, NUMELMS(szText));
; 1100 : 
; 1101 :         if((nWidth = ListView_GetStringWidth(m_ListCtrl, szText)) > nLargestWidth)
; 1102 :         {
; 1103 :             nLargestWidth = nWidth;
; 1104 :         }
; 1105 :     }
; 1106 : 
; 1107 :     //
; 1108 :     // Factor in the margins and set the column width
; 1109 :     //
; 1110 : 
; 1111 :     ListView_SetColumnWidth(m_ListCtrl, nColumn, nLargestWidth + (nMarginWidth * 2));
; 1112 : 
; 1113 : #else
; 1114 : 
; 1115 :     int                     nColumnWidth;
; 1116 :     int                     nItemWidth;
; 1117 :     BOOL                    fRedraw;
; 1118 : 
; 1119 :     fRedraw = SetRedraw(FALSE);

  00009	6a 00		 push	 0
  0000b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	ff 52 14	 call	 DWORD PTR [edx+20]
  00016	89 45 f8	 mov	 DWORD PTR _fRedraw$[ebp], eax

; 1120 : 
; 1121 :     //
; 1122 :     // Resize based on the column header
; 1123 :     //
; 1124 : 
; 1125 :     ListView_SetColumnWidth(m_ListCtrl, nColumn, LVSCW_AUTOSIZE_USEHEADER);

  00019	68 fe ff 00 00	 push	 65534			; 0000fffeH
  0001e	8b 45 08	 mov	 eax, DWORD PTR _nColumn$[ebp]
  00021	50		 push	 eax
  00022	68 1e 10 00 00	 push	 4126			; 0000101eH
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 30	 add	 ecx, 48			; 00000030H
  0002d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00033	ff 50 58	 call	 DWORD PTR [eax+88]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1126 : 
; 1127 :     nColumnWidth = ListView_GetColumnWidth(m_ListCtrl, nColumn);

  0003d	6a 00		 push	 0
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _nColumn$[ebp]
  00042	51		 push	 ecx
  00043	68 1d 10 00 00	 push	 4125			; 0000101dH
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 30	 add	 ecx, 48			; 00000030H
  0004e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00054	ff 50 58	 call	 DWORD PTR [eax+88]
  00057	50		 push	 eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0005e	89 45 f4	 mov	 DWORD PTR _nColumnWidth$[ebp], eax

; 1128 : 
; 1129 :     //
; 1130 :     // Resize based on the item text
; 1131 :     //
; 1132 : 
; 1133 :     ListView_SetColumnWidth(m_ListCtrl, nColumn, LVSCW_AUTOSIZE);

  00061	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _nColumn$[ebp]
  00069	51		 push	 ecx
  0006a	68 1e 10 00 00	 push	 4126			; 0000101eH
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	83 c1 30	 add	 ecx, 48			; 00000030H
  00075	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00078	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0007b	ff 50 58	 call	 DWORD PTR [eax+88]
  0007e	50		 push	 eax
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1134 : 
; 1135 :     nItemWidth = ListView_GetColumnWidth(m_ListCtrl, nColumn);

  00085	6a 00		 push	 0
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _nColumn$[ebp]
  0008a	51		 push	 ecx
  0008b	68 1d 10 00 00	 push	 4125			; 0000101dH
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 30	 add	 ecx, 48			; 00000030H
  00096	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00099	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0009c	ff 50 58	 call	 DWORD PTR [eax+88]
  0009f	50		 push	 eax
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000a6	89 45 fc	 mov	 DWORD PTR _nItemWidth$[ebp], eax

; 1136 : 
; 1137 :     //
; 1138 :     // Use the larger of the two
; 1139 :     //
; 1140 : 
; 1141 :     ListView_SetColumnWidth(m_ListCtrl, nColumn, max(nColumnWidth, nItemWidth));

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR _nColumnWidth$[ebp]
  000ac	3b 4d fc	 cmp	 ecx, DWORD PTR _nItemWidth$[ebp]
  000af	7e 08		 jle	 SHORT $L51316
  000b1	8b 55 f4	 mov	 edx, DWORD PTR _nColumnWidth$[ebp]
  000b4	89 55 ec	 mov	 DWORD PTR -20+[ebp], edx
  000b7	eb 06		 jmp	 SHORT $L51317
$L51316:
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _nItemWidth$[ebp]
  000bc	89 45 ec	 mov	 DWORD PTR -20+[ebp], eax
$L51317:
  000bf	8b 4d ec	 mov	 ecx, DWORD PTR -20+[ebp]
  000c2	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000c8	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000ce	51		 push	 ecx
  000cf	8b 55 08	 mov	 edx, DWORD PTR _nColumn$[ebp]
  000d2	52		 push	 edx
  000d3	68 1e 10 00 00	 push	 4126			; 0000101eH
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 c1 30	 add	 ecx, 48			; 00000030H
  000de	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000e4	ff 52 58	 call	 DWORD PTR [edx+88]
  000e7	50		 push	 eax
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1142 : 
; 1143 :     SetRedraw(fRedraw);

  000ee	8b 45 f8	 mov	 eax, DWORD PTR _fRedraw$[ebp]
  000f1	50		 push	 eax
  000f2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	ff 52 14	 call	 DWORD PTR [edx+20]

; 1144 : 
; 1145 : #endif
; 1146 : 
; 1147 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
?ResizeColumn@CListView@@UAEXI@Z ENDP			; CListView::ResizeColumn
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ResizeColumns@CListView@@UAEXXZ
_TEXT	SEGMENT
_this$ = -12
_fRedraw$ = -8
_i$ = -4
?ResizeColumns@CListView@@UAEXXZ PROC NEAR		; CListView::ResizeColumns, COMDAT
; _this$ = ecx

; 1173 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1174 :     BOOL                    fRedraw;
; 1175 :     UINT                    i;
; 1176 :     
; 1177 :     fRedraw = SetRedraw(FALSE);

  00009	6a 00		 push	 0
  0000b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	ff 52 14	 call	 DWORD PTR [edx+20]
  00016	89 45 f8	 mov	 DWORD PTR _fRedraw$[ebp], eax

; 1178 :     
; 1179 :     for(i = 0; i < m_nColumnCount; i++)

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $L50786
$L50787:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$L50786:
  0002b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00031	3b 91 f0 01 00
	00		 cmp	 edx, DWORD PTR [ecx+496]
  00037	73 14		 jae	 SHORT $L50788

; 1180 :     {
; 1181 :         ResizeColumn(i);

  00039	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	ff 92 ac 00 00
	00		 call	 DWORD PTR [edx+172]

; 1182 :     }

  0004b	eb d5		 jmp	 SHORT $L50787
$L50788:

; 1183 : 
; 1184 :     SetRedraw(fRedraw);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _fRedraw$[ebp]
  00050	50		 push	 eax
  00051	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	8b 11		 mov	 edx, DWORD PTR [ecx]
  00056	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	ff 52 14	 call	 DWORD PTR [edx+20]

; 1185 : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?ResizeColumns@CListView@@UAEXXZ ENDP			; CListView::ResizeColumns
_TEXT	ENDS
EXTRN	__stricmp:NEAR
; Function compile flags: /Odt
;	COMDAT ?FindRegisteredType@CListView@@UAEPAVCListViewType@@PBD@Z
_TEXT	SEGMENT
_pszText$ = 8
_this$ = -12
_pleEntry$ = -8
_pType$ = -4
?FindRegisteredType@CListView@@UAEPAVCListViewType@@PBD@Z PROC NEAR ; CListView::FindRegisteredType, COMDAT
; _this$ = ecx

; 1211 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1212 :     PLIST_ENTRY             pleEntry;
; 1213 :     CListViewType *         pType;
; 1214 : 
; 1215 :     ASSERT(pszText);

  00009	68 bf 04 00 00	 push	 1215			; 000004bfH
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07PFHL@pszText?$AA@ ; `string'
  00018	33 c0		 xor	 eax, eax
  0001a	83 7d 08 00	 cmp	 DWORD PTR _pszText$[ebp], 0
  0001e	0f 94 c0	 sete	 al
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 1216 :     
; 1217 :     for(pleEntry = m_lstTypes.Flink; pleEntry != &m_lstTypes; pleEntry = pleEntry->Flink)

  0002a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 68	 mov	 edx, DWORD PTR [ecx+104]
  00030	89 55 f8	 mov	 DWORD PTR _pleEntry$[ebp], edx
  00033	eb 08		 jmp	 SHORT $L50795
$L50796:
  00035	8b 45 f8	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 4d f8	 mov	 DWORD PTR _pleEntry$[ebp], ecx
$L50795:
  0003d	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00040	83 c2 68	 add	 edx, 104		; 00000068H
  00043	39 55 f8	 cmp	 DWORD PTR _pleEntry$[ebp], edx
  00046	74 27		 je	 SHORT $L50797

; 1218 :     {
; 1219 :         pType = CONTAINING_RECORD(pleEntry, CListViewType, m_leTypes);

  00048	8b 45 f8	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  0004b	83 e8 08	 sub	 eax, 8
  0004e	89 45 fc	 mov	 DWORD PTR _pType$[ebp], eax

; 1220 : 
; 1221 :         if(!_tcsicmp(pszText, pType->m_szName))

  00051	8b 4d fc	 mov	 ecx, DWORD PTR _pType$[ebp]
  00054	83 c1 10	 add	 ecx, 16			; 00000010H
  00057	51		 push	 ecx
  00058	8b 55 08	 mov	 edx, DWORD PTR _pszText$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 __stricmp
  00061	83 c4 08	 add	 esp, 8
  00064	85 c0		 test	 eax, eax
  00066	75 05		 jne	 SHORT $L50802

; 1222 :         {
; 1223 :             return pType;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _pType$[ebp]
  0006b	eb 04		 jmp	 SHORT $L50792
$L50802:

; 1224 :         }
; 1225 :     }

  0006d	eb c6		 jmp	 SHORT $L50796
$L50797:

; 1226 : 
; 1227 :     return NULL;

  0006f	33 c0		 xor	 eax, eax
$L50792:

; 1228 : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?FindRegisteredType@CListView@@UAEPAVCListViewType@@PBD@Z ENDP ; CListView::FindRegisteredType
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?FixItemIndices@CListView@@UAEXXZ
_TEXT	SEGMENT
_this$ = -16
_nItemCount$ = -4
_nItem$ = -8
_pItem$ = -12
?FixItemIndices@CListView@@UAEXXZ PROC NEAR		; CListView::FixItemIndices, COMDAT
; _this$ = ecx

; 1254 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1255 :     int                     nItemCount;
; 1256 :     int                     nItem;
; 1257 :     CListViewItem *         pItem;
; 1258 : 
; 1259 :     nItemCount = ListView_GetItemCount(m_ListCtrl);

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	68 04 10 00 00	 push	 4100			; 00001004H
  00012	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 30	 add	 ecx, 48			; 00000030H
  00018	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0001e	ff 52 58	 call	 DWORD PTR [edx+88]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00028	89 45 fc	 mov	 DWORD PTR _nItemCount$[ebp], eax

; 1260 : 
; 1261 :     for(nItem = 0; nItem < nItemCount; nItem++)

  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nItem$[ebp], 0
  00032	eb 09		 jmp	 SHORT $L50811
$L50812:
  00034	8b 45 f8	 mov	 eax, DWORD PTR _nItem$[ebp]
  00037	83 c0 01	 add	 eax, 1
  0003a	89 45 f8	 mov	 DWORD PTR _nItem$[ebp], eax
$L50811:
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _nItem$[ebp]
  00040	3b 4d fc	 cmp	 ecx, DWORD PTR _nItemCount$[ebp]
  00043	7d 20		 jge	 SHORT $L50813

; 1262 :     {
; 1263 :         pItem = PtrFromListIndex(nItem);

  00045	8b 55 f8	 mov	 edx, DWORD PTR _nItem$[ebp]
  00048	52		 push	 edx
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 10		 mov	 edx, DWORD PTR [eax]
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	ff 92 bc 00 00
	00		 call	 DWORD PTR [edx+188]
  00057	89 45 f4	 mov	 DWORD PTR _pItem$[ebp], eax

; 1264 : 
; 1265 :         pItem->m_nItemIndex = nItem;

  0005a	8b 45 f4	 mov	 eax, DWORD PTR _pItem$[ebp]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _nItem$[ebp]
  00060	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1266 :     }

  00063	eb cf		 jmp	 SHORT $L50812
$L50813:

; 1267 : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?FixItemIndices@CListView@@UAEXXZ ENDP			; CListView::FixItemIndices
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetNextItem@CListView@@UAEPAVCListViewItem@@PAV2@K@Z
_TEXT	SEGMENT
_pItem$ = 8
_dwFlags$ = 12
_this$ = -8
_nItem$ = -4
?GetNextItem@CListView@@UAEPAVCListViewItem@@PAV2@K@Z PROC NEAR ; CListView::GetNextItem, COMDAT
; _this$ = ecx

; 1295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1296 :     int                     nItem;
; 1297 : 
; 1298 :     nItem = ListView_GetNextItem(m_ListCtrl.m_hWnd, pItem ? pItem->m_nItemIndex : -1, dwFlags);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0000d	74 0b		 je	 SHORT $L51330
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pItem$[ebp]
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	89 4d f4	 mov	 DWORD PTR -12+[ebp], ecx
  00018	eb 07		 jmp	 SHORT $L51331
$L51330:
  0001a	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR -12+[ebp], -1
$L51331:
  00021	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00024	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0002a	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00030	52		 push	 edx
  00031	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]
  00034	50		 push	 eax
  00035	68 0c 10 00 00	 push	 4108			; 0000100cH
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00040	52		 push	 edx
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00047	89 45 fc	 mov	 DWORD PTR _nItem$[ebp], eax

; 1299 : 
; 1300 :     if(-1 == nItem)

  0004a	83 7d fc ff	 cmp	 DWORD PTR _nItem$[ebp], -1
  0004e	75 04		 jne	 SHORT $L50831

; 1301 :     {
; 1302 :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	eb 12		 jmp	 SHORT $L50818
$L50831:

; 1303 :     }
; 1304 : 
; 1305 :     return PtrFromListIndex(nItem);

  00054	8b 45 fc	 mov	 eax, DWORD PTR _nItem$[ebp]
  00057	50		 push	 eax
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	ff 92 bc 00 00
	00		 call	 DWORD PTR [edx+188]
$L50818:

; 1306 : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?GetNextItem@CListView@@UAEPAVCListViewItem@@PAV2@K@Z ENDP ; CListView::GetNextItem
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SelectAll@CListView@@UAEXH@Z
_TEXT	SEGMENT
_fSelected$ = 8
_this$ = -8
_pItem$ = -4
?SelectAll@CListView@@UAEXH@Z PROC NEAR			; CListView::SelectAll, COMDAT
; _this$ = ecx

; 1332 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1333 :     CListViewItem *         pItem   = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pItem$[ebp], 0
$L50838:

; 1334 : 
; 1335 :     while(pItem = GetNextItem(pItem, LVNI_ALL))

  00010	6a 00		 push	 0
  00012	8b 45 fc	 mov	 eax, DWORD PTR _pItem$[ebp]
  00015	50		 push	 eax
  00016	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	ff 92 b8 00 00
	00		 call	 DWORD PTR [edx+184]
  00024	89 45 fc	 mov	 DWORD PTR _pItem$[ebp], eax
  00027	83 7d fc 00	 cmp	 DWORD PTR _pItem$[ebp], 0
  0002b	74 11		 je	 SHORT $L50839

; 1336 :     {
; 1337 :         pItem->SetSelection(fSelected);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _fSelected$[ebp]
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _pItem$[ebp]
  00039	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1338 :     }

  0003c	eb d2		 jmp	 SHORT $L50838
$L50839:

; 1339 : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?SelectAll@CListView@@UAEXH@Z ENDP			; CListView::SelectAll
_TEXT	ENDS
PUBLIC	??_C@_05DLIH@pList?$AA@				; `string'
PUBLIC	??_7CListViewType@@6B@				; CListViewType::`vftable'
PUBLIC	??_GCListViewType@@UAEPAXI@Z			; CListViewType::`scalar deleting destructor'
PUBLIC	??_ECListViewType@@UAEPAXI@Z			; CListViewType::`vector deleting destructor'
PUBLIC	?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z	; InsertTailListUninit
PUBLIC	??0CRefCount@DirectSound@@QAE@K@Z		; DirectSound::CRefCount::CRefCount
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
EXTRN	_strcpy:NEAR
;	COMDAT ??_7CListViewType@@6B@
CONST	SEGMENT
??_7CListViewType@@6B@ DD FLAT:??_ECListViewType@@UAEPAXI@Z ; CListViewType::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
CONST	ENDS
;	COMDAT ??_C@_05DLIH@pList?$AA@
CONST	SEGMENT
??_C@_05DLIH@pList?$AA@ DB 'pList', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CListViewType@@QAE@PAVCListView@@PBDH@Z
_TEXT	SEGMENT
_pList$ = 8
_pszText$ = 12
_nImageIndex$ = 16
_this$ = -4
??0CListViewType@@QAE@PAVCListView@@PBDH@Z PROC NEAR	; CListViewType::CListViewType, COMDAT
; _this$ = ecx

; 1368 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListViewType@@6B@ ; CListViewType::`vftable'

; 1369 :     ASSERT(pList);

  0001a	68 59 05 00 00	 push	 1369			; 00000559H
  0001f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00024	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05DLIH@pList?$AA@ ; `string'
  00029	33 c9		 xor	 ecx, ecx
  0002b	83 7d 08 00	 cmp	 DWORD PTR _pList$[ebp], 0
  0002f	0f 94 c1	 sete	 cl
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00038	83 c4 10	 add	 esp, 16			; 00000010H

; 1370 :     ASSERT(pszText);

  0003b	68 5a 05 00 00	 push	 1370			; 0000055aH
  00040	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00045	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07PFHL@pszText?$AA@ ; `string'
  0004a	33 d2		 xor	 edx, edx
  0004c	83 7d 0c 00	 cmp	 DWORD PTR _pszText$[ebp], 0
  00050	0f 94 c2	 sete	 dl
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00059	83 c4 10	 add	 esp, 16			; 00000010H

; 1371 :     
; 1372 :     InsertTailListUninit(&pList->m_lstTypes, &m_leTypes);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 c0 08	 add	 eax, 8
  00062	50		 push	 eax
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  00066	83 c1 68	 add	 ecx, 104		; 00000068H
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailListUninit

; 1373 : 
; 1374 :     _tcscpy(m_szName, pszText);

  0006f	8b 55 0c	 mov	 edx, DWORD PTR _pszText$[ebp]
  00072	52		 push	 edx
  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	83 c0 10	 add	 eax, 16			; 00000010H
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _strcpy
  0007f	83 c4 08	 add	 esp, 8

; 1375 : 
; 1376 :     m_nImageIndex = nImageIndex;

  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	8b 55 10	 mov	 edx, DWORD PTR _nImageIndex$[ebp]
  00088	89 91 10 01 00
	00		 mov	 DWORD PTR [ecx+272], edx

; 1377 : }

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
??0CListViewType@@QAE@PAVCListView@@PBDH@Z ENDP		; CListViewType::CListViewType
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
_TEXT	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
_TEXT	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailListUninit, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 88 00 00 00	 push	 136			; 00000088H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 137  : 
; 138  :     Entry->Flink = ListHead;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0001e	89 11		 mov	 DWORD PTR [ecx], edx

; 139  :     Entry->Blink = ListHead->Blink;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 140  :     
; 141  :     Entry->Flink->Blink = Entry;

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00034	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 142  :     Entry->Blink->Flink = Entry;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	89 11		 mov	 DWORD PTR [ecx], edx

; 143  : 
; 144  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00042	68 90 00 00 00	 push	 144			; 00000090H
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0004c	6a 01		 push	 1
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 145  : }    

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; InsertTailListUninit
_TEXT	ENDS
PUBLIC	??_7CRefCount@DirectSound@@6B@			; DirectSound::CRefCount::`vftable'
PUBLIC	??_GCRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`scalar deleting destructor'
PUBLIC	??_ECRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
CONST	SEGMENT
??_7CRefCount@DirectSound@@6B@ DD FLAT:??_ECRefCount@DirectSound@@UAEPAXI@Z ; DirectSound::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
_TEXT	SEGMENT
_dwInitialRefCount$ = 8
_this$ = -4
??0CRefCount@DirectSound@@QAE@K@Z PROC NEAR		; DirectSound::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _dwInitialRefCount$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@ ; DirectSound::CRefCount::`vftable'

; 38   :     }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@DirectSound@@QAE@K@Z ENDP			; DirectSound::CRefCount::CRefCount
_TEXT	ENDS
PUBLIC	??1CRefCount@DirectSound@@UAE@XZ		; DirectSound::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCRefCount@DirectSound@@UAEPAXI@Z PROC NEAR		; DirectSound::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L47751
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L47751:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CRefCount::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\dsound\common\refcount.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT
??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CRefCount@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@ ; DirectSound::CRefCount::`vftable'

; 42   :         ASSERT(!m_dwRefCount);

  00010	6a 2a		 push	 42			; 0000002aH
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@ ; `string'
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 43   :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@DirectSound@@UAE@XZ ENDP			; DirectSound::CRefCount::~CRefCount
_TEXT	ENDS
PUBLIC	??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@	; `string'
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT
??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0UL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
_TEXT	ENDS
PUBLIC	??_C@_0N@BGIF@m_dwRefCount?$AA@			; `string'
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT
??_C@_0N@BGIF@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
$T51356 = -4
$T51357 = -8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BGIF@m_dwRefCount?$AA@ ; `string'
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L47768

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L47769

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T51357[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T51357[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T51356[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T51356[ebp], 0
  00058	74 11		 je	 SHORT $L51358
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T51356[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T51356[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  00069	eb 07		 jmp	 SHORT $L51359
$L51358:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L51359:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L47766
$L47769:
$L47768:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L47766:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
_TEXT	ENDS
PUBLIC	??1CListViewType@@UAE@XZ			; CListViewType::~CListViewType
; Function compile flags: /Odt
;	COMDAT ??_GCListViewType@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCListViewType@@UAEPAXI@Z PROC NEAR			; CListViewType::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CListViewType@@UAE@XZ ; CListViewType::~CListViewType
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L50850
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L50850:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCListViewType@@UAEPAXI@Z ENDP			; CListViewType::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
_TEXT	ENDS
;	COMDAT ??1CListViewType@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CListViewType@@UAE@XZ PROC NEAR			; CListViewType::~CListViewType, COMDAT
; _this$ = ecx

; 1402 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListViewType@@6B@ ; CListViewType::`vftable'

; 1403 :     RemoveEntryList(&m_leTypes);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 1404 : }

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??1CListViewType@@UAE@XZ ENDP				; CListViewType::~CListViewType
_TEXT	ENDS
PUBLIC	??0CListViewItem@@QAE@XZ			; CListViewItem::CListViewItem
PUBLIC	?Create@CListViewItem@@UAEHPAVCListView@@PBD1PAX@Z ; CListViewItem::Create
PUBLIC	?Remove@CListViewItem@@UAEXXZ			; CListViewItem::Remove
PUBLIC	?SetText@CListViewItem@@UAEXPBD@Z		; CListViewItem::SetText
PUBLIC	?SetColumnText@CListViewItem@@UAEXHPBD@Z	; CListViewItem::SetColumnText
PUBLIC	?SetColumnValue@CListViewItem@@UAEXHHHH@Z	; CListViewItem::SetColumnValue
PUBLIC	?EditLabel@CListViewItem@@UAEPAUHWND__@@XZ	; CListViewItem::EditLabel
PUBLIC	?SetSelection@CListViewItem@@UAEXH@Z		; CListViewItem::SetSelection
PUBLIC	?OnDelete@CListViewItem@@UAEXXZ			; CListViewItem::OnDelete
PUBLIC	?OnEndLabelEdit@CListViewItem@@UAEHPBD@Z	; CListViewItem::OnEndLabelEdit
PUBLIC	?OnStateChanged@CListViewItem@@UAEXKK@Z		; CListViewItem::OnStateChanged
PUBLIC	?OnDoubleClick@CListViewItem@@UAEXXZ		; CListViewItem::OnDoubleClick
PUBLIC	?GetListIndex@CListViewItem@@UAEHXZ		; CListViewItem::GetListIndex
PUBLIC	??_7CListViewItem@@6B@				; CListViewItem::`vftable'
PUBLIC	??_GCListViewItem@@UAEPAXI@Z			; CListViewItem::`scalar deleting destructor'
PUBLIC	??_ECListViewItem@@UAEPAXI@Z			; CListViewItem::`vector deleting destructor'
;	COMDAT ??_7CListViewItem@@6B@
CONST	SEGMENT
??_7CListViewItem@@6B@ DD FLAT:??_ECListViewItem@@UAEPAXI@Z ; CListViewItem::`vftable'
	DD	FLAT:?Create@CListViewItem@@UAEHPAVCListView@@PBD1PAX@Z
	DD	FLAT:?Remove@CListViewItem@@UAEXXZ
	DD	FLAT:?SetText@CListViewItem@@UAEXPBD@Z
	DD	FLAT:?SetColumnText@CListViewItem@@UAEXHPBD@Z
	DD	FLAT:?SetColumnValue@CListViewItem@@UAEXHHHH@Z
	DD	FLAT:?EditLabel@CListViewItem@@UAEPAUHWND__@@XZ
	DD	FLAT:?SetSelection@CListViewItem@@UAEXH@Z
	DD	FLAT:?OnDelete@CListViewItem@@UAEXXZ
	DD	FLAT:?OnEndLabelEdit@CListViewItem@@UAEHPBD@Z
	DD	FLAT:?OnStateChanged@CListViewItem@@UAEXKK@Z
	DD	FLAT:?OnDoubleClick@CListViewItem@@UAEXXZ
	DD	FLAT:?GetListIndex@CListViewItem@@UAEHXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CListViewItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CListViewItem@@QAE@XZ PROC NEAR			; CListViewItem::CListViewItem, COMDAT
; _this$ = ecx

; 1429 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListViewItem@@6B@ ; CListViewItem::`vftable'

; 1430 :     m_nItemIndex = -1;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 1431 : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CListViewItem@@QAE@XZ ENDP				; CListViewItem::CListViewItem
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.h
_TEXT	ENDS
;	COMDAT ?SetText@CListViewItem@@UAEXPBD@Z
_TEXT	SEGMENT
_pszText$ = 8
_this$ = -4
?SetText@CListViewItem@@UAEXPBD@Z PROC NEAR		; CListViewItem::SetText, COMDAT
; _this$ = ecx

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 221  :     SetColumnText(0, pszText);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	ff 52 10	 call	 DWORD PTR [edx+16]

; 222  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetText@CListViewItem@@UAEXPBD@Z ENDP			; CListViewItem::SetText
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?EditLabel@CListViewItem@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4
?EditLabel@CListViewItem@@UAEPAUHWND__@@XZ PROC NEAR	; CListViewItem::EditLabel, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 226  :     return ListView_EditLabel(m_pList->m_ListCtrl.m_hWnd, m_nItemIndex);

  00007	6a 00		 push	 0
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0000f	51		 push	 ecx
  00010	68 17 10 00 00	 push	 4119			; 00001017H
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  0001e	51		 push	 ecx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 227  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?EditLabel@CListViewItem@@UAEPAUHWND__@@XZ ENDP		; CListViewItem::EditLabel
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnEndLabelEdit@CListViewItem@@UAEHPBD@Z
_TEXT	SEGMENT
_this$ = -4
?OnEndLabelEdit@CListViewItem@@UAEHPBD@Z PROC NEAR	; CListViewItem::OnEndLabelEdit, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 242  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnEndLabelEdit@CListViewItem@@UAEHPBD@Z ENDP		; CListViewItem::OnEndLabelEdit
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnStateChanged@CListViewItem@@UAEXKK@Z
_TEXT	SEGMENT
_this$ = -4
?OnStateChanged@CListViewItem@@UAEXKK@Z PROC NEAR	; CListViewItem::OnStateChanged, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 08 00	 ret	 8
?OnStateChanged@CListViewItem@@UAEXKK@Z ENDP		; CListViewItem::OnStateChanged
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDoubleClick@CListViewItem@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnDoubleClick@CListViewItem@@UAEXXZ PROC NEAR		; CListViewItem::OnDoubleClick, COMDAT
; _this$ = ecx

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 250  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnDoubleClick@CListViewItem@@UAEXXZ ENDP		; CListViewItem::OnDoubleClick
_TEXT	ENDS
PUBLIC	??1CListViewItem@@UAE@XZ			; CListViewItem::~CListViewItem
; Function compile flags: /Odt
;	COMDAT ??_GCListViewItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCListViewItem@@UAEPAXI@Z PROC NEAR			; CListViewItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CListViewItem@@UAE@XZ ; CListViewItem::~CListViewItem
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L50862
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L50862:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCListViewItem@@UAEPAXI@Z ENDP			; CListViewItem::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\listview.cpp
_TEXT	ENDS
;	COMDAT ??1CListViewItem@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CListViewItem@@UAE@XZ PROC NEAR			; CListViewItem::~CListViewItem, COMDAT
; _this$ = ecx

; 1456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CListViewItem@@6B@ ; CListViewItem::`vftable'

; 1457 :     Remove();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?Remove@CListViewItem@@UAEXXZ ; CListViewItem::Remove

; 1458 : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CListViewItem@@UAE@XZ ENDP				; CListViewItem::~CListViewItem
_TEXT	ENDS
PUBLIC	??_C@_07FEMJ@XACTGUI?$AA@			; `string'
PUBLIC	??_C@_0BG@FMDN@CListViewItem?3?3Create?$AA@	; `string'
PUBLIC	??_C@_0BE@FCMH@Type?5not?5registered?$AA@	; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT
??_C@_07FEMJ@XACTGUI?$AA@ DB 'XACTGUI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMDN@CListViewItem?3?3Create?$AA@
CONST	SEGMENT
??_C@_0BG@FMDN@CListViewItem?3?3Create?$AA@ DB 'CListViewItem::Create', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCMH@Type?5not?5registered?$AA@
CONST	SEGMENT
??_C@_0BE@FCMH@Type?5not?5registered?$AA@ DB 'Type not registered', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Create@CListViewItem@@UAEHPAVCListView@@PBD1PAX@Z
_TEXT	SEGMENT
_pList$ = 8
_pszText$ = 12
_pszType$ = 16
_pvContext$ = 20
_this$ = -48
_lvi$ = -44
_pType$ = -4
?Create@CListViewItem@@UAEHPAVCListView@@PBD1PAX@Z PROC NEAR ; CListViewItem::Create, COMDAT
; _this$ = ecx

; 1490 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 1491 :     LVITEM                  lvi    = { 0 };

  0000a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _lvi$[ebp], 0
  00011	b9 09 00 00 00	 mov	 ecx, 9
  00016	33 c0		 xor	 eax, eax
  00018	8d 7d d8	 lea	 edi, DWORD PTR _lvi$[ebp+4]
  0001b	f3 ab		 rep stosd

; 1492 :     CListViewType *         pType;
; 1493 : 
; 1494 :     ASSERT(pList);

  0001d	68 d6 05 00 00	 push	 1494			; 000005d6H
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05DLIH@pList?$AA@ ; `string'
  0002c	33 c0		 xor	 eax, eax
  0002e	83 7d 08 00	 cmp	 DWORD PTR _pList$[ebp], 0
  00032	0f 94 c0	 sete	 al
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 1495 : 
; 1496 :     m_pList = pList;

  0003e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	8b 55 08	 mov	 edx, DWORD PTR _pList$[ebp]
  00044	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1497 :     m_pvContext = pvContext;

  00047	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d 14	 mov	 ecx, DWORD PTR _pvContext$[ebp]
  0004d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1498 : 
; 1499 :     //
; 1500 :     // Insert the item
; 1501 :     //
; 1502 : 
; 1503 :     lvi.mask = LVIF_PARAM;

  00050	c7 45 d4 04 00
	00 00		 mov	 DWORD PTR _lvi$[ebp], 4

; 1504 :     lvi.lParam = (LPARAM)this;

  00057	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	89 55 f4	 mov	 DWORD PTR _lvi$[ebp+32], edx

; 1505 : 
; 1506 :     if(pszText)

  0005d	83 7d 0c 00	 cmp	 DWORD PTR _pszText$[ebp], 0
  00061	74 0e		 je	 SHORT $L50877

; 1507 :     {
; 1508 :         lvi.mask |= LVIF_TEXT;

  00063	8b 45 d4	 mov	 eax, DWORD PTR _lvi$[ebp]
  00066	0c 01		 or	 al, 1
  00068	89 45 d4	 mov	 DWORD PTR _lvi$[ebp], eax

; 1509 :         lvi.pszText = (LPTSTR)pszText;

  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszText$[ebp]
  0006e	89 4d e8	 mov	 DWORD PTR _lvi$[ebp+20], ecx
$L50877:

; 1510 :     }
; 1511 : 
; 1512 :     if(pszType)

  00071	83 7d 10 00	 cmp	 DWORD PTR _pszType$[ebp], 0
  00075	74 5e		 je	 SHORT $L50879

; 1513 :     {
; 1514 :         if(pType = pList->FindRegisteredType(pszType))

  00077	8b 55 10	 mov	 edx, DWORD PTR _pszType$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _pList$[ebp]
  0007e	8b 10		 mov	 edx, DWORD PTR [eax]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  00083	ff 92 cc 00 00
	00		 call	 DWORD PTR [edx+204]
  00089	89 45 fc	 mov	 DWORD PTR _pType$[ebp], eax
  0008c	83 7d fc 00	 cmp	 DWORD PTR _pType$[ebp], 0
  00090	74 16		 je	 SHORT $L50880

; 1515 :         {
; 1516 :             lvi.mask |= LVIF_IMAGE;

  00092	8b 45 d4	 mov	 eax, DWORD PTR _lvi$[ebp]
  00095	0c 02		 or	 al, 2
  00097	89 45 d4	 mov	 DWORD PTR _lvi$[ebp], eax

; 1517 :             lvi.iImage = pType->m_nImageIndex;

  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _pType$[ebp]
  0009d	8b 91 10 01 00
	00		 mov	 edx, DWORD PTR [ecx+272]
  000a3	89 55 f0	 mov	 DWORD PTR _lvi$[ebp+28], edx

; 1518 :         }
; 1519 :         else

  000a6	eb 2d		 jmp	 SHORT $L50881
$L50880:

; 1520 :         {
; 1521 :             DPF_ERROR("Type not registered");

  000a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@FMDN@CListViewItem?3?3Create?$AA@ ; `string'
  000b2	68 f1 05 00 00	 push	 1521			; 000005f1H
  000b7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000bc	6a 01		 push	 1
  000be	6a 09		 push	 9
  000c0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c5	83 c4 18	 add	 esp, 24			; 00000018H
  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@FCMH@Type?5not?5registered?$AA@ ; `string'
  000cd	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d2	83 c4 04	 add	 esp, 4
$L50881:
$L50879:

; 1522 :         }
; 1523 :     }
; 1524 : 
; 1525 :     if(-1 == (m_nItemIndex = ListView_InsertItem(pList->m_ListCtrl, &lvi)))

  000d5	8d 45 d4	 lea	 eax, DWORD PTR _lvi$[ebp]
  000d8	50		 push	 eax
  000d9	6a 00		 push	 0
  000db	68 07 10 00 00	 push	 4103			; 00001007H
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  000e3	83 c1 30	 add	 ecx, 48			; 00000030H
  000e6	8b 55 08	 mov	 edx, DWORD PTR _pList$[ebp]
  000e9	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000ec	ff 50 58	 call	 DWORD PTR [eax+88]
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000f6	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000fc	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	83 7a 08 ff	 cmp	 DWORD PTR [edx+8], -1
  00103	75 05		 jne	 SHORT $L50888

; 1526 :     {
; 1527 :         return -1;

  00105	83 c8 ff	 or	 eax, -1
  00108	eb 18		 jmp	 SHORT $L50873
$L50888:

; 1528 :     }
; 1529 : 
; 1530 :     //
; 1531 :     // Resort the list
; 1532 :     //
; 1533 : 
; 1534 :     pList->Sort(-1, 0);

  0010a	6a 00		 push	 0
  0010c	6a ff		 push	 -1
  0010e	8b 45 08	 mov	 eax, DWORD PTR _pList$[ebp]
  00111	8b 10		 mov	 edx, DWORD PTR [eax]
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  00116	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 1535 : 
; 1536 :     return m_nItemIndex;

  0011c	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$L50873:

; 1537 : }

  00122	5f		 pop	 edi
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 10 00	 ret	 16			; 00000010H
?Create@CListViewItem@@UAEHPAVCListView@@PBD1PAX@Z ENDP	; CListViewItem::Create
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Remove@CListViewItem@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8
_pList$ = -4
?Remove@CListViewItem@@UAEXXZ PROC NEAR			; CListViewItem::Remove, COMDAT
; _this$ = ecx

; 1563 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1564 :     CListView *             pList   = m_pList;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	89 4d fc	 mov	 DWORD PTR _pList$[ebp], ecx

; 1565 :     
; 1566 :     if(pList && (-1 != m_nItemIndex))

  00012	83 7d fc 00	 cmp	 DWORD PTR _pList$[ebp], 0
  00016	74 3b		 je	 SHORT $L50894
  00018	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	83 7a 08 ff	 cmp	 DWORD PTR [edx+8], -1
  0001f	74 32		 je	 SHORT $L50894

; 1567 :     {
; 1568 :         ListView_DeleteItem(pList->m_ListCtrl, m_nItemIndex);

  00021	6a 00		 push	 0
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00029	51		 push	 ecx
  0002a	68 08 10 00 00	 push	 4104			; 00001008H
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _pList$[ebp]
  00032	83 c1 30	 add	 ecx, 48			; 00000030H
  00035	8b 55 fc	 mov	 edx, DWORD PTR _pList$[ebp]
  00038	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0003b	ff 50 58	 call	 DWORD PTR [eax+88]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1569 :         pList->FixItemIndices();

  00045	8b 4d fc	 mov	 ecx, DWORD PTR _pList$[ebp]
  00048	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _pList$[ebp]
  0004d	ff 92 e4 00 00
	00		 call	 DWORD PTR [edx+228]
$L50894:

; 1570 :     }
; 1571 : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?Remove@CListViewItem@@UAEXXZ ENDP			; CListViewItem::Remove
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetColumnText@CListViewItem@@UAEXHPBD@Z
_TEXT	SEGMENT
_nColumnIndex$ = 8
_pszText$ = 12
_this$ = -44
_lvi$ = -40
?SetColumnText@CListViewItem@@UAEXHPBD@Z PROC NEAR	; CListViewItem::SetColumnText, COMDAT
; _this$ = ecx

; 1599 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 1600 :     LVITEM                  lvi;
; 1601 : 
; 1602 :     if(!m_pList)

  00009	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 02		 jne	 SHORT $L50904

; 1603 :     {
; 1604 :         return;

  00012	eb 45		 jmp	 SHORT $L50902
$L50904:

; 1605 :     }
; 1606 : 
; 1607 :     lvi.mask = TVIF_TEXT;

  00014	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _lvi$[ebp], 1

; 1608 :     lvi.pszText = (LPTSTR)pszText;

  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszText$[ebp]
  0001e	89 4d ec	 mov	 DWORD PTR _lvi$[ebp+20], ecx

; 1609 :     lvi.iItem = m_nItemIndex;

  00021	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00027	89 45 dc	 mov	 DWORD PTR _lvi$[ebp+4], eax

; 1610 :     lvi.iSubItem = nColumnIndex;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _nColumnIndex$[ebp]
  0002d	89 4d e0	 mov	 DWORD PTR _lvi$[ebp+8], ecx

; 1611 : 
; 1612 :     ListView_SetItem(m_pList->m_ListCtrl, &lvi);

  00030	8d 55 d8	 lea	 edx, DWORD PTR _lvi$[ebp]
  00033	52		 push	 edx
  00034	6a 00		 push	 0
  00036	68 06 10 00 00	 push	 4102			; 00001006H
  0003b	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00047	83 c0 30	 add	 eax, 48			; 00000030H
  0004a	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0004d	8b c8		 mov	 ecx, eax
  0004f	ff 52 58	 call	 DWORD PTR [edx+88]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
$L50902:

; 1613 : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?SetColumnText@CListViewItem@@UAEXHPBD@Z ENDP		; CListViewItem::SetColumnText
_TEXT	ENDS
EXTRN	_FormatNumber@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetColumnValue@CListViewItem@@UAEXHHHH@Z
_TEXT	SEGMENT
_nColumnIndex$ = 8
_nValue$ = 12
_fSigned$ = 16
_fFormat$ = 20
_this$ = -260
_szText$ = -256
?SetColumnValue@CListViewItem@@UAEXHHHH@Z PROC NEAR	; CListViewItem::SetColumnValue, COMDAT
; _this$ = ecx

; 1645 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	89 8d fc fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1646 :     TCHAR                   szText[0x100];
; 1647 : 
; 1648 :     FormatNumber(nValue, fSigned, fFormat, szText);

  0000f	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 14	 mov	 ecx, DWORD PTR _fFormat$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 10	 mov	 edx, DWORD PTR _fSigned$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _nValue$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _FormatNumber@16

; 1649 :     
; 1650 :     SetColumnText(nColumnIndex, szText);

  00027	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _nColumnIndex$[ebp]
  00031	52		 push	 edx
  00032	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00040	ff 52 10	 call	 DWORD PTR [edx+16]

; 1651 : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 10 00	 ret	 16			; 00000010H
?SetColumnValue@CListViewItem@@UAEXHHHH@Z ENDP		; CListViewItem::SetColumnValue
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?PtrFromListIndex@CListViewItem@@SGPAV1@PAVCListView@@H@Z
_TEXT	SEGMENT
_pList$ = 8
_nItem$ = 12
_lvi$ = -40
?PtrFromListIndex@CListViewItem@@SGPAV1@PAVCListView@@H@Z PROC NEAR ; CListViewItem::PtrFromListIndex, COMDAT

; 1679 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H

; 1680 :     LVITEM                  lvi;
; 1681 : 
; 1682 :     ASSERT(pList);

  00006	68 92 06 00 00	 push	 1682			; 00000692H
  0000b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@OLN@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05DLIH@pList?$AA@ ; `string'
  00015	33 c0		 xor	 eax, eax
  00017	83 7d 08 00	 cmp	 DWORD PTR _pList$[ebp], 0
  0001b	0f 94 c0	 sete	 al
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 1683 : 
; 1684 :     lvi.mask = TVIF_PARAM;

  00027	c7 45 d8 04 00
	00 00		 mov	 DWORD PTR _lvi$[ebp], 4

; 1685 :     lvi.iItem = nItem;

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _nItem$[ebp]
  00031	89 4d dc	 mov	 DWORD PTR _lvi$[ebp+4], ecx

; 1686 :     lvi.iSubItem = 0;

  00034	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _lvi$[ebp+8], 0

; 1687 : 
; 1688 :     if(!ListView_GetItem(pList->m_ListCtrl, &lvi))

  0003b	8d 55 d8	 lea	 edx, DWORD PTR _lvi$[ebp]
  0003e	52		 push	 edx
  0003f	6a 00		 push	 0
  00041	68 05 10 00 00	 push	 4101			; 00001005H
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _pList$[ebp]
  00049	83 c1 30	 add	 ecx, 48			; 00000030H
  0004c	8b 45 08	 mov	 eax, DWORD PTR _pList$[ebp]
  0004f	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00052	ff 52 58	 call	 DWORD PTR [edx+88]
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0005c	85 c0		 test	 eax, eax
  0005e	75 04		 jne	 SHORT $L50925

; 1689 :     {
; 1690 :         return NULL;

  00060	33 c0		 xor	 eax, eax
  00062	eb 09		 jmp	 SHORT $L50920
$L50925:

; 1691 :     }
; 1692 : 
; 1693 :     return PtrFromListCtx(lvi.lParam);

  00064	8b 45 f8	 mov	 eax, DWORD PTR _lvi$[ebp+32]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ?PtrFromListCtx@CListViewItem@@SGPAV1@J@Z ; CListViewItem::PtrFromListCtx
$L50920:

; 1694 : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?PtrFromListIndex@CListViewItem@@SGPAV1@PAVCListView@@H@Z ENDP ; CListViewItem::PtrFromListIndex
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetListIndex@CListViewItem@@UAEHXZ
_TEXT	SEGMENT
_this$ = -28
_lvfi$ = -24
?GetListIndex@CListViewItem@@UAEHXZ PROC NEAR		; CListViewItem::GetListIndex, COMDAT
; _this$ = ecx

; 1724 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1725 :     LVFINDINFO              lvfi;
; 1726 : 
; 1727 :     if(!m_pList)

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 05		 jne	 SHORT $L50931

; 1728 :     {
; 1729 :         return -1;

  00012	83 c8 ff	 or	 eax, -1
  00015	eb 2f		 jmp	 SHORT $L50929
$L50931:

; 1730 :     }
; 1731 : 
; 1732 :     lvfi.flags = LVFI_PARAM;

  00017	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _lvfi$[ebp], 1

; 1733 :     lvfi.lParam = (LPARAM)this;

  0001e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	89 4d f0	 mov	 DWORD PTR _lvfi$[ebp+8], ecx

; 1734 :     
; 1735 :     return m_pList->m_ListCtrl.SendMessage(LVM_FINDITEM, (WPARAM)-1, (LPARAM)&lvfi);

  00024	8d 55 e8	 lea	 edx, DWORD PTR _lvfi$[ebp]
  00027	52		 push	 edx
  00028	6a ff		 push	 -1
  0002a	68 0d 10 00 00	 push	 4109			; 0000100dH
  0002f	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00038	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003b	83 c0 30	 add	 eax, 48			; 00000030H
  0003e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00041	8b c8		 mov	 ecx, eax
  00043	ff 52 18	 call	 DWORD PTR [edx+24]
$L50929:

; 1736 : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?GetListIndex@CListViewItem@@UAEHXZ ENDP		; CListViewItem::GetListIndex
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDelete@CListViewItem@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnDelete@CListViewItem@@UAEXXZ PROC NEAR		; CListViewItem::OnDelete, COMDAT
; _this$ = ecx

; 1762 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1763 :     m_pList = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1764 :     m_nItemIndex = -1;

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 1765 :     m_pvContext = NULL;

  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 1766 : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?OnDelete@CListViewItem@@UAEXXZ ENDP			; CListViewItem::OnDelete
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetSelection@CListViewItem@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -44
__ms_lvi$50943 = -40
?SetSelection@CListViewItem@@UAEXH@Z PROC NEAR		; CListViewItem::SetSelection, COMDAT
; _this$ = ecx

; 1792 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 1793 :     ListView_SetItemState(m_pList->m_ListCtrl, m_nItemIndex, LVIS_SELECTED, LVIS_SELECTED);

  00009	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR __ms_lvi$50943[ebp+16], 2
  00010	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR __ms_lvi$50943[ebp+12], 2
  00017	8d 45 d8	 lea	 eax, DWORD PTR __ms_lvi$50943[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00021	52		 push	 edx
  00022	68 2b 10 00 00	 push	 4139			; 0000102bH
  00027	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002d	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	83 c0 30	 add	 eax, 48			; 00000030H
  00036	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00039	8b c8		 mov	 ecx, eax
  0003b	ff 52 58	 call	 DWORD PTR [edx+88]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 1794 : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?SetSelection@CListViewItem@@UAEXH@Z ENDP		; CListViewItem::SetSelection
_TEXT	ENDS
END
