; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\xact\host\gui\base\mdiwrap.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07HEHH@pParent?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09MLCM@MDICLIENT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09EGKB@m_pParent?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IDKB@m_pParent?9?$DOm_pParent?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GFDF@CMDIChildWindow?3?3OnMdiActivate?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DA@MMBG@Received?5WM_MDIACTIVATE?5with?5une@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@OCDE@type?3?3WNDTYPE?5?$DN?$DN?5pWindow?9?$DOm_nWin@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnActivate@CMDIChildWindow@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDeactivate@CMDIChildWindow@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMDIFrameWindow@@QAE@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMDIFrameWindow@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMDIFrameWindow@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CMDIFrameWindow@@MAEHPBD0KKHHHHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CMDIFrameWindow@@MAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMDIClientWindow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMDIClientWindow@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMDIClientWindow@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CMDIClientWindow@@MAEHPAVCMDIFrameWindow@@KKHHHHIPBUtagCLIENTCREATESTRUCT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DispatchMessageA@CMDIClientWindow@@MAEHPAUtagMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetActiveChild@CMDIClientWindow@@UAEHPAPAVCMDIChildWindow@@PAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsActiveChild@CMDIClientWindow@@UAEHPAVCMDIChildWindow@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMDIChildWindow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMDIChildWindow@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMDIChildWindow@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CMDIChildWindow@@MAEHPAVCMDIClientWindow@@PBD1KKHHHHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HandleMessage@CMDIChildWindow@@MAEHIIJPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CMDIChildWindow@@MAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnForceResize@CMDIChildWindow@@MAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnMdiActivate@CMDIChildWindow@@MAEHPAUHWND__@@0PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDestroy@CMDIChildWindow@@MAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CMDIChildWindow@@MAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cast@?$CWindowCast@VCMDIFrameWindow@@@@SGPAVCMDIFrameWindow@@PAVCWindow@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Cast@?$CWindowCast@VCMDIChildWindow@@@@SGPAVCMDIChildWindow@@PAVCWindow@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMDIChildWindow@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMDIFrameWindow@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMDIClientWindow@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

CONST	SEGMENT
?dwFlags@?1??OnSize@CMDIChildWindow@@MAEHIIIPAJ@Z@4KB DD 027H ; `CMDIChildWindow::OnSize'::`2'::dwFlags
?dwFlags@?1??OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z@4KB DD 063fH ; `CMDIChildWindow::OnStyleChanged'::`2'::dwFlags
?dwFrameChangeMask@?1??OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z@4KB DD 0200H ; `CMDIChildWindow::OnStyleChanged'::`2'::dwFrameChangeMask
CONST	ENDS
PUBLIC	?IsWindow@CWindow@@UAEHXZ			; CWindow::IsWindow
PUBLIC	?SendMessageA@CWindow@@UAEJIIJ@Z		; CWindow::SendMessageA
PUBLIC	?PostMessageA@CWindow@@UAEJIIJ@Z		; CWindow::PostMessageA
PUBLIC	?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z	; CWindow::SendDlgItemMessageA
PUBLIC	?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z		; CWindow::GetDlgItem
PUBLIC	?SetWindowTextA@CWindow@@UAEHPBD@Z		; CWindow::SetWindowTextA
PUBLIC	?SetDlgItemTextA@CWindow@@UAEHHPBD@Z		; CWindow::SetDlgItemTextA
PUBLIC	?SetDlgItemInt@CWindow@@UAEHHIH@Z		; CWindow::SetDlgItemInt
PUBLIC	?GetDlgItemTextA@CWindow@@UAEHHPADH@Z		; CWindow::GetDlgItemTextA
PUBLIC	?GetDlgItemInt@CWindow@@UAEIHPAHH@Z		; CWindow::GetDlgItemInt
PUBLIC	?MoveWindow@CWindow@@UAEHHHHHH@Z		; CWindow::MoveWindow
PUBLIC	?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z	; CWindow::MoveWindow
PUBLIC	?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetWindowRect
PUBLIC	?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetClientRect
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z	; CWindow::ScreenToClient
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::ScreenToClient
PUBLIC	?DragAcceptFiles@CWindow@@UAEXH@Z		; CWindow::DragAcceptFiles
PUBLIC	??BCWindow@@UAEPAUHWND__@@XZ			; CWindow::operator HWND__ *
PUBLIC	?OnCreate@CWindow@@UAEHPAXPAJ@Z			; CWindow::OnCreate
PUBLIC	?OnClose@CWindow@@UAEHPAJ@Z			; CWindow::OnClose
PUBLIC	?OnDestroy@CWindow@@UAEHPAJ@Z			; CWindow::OnDestroy
PUBLIC	?OnSize@CWindow@@UAEHIIIPAJ@Z			; CWindow::OnSize
PUBLIC	?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z	; CWindow::OnCommand
PUBLIC	?OnSysCommand@CWindow@@UAEHIPAJ@Z		; CWindow::OnSysCommand
PUBLIC	?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z	; CWindow::OnNotify
PUBLIC	?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z	; CWindow::OnEraseBackground
PUBLIC	?OnPaint@CWindow@@UAEHPAJ@Z			; CWindow::OnPaint
PUBLIC	?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z	; CWindow::OnContextMenu
PUBLIC	?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z	; CWindow::OnDropFiles
PUBLIC	?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z	; CWindow::OnScroll
PUBLIC	??0CMDIFrameWindow@@QAE@II@Z			; CMDIFrameWindow::CMDIFrameWindow
PUBLIC	?Create@CMDIFrameWindow@@MAEHPBD0KKHHHHPAX@Z	; CMDIFrameWindow::Create
PUBLIC	?DefWindowProcA@CMDIFrameWindow@@MAEJPAUHWND__@@IIJ@Z ; CMDIFrameWindow::DefWindowProcA
PUBLIC	??_7CMDIFrameWindow@@6B@			; CMDIFrameWindow::`vftable'
PUBLIC	??_GCMDIFrameWindow@@UAEPAXI@Z			; CMDIFrameWindow::`scalar deleting destructor'
PUBLIC	??_ECMDIFrameWindow@@UAEPAXI@Z			; CMDIFrameWindow::`vector deleting destructor'
EXTRN	__purecall:NEAR
EXTRN	??0CWindow@@QAE@III@Z:NEAR			; CWindow::CWindow
EXTRN	?Destroy@CWindow@@UAEXXZ:NEAR			; CWindow::Destroy
EXTRN	?SetRedraw@CWindow@@UAEHH@Z:NEAR		; CWindow::SetRedraw
EXTRN	?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z:NEAR ; CWindow::DispatchMessageA
EXTRN	?HandleMessage@CWindow@@UAEHIIJPAJ@Z:NEAR	; CWindow::HandleMessage
EXTRN	?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z:NEAR	; CWindow::OnScroll
EXTRN	?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z:NEAR	; CWindow::Create
;	COMDAT ??_7CMDIFrameWindow@@6B@
; File c:\xbox\private\windows\directx\xact\host\gui\base\mdiwrap.cpp
CONST	SEGMENT
??_7CMDIFrameWindow@@6B@ DD FLAT:??_ECMDIFrameWindow@@UAEPAXI@Z ; CMDIFrameWindow::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CWindow@@UAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnSize@CWindow@@UAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CWindow@@UAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CMDIFrameWindow@@MAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
	DD	FLAT:?Create@CMDIFrameWindow@@MAEHPBD0KKHHHHPAX@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMDIFrameWindow@@QAE@II@Z
_TEXT	SEGMENT
_nMenuId$ = 8
_nAccelId$ = 12
_this$ = -4
??0CMDIFrameWindow@@QAE@II@Z PROC NEAR			; CMDIFrameWindow::CMDIFrameWindow, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 45 0c	 mov	 eax, DWORD PTR _nAccelId$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _nMenuId$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??0CWindow@@QAE@III@Z	; CWindow::CWindow
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CMDIFrameWindow@@6B@ ; CMDIFrameWindow::`vftable'

; 43   : }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
??0CMDIFrameWindow@@QAE@II@Z ENDP			; CMDIFrameWindow::CMDIFrameWindow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCreate@CWindow@@UAEHPAXPAJ@Z PROC NEAR		; CWindow::OnCreate, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 242  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnCreate@CWindow@@UAEHPAXPAJ@Z ENDP			; CWindow::OnCreate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnClose@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnClose, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 247  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnClose@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnClose
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDestroy@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnDestroy, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 252  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnDestroy@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnDestroy
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSize@CWindow@@UAEHIIIPAJ@Z PROC NEAR			; CWindow::OnSize, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 257  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnSize@CWindow@@UAEHIIIPAJ@Z ENDP			; CWindow::OnSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z PROC NEAR	; CWindow::OnCommand, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 261  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 262  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z ENDP		; CWindow::OnCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSysCommand@CWindow@@UAEHIPAJ@Z PROC NEAR		; CWindow::OnSysCommand, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 266  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 267  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnSysCommand@CWindow@@UAEHIPAJ@Z ENDP			; CWindow::OnSysCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z PROC NEAR	; CWindow::OnNotify, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 272  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z ENDP		; CWindow::OnNotify
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z PROC NEAR ; CWindow::OnEraseBackground, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 277  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z ENDP	; CWindow::OnEraseBackground
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnPaint@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnPaint@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnPaint, COMDAT
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 282  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnPaint@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnPaint
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z PROC NEAR	; CWindow::OnScroll, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 287  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z ENDP		; CWindow::OnScroll
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z PROC NEAR ; CWindow::OnContextMenu, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 292  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z ENDP	; CWindow::OnContextMenu
_TEXT	ENDS
PUBLIC	??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_04BEIE@this?$AA@				; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\base\wndwrap.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT
??_C@_04BEIE@this?$AA@ DB 'this', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCWindow@@UAEPAUHWND__@@XZ PROC NEAR			; CWindow::operator HWND__ *, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 301  :     ASSERT(this);

  00007	68 2d 01 00 00	 push	 301			; 0000012dH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04BEIE@this?$AA@ ; `string'
  00016	33 c0		 xor	 eax, eax
  00018	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 302  :     return m_hWnd;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 303  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??BCWindow@@UAEPAUHWND__@@XZ ENDP			; CWindow::operator HWND__ *
_TEXT	ENDS
PUBLIC	??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@	; `string'
EXTRN	__imp__IsWindow@4:NEAR
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ DB '::IsWindow(m_hWnd)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsWindow@CWindow@@UAEHXZ PROC NEAR			; CWindow::IsWindow, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  :     if(!m_hWnd)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0000e	75 04		 jne	 SHORT $L49125

; 308  :     {
; 309  :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 2f		 jmp	 SHORT $L49124
$L49125:

; 310  :     }
; 311  : 
; 312  :     ASSERT(::IsWindow(m_hWnd));

  00014	68 38 01 00 00	 push	 312			; 00000138H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ ; `string'
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	40		 inc	 eax
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 313  : 
; 314  :     return TRUE;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$L49124:

; 315  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?IsWindow@CWindow@@UAEHXZ ENDP				; CWindow::IsWindow
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?SendMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::SendMessageA, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     return ::SendMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 320  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::SendMessageA
_TEXT	ENDS
EXTRN	__imp__PostMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?PostMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::PostMessageA, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  :     return ::PostMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 325  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?PostMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::PostMessageA
_TEXT	ENDS
EXTRN	__imp__SetWindowTextA@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT
_pszText$ = 8
_this$ = -4
?SetWindowTextA@CWindow@@UAEHPBD@Z PROC NEAR		; CWindow::SetWindowTextA, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  :     return ::SetWindowText(m_hWnd, pszText);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 330  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetWindowTextA@CWindow@@UAEHPBD@Z ENDP			; CWindow::SetWindowTextA
_TEXT	ENDS
EXTRN	__imp__MoveWindow@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_nWidth$ = 16
_nHeight$ = 20
_fRepaint$ = 24
_this$ = -4
?MoveWindow@CWindow@@UAEHHHHHH@Z PROC NEAR		; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :     return ::MoveWindow(m_hWnd, x, y, nWidth, nHeight, fRepaint);

  00007	8b 45 18	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 335  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?MoveWindow@CWindow@@UAEHHHHHH@Z ENDP			; CWindow::MoveWindow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_fRepaint$ = 12
_this$ = -4
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z PROC NEAR	; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  :     return ::MoveWindow(m_hWnd, prcWindow->left, prcWindow->top, prcWindow->right - prcWindow->left, prcWindow->bottom - prcWindow->top, fRepaint);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 340  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z ENDP		; CWindow::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_this$ = -4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetWindowRect, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :     return ::GetWindowRect(m_hWnd, prcWindow);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 345  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetWindowRect
_TEXT	ENDS
EXTRN	__imp__GetClientRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcClient$ = 8
_this$ = -4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetClientRect, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 349  :     return ::GetClientRect(m_hWnd, prcClient);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcClient$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 350  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetClientRect
_TEXT	ENDS
EXTRN	__imp__ScreenToClient@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_ppt$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  :     return ::ScreenToClient(m_hWnd, ppt);

  00007	8b 45 08	 mov	 eax, DWORD PTR _ppt$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 355  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z ENDP	; CWindow::ScreenToClient
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prc$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  :     if(!::ScreenToClient(m_hWnd, (LPPOINT)&prc->left))

  00007	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
  00018	85 c0		 test	 eax, eax
  0001a	75 04		 jne	 SHORT $L49173

; 360  :     {
; 361  :         return FALSE;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 14		 jmp	 SHORT $L49171
$L49173:

; 362  :     }
; 363  : 
; 364  :     return ::ScreenToClient(m_hWnd, (LPPOINT)&prc->right);

  00020	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  00023	83 c0 08	 add	 eax, 8
  00026	50		 push	 eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002d	52		 push	 edx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
$L49171:

; 365  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z ENDP	; CWindow::ScreenToClient
_TEXT	ENDS
EXTRN	__imp__SendDlgItemMessageA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT
_nItemId$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z PROC NEAR	; CWindow::SendDlgItemMessageA, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 369  :     return ::SendDlgItemMessage(m_hWnd, nItemId, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 370  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z ENDP		; CWindow::SendDlgItemMessageA
_TEXT	ENDS
EXTRN	__imp__GetDlgItem@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT
_nItemId$ = 8
_this$ = -4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z PROC NEAR	; CWindow::GetDlgItem, COMDAT
; _this$ = ecx

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :     return ::GetDlgItem(m_hWnd, nItemId);

  00007	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 375  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z ENDP		; CWindow::GetDlgItem
_TEXT	ENDS
EXTRN	__imp__SetDlgItemTextA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_this$ = -4
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z PROC NEAR		; CWindow::SetDlgItemTextA, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  :     return ::SetDlgItemText(m_hWnd, nItemId, pszString);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nItemId$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 380  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z ENDP		; CWindow::SetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__SetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_nValue$ = 12
_fSigned$ = 16
_this$ = -4
?SetDlgItemInt@CWindow@@UAEHHIH@Z PROC NEAR		; CWindow::SetDlgItemInt, COMDAT
; _this$ = ecx

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 384  :     return ::SetDlgItemInt(m_hWnd, nItemId, nValue, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nValue$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemInt@16

; 385  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetDlgItemInt@CWindow@@UAEHHIH@Z ENDP			; CWindow::SetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__GetDlgItemTextA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_nLength$ = 16
_this$ = -4
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z PROC NEAR		; CWindow::GetDlgItemTextA, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :     return ::GetDlgItemText(m_hWnd, nItemId, pszString, nLength);

  00007	8b 45 10	 mov	 eax, DWORD PTR _nLength$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 390  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z ENDP		; CWindow::GetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__GetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pfTranslated$ = 12
_fSigned$ = 16
_this$ = -4
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z PROC NEAR		; CWindow::GetDlgItemInt, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :     return ::GetDlgItemInt(m_hWnd, nItemId, pfTranslated, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pfTranslated$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemInt@16

; 395  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z ENDP		; CWindow::GetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__DragAcceptFiles@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT
_fAccept$ = 8
_this$ = -4
?DragAcceptFiles@CWindow@@UAEXH@Z PROC NEAR		; CWindow::DragAcceptFiles, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 399  :     ::DragAcceptFiles(m_hWnd, fAccept);

  00007	8b 45 08	 mov	 eax, DWORD PTR _fAccept$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 400  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?DragAcceptFiles@CWindow@@UAEXH@Z ENDP			; CWindow::DragAcceptFiles
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z PROC NEAR	; CWindow::OnDropFiles, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 404  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 405  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z ENDP	; CWindow::OnDropFiles
_TEXT	ENDS
PUBLIC	??1CMDIFrameWindow@@UAE@XZ			; CMDIFrameWindow::~CMDIFrameWindow
; Function compile flags: /Odt
;	COMDAT ??_GCMDIFrameWindow@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCMDIFrameWindow@@UAEPAXI@Z PROC NEAR		; CMDIFrameWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMDIFrameWindow@@UAE@XZ ; CMDIFrameWindow::~CMDIFrameWindow
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L49639
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L49639:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMDIFrameWindow@@UAEPAXI@Z ENDP			; CMDIFrameWindow::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
EXTRN	??1CWindow@@UAE@XZ:NEAR				; CWindow::~CWindow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\mdiwrap.cpp
;	COMDAT ??1CMDIFrameWindow@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CMDIFrameWindow@@UAE@XZ PROC NEAR			; CMDIFrameWindow::~CMDIFrameWindow, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMDIFrameWindow@@6B@ ; CMDIFrameWindow::`vftable'

; 69   : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CWindow@@UAE@XZ	; CWindow::~CWindow
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CMDIFrameWindow@@UAE@XZ ENDP				; CMDIFrameWindow::~CMDIFrameWindow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Create@CMDIFrameWindow@@MAEHPBD0KKHHHHPAX@Z
_TEXT	SEGMENT
_pszClassName$ = 8
_pszWindowName$ = 12
_dwExStyle$ = 16
_dwStyle$ = 20
_x$ = 24
_y$ = 28
_nWidth$ = 32
_nHeight$ = 36
_pvParam$ = 40
_this$ = -4
?Create@CMDIFrameWindow@@MAEHPBD0KKHHHHPAX@Z PROC NEAR	; CMDIFrameWindow::Create, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  :     return CWindow::Create(NULL, pszClassName, pszWindowName, dwExStyle, dwStyle, x, y, nWidth, nHeight, 0, pvParam);

  00007	8b 45 28	 mov	 eax, DWORD PTR _pvParam$[ebp]
  0000a	50		 push	 eax
  0000b	6a 00		 push	 0
  0000d	8b 4d 24	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 20	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00014	52		 push	 edx
  00015	8b 45 1c	 mov	 eax, DWORD PTR _y$[ebp]
  00018	50		 push	 eax
  00019	8b 4d 18	 mov	 ecx, DWORD PTR _x$[ebp]
  0001c	51		 push	 ecx
  0001d	8b 55 14	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00020	52		 push	 edx
  00021	8b 45 10	 mov	 eax, DWORD PTR _dwExStyle$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _pszWindowName$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR _pszClassName$[ebp]
  0002c	52		 push	 edx
  0002d	6a 00		 push	 0
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z ; CWindow::Create

; 113  : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 24 00	 ret	 36			; 00000024H
?Create@CMDIFrameWindow@@MAEHPBD0KKHHHHPAX@Z ENDP	; CMDIFrameWindow::Create
_TEXT	ENDS
PUBLIC	?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z		; CWindow::GetHWND
EXTRN	__imp__DefFrameProcA@20:NEAR
EXTRN	__imp__DefWindowProcA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DefWindowProcA@CMDIFrameWindow@@MAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?DefWindowProcA@CMDIFrameWindow@@MAEJPAUHWND__@@IIJ@Z PROC NEAR ; CMDIFrameWindow::DefWindowProcA, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  :     switch(uMsg)
; 147  :     {

  00009	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  0000f	83 7d f8 05	 cmp	 DWORD PTR -8+[ebp], 5
  00013	74 02		 je	 SHORT $L49667
  00015	eb 18		 jmp	 SHORT $L49668
$L49667:

; 148  :         case WM_SIZE:
; 149  :             return ::DefWindowProc(hWnd, uMsg, wParam, lParam);

  00017	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 10	 mov	 edx, DWORD PTR _wParam$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00026	51		 push	 ecx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  0002d	eb 23		 jmp	 SHORT $L49662
$L49668:

; 150  : 
; 151  :         default:
; 152  :             return ::DefFrameProc(hWnd, GetHWND(m_pMDIClient), uMsg, wParam, lParam);

  0002f	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00032	52		 push	 edx
  00033	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _uMsg$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z ; CWindow::GetHWND
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefFrameProcA@20
$L49662:

; 153  :     }
; 154  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 10 00	 ret	 16			; 00000010H
?DefWindowProcA@CMDIFrameWindow@@MAEJPAUHWND__@@IIJ@Z ENDP ; CMDIFrameWindow::DefWindowProcA
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z
_TEXT	SEGMENT
_pWindow$ = 8
?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z PROC NEAR	; CWindow::GetHWND, COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 236  :     return pWindow ? pWindow->m_hWnd : NULL;

  00004	83 7d 08 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00008	74 0b		 je	 SHORT $L50105
  0000a	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  0000d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00010	89 4d fc	 mov	 DWORD PTR -4+[ebp], ecx
  00013	eb 07		 jmp	 SHORT $L50106
$L50105:
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR -4+[ebp], 0
$L50106:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR -4+[ebp]

; 237  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetHWND@CWindow@@SGPAUHWND__@@PAV1@@Z ENDP		; CWindow::GetHWND
_TEXT	ENDS
PUBLIC	?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z	; CWindow::DefWindowProcA
PUBLIC	??0CMDIClientWindow@@QAE@XZ			; CMDIClientWindow::CMDIClientWindow
PUBLIC	?GetActiveChild@CMDIClientWindow@@UAEHPAPAVCMDIChildWindow@@PAH@Z ; CMDIClientWindow::GetActiveChild
PUBLIC	?IsActiveChild@CMDIClientWindow@@UAEHPAVCMDIChildWindow@@@Z ; CMDIClientWindow::IsActiveChild
PUBLIC	?Create@CMDIClientWindow@@MAEHPAVCMDIFrameWindow@@KKHHHHIPBUtagCLIENTCREATESTRUCT@@@Z ; CMDIClientWindow::Create
PUBLIC	?DispatchMessageA@CMDIClientWindow@@MAEHPAUtagMSG@@@Z ; CMDIClientWindow::DispatchMessageA
PUBLIC	??_7CMDIClientWindow@@6B@			; CMDIClientWindow::`vftable'
PUBLIC	??_GCMDIClientWindow@@UAEPAXI@Z			; CMDIClientWindow::`scalar deleting destructor'
PUBLIC	??_ECMDIClientWindow@@UAEPAXI@Z			; CMDIClientWindow::`vector deleting destructor'
;	COMDAT ??_7CMDIClientWindow@@6B@
; File c:\xbox\private\windows\directx\xact\host\gui\base\mdiwrap.cpp
CONST	SEGMENT
??_7CMDIClientWindow@@6B@ DD FLAT:??_ECMDIClientWindow@@UAEPAXI@Z ; CMDIClientWindow::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CMDIClientWindow@@MAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CWindow@@UAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnSize@CWindow@@UAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CWindow@@UAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
	DD	FLAT:?GetActiveChild@CMDIClientWindow@@UAEHPAPAVCMDIChildWindow@@PAH@Z
	DD	FLAT:?IsActiveChild@CMDIClientWindow@@UAEHPAVCMDIChildWindow@@@Z
	DD	FLAT:?Create@CMDIClientWindow@@MAEHPAVCMDIFrameWindow@@KKHHHHIPBUtagCLIENTCREATESTRUCT@@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMDIClientWindow@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CMDIClientWindow@@QAE@XZ PROC NEAR			; CMDIClientWindow::CMDIClientWindow, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 02		 push	 2
  00009	6a ff		 push	 -1
  0000b	6a ff		 push	 -1
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CWindow@@QAE@III@Z	; CWindow::CWindow
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMDIClientWindow@@6B@ ; CMDIClientWindow::`vftable'

; 181  : }

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0CMDIClientWindow@@QAE@XZ ENDP			; CMDIClientWindow::CMDIClientWindow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z PROC NEAR	; CWindow::DefWindowProcA, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  :     return ::DefWindowProc(hWnd, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16

; 297  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z ENDP	; CWindow::DefWindowProcA
_TEXT	ENDS
PUBLIC	??1CMDIClientWindow@@UAE@XZ			; CMDIClientWindow::~CMDIClientWindow
; Function compile flags: /Odt
;	COMDAT ??_GCMDIClientWindow@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCMDIClientWindow@@UAEPAXI@Z PROC NEAR		; CMDIClientWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMDIClientWindow@@UAE@XZ ; CMDIClientWindow::~CMDIClientWindow
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L49676
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L49676:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMDIClientWindow@@UAEPAXI@Z ENDP			; CMDIClientWindow::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Cast@?$CWindowCast@VCMDIFrameWindow@@@@SGPAVCMDIFrameWindow@@PAVCWindow@@@Z ; CWindowCast<CMDIFrameWindow>::Cast
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\mdiwrap.cpp
;	COMDAT ??1CMDIClientWindow@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8
_pParent$ = -4
??1CMDIClientWindow@@UAE@XZ PROC NEAR			; CMDIClientWindow::~CMDIClientWindow, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMDIClientWindow@@6B@ ; CMDIClientWindow::`vftable'

; 207  :     CMDIFrameWindow *           pParent = CWindowCast<CMDIFrameWindow>::Cast(m_pParent);

  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 ?Cast@?$CWindowCast@VCMDIFrameWindow@@@@SGPAVCMDIFrameWindow@@PAVCWindow@@@Z ; CWindowCast<CMDIFrameWindow>::Cast
  0001e	89 45 fc	 mov	 DWORD PTR _pParent$[ebp], eax

; 208  : 
; 209  :     if(pParent)

  00021	83 7d fc 00	 cmp	 DWORD PTR _pParent$[ebp], 0
  00025	74 0a		 je	 SHORT $L49693

; 210  :     {
; 211  :         pParent->m_pMDIClient = NULL;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _pParent$[ebp]
  0002a	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
$L49693:

; 212  :     }
; 213  : }

  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??1CWindow@@UAE@XZ	; CWindow::~CWindow
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??1CMDIClientWindow@@UAE@XZ ENDP			; CMDIClientWindow::~CMDIClientWindow
_TEXT	ENDS
PUBLIC	??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_07HEHH@pParent?$AA@			; `string'
PUBLIC	??_C@_09MLCM@MDICLIENT?$AA@			; `string'
;	COMDAT ??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\base\mdiwrap.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HEHH@pParent?$AA@
CONST	SEGMENT
??_C@_07HEHH@pParent?$AA@ DB 'pParent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MLCM@MDICLIENT?$AA@
CONST	SEGMENT
??_C@_09MLCM@MDICLIENT?$AA@ DB 'MDICLIENT', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Create@CMDIClientWindow@@MAEHPAVCMDIFrameWindow@@KKHHHHIPBUtagCLIENTCREATESTRUCT@@@Z
_TEXT	SEGMENT
_pParent$ = 8
_dwExStyle$ = 12
_dwStyle$ = 16
_x$ = 20
_y$ = 24
_nWidth$ = 28
_nHeight$ = 32
_nControlId$ = 36
_pccs$ = 40
_this$ = -4
?Create@CMDIClientWindow@@MAEHPAVCMDIFrameWindow@@KKHHHHIPBUtagCLIENTCREATESTRUCT@@@Z PROC NEAR ; CMDIClientWindow::Create, COMDAT
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 258  :     ASSERT(pParent);

  00007	68 02 01 00 00	 push	 258			; 00000102H
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HEHH@pParent?$AA@ ; `string'
  00016	33 c0		 xor	 eax, eax
  00018	83 7d 08 00	 cmp	 DWORD PTR _pParent$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 259  :     
; 260  :     dwExStyle |= WS_EX_CLIENTEDGE;

  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _dwExStyle$[ebp]
  0002b	80 cd 02	 or	 ch, 2
  0002e	89 4d 0c	 mov	 DWORD PTR _dwExStyle$[ebp], ecx

; 261  :     dwStyle |= WS_CHILD;

  00031	8b 55 10	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00034	81 ca 00 00 00
	40		 or	 edx, 1073741824		; 40000000H
  0003a	89 55 10	 mov	 DWORD PTR _dwStyle$[ebp], edx

; 262  : 
; 263  :     //
; 264  :     // Create the window.  The 
; 265  :     //
; 266  : 
; 267  :     if(!CWindow::Create(pParent, TEXT("MDICLIENT"), NULL, dwExStyle, dwStyle, x, y, nWidth, nHeight, nControlId, (LPVOID)pccs))

  0003d	8b 45 28	 mov	 eax, DWORD PTR _pccs$[ebp]
  00040	50		 push	 eax
  00041	8b 4d 24	 mov	 ecx, DWORD PTR _nControlId$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 20	 mov	 edx, DWORD PTR _nHeight$[ebp]
  00048	52		 push	 edx
  00049	8b 45 1c	 mov	 eax, DWORD PTR _nWidth$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 18	 mov	 ecx, DWORD PTR _y$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 14	 mov	 edx, DWORD PTR _x$[ebp]
  00054	52		 push	 edx
  00055	8b 45 10	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _dwExStyle$[ebp]
  0005c	51		 push	 ecx
  0005d	6a 00		 push	 0
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09MLCM@MDICLIENT?$AA@ ; `string'
  00064	8b 55 08	 mov	 edx, DWORD PTR _pParent$[ebp]
  00067	52		 push	 edx
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	e8 00 00 00 00	 call	 ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z ; CWindow::Create
  00070	85 c0		 test	 eax, eax
  00072	75 04		 jne	 SHORT $L49709

; 268  :     {
; 269  :         return FALSE;

  00074	33 c0		 xor	 eax, eax
  00076	eb 0e		 jmp	 SHORT $L49705
$L49709:

; 270  :     }
; 271  : 
; 272  :     //
; 273  :     // Give the parent frame a pointer to us
; 274  :     //
; 275  : 
; 276  :     pParent->m_pMDIClient = this;

  00078	8b 45 08	 mov	 eax, DWORD PTR _pParent$[ebp]
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 277  : 
; 278  :     return TRUE;

  00081	b8 01 00 00 00	 mov	 eax, 1
$L49705:

; 279  : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 24 00	 ret	 36			; 00000024H
?Create@CMDIClientWindow@@MAEHPAVCMDIFrameWindow@@KKHHHHIPBUtagCLIENTCREATESTRUCT@@@Z ENDP ; CMDIClientWindow::Create
_TEXT	ENDS
EXTRN	__imp__TranslateMDISysAccel@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?DispatchMessageA@CMDIClientWindow@@MAEHPAUtagMSG@@@Z
_TEXT	SEGMENT
_pMsg$ = 8
_this$ = -8
_fDispatched$ = -4
?DispatchMessageA@CMDIClientWindow@@MAEHPAUtagMSG@@@Z PROC NEAR ; CMDIClientWindow::DispatchMessageA, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 306  :     BOOL                    fDispatched;
; 307  : 
; 308  :     //
; 309  :     // If none of our children handle the message, it might be an MDI system
; 310  :     // accelerator
; 311  :     //
; 312  : 
; 313  :     if(!(fDispatched = CWindow::DispatchMessage(pMsg)))

  00009	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z ; CWindow::DispatchMessageA
  00015	89 45 fc	 mov	 DWORD PTR _fDispatched$[ebp], eax
  00018	83 7d fc 00	 cmp	 DWORD PTR _fDispatched$[ebp], 0
  0001c	75 14		 jne	 SHORT $L49716

; 314  :     {
; 315  :         fDispatched = TranslateMDISysAccel(m_hWnd, pMsg);

  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateMDISysAccel@8
  0002f	89 45 fc	 mov	 DWORD PTR _fDispatched$[ebp], eax
$L49716:

; 316  :     }
; 317  : 
; 318  :     return fDispatched;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _fDispatched$[ebp]

; 319  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?DispatchMessageA@CMDIClientWindow@@MAEHPAUtagMSG@@@Z ENDP ; CMDIClientWindow::DispatchMessageA
_TEXT	ENDS
PUBLIC	?Cast@?$CWindowCast@VCMDIChildWindow@@@@SGPAVCMDIChildWindow@@PAVCWindow@@@Z ; CWindowCast<CMDIChildWindow>::Cast
EXTRN	?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z:NEAR ; CWindow::GetWindowContext
; Function compile flags: /Odt
;	COMDAT ?GetActiveChild@CMDIClientWindow@@UAEHPAPAVCMDIChildWindow@@PAH@Z
_TEXT	SEGMENT
_ppWindow$ = 8
_pfMaximized$ = 12
_this$ = -12
_pWindow$ = -8
_hWnd$ = -4
?GetActiveChild@CMDIClientWindow@@UAEHPAPAVCMDIChildWindow@@PAH@Z PROC NEAR ; CMDIClientWindow::GetActiveChild, COMDAT
; _this$ = ecx

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 348  :     CMDIChildWindow *       pWindow;
; 349  :     HWND                    hWnd;
; 350  : 
; 351  :     if(!(hWnd = (HWND)SendMessage(WM_MDIGETACTIVE, 0, (LPARAM)pfMaximized)))

  00009	8b 45 0c	 mov	 eax, DWORD PTR _pfMaximized$[ebp]
  0000c	50		 push	 eax
  0000d	6a 00		 push	 0
  0000f	68 29 02 00 00	 push	 553			; 00000229H
  00014	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	ff 52 18	 call	 DWORD PTR [edx+24]
  0001f	89 45 fc	 mov	 DWORD PTR _hWnd$[ebp], eax
  00022	83 7d fc 00	 cmp	 DWORD PTR _hWnd$[ebp], 0
  00026	75 04		 jne	 SHORT $L49726

; 352  :     {
; 353  :         return FALSE;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 2f		 jmp	 SHORT $L49721
$L49726:

; 354  :     }
; 355  : 
; 356  :     if(!(pWindow = CWindowCast<CMDIChildWindow>::Cast(GetWindowContext(hWnd))))

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?GetWindowContext@CWindow@@KGPAV1@PAUHWND__@@@Z ; CWindow::GetWindowContext
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Cast@?$CWindowCast@VCMDIChildWindow@@@@SGPAVCMDIChildWindow@@PAVCWindow@@@Z ; CWindowCast<CMDIChildWindow>::Cast
  0003b	89 45 f8	 mov	 DWORD PTR _pWindow$[ebp], eax
  0003e	83 7d f8 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00042	75 04		 jne	 SHORT $L49738

; 357  :     {
; 358  :         return FALSE;

  00044	33 c0		 xor	 eax, eax
  00046	eb 13		 jmp	 SHORT $L49721
$L49738:

; 359  :     }
; 360  : 
; 361  :     if(ppWindow)

  00048	83 7d 08 00	 cmp	 DWORD PTR _ppWindow$[ebp], 0
  0004c	74 08		 je	 SHORT $L49739

; 362  :     {
; 363  :         *ppWindow = pWindow;

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _ppWindow$[ebp]
  00051	8b 55 f8	 mov	 edx, DWORD PTR _pWindow$[ebp]
  00054	89 11		 mov	 DWORD PTR [ecx], edx
$L49739:

; 364  :     }
; 365  : 
; 366  :     return TRUE;

  00056	b8 01 00 00 00	 mov	 eax, 1
$L49721:

; 367  : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?GetActiveChild@CMDIClientWindow@@UAEHPAPAVCMDIChildWindow@@PAH@Z ENDP ; CMDIClientWindow::GetActiveChild
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsActiveChild@CMDIClientWindow@@UAEHPAVCMDIChildWindow@@@Z
_TEXT	SEGMENT
_pWindow$ = 8
_this$ = -8
_hWnd$ = -4
?IsActiveChild@CMDIClientWindow@@UAEHPAVCMDIChildWindow@@@Z PROC NEAR ; CMDIClientWindow::IsActiveChild, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :     HWND                    hWnd;
; 395  : 
; 396  :     if(!(hWnd = (HWND)SendMessage(WM_MDIGETACTIVE)))

  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	68 29 02 00 00	 push	 553			; 00000229H
  00012	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	ff 52 18	 call	 DWORD PTR [edx+24]
  0001d	89 45 fc	 mov	 DWORD PTR _hWnd$[ebp], eax
  00020	83 7d fc 00	 cmp	 DWORD PTR _hWnd$[ebp], 0
  00024	75 04		 jne	 SHORT $L49746

; 397  :     {
; 398  :         return FALSE;

  00026	33 c0		 xor	 eax, eax
  00028	eb 10		 jmp	 SHORT $L49743
$L49746:

; 399  :     }
; 400  : 
; 401  :     return hWnd == pWindow->m_hWnd;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00030	33 d2		 xor	 edx, edx
  00032	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00035	0f 94 c2	 sete	 dl
  00038	8b c2		 mov	 eax, edx
$L49743:

; 402  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?IsActiveChild@CMDIClientWindow@@UAEHPAVCMDIChildWindow@@@Z ENDP ; CMDIClientWindow::IsActiveChild
_TEXT	ENDS
PUBLIC	??0CMDIChildWindow@@QAE@XZ			; CMDIChildWindow::CMDIChildWindow
PUBLIC	?Create@CMDIChildWindow@@MAEHPAVCMDIClientWindow@@PBD1KKHHHHPAX@Z ; CMDIChildWindow::Create
PUBLIC	?HandleMessage@CMDIChildWindow@@MAEHIIJPAJ@Z	; CMDIChildWindow::HandleMessage
PUBLIC	?OnSize@CMDIChildWindow@@MAEHIIIPAJ@Z		; CMDIChildWindow::OnSize
PUBLIC	?OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z ; CMDIChildWindow::OnStyleChanged
PUBLIC	?OnForceResize@CMDIChildWindow@@MAEHPAJ@Z	; CMDIChildWindow::OnForceResize
PUBLIC	?OnMdiActivate@CMDIChildWindow@@MAEHPAUHWND__@@0PAJ@Z ; CMDIChildWindow::OnMdiActivate
PUBLIC	?OnDestroy@CMDIChildWindow@@MAEHPAJ@Z		; CMDIChildWindow::OnDestroy
PUBLIC	?OnActivate@CMDIChildWindow@@MAEXXZ		; CMDIChildWindow::OnActivate
PUBLIC	?OnDeactivate@CMDIChildWindow@@MAEXXZ		; CMDIChildWindow::OnDeactivate
PUBLIC	?DefWindowProcA@CMDIChildWindow@@MAEJPAUHWND__@@IIJ@Z ; CMDIChildWindow::DefWindowProcA
PUBLIC	??_7CMDIChildWindow@@6B@			; CMDIChildWindow::`vftable'
PUBLIC	??_GCMDIChildWindow@@UAEPAXI@Z			; CMDIChildWindow::`scalar deleting destructor'
PUBLIC	??_ECMDIChildWindow@@UAEPAXI@Z			; CMDIChildWindow::`vector deleting destructor'
;	COMDAT ??_7CMDIChildWindow@@6B@
CONST	SEGMENT
??_7CMDIChildWindow@@6B@ DD FLAT:??_ECMDIChildWindow@@UAEPAXI@Z ; CMDIChildWindow::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CWindow@@UAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CMDIChildWindow@@MAEHPAJ@Z
	DD	FLAT:?OnSize@CMDIChildWindow@@MAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWindow@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CMDIChildWindow@@MAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CMDIChildWindow@@MAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
	DD	FLAT:?Create@CMDIChildWindow@@MAEHPAVCMDIClientWindow@@PBD1KKHHHHPAX@Z
	DD	FLAT:?OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z
	DD	FLAT:?OnForceResize@CMDIChildWindow@@MAEHPAJ@Z
	DD	FLAT:?OnMdiActivate@CMDIChildWindow@@MAEHPAUHWND__@@0PAJ@Z
	DD	FLAT:?OnActivate@CMDIChildWindow@@MAEXXZ
	DD	FLAT:?OnDeactivate@CMDIChildWindow@@MAEXXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CMDIChildWindow@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CMDIChildWindow@@QAE@XZ PROC NEAR			; CMDIChildWindow::CMDIChildWindow, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 03		 push	 3
  00009	6a ff		 push	 -1
  0000b	6a ff		 push	 -1
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CWindow@@QAE@III@Z	; CWindow::CWindow
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMDIChildWindow@@6B@ ; CMDIChildWindow::`vftable'

; 429  : }

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0CMDIChildWindow@@QAE@XZ ENDP				; CMDIChildWindow::CMDIChildWindow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\mdiwrap.h
_TEXT	ENDS
;	COMDAT ?OnActivate@CMDIChildWindow@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnActivate@CMDIChildWindow@@MAEXXZ PROC NEAR		; CMDIChildWindow::OnActivate, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 129  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnActivate@CMDIChildWindow@@MAEXXZ ENDP		; CMDIChildWindow::OnActivate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDeactivate@CMDIChildWindow@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4
?OnDeactivate@CMDIChildWindow@@MAEXXZ PROC NEAR		; CMDIChildWindow::OnDeactivate, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnDeactivate@CMDIChildWindow@@MAEXXZ ENDP		; CMDIChildWindow::OnDeactivate
_TEXT	ENDS
PUBLIC	??1CMDIChildWindow@@UAE@XZ			; CMDIChildWindow::~CMDIChildWindow
; Function compile flags: /Odt
;	COMDAT ??_GCMDIChildWindow@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCMDIChildWindow@@UAEPAXI@Z PROC NEAR		; CMDIChildWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CMDIChildWindow@@UAE@XZ ; CMDIChildWindow::~CMDIChildWindow
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L49754
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L49754:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCMDIChildWindow@@UAEPAXI@Z ENDP			; CMDIChildWindow::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\mdiwrap.cpp
_TEXT	ENDS
;	COMDAT ??1CMDIChildWindow@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CMDIChildWindow@@UAE@XZ PROC NEAR			; CMDIChildWindow::~CMDIChildWindow, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CMDIChildWindow@@6B@ ; CMDIChildWindow::`vftable'

; 455  : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CWindow@@UAE@XZ	; CWindow::~CWindow
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CMDIChildWindow@@UAE@XZ ENDP				; CMDIChildWindow::~CMDIChildWindow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Create@CMDIChildWindow@@MAEHPAVCMDIClientWindow@@PBD1KKHHHHPAX@Z
_TEXT	SEGMENT
_pParent$ = 8
_pszClassName$ = 12
_pszWindowName$ = 16
_dwExStyle$ = 20
_dwStyle$ = 24
_x$ = 28
_y$ = 32
_nWidth$ = 36
_nHeight$ = 40
_pvParam$ = 44
_this$ = -8
_fMaximized$ = -4
?Create@CMDIChildWindow@@MAEHPAVCMDIClientWindow@@PBD1KKHHHHPAX@Z PROC NEAR ; CMDIChildWindow::Create, COMDAT
; _this$ = ecx

; 499  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 500  :     BOOL                    fMaximized;
; 501  :     
; 502  :     ASSERT(pParent);

  00009	68 f6 01 00 00	 push	 502			; 000001f6H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07HEHH@pParent?$AA@ ; `string'
  00018	33 c0		 xor	 eax, eax
  0001a	83 7d 08 00	 cmp	 DWORD PTR _pParent$[ebp], 0
  0001e	0f 94 c0	 sete	 al
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 503  : 
; 504  :     dwExStyle |= WS_EX_MDICHILD;

  0002a	8b 4d 14	 mov	 ecx, DWORD PTR _dwExStyle$[ebp]
  0002d	83 c9 40	 or	 ecx, 64			; 00000040H
  00030	89 4d 14	 mov	 DWORD PTR _dwExStyle$[ebp], ecx

; 505  :     dwStyle |= WS_CHILD;

  00033	8b 55 18	 mov	 edx, DWORD PTR _dwStyle$[ebp]
  00036	81 ca 00 00 00
	40		 or	 edx, 1073741824		; 40000000H
  0003c	89 55 18	 mov	 DWORD PTR _dwStyle$[ebp], edx

; 506  : 
; 507  :     //
; 508  :     // Get the window state of the currently active MDI child (if any)
; 509  :     // and use it to override the state passed in.
; 510  :     //
; 511  :     
; 512  :     if(pParent->GetActiveChild(NULL, &fMaximized))

  0003f	8d 45 fc	 lea	 eax, DWORD PTR _fMaximized$[ebp]
  00042	50		 push	 eax
  00043	6a 00		 push	 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _pParent$[ebp]
  00048	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _pParent$[ebp]
  0004d	ff 92 a0 00 00
	00		 call	 DWORD PTR [edx+160]
  00053	85 c0		 test	 eax, eax
  00055	74 1d		 je	 SHORT $L49773

; 513  :     {
; 514  :         dwStyle &= ~(WS_MAXIMIZE | WS_MINIMIZE);

  00057	8b 45 18	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  0005a	25 ff ff ff de	 and	 eax, -553648129		; deffffffH
  0005f	89 45 18	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 515  :         
; 516  :         if(fMaximized)

  00062	83 7d fc 00	 cmp	 DWORD PTR _fMaximized$[ebp], 0
  00066	74 0c		 je	 SHORT $L49774

; 517  :         {
; 518  :             dwStyle |= WS_MAXIMIZE;

  00068	8b 4d 18	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  0006b	81 c9 00 00 00
	01		 or	 ecx, 16777216		; 01000000H
  00071	89 4d 18	 mov	 DWORD PTR _dwStyle$[ebp], ecx
$L49774:
$L49773:

; 519  :         }
; 520  :     }
; 521  : 
; 522  :     //
; 523  :     // Create the window
; 524  :     //
; 525  : 
; 526  :     return CWindow::Create(pParent, pszClassName, pszWindowName, dwExStyle, dwStyle, x, y, nWidth, nHeight, 0, pvParam);

  00074	8b 55 2c	 mov	 edx, DWORD PTR _pvParam$[ebp]
  00077	52		 push	 edx
  00078	6a 00		 push	 0
  0007a	8b 45 28	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 24	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 20	 mov	 edx, DWORD PTR _y$[ebp]
  00085	52		 push	 edx
  00086	8b 45 1c	 mov	 eax, DWORD PTR _x$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d 18	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 14	 mov	 edx, DWORD PTR _dwExStyle$[ebp]
  00091	52		 push	 edx
  00092	8b 45 10	 mov	 eax, DWORD PTR _pszWindowName$[ebp]
  00095	50		 push	 eax
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _pszClassName$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 08	 mov	 edx, DWORD PTR _pParent$[ebp]
  0009d	52		 push	 edx
  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z ; CWindow::Create

; 527  : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 28 00	 ret	 40			; 00000028H
?Create@CMDIChildWindow@@MAEHPAVCMDIClientWindow@@PBD1KKHHHHPAX@Z ENDP ; CMDIChildWindow::Create
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?HandleMessage@CMDIChildWindow@@MAEHIIJPAJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_plResult$ = 20
_this$ = -8
_fHandled$ = -4
?HandleMessage@CMDIChildWindow@@MAEHIIJPAJ@Z PROC NEAR	; CMDIChildWindow::HandleMessage, COMDAT
; _this$ = ecx

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 560  :     BOOL                    fHandled;
; 561  :     
; 562  :     switch(uMsg)
; 563  :     {

  00009	8b 45 08	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  0000f	83 7d f4 7d	 cmp	 DWORD PTR -12+[ebp], 125 ; 0000007dH
  00013	74 14		 je	 SHORT $L49787
  00015	81 7d f4 22 02
	00 00		 cmp	 DWORD PTR -12+[ebp], 546 ; 00000222H
  0001c	74 41		 je	 SHORT $L49790
  0001e	81 7d f4 ff c3
	00 00		 cmp	 DWORD PTR -12+[ebp], 50175 ; 0000c3ffH
  00025	74 21		 je	 SHORT $L49789
  00027	eb 55		 jmp	 SHORT $L49793
$L49787:

; 564  :         case WM_STYLECHANGED:
; 565  :             fHandled = OnStyleChanged(wParam, (LPSTYLESTRUCT)lParam, plResult);

  00029	8b 4d 14	 mov	 ecx, DWORD PTR _plResult$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 55 10	 mov	 edx, DWORD PTR _lParam$[ebp]
  00030	52		 push	 edx
  00031	8b 45 0c	 mov	 eax, DWORD PTR _wParam$[ebp]
  00034	50		 push	 eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]
  00043	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 566  :             break;

  00046	eb 51		 jmp	 SHORT $L49784
$L49789:

; 567  : 
; 568  :         case WM_USER_FORCERESIZE:
; 569  :             fHandled = OnForceResize(plResult);

  00048	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]
  0005a	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 570  :             break;

  0005d	eb 3a		 jmp	 SHORT $L49784
$L49790:

; 571  : 
; 572  :         case WM_MDIACTIVATE:
; 573  :             fHandled = OnMdiActivate((HWND)wParam, (HWND)lParam, plResult);

  0005f	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  00062	50		 push	 eax
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 0c	 mov	 edx, DWORD PTR _wParam$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 10		 mov	 edx, DWORD PTR [eax]
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	ff 92 ac 00 00
	00		 call	 DWORD PTR [edx+172]
  00079	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax

; 574  :             break;

  0007c	eb 1b		 jmp	 SHORT $L49784
$L49793:

; 575  : 
; 576  :         default:
; 577  :             fHandled = CWindow::HandleMessage(uMsg, wParam, lParam, plResult);

  0007e	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  00081	50		 push	 eax
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 0c	 mov	 edx, DWORD PTR _wParam$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 08	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?HandleMessage@CWindow@@UAEHIIJPAJ@Z ; CWindow::HandleMessage
  00096	89 45 fc	 mov	 DWORD PTR _fHandled$[ebp], eax
$L49784:

; 578  :             break;
; 579  :     }
; 580  : 
; 581  :     return fHandled;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _fHandled$[ebp]

; 582  : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 10 00	 ret	 16			; 00000010H
?HandleMessage@CMDIChildWindow@@MAEHIIJPAJ@Z ENDP	; CMDIChildWindow::HandleMessage
_TEXT	ENDS
EXTRN	__imp__GetWindowLongA@8:NEAR
EXTRN	__imp__SetWindowLongA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?OnSize@CMDIChildWindow@@MAEHIIIPAJ@Z
_TEXT	SEGMENT
_nType$ = 8
_nWidth$ = 12
_nHeight$ = 16
_plResult$ = 20
_this$ = -24
_dwExStyle$ = -20
?OnSize@CMDIChildWindow@@MAEHIIIPAJ@Z PROC NEAR		; CMDIChildWindow::OnSize, COMDAT
; _this$ = ecx

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 615  :     static const DWORD      dwFlags     = SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED;
; 616  :     DWORD                   dwExStyle;
; 617  :     RECT                    rc;
; 618  :     
; 619  :     if(CWindow::OnSize(nType, nWidth, nHeight, plResult))

  00009	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 0c	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _nType$[ebp]
  00018	50		 push	 eax
  00019	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?OnSize@CWindow@@UAEHIIIPAJ@Z ; CWindow::OnSize
  00021	85 c0		 test	 eax, eax
  00023	74 07		 je	 SHORT $L49805

; 620  :     {
; 621  :         return TRUE;

  00025	b8 01 00 00 00	 mov	 eax, 1
  0002a	eb 72		 jmp	 SHORT $L49800
$L49805:

; 622  :     }
; 623  : 
; 624  :     //
; 625  :     // Toggle the WS_EX_CLIENTEDGE style so we don't look goofy when maximized
; 626  :     // inside the MDI client window.  Because of this trick, make sure child
; 627  :     // windows don't have the WS_EX_CLIENTEDGE style.
; 628  :     //
; 629  :     // This is all a massive hack.  See OnStyleChanged and OnForceResize for
; 630  :     // more information.
; 631  :     //
; 632  : 
; 633  :     if(SIZE_MAXIMIZED == nType)

  0002c	83 7d 08 02	 cmp	 DWORD PTR _nType$[ebp], 2
  00030	75 36		 jne	 SHORT $L49806

; 634  :     {
; 635  :         if((dwExStyle = GetWindowLong(m_hWnd, GWL_EXSTYLE)) & WS_EX_CLIENTEDGE)

  00032	6a ec		 push	 -20			; ffffffecH
  00034	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0003a	52		 push	 edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00041	89 45 ec	 mov	 DWORD PTR _dwExStyle$[ebp], eax
  00044	8b 45 ec	 mov	 eax, DWORD PTR _dwExStyle$[ebp]
  00047	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0004c	85 c0		 test	 eax, eax
  0004e	74 16		 je	 SHORT $L49807

; 636  :         {
; 637  :             SetWindowLong(m_hWnd, GWL_EXSTYLE, dwExStyle & ~WS_EX_CLIENTEDGE);

  00050	8b 4d ec	 mov	 ecx, DWORD PTR _dwExStyle$[ebp]
  00053	80 e5 fd	 and	 ch, -3			; fffffffdH
  00056	51		 push	 ecx
  00057	6a ec		 push	 -20			; ffffffecH
  00059	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
$L49807:

; 638  :         }
; 639  :     }
; 640  :     else

  00066	eb 34		 jmp	 SHORT $L49808
$L49806:

; 641  :     {
; 642  :         if(!((dwExStyle = GetWindowLong(m_hWnd, GWL_EXSTYLE)) & WS_EX_CLIENTEDGE))

  00068	6a ec		 push	 -20			; ffffffecH
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00070	52		 push	 edx
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowLongA@8
  00077	89 45 ec	 mov	 DWORD PTR _dwExStyle$[ebp], eax
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _dwExStyle$[ebp]
  0007d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00082	85 c0		 test	 eax, eax
  00084	75 16		 jne	 SHORT $L49809

; 643  :         {
; 644  :             SetWindowLong(m_hWnd, GWL_EXSTYLE, dwExStyle | WS_EX_CLIENTEDGE);

  00086	8b 4d ec	 mov	 ecx, DWORD PTR _dwExStyle$[ebp]
  00089	80 cd 02	 or	 ch, 2
  0008c	51		 push	 ecx
  0008d	6a ec		 push	 -20			; ffffffecH
  0008f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12
$L49809:
$L49808:

; 645  :         }
; 646  :     }
; 647  : 
; 648  :     return FALSE;

  0009c	33 c0		 xor	 eax, eax
$L49800:

; 649  : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 10 00	 ret	 16			; 00000010H
?OnSize@CMDIChildWindow@@MAEHIIIPAJ@Z ENDP		; CMDIChildWindow::OnSize
_TEXT	ENDS
EXTRN	__imp__SetWindowPos@28:NEAR
; Function compile flags: /Odt
;	COMDAT ?OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z
_TEXT	SEGMENT
_nStyle$ = 8
_pStyleData$ = 12
_this$ = -4
?OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z PROC NEAR ; CMDIChildWindow::OnStyleChanged, COMDAT
; _this$ = ecx

; 679  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 680  :     static const DWORD      dwFlags             = SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOOWNERZORDER | SWP_NOREDRAW | SWP_NOSENDCHANGING | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED;
; 681  :     static const DWORD      dwFrameChangeMask   = WS_EX_CLIENTEDGE;
; 682  : 
; 683  :     //
; 684  :     // Whenever the frame style changes, Windows won't automatically redraw
; 685  :     // the window, so we'll do it from here
; 686  :     //
; 687  :     
; 688  :     if(GWL_EXSTYLE == nStyle)

  00007	83 7d 08 ec	 cmp	 DWORD PTR _nStyle$[ebp], -20 ; ffffffecH
  0000b	75 47		 jne	 SHORT $L49820

; 689  :     {
; 690  :         if((pStyleData->styleNew ^ pStyleData->styleOld) & dwFrameChangeMask)

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _pStyleData$[ebp]
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _pStyleData$[ebp]
  00013	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00016	33 11		 xor	 edx, DWORD PTR [ecx]
  00018	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  0001e	85 d2		 test	 edx, edx
  00020	74 32		 je	 SHORT $L49821

; 691  :         {
; 692  :             ::SetWindowPos(m_hWnd, 0, 0, 0, 0, 0, dwFlags);

  00022	68 3f 06 00 00	 push	 1599			; 0000063fH
  00027	6a 00		 push	 0
  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00037	51		 push	 ecx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowPos@28

; 693  :             ::PostMessage(m_hWnd, WM_USER_FORCERESIZE, 0, 0);

  0003e	6a 00		 push	 0
  00040	6a 00		 push	 0
  00042	68 ff c3 00 00	 push	 50175			; 0000c3ffH
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0004d	50		 push	 eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
$L49821:
$L49820:

; 694  :         }
; 695  :     }
; 696  : 
; 697  :     return FALSE;

  00054	33 c0		 xor	 eax, eax

; 698  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 0c 00	 ret	 12			; 0000000cH
?OnStyleChanged@CMDIChildWindow@@MAEHIPAUtagSTYLESTRUCT@@PAJ@Z ENDP ; CMDIChildWindow::OnStyleChanged
_TEXT	ENDS
PUBLIC	??_C@_09EGKB@m_pParent?$AA@			; `string'
PUBLIC	??_C@_0BF@IDKB@m_pParent?9?$DOm_pParent?$AA@	; `string'
EXTRN	__imp__InvalidateRect@12:NEAR
;	COMDAT ??_C@_09EGKB@m_pParent?$AA@
CONST	SEGMENT
??_C@_09EGKB@m_pParent?$AA@ DB 'm_pParent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IDKB@m_pParent?9?$DOm_pParent?$AA@
CONST	SEGMENT
??_C@_0BF@IDKB@m_pParent?9?$DOm_pParent?$AA@ DB 'm_pParent->m_pParent', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?OnForceResize@CMDIChildWindow@@MAEHPAJ@Z
_TEXT	SEGMENT
_plResult$ = 8
_this$ = -20
_rc$ = -16
?OnForceResize@CMDIChildWindow@@MAEHPAJ@Z PROC NEAR	; CMDIChildWindow::OnForceResize, COMDAT
; _this$ = ecx

; 724  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 725  :     RECT                    rc;
; 726  : 
; 727  :     // 
; 728  :     // This sucks, but I'm anal enough to want a recessed MDI client window
; 729  :     // and a recessed MDI child window without having a doubly-recessed
; 730  :     // window when the child is maximized.
; 731  :     //
; 732  :     // Force a resize of the MDI client window so it in turn resizes the
; 733  :     // MDI child properly.
; 734  :     //
; 735  :     // Sometimes that's not enough, so we'll force a resize of the child
; 736  :     // as well.  If there isn't a better way to do this, someone should
; 737  :     // lose their job.  Regardless, I can't figure it out.
; 738  :     //
; 739  : 
; 740  :     ASSERT(m_pParent);

  00009	68 e4 02 00 00	 push	 740			; 000002e4H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09EGKB@m_pParent?$AA@ ; `string'
  00018	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00021	0f 94 c1	 sete	 cl
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 741  :     ASSERT(m_pParent->m_pParent);

  0002d	68 e5 02 00 00	 push	 741			; 000002e5H
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@IDKB@m_pParent?9?$DOm_pParent?$AA@ ; `string'
  0003c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00042	33 c9		 xor	 ecx, ecx
  00044	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00048	0f 94 c1	 sete	 cl
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 742  :     
; 743  :     m_pParent->GetWindowRect(&rc);

  00054	8d 55 f0	 lea	 edx, DWORD PTR _rc$[ebp]
  00057	52		 push	 edx
  00058	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0005e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	8b c8		 mov	 ecx, eax
  00068	ff 52 44	 call	 DWORD PTR [edx+68]

; 744  :     m_pParent->m_pParent->ScreenToClient(&rc);

  0006b	8d 45 f0	 lea	 eax, DWORD PTR _rc$[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00075	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00078	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0007e	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00081	8b 00		 mov	 eax, DWORD PTR [eax]
  00083	ff 50 4c	 call	 DWORD PTR [eax+76]

; 745  : 
; 746  :     m_pParent->MoveWindow(0, 0, 0, 0, FALSE);

  00086	6a 00		 push	 0
  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00096	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0009c	8b 12		 mov	 edx, DWORD PTR [edx]
  0009e	ff 52 40	 call	 DWORD PTR [edx+64]

; 747  :     m_pParent->MoveWindow(&rc, FALSE);

  000a1	6a 00		 push	 0
  000a3	8d 45 f0	 lea	 eax, DWORD PTR _rc$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000ad	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b3	8b 12		 mov	 edx, DWORD PTR [edx]
  000b5	ff 52 3c	 call	 DWORD PTR [edx+60]

; 748  : 
; 749  :     GetWindowRect(&rc);

  000b8	8d 45 f0	 lea	 eax, DWORD PTR _rc$[ebp]
  000bb	50		 push	 eax
  000bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	ff 52 44	 call	 DWORD PTR [edx+68]

; 750  :     m_pParent->ScreenToClient(&rc);

  000c7	8d 45 f0	 lea	 eax, DWORD PTR _rc$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000d1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000d7	8b 12		 mov	 edx, DWORD PTR [edx]
  000d9	ff 52 4c	 call	 DWORD PTR [edx+76]

; 751  : 
; 752  :     InvalidateRect(m_pParent->m_hWnd, NULL, TRUE);

  000dc	6a 01		 push	 1
  000de	6a 00		 push	 0
  000e0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000e6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000e9	52		 push	 edx
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 753  :     InvalidateRect(m_hWnd, NULL, TRUE);

  000f0	6a 01		 push	 1
  000f2	6a 00		 push	 0
  000f4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000fa	51		 push	 ecx
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 754  : 
; 755  :     MoveWindow(0, 0, 0, 0, FALSE);

  00101	6a 00		 push	 0
  00103	6a 00		 push	 0
  00105	6a 00		 push	 0
  00107	6a 00		 push	 0
  00109	6a 00		 push	 0
  0010b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0010e	8b 02		 mov	 eax, DWORD PTR [edx]
  00110	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	ff 50 40	 call	 DWORD PTR [eax+64]

; 756  :     MoveWindow(&rc, TRUE);

  00116	6a 01		 push	 1
  00118	8d 4d f0	 lea	 ecx, DWORD PTR _rc$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0011f	8b 02		 mov	 eax, DWORD PTR [edx]
  00121	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	ff 50 3c	 call	 DWORD PTR [eax+60]

; 757  : 
; 758  :     *plResult = 0;

  00127	8b 4d 08	 mov	 ecx, DWORD PTR _plResult$[ebp]
  0012a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 759  : 
; 760  :     return TRUE;

  00130	b8 01 00 00 00	 mov	 eax, 1

; 761  : }

  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 04 00	 ret	 4
?OnForceResize@CMDIChildWindow@@MAEHPAJ@Z ENDP		; CMDIChildWindow::OnForceResize
_TEXT	ENDS
PUBLIC	??_C@_07FEMJ@XACTGUI?$AA@			; `string'
PUBLIC	??_C@_0BP@GFDF@CMDIChildWindow?3?3OnMdiActivate?$AA@ ; `string'
PUBLIC	??_C@_0DA@MMBG@Received?5WM_MDIACTIVATE?5with?5une@ ; `string'
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT
??_C@_07FEMJ@XACTGUI?$AA@ DB 'XACTGUI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GFDF@CMDIChildWindow?3?3OnMdiActivate?$AA@
CONST	SEGMENT
??_C@_0BP@GFDF@CMDIChildWindow?3?3OnMdiActivate?$AA@ DB 'CMDIChildWindow:'
	DB	':OnMdiActivate', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MMBG@Received?5WM_MDIACTIVATE?5with?5une@
CONST	SEGMENT
??_C@_0DA@MMBG@Received?5WM_MDIACTIVATE?5with?5une@ DB 'Received WM_MDIAC'
	DB	'TIVATE with unexpected handles', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?OnMdiActivate@CMDIChildWindow@@MAEHPAUHWND__@@0PAJ@Z
_TEXT	SEGMENT
_hWndInactive$ = 8
_hWndActive$ = 12
_this$ = -4
?OnMdiActivate@CMDIChildWindow@@MAEHPAUHWND__@@0PAJ@Z PROC NEAR ; CMDIChildWindow::OnMdiActivate, COMDAT
; _this$ = ecx

; 791  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 792  :     if(hWndInactive == m_hWnd)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _hWndInactive$[ebp]
  0000d	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00010	75 10		 jne	 SHORT $L49835

; 793  :     {
; 794  :         OnDeactivate();

  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	ff 90 b4 00 00
	00		 call	 DWORD PTR [eax+180]

; 795  :     }
; 796  :     else if(hWndActive == m_hWnd)

  00020	eb 48		 jmp	 SHORT $L49836
$L49835:
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 55 0c	 mov	 edx, DWORD PTR _hWndActive$[ebp]
  00028	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  0002b	75 10		 jne	 SHORT $L49837

; 797  :     {
; 798  :         OnActivate();

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	ff 92 b0 00 00
	00		 call	 DWORD PTR [edx+176]

; 799  :     }
; 800  :     else

  0003b	eb 2d		 jmp	 SHORT $L49838
$L49837:

; 801  :     {
; 802  :         DPF_ERROR("Received WM_MDIACTIVATE with unexpected handles");

  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@GFDF@CMDIChildWindow?3?3OnMdiActivate?$AA@ ; `string'
  00047	68 22 03 00 00	 push	 802			; 00000322H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@LFGD@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00051	6a 01		 push	 1
  00053	6a 09		 push	 9
  00055	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005a	83 c4 18	 add	 esp, 24			; 00000018H
  0005d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@MMBG@Received?5WM_MDIACTIVATE?5with?5une@ ; `string'
  00062	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00067	83 c4 04	 add	 esp, 4
$L49838:
$L49836:

; 803  :     }
; 804  : 
; 805  :     return FALSE;

  0006a	33 c0		 xor	 eax, eax

; 806  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 0c 00	 ret	 12			; 0000000cH
?OnMdiActivate@CMDIChildWindow@@MAEHPAUHWND__@@0PAJ@Z ENDP ; CMDIChildWindow::OnMdiActivate
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDestroy@CMDIChildWindow@@MAEHPAJ@Z
_TEXT	SEGMENT
_plResult$ = 8
_this$ = -4
?OnDestroy@CMDIChildWindow@@MAEHPAJ@Z PROC NEAR		; CMDIChildWindow::OnDestroy, COMDAT
; _this$ = ecx

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 833  :     if(CWindow::OnDestroy(plResult))

  00007	8b 45 08	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?OnDestroy@CWindow@@UAEHPAJ@Z ; CWindow::OnDestroy
  00013	85 c0		 test	 eax, eax
  00015	74 07		 je	 SHORT $L49846

; 834  :     {
; 835  :         return TRUE;

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	eb 2c		 jmp	 SHORT $L49845
$L49846:

; 836  :     }
; 837  : 
; 838  :     //
; 839  :     // If we're the last child to go, make sure the OnDeactivate method gets
; 840  :     // called.  The MDIACTIVATE message isn't sent unless there's a new window
; 841  :     // waiting to take focus.
; 842  :     //
; 843  : 
; 844  :     if(!((CMDIClientWindow *)m_pParent)->GetActiveChild())

  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002e	8b 12		 mov	 edx, DWORD PTR [edx]
  00030	ff 92 a0 00 00
	00		 call	 DWORD PTR [edx+160]
  00036	85 c0		 test	 eax, eax
  00038	75 0e		 jne	 SHORT $L49848

; 845  :     {
; 846  :         OnDeactivate();

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 10		 mov	 edx, DWORD PTR [eax]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 92 b4 00 00
	00		 call	 DWORD PTR [edx+180]
$L49848:

; 847  :     }
; 848  : 
; 849  :     return FALSE;

  00048	33 c0		 xor	 eax, eax
$L49845:

; 850  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?OnDestroy@CMDIChildWindow@@MAEHPAJ@Z ENDP		; CMDIChildWindow::OnDestroy
_TEXT	ENDS
EXTRN	__imp__DefMDIChildProcA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DefWindowProcA@CMDIChildWindow@@MAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?DefWindowProcA@CMDIChildWindow@@MAEJPAUHWND__@@IIJ@Z PROC NEAR ; CMDIChildWindow::DefWindowProcA, COMDAT
; _this$ = ecx

; 882  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 883  :     return ::DefMDIChildProc(hWnd, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefMDIChildProcA@16

; 884  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?DefWindowProcA@CMDIChildWindow@@MAEJPAUHWND__@@IIJ@Z ENDP ; CMDIChildWindow::DefWindowProcA
_TEXT	ENDS
PUBLIC	??_C@_0CI@OCDE@type?3?3WNDTYPE?5?$DN?$DN?5pWindow?9?$DOm_nWin@ ; `string'
;	COMDAT ??_C@_0CI@OCDE@type?3?3WNDTYPE?5?$DN?$DN?5pWindow?9?$DOm_nWin@
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
CONST	SEGMENT
??_C@_0CI@OCDE@type?3?3WNDTYPE?5?$DN?$DN?5pWindow?9?$DOm_nWin@ DB 'type::'
	DB	'WNDTYPE == pWindow->m_nWindowType', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Cast@?$CWindowCast@VCMDIFrameWindow@@@@SGPAVCMDIFrameWindow@@PAVCWindow@@@Z
_TEXT	SEGMENT
_pWindow$ = 8
?Cast@?$CWindowCast@VCMDIFrameWindow@@@@SGPAVCMDIFrameWindow@@PAVCWindow@@@Z PROC NEAR ; CWindowCast<CMDIFrameWindow>::Cast, COMDAT

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 419  :     if(!pWindow)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00007	75 04		 jne	 SHORT $L49859

; 420  :     {
; 421  :         return NULL;

  00009	33 c0		 xor	 eax, eax
  0000b	eb 27		 jmp	 SHORT $L49858
$L49859:

; 422  :     }
; 423  : 
; 424  :     ASSERT(type::WNDTYPE == pWindow->m_nWindowType);

  0000d	68 a8 01 00 00	 push	 424			; 000001a8H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@OCDE@type?3?3WNDTYPE?5?$DN?$DN?5pWindow?9?$DOm_nWin@ ; `string'
  0001c	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  0001f	33 c9		 xor	 ecx, ecx
  00021	83 78 08 01	 cmp	 DWORD PTR [eax+8], 1
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 425  : 
; 426  :     return (type *)pWindow;

  00031	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
$L49858:

; 427  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?Cast@?$CWindowCast@VCMDIFrameWindow@@@@SGPAVCMDIFrameWindow@@PAVCWindow@@@Z ENDP ; CWindowCast<CMDIFrameWindow>::Cast
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Cast@?$CWindowCast@VCMDIChildWindow@@@@SGPAVCMDIChildWindow@@PAVCWindow@@@Z
_TEXT	SEGMENT
_pWindow$ = 8
?Cast@?$CWindowCast@VCMDIChildWindow@@@@SGPAVCMDIChildWindow@@PAVCWindow@@@Z PROC NEAR ; CWindowCast<CMDIChildWindow>::Cast, COMDAT

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 419  :     if(!pWindow)

  00003	83 7d 08 00	 cmp	 DWORD PTR _pWindow$[ebp], 0
  00007	75 04		 jne	 SHORT $L49865

; 420  :     {
; 421  :         return NULL;

  00009	33 c0		 xor	 eax, eax
  0000b	eb 27		 jmp	 SHORT $L49864
$L49865:

; 422  :     }
; 423  : 
; 424  :     ASSERT(type::WNDTYPE == pWindow->m_nWindowType);

  0000d	68 a8 01 00 00	 push	 424			; 000001a8H
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@OCDE@type?3?3WNDTYPE?5?$DN?$DN?5pWindow?9?$DOm_nWin@ ; `string'
  0001c	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  0001f	33 c9		 xor	 ecx, ecx
  00021	83 78 08 03	 cmp	 DWORD PTR [eax+8], 3
  00025	0f 95 c1	 setne	 cl
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 425  : 
; 426  :     return (type *)pWindow;

  00031	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
$L49864:

; 427  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?Cast@?$CWindowCast@VCMDIChildWindow@@@@SGPAVCMDIChildWindow@@PAVCWindow@@@Z ENDP ; CWindowCast<CMDIChildWindow>::Cast
_TEXT	ENDS
END
