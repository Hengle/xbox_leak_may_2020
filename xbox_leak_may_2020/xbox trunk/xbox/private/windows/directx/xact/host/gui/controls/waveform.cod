; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EC@CLP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@GHLG@hdc?5?$DN?$DN?5m_hdc?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KAKK@WAVEFORM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@MAON@CWaveformRenderer?3?3Initialize?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@OBGA@Failed?5to?5create?5compatible?5DC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@HBOH@No?5wave?5data?5format?5supplied?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BN@DMOJ@No?5wave?5data?5buffer?5supplied?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@LLCE@No?5wave?5data?5size?5supplied?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@FCAO@Format?5not?5PCM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@JJBN@CWaveformRenderer?3?3Render?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GNJP@Failed?5to?5get?5display?5DC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@BLOB@hdcDisplay?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@IKHN@CWaveformRenderer?3?3CreateBitmap?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JDG@Failed?5to?5create?5compatible?5bitm@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@GKOB@Failed?5to?5select?5the?5off?9screen?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@GDGA@CWaveformRenderer?3?3CreateDrawing@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OIIE@Failed?5to?5create?5active?5backgrou@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CL@IMJ@Failed?5to?5create?5inactive?5backgr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@PNEN@Failed?5to?5create?5waveform?5pen?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LHKG@m_hdcDraw?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@CEMM@m_hbrActiveBackground?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@JIFL@m_hpnWaveform?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@FEOA@CWaveformRenderer?3?3DrawWaveform?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@DHND@Unsupported?5bit?5resolution?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@BGCE@lSample?5?$DO?$DN?5?9nHalfWaveRange?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CEJP@lSample?5?$DM?5nHalfWaveRange?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06HHJP@y?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@EKAI@y?5?$DM?5?$CIint?$CJm_nHeight?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTempSelectObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTempSelectObject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SelectObject@CTempSelectObject@@QAEHPAUHDC__@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreObject@CTempSelectObject@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRenderState@CWaveformRenderer@@MAEXW4WAVEFORM_RENDER_STATE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetResolution@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CWaveformControl@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CWaveformControl@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetColors@CWaveformControl@@UAEHPBUWAVEFORMCOLORS@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetResolution@CWaveformControl@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveformRenderer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWaveformRenderer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWaveformRenderer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWaveData@CWaveformRenderer@@UAEHPBUWAVEFORMDATA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetOffset@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetScale@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateBitmap@CWaveformRenderer@@MAEHPAUHDC__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateDrawingTools@CWaveformRenderer@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawBackground@CWaveformRenderer@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawWaveform@CWaveformRenderer@@MAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DisplayBitmap@CWaveformRenderer@@MAEHPAUHDC__@@PBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveformControl@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWaveformControl@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWaveformControl@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetScale@CWaveformControl@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWaveData@CWaveformControl@@UAEHPBUWAVEFORMDATA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetOffset@CWaveformControl@@UAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetupOffsetScrollbar@CWaveformControl@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetupScaleScrollbar@CWaveformControl@@MAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCreate@CWaveformControl@@UAEHPAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSize@CWaveformControl@@UAEHIIIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWaveformControl@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnPaint@CWaveformControl@@UAEHPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnScroll@CWaveformControl@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderWaveform@CWaveformRenderer@@AAEXPBEIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderWaveform@CWaveformRenderer@@AAEXPBFIH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECWaveformControl@@WDA@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CWaveformControl@@WDA@AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CWaveformControl@@WDA@AGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECWaveformControl@@WDI@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?nBaseX@?1??RenderWaveform@CWaveformRenderer@@AAEXPBEIH@Z@4HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?nBaseX@?1??RenderWaveform@CWaveformRenderer@@AAEXPBFIH@Z@4HB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWaveformRenderer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWaveformControl@@6BCRefCount@DirectSound@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWaveformControl@@6BCWaveformRenderer@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWaveformControl@@6BCWindow@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	?m_pszClassName@CWaveformControl@@2QBDB		; CWaveformControl::m_pszClassName
PUBLIC	?m_nSectionDivisor@CWaveformControl@@1IB	; CWaveformControl::m_nSectionDivisor
PUBLIC	??_C@_08KAKK@WAVEFORM?$AA@			; `string'
PUBLIC	?m_nDefaultScale@CWaveformRenderer@@2IB		; CWaveformRenderer::m_nDefaultScale
PUBLIC	?m_nDefaultResolution@CWaveformRenderer@@2IB	; CWaveformRenderer::m_nDefaultResolution
CONST	SEGMENT
?m_nDefaultScale@CWaveformRenderer@@2IB DD 010H		; CWaveformRenderer::m_nDefaultScale
?m_nDefaultResolution@CWaveformRenderer@@2IB DD 08H	; CWaveformRenderer::m_nDefaultResolution
CONST	ENDS
;	COMDAT ??_C@_08KAKK@WAVEFORM?$AA@
CONST	SEGMENT
??_C@_08KAKK@WAVEFORM?$AA@ DB 'WAVEFORM', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?m_pszClassName@CWaveformControl@@2QBDB DD FLAT:??_C@_08KAKK@WAVEFORM?$AA@ ; CWaveformControl::m_pszClassName
?m_nSectionDivisor@CWaveformControl@@1IB DD 04H		; CWaveformControl::m_nSectionDivisor
?dwGeneralStyle@?1??Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z@4KB DD 0310000H ; `CWaveformControl::Create'::`2'::dwGeneralStyle
?dwChildStyle@?1??Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z@4KB DD 040000000H ; `CWaveformControl::Create'::`2'::dwChildStyle
?dwParentStyle@?1??Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z@4KB DD 0cf0000H ; `CWaveformControl::Create'::`2'::dwParentStyle
CONST	ENDS
PUBLIC	??_7CWaveformRenderer@@6B@			; CWaveformRenderer::`vftable'
PUBLIC	??_GCWaveformRenderer@@UAEPAXI@Z		; CWaveformRenderer::`scalar deleting destructor'
PUBLIC	??_ECWaveformRenderer@@UAEPAXI@Z		; CWaveformRenderer::`vector deleting destructor'
PUBLIC	??0CWaveformRenderer@@QAE@XZ			; CWaveformRenderer::CWaveformRenderer
PUBLIC	?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z ; CWaveformRenderer::Initialize
PUBLIC	?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z	; CWaveformRenderer::SetRect
PUBLIC	?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z ; CWaveformRenderer::SetColors
PUBLIC	?SetWaveData@CWaveformRenderer@@UAEHPBUWAVEFORMDATA@@@Z ; CWaveformRenderer::SetWaveData
PUBLIC	?SetOffset@CWaveformRenderer@@UAEHI@Z		; CWaveformRenderer::SetOffset
PUBLIC	?SetScale@CWaveformRenderer@@UAEHI@Z		; CWaveformRenderer::SetScale
PUBLIC	?SetResolution@CWaveformRenderer@@UAEHI@Z	; CWaveformRenderer::SetResolution
PUBLIC	?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z ; CWaveformRenderer::Render
PUBLIC	?SetRenderState@CWaveformRenderer@@MAEXW4WAVEFORM_RENDER_STATE@@@Z ; CWaveformRenderer::SetRenderState
PUBLIC	?CreateBitmap@CWaveformRenderer@@MAEHPAUHDC__@@@Z ; CWaveformRenderer::CreateBitmap
PUBLIC	?CreateDrawingTools@CWaveformRenderer@@MAEHXZ	; CWaveformRenderer::CreateDrawingTools
PUBLIC	?DrawBackground@CWaveformRenderer@@MAEHXZ	; CWaveformRenderer::DrawBackground
PUBLIC	?DrawWaveform@CWaveformRenderer@@MAEHXZ		; CWaveformRenderer::DrawWaveform
PUBLIC	?DisplayBitmap@CWaveformRenderer@@MAEHPAUHDC__@@PBUtagRECT@@@Z ; CWaveformRenderer::DisplayBitmap
;	COMDAT ??_7CWaveformRenderer@@6B@
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
CONST	SEGMENT
??_7CWaveformRenderer@@6B@ DD FLAT:??_ECWaveformRenderer@@UAEPAXI@Z ; CWaveformRenderer::`vftable'
	DD	FLAT:?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z
	DD	FLAT:?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z
	DD	FLAT:?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z
	DD	FLAT:?SetWaveData@CWaveformRenderer@@UAEHPBUWAVEFORMDATA@@@Z
	DD	FLAT:?SetOffset@CWaveformRenderer@@UAEHI@Z
	DD	FLAT:?SetScale@CWaveformRenderer@@UAEHI@Z
	DD	FLAT:?SetResolution@CWaveformRenderer@@UAEHI@Z
	DD	FLAT:?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z
	DD	FLAT:?SetRenderState@CWaveformRenderer@@MAEXW4WAVEFORM_RENDER_STATE@@@Z
	DD	FLAT:?CreateBitmap@CWaveformRenderer@@MAEHPAUHDC__@@@Z
	DD	FLAT:?CreateDrawingTools@CWaveformRenderer@@MAEHXZ
	DD	FLAT:?DrawBackground@CWaveformRenderer@@MAEHXZ
	DD	FLAT:?DrawWaveform@CWaveformRenderer@@MAEHXZ
	DD	FLAT:?DisplayBitmap@CWaveformRenderer@@MAEHPAUHDC__@@PBUtagRECT@@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWaveformRenderer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CWaveformRenderer@@QAE@XZ PROC NEAR			; CWaveformRenderer::CWaveformRenderer, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveformRenderer@@6B@ ; CWaveformRenderer::`vftable'

; 48   :     m_nState = WAVEFORM_RENDER_FULL;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 04 00
	00 00		 mov	 DWORD PTR [ecx+4], 4

; 49   :     m_hWndDisplay = NULL;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 50   :     m_hdcDraw = NULL;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 51   :     m_hbrActiveBackground = NULL;

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 52   :     m_hbrInactiveBackground = NULL;

  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 53   :     m_hpnWaveform = NULL;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0

; 54   :     m_pvWaveData = NULL;

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0

; 55   :     m_cbWaveData = NULL;

  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	c7 42 5c 00 00
	00 00		 mov	 DWORD PTR [edx+92], 0

; 56   :     m_cbHorizOffset = 0;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 57   :     m_nScale = m_nDefaultScale;

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	c7 41 64 10 00
	00 00		 mov	 DWORD PTR [ecx+100], 16	; 00000010H

; 58   :     m_nResolution = m_nDefaultResolution;

  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	c7 42 68 08 00
	00 00		 mov	 DWORD PTR [edx+104], 8

; 59   : 
; 60   :     SetColors(NULL);

  0007e	6a 00		 push	 0
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z ; CWaveformRenderer::SetColors

; 61   :     SetRect(NULL);

  00088	6a 00		 push	 0
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z ; CWaveformRenderer::SetRect

; 62   : }

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
??0CWaveformRenderer@@QAE@XZ ENDP			; CWaveformRenderer::CWaveformRenderer
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.h
_TEXT	ENDS
;	COMDAT ?SetRenderState@CWaveformRenderer@@MAEXW4WAVEFORM_RENDER_STATE@@@Z
_TEXT	SEGMENT
_nState$ = 8
_this$ = -4
?SetRenderState@CWaveformRenderer@@MAEXW4WAVEFORM_RENDER_STATE@@@Z PROC NEAR ; CWaveformRenderer::SetRenderState, COMDAT
; _this$ = ecx

; 117  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  :     if(nState > m_nState)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _nState$[ebp]
  0000d	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00010	7e 09		 jle	 SHORT $L49796

; 119  :     {
; 120  :         m_nState = nState;

  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	8b 45 08	 mov	 eax, DWORD PTR _nState$[ebp]
  00018	89 42 04	 mov	 DWORD PTR [edx+4], eax
$L49796:

; 121  :     }
; 122  : }

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetRenderState@CWaveformRenderer@@MAEXW4WAVEFORM_RENDER_STATE@@@Z ENDP ; CWaveformRenderer::SetRenderState
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetResolution@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT
_nResolution$ = 8
_this$ = -4
?SetResolution@CWaveformRenderer@@UAEHI@Z PROC NEAR	; CWaveformRenderer::SetResolution, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :     m_nResolution = nResolution;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _nResolution$[ebp]
  0000d	89 48 68	 mov	 DWORD PTR [eax+104], ecx

; 127  :     return TRUE;

  00010	b8 01 00 00 00	 mov	 eax, 1

; 128  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?SetResolution@CWaveformRenderer@@UAEHI@Z ENDP		; CWaveformRenderer::SetResolution
_TEXT	ENDS
PUBLIC	??1CWaveformRenderer@@UAE@XZ			; CWaveformRenderer::~CWaveformRenderer
; Function compile flags: /Odt
;	COMDAT ??_GCWaveformRenderer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCWaveformRenderer@@UAEPAXI@Z PROC NEAR		; CWaveformRenderer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWaveformRenderer@@UAE@XZ ; CWaveformRenderer::~CWaveformRenderer
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L50448
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L50448:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWaveformRenderer@@UAEPAXI@Z ENDP			; CWaveformRenderer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
;	COMDAT ??1CWaveformRenderer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CWaveformRenderer@@UAE@XZ PROC NEAR			; CWaveformRenderer::~CWaveformRenderer, COMDAT
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveformRenderer@@6B@ ; CWaveformRenderer::`vftable'

; 88   :     if(m_hdcDraw)

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00017	74 0d		 je	 SHORT $L50453

; 89   :     {
; 90   :         DeleteDC(m_hdcDraw);

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteDC@4
$L50453:

; 91   :     }
; 92   : 
; 93   :     if(m_hbrActiveBackground)

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	83 79 28 00	 cmp	 DWORD PTR [ecx+40], 0
  0002d	74 0d		 je	 SHORT $L50454

; 94   :     {
; 95   :         DeleteObject(m_hbrActiveBackground);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$L50454:

; 96   :     }
; 97   : 
; 98   :     if(m_hbrInactiveBackground)

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00043	74 0d		 je	 SHORT $L50455

; 99   :     {
; 100  :         DeleteObject(m_hbrInactiveBackground);

  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$L50455:

; 101  :     }
; 102  : 
; 103  :     if(m_hpnWaveform)

  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  00059	74 0d		 je	 SHORT $L50456

; 104  :     {
; 105  :         DeleteObject(m_hpnWaveform);

  0005b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$L50456:

; 106  :     }
; 107  : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??1CWaveformRenderer@@UAE@XZ ENDP			; CWaveformRenderer::~CWaveformRenderer
_TEXT	ENDS
PUBLIC	??_C@_07FEMJ@XACTGUI?$AA@			; `string'
PUBLIC	??_C@_0BO@MAON@CWaveformRenderer?3?3Initialize?$AA@ ; `string'
PUBLIC	??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BP@OBGA@Failed?5to?5create?5compatible?5DC?$AA@ ; `string'
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	__imp__GetDC@4:NEAR
EXTRN	__imp__ReleaseDC@8:NEAR
EXTRN	__imp__GetClientRect@8:NEAR
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
;	COMDAT ??_C@_07FEMJ@XACTGUI?$AA@
CONST	SEGMENT
??_C@_07FEMJ@XACTGUI?$AA@ DB 'XACTGUI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MAON@CWaveformRenderer?3?3Initialize?$AA@
CONST	SEGMENT
??_C@_0BO@MAON@CWaveformRenderer?3?3Initialize?$AA@ DB 'CWaveformRenderer'
	DB	'::Initialize', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\controls\waveform.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OBGA@Failed?5to?5create?5compatible?5DC?$AA@
CONST	SEGMENT
??_C@_0BP@OBGA@Failed?5to?5create?5compatible?5DC?$AA@ DB 'Failed to crea'
	DB	'te compatible DC', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8
_this$ = -28
_fSuccess$ = -24
_hdc$ = -20
_rc$ = -16
?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z PROC NEAR ; CWaveformRenderer::Initialize, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 134  :     BOOL                    fSuccess    = TRUE;

  00009	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 1

; 135  :     HDC                     hdc;
; 136  :     RECT                    rc;
; 137  : 
; 138  :     m_hWndDisplay = hWnd;

  00010	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00016	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 139  :     
; 140  :     // 
; 141  :     // Create the offscreen device context
; 142  :     //
; 143  :     
; 144  :     hdc = GetDC(hWnd);

  00019	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  0001c	52		 push	 edx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00023	89 45 ec	 mov	 DWORD PTR _hdc$[ebp], eax

; 145  : 
; 146  :     if(!(m_hdcDraw = CreateCompatibleDC(hdc)))

  00026	8b 45 ec	 mov	 eax, DWORD PTR _hdc$[ebp]
  00029	50		 push	 eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00030	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00036	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00039	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  0003d	75 34		 jne	 SHORT $L50464

; 147  :     {
; 148  :         DPF_ERROR("Failed to create compatible DC");

  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00044	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@MAON@CWaveformRenderer?3?3Initialize?$AA@ ; `string'
  00049	68 94 00 00 00	 push	 148			; 00000094H
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00053	6a 01		 push	 1
  00055	6a 09		 push	 9
  00057	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0005c	83 c4 18	 add	 esp, 24			; 00000018H
  0005f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@OBGA@Failed?5to?5create?5compatible?5DC?$AA@ ; `string'
  00064	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00069	83 c4 04	 add	 esp, 4

; 149  :         fSuccess = FALSE;

  0006c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50464:

; 150  :     }
; 151  : 
; 152  :     if(hdc)

  00073	83 7d ec 00	 cmp	 DWORD PTR _hdc$[ebp], 0
  00077	74 0e		 je	 SHORT $L50469

; 153  :     {
; 154  :         ReleaseDC(hWnd, hdc);

  00079	8b 45 ec	 mov	 eax, DWORD PTR _hdc$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00080	51		 push	 ecx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
$L50469:

; 155  :     }
; 156  : 
; 157  :     //
; 158  :     // Default the default bitmap size to the client area of the window
; 159  :     //
; 160  : 
; 161  :     if(fSuccess)

  00087	83 7d e8 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0008b	74 20		 je	 SHORT $L50470

; 162  :     {
; 163  :         GetClientRect(hWnd, &rc);

  0008d	8d 55 f0	 lea	 edx, DWORD PTR _rc$[ebp]
  00090	52		 push	 edx
  00091	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 164  : 
; 165  :         fSuccess = SetRect(&rc);

  0009b	8d 4d f0	 lea	 ecx, DWORD PTR _rc$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	ff 50 08	 call	 DWORD PTR [eax+8]
  000aa	89 45 e8	 mov	 DWORD PTR _fSuccess$[ebp], eax
$L50470:

; 166  :     }
; 167  : 
; 168  :     return fSuccess;

  000ad	8b 45 e8	 mov	 eax, DWORD PTR _fSuccess$[ebp]

; 169  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z ENDP	; CWaveformRenderer::Initialize
_TEXT	ENDS
EXTRN	_memset:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z
_TEXT	SEGMENT
_prcDrawing$ = 8
_this$ = -4
?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z PROC NEAR ; CWaveformRenderer::SetRect, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 196  :     if(prcDrawing)

  00007	83 7d 08 00	 cmp	 DWORD PTR _prcDrawing$[ebp], 0
  0000b	74 21		 je	 SHORT $L50475

; 197  :     {
; 198  :         m_rcDisplay = *prcDrawing;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _prcDrawing$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	89 11		 mov	 DWORD PTR [ecx], edx
  0001a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00020	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00023	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00026	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00029	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 199  :     }
; 200  :     else

  0002c	eb 13		 jmp	 SHORT $L50476
$L50475:

; 201  :     {
; 202  :         ZeroMemory(&m_rcDisplay, sizeof(m_rcDisplay));

  0002e	6a 10		 push	 16			; 00000010H
  00030	6a 00		 push	 0
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
$L50476:

; 203  :     }
; 204  : 
; 205  :     m_nWidth = m_rcDisplay.right - m_rcDisplay.left;

  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0004a	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 206  :     m_nHeight = m_rcDisplay.bottom - m_rcDisplay.top;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  0005c	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 207  : 
; 208  :     SetRenderState(WAVEFORM_RENDER_CREATEBITMAP);

  00065	6a 03		 push	 3
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	ff 52 24	 call	 DWORD PTR [edx+36]

; 209  : 
; 210  :     return TRUE;

  00072	b8 01 00 00 00	 mov	 eax, 1

; 211  : }

  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z ENDP	; CWaveformRenderer::SetRect
_TEXT	ENDS
EXTRN	__imp__GetSysColor@4:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z
_TEXT	SEGMENT
_pColors$ = 8
_this$ = -4
?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z PROC NEAR ; CWaveformRenderer::SetColors, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 238  :     if(pColors)

  00007	83 7d 08 00	 cmp	 DWORD PTR _pColors$[ebp], 0
  0000b	74 1b		 je	 SHORT $L50481

; 239  :     {
; 240  :         m_colors = *pColors;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _pColors$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 38	 add	 ecx, 56			; 00000038H
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	89 11		 mov	 DWORD PTR [ecx], edx
  0001a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001d	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00020	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00023	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 241  :     }
; 242  :     else

  00026	eb 2a		 jmp	 SHORT $L50482
$L50481:

; 243  :     {
; 244  : 
; 245  : #ifdef WAVEFORM_USE_XBOX_COLORS
; 246  : 
; 247  :         m_colors.rgbBackground = RGB(0, 0, 0);
; 248  :         m_colors.rgbInactiveBackground = RGB(127, 127, 127);
; 249  :         m_colors.rgbWaveform = RGB(0, 255, 0);
; 250  : 
; 251  : #else // WAVEFORM_USE_XBOX_COLORS
; 252  : 
; 253  :         m_colors.rgbBackground = GetSysColor(COLOR_WINDOW);

  00028	6a 05		 push	 5
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 254  :         m_colors.rgbInactiveBackground = GetSysColor(COLOR_GRAYTEXT);

  00036	6a 11		 push	 17			; 00000011H
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	89 42 3c	 mov	 DWORD PTR [edx+60], eax

; 255  :         m_colors.rgbWaveform = GetSysColor(COLOR_WINDOWTEXT);

  00044	6a 08		 push	 8
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSysColor@4
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 41 40	 mov	 DWORD PTR [ecx+64], eax
$L50482:

; 256  : 
; 257  : #endif // WAVEFORM_USE_XBOX_COLORS
; 258  : 
; 259  :     }
; 260  : 
; 261  :     SetRenderState(WAVEFORM_RENDER_DRAWINGTOOLS);

  00052	6a 02		 push	 2
  00054	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 02		 mov	 eax, DWORD PTR [edx]
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	ff 50 24	 call	 DWORD PTR [eax+36]

; 262  : 
; 263  :     return TRUE;

  0005f	b8 01 00 00 00	 mov	 eax, 1

; 264  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z ENDP ; CWaveformRenderer::SetColors
_TEXT	ENDS
PUBLIC	??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@ ; `string'
PUBLIC	??_C@_0BN@HBOH@No?5wave?5data?5format?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BN@DMOJ@No?5wave?5data?5buffer?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0BL@LLCE@No?5wave?5data?5size?5supplied?$AA@ ; `string'
PUBLIC	??_C@_0P@FCAO@Format?5not?5PCM?$AA@		; `string'
EXTRN	_memcpy:NEAR
;	COMDAT ??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@
CONST	SEGMENT
??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@ DB 'CWaveformRendere'
	DB	'r::SetWaveData', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HBOH@No?5wave?5data?5format?5supplied?$AA@
CONST	SEGMENT
??_C@_0BN@HBOH@No?5wave?5data?5format?5supplied?$AA@ DB 'No wave data for'
	DB	'mat supplied', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DMOJ@No?5wave?5data?5buffer?5supplied?$AA@
CONST	SEGMENT
??_C@_0BN@DMOJ@No?5wave?5data?5buffer?5supplied?$AA@ DB 'No wave data buf'
	DB	'fer supplied', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LLCE@No?5wave?5data?5size?5supplied?$AA@
CONST	SEGMENT
??_C@_0BL@LLCE@No?5wave?5data?5size?5supplied?$AA@ DB 'No wave data size '
	DB	'supplied', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FCAO@Format?5not?5PCM?$AA@
CONST	SEGMENT
??_C@_0P@FCAO@Format?5not?5PCM?$AA@ DB 'Format not PCM', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetWaveData@CWaveformRenderer@@UAEHPBUWAVEFORMDATA@@@Z
_TEXT	SEGMENT
_pWaveData$ = 8
_this$ = -8
_fSuccess$ = -4
?SetWaveData@CWaveformRenderer@@UAEHPBUWAVEFORMDATA@@@Z PROC NEAR ; CWaveformRenderer::SetWaveData, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 291  :     BOOL                    fSuccess    = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 1

; 292  :     
; 293  :     if(pWaveData)

  00010	83 7d 08 00	 cmp	 DWORD PTR _pWaveData$[ebp], 0
  00014	0f 84 4f 01 00
	00		 je	 $L50488

; 294  :     {
; 295  :         if(!pWaveData->pwfxFormat)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _pWaveData$[ebp]
  0001d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00020	75 39		 jne	 SHORT $L50489

; 296  :         {
; 297  :             DPF_ERROR("No wave data format supplied");

  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@ ; `string'
  0002c	68 29 01 00 00	 push	 297			; 00000129H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00036	6a 01		 push	 1
  00038	6a 09		 push	 9
  0003a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@HBOH@No?5wave?5data?5format?5supplied?$AA@ ; `string'
  00047	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004c	83 c4 04	 add	 esp, 4

; 298  :             fSuccess = FALSE;

  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0

; 299  :         }
; 300  :         else if(!pWaveData->pvWaveData)

  00056	e9 c4 00 00 00	 jmp	 $L50492
$L50489:
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveData$[ebp]
  0005e	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00062	75 39		 jne	 SHORT $L50493

; 301  :         {
; 302  :             DPF_ERROR("No wave data buffer supplied");

  00064	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00069	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@ ; `string'
  0006e	68 2e 01 00 00	 push	 302			; 0000012eH
  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00078	6a 01		 push	 1
  0007a	6a 09		 push	 9
  0007c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00081	83 c4 18	 add	 esp, 24			; 00000018H
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@DMOJ@No?5wave?5data?5buffer?5supplied?$AA@ ; `string'
  00089	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0008e	83 c4 04	 add	 esp, 4

; 303  :             fSuccess = FALSE;

  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0

; 304  :         }
; 305  :         else if(!pWaveData->cbWaveData)

  00098	e9 82 00 00 00	 jmp	 $L50495
$L50493:
  0009d	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  000a0	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000a4	75 36		 jne	 SHORT $L50496

; 306  :         {
; 307  :             DPF_ERROR("No wave data size supplied");

  000a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  000ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@ ; `string'
  000b0	68 33 01 00 00	 push	 307			; 00000133H
  000b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000ba	6a 01		 push	 1
  000bc	6a 09		 push	 9
  000be	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c3	83 c4 18	 add	 esp, 24			; 00000018H
  000c6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@LLCE@No?5wave?5data?5size?5supplied?$AA@ ; `string'
  000cb	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d0	83 c4 04	 add	 esp, 4

; 308  :             fSuccess = FALSE;

  000d3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0

; 309  :         }
; 310  :         else if(WAVE_FORMAT_PCM != pWaveData->pwfxFormat->wFormatTag)

  000da	eb 43		 jmp	 SHORT $L50498
$L50496:
  000dc	8b 45 08	 mov	 eax, DWORD PTR _pWaveData$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	33 d2		 xor	 edx, edx
  000e3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  000e6	83 fa 01	 cmp	 edx, 1
  000e9	74 34		 je	 SHORT $L50499

; 311  :         {
; 312  :             DPF_ERROR("Format not PCM");

  000eb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@DIFL@CWaveformRenderer?3?3SetWaveData?$AA@ ; `string'
  000f5	68 38 01 00 00	 push	 312			; 00000138H
  000fa	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000ff	6a 01		 push	 1
  00101	6a 09		 push	 9
  00103	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00108	83 c4 18	 add	 esp, 24			; 00000018H
  0010b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@FCAO@Format?5not?5PCM?$AA@ ; `string'
  00110	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00115	83 c4 04	 add	 esp, 4

; 313  :             fSuccess = FALSE;

  00118	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50499:
$L50498:
$L50495:
$L50492:

; 314  :         }
; 315  : 
; 316  :         if(fSuccess)

  0011f	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00123	74 42		 je	 SHORT $L50501

; 317  :         {
; 318  :             CopyMemory(&m_wfxFormat, pWaveData->pwfxFormat, sizeof(m_wfxFormat) - sizeof(m_wfxFormat.cbSize));

  00125	6a 10		 push	 16			; 00000010H
  00127	8b 45 08	 mov	 eax, DWORD PTR _pWaveData$[ebp]
  0012a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012c	51		 push	 ecx
  0012d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00130	83 c2 44	 add	 edx, 68			; 00000044H
  00133	52		 push	 edx
  00134	e8 00 00 00 00	 call	 _memcpy
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH

; 319  : 
; 320  :             m_wfxFormat.cbSize = 0;

  0013c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	66 c7 40 54 00
	00		 mov	 WORD PTR [eax+84], 0

; 321  : 
; 322  :             m_pvWaveData = pWaveData->pvWaveData;

  00145	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  0014b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0014e	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 323  :             m_cbWaveData = pWaveData->cbWaveData;

  00151	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00154	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  00157	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0015a	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 324  :             m_cbHorizOffset = 0;

  0015d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0
$L50501:

; 325  :         }
; 326  :     }
; 327  :     else

  00167	eb 27		 jmp	 SHORT $L50502
$L50488:

; 328  :     {
; 329  :         ZeroMemory(&m_wfxFormat, sizeof(m_wfxFormat));

  00169	6a 12		 push	 18			; 00000012H
  0016b	6a 00		 push	 0
  0016d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00170	83 c2 44	 add	 edx, 68			; 00000044H
  00173	52		 push	 edx
  00174	e8 00 00 00 00	 call	 _memset
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH

; 330  : 
; 331  :         m_pvWaveData = NULL;

  0017c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0017f	c7 40 58 00 00
	00 00		 mov	 DWORD PTR [eax+88], 0

; 332  :         m_cbWaveData = NULL;

  00186	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0
$L50502:

; 333  :     }
; 334  : 
; 335  :     SetRenderState(WAVEFORM_RENDER_REDRAW);

  00190	6a 01		 push	 1
  00192	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00195	8b 02		 mov	 eax, DWORD PTR [edx]
  00197	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019a	ff 50 24	 call	 DWORD PTR [eax+36]

; 336  : 
; 337  :     return fSuccess;

  0019d	8b 45 fc	 mov	 eax, DWORD PTR _fSuccess$[ebp]

; 338  : }

  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c2 04 00	 ret	 4
?SetWaveData@CWaveformRenderer@@UAEHPBUWAVEFORMDATA@@@Z ENDP ; CWaveformRenderer::SetWaveData
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetOffset@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT
_cbOffset$ = 8
_this$ = -4
?SetOffset@CWaveformRenderer@@UAEHI@Z PROC NEAR		; CWaveformRenderer::SetOffset, COMDAT
; _this$ = ecx

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 366  :     m_cbHorizOffset = cbOffset;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _cbOffset$[ebp]
  0000d	89 48 60	 mov	 DWORD PTR [eax+96], ecx

; 367  : 
; 368  :     SetRenderState(WAVEFORM_RENDER_REDRAW);

  00010	6a 01		 push	 1
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	ff 50 24	 call	 DWORD PTR [eax+36]

; 369  : 
; 370  :     return TRUE;

  0001d	b8 01 00 00 00	 mov	 eax, 1

; 371  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetOffset@CWaveformRenderer@@UAEHI@Z ENDP		; CWaveformRenderer::SetOffset
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetScale@CWaveformRenderer@@UAEHI@Z
_TEXT	SEGMENT
_nScale$ = 8
_this$ = -4
?SetScale@CWaveformRenderer@@UAEHI@Z PROC NEAR		; CWaveformRenderer::SetScale, COMDAT
; _this$ = ecx

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :     m_nScale = max(1, nScale);

  00009	83 7d 08 01	 cmp	 DWORD PTR _nScale$[ebp], 1
  0000d	73 09		 jae	 SHORT $L51040
  0000f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR -8+[ebp], 1
  00016	eb 06		 jmp	 SHORT $L51041
$L51040:
  00018	8b 45 08	 mov	 eax, DWORD PTR _nScale$[ebp]
  0001b	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
$L51041:
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 55 f8	 mov	 edx, DWORD PTR -8+[ebp]
  00024	89 51 64	 mov	 DWORD PTR [ecx+100], edx

; 399  : 
; 400  :     SetRenderState(WAVEFORM_RENDER_REDRAW);

  00027	6a 01		 push	 1
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	ff 52 24	 call	 DWORD PTR [edx+36]

; 401  : 
; 402  :     return TRUE;

  00034	b8 01 00 00 00	 mov	 eax, 1

; 403  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?SetScale@CWaveformRenderer@@UAEHI@Z ENDP		; CWaveformRenderer::SetScale
_TEXT	ENDS
PUBLIC	??_C@_0BK@JJBN@CWaveformRenderer?3?3Render?$AA@	; `string'
PUBLIC	??_C@_0BJ@GNJP@Failed?5to?5get?5display?5DC?$AA@ ; `string'
;	COMDAT ??_C@_0BK@JJBN@CWaveformRenderer?3?3Render?$AA@
CONST	SEGMENT
??_C@_0BK@JJBN@CWaveformRenderer?3?3Render?$AA@ DB 'CWaveformRenderer::Re'
	DB	'nder', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GNJP@Failed?5to?5get?5display?5DC?$AA@
CONST	SEGMENT
??_C@_0BJ@GNJP@Failed?5to?5get?5display?5DC?$AA@ DB 'Failed to get displa'
	DB	'y DC', 00H					; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z
_TEXT	SEGMENT
_hdcDisplay$ = 8
_prcUpdate$ = 12
_this$ = -12
_fSuccess$ = -4
_fReleaseDC$ = -8
?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z PROC NEAR ; CWaveformRenderer::Render, COMDAT
; _this$ = ecx

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 431  :     BOOL                    fSuccess    = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 1

; 432  :     BOOL                    fReleaseDC  = FALSE;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fReleaseDC$[ebp], 0

; 433  : 
; 434  :     if(!hdcDisplay)

  00017	83 7d 08 00	 cmp	 DWORD PTR _hdcDisplay$[ebp], 0
  0001b	75 57		 jne	 SHORT $L50518

; 435  :     {
; 436  :         if(!(hdcDisplay = GetDC(m_hWndDisplay)))

  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00023	51		 push	 ecx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  0002a	89 45 08	 mov	 DWORD PTR _hdcDisplay$[ebp], eax
  0002d	83 7d 08 00	 cmp	 DWORD PTR _hdcDisplay$[ebp], 0
  00031	75 34		 jne	 SHORT $L50519

; 437  :         {
; 438  :             DPF_ERROR("Failed to get display DC");

  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00038	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@JJBN@CWaveformRenderer?3?3Render?$AA@ ; `string'
  0003d	68 b6 01 00 00	 push	 438			; 000001b6H
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00047	6a 01		 push	 1
  00049	6a 09		 push	 9
  0004b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00050	83 c4 18	 add	 esp, 24			; 00000018H
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@GNJP@Failed?5to?5get?5display?5DC?$AA@ ; `string'
  00058	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0005d	83 c4 04	 add	 esp, 4

; 439  :             fSuccess = FALSE;

  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50519:

; 440  :         }
; 441  : 
; 442  :         if(fSuccess)

  00067	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0006b	74 07		 je	 SHORT $L50522

; 443  :         {
; 444  :             fReleaseDC = TRUE;

  0006d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fReleaseDC$[ebp], 1
$L50522:
$L50518:

; 445  :         }
; 446  :     }
; 447  : 
; 448  :     if(fSuccess && (m_nState >= WAVEFORM_RENDER_CREATEBITMAP))

  00074	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00078	74 1b		 je	 SHORT $L50523
  0007a	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	83 7a 04 03	 cmp	 DWORD PTR [edx+4], 3
  00081	7c 12		 jl	 SHORT $L50523

; 449  :     {
; 450  :         fSuccess = CreateBitmap(hdcDisplay);

  00083	8b 45 08	 mov	 eax, DWORD PTR _hdcDisplay$[ebp]
  00086	50		 push	 eax
  00087	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	ff 52 28	 call	 DWORD PTR [edx+40]
  00092	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax
$L50523:

; 451  :     }
; 452  : 
; 453  :     if(fSuccess && (m_nState >= WAVEFORM_RENDER_DRAWINGTOOLS))

  00095	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00099	74 17		 je	 SHORT $L50524
  0009b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  000a2	7c 0e		 jl	 SHORT $L50524

; 454  :     {
; 455  :         fSuccess = CreateDrawingTools();

  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	ff 52 2c	 call	 DWORD PTR [edx+44]
  000af	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax
$L50524:

; 456  :     }
; 457  :     
; 458  :     if(fSuccess && (m_nState >= WAVEFORM_RENDER_REDRAW))

  000b2	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  000b6	74 17		 je	 SHORT $L50525
  000b8	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  000bf	7c 0e		 jl	 SHORT $L50525

; 459  :     {
; 460  :         fSuccess = DrawBackground();

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	ff 52 30	 call	 DWORD PTR [edx+48]
  000cc	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax
$L50525:

; 461  :     }
; 462  : 
; 463  :     if(fSuccess && (m_nState >= WAVEFORM_RENDER_REDRAW))

  000cf	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  000d3	74 17		 je	 SHORT $L50526
  000d5	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  000dc	7c 0e		 jl	 SHORT $L50526

; 464  :     {
; 465  :         fSuccess = DrawWaveform();

  000de	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	ff 52 34	 call	 DWORD PTR [edx+52]
  000e9	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax
$L50526:

; 466  :     }
; 467  : 
; 468  :     if(fSuccess)

  000ec	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  000f0	74 0a		 je	 SHORT $L50527

; 469  :     {
; 470  :         m_nState = WAVEFORM_RENDER_NONE;

  000f2	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$L50527:

; 471  :     }
; 472  : 
; 473  :     if(fSuccess)

  000fc	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00100	74 16		 je	 SHORT $L50528

; 474  :     {
; 475  :         fSuccess = DisplayBitmap(hdcDisplay, prcUpdate);

  00102	8b 4d 0c	 mov	 ecx, DWORD PTR _prcUpdate$[ebp]
  00105	51		 push	 ecx
  00106	8b 55 08	 mov	 edx, DWORD PTR _hdcDisplay$[ebp]
  00109	52		 push	 edx
  0010a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	8b 10		 mov	 edx, DWORD PTR [eax]
  0010f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	ff 52 38	 call	 DWORD PTR [edx+56]
  00115	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax
$L50528:

; 476  :     }
; 477  : 
; 478  :     if(fReleaseDC)

  00118	83 7d f8 00	 cmp	 DWORD PTR _fReleaseDC$[ebp], 0
  0011c	74 11		 je	 SHORT $L50529

; 479  :     {
; 480  :         ReleaseDC(m_hWndDisplay, hdcDisplay);

  0011e	8b 45 08	 mov	 eax, DWORD PTR _hdcDisplay$[ebp]
  00121	50		 push	 eax
  00122	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00128	52		 push	 edx
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
$L50529:

; 481  :     }
; 482  : 
; 483  :     return fSuccess;

  0012f	8b 45 fc	 mov	 eax, DWORD PTR _fSuccess$[ebp]

; 484  : }

  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 08 00	 ret	 8
?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z ENDP ; CWaveformRenderer::Render
_TEXT	ENDS
PUBLIC	??_C@_0L@BLOB@hdcDisplay?$AA@			; `string'
PUBLIC	??_C@_0CA@IKHN@CWaveformRenderer?3?3CreateBitmap?$AA@ ; `string'
PUBLIC	??_C@_0CD@JDG@Failed?5to?5create?5compatible?5bitm@ ; `string'
PUBLIC	??_C@_0CH@GKOB@Failed?5to?5select?5the?5off?9screen?5@ ; `string'
EXTRN	__imp__CreateCompatibleBitmap@12:NEAR
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
EXTRN	__imp__SelectObject@8:NEAR
;	COMDAT ??_C@_0L@BLOB@hdcDisplay?$AA@
CONST	SEGMENT
??_C@_0L@BLOB@hdcDisplay?$AA@ DB 'hdcDisplay', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IKHN@CWaveformRenderer?3?3CreateBitmap?$AA@
CONST	SEGMENT
??_C@_0CA@IKHN@CWaveformRenderer?3?3CreateBitmap?$AA@ DB 'CWaveformRender'
	DB	'er::CreateBitmap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JDG@Failed?5to?5create?5compatible?5bitm@
CONST	SEGMENT
??_C@_0CD@JDG@Failed?5to?5create?5compatible?5bitm@ DB 'Failed to create '
	DB	'compatible bitmap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GKOB@Failed?5to?5select?5the?5off?9screen?5@
CONST	SEGMENT
??_C@_0CH@GKOB@Failed?5to?5select?5the?5off?9screen?5@ DB 'Failed to sele'
	DB	'ct the off-screen bitmap', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CreateBitmap@CWaveformRenderer@@MAEHPAUHDC__@@@Z
_TEXT	SEGMENT
_hdcDisplay$ = 8
_this$ = -12
_fSuccess$ = -8
_hbmDraw$ = -4
?CreateBitmap@CWaveformRenderer@@MAEHPAUHDC__@@@Z PROC NEAR ; CWaveformRenderer::CreateBitmap, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 511  :     BOOL                    fSuccess    = TRUE;

  00009	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 1

; 512  :     HBITMAP                 hbmDraw;
; 513  : 
; 514  :     ASSERT(hdcDisplay);

  00010	68 02 02 00 00	 push	 514			; 00000202H
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@BLOB@hdcDisplay?$AA@ ; `string'
  0001f	33 c0		 xor	 eax, eax
  00021	83 7d 08 00	 cmp	 DWORD PTR _hdcDisplay$[ebp], 0
  00025	0f 94 c0	 sete	 al
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 515  : 
; 516  :     if(!(hbmDraw = CreateCompatibleBitmap(hdcDisplay, m_nWidth, m_nHeight)))

  00031	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00037	52		 push	 edx
  00038	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _hdcDisplay$[ebp]
  00042	52		 push	 edx
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  00049	89 45 fc	 mov	 DWORD PTR _hbmDraw$[ebp], eax
  0004c	83 7d fc 00	 cmp	 DWORD PTR _hbmDraw$[ebp], 0
  00050	75 34		 jne	 SHORT $L50537

; 517  :     {
; 518  :         DPF_ERROR("Failed to create compatible bitmap");

  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@IKHN@CWaveformRenderer?3?3CreateBitmap?$AA@ ; `string'
  0005c	68 06 02 00 00	 push	 518			; 00000206H
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00066	6a 01		 push	 1
  00068	6a 09		 push	 9
  0006a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0006f	83 c4 18	 add	 esp, 24			; 00000018H
  00072	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CD@JDG@Failed?5to?5create?5compatible?5bitm@ ; `string'
  00077	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007c	83 c4 04	 add	 esp, 4

; 519  :         fSuccess = FALSE;

  0007f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50537:

; 520  :     }
; 521  : 
; 522  :     if(fSuccess)

  00086	83 7d f8 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0008a	74 60		 je	 SHORT $L50540

; 523  :     {
; 524  :         if(hbmDraw = (HBITMAP)SelectObject(m_hdcDraw, hbmDraw))

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _hbmDraw$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00096	52		 push	 edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  0009d	89 45 fc	 mov	 DWORD PTR _hbmDraw$[ebp], eax
  000a0	83 7d fc 00	 cmp	 DWORD PTR _hbmDraw$[ebp], 0
  000a4	74 46		 je	 SHORT $L50542

; 525  :         {
; 526  :             if(HGDI_ERROR == hbmDraw)

  000a6	83 7d fc ff	 cmp	 DWORD PTR _hbmDraw$[ebp], -1
  000aa	75 36		 jne	 SHORT $L50544

; 527  :             {
; 528  :                 DPF_ERROR("Failed to select the off-screen bitmap");

  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  000b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@IKHN@CWaveformRenderer?3?3CreateBitmap?$AA@ ; `string'
  000b6	68 10 02 00 00	 push	 528			; 00000210H
  000bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000c0	6a 01		 push	 1
  000c2	6a 09		 push	 9
  000c4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c9	83 c4 18	 add	 esp, 24			; 00000018H
  000cc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CH@GKOB@Failed?5to?5select?5the?5off?9screen?5@ ; `string'
  000d1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d6	83 c4 04	 add	 esp, 4

; 529  :                 fSuccess = FALSE;

  000d9	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0

; 530  :             }
; 531  :             else

  000e0	eb 0a		 jmp	 SHORT $L50546
$L50544:

; 532  :             {
; 533  :                 DeleteObject(hbmDraw);

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _hbmDraw$[ebp]
  000e5	50		 push	 eax
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$L50546:
$L50542:
$L50540:

; 534  :             }
; 535  :         }
; 536  :     }
; 537  : 
; 538  :     return fSuccess;

  000ec	8b 45 f8	 mov	 eax, DWORD PTR _fSuccess$[ebp]

; 539  : }

  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
?CreateBitmap@CWaveformRenderer@@MAEHPAUHDC__@@@Z ENDP	; CWaveformRenderer::CreateBitmap
_TEXT	ENDS
PUBLIC	??_C@_0CG@GDGA@CWaveformRenderer?3?3CreateDrawing@ ; `string'
PUBLIC	??_C@_0CJ@OIIE@Failed?5to?5create?5active?5backgrou@ ; `string'
PUBLIC	??_C@_0CL@IMJ@Failed?5to?5create?5inactive?5backgr@ ; `string'
PUBLIC	??_C@_0BO@PNEN@Failed?5to?5create?5waveform?5pen?$AA@ ; `string'
EXTRN	__imp__CreateHatchBrush@8:NEAR
EXTRN	__imp__CreatePen@12:NEAR
EXTRN	__imp__CreateSolidBrush@4:NEAR
;	COMDAT ??_C@_0CG@GDGA@CWaveformRenderer?3?3CreateDrawing@
CONST	SEGMENT
??_C@_0CG@GDGA@CWaveformRenderer?3?3CreateDrawing@ DB 'CWaveformRenderer:'
	DB	':CreateDrawingTools', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OIIE@Failed?5to?5create?5active?5backgrou@
CONST	SEGMENT
??_C@_0CJ@OIIE@Failed?5to?5create?5active?5backgrou@ DB 'Failed to create'
	DB	' active background brush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IMJ@Failed?5to?5create?5inactive?5backgr@
CONST	SEGMENT
??_C@_0CL@IMJ@Failed?5to?5create?5inactive?5backgr@ DB 'Failed to create '
	DB	'inactive background brush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PNEN@Failed?5to?5create?5waveform?5pen?$AA@
CONST	SEGMENT
??_C@_0BO@PNEN@Failed?5to?5create?5waveform?5pen?$AA@ DB 'Failed to creat'
	DB	'e waveform pen', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CreateDrawingTools@CWaveformRenderer@@MAEHXZ
_TEXT	SEGMENT
_this$ = -8
_fSuccess$ = -4
?CreateDrawingTools@CWaveformRenderer@@MAEHXZ PROC NEAR	; CWaveformRenderer::CreateDrawingTools, COMDAT
; _this$ = ecx

; 565  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 566  :     BOOL                    fSuccess        = TRUE;

  00009	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 1

; 567  : 
; 568  :     if(m_hbrActiveBackground)

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00017	74 17		 je	 SHORT $L50552

; 569  :     {
; 570  :         DeleteObject(m_hbrActiveBackground);

  00019	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0001f	52		 push	 edx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 571  :         m_hbrActiveBackground = NULL;

  00026	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$L50552:

; 572  :     }
; 573  : 
; 574  :     if(m_hbrInactiveBackground)

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00037	74 17		 je	 SHORT $L50553

; 575  :     {
; 576  :         DeleteObject(m_hbrActiveBackground);

  00039	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0003f	50		 push	 eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 577  :         m_hbrActiveBackground = NULL;

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
$L50553:

; 578  :     }
; 579  : 
; 580  :     if(m_hpnWaveform)

  00050	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00053	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  00057	74 17		 je	 SHORT $L50554

; 581  :     {
; 582  :         DeleteObject(m_hpnWaveform);

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0005f	51		 push	 ecx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4

; 583  :         m_hpnWaveform = NULL;

  00066	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00069	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
$L50554:

; 584  :     }
; 585  : 
; 586  :     //
; 587  :     // Create the background brushes
; 588  :     //
; 589  : 
; 590  :     if(!(m_hbrActiveBackground = CreateSolidBrush(m_colors.rgbBackground)))

  00070	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00076	51		 push	 ecx
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  0007d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00080	89 42 28	 mov	 DWORD PTR [edx+40], eax
  00083	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00086	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  0008a	75 34		 jne	 SHORT $L50555

; 591  :     {
; 592  :         DPF_ERROR("Failed to create active background brush");

  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00091	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@GDGA@CWaveformRenderer?3?3CreateDrawing@ ; `string'
  00096	68 50 02 00 00	 push	 592			; 00000250H
  0009b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000a0	6a 01		 push	 1
  000a2	6a 09		 push	 9
  000a4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a9	83 c4 18	 add	 esp, 24			; 00000018H
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@OIIE@Failed?5to?5create?5active?5backgrou@ ; `string'
  000b1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000b6	83 c4 04	 add	 esp, 4

; 593  :         fSuccess = FALSE;

  000b9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50555:

; 594  :     }
; 595  : 
; 596  :     if(fSuccess)

  000c0	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  000c4	74 52		 je	 SHORT $L50558

; 597  :     {
; 598  :         if(!(m_hbrInactiveBackground = CreateHatchBrush(HS_DIAGCROSS, m_colors.rgbInactiveBackground)))

  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  000cc	52		 push	 edx
  000cd	6a 05		 push	 5
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateHatchBrush@8
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  000db	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000de	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  000e2	75 34		 jne	 SHORT $L50559

; 599  :         {
; 600  :             DPF_ERROR("Failed to create inactive background brush");

  000e4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  000e9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@GDGA@CWaveformRenderer?3?3CreateDrawing@ ; `string'
  000ee	68 58 02 00 00	 push	 600			; 00000258H
  000f3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000f8	6a 01		 push	 1
  000fa	6a 09		 push	 9
  000fc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00101	83 c4 18	 add	 esp, 24			; 00000018H
  00104	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CL@IMJ@Failed?5to?5create?5inactive?5backgr@ ; `string'
  00109	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0010e	83 c4 04	 add	 esp, 4

; 601  :             fSuccess = FALSE;

  00111	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50559:
$L50558:

; 602  :         }
; 603  :     }
; 604  : 
; 605  :     //
; 606  :     // Create the foreground pen
; 607  :     //
; 608  : 
; 609  :     if(fSuccess)

  00118	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  0011c	74 54		 je	 SHORT $L50561

; 610  :     {
; 611  :         if(!(m_hpnWaveform = CreatePen(PS_SOLID, 1, m_colors.rgbWaveform)))

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00121	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00124	51		 push	 ecx
  00125	6a 01		 push	 1
  00127	6a 00		 push	 0
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePen@12
  0012f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00132	89 42 34	 mov	 DWORD PTR [edx+52], eax
  00135	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00138	83 78 34 00	 cmp	 DWORD PTR [eax+52], 0
  0013c	75 34		 jne	 SHORT $L50562

; 612  :         {
; 613  :             DPF_ERROR("Failed to create waveform pen");

  0013e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@GDGA@CWaveformRenderer?3?3CreateDrawing@ ; `string'
  00148	68 65 02 00 00	 push	 613			; 00000265H
  0014d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00152	6a 01		 push	 1
  00154	6a 09		 push	 9
  00156	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0015b	83 c4 18	 add	 esp, 24			; 00000018H
  0015e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@PNEN@Failed?5to?5create?5waveform?5pen?$AA@ ; `string'
  00163	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00168	83 c4 04	 add	 esp, 4

; 614  :             fSuccess = FALSE;

  0016b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50562:
$L50561:

; 615  :         }
; 616  :     }
; 617  : 
; 618  :     return fSuccess;

  00172	8b 45 fc	 mov	 eax, DWORD PTR _fSuccess$[ebp]

; 619  : }

  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c3		 ret	 0
?CreateDrawingTools@CWaveformRenderer@@MAEHXZ ENDP	; CWaveformRenderer::CreateDrawingTools
_TEXT	ENDS
PUBLIC	??_C@_09LHKG@m_hdcDraw?$AA@			; `string'
PUBLIC	??_C@_0BG@CEMM@m_hbrActiveBackground?$AA@	; `string'
EXTRN	__imp__FillRect@12:NEAR
;	COMDAT ??_C@_09LHKG@m_hdcDraw?$AA@
CONST	SEGMENT
??_C@_09LHKG@m_hdcDraw?$AA@ DB 'm_hdcDraw', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CEMM@m_hbrActiveBackground?$AA@
CONST	SEGMENT
??_C@_0BG@CEMM@m_hbrActiveBackground?$AA@ DB 'm_hbrActiveBackground', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DrawBackground@CWaveformRenderer@@MAEHXZ
_TEXT	SEGMENT
_this$ = -20
_rc$ = -16
?DrawBackground@CWaveformRenderer@@MAEHXZ PROC NEAR	; CWaveformRenderer::DrawBackground, COMDAT
; _this$ = ecx

; 645  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 646  :     const RECT              rc  = { 0, 0, m_nWidth, m_nHeight };

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp], 0
  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _rc$[ebp+4], 0
  00017	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0001d	89 4d f8	 mov	 DWORD PTR _rc$[ebp+8], ecx
  00020	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00026	89 45 fc	 mov	 DWORD PTR _rc$[ebp+12], eax

; 647  :     
; 648  :     ASSERT(m_hdcDraw);

  00029	68 88 02 00 00	 push	 648			; 00000288H
  0002e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LHKG@m_hdcDraw?$AA@ ; `string'
  00038	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	33 d2		 xor	 edx, edx
  0003d	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00041	0f 94 c2	 sete	 dl
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 649  :     ASSERT(m_hbrActiveBackground);

  0004d	68 89 02 00 00	 push	 649			; 00000289H
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@CEMM@m_hbrActiveBackground?$AA@ ; `string'
  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	33 c9		 xor	 ecx, ecx
  00061	83 78 28 00	 cmp	 DWORD PTR [eax+40], 0
  00065	0f 94 c1	 sete	 cl
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 650  : 
; 651  :     //
; 652  :     // Paint the whole background as active.  The waveform render function
; 653  :     // will repaint the inactive region for us
; 654  :     //
; 655  : 
; 656  :     return FillRect(m_hdcDraw, &rc, m_hbrActiveBackground);

  00071	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00074	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00077	50		 push	 eax
  00078	8d 4d f0	 lea	 ecx, DWORD PTR _rc$[ebp]
  0007b	51		 push	 ecx
  0007c	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0007f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00082	50		 push	 eax
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12

; 657  : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
?DrawBackground@CWaveformRenderer@@MAEHXZ ENDP		; CWaveformRenderer::DrawBackground
_TEXT	ENDS
PUBLIC	??_C@_0O@JIFL@m_hpnWaveform?$AA@		; `string'
PUBLIC	?RenderWaveform@CWaveformRenderer@@AAEXPBEIH@Z	; CWaveformRenderer::RenderWaveform
PUBLIC	?RenderWaveform@CWaveformRenderer@@AAEXPBFIH@Z	; CWaveformRenderer::RenderWaveform
PUBLIC	??_C@_0CA@FEOA@CWaveformRenderer?3?3DrawWaveform?$AA@ ; `string'
PUBLIC	??_C@_0BL@DHND@Unsupported?5bit?5resolution?$AA@ ; `string'
PUBLIC	??0CTempSelectObject@@QAE@XZ			; CTempSelectObject::CTempSelectObject
PUBLIC	??1CTempSelectObject@@QAE@XZ			; CTempSelectObject::~CTempSelectObject
PUBLIC	?SelectObject@CTempSelectObject@@QAEHPAUHDC__@@PAX@Z ; CTempSelectObject::SelectObject
;	COMDAT ??_C@_0O@JIFL@m_hpnWaveform?$AA@
CONST	SEGMENT
??_C@_0O@JIFL@m_hpnWaveform?$AA@ DB 'm_hpnWaveform', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FEOA@CWaveformRenderer?3?3DrawWaveform?$AA@
CONST	SEGMENT
??_C@_0CA@FEOA@CWaveformRenderer?3?3DrawWaveform?$AA@ DB 'CWaveformRender'
	DB	'er::DrawWaveform', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DHND@Unsupported?5bit?5resolution?$AA@
CONST	SEGMENT
??_C@_0BL@DHND@Unsupported?5bit?5resolution?$AA@ DB 'Unsupported bit reso'
	DB	'lution', 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?DrawWaveform@CWaveformRenderer@@MAEHXZ
_TEXT	SEGMENT
$T51057 = -16
_this$ = -20
_SelectPen$ = -8
_fSuccess$ = -12
?DrawWaveform@CWaveformRenderer@@MAEHXZ PROC NEAR	; CWaveformRenderer::DrawWaveform, COMDAT
; _this$ = ecx

; 683  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 684  :     CTempSelectObject       SelectPen;

  00009	8d 4d f8	 lea	 ecx, DWORD PTR _SelectPen$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0CTempSelectObject@@QAE@XZ ; CTempSelectObject::CTempSelectObject

; 685  :     BOOL                    fSuccess;
; 686  : 
; 687  :     ASSERT(m_hdcDraw);

  00011	68 af 02 00 00	 push	 687			; 000002afH
  00016	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09LHKG@m_hdcDraw?$AA@ ; `string'
  00020	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00023	33 c9		 xor	 ecx, ecx
  00025	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00029	0f 94 c1	 sete	 cl
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00032	83 c4 10	 add	 esp, 16			; 00000010H

; 688  :     ASSERT(m_hpnWaveform);

  00035	68 b0 02 00 00	 push	 688			; 000002b0H
  0003a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@JIFL@m_hpnWaveform?$AA@ ; `string'
  00044	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00047	33 c0		 xor	 eax, eax
  00049	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  0004d	0f 94 c0	 sete	 al
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00056	83 c4 10	 add	 esp, 16			; 00000010H

; 689  : 
; 690  :     if(fSuccess = SelectPen.SelectObject(m_hdcDraw, m_hpnWaveform))

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0005f	52		 push	 edx
  00060	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00066	51		 push	 ecx
  00067	8d 4d f8	 lea	 ecx, DWORD PTR _SelectPen$[ebp]
  0006a	e8 00 00 00 00	 call	 ?SelectObject@CTempSelectObject@@QAEHPAUHDC__@@PAX@Z ; CTempSelectObject::SelectObject
  0006f	89 45 f4	 mov	 DWORD PTR _fSuccess$[ebp], eax
  00072	83 7d f4 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00076	74 7e		 je	 SHORT $L50578

; 691  :     {
; 692  :         switch(m_wfxFormat.wBitsPerSample)
; 693  :         {

  00078	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0007b	33 c0		 xor	 eax, eax
  0007d	66 8b 42 52	 mov	 ax, WORD PTR [edx+82]
  00081	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00084	83 7d e8 08	 cmp	 DWORD PTR -24+[ebp], 8
  00088	74 08		 je	 SHORT $L50583
  0008a	83 7d e8 10	 cmp	 DWORD PTR -24+[ebp], 16	; 00000010H
  0008e	74 1a		 je	 SHORT $L50591
  00090	eb 30		 jmp	 SHORT $L50599
$L50583:

; 694  :             case 8:
; 695  :                 RenderWaveform((const unsigned char *)m_pvWaveData, 0x100, FALSE);

  00092	6a 00		 push	 0
  00094	68 00 01 00 00	 push	 256			; 00000100H
  00099	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  0009f	52		 push	 edx
  000a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?RenderWaveform@CWaveformRenderer@@AAEXPBEIH@Z ; CWaveformRenderer::RenderWaveform

; 696  :                 break;

  000a8	eb 4c		 jmp	 SHORT $L50580
$L50591:

; 697  : 
; 698  :             case 16:
; 699  :                 RenderWaveform((const short *)m_pvWaveData, 0x10000, TRUE);

  000aa	6a 01		 push	 1
  000ac	68 00 00 01 00	 push	 65536			; 00010000H
  000b1	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  000b7	51		 push	 ecx
  000b8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?RenderWaveform@CWaveformRenderer@@AAEXPBFIH@Z ; CWaveformRenderer::RenderWaveform

; 700  :                 break;

  000c0	eb 34		 jmp	 SHORT $L50580
$L50599:

; 701  : 
; 702  :             default:
; 703  :                 DPF_ERROR("Unsupported bit resolution");

  000c2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07FEMJ@XACTGUI?$AA@ ; `string'
  000c7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@FEOA@CWaveformRenderer?3?3DrawWaveform?$AA@ ; `string'
  000cc	68 bf 02 00 00	 push	 703			; 000002bfH
  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000d6	6a 01		 push	 1
  000d8	6a 09		 push	 9
  000da	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000df	83 c4 18	 add	 esp, 24			; 00000018H
  000e2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@DHND@Unsupported?5bit?5resolution?$AA@ ; `string'
  000e7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ec	83 c4 04	 add	 esp, 4

; 704  :                 fSuccess = FALSE;

  000ef	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _fSuccess$[ebp], 0
$L50580:
$L50578:

; 705  :                 break;
; 706  :         }
; 707  :     }
; 708  : 
; 709  :     return fSuccess;

  000f6	8b 55 f4	 mov	 edx, DWORD PTR _fSuccess$[ebp]
  000f9	89 55 f0	 mov	 DWORD PTR $T51057[ebp], edx
  000fc	8d 4d f8	 lea	 ecx, DWORD PTR _SelectPen$[ebp]
  000ff	e8 00 00 00 00	 call	 ??1CTempSelectObject@@QAE@XZ ; CTempSelectObject::~CTempSelectObject
  00104	8b 45 f0	 mov	 eax, DWORD PTR $T51057[ebp]

; 710  : }

  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
?DrawWaveform@CWaveformRenderer@@MAEHXZ ENDP		; CWaveformRenderer::DrawWaveform
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\ctltools.h
_TEXT	ENDS
;	COMDAT ??0CTempSelectObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CTempSelectObject@@QAE@XZ PROC NEAR			; CTempSelectObject::CTempSelectObject, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   :     m_hgdiSave = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 41   :     m_hdc = NULL;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 42   : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CTempSelectObject@@QAE@XZ ENDP			; CTempSelectObject::CTempSelectObject
_TEXT	ENDS
PUBLIC	?RestoreObject@CTempSelectObject@@QAEXXZ	; CTempSelectObject::RestoreObject
; Function compile flags: /Odt
;	COMDAT ??1CTempSelectObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CTempSelectObject@@QAE@XZ PROC NEAR			; CTempSelectObject::~CTempSelectObject, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   :     RestoreObject();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?RestoreObject@CTempSelectObject@@QAEXXZ ; CTempSelectObject::RestoreObject

; 47   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1CTempSelectObject@@QAE@XZ ENDP			; CTempSelectObject::~CTempSelectObject
_TEXT	ENDS
PUBLIC	??_C@_0EC@CLP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0N@GHLG@hdc?5?$DN?$DN?5m_hdc?$AA@		; `string'
;	COMDAT ??_C@_0EC@CLP@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0EC@CLP@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\private'
	DB	'\windows\directx\xact\host\gui\controls\ctltools.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GHLG@hdc?5?$DN?$DN?5m_hdc?$AA@
CONST	SEGMENT
??_C@_0N@GHLG@hdc?5?$DN?$DN?5m_hdc?$AA@ DB 'hdc == m_hdc', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SelectObject@CTempSelectObject@@QAEHPAUHDC__@@PAX@Z
_TEXT	SEGMENT
_hdc$ = 8
_hgdi$ = 12
_this$ = -4
?SelectObject@CTempSelectObject@@QAEHPAUHDC__@@PAX@Z PROC NEAR ; CTempSelectObject::SelectObject, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 51   :     if(hgdi = ::SelectObject(hdc, hgdi))

  00007	8b 45 0c	 mov	 eax, DWORD PTR _hgdi$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _hdc$[ebp]
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00015	89 45 0c	 mov	 DWORD PTR _hgdi$[ebp], eax
  00018	83 7d 0c 00	 cmp	 DWORD PTR _hgdi$[ebp], 0
  0001c	74 0a		 je	 SHORT $L49667

; 52   :     {
; 53   :         if(HGDI_ERROR == hgdi)

  0001e	83 7d 0c ff	 cmp	 DWORD PTR _hgdi$[ebp], -1
  00022	75 04		 jne	 SHORT $L49669

; 54   :         {
; 55   :             return FALSE;

  00024	33 c0		 xor	 eax, eax
  00026	eb 43		 jmp	 SHORT $L49666
$L49669:
$L49667:

; 56   :         }
; 57   :     }
; 58   : 
; 59   :     if(m_hgdiSave)

  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002e	74 25		 je	 SHORT $L49670

; 60   :     {
; 61   :         ASSERT(hdc == m_hdc);

  00030	6a 3d		 push	 61			; 0000003dH
  00032	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EC@CLP@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@GHLG@hdc?5?$DN?$DN?5m_hdc?$AA@ ; `string'
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _hdc$[ebp]
  00042	33 d2		 xor	 edx, edx
  00044	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00047	0f 95 c2	 setne	 dl
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 62   :     }
; 63   :     else

  00053	eb 11		 jmp	 SHORT $L49673
$L49670:

; 64   :     {
; 65   :         m_hgdiSave = hgdi;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _hgdi$[ebp]
  0005b	89 08		 mov	 DWORD PTR [eax], ecx

; 66   :         m_hdc = hdc;

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00060	8b 45 08	 mov	 eax, DWORD PTR _hdc$[ebp]
  00063	89 42 04	 mov	 DWORD PTR [edx+4], eax
$L49673:

; 67   :     }
; 68   : 
; 69   :     return TRUE;

  00066	b8 01 00 00 00	 mov	 eax, 1
$L49666:

; 70   : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?SelectObject@CTempSelectObject@@QAEHPAUHDC__@@PAX@Z ENDP ; CTempSelectObject::SelectObject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RestoreObject@CTempSelectObject@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4
?RestoreObject@CTempSelectObject@@QAEXXZ PROC NEAR	; CTempSelectObject::RestoreObject, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   :     if(m_hdc && m_hgdiSave)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 1b		 je	 SHORT $L49678
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00016	74 13		 je	 SHORT $L49678

; 75   :     {
; 76   :         ::SelectObject(m_hdc, m_hgdiSave);

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
$L49678:

; 77   :     }
; 78   : 
; 79   :     m_hgdiSave = NULL;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 80   :     m_hdc = NULL;

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 81   : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?RestoreObject@CTempSelectObject@@QAEXXZ ENDP		; CTempSelectObject::RestoreObject
_TEXT	ENDS
EXTRN	__imp__BitBlt@36:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
;	COMDAT ?DisplayBitmap@CWaveformRenderer@@MAEHPAUHDC__@@PBUtagRECT@@@Z
_TEXT	SEGMENT
_hdcDisplay$ = 8
_prcUpdate$ = 12
_this$ = -20
_x$ = -8
_y$ = -12
_nWidth$ = -4
_nHeight$ = -16
?DisplayBitmap@CWaveformRenderer@@MAEHPAUHDC__@@PBUtagRECT@@@Z PROC NEAR ; CWaveformRenderer::DisplayBitmap, COMDAT
; _this$ = ecx

; 897  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 898  :     int                     x;
; 899  :     int                     y;
; 900  :     int                     nWidth;
; 901  :     int                     nHeight;
; 902  : 
; 903  :     ASSERT(hdcDisplay);

  00009	68 87 03 00 00	 push	 903			; 00000387H
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0L@BLOB@hdcDisplay?$AA@ ; `string'
  00018	33 c0		 xor	 eax, eax
  0001a	83 7d 08 00	 cmp	 DWORD PTR _hdcDisplay$[ebp], 0
  0001e	0f 94 c0	 sete	 al
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 904  : 
; 905  :     if(!prcUpdate)

  0002a	83 7d 0c 00	 cmp	 DWORD PTR _prcUpdate$[ebp], 0
  0002e	75 09		 jne	 SHORT $L50616

; 906  :     {
; 907  :         prcUpdate = &m_rcDisplay;

  00030	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00036	89 4d 0c	 mov	 DWORD PTR _prcUpdate$[ebp], ecx
$L50616:

; 908  :     }
; 909  : 
; 910  :     x = prcUpdate->left - m_rcDisplay.left;

  00039	8b 55 0c	 mov	 edx, DWORD PTR _prcUpdate$[ebp]
  0003c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00041	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  00044	89 4d f8	 mov	 DWORD PTR _x$[ebp], ecx

; 911  :     y = prcUpdate->top - m_rcDisplay.top;

  00047	8b 55 0c	 mov	 edx, DWORD PTR _prcUpdate$[ebp]
  0004a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00050	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00053	89 4d f4	 mov	 DWORD PTR _y$[ebp], ecx

; 912  : 
; 913  :     nWidth = prcUpdate->right - x;

  00056	8b 55 0c	 mov	 edx, DWORD PTR _prcUpdate$[ebp]
  00059	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005c	2b 45 f8	 sub	 eax, DWORD PTR _x$[ebp]
  0005f	89 45 fc	 mov	 DWORD PTR _nWidth$[ebp], eax

; 914  :     nHeight = prcUpdate->bottom - y;

  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _prcUpdate$[ebp]
  00065	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00068	2b 55 f4	 sub	 edx, DWORD PTR _y$[ebp]
  0006b	89 55 f0	 mov	 DWORD PTR _nHeight$[ebp], edx

; 915  : 
; 916  :     return BitBlt(hdcDisplay, prcUpdate->left, prcUpdate->top, nWidth, nHeight, m_hdcDraw, x, y, SRCCOPY);

  0006e	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00073	8b 45 f4	 mov	 eax, DWORD PTR _y$[ebp]
  00076	50		 push	 eax
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00081	50		 push	 eax
  00082	8b 4d f0	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 fc	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 0c	 mov	 eax, DWORD PTR _prcUpdate$[ebp]
  0008d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00090	51		 push	 ecx
  00091	8b 55 0c	 mov	 edx, DWORD PTR _prcUpdate$[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	50		 push	 eax
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _hdcDisplay$[ebp]
  0009a	51		 push	 ecx
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BitBlt@36

; 917  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
?DisplayBitmap@CWaveformRenderer@@MAEHPAUHDC__@@PBUtagRECT@@@Z ENDP ; CWaveformRenderer::DisplayBitmap
_TEXT	ENDS
PUBLIC	??_ECWaveformControl@@WDA@AEPAXI@Z		; CWaveformControl::`vector deleting destructor'
PUBLIC	?AddRef@CWaveformControl@@WDA@AGKXZ		; CWaveformControl::AddRef
PUBLIC	?Release@CWaveformControl@@WDA@AGKXZ		; CWaveformControl::Release
PUBLIC	??_ECWaveformControl@@WDI@AEPAXI@Z		; CWaveformControl::`vector deleting destructor'
PUBLIC	??0CWaveformControl@@QAE@XZ			; CWaveformControl::CWaveformControl
PUBLIC	?AddRef@CWaveformControl@@UAGKXZ		; CWaveformControl::AddRef
PUBLIC	?Release@CWaveformControl@@UAGKXZ		; CWaveformControl::Release
PUBLIC	?Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z ; CWaveformControl::Create
PUBLIC	?SetColors@CWaveformControl@@UAEHPBUWAVEFORMCOLORS@@@Z ; CWaveformControl::SetColors
PUBLIC	?SetWaveData@CWaveformControl@@UAEHPBUWAVEFORMDATA@@@Z ; CWaveformControl::SetWaveData
PUBLIC	?SetOffset@CWaveformControl@@UAEHI@Z		; CWaveformControl::SetOffset
PUBLIC	?SetScale@CWaveformControl@@UAEHI@Z		; CWaveformControl::SetScale
PUBLIC	?SetResolution@CWaveformControl@@UAEHI@Z	; CWaveformControl::SetResolution
PUBLIC	?OnCreate@CWaveformControl@@UAEHPAXPAJ@Z	; CWaveformControl::OnCreate
PUBLIC	?OnSize@CWaveformControl@@UAEHIIIPAJ@Z		; CWaveformControl::OnSize
PUBLIC	?OnEraseBackground@CWaveformControl@@UAEHPAUHDC__@@PAJ@Z ; CWaveformControl::OnEraseBackground
PUBLIC	?OnPaint@CWaveformControl@@UAEHPAJ@Z		; CWaveformControl::OnPaint
PUBLIC	?OnScroll@CWaveformControl@@UAEHIPAUHWND__@@HPAJ@Z ; CWaveformControl::OnScroll
PUBLIC	?SetupOffsetScrollbar@CWaveformControl@@MAEXXZ	; CWaveformControl::SetupOffsetScrollbar
PUBLIC	?SetupScaleScrollbar@CWaveformControl@@MAEXXZ	; CWaveformControl::SetupScaleScrollbar
PUBLIC	??_7CWaveformControl@@6BCWindow@@@		; CWaveformControl::`vftable'
PUBLIC	??_7CWaveformControl@@6BCRefCount@DirectSound@@@ ; CWaveformControl::`vftable'
PUBLIC	??_7CWaveformControl@@6BCWaveformRenderer@@@	; CWaveformControl::`vftable'
PUBLIC	??_GCWaveformControl@@UAEPAXI@Z			; CWaveformControl::`scalar deleting destructor'
PUBLIC	??_ECWaveformControl@@UAEPAXI@Z			; CWaveformControl::`vector deleting destructor'
PUBLIC	?IsWindow@CWindow@@UAEHXZ			; CWindow::IsWindow
PUBLIC	?SendMessageA@CWindow@@UAEJIIJ@Z		; CWindow::SendMessageA
PUBLIC	?PostMessageA@CWindow@@UAEJIIJ@Z		; CWindow::PostMessageA
PUBLIC	?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z	; CWindow::SendDlgItemMessageA
PUBLIC	?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z		; CWindow::GetDlgItem
PUBLIC	?SetWindowTextA@CWindow@@UAEHPBD@Z		; CWindow::SetWindowTextA
PUBLIC	?SetDlgItemTextA@CWindow@@UAEHHPBD@Z		; CWindow::SetDlgItemTextA
PUBLIC	?SetDlgItemInt@CWindow@@UAEHHIH@Z		; CWindow::SetDlgItemInt
PUBLIC	?GetDlgItemTextA@CWindow@@UAEHHPADH@Z		; CWindow::GetDlgItemTextA
PUBLIC	?GetDlgItemInt@CWindow@@UAEIHPAHH@Z		; CWindow::GetDlgItemInt
PUBLIC	?MoveWindow@CWindow@@UAEHHHHHH@Z		; CWindow::MoveWindow
PUBLIC	?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z	; CWindow::MoveWindow
PUBLIC	?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetWindowRect
PUBLIC	?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::GetClientRect
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z	; CWindow::ScreenToClient
PUBLIC	?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z	; CWindow::ScreenToClient
PUBLIC	?DragAcceptFiles@CWindow@@UAEXH@Z		; CWindow::DragAcceptFiles
PUBLIC	??BCWindow@@UAEPAUHWND__@@XZ			; CWindow::operator HWND__ *
PUBLIC	?OnClose@CWindow@@UAEHPAJ@Z			; CWindow::OnClose
PUBLIC	?OnDestroy@CWindow@@UAEHPAJ@Z			; CWindow::OnDestroy
PUBLIC	?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z	; CWindow::OnCommand
PUBLIC	?OnSysCommand@CWindow@@UAEHIPAJ@Z		; CWindow::OnSysCommand
PUBLIC	?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z	; CWindow::OnNotify
PUBLIC	?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z	; CWindow::OnContextMenu
PUBLIC	?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z	; CWindow::OnDropFiles
PUBLIC	?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z	; CWindow::DefWindowProcA
PUBLIC	??0CRefCount@DirectSound@@QAE@K@Z		; DirectSound::CRefCount::CRefCount
EXTRN	??0CWindow@@QAE@III@Z:NEAR			; CWindow::CWindow
EXTRN	?Destroy@CWindow@@UAEXXZ:NEAR			; CWindow::Destroy
EXTRN	?SetRedraw@CWindow@@UAEHH@Z:NEAR		; CWindow::SetRedraw
EXTRN	?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z:NEAR ; CWindow::DispatchMessageA
EXTRN	?HandleMessage@CWindow@@UAEHIIJPAJ@Z:NEAR	; CWindow::HandleMessage
EXTRN	?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z:NEAR	; CWindow::OnScroll
EXTRN	?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z:NEAR	; CWindow::Create
;	COMDAT ??_7CWaveformControl@@6BCWindow@@@
CONST	SEGMENT
??_7CWaveformControl@@6BCWindow@@@ DD FLAT:??_ECWaveformControl@@UAEPAXI@Z ; CWaveformControl::`vftable'
	DD	FLAT:?AddRef@CWaveformControl@@UAGKXZ
	DD	FLAT:?Release@CWaveformControl@@UAGKXZ
	DD	FLAT:?IsWindow@CWindow@@UAEHXZ
	DD	FLAT:?Destroy@CWindow@@UAEXXZ
	DD	FLAT:?SetRedraw@CWindow@@UAEHH@Z
	DD	FLAT:?SendMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?PostMessageA@CWindow@@UAEJIIJ@Z
	DD	FLAT:?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
	DD	FLAT:?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
	DD	FLAT:?SetWindowTextA@CWindow@@UAEHPBD@Z
	DD	FLAT:?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
	DD	FLAT:?SetDlgItemInt@CWindow@@UAEHHIH@Z
	DD	FLAT:?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
	DD	FLAT:?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
	DD	FLAT:?MoveWindow@CWindow@@UAEHHHHHH@Z
	DD	FLAT:?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
	DD	FLAT:?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
	DD	FLAT:?DragAcceptFiles@CWindow@@UAEXH@Z
	DD	FLAT:??BCWindow@@UAEPAUHWND__@@XZ
	DD	FLAT:?DispatchMessageA@CWindow@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnCreate@CWaveformControl@@UAEHPAXPAJ@Z
	DD	FLAT:?OnClose@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnDestroy@CWindow@@UAEHPAJ@Z
	DD	FLAT:?OnSize@CWaveformControl@@UAEHIIIPAJ@Z
	DD	FLAT:?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnSysCommand@CWindow@@UAEHIPAJ@Z
	DD	FLAT:?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
	DD	FLAT:?OnEraseBackground@CWaveformControl@@UAEHPAUHDC__@@PAJ@Z
	DD	FLAT:?OnPaint@CWaveformControl@@UAEHPAJ@Z
	DD	FLAT:?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
	DD	FLAT:?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
	DD	FLAT:?HandleMessage@CWindow@@UAEHIIJPAJ@Z
	DD	FLAT:?OnScroll@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
	DD	FLAT:?OnScroll@CWaveformControl@@UAEHIPAUHWND__@@HPAJ@Z
	DD	FLAT:?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z
	DD	FLAT:?Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z
	DD	FLAT:?SetupOffsetScrollbar@CWaveformControl@@MAEXXZ
	DD	FLAT:?SetupScaleScrollbar@CWaveformControl@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CWaveformControl@@6BCRefCount@DirectSound@@@
CONST	SEGMENT
??_7CWaveformControl@@6BCRefCount@DirectSound@@@ DD FLAT:??_ECWaveformControl@@WDA@AEPAXI@Z ; CWaveformControl::`vftable'
	DD	FLAT:?AddRef@CWaveformControl@@WDA@AGKXZ
	DD	FLAT:?Release@CWaveformControl@@WDA@AGKXZ
CONST	ENDS
;	COMDAT ??_7CWaveformControl@@6BCWaveformRenderer@@@
CONST	SEGMENT
??_7CWaveformControl@@6BCWaveformRenderer@@@ DD FLAT:??_ECWaveformControl@@WDI@AEPAXI@Z ; CWaveformControl::`vftable'
	DD	FLAT:?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z
	DD	FLAT:?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z
	DD	FLAT:?SetColors@CWaveformControl@@UAEHPBUWAVEFORMCOLORS@@@Z
	DD	FLAT:?SetWaveData@CWaveformControl@@UAEHPBUWAVEFORMDATA@@@Z
	DD	FLAT:?SetOffset@CWaveformControl@@UAEHI@Z
	DD	FLAT:?SetScale@CWaveformControl@@UAEHI@Z
	DD	FLAT:?SetResolution@CWaveformControl@@UAEHI@Z
	DD	FLAT:?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z
	DD	FLAT:?SetRenderState@CWaveformRenderer@@MAEXW4WAVEFORM_RENDER_STATE@@@Z
	DD	FLAT:?CreateBitmap@CWaveformRenderer@@MAEHPAUHDC__@@@Z
	DD	FLAT:?CreateDrawingTools@CWaveformRenderer@@MAEHXZ
	DD	FLAT:?DrawBackground@CWaveformRenderer@@MAEHXZ
	DD	FLAT:?DrawWaveform@CWaveformRenderer@@MAEHXZ
	DD	FLAT:?DisplayBitmap@CWaveformRenderer@@MAEHPAUHDC__@@PBUtagRECT@@@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWaveformControl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CWaveformControl@@QAE@XZ PROC NEAR			; CWaveformControl::CWaveformControl, COMDAT
; _this$ = ecx

; 942  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	6a ff		 push	 -1
  0000b	6a ff		 push	 -1
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ??0CWindow@@QAE@III@Z	; CWindow::CWindow
  00015	6a 01		 push	 1
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 30	 add	 ecx, 48			; 00000030H
  0001d	e8 00 00 00 00	 call	 ??0CRefCount@DirectSound@@QAE@K@Z ; DirectSound::CRefCount::CRefCount
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	83 c1 38	 add	 ecx, 56			; 00000038H
  00028	e8 00 00 00 00	 call	 ??0CWaveformRenderer@@QAE@XZ ; CWaveformRenderer::CWaveformRenderer
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveformControl@@6BCWindow@@@ ; CWaveformControl::`vftable'
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET FLAT:??_7CWaveformControl@@6BCRefCount@DirectSound@@@ ; CWaveformControl::`vftable'
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], OFFSET FLAT:??_7CWaveformControl@@6BCWaveformRenderer@@@ ; CWaveformControl::`vftable'

; 943  : }

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
??0CWaveformControl@@QAE@XZ ENDP			; CWaveformControl::CWaveformControl
_TEXT	ENDS
PUBLIC	?AddRef@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::AddRef
PUBLIC	?Release@CRefCount@DirectSound@@UAGKXZ		; DirectSound::CRefCount::Release
PUBLIC	??_7CRefCount@DirectSound@@6B@			; DirectSound::CRefCount::`vftable'
PUBLIC	??_GCRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`scalar deleting destructor'
PUBLIC	??_ECRefCount@DirectSound@@UAEPAXI@Z		; DirectSound::CRefCount::`vector deleting destructor'
;	COMDAT ??_7CRefCount@DirectSound@@6B@
; File c:\xbox\private\windows\directx\dsound\common\refcount.h
CONST	SEGMENT
??_7CRefCount@DirectSound@@6B@ DD FLAT:??_ECRefCount@DirectSound@@UAEPAXI@Z ; DirectSound::CRefCount::`vftable'
	DD	FLAT:?AddRef@CRefCount@DirectSound@@UAGKXZ
	DD	FLAT:?Release@CRefCount@DirectSound@@UAGKXZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CRefCount@DirectSound@@QAE@K@Z
_TEXT	SEGMENT
_dwInitialRefCount$ = 8
_this$ = -4
??0CRefCount@DirectSound@@QAE@K@Z PROC NEAR		; DirectSound::CRefCount::CRefCount, COMDAT
; _this$ = ecx

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _dwInitialRefCount$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@ ; DirectSound::CRefCount::`vftable'

; 38   :     }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
??0CRefCount@DirectSound@@QAE@K@Z ENDP			; DirectSound::CRefCount::CRefCount
_TEXT	ENDS
PUBLIC	??1CRefCount@DirectSound@@UAE@XZ		; DirectSound::CRefCount::~CRefCount
; Function compile flags: /Odt
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCRefCount@DirectSound@@UAEPAXI@Z PROC NEAR		; DirectSound::CRefCount::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L47751
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L47751:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCRefCount@DirectSound@@UAEPAXI@Z ENDP		; DirectSound::CRefCount::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@		; `string'
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\dsound\common\refcount.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT
??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@ DB '!m_dwRefCount', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CRefCount@DirectSound@@UAE@XZ PROC NEAR		; DirectSound::CRefCount::~CRefCount, COMDAT
; _this$ = ecx

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CRefCount@DirectSound@@6B@ ; DirectSound::CRefCount::`vftable'

; 42   :         ASSERT(!m_dwRefCount);

  00010	6a 2a		 push	 42			; 0000002aH
  00012	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00017	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@ ; `string'
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	33 d2		 xor	 edx, edx
  00021	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00025	0f 95 c2	 setne	 dl
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 43   :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??1CRefCount@DirectSound@@UAE@XZ ENDP			; DirectSound::CRefCount::~CRefCount
_TEXT	ENDS
PUBLIC	??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@	; `string'
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT
??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ DB 'm_dwRefCount < ~0UL', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CRefCount@DirectSound@@UAGKXZ PROC NEAR		; DirectSound::CRefCount::AddRef, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         ASSERT(m_dwRefCount < ~0UL);

  00003	6a 2f		 push	 47			; 0000002fH
  00005	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@ ; `string'
  0000f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  00016	1b c9		 sbb	 ecx, ecx
  00018	41		 inc	 ecx
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :         return ++m_dwRefCount;

  00022	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	83 c0 01	 add	 eax, 1
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00031	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 49   :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?AddRef@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::AddRef
_TEXT	ENDS
PUBLIC	??_C@_0N@BGIF@m_dwRefCount?$AA@			; `string'
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT
??_C@_0N@BGIF@m_dwRefCount?$AA@ DB 'm_dwRefCount', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
$T51091 = -4
$T51092 = -8
?Release@CRefCount@DirectSound@@UAGKXZ PROC NEAR	; DirectSound::CRefCount::Release, COMDAT

; 52   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 53   :         ASSERT(m_dwRefCount);

  00006	6a 35		 push	 53			; 00000035H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@BGIF@m_dwRefCount?$AA@ ; `string'
  00012	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00015	33 c9		 xor	 ecx, ecx
  00017	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001b	0f 94 c1	 sete	 cl
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 54   : 
; 55   :         if(m_dwRefCount > 0)

  00027	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0002e	76 46		 jbe	 SHORT $L47768

; 56   :         {
; 57   :             if(!--m_dwRefCount)

  00030	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	83 e9 01	 sub	 ecx, 1
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00046	75 2e		 jne	 SHORT $L47769

; 58   :             {
; 59   :                 delete this;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 4d f8	 mov	 DWORD PTR $T51092[ebp], ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR $T51092[ebp]
  00051	89 55 fc	 mov	 DWORD PTR $T51091[ebp], edx
  00054	83 7d fc 00	 cmp	 DWORD PTR $T51091[ebp], 0
  00058	74 11		 je	 SHORT $L51093
  0005a	6a 01		 push	 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR $T51091[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR $T51091[ebp]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  00069	eb 07		 jmp	 SHORT $L51094
$L51093:
  0006b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L51094:

; 60   :                 return 0;

  00072	33 c0		 xor	 eax, eax
  00074	eb 06		 jmp	 SHORT $L47766
$L47769:
$L47768:

; 61   :             }
; 62   :         }
; 63   : 
; 64   :         return m_dwRefCount;

  00076	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$L47766:

; 65   :     }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?Release@CRefCount@DirectSound@@UAGKXZ ENDP		; DirectSound::CRefCount::Release
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnClose@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnClose@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnClose, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 246  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 247  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnClose@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnClose
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDestroy@CWindow@@UAEHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDestroy@CWindow@@UAEHPAJ@Z PROC NEAR			; CWindow::OnDestroy, COMDAT
; _this$ = ecx

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 252  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?OnDestroy@CWindow@@UAEHPAJ@Z ENDP			; CWindow::OnDestroy
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z PROC NEAR	; CWindow::OnCommand, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 261  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 262  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnCommand@CWindow@@UAEHIIPAUHWND__@@PAJ@Z ENDP		; CWindow::OnCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnSysCommand@CWindow@@UAEHIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSysCommand@CWindow@@UAEHIPAJ@Z PROC NEAR		; CWindow::OnSysCommand, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 266  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 267  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnSysCommand@CWindow@@UAEHIPAJ@Z ENDP			; CWindow::OnSysCommand
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z PROC NEAR	; CWindow::OnNotify, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 271  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 272  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnNotify@CWindow@@UAEHPAUtagNMHDR@@PAJ@Z ENDP		; CWindow::OnNotify
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z PROC NEAR ; CWindow::OnContextMenu, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 292  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnContextMenu@CWindow@@UAEHPAUHWND__@@HHPAJ@Z ENDP	; CWindow::OnContextMenu
_TEXT	ENDS
EXTRN	__imp__DefWindowProcA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hWnd$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z PROC NEAR	; CWindow::DefWindowProcA, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 296  :     return ::DefWindowProc(hWnd, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00016	50		 push	 eax
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16

; 297  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
?DefWindowProcA@CWindow@@UAEJPAUHWND__@@IIJ@Z ENDP	; CWindow::DefWindowProcA
_TEXT	ENDS
PUBLIC	??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_04BEIE@this?$AA@				; `string'
;	COMDAT ??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\host\gui\base\wndwrap.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
CONST	SEGMENT
??_C@_04BEIE@this?$AA@ DB 'this', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??BCWindow@@UAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -4
??BCWindow@@UAEPAUHWND__@@XZ PROC NEAR			; CWindow::operator HWND__ *, COMDAT
; _this$ = ecx

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 301  :     ASSERT(this);

  00007	68 2d 01 00 00	 push	 301			; 0000012dH
  0000c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04BEIE@this?$AA@ ; `string'
  00016	33 c0		 xor	 eax, eax
  00018	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0001c	0f 94 c0	 sete	 al
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00025	83 c4 10	 add	 esp, 16			; 00000010H

; 302  :     return m_hWnd;

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 303  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??BCWindow@@UAEPAUHWND__@@XZ ENDP			; CWindow::operator HWND__ *
_TEXT	ENDS
PUBLIC	??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@	; `string'
EXTRN	__imp__IsWindow@4:NEAR
;	COMDAT ??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ DB '::IsWindow(m_hWnd)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?IsWindow@CWindow@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsWindow@CWindow@@UAEHXZ PROC NEAR			; CWindow::IsWindow, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  :     if(!m_hWnd)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  0000e	75 04		 jne	 SHORT $L49126

; 308  :     {
; 309  :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 2f		 jmp	 SHORT $L49125
$L49126:

; 310  :     }
; 311  : 
; 312  :     ASSERT(::IsWindow(m_hWnd));

  00014	68 38 01 00 00	 push	 312			; 00000138H
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CGCA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@GMNP@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@ ; `string'
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00029	52		 push	 edx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00030	f7 d8		 neg	 eax
  00032	1b c0		 sbb	 eax, eax
  00034	40		 inc	 eax
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0003b	83 c4 10	 add	 esp, 16			; 00000010H

; 313  : 
; 314  :     return TRUE;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$L49125:

; 315  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?IsWindow@CWindow@@UAEHXZ ENDP				; CWindow::IsWindow
_TEXT	ENDS
EXTRN	__imp__SendMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?SendMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::SendMessageA, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  :     return ::SendMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16

; 320  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::SendMessageA
_TEXT	ENDS
EXTRN	__imp__PostMessageA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?PostMessageA@CWindow@@UAEJIIJ@Z
_TEXT	SEGMENT
_uMsg$ = 8
_wParam$ = 12
_lParam$ = 16
_this$ = -4
?PostMessageA@CWindow@@UAEJIIJ@Z PROC NEAR		; CWindow::PostMessageA, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  :     return ::PostMessage(m_hWnd, uMsg, wParam, lParam);

  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16

; 325  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?PostMessageA@CWindow@@UAEJIIJ@Z ENDP			; CWindow::PostMessageA
_TEXT	ENDS
EXTRN	__imp__SetWindowTextA@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetWindowTextA@CWindow@@UAEHPBD@Z
_TEXT	SEGMENT
_pszText$ = 8
_this$ = -4
?SetWindowTextA@CWindow@@UAEHPBD@Z PROC NEAR		; CWindow::SetWindowTextA, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  :     return ::SetWindowText(m_hWnd, pszText);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pszText$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowTextA@8

; 330  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?SetWindowTextA@CWindow@@UAEHPBD@Z ENDP			; CWindow::SetWindowTextA
_TEXT	ENDS
EXTRN	__imp__MoveWindow@24:NEAR
; Function compile flags: /Odt
;	COMDAT ?MoveWindow@CWindow@@UAEHHHHHH@Z
_TEXT	SEGMENT
_x$ = 8
_y$ = 12
_nWidth$ = 16
_nHeight$ = 20
_fRepaint$ = 24
_this$ = -4
?MoveWindow@CWindow@@UAEHHHHHH@Z PROC NEAR		; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :     return ::MoveWindow(m_hWnd, x, y, nWidth, nHeight, fRepaint);

  00007	8b 45 18	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 10	 mov	 edx, DWORD PTR _nWidth$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 335  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 14 00	 ret	 20			; 00000014H
?MoveWindow@CWindow@@UAEHHHHHH@Z ENDP			; CWindow::MoveWindow
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_fRepaint$ = 12
_this$ = -4
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z PROC NEAR	; CWindow::MoveWindow, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  :     return ::MoveWindow(m_hWnd, prcWindow->left, prcWindow->top, prcWindow->right - prcWindow->left, prcWindow->bottom - prcWindow->top, fRepaint);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _fRepaint$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  00011	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00014	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _prcWindow$[ebp]
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	2b 02		 sub	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _prcWindow$[ebp]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveWindow@24

; 340  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?MoveWindow@CWindow@@UAEHPBUtagRECT@@H@Z ENDP		; CWindow::MoveWindow
_TEXT	ENDS
EXTRN	__imp__GetWindowRect@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcWindow$ = 8
_this$ = -4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetWindowRect, COMDAT
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :     return ::GetWindowRect(m_hWnd, prcWindow);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcWindow$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetWindowRect@8

; 345  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetWindowRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetWindowRect
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prcClient$ = 8
_this$ = -4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::GetClientRect, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 349  :     return ::GetClientRect(m_hWnd, prcClient);

  00007	8b 45 08	 mov	 eax, DWORD PTR _prcClient$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 350  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWindow@@UAEHPAUtagRECT@@@Z ENDP		; CWindow::GetClientRect
_TEXT	ENDS
EXTRN	__imp__ScreenToClient@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_ppt$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  :     return ::ScreenToClient(m_hWnd, ppt);

  00007	8b 45 08	 mov	 eax, DWORD PTR _ppt$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 355  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagPOINT@@@Z ENDP	; CWindow::ScreenToClient
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z
_TEXT	SEGMENT
_prc$ = 8
_this$ = -4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z PROC NEAR	; CWindow::ScreenToClient, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  :     if(!::ScreenToClient(m_hWnd, (LPPOINT)&prc->left))

  00007	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
  00018	85 c0		 test	 eax, eax
  0001a	75 04		 jne	 SHORT $L49174

; 360  :     {
; 361  :         return FALSE;

  0001c	33 c0		 xor	 eax, eax
  0001e	eb 14		 jmp	 SHORT $L49172
$L49174:

; 362  :     }
; 363  : 
; 364  :     return ::ScreenToClient(m_hWnd, (LPPOINT)&prc->right);

  00020	8b 45 08	 mov	 eax, DWORD PTR _prc$[ebp]
  00023	83 c0 08	 add	 eax, 8
  00026	50		 push	 eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0002d	52		 push	 edx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8
$L49172:

; 365  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?ScreenToClient@CWindow@@UAEHPAUtagRECT@@@Z ENDP	; CWindow::ScreenToClient
_TEXT	ENDS
EXTRN	__imp__SendDlgItemMessageA@20:NEAR
; Function compile flags: /Odt
;	COMDAT ?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z
_TEXT	SEGMENT
_nItemId$ = 8
_uMsg$ = 12
_wParam$ = 16
_lParam$ = 20
_this$ = -4
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z PROC NEAR	; CWindow::SendDlgItemMessageA, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 369  :     return ::SendDlgItemMessage(m_hWnd, nItemId, uMsg, wParam, lParam);

  00007	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0001d	52		 push	 edx
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendDlgItemMessageA@20

; 370  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?SendDlgItemMessageA@CWindow@@UAEJHIIJ@Z ENDP		; CWindow::SendDlgItemMessageA
_TEXT	ENDS
EXTRN	__imp__GetDlgItem@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z
_TEXT	SEGMENT
_nItemId$ = 8
_this$ = -4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z PROC NEAR	; CWindow::GetDlgItem, COMDAT
; _this$ = ecx

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 374  :     return ::GetDlgItem(m_hWnd, nItemId);

  00007	8b 45 08	 mov	 eax, DWORD PTR _nItemId$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItem@8

; 375  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetDlgItem@CWindow@@UAEPAUHWND__@@H@Z ENDP		; CWindow::GetDlgItem
_TEXT	ENDS
EXTRN	__imp__SetDlgItemTextA@12:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemTextA@CWindow@@UAEHHPBD@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_this$ = -4
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z PROC NEAR		; CWindow::SetDlgItemTextA, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  :     return ::SetDlgItemText(m_hWnd, nItemId, pszString);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _pszString$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nItemId$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemTextA@12

; 380  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?SetDlgItemTextA@CWindow@@UAEHHPBD@Z ENDP		; CWindow::SetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__SetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetDlgItemInt@CWindow@@UAEHHIH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_nValue$ = 12
_fSigned$ = 16
_this$ = -4
?SetDlgItemInt@CWindow@@UAEHHIH@Z PROC NEAR		; CWindow::SetDlgItemInt, COMDAT
; _this$ = ecx

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 384  :     return ::SetDlgItemInt(m_hWnd, nItemId, nValue, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nValue$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDlgItemInt@16

; 385  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetDlgItemInt@CWindow@@UAEHHIH@Z ENDP			; CWindow::SetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__GetDlgItemTextA@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemTextA@CWindow@@UAEHHPADH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pszString$ = 12
_nLength$ = 16
_this$ = -4
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z PROC NEAR		; CWindow::GetDlgItemTextA, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :     return ::GetDlgItemText(m_hWnd, nItemId, pszString, nLength);

  00007	8b 45 10	 mov	 eax, DWORD PTR _nLength$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemTextA@16

; 390  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemTextA@CWindow@@UAEHHPADH@Z ENDP		; CWindow::GetDlgItemTextA
_TEXT	ENDS
EXTRN	__imp__GetDlgItemInt@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?GetDlgItemInt@CWindow@@UAEIHPAHH@Z
_TEXT	SEGMENT
_nItemId$ = 8
_pfTranslated$ = 12
_fSigned$ = 16
_this$ = -4
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z PROC NEAR		; CWindow::GetDlgItemInt, COMDAT
; _this$ = ecx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 394  :     return ::GetDlgItemInt(m_hWnd, nItemId, pfTranslated, fSigned);

  00007	8b 45 10	 mov	 eax, DWORD PTR _fSigned$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _pfTranslated$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nItemId$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDlgItemInt@16

; 395  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?GetDlgItemInt@CWindow@@UAEIHPAHH@Z ENDP		; CWindow::GetDlgItemInt
_TEXT	ENDS
EXTRN	__imp__DragAcceptFiles@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?DragAcceptFiles@CWindow@@UAEXH@Z
_TEXT	SEGMENT
_fAccept$ = 8
_this$ = -4
?DragAcceptFiles@CWindow@@UAEXH@Z PROC NEAR		; CWindow::DragAcceptFiles, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 399  :     ::DragAcceptFiles(m_hWnd, fAccept);

  00007	8b 45 08	 mov	 eax, DWORD PTR _fAccept$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DragAcceptFiles@8

; 400  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?DragAcceptFiles@CWindow@@UAEXH@Z ENDP			; CWindow::DragAcceptFiles
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z PROC NEAR	; CWindow::OnDropFiles, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 404  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 405  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnDropFiles@CWindow@@UAEHPAUHDROP__@@PAJ@Z ENDP	; CWindow::OnDropFiles
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.h
_TEXT	ENDS
;	COMDAT ?AddRef@CWaveformControl@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?AddRef@CWaveformControl@@UAGKXZ PROC NEAR		; CWaveformControl::AddRef, COMDAT

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  :     return CRefCount::AddRef();

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 30	 add	 eax, 48			; 00000030H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?AddRef@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::AddRef

; 180  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?AddRef@CWaveformControl@@UAGKXZ ENDP			; CWaveformControl::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CWaveformControl@@UAGKXZ
_TEXT	SEGMENT
_this$ = 8
?Release@CWaveformControl@@UAGKXZ PROC NEAR		; CWaveformControl::Release, COMDAT

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 184  :     return CRefCount::Release();

  00003	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00006	83 c0 30	 add	 eax, 48			; 00000030H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?Release@CRefCount@DirectSound@@UAGKXZ ; DirectSound::CRefCount::Release

; 185  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?Release@CWaveformControl@@UAGKXZ ENDP			; CWaveformControl::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetColors@CWaveformControl@@UAEHPBUWAVEFORMCOLORS@@@Z
_TEXT	SEGMENT
_pColors$ = 8
_this$ = -4
?SetColors@CWaveformControl@@UAEHPBUWAVEFORMCOLORS@@@Z PROC NEAR ; CWaveformControl::SetColors, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  :     return CWaveformRenderer::SetColors(pColors);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pColors$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetColors@CWaveformRenderer@@UAEHPBUWAVEFORMCOLORS@@@Z ; CWaveformRenderer::SetColors

; 190  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetColors@CWaveformControl@@UAEHPBUWAVEFORMCOLORS@@@Z ENDP ; CWaveformControl::SetColors
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetResolution@CWaveformControl@@UAEHI@Z
_TEXT	SEGMENT
_nResolution$ = 8
_this$ = -4
?SetResolution@CWaveformControl@@UAEHI@Z PROC NEAR	; CWaveformControl::SetResolution, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  :     return CWaveformRenderer::SetResolution(nResolution);

  00007	8b 45 08	 mov	 eax, DWORD PTR _nResolution$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetResolution@CWaveformRenderer@@UAEHI@Z ; CWaveformRenderer::SetResolution

; 195  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetResolution@CWaveformControl@@UAEHI@Z ENDP		; CWaveformControl::SetResolution
_TEXT	ENDS
PUBLIC	??1CWaveformControl@@UAE@XZ			; CWaveformControl::~CWaveformControl
; Function compile flags: /Odt
;	COMDAT ??_GCWaveformControl@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCWaveformControl@@UAEPAXI@Z PROC NEAR		; CWaveformControl::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWaveformControl@@UAE@XZ ; CWaveformControl::~CWaveformControl
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L50625
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L50625:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWaveformControl@@UAEPAXI@Z ENDP			; CWaveformControl::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CWindow@@UAE@XZ:NEAR				; CWindow::~CWindow
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
;	COMDAT ??1CWaveformControl@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CWaveformControl@@UAE@XZ PROC NEAR			; CWaveformControl::~CWaveformControl, COMDAT
; _this$ = ecx

; 968  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveformControl@@6BCWindow@@@ ; CWaveformControl::`vftable'
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET FLAT:??_7CWaveformControl@@6BCRefCount@DirectSound@@@ ; CWaveformControl::`vftable'
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], OFFSET FLAT:??_7CWaveformControl@@6BCWaveformRenderer@@@ ; CWaveformControl::`vftable'

; 969  : }

  00026	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0002a	74 0b		 je	 SHORT $L51193
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c0 38	 add	 eax, 56			; 00000038H
  00032	89 45 f8	 mov	 DWORD PTR -8+[ebp], eax
  00035	eb 07		 jmp	 SHORT $L51194
$L51193:
  00037	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR -8+[ebp], 0
$L51194:
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR -8+[ebp]
  00041	e8 00 00 00 00	 call	 ??1CWaveformRenderer@@UAE@XZ ; CWaveformRenderer::~CWaveformRenderer
  00046	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0004a	74 0b		 je	 SHORT $L51191
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 30	 add	 ecx, 48			; 00000030H
  00052	89 4d f4	 mov	 DWORD PTR -12+[ebp], ecx
  00055	eb 07		 jmp	 SHORT $L51192
$L51191:
  00057	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L51192:
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  00061	e8 00 00 00 00	 call	 ??1CRefCount@DirectSound@@UAE@XZ ; DirectSound::CRefCount::~CRefCount
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ??1CWindow@@UAE@XZ	; CWindow::~CWindow
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??1CWaveformControl@@UAE@XZ ENDP			; CWaveformControl::~CWaveformControl
_TEXT	ENDS
EXTRN	_g_hInstance:DWORD
EXTRN	__imp__RegisterClassExA@4:NEAR
EXTRN	?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z:NEAR	; CWindow::WindowProc
EXTRN	__imp__LoadCursorA@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z
_TEXT	SEGMENT
_pParent$ = 8
_dwExStyle$ = 12
_x$ = 16
_y$ = 20
_nWidth$ = 24
_nHeight$ = 28
_nControlId$ = 32
_this$ = -56
_wc$ = -48
_dwStyle$ = -52
?Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z PROC NEAR ; CWaveformControl::Create, COMDAT
; _this$ = ecx

; 1006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	57		 push	 edi
  00007	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 1007 :     static const DWORD      dwGeneralStyle  = WS_HSCROLL | WS_VSCROLL | WS_TABSTOP;
; 1008 :     static const DWORD      dwChildStyle    = WS_CHILD;
; 1009 :     static const DWORD      dwParentStyle   = WS_OVERLAPPEDWINDOW;
; 1010 :     WNDCLASSEX              wc              = { 0 };

  0000a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp], 0
  00011	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00016	33 c0		 xor	 eax, eax
  00018	8d 7d d4	 lea	 edi, DWORD PTR _wc$[ebp+4]
  0001b	f3 ab		 rep stosd

; 1011 :     DWORD                   dwStyle;
; 1012 : 
; 1013 :     dwStyle = dwGeneralStyle;

  0001d	c7 45 cc 00 00
	31 00		 mov	 DWORD PTR _dwStyle$[ebp], 3211264 ; 00310000H

; 1014 : 
; 1015 :     if(pParent)

  00024	83 7d 08 00	 cmp	 DWORD PTR _pParent$[ebp], 0
  00028	74 0d		 je	 SHORT $L50648

; 1016 :     {
; 1017 :         dwStyle |= dwChildStyle;

  0002a	8b 45 cc	 mov	 eax, DWORD PTR _dwStyle$[ebp]
  0002d	0d 00 00 00 40	 or	 eax, 1073741824		; 40000000H
  00032	89 45 cc	 mov	 DWORD PTR _dwStyle$[ebp], eax

; 1018 :     }
; 1019 :     else

  00035	eb 13		 jmp	 SHORT $L50649
$L50648:

; 1020 :     {
; 1021 :         dwStyle |= dwParentStyle;

  00037	8b 4d cc	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  0003a	81 c9 00 00 cf
	00		 or	 ecx, 13565952		; 00cf0000H
  00040	89 4d cc	 mov	 DWORD PTR _dwStyle$[ebp], ecx

; 1022 :         nControlId = 0;

  00043	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _nControlId$[ebp], 0
$L50649:

; 1023 :     }
; 1024 : 
; 1025 :     //
; 1026 :     // Register the window class
; 1027 :     //    
; 1028 : 
; 1029 :     wc.cbSize = sizeof(wc);

  0004a	c7 45 d0 30 00
	00 00		 mov	 DWORD PTR _wc$[ebp], 48	; 00000030H

; 1030 :     wc.style = CS_DBLCLKS | CS_OWNDC;

  00051	c7 45 d4 28 00
	00 00		 mov	 DWORD PTR _wc$[ebp+4], 40 ; 00000028H

; 1031 :     wc.lpfnWndProc = WindowProc;

  00058	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _wc$[ebp+8], OFFSET FLAT:?WindowProc@CWindow@@SGJPAUHWND__@@IIJ@Z ; CWindow::WindowProc

; 1032 :     wc.hInstance = g_hInstance;

  0005f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hInstance
  00065	89 55 e4	 mov	 DWORD PTR _wc$[ebp+20], edx

; 1033 :     wc.hCursor = LoadCursor(NULL, IDC_ARROW);

  00068	68 00 7f 00 00	 push	 32512			; 00007f00H
  0006d	6a 00		 push	 0
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  00075	89 45 ec	 mov	 DWORD PTR _wc$[ebp+28], eax

; 1034 :     wc.lpszClassName = m_pszClassName;

  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pszClassName@CWaveformControl@@2QBDB ; CWaveformControl::m_pszClassName
  0007d	89 45 f8	 mov	 DWORD PTR _wc$[ebp+40], eax

; 1035 : 
; 1036 :     RegisterClassEx(&wc);

  00080	8d 4d d0	 lea	 ecx, DWORD PTR _wc$[ebp]
  00083	51		 push	 ecx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4

; 1037 : 
; 1038 :     //
; 1039 :     // Create the window
; 1040 :     //
; 1041 : 
; 1042 :     return CWindow::Create(pParent, m_pszClassName, NULL, dwExStyle, dwStyle, x, y, nWidth, nHeight, nControlId);

  0008a	6a 00		 push	 0
  0008c	8b 55 20	 mov	 edx, DWORD PTR _nControlId$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 1c	 mov	 eax, DWORD PTR _nHeight$[ebp]
  00093	50		 push	 eax
  00094	8b 4d 18	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  00097	51		 push	 ecx
  00098	8b 55 14	 mov	 edx, DWORD PTR _y$[ebp]
  0009b	52		 push	 edx
  0009c	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d cc	 mov	 ecx, DWORD PTR _dwStyle$[ebp]
  000a3	51		 push	 ecx
  000a4	8b 55 0c	 mov	 edx, DWORD PTR _dwExStyle$[ebp]
  000a7	52		 push	 edx
  000a8	6a 00		 push	 0
  000aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pszClassName@CWaveformControl@@2QBDB ; CWaveformControl::m_pszClassName
  000af	50		 push	 eax
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _pParent$[ebp]
  000b3	51		 push	 ecx
  000b4	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	e8 00 00 00 00	 call	 ?Create@CWindow@@MAEHPAV1@PBD1KKHHHHIPAX@Z ; CWindow::Create

; 1043 : }

  000bc	5f		 pop	 edi
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 1c 00	 ret	 28			; 0000001cH
?Create@CWaveformControl@@UAEHPAVCWindow@@KHHIII@Z ENDP	; CWaveformControl::Create
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetScale@CWaveformControl@@UAEHI@Z
_TEXT	SEGMENT
_nScale$ = 8
_this$ = -4
?SetScale@CWaveformControl@@UAEHI@Z PROC NEAR		; CWaveformControl::SetScale, COMDAT
; _this$ = ecx

; 1069 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1070 :     //
; 1071 :     // Hand off to the renderer
; 1072 :     //
; 1073 : 
; 1074 :     if(!CWaveformRenderer::SetScale(nScale))

  00007	8b 45 08	 mov	 eax, DWORD PTR _nScale$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetScale@CWaveformRenderer@@UAEHI@Z ; CWaveformRenderer::SetScale
  00013	85 c0		 test	 eax, eax
  00015	75 04		 jne	 SHORT $L50657

; 1075 :     {
; 1076 :         return FALSE;

  00017	33 c0		 xor	 eax, eax
  00019	eb 17		 jmp	 SHORT $L50656
$L50657:

; 1077 :     }
; 1078 : 
; 1079 :     //
; 1080 :     // Reset the scrollbars
; 1081 :     //
; 1082 : 
; 1083 :     SetupOffsetScrollbar();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 e9 38	 sub	 ecx, 56			; 00000038H
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 c8	 mov	 eax, DWORD PTR [edx-56]
  00027	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]

; 1084 : 
; 1085 :     return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1
$L50656:

; 1086 : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?SetScale@CWaveformControl@@UAEHI@Z ENDP		; CWaveformControl::SetScale
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetWaveData@CWaveformControl@@UAEHPBUWAVEFORMDATA@@@Z
_TEXT	SEGMENT
_pWaveData$ = 8
_this$ = -4
?SetWaveData@CWaveformControl@@UAEHPBUWAVEFORMDATA@@@Z PROC NEAR ; CWaveformControl::SetWaveData, COMDAT
; _this$ = ecx

; 1112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1113 :     if(!CWaveformRenderer::SetWaveData(pWaveData))

  00007	8b 45 08	 mov	 eax, DWORD PTR _pWaveData$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetWaveData@CWaveformRenderer@@UAEHPBUWAVEFORMDATA@@@Z ; CWaveformRenderer::SetWaveData
  00013	85 c0		 test	 eax, eax
  00015	75 04		 jne	 SHORT $L50662

; 1114 :     {
; 1115 :         return FALSE;

  00017	33 c0		 xor	 eax, eax
  00019	eb 17		 jmp	 SHORT $L50661
$L50662:

; 1116 :     }
; 1117 : 
; 1118 :     SetupOffsetScrollbar();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 e9 38	 sub	 ecx, 56			; 00000038H
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 c8	 mov	 eax, DWORD PTR [edx-56]
  00027	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]

; 1119 : 
; 1120 :     return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1
$L50661:

; 1121 : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?SetWaveData@CWaveformControl@@UAEHPBUWAVEFORMDATA@@@Z ENDP ; CWaveformControl::SetWaveData
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetOffset@CWaveformControl@@UAEHI@Z
_TEXT	SEGMENT
_cbOffset$ = 8
_this$ = -4
?SetOffset@CWaveformControl@@UAEHI@Z PROC NEAR		; CWaveformControl::SetOffset, COMDAT
; _this$ = ecx

; 1148 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1149 :     if(!CWaveformRenderer::SetOffset(cbOffset))

  00007	8b 45 08	 mov	 eax, DWORD PTR _cbOffset$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?SetOffset@CWaveformRenderer@@UAEHI@Z ; CWaveformRenderer::SetOffset
  00013	85 c0		 test	 eax, eax
  00015	75 04		 jne	 SHORT $L50667

; 1150 :     {
; 1151 :         return FALSE;

  00017	33 c0		 xor	 eax, eax
  00019	eb 17		 jmp	 SHORT $L50666
$L50667:

; 1152 :     }
; 1153 : 
; 1154 :     SetupOffsetScrollbar();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 e9 38	 sub	 ecx, 56			; 00000038H
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 42 c8	 mov	 eax, DWORD PTR [edx-56]
  00027	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]

; 1155 : 
; 1156 :     return TRUE;

  0002d	b8 01 00 00 00	 mov	 eax, 1
$L50666:

; 1157 : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?SetOffset@CWaveformControl@@UAEHI@Z ENDP		; CWaveformControl::SetOffset
_TEXT	ENDS
EXTRN	__imp__SetScrollInfo@16:NEAR
; Function compile flags: /Odt
;	COMDAT ?SetupOffsetScrollbar@CWaveformControl@@MAEXXZ
_TEXT	SEGMENT
_this$ = -44
_cbSample$ = -4
_si$ = -36
_nSectionCount$ = -8
_nSectionOffset$ = -40
?SetupOffsetScrollbar@CWaveformControl@@MAEXXZ PROC NEAR ; CWaveformControl::SetupOffsetScrollbar, COMDAT
; _this$ = ecx

; 1183 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 1184 :     const int               cbSample        = m_wfxFormat.nChannels * m_wfxFormat.wBitsPerSample / 8;

  0000a	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	33 c9		 xor	 ecx, ecx
  0000f	66 8b 48 7e	 mov	 cx, WORD PTR [eax+126]
  00013	8b c1		 mov	 eax, ecx
  00015	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00018	33 c9		 xor	 ecx, ecx
  0001a	66 8b 8a 8a 00
	00 00		 mov	 cx, WORD PTR [edx+138]
  00021	0f af c1	 imul	 eax, ecx
  00024	99		 cdq
  00025	83 e2 07	 and	 edx, 7
  00028	03 c2		 add	 eax, edx
  0002a	c1 f8 03	 sar	 eax, 3
  0002d	89 45 fc	 mov	 DWORD PTR _cbSample$[ebp], eax

; 1185 :     SCROLLINFO              si              = { 0 };

  00030	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _si$[ebp], 0
  00037	b9 06 00 00 00	 mov	 ecx, 6
  0003c	33 c0		 xor	 eax, eax
  0003e	8d 7d e0	 lea	 edi, DWORD PTR _si$[ebp+4]
  00041	f3 ab		 rep stosd

; 1186 :     int                     nSectionCount;
; 1187 :     int                     nSectionOffset;
; 1188 : 
; 1189 :     //
; 1190 :     // How many "pages" are there currently?  A page is defined as the amount
; 1191 :     // of wave data that can currently be displayed in the window.
; 1192 :     //
; 1193 : 
; 1194 :     si.cbSize = sizeof(si);

  00043	c7 45 dc 1c 00
	00 00		 mov	 DWORD PTR _si$[ebp], 28	; 0000001cH

; 1195 :     si.fMask = SIF_PAGE | SIF_POS | SIF_RANGE;

  0004a	c7 45 e0 07 00
	00 00		 mov	 DWORD PTR _si$[ebp+4], 7

; 1196 : 
; 1197 :     m_nPageSize = m_nWidth * cbSample * m_nScale;

  00051	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00054	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00057	0f af 45 fc	 imul	 eax, DWORD PTR _cbSample$[ebp]
  0005b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	0f af 81 9c 00
	00 00		 imul	 eax, DWORD PTR [ecx+156]
  00065	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00068	89 82 a4 00 00
	00		 mov	 DWORD PTR [edx+164], eax

; 1198 :     m_nSectionSize = m_nPageSize / m_nSectionDivisor;

  0006e	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 88 a4 00 00
	00		 mov	 ecx, DWORD PTR [eax+164]
  00077	c1 e9 02	 shr	 ecx, 2
  0007a	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	89 8a a8 00 00
	00		 mov	 DWORD PTR [edx+168], ecx

; 1199 :     
; 1200 :     if(m_nSectionSize)

  00083	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00086	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [eax+168], 0
  0008d	0f 84 b2 00 00
	00		 je	 $L50676

; 1201 :     {
; 1202 :         nSectionCount = (m_cbWaveData + m_nSectionSize - 1) / m_nSectionSize;

  00093	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0009c	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  000a5	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  000a9	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	33 d2		 xor	 edx, edx
  000ae	f7 b1 a8 00 00
	00		 div	 DWORD PTR [ecx+168]
  000b4	89 45 f8	 mov	 DWORD PTR _nSectionCount$[ebp], eax

; 1203 :         nSectionOffset = m_cbHorizOffset / m_nSectionSize;

  000b7	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  000c3	33 d2		 xor	 edx, edx
  000c5	f7 b1 a8 00 00
	00		 div	 DWORD PTR [ecx+168]
  000cb	89 45 d8	 mov	 DWORD PTR _nSectionOffset$[ebp], eax

; 1204 : 
; 1205 :         //
; 1206 :         // Fix the current offset so that no more than one unused section is
; 1207 :         // visible
; 1208 :         //
; 1209 : 
; 1210 :         if(nSectionCount <= (int)m_nSectionDivisor)

  000ce	83 7d f8 04	 cmp	 DWORD PTR _nSectionCount$[ebp], 4
  000d2	7f 16		 jg	 SHORT $L50678

; 1211 :         {
; 1212 :             nSectionOffset = 0;

  000d4	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nSectionOffset$[ebp], 0

; 1213 : 
; 1214 :             CWaveformRenderer::SetOffset(0);

  000db	6a 00		 push	 0
  000dd	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	83 c1 38	 add	 ecx, 56			; 00000038H
  000e3	e8 00 00 00 00	 call	 ?SetOffset@CWaveformRenderer@@UAEHI@Z ; CWaveformRenderer::SetOffset

; 1215 :         }
; 1216 :         else if(nSectionOffset > nSectionCount - (int)m_nSectionDivisor)

  000e8	eb 3e		 jmp	 SHORT $L50679
$L50678:
  000ea	8b 55 f8	 mov	 edx, DWORD PTR _nSectionCount$[ebp]
  000ed	83 ea 04	 sub	 edx, 4
  000f0	39 55 d8	 cmp	 DWORD PTR _nSectionOffset$[ebp], edx
  000f3	7e 33		 jle	 SHORT $L50681

; 1217 :         {
; 1218 :             nSectionOffset = m_cbHorizOffset / m_nSectionSize;

  000f5	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [eax+152]
  00101	33 d2		 xor	 edx, edx
  00103	f7 b1 a8 00 00
	00		 div	 DWORD PTR [ecx+168]
  00109	89 45 d8	 mov	 DWORD PTR _nSectionOffset$[ebp], eax

; 1219 : 
; 1220 :             CWaveformRenderer::SetOffset((nSectionCount - (int)m_nSectionDivisor) * m_nSectionSize);

  0010c	8b 55 f8	 mov	 edx, DWORD PTR _nSectionCount$[ebp]
  0010f	83 ea 04	 sub	 edx, 4
  00112	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00115	0f af 90 a8 00
	00 00		 imul	 edx, DWORD PTR [eax+168]
  0011c	52		 push	 edx
  0011d	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	83 c1 38	 add	 ecx, 56			; 00000038H
  00123	e8 00 00 00 00	 call	 ?SetOffset@CWaveformRenderer@@UAEHI@Z ; CWaveformRenderer::SetOffset
$L50681:
$L50679:

; 1221 :         }
; 1222 : 
; 1223 :         si.nMin = 0;

  00128	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _si$[ebp+8], 0

; 1224 :         si.nMax = nSectionCount - 1;

  0012f	8b 4d f8	 mov	 ecx, DWORD PTR _nSectionCount$[ebp]
  00132	83 e9 01	 sub	 ecx, 1
  00135	89 4d e8	 mov	 DWORD PTR _si$[ebp+12], ecx

; 1225 :         si.nPage = m_nSectionDivisor;

  00138	c7 45 ec 04 00
	00 00		 mov	 DWORD PTR _si$[ebp+16], 4

; 1226 :         si.nPos = nSectionOffset;

  0013f	8b 55 d8	 mov	 edx, DWORD PTR _nSectionOffset$[ebp]
  00142	89 55 f0	 mov	 DWORD PTR _si$[ebp+20], edx
$L50676:

; 1227 :     }
; 1228 : 
; 1229 :     SetScrollInfo(m_hWnd, SB_HORZ, &si, TRUE);

  00145	6a 01		 push	 1
  00147	8d 45 dc	 lea	 eax, DWORD PTR _si$[ebp]
  0014a	50		 push	 eax
  0014b	6a 00		 push	 0
  0014d	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00153	52		 push	 edx
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollInfo@16

; 1230 : }

  0015a	5f		 pop	 edi
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
?SetupOffsetScrollbar@CWaveformControl@@MAEXXZ ENDP	; CWaveformControl::SetupOffsetScrollbar
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?SetupScaleScrollbar@CWaveformControl@@MAEXXZ
_TEXT	SEGMENT
_this$ = -32
_si$ = -28
?SetupScaleScrollbar@CWaveformControl@@MAEXXZ PROC NEAR	; CWaveformControl::SetupScaleScrollbar, COMDAT
; _this$ = ecx

; 1256 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	57		 push	 edi
  00007	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1257 :     SCROLLINFO              si  = { 0 };

  0000a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _si$[ebp], 0
  00011	b9 06 00 00 00	 mov	 ecx, 6
  00016	33 c0		 xor	 eax, eax
  00018	8d 7d e8	 lea	 edi, DWORD PTR _si$[ebp+4]
  0001b	f3 ab		 rep stosd

; 1258 : 
; 1259 :     si.cbSize = sizeof(si);

  0001d	c7 45 e4 1c 00
	00 00		 mov	 DWORD PTR _si$[ebp], 28	; 0000001cH

; 1260 :     si.fMask = SIF_PAGE | SIF_POS | SIF_RANGE;

  00024	c7 45 e8 07 00
	00 00		 mov	 DWORD PTR _si$[ebp+4], 7

; 1261 :     si.nMin = 0;

  0002b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _si$[ebp+8], 0

; 1262 :     si.nMax = 15;

  00032	c7 45 f0 0f 00
	00 00		 mov	 DWORD PTR _si$[ebp+12], 15 ; 0000000fH

; 1263 :     si.nPage = 4;

  00039	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR _si$[ebp+16], 4

; 1264 :     
; 1265 :     for(si.nPos = 0; si.nPos < 31; si.nPos++)

  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _si$[ebp+20], 0
  00047	eb 09		 jmp	 SHORT $L50688
$L50689:
  00049	8b 45 f8	 mov	 eax, DWORD PTR _si$[ebp+20]
  0004c	83 c0 01	 add	 eax, 1
  0004f	89 45 f8	 mov	 DWORD PTR _si$[ebp+20], eax
$L50688:
  00052	83 7d f8 1f	 cmp	 DWORD PTR _si$[ebp+20], 31 ; 0000001fH
  00056	7d 1d		 jge	 SHORT $L50690

; 1266 :     {
; 1267 :         if(m_nScale & (1UL << si.nPos))

  00058	ba 01 00 00 00	 mov	 edx, 1
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _si$[ebp+20]
  00060	d3 e2		 shl	 edx, cl
  00062	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  0006b	23 ca		 and	 ecx, edx
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 02		 je	 SHORT $L50691

; 1268 :         {
; 1269 :             break;

  00071	eb 02		 jmp	 SHORT $L50690
$L50691:

; 1270 :         }
; 1271 :     }

  00073	eb d4		 jmp	 SHORT $L50689
$L50690:

; 1272 : 
; 1273 :     SetScrollInfo(m_hWnd, SB_VERT, &si, TRUE);

  00075	6a 01		 push	 1
  00077	8d 55 e4	 lea	 edx, DWORD PTR _si$[ebp]
  0007a	52		 push	 edx
  0007b	6a 01		 push	 1
  0007d	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00083	51		 push	 ecx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetScrollInfo@16

; 1274 : }

  0008a	5f		 pop	 edi
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
?SetupScaleScrollbar@CWaveformControl@@MAEXXZ ENDP	; CWaveformControl::SetupScaleScrollbar
_TEXT	ENDS
PUBLIC	?OnCreate@CWindow@@UAEHPAXPAJ@Z			; CWindow::OnCreate
; Function compile flags: /Odt
;	COMDAT ?OnCreate@CWaveformControl@@UAEHPAXPAJ@Z
_TEXT	SEGMENT
_pvContext$ = 8
_plResult$ = 12
_this$ = -4
?OnCreate@CWaveformControl@@UAEHPAXPAJ@Z PROC NEAR	; CWaveformControl::OnCreate, COMDAT
; _this$ = ecx

; 1302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1303 :     if(CWindow::OnCreate(pvContext, plResult))

  00007	8b 45 0c	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pvContext$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?OnCreate@CWindow@@UAEHPAXPAJ@Z ; CWindow::OnCreate
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $L50697

; 1304 :     {
; 1305 :         return TRUE;

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	eb 44		 jmp	 SHORT $L50696
$L50697:

; 1306 :     }
; 1307 :     
; 1308 :     //
; 1309 :     // Initialize the renderer
; 1310 :     //
; 1311 : 
; 1312 :     if(!CWaveformRenderer::Initialize(m_hWnd))

  00022	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00025	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 38	 add	 ecx, 56			; 00000038H
  0002f	e8 00 00 00 00	 call	 ?Initialize@CWaveformRenderer@@UAEHPAUHWND__@@@Z ; CWaveformRenderer::Initialize
  00034	85 c0		 test	 eax, eax
  00036	75 10		 jne	 SHORT $L50698

; 1313 :     {
; 1314 :         *plResult = FALSE;

  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _plResult$[ebp]
  0003b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1315 :         return TRUE;

  00041	b8 01 00 00 00	 mov	 eax, 1
  00046	eb 1e		 jmp	 SHORT $L50696
$L50698:

; 1316 :     }
; 1317 : 
; 1318 :     //
; 1319 :     // Setup the scrollbars
; 1320 :     //
; 1321 : 
; 1322 :     SetupScaleScrollbar();

  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 02		 mov	 eax, DWORD PTR [edx]
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	ff 90 a8 00 00
	00		 call	 DWORD PTR [eax+168]

; 1323 :     SetupOffsetScrollbar();

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]

; 1324 : 
; 1325 :     return FALSE;

  00064	33 c0		 xor	 eax, eax
$L50696:

; 1326 : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?OnCreate@CWaveformControl@@UAEHPAXPAJ@Z ENDP		; CWaveformControl::OnCreate
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnCreate@CWindow@@UAEHPAXPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnCreate@CWindow@@UAEHPAXPAJ@Z PROC NEAR		; CWindow::OnCreate, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 241  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 242  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?OnCreate@CWindow@@UAEHPAXPAJ@Z ENDP			; CWindow::OnCreate
_TEXT	ENDS
PUBLIC	?OnSize@CWindow@@UAEHIIIPAJ@Z			; CWindow::OnSize
EXTRN	__imp__InvalidateRect@12:NEAR
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
;	COMDAT ?OnSize@CWaveformControl@@UAEHIIIPAJ@Z
_TEXT	SEGMENT
_nType$ = 8
_nWidth$ = 12
_nHeight$ = 16
_plResult$ = 20
_this$ = -20
_rcDisplay$ = -16
?OnSize@CWaveformControl@@UAEHIIIPAJ@Z PROC NEAR	; CWaveformControl::OnSize, COMDAT
; _this$ = ecx

; 1358 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1359 :     const RECT              rcDisplay   = { 0, 0, nWidth, nHeight };

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _rcDisplay$[ebp], 0
  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _rcDisplay$[ebp+4], 0
  00017	8b 45 0c	 mov	 eax, DWORD PTR _nWidth$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _rcDisplay$[ebp+8], eax
  0001d	8b 4d 10	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  00020	89 4d fc	 mov	 DWORD PTR _rcDisplay$[ebp+12], ecx

; 1360 :     
; 1361 :     if(CWindow::OnSize(nType, nWidth, nHeight, plResult))

  00023	8b 55 14	 mov	 edx, DWORD PTR _plResult$[ebp]
  00026	52		 push	 edx
  00027	8b 45 10	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 08	 mov	 edx, DWORD PTR _nType$[ebp]
  00032	52		 push	 edx
  00033	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?OnSize@CWindow@@UAEHIIIPAJ@Z ; CWindow::OnSize
  0003b	85 c0		 test	 eax, eax
  0003d	74 07		 je	 SHORT $L50707

; 1362 :     {
; 1363 :         return TRUE;

  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	eb 30		 jmp	 SHORT $L50705
$L50707:

; 1364 :     }
; 1365 :     
; 1366 :     //
; 1367 :     // Update the renderer
; 1368 :     //
; 1369 : 
; 1370 :     CWaveformRenderer::SetRect(&rcDisplay);

  00046	8d 45 f0	 lea	 eax, DWORD PTR _rcDisplay$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	83 c1 38	 add	 ecx, 56			; 00000038H
  00050	e8 00 00 00 00	 call	 ?SetRect@CWaveformRenderer@@UAEHPBUtagRECT@@@Z ; CWaveformRenderer::SetRect

; 1371 : 
; 1372 :     //
; 1373 :     // Update the offset scrollbar
; 1374 :     //
; 1375 : 
; 1376 :     SetupOffsetScrollbar();

  00055	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]

; 1377 : 
; 1378 :     //
; 1379 :     // Force a repaint
; 1380 :     //
; 1381 : 
; 1382 :     InvalidateRect(m_hWnd, NULL, FALSE);

  00063	6a 00		 push	 0
  00065	6a 00		 push	 0
  00067	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0006d	51		 push	 ecx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 1383 : 
; 1384 :     return FALSE;

  00074	33 c0		 xor	 eax, eax
$L50705:

; 1385 : }

  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 10 00	 ret	 16			; 00000010H
?OnSize@CWaveformControl@@UAEHIIIPAJ@Z ENDP		; CWaveformControl::OnSize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnSize@CWindow@@UAEHIIIPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnSize@CWindow@@UAEHIIIPAJ@Z PROC NEAR			; CWindow::OnSize, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 256  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 257  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnSize@CWindow@@UAEHIIIPAJ@Z ENDP			; CWindow::OnSize
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
_TEXT	ENDS
;	COMDAT ?OnEraseBackground@CWaveformControl@@UAEHPAUHDC__@@PAJ@Z
_TEXT	SEGMENT
_plResult$ = 12
_this$ = -4
?OnEraseBackground@CWaveformControl@@UAEHPAUHDC__@@PAJ@Z PROC NEAR ; CWaveformControl::OnEraseBackground, COMDAT
; _this$ = ecx

; 1413 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1414 :     if(!m_hdcDraw)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0000e	75 04		 jne	 SHORT $L50713

; 1415 :     {
; 1416 :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 0e		 jmp	 SHORT $L50712
$L50713:

; 1417 :     }
; 1418 :     
; 1419 :     *plResult = 0;

  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _plResult$[ebp]
  00017	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1420 : 
; 1421 :     return TRUE;

  0001d	b8 01 00 00 00	 mov	 eax, 1
$L50712:

; 1422 : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?OnEraseBackground@CWaveformControl@@UAEHPAUHDC__@@PAJ@Z ENDP ; CWaveformControl::OnEraseBackground
_TEXT	ENDS
EXTRN	__imp__BeginPaint@8:NEAR
EXTRN	__imp__EndPaint@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?OnPaint@CWaveformControl@@UAEHPAJ@Z
_TEXT	SEGMENT
_plResult$ = 8
_this$ = -68
_ps$ = -64
?OnPaint@CWaveformControl@@UAEHPAJ@Z PROC NEAR		; CWaveformControl::OnPaint, COMDAT
; _this$ = ecx

; 1448 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 1449 :     PAINTSTRUCT             ps;
; 1450 : 
; 1451 :     if(!m_hdcDraw)

  00009	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00010	75 04		 jne	 SHORT $L50719

; 1452 :     {
; 1453 :         return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	eb 43		 jmp	 SHORT $L50717
$L50719:

; 1454 :     }
; 1455 :     
; 1456 :     //
; 1457 :     // Repaint the window
; 1458 :     //
; 1459 : 
; 1460 :     BeginPaint(m_hWnd, &ps);

  00016	8d 4d c0	 lea	 ecx, DWORD PTR _ps$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8

; 1461 : 
; 1462 :     CWaveformRenderer::Render(ps.hdc, &ps.rcPaint);

  00027	8d 4d c8	 lea	 ecx, DWORD PTR _ps$[ebp+8]
  0002a	51		 push	 ecx
  0002b	8b 55 c0	 mov	 edx, DWORD PTR _ps$[ebp]
  0002e	52		 push	 edx
  0002f	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 38	 add	 ecx, 56			; 00000038H
  00035	e8 00 00 00 00	 call	 ?Render@CWaveformRenderer@@UAEHPAUHDC__@@PBUtagRECT@@@Z ; CWaveformRenderer::Render

; 1463 : 
; 1464 :     EndPaint(m_hWnd, &ps);

  0003a	8d 45 c0	 lea	 eax, DWORD PTR _ps$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00044	52		 push	 edx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8

; 1465 :     
; 1466 :     *plResult = 0;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _plResult$[ebp]
  0004e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1467 : 
; 1468 :     return TRUE;

  00054	b8 01 00 00 00	 mov	 eax, 1
$L50717:

; 1469 : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?OnPaint@CWaveformControl@@UAEHPAJ@Z ENDP		; CWaveformControl::OnPaint
_TEXT	ENDS
PUBLIC	?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z	; CWindow::OnScroll
; Function compile flags: /Odt
;	COMDAT ?OnScroll@CWaveformControl@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT
_nScrollBarType$ = 8
_hWndScrollBar$ = 12
_nPosition$ = 16
_plResult$ = 20
_this$ = -4
?OnScroll@CWaveformControl@@UAEHIPAUHWND__@@HPAJ@Z PROC NEAR ; CWaveformControl::OnScroll, COMDAT
; _this$ = ecx

; 1501 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1502 :     if(CWindow::OnScroll(nScrollBarType, hWndScrollBar, nPosition, plResult))

  00007	8b 45 14	 mov	 eax, DWORD PTR _plResult$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _hWndScrollBar$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _nScrollBarType$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z ; CWindow::OnScroll
  0001f	85 c0		 test	 eax, eax
  00021	74 07		 je	 SHORT $L50727

; 1503 :     {
; 1504 :         return TRUE;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	eb 66		 jmp	 SHORT $L50726
$L50727:

; 1505 :     }
; 1506 :     
; 1507 :     //
; 1508 :     // If the vertical scrollbar changed, update the scale.  If it was the
; 1509 :     // horizontal, update the offset.
; 1510 :     //
; 1511 : 
; 1512 :     if(SB_VERT == nScrollBarType)

  0002a	83 7d 08 01	 cmp	 DWORD PTR _nScrollBarType$[ebp], 1
  0002e	75 2a		 jne	 SHORT $L50728

; 1513 :     {
; 1514 :         SetScale(1UL << nPosition);

  00030	ba 01 00 00 00	 mov	 edx, 1
  00035	8b 4d 10	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  00038	d3 e2		 shl	 edx, cl
  0003a	52		 push	 edx
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 38	 add	 ecx, 56			; 00000038H
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  00047	ff 52 18	 call	 DWORD PTR [edx+24]

; 1515 :         SetupOffsetScrollbar();

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	ff 92 a4 00 00
	00		 call	 DWORD PTR [edx+164]

; 1516 :     }
; 1517 :     else if(SB_HORZ == nScrollBarType)

  00058	eb 23		 jmp	 SHORT $L50729
$L50728:
  0005a	83 7d 08 00	 cmp	 DWORD PTR _nScrollBarType$[ebp], 0
  0005e	75 1d		 jne	 SHORT $L50730

; 1518 :     {
; 1519 :         SetOffset(nPosition * m_nSectionSize);

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _nPosition$[ebp]
  00066	0f af 88 a8 00
	00 00		 imul	 ecx, DWORD PTR [eax+168]
  0006d	51		 push	 ecx
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	83 c1 38	 add	 ecx, 56			; 00000038H
  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0007a	ff 50 14	 call	 DWORD PTR [eax+20]
$L50730:
$L50729:

; 1520 :     }
; 1521 :     
; 1522 :     //
; 1523 :     // Force a repaint
; 1524 :     //
; 1525 : 
; 1526 :     InvalidateRect(m_hWnd, NULL, FALSE);

  0007d	6a 00		 push	 0
  0007f	6a 00		 push	 0
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00087	52		 push	 edx
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 1527 : 
; 1528 :     return FALSE;

  0008e	33 c0		 xor	 eax, eax
$L50726:

; 1529 : }

  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 10 00	 ret	 16			; 00000010H
?OnScroll@CWaveformControl@@UAEHIPAUHWND__@@HPAJ@Z ENDP	; CWaveformControl::OnScroll
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\host\gui\base\wndwrap.h
_TEXT	ENDS
;	COMDAT ?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z
_TEXT	SEGMENT
_this$ = -4
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z PROC NEAR	; CWindow::OnScroll, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  :     return FALSE;

  00007	33 c0		 xor	 eax, eax

; 287  : }

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c2 10 00	 ret	 16			; 00000010H
?OnScroll@CWindow@@UAEHIPAUHWND__@@HPAJ@Z ENDP		; CWindow::OnScroll
_TEXT	ENDS
PUBLIC	??_C@_0BL@BGCE@lSample?5?$DO?$DN?5?9nHalfWaveRange?$AA@ ; `string'
PUBLIC	??_C@_0BJ@CEJP@lSample?5?$DM?5nHalfWaveRange?$AA@ ; `string'
PUBLIC	??_C@_06HHJP@y?5?$DO?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0BD@EKAI@y?5?$DM?5?$CIint?$CJm_nHeight?$AA@ ; `string'
EXTRN	__ftol:NEAR
EXTRN	__fltused:NEAR
EXTRN	__imp__MoveToEx@16:NEAR
EXTRN	__imp__LineTo@12:NEAR
;	COMDAT ??_C@_0BL@BGCE@lSample?5?$DO?$DN?5?9nHalfWaveRange?$AA@
; File c:\xbox\private\windows\directx\xact\host\gui\controls\waveform.cpp
CONST	SEGMENT
??_C@_0BL@BGCE@lSample?5?$DO?$DN?5?9nHalfWaveRange?$AA@ DB 'lSample >= -n'
	DB	'HalfWaveRange', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CEJP@lSample?5?$DM?5nHalfWaveRange?$AA@
CONST	SEGMENT
??_C@_0BJ@CEJP@lSample?5?$DM?5nHalfWaveRange?$AA@ DB 'lSample < nHalfWave'
	DB	'Range', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHJP@y?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_06HHJP@y?5?$DO?$DN?50?$AA@ DB 'y >= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EKAI@y?5?$DM?5?$CIint?$CJm_nHeight?$AA@
CONST	SEGMENT
??_C@_0BD@EKAI@y?5?$DM?5?$CIint?$CJm_nHeight?$AA@ DB 'y < (int)m_nHeight', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?RenderWaveform@CWaveformRenderer@@AAEXPBEIH@Z
_TEXT	SEGMENT
_pWaveData$ = 8
_nWaveRange$ = 12
_fSigned$ = 16
_this$ = -68
_nBaseY$ = -4
_nHalfWaveRange$ = -56
_flVerticalScale$ = -36
_nSampleIncrement$ = -8
_cbSample$ = -32
_nSampleOffset$ = -52
_cSamples$ = -28
_nPerPixelCount$ = -60
_lSample$ = -64
_rcUnused$ = -24
_x$ = -40
_y$ = -48
_i$ = -44
?RenderWaveform@CWaveformRenderer@@AAEXPBEIH@Z PROC NEAR ; CWaveformRenderer::RenderWaveform, COMDAT
; _this$ = ecx

; 743  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	56		 push	 esi
  00007	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 744  :     static const int        nBaseX              = 0;
; 745  :     const int               nBaseY              = m_nHeight / 2;

  0000a	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00010	99		 cdq
  00011	2b c2		 sub	 eax, edx
  00013	d1 f8		 sar	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _nBaseY$[ebp], eax

; 746  :     const int               nHalfWaveRange      = nWaveRange / 2;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _nWaveRange$[ebp]
  0001b	d1 e9		 shr	 ecx, 1
  0001d	89 4d c8	 mov	 DWORD PTR _nHalfWaveRange$[ebp], ecx

; 747  :     const float             flVerticalScale     = (float)m_nHeight / (float)nWaveRange;

  00020	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	db 42 20	 fild	 DWORD PTR [edx+32]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _nWaveRange$[ebp]
  00029	89 45 b4	 mov	 DWORD PTR -76+[ebp], eax
  0002c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR -76+[ebp+4], 0
  00033	da 75 b4	 fidiv	 DWORD PTR -76+[ebp]
  00036	d9 5d dc	 fstp	 DWORD PTR _flVerticalScale$[ebp]

; 748  :     const int               nSampleIncrement    = (m_nScale / m_nResolution) + 1;

  00039	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 75 bc	 mov	 esi, DWORD PTR _this$[ebp]
  0003f	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00042	33 d2		 xor	 edx, edx
  00044	f7 76 68	 div	 DWORD PTR [esi+104]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 f8	 mov	 DWORD PTR _nSampleIncrement$[ebp], eax

; 749  :     const int               cbSample            = sizeof(*pWaveData) * m_wfxFormat.nChannels;

  0004d	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	33 c0		 xor	 eax, eax
  00052	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  00056	89 45 e0	 mov	 DWORD PTR _cbSample$[ebp], eax

; 750  :     const int               nSampleOffset       = m_cbHorizOffset / cbSample;

  00059	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  0005f	33 d2		 xor	 edx, edx
  00061	f7 75 e0	 div	 DWORD PTR _cbSample$[ebp]
  00064	89 45 cc	 mov	 DWORD PTR _nSampleOffset$[ebp], eax

; 751  :     int                     cSamples            = m_cbWaveData / cbSample;

  00067	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0006d	33 d2		 xor	 edx, edx
  0006f	f7 75 e0	 div	 DWORD PTR _cbSample$[ebp]
  00072	89 45 e4	 mov	 DWORD PTR _cSamples$[ebp], eax

; 752  :     int                     nPerPixelCount      = 0;

  00075	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _nPerPixelCount$[ebp], 0

; 753  :     long                    lSample;
; 754  :     RECT                    rcUnused;
; 755  :     int                     x, y;
; 756  :     int                     i;
; 757  : 
; 758  :     if(!m_nWidth || !m_nHeight || !m_nScale)

  0007c	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00083	74 12		 je	 SHORT $L50751
  00085	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  0008c	74 09		 je	 SHORT $L50751
  0008e	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00091	83 7a 64 00	 cmp	 DWORD PTR [edx+100], 0
  00095	75 05		 jne	 SHORT $L50750
$L50751:

; 759  :     {
; 760  :         return;

  00097	e9 4b 02 00 00	 jmp	 $L50732
$L50750:

; 761  :     }
; 762  : 
; 763  :     //
; 764  :     // Reset the pen position to the 0,0 location
; 765  :     //
; 766  : 
; 767  :     x = nBaseX;

  0009c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 768  :     y = nBaseY;

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _nBaseY$[ebp]
  000a6	89 45 d0	 mov	 DWORD PTR _y$[ebp], eax

; 769  :     
; 770  :     MoveToEx(m_hdcDraw, x, y, NULL);

  000a9	6a 00		 push	 0
  000ab	8b 4d d0	 mov	 ecx, DWORD PTR _y$[ebp]
  000ae	51		 push	 ecx
  000af	8b 55 d8	 mov	 edx, DWORD PTR _x$[ebp]
  000b2	52		 push	 edx
  000b3	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000b9	51		 push	 ecx
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveToEx@16

; 771  : 
; 772  :     //
; 773  :     // Offset the buffer and sample count
; 774  :     //
; 775  : 
; 776  :     pWaveData += nSampleOffset * m_wfxFormat.nChannels;

  000c0	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  000c3	33 c0		 xor	 eax, eax
  000c5	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  000c9	8b 4d cc	 mov	 ecx, DWORD PTR _nSampleOffset$[ebp]
  000cc	0f af c8	 imul	 ecx, eax
  000cf	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  000d2	03 d1		 add	 edx, ecx
  000d4	89 55 08	 mov	 DWORD PTR _pWaveData$[ebp], edx

; 777  :     cSamples -= nSampleOffset;

  000d7	8b 45 e4	 mov	 eax, DWORD PTR _cSamples$[ebp]
  000da	2b 45 cc	 sub	 eax, DWORD PTR _nSampleOffset$[ebp]
  000dd	89 45 e4	 mov	 DWORD PTR _cSamples$[ebp], eax
$L50753:

; 778  : 
; 779  :     //
; 780  :     // Enter the drawing loop
; 781  :     //
; 782  : 
; 783  :     while((cSamples > 0) && (x < (int)m_nWidth))

  000e0	83 7d e4 00	 cmp	 DWORD PTR _cSamples$[ebp], 0
  000e4	0f 8e bb 01 00
	00		 jle	 $L50754
  000ea	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 55 d8	 mov	 edx, DWORD PTR _x$[ebp]
  000f0	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  000f3	0f 8d ac 01 00
	00		 jge	 $L50754

; 784  :     {
; 785  :         //
; 786  :         // Merge all channels into one averaged sample
; 787  :         //
; 788  : 
; 789  :         if(fSigned)

  000f9	83 7d 10 00	 cmp	 DWORD PTR _fSigned$[ebp], 0
  000fd	74 43		 je	 SHORT $L50756

; 790  :         {
; 791  :             for(i = 0, lSample = 0; i < m_wfxFormat.nChannels; i++)

  000ff	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00106	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _lSample$[ebp], 0
  0010d	eb 09		 jmp	 SHORT $L50757
$L50758:
  0010f	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  00112	83 c0 01	 add	 eax, 1
  00115	89 45 d4	 mov	 DWORD PTR _i$[ebp], eax
$L50757:
  00118	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	33 d2		 xor	 edx, edx
  0011d	66 8b 51 46	 mov	 dx, WORD PTR [ecx+70]
  00121	39 55 d4	 cmp	 DWORD PTR _i$[ebp], edx
  00124	7d 1a		 jge	 SHORT $L50759

; 792  :             {
; 793  :                 lSample += (LONG)*pWaveData++;

  00126	8b 45 08	 mov	 eax, DWORD PTR _pWaveData$[ebp]
  00129	33 c9		 xor	 ecx, ecx
  0012b	8a 08		 mov	 cl, BYTE PTR [eax]
  0012d	8b 55 c0	 mov	 edx, DWORD PTR _lSample$[ebp]
  00130	03 d1		 add	 edx, ecx
  00132	89 55 c0	 mov	 DWORD PTR _lSample$[ebp], edx
  00135	8b 45 08	 mov	 eax, DWORD PTR _pWaveData$[ebp]
  00138	83 c0 01	 add	 eax, 1
  0013b	89 45 08	 mov	 DWORD PTR _pWaveData$[ebp], eax

; 794  :             }

  0013e	eb cf		 jmp	 SHORT $L50758
$L50759:

; 795  :         }
; 796  :         else

  00140	eb 4a		 jmp	 SHORT $L50761
$L50756:

; 797  :         {
; 798  :             for(i = 0, lSample = 0; i < m_wfxFormat.nChannels; i++)

  00142	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00149	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _lSample$[ebp], 0
  00150	eb 09		 jmp	 SHORT $L50762
$L50763:
  00152	8b 4d d4	 mov	 ecx, DWORD PTR _i$[ebp]
  00155	83 c1 01	 add	 ecx, 1
  00158	89 4d d4	 mov	 DWORD PTR _i$[ebp], ecx
$L50762:
  0015b	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0015e	33 c0		 xor	 eax, eax
  00160	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  00164	39 45 d4	 cmp	 DWORD PTR _i$[ebp], eax
  00167	7d 23		 jge	 SHORT $L50764

; 799  :             {
; 800  :                 lSample += (long)*pWaveData++;

  00169	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveData$[ebp]
  0016c	33 d2		 xor	 edx, edx
  0016e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00170	8b 45 c0	 mov	 eax, DWORD PTR _lSample$[ebp]
  00173	03 c2		 add	 eax, edx
  00175	89 45 c0	 mov	 DWORD PTR _lSample$[ebp], eax
  00178	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveData$[ebp]
  0017b	83 c1 01	 add	 ecx, 1
  0017e	89 4d 08	 mov	 DWORD PTR _pWaveData$[ebp], ecx

; 801  :                 lSample -= nHalfWaveRange;

  00181	8b 55 c0	 mov	 edx, DWORD PTR _lSample$[ebp]
  00184	2b 55 c8	 sub	 edx, DWORD PTR _nHalfWaveRange$[ebp]
  00187	89 55 c0	 mov	 DWORD PTR _lSample$[ebp], edx

; 802  :             }

  0018a	eb c6		 jmp	 SHORT $L50763
$L50764:
$L50761:

; 803  :         }
; 804  : 
; 805  :         lSample /= m_wfxFormat.nChannels;

  0018c	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	33 c9		 xor	 ecx, ecx
  00191	66 8b 48 46	 mov	 cx, WORD PTR [eax+70]
  00195	8b 45 c0	 mov	 eax, DWORD PTR _lSample$[ebp]
  00198	99		 cdq
  00199	f7 f9		 idiv	 ecx
  0019b	89 45 c0	 mov	 DWORD PTR _lSample$[ebp], eax

; 806  :         
; 807  :         ASSERT(lSample >= -nHalfWaveRange);

  0019e	68 27 03 00 00	 push	 807			; 00000327H
  001a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  001a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@BGCE@lSample?5?$DO?$DN?5?9nHalfWaveRange?$AA@ ; `string'
  001ad	8b 55 c8	 mov	 edx, DWORD PTR _nHalfWaveRange$[ebp]
  001b0	f7 da		 neg	 edx
  001b2	33 c0		 xor	 eax, eax
  001b4	39 55 c0	 cmp	 DWORD PTR _lSample$[ebp], edx
  001b7	0f 9c c0	 setl	 al
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001c0	83 c4 10	 add	 esp, 16			; 00000010H

; 808  :         ASSERT(lSample < nHalfWaveRange);

  001c3	68 28 03 00 00	 push	 808			; 00000328H
  001c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  001cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CEJP@lSample?5?$DM?5nHalfWaveRange?$AA@ ; `string'
  001d2	8b 4d c0	 mov	 ecx, DWORD PTR _lSample$[ebp]
  001d5	33 d2		 xor	 edx, edx
  001d7	3b 4d c8	 cmp	 ecx, DWORD PTR _nHalfWaveRange$[ebp]
  001da	0f 9d c2	 setge	 dl
  001dd	52		 push	 edx
  001de	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001e3	83 c4 10	 add	 esp, 16			; 00000010H

; 809  : 
; 810  :         //
; 811  :         // Convert the sample's scale to our window height
; 812  :         //
; 813  : 
; 814  :         lSample = (long)((float)lSample * flVerticalScale);

  001e6	db 45 c0	 fild	 DWORD PTR _lSample$[ebp]
  001e9	d8 4d dc	 fmul	 DWORD PTR _flVerticalScale$[ebp]
  001ec	e8 00 00 00 00	 call	 __ftol
  001f1	89 45 c0	 mov	 DWORD PTR _lSample$[ebp], eax

; 815  : 
; 816  :         //
; 817  :         // Convert the sample value to a positive
; 818  :         //
; 819  : 
; 820  :         y = nBaseY + lSample;

  001f4	8b 45 fc	 mov	 eax, DWORD PTR _nBaseY$[ebp]
  001f7	03 45 c0	 add	 eax, DWORD PTR _lSample$[ebp]
  001fa	89 45 d0	 mov	 DWORD PTR _y$[ebp], eax

; 821  : 
; 822  :         //
; 823  :         // Draw a line from the current position to the sample's position on
; 824  :         // the graph
; 825  :         //
; 826  : 
; 827  :         ASSERT(y >= 0);

  001fd	68 3b 03 00 00	 push	 827			; 0000033bH
  00202	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00207	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06HHJP@y?5?$DO?$DN?50?$AA@ ; `string'
  0020c	33 c9		 xor	 ecx, ecx
  0020e	83 7d d0 00	 cmp	 DWORD PTR _y$[ebp], 0
  00212	0f 9c c1	 setl	 cl
  00215	51		 push	 ecx
  00216	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0021b	83 c4 10	 add	 esp, 16			; 00000010H

; 828  :         ASSERT(y < (int)m_nHeight);

  0021e	68 3c 03 00 00	 push	 828			; 0000033cH
  00223	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00228	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@EKAI@y?5?$DM?5?$CIint?$CJm_nHeight?$AA@ ; `string'
  0022d	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00230	8b 45 d0	 mov	 eax, DWORD PTR _y$[ebp]
  00233	33 c9		 xor	 ecx, ecx
  00235	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  00238	0f 9d c1	 setge	 cl
  0023b	51		 push	 ecx
  0023c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00241	83 c4 10	 add	 esp, 16			; 00000010H

; 829  :         
; 830  :         LineTo(m_hdcDraw, x, y);

  00244	8b 55 d0	 mov	 edx, DWORD PTR _y$[ebp]
  00247	52		 push	 edx
  00248	8b 45 d8	 mov	 eax, DWORD PTR _x$[ebp]
  0024b	50		 push	 eax
  0024c	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00252	52		 push	 edx
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LineTo@12

; 831  : 
; 832  :         //
; 833  :         // Skip ahead a few samples based on the resolution.  This is here to
; 834  :         // prevent us from processing every single sample when the scaling 
; 835  :         // factor is high.
; 836  :         //
; 837  : 
; 838  :         cSamples -= nSampleIncrement;

  00259	8b 45 e4	 mov	 eax, DWORD PTR _cSamples$[ebp]
  0025c	2b 45 f8	 sub	 eax, DWORD PTR _nSampleIncrement$[ebp]
  0025f	89 45 e4	 mov	 DWORD PTR _cSamples$[ebp], eax

; 839  :         pWaveData += (nSampleIncrement - 1) * m_wfxFormat.nChannels;

  00262	8b 4d f8	 mov	 ecx, DWORD PTR _nSampleIncrement$[ebp]
  00265	83 e9 01	 sub	 ecx, 1
  00268	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0026b	33 c0		 xor	 eax, eax
  0026d	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  00271	0f af c8	 imul	 ecx, eax
  00274	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  00277	03 d1		 add	 edx, ecx
  00279	89 55 08	 mov	 DWORD PTR _pWaveData$[ebp], edx

; 840  : 
; 841  :         //
; 842  :         // Increment the per-pixel sample counter.  When this number exceeds
; 843  :         // the scaling factor, it's time to move the x-coordinate.
; 844  :         //
; 845  : 
; 846  :         nPerPixelCount += nSampleIncrement;

  0027c	8b 45 c4	 mov	 eax, DWORD PTR _nPerPixelCount$[ebp]
  0027f	03 45 f8	 add	 eax, DWORD PTR _nSampleIncrement$[ebp]
  00282	89 45 c4	 mov	 DWORD PTR _nPerPixelCount$[ebp], eax

; 847  : 
; 848  :         if(nPerPixelCount >= (int)m_nScale)

  00285	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00288	8b 55 c4	 mov	 edx, DWORD PTR _nPerPixelCount$[ebp]
  0028b	3b 51 64	 cmp	 edx, DWORD PTR [ecx+100]
  0028e	7c 10		 jl	 SHORT $L50774

; 849  :         {
; 850  :             x++;

  00290	8b 45 d8	 mov	 eax, DWORD PTR _x$[ebp]
  00293	83 c0 01	 add	 eax, 1
  00296	89 45 d8	 mov	 DWORD PTR _x$[ebp], eax

; 851  : 
; 852  :             nPerPixelCount = 0;

  00299	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _nPerPixelCount$[ebp], 0
$L50774:

; 853  :         }
; 854  :     }

  002a0	e9 3b fe ff ff	 jmp	 $L50753
$L50754:

; 855  : 
; 856  :     //
; 857  :     // Paint the remaining unused region
; 858  :     //
; 859  : 
; 860  :     if(x < (int)m_nWidth)

  002a5	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a8	8b 55 d8	 mov	 edx, DWORD PTR _x$[ebp]
  002ab	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  002ae	7d 37		 jge	 SHORT $L50776

; 861  :     {
; 862  :         rcUnused.left = x;

  002b0	8b 45 d8	 mov	 eax, DWORD PTR _x$[ebp]
  002b3	89 45 e8	 mov	 DWORD PTR _rcUnused$[ebp], eax

; 863  :         rcUnused.top = 0;

  002b6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rcUnused$[ebp+4], 0

; 864  :         rcUnused.right = m_nWidth;

  002bd	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c0	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  002c3	89 55 f0	 mov	 DWORD PTR _rcUnused$[ebp+8], edx

; 865  :         rcUnused.bottom = m_nHeight;

  002c6	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  002c9	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002cc	89 4d f4	 mov	 DWORD PTR _rcUnused$[ebp+12], ecx

; 866  :     
; 867  :         FillRect(m_hdcDraw, &rcUnused, m_hbrInactiveBackground);

  002cf	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  002d2	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  002d5	50		 push	 eax
  002d6	8d 4d e8	 lea	 ecx, DWORD PTR _rcUnused$[ebp]
  002d9	51		 push	 ecx
  002da	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  002dd	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002e0	50		 push	 eax
  002e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12
$L50776:
$L50732:

; 868  :     }
; 869  : }

  002e7	5e		 pop	 esi
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c2 0c 00	 ret	 12			; 0000000cH
?RenderWaveform@CWaveformRenderer@@AAEXPBEIH@Z ENDP	; CWaveformRenderer::RenderWaveform
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?RenderWaveform@CWaveformRenderer@@AAEXPBFIH@Z
_TEXT	SEGMENT
_pWaveData$ = 8
_nWaveRange$ = 12
_fSigned$ = 16
_this$ = -68
_nBaseY$ = -4
_nHalfWaveRange$ = -56
_flVerticalScale$ = -36
_nSampleIncrement$ = -8
_cbSample$ = -32
_nSampleOffset$ = -52
_cSamples$ = -28
_nPerPixelCount$ = -60
_lSample$ = -64
_rcUnused$ = -24
_x$ = -40
_y$ = -48
_i$ = -44
?RenderWaveform@CWaveformRenderer@@AAEXPBFIH@Z PROC NEAR ; CWaveformRenderer::RenderWaveform, COMDAT
; _this$ = ecx

; 743  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	56		 push	 esi
  00007	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx

; 744  :     static const int        nBaseX              = 0;
; 745  :     const int               nBaseY              = m_nHeight / 2;

  0000a	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00010	99		 cdq
  00011	2b c2		 sub	 eax, edx
  00013	d1 f8		 sar	 eax, 1
  00015	89 45 fc	 mov	 DWORD PTR _nBaseY$[ebp], eax

; 746  :     const int               nHalfWaveRange      = nWaveRange / 2;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _nWaveRange$[ebp]
  0001b	d1 e9		 shr	 ecx, 1
  0001d	89 4d c8	 mov	 DWORD PTR _nHalfWaveRange$[ebp], ecx

; 747  :     const float             flVerticalScale     = (float)m_nHeight / (float)nWaveRange;

  00020	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	db 42 20	 fild	 DWORD PTR [edx+32]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _nWaveRange$[ebp]
  00029	89 45 b4	 mov	 DWORD PTR -76+[ebp], eax
  0002c	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR -76+[ebp+4], 0
  00033	da 75 b4	 fidiv	 DWORD PTR -76+[ebp]
  00036	d9 5d dc	 fstp	 DWORD PTR _flVerticalScale$[ebp]

; 748  :     const int               nSampleIncrement    = (m_nScale / m_nResolution) + 1;

  00039	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 75 bc	 mov	 esi, DWORD PTR _this$[ebp]
  0003f	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00042	33 d2		 xor	 edx, edx
  00044	f7 76 68	 div	 DWORD PTR [esi+104]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 f8	 mov	 DWORD PTR _nSampleIncrement$[ebp], eax

; 749  :     const int               cbSample            = sizeof(*pWaveData) * m_wfxFormat.nChannels;

  0004d	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	33 c0		 xor	 eax, eax
  00052	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  00056	d1 e0		 shl	 eax, 1
  00058	89 45 e0	 mov	 DWORD PTR _cbSample$[ebp], eax

; 750  :     const int               nSampleOffset       = m_cbHorizOffset / cbSample;

  0005b	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00061	33 d2		 xor	 edx, edx
  00063	f7 75 e0	 div	 DWORD PTR _cbSample$[ebp]
  00066	89 45 cc	 mov	 DWORD PTR _nSampleOffset$[ebp], eax

; 751  :     int                     cSamples            = m_cbWaveData / cbSample;

  00069	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  0006f	33 d2		 xor	 edx, edx
  00071	f7 75 e0	 div	 DWORD PTR _cbSample$[ebp]
  00074	89 45 e4	 mov	 DWORD PTR _cSamples$[ebp], eax

; 752  :     int                     nPerPixelCount      = 0;

  00077	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _nPerPixelCount$[ebp], 0

; 753  :     long                    lSample;
; 754  :     RECT                    rcUnused;
; 755  :     int                     x, y;
; 756  :     int                     i;
; 757  : 
; 758  :     if(!m_nWidth || !m_nHeight || !m_nScale)

  0007e	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00085	74 12		 je	 SHORT $L50797
  00087	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  0008e	74 09		 je	 SHORT $L50797
  00090	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00093	83 7a 64 00	 cmp	 DWORD PTR [edx+100], 0
  00097	75 05		 jne	 SHORT $L50796
$L50797:

; 759  :     {
; 760  :         return;

  00099	e9 4d 02 00 00	 jmp	 $L50778
$L50796:

; 761  :     }
; 762  : 
; 763  :     //
; 764  :     // Reset the pen position to the 0,0 location
; 765  :     //
; 766  : 
; 767  :     x = nBaseX;

  0009e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0

; 768  :     y = nBaseY;

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _nBaseY$[ebp]
  000a8	89 45 d0	 mov	 DWORD PTR _y$[ebp], eax

; 769  :     
; 770  :     MoveToEx(m_hdcDraw, x, y, NULL);

  000ab	6a 00		 push	 0
  000ad	8b 4d d0	 mov	 ecx, DWORD PTR _y$[ebp]
  000b0	51		 push	 ecx
  000b1	8b 55 d8	 mov	 edx, DWORD PTR _x$[ebp]
  000b4	52		 push	 edx
  000b5	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000bb	51		 push	 ecx
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MoveToEx@16

; 771  : 
; 772  :     //
; 773  :     // Offset the buffer and sample count
; 774  :     //
; 775  : 
; 776  :     pWaveData += nSampleOffset * m_wfxFormat.nChannels;

  000c2	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	33 c0		 xor	 eax, eax
  000c7	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  000cb	8b 4d cc	 mov	 ecx, DWORD PTR _nSampleOffset$[ebp]
  000ce	0f af c8	 imul	 ecx, eax
  000d1	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  000d4	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  000d7	89 45 08	 mov	 DWORD PTR _pWaveData$[ebp], eax

; 777  :     cSamples -= nSampleOffset;

  000da	8b 4d e4	 mov	 ecx, DWORD PTR _cSamples$[ebp]
  000dd	2b 4d cc	 sub	 ecx, DWORD PTR _nSampleOffset$[ebp]
  000e0	89 4d e4	 mov	 DWORD PTR _cSamples$[ebp], ecx
$L50799:

; 778  : 
; 779  :     //
; 780  :     // Enter the drawing loop
; 781  :     //
; 782  : 
; 783  :     while((cSamples > 0) && (x < (int)m_nWidth))

  000e3	83 7d e4 00	 cmp	 DWORD PTR _cSamples$[ebp], 0
  000e7	0f 8e bc 01 00
	00		 jle	 $L50800
  000ed	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  000f0	8b 45 d8	 mov	 eax, DWORD PTR _x$[ebp]
  000f3	3b 42 1c	 cmp	 eax, DWORD PTR [edx+28]
  000f6	0f 8d ad 01 00
	00		 jge	 $L50800

; 784  :     {
; 785  :         //
; 786  :         // Merge all channels into one averaged sample
; 787  :         //
; 788  : 
; 789  :         if(fSigned)

  000fc	83 7d 10 00	 cmp	 DWORD PTR _fSigned$[ebp], 0
  00100	74 42		 je	 SHORT $L50802

; 790  :         {
; 791  :             for(i = 0, lSample = 0; i < m_wfxFormat.nChannels; i++)

  00102	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00109	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _lSample$[ebp], 0
  00110	eb 09		 jmp	 SHORT $L50803
$L50804:
  00112	8b 4d d4	 mov	 ecx, DWORD PTR _i$[ebp]
  00115	83 c1 01	 add	 ecx, 1
  00118	89 4d d4	 mov	 DWORD PTR _i$[ebp], ecx
$L50803:
  0011b	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	33 c0		 xor	 eax, eax
  00120	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  00124	39 45 d4	 cmp	 DWORD PTR _i$[ebp], eax
  00127	7d 19		 jge	 SHORT $L50805

; 792  :             {
; 793  :                 lSample += (LONG)*pWaveData++;

  00129	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveData$[ebp]
  0012c	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  0012f	8b 45 c0	 mov	 eax, DWORD PTR _lSample$[ebp]
  00132	03 c2		 add	 eax, edx
  00134	89 45 c0	 mov	 DWORD PTR _lSample$[ebp], eax
  00137	8b 4d 08	 mov	 ecx, DWORD PTR _pWaveData$[ebp]
  0013a	83 c1 02	 add	 ecx, 2
  0013d	89 4d 08	 mov	 DWORD PTR _pWaveData$[ebp], ecx

; 794  :             }

  00140	eb d0		 jmp	 SHORT $L50804
$L50805:

; 795  :         }
; 796  :         else

  00142	eb 49		 jmp	 SHORT $L50807
$L50802:

; 797  :         {
; 798  :             for(i = 0, lSample = 0; i < m_wfxFormat.nChannels; i++)

  00144	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0014b	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _lSample$[ebp], 0
  00152	eb 09		 jmp	 SHORT $L50808
$L50809:
  00154	8b 55 d4	 mov	 edx, DWORD PTR _i$[ebp]
  00157	83 c2 01	 add	 edx, 1
  0015a	89 55 d4	 mov	 DWORD PTR _i$[ebp], edx
$L50808:
  0015d	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00160	33 c9		 xor	 ecx, ecx
  00162	66 8b 48 46	 mov	 cx, WORD PTR [eax+70]
  00166	39 4d d4	 cmp	 DWORD PTR _i$[ebp], ecx
  00169	7d 22		 jge	 SHORT $L50810

; 799  :             {
; 800  :                 lSample += (long)*pWaveData++;

  0016b	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  0016e	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00171	8b 4d c0	 mov	 ecx, DWORD PTR _lSample$[ebp]
  00174	03 c8		 add	 ecx, eax
  00176	89 4d c0	 mov	 DWORD PTR _lSample$[ebp], ecx
  00179	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  0017c	83 c2 02	 add	 edx, 2
  0017f	89 55 08	 mov	 DWORD PTR _pWaveData$[ebp], edx

; 801  :                 lSample -= nHalfWaveRange;

  00182	8b 45 c0	 mov	 eax, DWORD PTR _lSample$[ebp]
  00185	2b 45 c8	 sub	 eax, DWORD PTR _nHalfWaveRange$[ebp]
  00188	89 45 c0	 mov	 DWORD PTR _lSample$[ebp], eax

; 802  :             }

  0018b	eb c7		 jmp	 SHORT $L50809
$L50810:
$L50807:

; 803  :         }
; 804  : 
; 805  :         lSample /= m_wfxFormat.nChannels;

  0018d	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00190	33 d2		 xor	 edx, edx
  00192	66 8b 51 46	 mov	 dx, WORD PTR [ecx+70]
  00196	8b ca		 mov	 ecx, edx
  00198	8b 45 c0	 mov	 eax, DWORD PTR _lSample$[ebp]
  0019b	99		 cdq
  0019c	f7 f9		 idiv	 ecx
  0019e	89 45 c0	 mov	 DWORD PTR _lSample$[ebp], eax

; 806  :         
; 807  :         ASSERT(lSample >= -nHalfWaveRange);

  001a1	68 27 03 00 00	 push	 807			; 00000327H
  001a6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  001ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@BGCE@lSample?5?$DO?$DN?5?9nHalfWaveRange?$AA@ ; `string'
  001b0	8b 55 c8	 mov	 edx, DWORD PTR _nHalfWaveRange$[ebp]
  001b3	f7 da		 neg	 edx
  001b5	33 c0		 xor	 eax, eax
  001b7	39 55 c0	 cmp	 DWORD PTR _lSample$[ebp], edx
  001ba	0f 9c c0	 setl	 al
  001bd	50		 push	 eax
  001be	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001c3	83 c4 10	 add	 esp, 16			; 00000010H

; 808  :         ASSERT(lSample < nHalfWaveRange);

  001c6	68 28 03 00 00	 push	 808			; 00000328H
  001cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  001d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CEJP@lSample?5?$DM?5nHalfWaveRange?$AA@ ; `string'
  001d5	8b 4d c0	 mov	 ecx, DWORD PTR _lSample$[ebp]
  001d8	33 d2		 xor	 edx, edx
  001da	3b 4d c8	 cmp	 ecx, DWORD PTR _nHalfWaveRange$[ebp]
  001dd	0f 9d c2	 setge	 dl
  001e0	52		 push	 edx
  001e1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  001e6	83 c4 10	 add	 esp, 16			; 00000010H

; 809  : 
; 810  :         //
; 811  :         // Convert the sample's scale to our window height
; 812  :         //
; 813  : 
; 814  :         lSample = (long)((float)lSample * flVerticalScale);

  001e9	db 45 c0	 fild	 DWORD PTR _lSample$[ebp]
  001ec	d8 4d dc	 fmul	 DWORD PTR _flVerticalScale$[ebp]
  001ef	e8 00 00 00 00	 call	 __ftol
  001f4	89 45 c0	 mov	 DWORD PTR _lSample$[ebp], eax

; 815  : 
; 816  :         //
; 817  :         // Convert the sample value to a positive
; 818  :         //
; 819  : 
; 820  :         y = nBaseY + lSample;

  001f7	8b 45 fc	 mov	 eax, DWORD PTR _nBaseY$[ebp]
  001fa	03 45 c0	 add	 eax, DWORD PTR _lSample$[ebp]
  001fd	89 45 d0	 mov	 DWORD PTR _y$[ebp], eax

; 821  : 
; 822  :         //
; 823  :         // Draw a line from the current position to the sample's position on
; 824  :         // the graph
; 825  :         //
; 826  : 
; 827  :         ASSERT(y >= 0);

  00200	68 3b 03 00 00	 push	 827			; 0000033bH
  00205	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0020a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06HHJP@y?5?$DO?$DN?50?$AA@ ; `string'
  0020f	33 c9		 xor	 ecx, ecx
  00211	83 7d d0 00	 cmp	 DWORD PTR _y$[ebp], 0
  00215	0f 9c c1	 setl	 cl
  00218	51		 push	 ecx
  00219	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0021e	83 c4 10	 add	 esp, 16			; 00000010H

; 828  :         ASSERT(y < (int)m_nHeight);

  00221	68 3c 03 00 00	 push	 828			; 0000033cH
  00226	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@JPMC@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0022b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@EKAI@y?5?$DM?5?$CIint?$CJm_nHeight?$AA@ ; `string'
  00230	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  00233	8b 45 d0	 mov	 eax, DWORD PTR _y$[ebp]
  00236	33 c9		 xor	 ecx, ecx
  00238	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  0023b	0f 9d c1	 setge	 cl
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00244	83 c4 10	 add	 esp, 16			; 00000010H

; 829  :         
; 830  :         LineTo(m_hdcDraw, x, y);

  00247	8b 55 d0	 mov	 edx, DWORD PTR _y$[ebp]
  0024a	52		 push	 edx
  0024b	8b 45 d8	 mov	 eax, DWORD PTR _x$[ebp]
  0024e	50		 push	 eax
  0024f	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  00252	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00255	52		 push	 edx
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LineTo@12

; 831  : 
; 832  :         //
; 833  :         // Skip ahead a few samples based on the resolution.  This is here to
; 834  :         // prevent us from processing every single sample when the scaling 
; 835  :         // factor is high.
; 836  :         //
; 837  : 
; 838  :         cSamples -= nSampleIncrement;

  0025c	8b 45 e4	 mov	 eax, DWORD PTR _cSamples$[ebp]
  0025f	2b 45 f8	 sub	 eax, DWORD PTR _nSampleIncrement$[ebp]
  00262	89 45 e4	 mov	 DWORD PTR _cSamples$[ebp], eax

; 839  :         pWaveData += (nSampleIncrement - 1) * m_wfxFormat.nChannels;

  00265	8b 4d f8	 mov	 ecx, DWORD PTR _nSampleIncrement$[ebp]
  00268	83 e9 01	 sub	 ecx, 1
  0026b	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0026e	33 c0		 xor	 eax, eax
  00270	66 8b 42 46	 mov	 ax, WORD PTR [edx+70]
  00274	0f af c8	 imul	 ecx, eax
  00277	8b 55 08	 mov	 edx, DWORD PTR _pWaveData$[ebp]
  0027a	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0027d	89 45 08	 mov	 DWORD PTR _pWaveData$[ebp], eax

; 840  : 
; 841  :         //
; 842  :         // Increment the per-pixel sample counter.  When this number exceeds
; 843  :         // the scaling factor, it's time to move the x-coordinate.
; 844  :         //
; 845  : 
; 846  :         nPerPixelCount += nSampleIncrement;

  00280	8b 4d c4	 mov	 ecx, DWORD PTR _nPerPixelCount$[ebp]
  00283	03 4d f8	 add	 ecx, DWORD PTR _nSampleIncrement$[ebp]
  00286	89 4d c4	 mov	 DWORD PTR _nPerPixelCount$[ebp], ecx

; 847  : 
; 848  :         if(nPerPixelCount >= (int)m_nScale)

  00289	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  0028c	8b 45 c4	 mov	 eax, DWORD PTR _nPerPixelCount$[ebp]
  0028f	3b 42 64	 cmp	 eax, DWORD PTR [edx+100]
  00292	7c 10		 jl	 SHORT $L50816

; 849  :         {
; 850  :             x++;

  00294	8b 4d d8	 mov	 ecx, DWORD PTR _x$[ebp]
  00297	83 c1 01	 add	 ecx, 1
  0029a	89 4d d8	 mov	 DWORD PTR _x$[ebp], ecx

; 851  : 
; 852  :             nPerPixelCount = 0;

  0029d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _nPerPixelCount$[ebp], 0
$L50816:

; 853  :         }
; 854  :     }

  002a4	e9 3a fe ff ff	 jmp	 $L50799
$L50800:

; 855  : 
; 856  :     //
; 857  :     // Paint the remaining unused region
; 858  :     //
; 859  : 
; 860  :     if(x < (int)m_nWidth)

  002a9	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  002ac	8b 45 d8	 mov	 eax, DWORD PTR _x$[ebp]
  002af	3b 42 1c	 cmp	 eax, DWORD PTR [edx+28]
  002b2	7d 37		 jge	 SHORT $L50818

; 861  :     {
; 862  :         rcUnused.left = x;

  002b4	8b 4d d8	 mov	 ecx, DWORD PTR _x$[ebp]
  002b7	89 4d e8	 mov	 DWORD PTR _rcUnused$[ebp], ecx

; 863  :         rcUnused.top = 0;

  002ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rcUnused$[ebp+4], 0

; 864  :         rcUnused.right = m_nWidth;

  002c1	8b 55 bc	 mov	 edx, DWORD PTR _this$[ebp]
  002c4	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002c7	89 45 f0	 mov	 DWORD PTR _rcUnused$[ebp+8], eax

; 865  :         rcUnused.bottom = m_nHeight;

  002ca	8b 4d bc	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  002d0	89 55 f4	 mov	 DWORD PTR _rcUnused$[ebp+12], edx

; 866  :     
; 867  :         FillRect(m_hdcDraw, &rcUnused, m_hbrInactiveBackground);

  002d3	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  002d6	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  002d9	51		 push	 ecx
  002da	8d 55 e8	 lea	 edx, DWORD PTR _rcUnused$[ebp]
  002dd	52		 push	 edx
  002de	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  002e1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002e4	51		 push	 ecx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FillRect@12
$L50818:
$L50778:

; 868  :     }
; 869  : }

  002eb	5e		 pop	 esi
  002ec	8b e5		 mov	 esp, ebp
  002ee	5d		 pop	 ebp
  002ef	c2 0c 00	 ret	 12			; 0000000cH
?RenderWaveform@CWaveformRenderer@@AAEXPBFIH@Z ENDP	; CWaveformRenderer::RenderWaveform
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_ECWaveformControl@@WDA@AEPAXI@Z
_TEXT	SEGMENT
??_ECWaveformControl@@WDA@AEPAXI@Z PROC NEAR		; CWaveformControl::`vector deleting destructor', COMDAT
  00000	83 e9 30	 sub	 ecx, 48			; 00000030H
  00003	e9 00 00 00 00	 jmp	 ??_ECWaveformControl@@UAEPAXI@Z ; CWaveformControl::`vector deleting destructor'
??_ECWaveformControl@@WDA@AEPAXI@Z ENDP			; CWaveformControl::`vector deleting destructor'
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddRef@CWaveformControl@@WDA@AGKXZ
_TEXT	SEGMENT
?AddRef@CWaveformControl@@WDA@AGKXZ PROC NEAR		; CWaveformControl::AddRef, COMDAT
  00000	83 6c 24 04 30	 sub	 DWORD PTR [esp+4], 48	; 00000030H
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CWaveformControl@@UAGKXZ ; CWaveformControl::AddRef
?AddRef@CWaveformControl@@WDA@AGKXZ ENDP		; CWaveformControl::AddRef
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Release@CWaveformControl@@WDA@AGKXZ
_TEXT	SEGMENT
?Release@CWaveformControl@@WDA@AGKXZ PROC NEAR		; CWaveformControl::Release, COMDAT
  00000	83 6c 24 04 30	 sub	 DWORD PTR [esp+4], 48	; 00000030H
  00005	e9 00 00 00 00	 jmp	 ?Release@CWaveformControl@@UAGKXZ ; CWaveformControl::Release
?Release@CWaveformControl@@WDA@AGKXZ ENDP		; CWaveformControl::Release
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ??_ECWaveformControl@@WDI@AEPAXI@Z
_TEXT	SEGMENT
??_ECWaveformControl@@WDI@AEPAXI@Z PROC NEAR		; CWaveformControl::`vector deleting destructor', COMDAT
  00000	83 e9 38	 sub	 ecx, 56			; 00000038H
  00003	e9 00 00 00 00	 jmp	 ??_ECWaveformControl@@UAEPAXI@Z ; CWaveformControl::`vector deleting destructor'
??_ECWaveformControl@@WDI@AEPAXI@Z ENDP			; CWaveformControl::`vector deleting destructor'
_TEXT	ENDS
END
