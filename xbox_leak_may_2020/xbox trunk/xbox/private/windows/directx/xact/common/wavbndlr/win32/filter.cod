; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05KMJF@ADPCM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05HMEK@8?9bit?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CXboxAdpcmFilter@@UAEKKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@C8BitFilter@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@C8BitFilter@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@C8BitFilter@@UAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBankHeaderSize@CWaveBank@@KGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CXboxAdpcmFilter@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCXboxAdpcmFilter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CXboxAdpcmFilter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0C8BitFilter@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GC8BitFilter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1C8BitFilter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertFormat@C8BitFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CXboxAdpcmFilter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7C8BitFilter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??0CXboxAdpcmFilter@@QAE@XZ			; CXboxAdpcmFilter::CXboxAdpcmFilter
PUBLIC	?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::Initialize
PUBLIC	?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ	; CXboxAdpcmFilter::GetSourceAlignment
PUBLIC	?GetDestinationAlignment@CXboxAdpcmFilter@@UAEKXZ ; CXboxAdpcmFilter::GetDestinationAlignment
PUBLIC	?GetSize@CXboxAdpcmFilter@@UAEKKH@Z		; CXboxAdpcmFilter::GetSize
PUBLIC	?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z	; CXboxAdpcmFilter::Convert
PUBLIC	??_7CXboxAdpcmFilter@@6B@			; CXboxAdpcmFilter::`vftable'
PUBLIC	??_GCXboxAdpcmFilter@@UAEPAXI@Z			; CXboxAdpcmFilter::`scalar deleting destructor'
PUBLIC	??_ECXboxAdpcmFilter@@UAEPAXI@Z			; CXboxAdpcmFilter::`vector deleting destructor'
EXTRN	??0CImaAdpcmCodec@DirectSound@@QAE@XZ:NEAR	; DirectSound::CImaAdpcmCodec::CImaAdpcmCodec
;	COMDAT ??_7CXboxAdpcmFilter@@6B@
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.cpp
CONST	SEGMENT
??_7CXboxAdpcmFilter@@6B@ DD FLAT:??_ECXboxAdpcmFilter@@UAEPAXI@Z ; CXboxAdpcmFilter::`vftable'
	DD	FLAT:?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
	DD	FLAT:?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ
	DD	FLAT:?GetDestinationAlignment@CXboxAdpcmFilter@@UAEKXZ
	DD	FLAT:?GetSize@CXboxAdpcmFilter@@UAEKKH@Z
	DD	FLAT:?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CXboxAdpcmFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CXboxAdpcmFilter@@QAE@XZ PROC NEAR			; CXboxAdpcmFilter::CXboxAdpcmFilter, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CImaAdpcmCodec@DirectSound@@QAE@XZ ; DirectSound::CImaAdpcmCodec::CImaAdpcmCodec
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CXboxAdpcmFilter@@6B@ ; CXboxAdpcmFilter::`vftable'

; 40   : }

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CXboxAdpcmFilter@@QAE@XZ ENDP			; CXboxAdpcmFilter::CXboxAdpcmFilter
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.h
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ PROC NEAR	; CXboxAdpcmFilter::GetSourceAlignment, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 73   :     return m_wfxEncode.wfx.nChannels * 2 * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  00010	8b c1		 mov	 eax, ecx
  00012	d1 e0		 shl	 eax, 1
  00014	c1 e0 06	 shl	 eax, 6

; 74   : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ ENDP	; CXboxAdpcmFilter::GetSourceAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetDestinationAlignment@CXboxAdpcmFilter@@UAEKXZ PROC NEAR ; CXboxAdpcmFilter::GetDestinationAlignment, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   :     return m_wfxEncode.wfx.nChannels * XBOX_ADPCM_ENCODED_BLOCK_SIZE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  00010	8b c1		 mov	 eax, ecx
  00012	6b c0 24	 imul	 eax, 36			; 00000024H

; 84   : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetDestinationAlignment@CXboxAdpcmFilter@@UAEKXZ ENDP	; CXboxAdpcmFilter::GetDestinationAlignment
_TEXT	ENDS
PUBLIC	?GetSize@CXboxAdpcmFilter@@SGKKKH@Z		; CXboxAdpcmFilter::GetSize
; Function compile flags: /Odt
;	COMDAT ?GetSize@CXboxAdpcmFilter@@UAEKKH@Z
_TEXT	SEGMENT
_cbSource$ = 8
_fRoundUp$ = 12
_this$ = -4
?GetSize@CXboxAdpcmFilter@@UAEKKH@Z PROC NEAR		; CXboxAdpcmFilter::GetSize, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 104  :     return GetSize(cbSource, m_wfxEncode.wfx.nChannels, fRoundUp);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _fRoundUp$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	33 d2		 xor	 edx, edx
  00010	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  00014	52		 push	 edx
  00015	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z ; CXboxAdpcmFilter::GetSize

; 105  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?GetSize@CXboxAdpcmFilter@@UAEKKH@Z ENDP		; CXboxAdpcmFilter::GetSize
_TEXT	ENDS
PUBLIC	?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z	; CXboxAdpcmFilter::GetSourceAlignment
PUBLIC	?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z ; CXboxAdpcmFilter::GetDestinationAlignment
; Function compile flags: /Odt
;	COMDAT ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z
_TEXT	SEGMENT
_cbSource$ = 8
_nChannels$ = 12
_fRoundUp$ = 16
_cbSrcAlign$ = -8
_cbDstAlign$ = -4
?GetSize@CXboxAdpcmFilter@@SGKKKH@Z PROC NEAR		; CXboxAdpcmFilter::GetSize, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 88   :     const DWORD             cbSrcAlign  = GetSourceAlignment(nChannels);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _nChannels$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z ; CXboxAdpcmFilter::GetSourceAlignment
  0000f	89 45 f8	 mov	 DWORD PTR _cbSrcAlign$[ebp], eax

; 89   :     const DWORD             cbDstAlign  = GetDestinationAlignment(nChannels);

  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _nChannels$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z ; CXboxAdpcmFilter::GetDestinationAlignment
  0001b	89 45 fc	 mov	 DWORD PTR _cbDstAlign$[ebp], eax

; 90   :     
; 91   :     if(fRoundUp)

  0001e	83 7d 10 00	 cmp	 DWORD PTR _fRoundUp$[ebp], 0
  00022	74 0d		 je	 SHORT $L48476

; 92   :     {
; 93   :         cbSource += cbSrcAlign - 1;

  00024	8b 55 f8	 mov	 edx, DWORD PTR _cbSrcAlign$[ebp]
  00027	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]
  0002a	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  0002e	89 4d 08	 mov	 DWORD PTR _cbSource$[ebp], ecx
$L48476:

; 94   :     }
; 95   : 
; 96   :     cbSource /= cbSrcAlign;

  00031	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]
  00034	33 d2		 xor	 edx, edx
  00036	f7 75 f8	 div	 DWORD PTR _cbSrcAlign$[ebp]
  00039	89 45 08	 mov	 DWORD PTR _cbSource$[ebp], eax

; 97   :     cbSource *= cbDstAlign;

  0003c	8b 55 08	 mov	 edx, DWORD PTR _cbSource$[ebp]
  0003f	0f af 55 fc	 imul	 edx, DWORD PTR _cbDstAlign$[ebp]
  00043	89 55 08	 mov	 DWORD PTR _cbSource$[ebp], edx

; 98   :     
; 99   :     return cbSource;

  00046	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]

; 100  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
?GetSize@CXboxAdpcmFilter@@SGKKKH@Z ENDP		; CXboxAdpcmFilter::GetSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT
_nChannels$ = 8
?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z PROC NEAR	; CXboxAdpcmFilter::GetSourceAlignment, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :     return nChannels * 2 * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nChannels$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	c1 e0 06	 shl	 eax, 6

; 69   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z ENDP	; CXboxAdpcmFilter::GetSourceAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT
_nChannels$ = 8
?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z PROC NEAR ; CXboxAdpcmFilter::GetDestinationAlignment, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :     return nChannels * XBOX_ADPCM_ENCODED_BLOCK_SIZE;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nChannels$[ebp]
  00006	6b c0 24	 imul	 eax, 36			; 00000024H

; 79   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z ENDP	; CXboxAdpcmFilter::GetDestinationAlignment
_TEXT	ENDS
PUBLIC	??1CXboxAdpcmFilter@@UAE@XZ			; CXboxAdpcmFilter::~CXboxAdpcmFilter
; Function compile flags: /Odt
;	COMDAT ??_GCXboxAdpcmFilter@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCXboxAdpcmFilter@@UAEPAXI@Z PROC NEAR		; CXboxAdpcmFilter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CXboxAdpcmFilter@@UAE@XZ ; CXboxAdpcmFilter::~CXboxAdpcmFilter
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L48868
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L48868:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCXboxAdpcmFilter@@UAEPAXI@Z ENDP			; CXboxAdpcmFilter::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
EXTRN	??1CImaAdpcmCodec@DirectSound@@UAE@XZ:NEAR	; DirectSound::CImaAdpcmCodec::~CImaAdpcmCodec
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.cpp
;	COMDAT ??1CXboxAdpcmFilter@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CXboxAdpcmFilter@@UAE@XZ PROC NEAR			; CXboxAdpcmFilter::~CXboxAdpcmFilter, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CXboxAdpcmFilter@@6B@ ; CXboxAdpcmFilter::`vftable'

; 66   : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CImaAdpcmCodec@DirectSound@@UAE@XZ ; DirectSound::CImaAdpcmCodec::~CImaAdpcmCodec
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CXboxAdpcmFilter@@UAE@XZ ENDP			; CXboxAdpcmFilter::~CXboxAdpcmFilter
_TEXT	ENDS
PUBLIC	?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::ConvertFormat
EXTRN	?Initialize@CImaAdpcmCodec@DirectSound@@QAEHPBUima_adpcmwaveformat_tag@@H@Z:NEAR ; DirectSound::CImaAdpcmCodec::Initialize
EXTRN	_WaveBankExpandFormat@8:NEAR
; Function compile flags: /Odt
;	COMDAT ?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT
_pwfxSource$ = 8
_this$ = -28
_wfxDest$ = -4
_wfxExpanded$ = -24
?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z PROC NEAR ; CXboxAdpcmFilter::Initialize, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 93   :     WAVEBANKMINIWAVEFORMAT      wfxDest     = *pwfxSource;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pwfxSource$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR _wfxDest$[ebp], ecx

; 94   :     WAVEBANKUNIWAVEFORMAT       wfxExpanded;
; 95   : 
; 96   :     if(!ConvertFormat(&wfxDest))

  00011	8d 55 fc	 lea	 edx, DWORD PTR _wfxDest$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::ConvertFormat
  0001a	85 c0		 test	 eax, eax
  0001c	75 04		 jne	 SHORT $L48879

; 97   :     {
; 98   :         return FALSE;

  0001e	33 c0		 xor	 eax, eax
  00020	eb 23		 jmp	 SHORT $L48876
$L48879:

; 99   :     }
; 100  : 
; 101  :     if(!WaveBankExpandFormat(&wfxDest, &wfxExpanded))

  00022	8d 45 e8	 lea	 eax, DWORD PTR _wfxExpanded$[ebp]
  00025	50		 push	 eax
  00026	8d 4d fc	 lea	 ecx, DWORD PTR _wfxDest$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 _WaveBankExpandFormat@8
  0002f	85 c0		 test	 eax, eax
  00031	75 04		 jne	 SHORT $L48880

; 102  :     {
; 103  :         return FALSE;

  00033	33 c0		 xor	 eax, eax
  00035	eb 0e		 jmp	 SHORT $L48876
$L48880:

; 104  :     }
; 105  : 
; 106  :     return CImaAdpcmCodec::Initialize(&wfxExpanded.AdpcmWaveFormat, TRUE);

  00037	6a 01		 push	 1
  00039	8d 55 e8	 lea	 edx, DWORD PTR _wfxExpanded$[ebp]
  0003c	52		 push	 edx
  0003d	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?Initialize@CImaAdpcmCodec@DirectSound@@QAEHPBUima_adpcmwaveformat_tag@@H@Z ; DirectSound::CImaAdpcmCodec::Initialize
$L48876:

; 107  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ENDP ; CXboxAdpcmFilter::Initialize
_TEXT	ENDS
PUBLIC	?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::IsValidFormat
; Function compile flags: /Odt
;	COMDAT ?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT
_pwfxFormat$ = 8
?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z PROC NEAR ; CXboxAdpcmFilter::IsValidFormat, COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  :     if(WAVEBANKMINIFORMAT_TAG_PCM != pwfxFormat->wFormatTag)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	83 e1 01	 and	 ecx, 1
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 04		 je	 SHORT $L48884

; 135  :     {
; 136  :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 3b		 jmp	 SHORT $L48883
$L48884:

; 137  :     }
; 138  : 
; 139  :     if((pwfxFormat->nChannels < 1) || (pwfxFormat->nChannels > 2))

  00013	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00016	8b 02		 mov	 eax, DWORD PTR [edx]
  00018	d1 e8		 shr	 eax, 1
  0001a	83 e0 07	 and	 eax, 7
  0001d	83 f8 01	 cmp	 eax, 1
  00020	72 0f		 jb	 SHORT $L48886
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00025	8b 11		 mov	 edx, DWORD PTR [ecx]
  00027	d1 ea		 shr	 edx, 1
  00029	83 e2 07	 and	 edx, 7
  0002c	83 fa 02	 cmp	 edx, 2
  0002f	76 04		 jbe	 SHORT $L48885
$L48886:

; 140  :     {
; 141  :         return FALSE;

  00031	33 c0		 xor	 eax, eax
  00033	eb 19		 jmp	 SHORT $L48883
$L48885:

; 142  :     }
; 143  : 
; 144  :     if(WAVEBANKMINIFORMAT_BITDEPTH_16 != pwfxFormat->wBitsPerSample)

  00035	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0003d	83 e1 01	 and	 ecx, 1
  00040	83 f9 01	 cmp	 ecx, 1
  00043	74 04		 je	 SHORT $L48887

; 145  :     {
; 146  :         return FALSE;

  00045	33 c0		 xor	 eax, eax
  00047	eb 05		 jmp	 SHORT $L48883
$L48887:

; 147  :     }
; 148  : 
; 149  :     return TRUE;

  00049	b8 01 00 00 00	 mov	 eax, 1
$L48883:

; 150  : }

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ENDP ; CXboxAdpcmFilter::IsValidFormat
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT
_pwfxFormat$ = 8
?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z PROC NEAR ; CXboxAdpcmFilter::ConvertFormat, COMDAT

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  :     if(!IsValidFormat(pwfxFormat))

  00003	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::IsValidFormat
  0000c	85 c0		 test	 eax, eax
  0000e	75 04		 jne	 SHORT $L48891

; 178  :     {
; 179  :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 22		 jmp	 SHORT $L48890
$L48891:

; 180  :     }
; 181  : 
; 182  :     pwfxFormat->wFormatTag = WAVEBANKMINIFORMAT_TAG_ADPCM;

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	83 ca 01	 or	 edx, 1
  0001c	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0001f	89 10		 mov	 DWORD PTR [eax], edx

; 183  :     pwfxFormat->wBitsPerSample = WAVEBANKMINIFORMAT_BITDEPTH_4;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00024	8b 11		 mov	 edx, DWORD PTR [ecx]
  00026	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0002c	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  0002f	89 10		 mov	 DWORD PTR [eax], edx

; 184  : 
; 185  :     return TRUE;

  00031	b8 01 00 00 00	 mov	 eax, 1
$L48890:

; 186  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z ENDP ; CXboxAdpcmFilter::ConvertFormat
_TEXT	ENDS
EXTRN	?Convert@CImaAdpcmCodec@DirectSound@@QAEHPBXPAXI@Z:NEAR ; DirectSound::CImaAdpcmCodec::Convert
; Function compile flags: /Odt
;	COMDAT ?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z
_TEXT	SEGMENT
_pvSource$ = 8
_pcbSource$ = 12
_pvDest$ = 16
_pcbDest$ = 20
_this$ = -8
_cBlocks$ = -4
?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z PROC NEAR	; CXboxAdpcmFilter::Convert, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :     DWORD                   cBlocks;
; 220  : 
; 221  :     //
; 222  :     // Convert byte sizes to blocks
; 223  :     //
; 224  : 
; 225  :     *pcbSource /= m_wfxEncode.wfx.nChannels * 2 * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	33 c9		 xor	 ecx, ecx
  0000e	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  00012	d1 e1		 shl	 ecx, 1
  00014	c1 e1 06	 shl	 ecx, 6
  00017	8b 55 0c	 mov	 edx, DWORD PTR _pcbSource$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	33 d2		 xor	 edx, edx
  0001e	f7 f1		 div	 ecx
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbSource$[ebp]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 226  :     *pcbDest /= m_wfxEncode.wfx.nChannels * XBOX_ADPCM_ENCODED_BLOCK_SIZE;

  00025	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00028	33 c0		 xor	 eax, eax
  0002a	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  0002e	8b c8		 mov	 ecx, eax
  00030	6b c9 24	 imul	 ecx, 36			; 00000024H
  00033	8b 55 14	 mov	 edx, DWORD PTR _pcbDest$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	33 d2		 xor	 edx, edx
  0003a	f7 f1		 div	 ecx
  0003c	8b 4d 14	 mov	 ecx, DWORD PTR _pcbDest$[ebp]
  0003f	89 01		 mov	 DWORD PTR [ecx], eax

; 227  :     
; 228  :     cBlocks = min(*pcbSource, *pcbDest);

  00041	8b 55 0c	 mov	 edx, DWORD PTR _pcbSource$[ebp]
  00044	8b 45 14	 mov	 eax, DWORD PTR _pcbDest$[ebp]
  00047	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00049	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0004b	73 0a		 jae	 SHORT $L49042
  0004d	8b 55 0c	 mov	 edx, DWORD PTR _pcbSource$[ebp]
  00050	8b 02		 mov	 eax, DWORD PTR [edx]
  00052	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  00055	eb 08		 jmp	 SHORT $L49043
$L49042:
  00057	8b 4d 14	 mov	 ecx, DWORD PTR _pcbDest$[ebp]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	89 55 f4	 mov	 DWORD PTR -12+[ebp], edx
$L49043:
  0005f	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _cBlocks$[ebp], eax

; 229  : 
; 230  :     *pcbSource = cBlocks * m_wfxEncode.wfx.nChannels * 2 * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	33 d2		 xor	 edx, edx
  0006a	66 8b 51 06	 mov	 dx, WORD PTR [ecx+6]
  0006e	8b 45 fc	 mov	 eax, DWORD PTR _cBlocks$[ebp]
  00071	0f af c2	 imul	 eax, edx
  00074	d1 e0		 shl	 eax, 1
  00076	c1 e0 06	 shl	 eax, 6
  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbSource$[ebp]
  0007c	89 01		 mov	 DWORD PTR [ecx], eax

; 231  :     *pcbDest = cBlocks * m_wfxEncode.wfx.nChannels * XBOX_ADPCM_ENCODED_BLOCK_SIZE;

  0007e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00081	33 c0		 xor	 eax, eax
  00083	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _cBlocks$[ebp]
  0008a	0f af c8	 imul	 ecx, eax
  0008d	6b c9 24	 imul	 ecx, 36			; 00000024H
  00090	8b 55 14	 mov	 edx, DWORD PTR _pcbDest$[ebp]
  00093	89 0a		 mov	 DWORD PTR [edx], ecx

; 232  : 
; 233  :     //
; 234  :     // Convert data
; 235  :     //
; 236  : 
; 237  :     return CImaAdpcmCodec::Convert(pvSource, pvDest, cBlocks);

  00095	8b 45 fc	 mov	 eax, DWORD PTR _cBlocks$[ebp]
  00098	50		 push	 eax
  00099	8b 4d 10	 mov	 ecx, DWORD PTR _pvDest$[ebp]
  0009c	51		 push	 ecx
  0009d	8b 55 08	 mov	 edx, DWORD PTR _pvSource$[ebp]
  000a0	52		 push	 edx
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ?Convert@CImaAdpcmCodec@DirectSound@@QAEHPBXPAXI@Z ; DirectSound::CImaAdpcmCodec::Convert

; 238  : }

  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 10 00	 ret	 16			; 00000010H
?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z ENDP	; CXboxAdpcmFilter::Convert
_TEXT	ENDS
PUBLIC	??0C8BitFilter@@QAE@XZ				; C8BitFilter::C8BitFilter
PUBLIC	?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::Initialize
PUBLIC	?GetSourceAlignment@C8BitFilter@@UAEKXZ		; C8BitFilter::GetSourceAlignment
PUBLIC	?GetDestinationAlignment@C8BitFilter@@UAEKXZ	; C8BitFilter::GetDestinationAlignment
PUBLIC	?GetSize@C8BitFilter@@UAEKK@Z			; C8BitFilter::GetSize
PUBLIC	?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z		; C8BitFilter::Convert
PUBLIC	??_7C8BitFilter@@6B@				; C8BitFilter::`vftable'
PUBLIC	??_GC8BitFilter@@UAEPAXI@Z			; C8BitFilter::`scalar deleting destructor'
PUBLIC	??_EC8BitFilter@@UAEPAXI@Z			; C8BitFilter::`vector deleting destructor'
;	COMDAT ??_7C8BitFilter@@6B@
CONST	SEGMENT
??_7C8BitFilter@@6B@ DD FLAT:??_EC8BitFilter@@UAEPAXI@Z	; C8BitFilter::`vftable'
	DD	FLAT:?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
	DD	FLAT:?GetSourceAlignment@C8BitFilter@@UAEKXZ
	DD	FLAT:?GetDestinationAlignment@C8BitFilter@@UAEKXZ
	DD	FLAT:?GetSize@C8BitFilter@@UAEKK@Z
	DD	FLAT:?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0C8BitFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0C8BitFilter@@QAE@XZ PROC NEAR			; C8BitFilter::C8BitFilter, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7C8BitFilter@@6B@ ; C8BitFilter::`vftable'

; 264  : }

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0C8BitFilter@@QAE@XZ ENDP				; C8BitFilter::C8BitFilter
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.h
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@C8BitFilter@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetSourceAlignment@C8BitFilter@@UAEKXZ PROC NEAR	; C8BitFilter::GetSourceAlignment, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 155  :     return m_nChannels * 2;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	d1 e0		 shl	 eax, 1

; 156  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetSourceAlignment@C8BitFilter@@UAEKXZ ENDP		; C8BitFilter::GetSourceAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@C8BitFilter@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetDestinationAlignment@C8BitFilter@@UAEKXZ PROC NEAR	; C8BitFilter::GetDestinationAlignment, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 165  :     return m_nChannels;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 166  : }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDestinationAlignment@C8BitFilter@@UAEKXZ ENDP	; C8BitFilter::GetDestinationAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@C8BitFilter@@UAEKK@Z
_TEXT	SEGMENT
_cbSource$ = 8
_this$ = -4
?GetSize@C8BitFilter@@UAEKK@Z PROC NEAR			; C8BitFilter::GetSize, COMDAT
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 175  :     return cbSource / (m_nChannels * 2) * m_nChannels;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	d1 e1		 shl	 ecx, 1
  0000f	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]
  00012	33 d2		 xor	 edx, edx
  00014	f7 f1		 div	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	0f af 42 04	 imul	 eax, DWORD PTR [edx+4]

; 176  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
?GetSize@C8BitFilter@@UAEKK@Z ENDP			; C8BitFilter::GetSize
_TEXT	ENDS
PUBLIC	??1C8BitFilter@@UAE@XZ				; C8BitFilter::~C8BitFilter
; Function compile flags: /Odt
;	COMDAT ??_GC8BitFilter@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GC8BitFilter@@UAEPAXI@Z PROC NEAR			; C8BitFilter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1C8BitFilter@@UAE@XZ	; C8BitFilter::~C8BitFilter
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L48907
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L48907:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GC8BitFilter@@UAEPAXI@Z ENDP				; C8BitFilter::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.cpp
_TEXT	ENDS
;	COMDAT ??1C8BitFilter@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1C8BitFilter@@UAE@XZ PROC NEAR			; C8BitFilter::~C8BitFilter, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7C8BitFilter@@6B@ ; C8BitFilter::`vftable'

; 290  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1C8BitFilter@@UAE@XZ ENDP				; C8BitFilter::~C8BitFilter
_TEXT	ENDS
PUBLIC	?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::IsValidFormat
; Function compile flags: /Odt
;	COMDAT ?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT
_pwfxSource$ = 8
_this$ = -4
?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z PROC NEAR ; C8BitFilter::Initialize, COMDAT
; _this$ = ecx

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :     if(!IsValidFormat(pwfxSource))

  00007	8b 45 08	 mov	 eax, DWORD PTR _pwfxSource$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::IsValidFormat
  00010	85 c0		 test	 eax, eax
  00012	75 04		 jne	 SHORT $L48916

; 318  :     {
; 319  :         return FALSE;

  00014	33 c0		 xor	 eax, eax
  00016	eb 15		 jmp	 SHORT $L48915
$L48916:

; 320  :     }
; 321  :     
; 322  :     m_nChannels = pwfxSource->nChannels;

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxSource$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	d1 ea		 shr	 edx, 1
  0001f	83 e2 07	 and	 edx, 7
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 323  :     
; 324  :     return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1
$L48915:

; 325  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ENDP ; C8BitFilter::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT
_pwfxFormat$ = 8
?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z PROC NEAR ; C8BitFilter::IsValidFormat, COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 352  :     if(WAVEBANKMINIFORMAT_TAG_PCM != pwfxFormat->wFormatTag)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	83 e1 01	 and	 ecx, 1
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 04		 je	 SHORT $L48920

; 353  :     {
; 354  :         return FALSE;

  0000f	33 c0		 xor	 eax, eax
  00011	eb 19		 jmp	 SHORT $L48919
$L48920:

; 355  :     }
; 356  : 
; 357  :     if(WAVEBANKMINIFORMAT_BITDEPTH_16 != pwfxFormat->wBitsPerSample)

  00013	8b 55 08	 mov	 edx, DWORD PTR _pwfxFormat$[ebp]
  00016	8b 02		 mov	 eax, DWORD PTR [edx]
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	83 e0 01	 and	 eax, 1
  0001e	83 f8 01	 cmp	 eax, 1
  00021	74 04		 je	 SHORT $L48921

; 358  :     {
; 359  :         return FALSE;

  00023	33 c0		 xor	 eax, eax
  00025	eb 05		 jmp	 SHORT $L48919
$L48921:

; 360  :     }
; 361  : 
; 362  :     return TRUE;

  00027	b8 01 00 00 00	 mov	 eax, 1
$L48919:

; 363  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ENDP ; C8BitFilter::IsValidFormat
_TEXT	ENDS
PUBLIC	?ConvertFormat@C8BitFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::ConvertFormat
; Function compile flags: /Odt
;	COMDAT ?ConvertFormat@C8BitFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z
_TEXT	SEGMENT
_pwfxFormat$ = 8
?ConvertFormat@C8BitFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z PROC NEAR ; C8BitFilter::ConvertFormat, COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 390  :     if(!IsValidFormat(pwfxFormat))

  00003	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::IsValidFormat
  0000c	85 c0		 test	 eax, eax
  0000e	75 04		 jne	 SHORT $L48925

; 391  :     {
; 392  :         return FALSE;

  00010	33 c0		 xor	 eax, eax
  00012	eb 15		 jmp	 SHORT $L48924
$L48925:

; 393  :     }
; 394  : 
; 395  :     pwfxFormat->wBitsPerSample = WAVEBANKMINIFORMAT_BITDEPTH_8;

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pwfxFormat$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  0001f	8b 45 08	 mov	 eax, DWORD PTR _pwfxFormat$[ebp]
  00022	89 10		 mov	 DWORD PTR [eax], edx

; 396  : 
; 397  :     return TRUE;

  00024	b8 01 00 00 00	 mov	 eax, 1
$L48924:

; 398  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?ConvertFormat@C8BitFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z ENDP ; C8BitFilter::ConvertFormat
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z
_TEXT	SEGMENT
_pvSource$ = 8
_pcbSource$ = 12
_pvDest$ = 16
_pcbDest$ = 20
_this$ = -20
_psSource$ = -4
_pbDest$ = -12
_cSamples$ = -8
_dwSample$ = -16
?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z PROC NEAR	; C8BitFilter::Convert, COMDAT
; _this$ = ecx

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 431  :     const short *           psSource    = (const short *)pvSource;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pvSource$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _psSource$[ebp], eax

; 432  :     unsigned char *         pbDest      = (unsigned char *)pvDest;

  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _pvDest$[ebp]
  00012	89 4d f4	 mov	 DWORD PTR _pbDest$[ebp], ecx

; 433  :     DWORD                   cSamples;
; 434  :     DWORD                   dwSample;
; 435  : 
; 436  :     //
; 437  :     // Convert byte sizes to samples
; 438  :     //
; 439  : 
; 440  :     *pcbSource /= m_nChannels * 2;

  00015	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0001b	d1 e1		 shl	 ecx, 1
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _pcbSource$[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	33 d2		 xor	 edx, edx
  00024	f7 f1		 div	 ecx
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbSource$[ebp]
  00029	89 01		 mov	 DWORD PTR [ecx], eax

; 441  :     *pcbDest /= m_nChannels;

  0002b	8b 55 14	 mov	 edx, DWORD PTR _pcbDest$[ebp]
  0002e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 02		 mov	 eax, DWORD PTR [edx]
  00033	33 d2		 xor	 edx, edx
  00035	f7 71 04	 div	 DWORD PTR [ecx+4]
  00038	8b 55 14	 mov	 edx, DWORD PTR _pcbDest$[ebp]
  0003b	89 02		 mov	 DWORD PTR [edx], eax

; 442  :     
; 443  :     cSamples = min(*pcbSource, *pcbDest);

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _pcbSource$[ebp]
  00040	8b 4d 14	 mov	 ecx, DWORD PTR _pcbDest$[ebp]
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00047	73 0a		 jae	 SHORT $L49074
  00049	8b 45 0c	 mov	 eax, DWORD PTR _pcbSource$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 4d e8	 mov	 DWORD PTR -24+[ebp], ecx
  00051	eb 08		 jmp	 SHORT $L49075
$L49074:
  00053	8b 55 14	 mov	 edx, DWORD PTR _pcbDest$[ebp]
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
$L49075:
  0005b	8b 4d e8	 mov	 ecx, DWORD PTR -24+[ebp]
  0005e	89 4d f8	 mov	 DWORD PTR _cSamples$[ebp], ecx

; 444  : 
; 445  :     *pcbSource = cSamples * m_nChannels * 2;

  00061	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 f8	 mov	 eax, DWORD PTR _cSamples$[ebp]
  00067	0f af 42 04	 imul	 eax, DWORD PTR [edx+4]
  0006b	d1 e0		 shl	 eax, 1
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _pcbSource$[ebp]
  00070	89 01		 mov	 DWORD PTR [ecx], eax

; 446  :     *pcbDest = cSamples * m_nChannels;

  00072	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00075	8b 45 f8	 mov	 eax, DWORD PTR _cSamples$[ebp]
  00078	0f af 42 04	 imul	 eax, DWORD PTR [edx+4]
  0007c	8b 4d 14	 mov	 ecx, DWORD PTR _pcbDest$[ebp]
  0007f	89 01		 mov	 DWORD PTR [ecx], eax

; 447  : 
; 448  :     //
; 449  :     // Convert data
; 450  :     //
; 451  : 
; 452  :     cSamples *= m_nChannels;

  00081	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00084	8b 45 f8	 mov	 eax, DWORD PTR _cSamples$[ebp]
  00087	0f af 42 04	 imul	 eax, DWORD PTR [edx+4]
  0008b	89 45 f8	 mov	 DWORD PTR _cSamples$[ebp], eax
$L48940:

; 453  :     
; 454  :     while(cSamples--)

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _cSamples$[ebp]
  00091	8b 55 f8	 mov	 edx, DWORD PTR _cSamples$[ebp]
  00094	83 ea 01	 sub	 edx, 1
  00097	89 55 f8	 mov	 DWORD PTR _cSamples$[ebp], edx
  0009a	85 c9		 test	 ecx, ecx
  0009c	74 2e		 je	 SHORT $L48941

; 455  :     {
; 456  :         dwSample = *psSource + 32768;

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _psSource$[ebp]
  000a1	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  000a4	81 c1 00 80 00
	00		 add	 ecx, 32768		; 00008000H
  000aa	89 4d f0	 mov	 DWORD PTR _dwSample$[ebp], ecx

; 457  :         *pbDest = (BYTE)(dwSample >> 8);

  000ad	8b 55 f0	 mov	 edx, DWORD PTR _dwSample$[ebp]
  000b0	c1 ea 08	 shr	 edx, 8
  000b3	8b 45 f4	 mov	 eax, DWORD PTR _pbDest$[ebp]
  000b6	88 10		 mov	 BYTE PTR [eax], dl

; 458  : 
; 459  :         pbDest++;

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR _pbDest$[ebp]
  000bb	83 c1 01	 add	 ecx, 1
  000be	89 4d f4	 mov	 DWORD PTR _pbDest$[ebp], ecx

; 460  :         psSource++;

  000c1	8b 55 fc	 mov	 edx, DWORD PTR _psSource$[ebp]
  000c4	83 c2 02	 add	 edx, 2
  000c7	89 55 fc	 mov	 DWORD PTR _psSource$[ebp], edx

; 461  :     }

  000ca	eb c2		 jmp	 SHORT $L48940
$L48941:

; 462  : 
; 463  :     return TRUE;

  000cc	b8 01 00 00 00	 mov	 eax, 1

; 464  : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 10 00	 ret	 16			; 00000010H
?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z ENDP		; C8BitFilter::Convert
_TEXT	ENDS
END
