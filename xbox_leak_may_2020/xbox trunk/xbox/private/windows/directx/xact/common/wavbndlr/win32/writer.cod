; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09DPKL@?$CIunknown?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06NPGC@?$CInone?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MKNO@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GKFF@?$CBm_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLPL@m_dwRefCount?5?$DM?5?$HO0UL?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BGIF@m_dwRefCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05KMJF@ADPCM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05HMEK@8?9bit?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@DIHO@m_pParent?9?$DOm_dwEntryCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@JFMP@m_pParent?9?$DOm_pParent?9?$DOm_dwEntryC@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IOKM@pszFileName?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08IMGB@WAVBNDLR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BL@LDEE@CWaveBankEntry?3?3Initialize?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@FKMK@An?5entry?5with?5that?5name?5already?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DI@JGFL@An?5entry?5using?5that?5filename?5alr@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@LKKO@pszName?5?$HM?$HM?5pszPath?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@JHGL@ENTRY_COUNT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@GKGB@CWaveBankEntry?3?3SetName?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@EPOG@That?5name?5is?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@CLEF@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@DBDA@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EE@FGDJ@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EE@GAIB@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IMJJ@CWaveBankEntry?3?3SetFlags?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DA@PLDD@ADPCM?5and?58BIT?5filtering?5are?5mut@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@EKHO@?$CB?$CI?$CIm_dwFlags?5?$CG?5WBFILTER_ADPCM?$CJ?5?$CG@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09GHOK@m_fLoaded?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08OKOI@fSuccess?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DD@LCBB@dwCopyBufferSize?5?$DO?$DN?5pMetaData?9?$DOP@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@FDBK@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@PBMG@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@ECLE@Failed?5to?5initialize?5the?5ADPCM?5f@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@OCPI@Failed?5to?5initialize?5the?58BIT?5fi@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CA@FLDH@dwCopyBufferSize?5?$DO?$DN?5dwAlignment?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@NPAA@dwFilterRead?5?$DN?$DN?5dwAlignedRead?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@EGPJ@An?5error?5occurred?5while?5compress@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DN@HPGN@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CF@NCIG@dwTotalRead?5?$DN?$DN?5m_PlayRegion?4dwLe@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DB@BIEL@dwTotalWritten?5?$DN?$DN?5pMetaData?9?$DOPla@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CNLP@m_pParent?9?$DOm_dwBankCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@DKKB@CWaveBank?3?3Initialize?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EH@GOPH@A?5bank?5with?5that?5name?5?$CIor?5a?5simi@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FGEE@A?5bank?5using?5that?5filename?5alrea@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EA@FPCK@A?5bank?5using?5that?5header?5filenam@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@NHHK@pszName?5?$HM?$HM?5pszBankFile?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07OKEH@SetName?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@HBCM@SetAlignment?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CE@BNOI@Alignment?5must?5be?5a?5multiple?5of?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04EHOP@BYTE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MNOP@Out?5of?5memory?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@CNBO@dwEntryIndex?5?$DM?5m_dwEntryCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DLDC@No?5entries?5added?5yet?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@FEGI@?$CDpragma?5once?$AN?6?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@LJBE@typedef?5enum?$AN?6?$HL?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@PGJH@?$HN?5WAVEBANK_?$CFs?$DL?$AN?6?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@FMCD@?5?5?5?5WAVEBANK_?$CFs_?$CFs?5?$DN?5?$CFlu?0?$AN?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@PPJD@?$CDdefine?5WAVEBANK_?$CFs_ENTRY_COUNT?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@OAEM@dwEntry?5?$DN?$DN?5m_dwEntryCount?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _==@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveEntryTailList@@YGPAU_LIST_ENTRY@@PAU1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPBDK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRefCount@DirectSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRefCount@DirectSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRefCount@DirectSound@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CWaveFile@WaveLoader@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFileType@CWaveFile@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CWaveFile@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@C8BitFilter@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@C8BitFilter@@SGKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveEntry@CWaveBank@@UAEXPAVCWaveBankEntry@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBankHeaderSize@CWaveBank@@KGKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBankHeaderSize@CWaveBank@@MAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateEntry@CWaveBank@@MAEPAVCWaveBankEntry@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveBank@CWaveBankProject@@UAEXPAVCWaveBank@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateBank@CWaveBankProject@@MAEPAVCWaveBank@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeHeaderString@@YGXPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveBankEntry@@QAE@PAVCWaveBank@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWaveBankEntry@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWaveBankEntry@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CWaveBankEntry@@UAEJPBD0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindDuplicateEntry@CWaveBankEntry@@MAEJPBDPAI01@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetName@CWaveBankEntry@@UAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@CWaveBankEntry@@UAEJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValidFlags@CWaveBankEntry@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetFlags@CWaveBankEntry@@UAEKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMetaData@CWaveBankEntry@@UAEJPAU_WAVEBANKENTRY@@KKPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CommitWaveData@CWaveBankEntry@@UAEJPAVCWaveBankCallback@@PAVCStdFileStream@WaveLoader@@KPBU_WAVEBANKENTRY@@PAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveBank@@QAE@PAVCWaveBankProject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWaveBank@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWaveBank@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CWaveBank@@UAEJPBD00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindDuplicateBank@CWaveBank@@MAEJPBDPAI0101@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetName@CWaveBank@@UAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAlignment@CWaveBank@@UAEJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddEntry@CWaveBank@@UAEJPBD0KPAPAVCWaveBankEntry@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenerateBank@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBankDataSize@CWaveBank@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadEntries@CWaveBank@@UAEJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWaveBankProject@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCWaveBankProject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWaveBankProject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddBank@CWaveBankProject@@UAEJPBD00PAPAVCWaveBank@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CWaveBank@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWaveBankEntry@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRefCount@DirectSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CWaveBankProject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBC
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@FEGI@?$CDpragma?5once?$AN?6?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@LJBE@typedef?5enum?$AN?6?$HL?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@PGJH@?$HN?5WAVEBANK_?$CFs?$DL?$AN?6?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@FMCD@?5?5?5?5WAVEBANK_?$CFs_?$CFs?5?$DN?5?$CFlu?0?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@PPJD@?$CDdefine?5WAVEBANK_?$CFs_ENTRY_COUNT?5@ ; `string'
PUBLIC	?m_fAutoLoad@CWaveBankEntry@@2HA		; CWaveBankEntry::m_fAutoLoad
PUBLIC	?m_dwMinAlignment@CWaveBank@@2KB		; CWaveBank::m_dwMinAlignment
CONST	SEGMENT
?m_dwMinAlignment@CWaveBank@@2KB DD 04H			; CWaveBank::m_dwMinAlignment
CONST	ENDS
_DATA	SEGMENT
?m_fAutoLoad@CWaveBankEntry@@2HA DD 01H			; CWaveBankEntry::m_fAutoLoad
_DATA	ENDS
CONST	SEGMENT
?dwCopyBufferSize@?1??GenerateBank@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4KB DD 040000H ; `CWaveBank::GenerateBank'::`2'::dwCopyBufferSize
CONST	ENDS
;	COMDAT ??_C@_0BB@FEGI@?$CDpragma?5once?$AN?6?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BB@FEGI@?$CDpragma?5once?$AN?6?$AN?6?$AA@ DB '#pragma once', 0dH, 0aH
	DB	0dH, 0aH, 00H				; `string'
CONST	ENDS
CONST	SEGMENT
?pszFileBegin@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB DD FLAT:??_C@_0BB@FEGI@?$CDpragma?5once?$AN?6?$AN?6?$AA@ ; `CWaveBank::GenerateHeader'::`2'::pszFileBegin
CONST	ENDS
;	COMDAT ??_C@_0BC@LJBE@typedef?5enum?$AN?6?$HL?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BC@LJBE@typedef?5enum?$AN?6?$HL?$AN?6?$AA@ DB 'typedef enum', 0dH, 0aH
	DB	'{', 0dH, 0aH, 00H				; `string'
CONST	ENDS
CONST	SEGMENT
?pszEnumBegin@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB DD FLAT:??_C@_0BC@LJBE@typedef?5enum?$AN?6?$HL?$AN?6?$AA@ ; `CWaveBank::GenerateHeader'::`2'::pszEnumBegin
CONST	ENDS
;	COMDAT ??_C@_0BD@PGJH@?$HN?5WAVEBANK_?$CFs?$DL?$AN?6?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BD@PGJH@?$HN?5WAVEBANK_?$CFs?$DL?$AN?6?$AN?6?$AA@ DB '} WAVEBANK_%'
	DB	's;', 0dH, 0aH, 0dH, 0aH, 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?pszEnumEnd@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB DD FLAT:??_C@_0BD@PGJH@?$HN?5WAVEBANK_?$CFs?$DL?$AN?6?$AN?6?$AA@ ; `CWaveBank::GenerateHeader'::`2'::pszEnumEnd
CONST	ENDS
;	COMDAT ??_C@_0BM@FMCD@?5?5?5?5WAVEBANK_?$CFs_?$CFs?5?$DN?5?$CFlu?0?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BM@FMCD@?5?5?5?5WAVEBANK_?$CFs_?$CFs?5?$DN?5?$CFlu?0?$AN?6?$AA@ DB ' '
	DB	'   WAVEBANK_%s_%s = %lu,', 0dH, 0aH, 00H	; `string'
CONST	ENDS
CONST	SEGMENT
?pszEnumEntry@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB DD FLAT:??_C@_0BM@FMCD@?5?5?5?5WAVEBANK_?$CFs_?$CFs?5?$DN?5?$CFlu?0?$AN?6?$AA@ ; `CWaveBank::GenerateHeader'::`2'::pszEnumEntry
CONST	ENDS
;	COMDAT ??_C@_0CG@PPJD@?$CDdefine?5WAVEBANK_?$CFs_ENTRY_COUNT?5@
CONST	SEGMENT
??_C@_0CG@PPJD@?$CDdefine?5WAVEBANK_?$CFs_ENTRY_COUNT?5@ DB '#define WAVE'
	DB	'BANK_%s_ENTRY_COUNT %lu', 0dH, 0aH, 00H	; `string'
CONST	ENDS
CONST	SEGMENT
?pszEnumCount@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB DD FLAT:??_C@_0CG@PPJD@?$CDdefine?5WAVEBANK_?$CFs_ENTRY_COUNT?5@ ; `CWaveBank::GenerateHeader'::`2'::pszEnumCount
CONST	ENDS
PUBLIC	?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z	; InsertTailListUninit
PUBLIC	??0CWaveBankEntry@@QAE@PAVCWaveBank@@@Z		; CWaveBankEntry::CWaveBankEntry
PUBLIC	?Initialize@CWaveBankEntry@@UAEJPBD0K@Z		; CWaveBankEntry::Initialize
PUBLIC	?Load@CWaveBankEntry@@UAEJH@Z			; CWaveBankEntry::Load
PUBLIC	?SetName@CWaveBankEntry@@UAEJPBD@Z		; CWaveBankEntry::SetName
PUBLIC	?GetValidFlags@CWaveBankEntry@@UAEKXZ		; CWaveBankEntry::GetValidFlags
PUBLIC	?SetFlags@CWaveBankEntry@@UAEKKK@Z		; CWaveBankEntry::SetFlags
PUBLIC	?GetMetaData@CWaveBankEntry@@UAEJPAU_WAVEBANKENTRY@@KKPAK@Z ; CWaveBankEntry::GetMetaData
PUBLIC	?CommitWaveData@CWaveBankEntry@@UAEJPAVCWaveBankCallback@@PAVCStdFileStream@WaveLoader@@KPBU_WAVEBANKENTRY@@PAXK@Z ; CWaveBankEntry::CommitWaveData
PUBLIC	?FindDuplicateEntry@CWaveBankEntry@@MAEJPBDPAI01@Z ; CWaveBankEntry::FindDuplicateEntry
PUBLIC	??_7CWaveBankEntry@@6B@				; CWaveBankEntry::`vftable'
PUBLIC	??_GCWaveBankEntry@@UAEPAXI@Z			; CWaveBankEntry::`scalar deleting destructor'
PUBLIC	??_ECWaveBankEntry@@UAEPAXI@Z			; CWaveBankEntry::`vector deleting destructor'
;	COMDAT ??_7CWaveBankEntry@@6B@
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
CONST	SEGMENT
??_7CWaveBankEntry@@6B@ DD FLAT:??_ECWaveBankEntry@@UAEPAXI@Z ; CWaveBankEntry::`vftable'
	DD	FLAT:?Initialize@CWaveBankEntry@@UAEJPBD0K@Z
	DD	FLAT:?Load@CWaveBankEntry@@UAEJH@Z
	DD	FLAT:?SetName@CWaveBankEntry@@UAEJPBD@Z
	DD	FLAT:?GetValidFlags@CWaveBankEntry@@UAEKXZ
	DD	FLAT:?SetFlags@CWaveBankEntry@@UAEKKK@Z
	DD	FLAT:?GetMetaData@CWaveBankEntry@@UAEJPAU_WAVEBANKENTRY@@KKPAK@Z
	DD	FLAT:?CommitWaveData@CWaveBankEntry@@UAEJPAVCWaveBankCallback@@PAVCStdFileStream@WaveLoader@@KPBU_WAVEBANKENTRY@@PAXK@Z
	DD	FLAT:?FindDuplicateEntry@CWaveBankEntry@@MAEJPBDPAI01@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWaveBankEntry@@QAE@PAVCWaveBank@@@Z
_TEXT	SEGMENT
_pParent$ = 8
_this$ = -4
??0CWaveBankEntry@@QAE@PAVCWaveBank@@@Z PROC NEAR	; CWaveBankEntry::CWaveBankEntry, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBankEntry@@6B@ ; CWaveBankEntry::`vftable'

; 90   :     DPF_ENTER();
; 91   : 
; 92   :     m_pParent = pParent;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _pParent$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 93   : 
; 94   :     InsertTailListUninit(&m_pParent->m_lstEntries, &m_leEntry);

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 c0 08	 add	 eax, 8
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	81 c2 38 02 00
	00		 add	 edx, 568		; 00000238H
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailListUninit

; 95   : 
; 96   :     m_pParent->m_dwEntryCount++;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8b 91 40 02 00
	00		 mov	 edx, DWORD PTR [ecx+576]
  0003e	83 c2 01	 add	 edx, 1
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00047	89 91 40 02 00
	00		 mov	 DWORD PTR [ecx+576], edx

; 97   :     m_pParent->m_pParent->m_dwEntryCount++;

  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00053	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00056	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00059	83 c2 01	 add	 edx, 1
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00062	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00065	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 98   : 
; 99   :     DPF_LEAVE_VOID();
; 100  : }

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
??0CWaveBankEntry@@QAE@PAVCWaveBank@@@Z ENDP		; CWaveBankEntry::CWaveBankEntry
_TEXT	ENDS
PUBLIC	?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList
PUBLIC	??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
CONST	SEGMENT
??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\dsound\common\ntlist.h', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z
_TEXT	SEGMENT
_ListHead$ = 8
_Entry$ = 12
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z PROC NEAR	; InsertTailListUninit, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  :     AssertValidEntryList(ListHead, ASSERT_VALID_ONLY);

  00003	68 88 00 00 00	 push	 136			; 00000088H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _ListHead$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 137  : 
; 138  :     Entry->Flink = ListHead;

  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _ListHead$[ebp]
  0001e	89 11		 mov	 DWORD PTR [ecx], edx

; 139  :     Entry->Blink = ListHead->Blink;

  00020	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _ListHead$[ebp]
  00026	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00029	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 140  :     
; 141  :     Entry->Flink->Blink = Entry;

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00034	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 142  :     Entry->Blink->Flink = Entry;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  0003a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003d	8b 55 0c	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	89 11		 mov	 DWORD PTR [ecx], edx

; 143  : 
; 144  :     AssertValidEntryList(Entry, ASSERT_IN_LIST);

  00042	68 90 00 00 00	 push	 144			; 00000090H
  00047	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0004c	6a 01		 push	 1
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _Entry$[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 145  : }    

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ENDP	; InsertTailListUninit
_TEXT	ENDS
PUBLIC	??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@	; `string'
PUBLIC	??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ ; `string'
PUBLIC	??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ ; `string'
PUBLIC	??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@	; `string'
PUBLIC	??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@	; `string'
EXTRN	?Assert@CDebug@DirectSound@@SAXHPBD0I@Z:NEAR	; DirectSound::CDebug::Assert
;	COMDAT ??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@
CONST	SEGMENT
??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@ DB 'NULL list entry pointe'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@
CONST	SEGMENT
??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ DB 'List entry conta'
	DB	'ins NULL pointer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@
CONST	SEGMENT
??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ DB 'List entry part'
	DB	'ially points to itself', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@
CONST	SEGMENT
??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@ DB 'List entry not in list'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@
CONST	SEGMENT
??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@ DB 'List entry in list', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z
_TEXT	SEGMENT
_Entry$ = 8
_nFlags$ = 12
_pszFile$ = 16
_nLine$ = 20
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z PROC NEAR ; __AssertValidEntryList, COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     if(!Entry)

  00003	83 7d 08 00	 cmp	 DWORD PTR _Entry$[ebp], 0
  00007	75 1c		 jne	 SHORT $L47475

; 57   :     {
; 58   :         DirectSound::CDebug::Assert(TRUE, "NULL list entry pointer", pszFile, nLine);

  00009	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@EAEP@NULL?5list?5entry?5pointer?$AA@ ; `string'
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0001d	83 c4 10	 add	 esp, 16			; 00000010H

; 59   :     }
; 60   :     else if(!Entry->Flink || !Entry->Blink)

  00020	e9 c0 00 00 00	 jmp	 $L47477
$L47475:
  00025	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00028	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0002b	74 09		 je	 SHORT $L47479
  0002d	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	75 1c		 jne	 SHORT $L47478
$L47479:

; 61   :     {
; 62   :         DirectSound::CDebug::Assert(TRUE, "List entry contains NULL pointer", pszFile, nLine);

  00036	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  0003d	52		 push	 edx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CB@DLOI@List?5entry?5contains?5NULL?5pointer@ ; `string'
  00043	6a 01		 push	 1
  00045	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :     }
; 64   :     else if((Entry == Entry->Flink) || (Entry == Entry->Blink))

  0004d	e9 93 00 00 00	 jmp	 $L47481
$L47478:
  00052	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00058	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005a	74 0b		 je	 SHORT $L47483
  0005c	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00062	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00065	75 2e		 jne	 SHORT $L47482
$L47483:

; 65   :     {
; 66   :         if((Entry != Entry->Flink) || (Entry != Entry->Blink))

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0006d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0006f	75 0b		 jne	 SHORT $L47485
  00071	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00077	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007a	74 17		 je	 SHORT $L47484
$L47485:

; 67   :         {
; 68   :             DirectSound::CDebug::Assert(TRUE, "List entry partially points to itself", pszFile, nLine);

  0007c	8b 55 14	 mov	 edx, DWORD PTR _nLine$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 10	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@BJAJ@List?5entry?5partially?5points?5to?5i@ ; `string'
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00090	83 c4 10	 add	 esp, 16			; 00000010H
$L47484:

; 69   :         }
; 70   :     }
; 71   :     else if(ASSERT_IN_LIST == nFlags)

  00093	eb 50		 jmp	 SHORT $L47487
$L47482:
  00095	83 7d 0c 01	 cmp	 DWORD PTR _nFlags$[ebp], 1
  00099	75 23		 jne	 SHORT $L47488

; 72   :     {
; 73   :         if(!IsEntryInList(Entry))

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0009e	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000a1	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000a3	75 17		 jne	 SHORT $L47489

; 74   :         {
; 75   :             DirectSound::CDebug::Assert(TRUE, "List entry not in list", pszFile, nLine);

  000a5	8b 45 14	 mov	 eax, DWORD PTR _nLine$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 10	 mov	 ecx, DWORD PTR _pszFile$[ebp]
  000ac	51		 push	 ecx
  000ad	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@GJDM@List?5entry?5not?5in?5list?$AA@ ; `string'
  000b2	6a 01		 push	 1
  000b4	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000b9	83 c4 10	 add	 esp, 16			; 00000010H
$L47489:

; 76   :         }
; 77   :     }
; 78   :     else if(ASSERT_NOT_IN_LIST == nFlags)

  000bc	eb 27		 jmp	 SHORT $L47491
$L47488:
  000be	83 7d 0c 02	 cmp	 DWORD PTR _nFlags$[ebp], 2
  000c2	75 21		 jne	 SHORT $L47492

; 79   :     {
; 80   :         if(IsEntryInList(Entry))

  000c4	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  000c7	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  000ca	3b 02		 cmp	 eax, DWORD PTR [edx]
  000cc	74 17		 je	 SHORT $L47493

; 81   :         {
; 82   :             DirectSound::CDebug::Assert(TRUE, "List entry in list", pszFile, nLine);

  000ce	8b 4d 14	 mov	 ecx, DWORD PTR _nLine$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 10	 mov	 edx, DWORD PTR _pszFile$[ebp]
  000d5	52		 push	 edx
  000d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@JAPH@List?5entry?5in?5list?$AA@ ; `string'
  000db	6a 01		 push	 1
  000dd	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e2	83 c4 10	 add	 esp, 16			; 00000010H
$L47493:
$L47492:
$L47491:
$L47487:
$L47481:
$L47477:

; 83   :         }
; 84   :     }
; 85   : }

  000e5	5d		 pop	 ebp
  000e6	c2 10 00	 ret	 16			; 00000010H
?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ENDP ; __AssertValidEntryList
_TEXT	ENDS
PUBLIC	??1CWaveBankEntry@@UAE@XZ			; CWaveBankEntry::~CWaveBankEntry
; Function compile flags: /Odt
;	COMDAT ??_GCWaveBankEntry@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCWaveBankEntry@@UAEPAXI@Z PROC NEAR			; CWaveBankEntry::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWaveBankEntry@@UAE@XZ ; CWaveBankEntry::~CWaveBankEntry
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L48880
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L48880:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWaveBankEntry@@UAEPAXI@Z ENDP			; CWaveBankEntry::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolFree
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_pvBuffer$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 244  : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  :     DirectSound::CMemoryManager::TrackingMemFree(pvBuffer); 

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree

; 246  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
PUBLIC	??_C@_0BK@DIHO@m_pParent?9?$DOm_dwEntryCount?$AA@ ; `string'
PUBLIC	??_C@_0CF@JFMP@m_pParent?9?$DOm_pParent?9?$DOm_dwEntryC@ ; `string'
PUBLIC	?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z	; RemoveEntryList
;	COMDAT ??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
CONST	SEGMENT
??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\common\wavbndlr\writer.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DIHO@m_pParent?9?$DOm_dwEntryCount?$AA@
CONST	SEGMENT
??_C@_0BK@DIHO@m_pParent?9?$DOm_dwEntryCount?$AA@ DB 'm_pParent->m_dwEntr'
	DB	'yCount', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JFMP@m_pParent?9?$DOm_pParent?9?$DOm_dwEntryC@
CONST	SEGMENT
??_C@_0CF@JFMP@m_pParent?9?$DOm_pParent?9?$DOm_dwEntryC@ DB 'm_pParent->m'
	DB	'_pParent->m_dwEntryCount', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??1CWaveBankEntry@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CWaveBankEntry@@UAE@XZ PROC NEAR			; CWaveBankEntry::~CWaveBankEntry, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBankEntry@@6B@ ; CWaveBankEntry::`vftable'

; 126  :     DPF_ENTER();
; 127  : 
; 128  :     RemoveEntryList(&m_leEntry);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 129  : 
; 130  :     ASSERT(m_pParent->m_dwEntryCount);

  0001c	68 82 00 00 00	 push	 130			; 00000082H
  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DIHO@m_pParent?9?$DOm_dwEntryCount?$AA@ ; `string'
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	33 c9		 xor	 ecx, ecx
  00033	83 b8 40 02 00
	00 00		 cmp	 DWORD PTR [eax+576], 0
  0003a	0f 94 c1	 sete	 cl
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00043	83 c4 10	 add	 esp, 16			; 00000010H

; 131  :     m_pParent->m_dwEntryCount--;

  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004c	8b 88 40 02 00
	00		 mov	 ecx, DWORD PTR [eax+576]
  00052	83 e9 01	 sub	 ecx, 1
  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005b	89 88 40 02 00
	00		 mov	 DWORD PTR [eax+576], ecx

; 132  : 
; 133  :     ASSERT(m_pParent->m_pParent->m_dwEntryCount);

  00061	68 85 00 00 00	 push	 133			; 00000085H
  00066	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@JFMP@m_pParent?9?$DOm_pParent?9?$DOm_dwEntryC@ ; `string'
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00076	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00079	33 c9		 xor	 ecx, ecx
  0007b	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0007f	0f 94 c1	 sete	 cl
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00088	83 c4 10	 add	 esp, 16			; 00000010H

; 134  :     m_pParent->m_pParent->m_dwEntryCount--;

  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00091	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00094	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00097	83 ea 01	 sub	 edx, 1
  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a3	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 135  : 
; 136  :     DPF_LEAVE_VOID();
; 137  : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
??1CWaveBankEntry@@UAE@XZ ENDP				; CWaveBankEntry::~CWaveBankEntry
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\ntlist.h
_TEXT	ENDS
;	COMDAT ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z
_TEXT	SEGMENT
_Entry$ = 8
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z PROC NEAR	; RemoveEntryList, COMDAT

; 215  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 216  :     AssertValidEntryList(Entry, ASSERT_VALID_ONLY);

  00003	68 d8 00 00 00	 push	 216			; 000000d8H
  00008	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DH@MICE@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0000d	6a 00		 push	 0
  0000f	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?__AssertValidEntryList@@YGXPAU_LIST_ENTRY@@W4ASSERT_VALID_ENTRY_LIST@@PBDI@Z ; __AssertValidEntryList

; 217  : 
; 218  :     if(IsEntryInList(Entry))

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0001e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00020	74 2c		 je	 SHORT $L47515

; 219  :     {
; 220  :         Entry->Flink->Blink = Entry->Blink;

  00022	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0002a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 221  :         Entry->Blink->Flink = Entry->Flink;

  00030	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00036	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	89 0a		 mov	 DWORD PTR [edx], ecx

; 222  : 
; 223  :         Entry->Flink = Entry->Blink = Entry;

  0003d	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  00040	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]
  00043	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _Entry$[ebp]
  00049	8b 55 08	 mov	 edx, DWORD PTR _Entry$[ebp]
  0004c	89 11		 mov	 DWORD PTR [ecx], edx
$L47515:

; 224  :     }
; 225  : 
; 226  :     return Entry;

  0004e	8b 45 08	 mov	 eax, DWORD PTR _Entry$[ebp]

; 227  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ENDP	; RemoveEntryList
_TEXT	ENDS
PUBLIC	??_C@_0M@IOKM@pszFileName?$AA@			; `string'
PUBLIC	??_C@_08IMGB@WAVBNDLR?$AA@			; `string'
PUBLIC	??_C@_0BL@LDEE@CWaveBankEntry?3?3Initialize?$AA@ ; `string'
PUBLIC	??_C@_0FD@FKMK@An?5entry?5with?5that?5name?5already?5@ ; `string'
PUBLIC	??_C@_0DI@JGFL@An?5entry?5using?5that?5filename?5alr@ ; `string'
EXTRN	__imp__GetFullPathNameA@16:NEAR
EXTRN	?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z:NEAR ; DirectSound::CDebug::SetContext
EXTRN	?Print@CDebug@DirectSound@@SAXPBDZZ:NEAR	; DirectSound::CDebug::Print
EXTRN	_strncpy:NEAR
EXTRN	__splitpath:NEAR
;	COMDAT ??_C@_0M@IOKM@pszFileName?$AA@
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
CONST	SEGMENT
??_C@_0M@IOKM@pszFileName?$AA@ DB 'pszFileName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IMGB@WAVBNDLR?$AA@
CONST	SEGMENT
??_C@_08IMGB@WAVBNDLR?$AA@ DB 'WAVBNDLR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LDEE@CWaveBankEntry?3?3Initialize?$AA@
CONST	SEGMENT
??_C@_0BL@LDEE@CWaveBankEntry?3?3Initialize?$AA@ DB 'CWaveBankEntry::Init'
	DB	'ialize', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@FKMK@An?5entry?5with?5that?5name?5already?5@
CONST	SEGMENT
??_C@_0FD@FKMK@An?5entry?5with?5that?5name?5already?5@ DB 'An entry with '
	DB	'that name already exists in the bank, or that name has been r'
	DB	'eserved', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JGFL@An?5entry?5using?5that?5filename?5alr@
CONST	SEGMENT
??_C@_0DI@JGFL@An?5entry?5using?5that?5filename?5alr@ DB 'An entry using '
	DB	'that filename already exists in the bank', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Initialize@CWaveBankEntry@@UAEJPBD0K@Z
_TEXT	SEGMENT
_pszEntryName$ = 8
_pszFileName$ = 12
_dwFlags$ = 16
_this$ = -16
_hr$ = -12
_nNameCount$ = -8
_nFileCount$ = -4
?Initialize@CWaveBankEntry@@UAEJPBD0K@Z PROC NEAR	; CWaveBankEntry::Initialize, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 168  :     HRESULT                 hr          = S_OK;

  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 169  :     UINT                    nNameCount;
; 170  :     UINT                    nFileCount;
; 171  :     
; 172  :     DPF_ENTER();
; 173  : 
; 174  :     ASSERT(pszFileName);

  00010	68 ae 00 00 00	 push	 174			; 000000aeH
  00015	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@IOKM@pszFileName?$AA@ ; `string'
  0001f	33 c0		 xor	 eax, eax
  00021	83 7d 0c 00	 cmp	 DWORD PTR _pszFileName$[ebp], 0
  00025	0f 94 c0	 sete	 al
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0002e	83 c4 10	 add	 esp, 16			; 00000010H

; 175  : 
; 176  :     //
; 177  :     // Save the file path
; 178  :     //
; 179  : 
; 180  :     GetFullPathName(pszFileName, NUMELMS(m_szFileName), m_szFileName, NULL);

  00031	6a 00		 push	 0
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  0003c	51		 push	 ecx
  0003d	68 04 01 00 00	 push	 260			; 00000104H
  00042	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFullPathNameA@16

; 181  : 
; 182  :     //
; 183  :     // Save the flags
; 184  :     //
; 185  : 
; 186  :     m_dwFlags = dwFlags;

  0004c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00052	89 88 28 03 00
	00		 mov	 DWORD PTR [eax+808], ecx

; 187  : 
; 188  :     //
; 189  :     // If no entry name was specified, generate one from the file name
; 190  :     //
; 191  : 
; 192  :     if(pszEntryName)

  00058	83 7d 08 00	 cmp	 DWORD PTR _pszEntryName$[ebp], 0
  0005c	74 1a		 je	 SHORT $L48899

; 193  :     {
; 194  :         _tcsncpy(m_szEntryName, pszEntryName, NUMELMS(m_szEntryName));

  0005e	68 00 01 00 00	 push	 256			; 00000100H
  00063	8b 55 08	 mov	 edx, DWORD PTR _pszEntryName$[ebp]
  00066	52		 push	 edx
  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	83 c0 10	 add	 eax, 16			; 00000010H
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _strncpy
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  :     }
; 196  :     else

  00076	eb 1f		 jmp	 SHORT $L48900
$L48899:

; 197  :     {
; 198  :         _splitpath(m_szFileName, NULL, NULL, m_szEntryName, NULL);

  00078	6a 00		 push	 0
  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	83 c1 10	 add	 ecx, 16			; 00000010H
  00080	51		 push	 ecx
  00081	6a 00		 push	 0
  00083	6a 00		 push	 0
  00085	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00088	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 __splitpath
  00094	83 c4 14	 add	 esp, 20			; 00000014H
$L48900:

; 199  :     }
; 200  : 
; 201  :     _tcsncpy(m_szHeaderName, m_szEntryName, NUMELMS(m_szHeaderName));

  00097	68 00 01 00 00	 push	 256			; 00000100H
  0009c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	83 c0 10	 add	 eax, 16			; 00000010H
  000a2	50		 push	 eax
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  000ac	51		 push	 ecx
  000ad	e8 00 00 00 00	 call	 _strncpy
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  :     MakeHeaderString(m_szHeaderName);

  000b5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	81 c2 10 01 00
	00		 add	 edx, 272		; 00000110H
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 ?MakeHeaderString@@YGXPAD@Z ; MakeHeaderString

; 203  : 
; 204  :     FindDuplicateEntry(m_szHeaderName, &nNameCount, m_szFileName, &nFileCount);

  000c4	8d 45 fc	 lea	 eax, DWORD PTR _nFileCount$[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  000d1	51		 push	 ecx
  000d2	8d 55 f8	 lea	 edx, DWORD PTR _nNameCount$[ebp]
  000d5	52		 push	 edx
  000d6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	05 10 01 00 00	 add	 eax, 272		; 00000110H
  000de	50		 push	 eax
  000df	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	ff 52 20	 call	 DWORD PTR [edx+32]

; 205  : 
; 206  :     if(nNameCount)

  000ea	83 7d f8 00	 cmp	 DWORD PTR _nNameCount$[ebp], 0
  000ee	74 36		 je	 SHORT $L48901

; 207  :     {
; 208  :         DPF_ERROR("An entry with that name already exists in the bank, or that name has been reserved");

  000f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  000f5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@LDEE@CWaveBankEntry?3?3Initialize?$AA@ ; `string'
  000fa	68 d0 00 00 00	 push	 208			; 000000d0H
  000ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00104	6a 01		 push	 1
  00106	6a 09		 push	 9
  00108	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0010d	83 c4 18	 add	 esp, 24			; 00000018H
  00110	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FD@FKMK@An?5entry?5with?5that?5name?5already?5@ ; `string'
  00115	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0011a	83 c4 04	 add	 esp, 4

; 209  :         hr = E_FAIL;

  0011d	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 210  :     }
; 211  :     else if(nFileCount)

  00124	eb 33		 jmp	 SHORT $L48906
$L48901:
  00126	83 7d fc 00	 cmp	 DWORD PTR _nFileCount$[ebp], 0
  0012a	74 2d		 je	 SHORT $L48907

; 212  :     {
; 213  :         DPF_WARNING("An entry using that filename already exists in the bank");

  0012c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00131	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BL@LDEE@CWaveBankEntry?3?3Initialize?$AA@ ; `string'
  00136	68 d5 00 00 00	 push	 213			; 000000d5H
  0013b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00140	6a 03		 push	 3
  00142	6a 09		 push	 9
  00144	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00149	83 c4 18	 add	 esp, 24			; 00000018H
  0014c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DI@JGFL@An?5entry?5using?5that?5filename?5alr@ ; `string'
  00151	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00156	83 c4 04	 add	 esp, 4
$L48907:
$L48906:

; 214  :     }
; 215  : 
; 216  :     //
; 217  :     // Open the file
; 218  :     //
; 219  : 
; 220  :     if(SUCCEEDED(hr) && m_fAutoLoad)

  00159	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015d	7c 19		 jl	 SHORT $L48910
  0015f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_fAutoLoad@CWaveBankEntry@@2HA, 0 ; CWaveBankEntry::m_fAutoLoad
  00166	74 10		 je	 SHORT $L48910

; 221  :     {
; 222  :         hr = Load();

  00168	6a 00		 push	 0
  0016a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	8b 10		 mov	 edx, DWORD PTR [eax]
  0016f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00172	ff 52 08	 call	 DWORD PTR [edx+8]
  00175	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$L48910:

; 223  :     }
; 224  :     
; 225  :     DPF_LEAVE_HRESULT(hr);
; 226  : 
; 227  :     return hr;

  00178	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]

; 228  : }

  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c2 0c 00	 ret	 12			; 0000000cH
?Initialize@CWaveBankEntry@@UAEJPBD0K@Z ENDP		; CWaveBankEntry::Initialize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?MakeHeaderString@@YGXPAD@Z
_TEXT	SEGMENT
_pszString$ = 8
?MakeHeaderString@@YGXPAD@Z PROC NEAR			; MakeHeaderString, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$L48865:

; 45   :     while(*pszString)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pszString$[ebp]
  00006	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 67		 je	 SHORT $L48866

; 46   :     {
; 47   :         if((*pszString >= TEXT('a')) && (*pszString <= TEXT('z')))

  0000d	8b 55 08	 mov	 edx, DWORD PTR _pszString$[ebp]
  00010	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00013	83 f8 61	 cmp	 eax, 97			; 00000061H
  00016	7c 1b		 jl	 SHORT $L48867
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0001b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0001e	83 fa 7a	 cmp	 edx, 122		; 0000007aH
  00021	7f 10		 jg	 SHORT $L48867

; 48   :         {
; 49   :             *pszString = TEXT('A') + *pszString - TEXT('a');

  00023	8b 45 08	 mov	 eax, DWORD PTR _pszString$[ebp]
  00026	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00029	83 e9 20	 sub	 ecx, 32			; 00000020H
  0002c	8b 55 08	 mov	 edx, DWORD PTR _pszString$[ebp]
  0002f	88 0a		 mov	 BYTE PTR [edx], cl

; 50   :         }
; 51   :         else if((*pszString >= TEXT('A')) && (*pszString <= TEXT('Z')))

  00031	eb 36		 jmp	 SHORT $L48868
$L48867:
  00033	8b 45 08	 mov	 eax, DWORD PTR _pszString$[ebp]
  00036	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00039	83 f9 41	 cmp	 ecx, 65			; 00000041H
  0003c	7c 0d		 jl	 SHORT $L48869
  0003e	8b 55 08	 mov	 edx, DWORD PTR _pszString$[ebp]
  00041	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00044	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  00047	7f 02		 jg	 SHORT $L48869

; 52   :         {
; 53   :         }
; 54   :         else if((*pszString >= TEXT('0')) && (*pszString <= TEXT('9')))

  00049	eb 1e		 jmp	 SHORT $L48870
$L48869:
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _pszString$[ebp]
  0004e	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00051	83 fa 30	 cmp	 edx, 48			; 00000030H
  00054	7c 0d		 jl	 SHORT $L48871
  00056	8b 45 08	 mov	 eax, DWORD PTR _pszString$[ebp]
  00059	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0005c	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0005f	7f 02		 jg	 SHORT $L48871

; 55   :         {
; 56   :         }
; 57   :         else

  00061	eb 06		 jmp	 SHORT $L48872
$L48871:

; 58   :         {
; 59   :             *pszString = TEXT('_');

  00063	8b 55 08	 mov	 edx, DWORD PTR _pszString$[ebp]
  00066	c6 02 5f	 mov	 BYTE PTR [edx], 95	; 0000005fH
$L48872:
$L48870:
$L48868:

; 60   :         }
; 61   : 
; 62   :         pszString++;

  00069	8b 45 08	 mov	 eax, DWORD PTR _pszString$[ebp]
  0006c	83 c0 01	 add	 eax, 1
  0006f	89 45 08	 mov	 DWORD PTR _pszString$[ebp], eax

; 63   :     }

  00072	eb 8f		 jmp	 SHORT $L48865
$L48866:

; 64   : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?MakeHeaderString@@YGXPAD@Z ENDP			; MakeHeaderString
_TEXT	ENDS
PUBLIC	??_C@_0BD@LKKO@pszName?5?$HM?$HM?5pszPath?$AA@	; `string'
PUBLIC	??_C@_0M@JHGL@ENTRY_COUNT?$AA@			; `string'
EXTRN	__stricmp:NEAR
;	COMDAT ??_C@_0BD@LKKO@pszName?5?$HM?$HM?5pszPath?$AA@
CONST	SEGMENT
??_C@_0BD@LKKO@pszName?5?$HM?$HM?5pszPath?$AA@ DB 'pszName || pszPath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JHGL@ENTRY_COUNT?$AA@
CONST	SEGMENT
??_C@_0M@JHGL@ENTRY_COUNT?$AA@ DB 'ENTRY_COUNT', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?FindDuplicateEntry@CWaveBankEntry@@MAEJPBDPAI01@Z
_TEXT	SEGMENT
_pszName$ = 8
_pnNameCount$ = 12
_pszPath$ = 16
_pnPathCount$ = 20
_this$ = -16
_hr$ = -8
_pleEntry$ = -12
_pEntry$ = -4
?FindDuplicateEntry@CWaveBankEntry@@MAEJPBDPAI01@Z PROC NEAR ; CWaveBankEntry::FindDuplicateEntry, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 261  :     HRESULT                 hr          = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 262  :     PLIST_ENTRY             pleEntry;
; 263  :     CWaveBankEntry *        pEntry;
; 264  :     
; 265  :     DPF_ENTER();
; 266  : 
; 267  :     ASSERT(pszName || pszPath);

  00010	83 7d 08 00	 cmp	 DWORD PTR _pszName$[ebp], 0
  00014	75 0f		 jne	 SHORT $L49722
  00016	83 7d 10 00	 cmp	 DWORD PTR _pszPath$[ebp], 0
  0001a	75 09		 jne	 SHORT $L49722
  0001c	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR -20+[ebp], 1
  00023	eb 07		 jmp	 SHORT $L49723
$L49722:
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L49723:
  0002c	68 0b 01 00 00	 push	 267			; 0000010bH
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@LKKO@pszName?5?$HM?$HM?5pszPath?$AA@ ; `string'
  0003b	8b 45 ec	 mov	 eax, DWORD PTR -20+[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 268  : 
; 269  :     if(pnNameCount)

  00047	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  0004b	74 09		 je	 SHORT $L48923

; 270  :     {
; 271  :         *pnNameCount = 0;

  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _pnNameCount$[ebp]
  00050	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L48923:

; 272  :     }
; 273  : 
; 274  :     if(pnPathCount)

  00056	83 7d 14 00	 cmp	 DWORD PTR _pnPathCount$[ebp], 0
  0005a	74 09		 je	 SHORT $L48924

; 275  :     {
; 276  :         *pnPathCount = 0;

  0005c	8b 55 14	 mov	 edx, DWORD PTR _pnPathCount$[ebp]
  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L48924:

; 277  :     }
; 278  : 
; 279  :     if(pszName)

  00065	83 7d 08 00	 cmp	 DWORD PTR _pszName$[ebp], 0
  00069	74 2f		 je	 SHORT $L48925

; 280  :     {
; 281  :         if(!_tcsicmp(pszName, WBCHEADER_ENTRYCOUNTSHORTNAME))

  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@JHGL@ENTRY_COUNT?$AA@ ; `string'
  00070	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 __stricmp
  00079	83 c4 08	 add	 esp, 8
  0007c	85 c0		 test	 eax, eax
  0007e	75 1a		 jne	 SHORT $L48926

; 282  :         {
; 283  :             hr = E_FAIL;

  00080	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 284  :             
; 285  :             if(pnNameCount)

  00087	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  0008b	74 0d		 je	 SHORT $L48929

; 286  :             {
; 287  :                 *pnNameCount += 1;

  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _pnNameCount$[ebp]
  00090	8b 11		 mov	 edx, DWORD PTR [ecx]
  00092	83 c2 01	 add	 edx, 1
  00095	8b 45 0c	 mov	 eax, DWORD PTR _pnNameCount$[ebp]
  00098	89 10		 mov	 DWORD PTR [eax], edx
$L48929:
$L48926:
$L48925:

; 288  :             }
; 289  :         }
; 290  :     }
; 291  : 
; 292  :     for(pleEntry = m_pParent->m_lstEntries.Flink; pleEntry != &m_pParent->m_lstEntries; pleEntry = pleEntry->Flink)

  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a0	8b 82 38 02 00
	00		 mov	 eax, DWORD PTR [edx+568]
  000a6	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  000a9	eb 08		 jmp	 SHORT $L48930
$L48931:
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  000ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b0	89 55 f4	 mov	 DWORD PTR _pleEntry$[ebp], edx
$L48930:
  000b3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b9	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  000bf	39 4d f4	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  000c2	0f 84 a2 00 00
	00		 je	 $L48932

; 293  :     {
; 294  :         if(FAILED(hr) && !pnNameCount && !pnPathCount)

  000c8	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000cc	7d 11		 jge	 SHORT $L48934
  000ce	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  000d2	75 0b		 jne	 SHORT $L48934
  000d4	83 7d 14 00	 cmp	 DWORD PTR _pnPathCount$[ebp], 0
  000d8	75 05		 jne	 SHORT $L48934

; 295  :         {
; 296  :             break;

  000da	e9 8b 00 00 00	 jmp	 $L48932
$L48934:

; 297  :         }
; 298  :         
; 299  :         if(this == (pEntry = CONTAINING_RECORD(pleEntry, CWaveBankEntry, m_leEntry)))

  000df	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  000e2	83 ea 08	 sub	 edx, 8
  000e5	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx
  000e8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	3b 45 fc	 cmp	 eax, DWORD PTR _pEntry$[ebp]
  000ee	75 02		 jne	 SHORT $L48939

; 300  :         {
; 301  :             continue;

  000f0	eb b9		 jmp	 SHORT $L48931
$L48939:

; 302  :         }
; 303  : 
; 304  :         if(pszName)

  000f2	83 7d 08 00	 cmp	 DWORD PTR _pszName$[ebp], 0
  000f6	74 34		 je	 SHORT $L48940

; 305  :         {
; 306  :             if(!_tcsicmp(pszName, pEntry->m_szHeaderName))

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  000fb	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  00101	51		 push	 ecx
  00102	8b 55 08	 mov	 edx, DWORD PTR _pszName$[ebp]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 __stricmp
  0010b	83 c4 08	 add	 esp, 8
  0010e	85 c0		 test	 eax, eax
  00110	75 1a		 jne	 SHORT $L48941

; 307  :             {
; 308  :                 hr = E_FAIL;

  00112	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 309  :                 
; 310  :                 if(pnNameCount)

  00119	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  0011d	74 0d		 je	 SHORT $L48943

; 311  :                 {
; 312  :                     *pnNameCount += 1;

  0011f	8b 45 0c	 mov	 eax, DWORD PTR _pnNameCount$[ebp]
  00122	8b 08		 mov	 ecx, DWORD PTR [eax]
  00124	83 c1 01	 add	 ecx, 1
  00127	8b 55 0c	 mov	 edx, DWORD PTR _pnNameCount$[ebp]
  0012a	89 0a		 mov	 DWORD PTR [edx], ecx
$L48943:
$L48941:
$L48940:

; 313  :                 }
; 314  :             }
; 315  :         }
; 316  : 
; 317  :         if(pszPath)

  0012c	83 7d 10 00	 cmp	 DWORD PTR _pszPath$[ebp], 0
  00130	74 33		 je	 SHORT $L48944

; 318  :         {
; 319  :             if(!_tcsicmp(pszPath, pEntry->m_szFileName))

  00132	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00135	05 10 02 00 00	 add	 eax, 528		; 00000210H
  0013a	50		 push	 eax
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR _pszPath$[ebp]
  0013e	51		 push	 ecx
  0013f	e8 00 00 00 00	 call	 __stricmp
  00144	83 c4 08	 add	 esp, 8
  00147	85 c0		 test	 eax, eax
  00149	75 1a		 jne	 SHORT $L48945

; 320  :             {
; 321  :                 hr = E_FAIL;

  0014b	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 322  :                 
; 323  :                 if(pnPathCount)

  00152	83 7d 14 00	 cmp	 DWORD PTR _pnPathCount$[ebp], 0
  00156	74 0d		 je	 SHORT $L48947

; 324  :                 {
; 325  :                     *pnPathCount += 1;

  00158	8b 55 14	 mov	 edx, DWORD PTR _pnPathCount$[ebp]
  0015b	8b 02		 mov	 eax, DWORD PTR [edx]
  0015d	83 c0 01	 add	 eax, 1
  00160	8b 4d 14	 mov	 ecx, DWORD PTR _pnPathCount$[ebp]
  00163	89 01		 mov	 DWORD PTR [ecx], eax
$L48947:
$L48945:
$L48944:

; 326  :                 }
; 327  :             }
; 328  :         }
; 329  :     }

  00165	e9 41 ff ff ff	 jmp	 $L48931
$L48932:

; 330  :     
; 331  :     DPF_LEAVE_HRESULT(hr);
; 332  : 
; 333  :     return hr;

  0016a	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 334  : }

  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c2 10 00	 ret	 16			; 00000010H
?FindDuplicateEntry@CWaveBankEntry@@MAEJPBDPAI01@Z ENDP	; CWaveBankEntry::FindDuplicateEntry
_TEXT	ENDS
PUBLIC	??_C@_0BI@GKGB@CWaveBankEntry?3?3SetName?$AA@	; `string'
PUBLIC	??_C@_0BG@EPOG@That?5name?5is?5too?5long?$AA@	; `string'
EXTRN	_strlen:NEAR
;	COMDAT ??_C@_0BI@GKGB@CWaveBankEntry?3?3SetName?$AA@
CONST	SEGMENT
??_C@_0BI@GKGB@CWaveBankEntry?3?3SetName?$AA@ DB 'CWaveBankEntry::SetName'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EPOG@That?5name?5is?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BG@EPOG@That?5name?5is?5too?5long?$AA@ DB 'That name is too long', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetName@CWaveBankEntry@@UAEJPBD@Z
_TEXT	SEGMENT
_pszName$ = 8
_this$ = -264
_hr$ = -260
_szHeaderName$ = -256
?SetName@CWaveBankEntry@@UAEJPBD@Z PROC NEAR		; CWaveBankEntry::SetName, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 361  :     HRESULT                 hr                                      = S_OK;

  0000f	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _hr$[ebp], 0

; 362  :     TCHAR                   szHeaderName[NUMELMS(m_szHeaderName)];
; 363  : 
; 364  :     if(_tcslen(pszName) >= NUMELMS(m_szEntryName))

  00019	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 _strlen
  00022	83 c4 04	 add	 esp, 4
  00025	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0002a	72 37		 jb	 SHORT $L48955

; 365  :     {
; 366  :         DPF_ERROR("That name is too long");

  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@GKGB@CWaveBankEntry?3?3SetName?$AA@ ; `string'
  00036	68 6e 01 00 00	 push	 366			; 0000016eH
  0003b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00040	6a 01		 push	 1
  00042	6a 09		 push	 9
  00044	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EPOG@That?5name?5is?5too?5long?$AA@ ; `string'
  00051	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00056	83 c4 04	 add	 esp, 4

; 367  :         hr = E_FAIL;

  00059	c7 85 fc fe ff
	ff 05 40 00 80	 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L48955:

; 368  :     }
; 369  : 
; 370  :     if(SUCCEEDED(hr))

  00063	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0006a	0f 8c bc 00 00
	00		 jl	 $L48960

; 371  :     {
; 372  :         _tcsncpy(szHeaderName, pszName, NUMELMS(szHeaderName));

  00070	68 00 01 00 00	 push	 256			; 00000100H
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  00078	51		 push	 ecx
  00079	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _szHeaderName$[ebp]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 _strncpy
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 373  :         MakeHeaderString(szHeaderName);

  00088	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szHeaderName$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?MakeHeaderString@@YGXPAD@Z ; MakeHeaderString

; 374  : 
; 375  :         hr = FindDuplicateEntry(szHeaderName, NULL, NULL, NULL);

  00094	6a 00		 push	 0
  00096	6a 00		 push	 0
  00098	6a 00		 push	 0
  0009a	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _szHeaderName$[ebp]
  000a0	51		 push	 ecx
  000a1	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  000a7	8b 02		 mov	 eax, DWORD PTR [edx]
  000a9	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000af	ff 50 20	 call	 DWORD PTR [eax+32]
  000b2	89 85 fc fe ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax

; 376  : 
; 377  :         if(SUCCEEDED(hr))

  000b8	83 bd fc fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000bf	7c 3e		 jl	 SHORT $L48962

; 378  :         {
; 379  :             _tcsncpy(m_szEntryName, pszName, NUMELMS(m_szEntryName));

  000c1	68 00 01 00 00	 push	 256			; 00000100H
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  000c9	51		 push	 ecx
  000ca	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  000d0	83 c2 10	 add	 edx, 16			; 00000010H
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 _strncpy
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 380  :             _tcsncpy(m_szHeaderName, szHeaderName, NUMELMS(m_szHeaderName));

  000dc	68 00 01 00 00	 push	 256			; 00000100H
  000e1	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szHeaderName$[ebp]
  000e7	50		 push	 eax
  000e8	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 _strncpy
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 381  :         }
; 382  :         else

  000fd	eb 2d		 jmp	 SHORT $L48963
$L48962:

; 383  :         {
; 384  :             DPF_ERROR("An entry with that name already exists in the bank, or that name has been reserved");

  000ff	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00104	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@GKGB@CWaveBankEntry?3?3SetName?$AA@ ; `string'
  00109	68 80 01 00 00	 push	 384			; 00000180H
  0010e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00113	6a 01		 push	 1
  00115	6a 09		 push	 9
  00117	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0011c	83 c4 18	 add	 esp, 24			; 00000018H
  0011f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0FD@FKMK@An?5entry?5with?5that?5name?5already?5@ ; `string'
  00124	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00129	83 c4 04	 add	 esp, 4
$L48963:
$L48960:

; 385  :         }
; 386  :     }
; 387  : 
; 388  :     return hr;

  0012c	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]

; 389  : }

  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
?SetName@CWaveBankEntry@@UAEJPBD@Z ENDP			; CWaveBankEntry::SetName
_TEXT	ENDS
PUBLIC	??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@	; `string'
PUBLIC	??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0DN@CLEF@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0DP@DBDA@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0EE@FGDJ@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0EE@GAIB@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	?Open@CWaveFile@WaveLoader@@QAEJPBD@Z		; WaveLoader::CWaveFile::Open
PUBLIC	?GetFileType@CWaveFile@WaveLoader@@QAEJPAK@Z	; WaveLoader::CWaveFile::GetFileType
PUBLIC	?GetDataOffset@CWaveFile@WaveLoader@@QAEJPAK@Z	; WaveLoader::CWaveFile::GetDataOffset
PUBLIC	?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z	; WaveLoader::CWaveFile::GetDuration
EXTRN	??0CWaveFile@WaveLoader@@QAE@XZ:NEAR		; WaveLoader::CWaveFile::CWaveFile
EXTRN	??1CWaveFile@WaveLoader@@QAE@XZ:NEAR		; WaveLoader::CWaveFile::~CWaveFile
EXTRN	?GetFormat@CWaveFile@WaveLoader@@QAEJPAUtWAVEFORMATEX@@KPAK@Z:NEAR ; WaveLoader::CWaveFile::GetFormat
EXTRN	?GetLoopRegion@CWaveFile@WaveLoader@@QAEJPAK0@Z:NEAR ; WaveLoader::CWaveFile::GetLoopRegion
EXTRN	_WaveBankCompressFormat@8:NEAR
;	COMDAT ??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@
CONST	SEGMENT
??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@ DB 'CWaveBankEntry::Load', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to open %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@CLEF@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0DN@CLEF@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to retrieve the file type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@DBDA@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0DP@DBDA@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to retrieve the file format', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@FGDJ@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0EE@FGDJ@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to retrieve the wave data offset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GAIB@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0EE@GAIB@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to retrieve the wave data length', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Load@CWaveBankEntry@@UAEJH@Z
_TEXT	SEGMENT
_fForce$ = 8
_this$ = -100
_hr$ = -92
_WaveFile$ = -88
_Format$ = -20
$T49730 = -96
?Load@CWaveBankEntry@@UAEJH@Z PROC NEAR			; CWaveBankEntry::Load, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	89 4d 9c	 mov	 DWORD PTR _this$[ebp], ecx

; 416  :     HRESULT                 hr          = S_OK;

  00009	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 417  :     CWaveFile               WaveFile;

  00010	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CWaveFile@WaveLoader@@QAE@XZ ; WaveLoader::CWaveFile::CWaveFile

; 418  :     WAVEBANKUNIWAVEFORMAT   Format;
; 419  :     
; 420  :     DPF_ENTER();
; 421  : 
; 422  :     if(fForce || !m_fLoaded)

  00018	83 7d 08 00	 cmp	 DWORD PTR _fForce$[ebp], 0
  0001c	75 10		 jne	 SHORT $L48973
  0001e	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 b8 30 03 00
	00 00		 cmp	 DWORD PTR [eax+816], 0
  00028	0f 85 26 02 00
	00		 jne	 $L48972
$L48973:

; 423  :     {
; 424  :         //
; 425  :         // Open the file
; 426  :         //
; 427  : 
; 428  :         if(FAILED(hr = WaveFile.Open(m_szFileName)))

  0002e	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  00037	51		 push	 ecx
  00038	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  0003b	e8 00 00 00 00	 call	 ?Open@CWaveFile@WaveLoader@@QAEJPBD@Z ; WaveLoader::CWaveFile::Open
  00040	89 45 a4	 mov	 DWORD PTR _hr$[ebp], eax
  00043	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00047	7d 37		 jge	 SHORT $L48975

; 429  :         {
; 430  :             DPF_ERROR("An error occurred while attempting to open %s", m_szFileName);

  00049	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@ ; `string'
  00053	68 ae 01 00 00	 push	 430			; 000001aeH
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0005d	6a 01		 push	 1
  0005f	6a 09		 push	 9
  00061	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  00072	52		 push	 edx
  00073	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@ ; `string'
  00078	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0007d	83 c4 08	 add	 esp, 8
$L48975:

; 431  :         }
; 432  : 
; 433  :         //
; 434  :         // Load the file format
; 435  :         //
; 436  : 
; 437  :         if(SUCCEEDED(hr))

  00080	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00084	7c 47		 jl	 SHORT $L48979

; 438  :         {
; 439  :             if(FAILED(hr = WaveFile.GetFileType(&m_dwFileType)))

  00086	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00089	05 2c 03 00 00	 add	 eax, 812		; 0000032cH
  0008e	50		 push	 eax
  0008f	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  00092	e8 00 00 00 00	 call	 ?GetFileType@CWaveFile@WaveLoader@@QAEJPAK@Z ; WaveLoader::CWaveFile::GetFileType
  00097	89 45 a4	 mov	 DWORD PTR _hr$[ebp], eax
  0009a	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009e	7d 2d		 jge	 SHORT $L48981

; 440  :             {
; 441  :                 DPF_ERROR("An error occurred while attempting to retrieve the file type");

  000a0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  000a5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@ ; `string'
  000aa	68 b9 01 00 00	 push	 441			; 000001b9H
  000af	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000b4	6a 01		 push	 1
  000b6	6a 09		 push	 9
  000b8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000bd	83 c4 18	 add	 esp, 24			; 00000018H
  000c0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@CLEF@An?5error?5occurred?5while?5attempti@ ; `string'
  000c5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000ca	83 c4 04	 add	 esp, 4
$L48981:
$L48979:

; 442  :             }
; 443  :         }
; 444  : 
; 445  :         if(SUCCEEDED(hr))

  000cd	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000d1	7c 46		 jl	 SHORT $L48984

; 446  :         {
; 447  :             if(FAILED(hr = WaveFile.GetFormat(&Format.WaveFormatEx, sizeof(Format))))

  000d3	6a 00		 push	 0
  000d5	6a 14		 push	 20			; 00000014H
  000d7	8d 4d ec	 lea	 ecx, DWORD PTR _Format$[ebp]
  000da	51		 push	 ecx
  000db	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  000de	e8 00 00 00 00	 call	 ?GetFormat@CWaveFile@WaveLoader@@QAEJPAUtWAVEFORMATEX@@KPAK@Z ; WaveLoader::CWaveFile::GetFormat
  000e3	89 45 a4	 mov	 DWORD PTR _hr$[ebp], eax
  000e6	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ea	7d 2d		 jge	 SHORT $L48986

; 448  :             {
; 449  :                 DPF_ERROR("An error occurred while attempting to retrieve the file format");

  000ec	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  000f1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@ ; `string'
  000f6	68 c1 01 00 00	 push	 449			; 000001c1H
  000fb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00100	6a 01		 push	 1
  00102	6a 09		 push	 9
  00104	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00109	83 c4 18	 add	 esp, 24			; 00000018H
  0010c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@DBDA@An?5error?5occurred?5while?5attempti@ ; `string'
  00111	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00116	83 c4 04	 add	 esp, 4
$L48986:
$L48984:

; 450  :             }
; 451  :         }
; 452  : 
; 453  :         if(SUCCEEDED(hr))

  00119	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011d	7c 1e		 jl	 SHORT $L48989

; 454  :         {
; 455  :             if(!WaveBankCompressFormat(&Format, &m_Format))

  0011f	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00122	81 c2 14 03 00
	00		 add	 edx, 788		; 00000314H
  00128	52		 push	 edx
  00129	8d 45 ec	 lea	 eax, DWORD PTR _Format$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _WaveBankCompressFormat@8
  00132	85 c0		 test	 eax, eax
  00134	75 07		 jne	 SHORT $L48990

; 456  :             {
; 457  :                 hr = E_NOTIMPL;

  00136	c7 45 a4 01 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467263 ; 80004001H
$L48990:
$L48989:

; 458  :             }
; 459  :         }
; 460  : 
; 461  :         //
; 462  :         // Save the data chunk offset and length
; 463  :         //
; 464  : 
; 465  :         if(SUCCEEDED(hr))

  0013d	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00141	7c 48		 jl	 SHORT $L48993

; 466  :         {
; 467  :             if(FAILED(hr = WaveFile.GetDataOffset(&m_PlayRegion.dwStart)))

  00143	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	81 c1 18 03 00
	00		 add	 ecx, 792		; 00000318H
  0014c	51		 push	 ecx
  0014d	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  00150	e8 00 00 00 00	 call	 ?GetDataOffset@CWaveFile@WaveLoader@@QAEJPAK@Z ; WaveLoader::CWaveFile::GetDataOffset
  00155	89 45 a4	 mov	 DWORD PTR _hr$[ebp], eax
  00158	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015c	7d 2d		 jge	 SHORT $L48995

; 468  :             {
; 469  :                 DPF_ERROR("An error occurred while attempting to retrieve the wave data offset");

  0015e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00163	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@ ; `string'
  00168	68 d5 01 00 00	 push	 469			; 000001d5H
  0016d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00172	6a 01		 push	 1
  00174	6a 09		 push	 9
  00176	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0017b	83 c4 18	 add	 esp, 24			; 00000018H
  0017e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@FGDJ@An?5error?5occurred?5while?5attempti@ ; `string'
  00183	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00188	83 c4 04	 add	 esp, 4
$L48995:
$L48993:

; 470  :             }
; 471  :         }
; 472  :     
; 473  :         if(SUCCEEDED(hr))

  0018b	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0018f	7c 48		 jl	 SHORT $L48998

; 474  :         {
; 475  :             if(FAILED(hr = WaveFile.GetDuration(&m_PlayRegion.dwLength)))

  00191	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00194	81 c2 1c 03 00
	00		 add	 edx, 796		; 0000031cH
  0019a	52		 push	 edx
  0019b	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  0019e	e8 00 00 00 00	 call	 ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z ; WaveLoader::CWaveFile::GetDuration
  001a3	89 45 a4	 mov	 DWORD PTR _hr$[ebp], eax
  001a6	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001aa	7d 2d		 jge	 SHORT $L49000

; 476  :             {
; 477  :                 DPF_ERROR("An error occurred while attempting to retrieve the wave data length");

  001ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  001b1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@HOOE@CWaveBankEntry?3?3Load?$AA@ ; `string'
  001b6	68 dd 01 00 00	 push	 477			; 000001ddH
  001bb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  001c0	6a 01		 push	 1
  001c2	6a 09		 push	 9
  001c4	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001c9	83 c4 18	 add	 esp, 24			; 00000018H
  001cc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EE@GAIB@An?5error?5occurred?5while?5attempti@ ; `string'
  001d1	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001d6	83 c4 04	 add	 esp, 4
$L49000:
$L48998:

; 478  :             }
; 479  :         }
; 480  : 
; 481  :         //
; 482  :         // Save the loop region
; 483  :         //
; 484  : 
; 485  :         if(SUCCEEDED(hr))

  001d9	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001dd	7c 45		 jl	 SHORT $L49003

; 486  :         {
; 487  :             hr = WaveFile.GetLoopRegion(&m_LoopRegion.dwStart, &m_LoopRegion.dwLength);

  001df	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  001e2	05 24 03 00 00	 add	 eax, 804		; 00000324H
  001e7	50		 push	 eax
  001e8	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  001eb	81 c1 20 03 00
	00		 add	 ecx, 800		; 00000320H
  001f1	51		 push	 ecx
  001f2	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  001f5	e8 00 00 00 00	 call	 ?GetLoopRegion@CWaveFile@WaveLoader@@QAEJPAK0@Z ; WaveLoader::CWaveFile::GetLoopRegion
  001fa	89 45 a4	 mov	 DWORD PTR _hr$[ebp], eax

; 488  : 
; 489  :             if(FAILED(hr))

  001fd	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00201	7d 21		 jge	 SHORT $L49005

; 490  :             {
; 491  :                 m_LoopRegion.dwStart = 0;

  00203	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00206	c7 82 20 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+800], 0

; 492  :                 m_LoopRegion.dwLength = 0;

  00210	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00213	c7 80 24 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+804], 0

; 493  :             
; 494  :                 hr = S_OK;

  0021d	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$L49005:
$L49003:

; 495  :             }
; 496  :         }
; 497  :     
; 498  :         //
; 499  :         // Update the flags to account for having valid data
; 500  :         //
; 501  :     
; 502  :         if(SUCCEEDED(hr))

  00224	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00228	7c 17		 jl	 SHORT $L49008

; 503  :         {
; 504  :             SetFlags(~0UL, m_dwFlags);

  0022a	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0022d	8b 91 28 03 00
	00		 mov	 edx, DWORD PTR [ecx+808]
  00233	52		 push	 edx
  00234	6a ff		 push	 -1
  00236	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00239	8b 10		 mov	 edx, DWORD PTR [eax]
  0023b	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0023e	ff 52 14	 call	 DWORD PTR [edx+20]
$L49008:

; 505  :         }
; 506  : 
; 507  :         //
; 508  :         // Success
; 509  :         //
; 510  : 
; 511  :         if(SUCCEEDED(hr))

  00241	83 7d a4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00245	7c 0d		 jl	 SHORT $L49010

; 512  :         {
; 513  :             m_fLoaded = TRUE;

  00247	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  0024a	c7 80 30 03 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+816], 1
$L49010:
$L48972:

; 514  :         }
; 515  :     }
; 516  : 
; 517  :     DPF_LEAVE_HRESULT(hr);
; 518  : 
; 519  :     return hr;

  00254	8b 4d a4	 mov	 ecx, DWORD PTR _hr$[ebp]
  00257	89 4d a0	 mov	 DWORD PTR $T49730[ebp], ecx
  0025a	8d 4d a8	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  0025d	e8 00 00 00 00	 call	 ??1CWaveFile@WaveLoader@@QAE@XZ ; WaveLoader::CWaveFile::~CWaveFile
  00262	8b 45 a0	 mov	 eax, DWORD PTR $T49730[ebp]

; 520  : }

  00265	8b e5		 mov	 esp, ebp
  00267	5d		 pop	 ebp
  00268	c2 04 00	 ret	 4
?Load@CWaveBankEntry@@UAEJH@Z ENDP			; CWaveBankEntry::Load
_TEXT	ENDS
EXTRN	?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z:NEAR	; WaveLoader::CWaveFile::Open
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\waveldr.h
;	COMDAT ?Open@CWaveFile@WaveLoader@@QAEJPBD@Z
_TEXT	SEGMENT
_pszFileName$ = 8
_this$ = -4
?Open@CWaveFile@WaveLoader@@QAEJPBD@Z PROC NEAR		; WaveLoader::CWaveFile::Open, COMDAT
; _this$ = ecx

; 335  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 336  :         return Open(pszFileName, NULL);

  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?Open@CWaveFile@WaveLoader@@IAEJPBDPAX@Z ; WaveLoader::CWaveFile::Open

; 337  :     }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?Open@CWaveFile@WaveLoader@@QAEJPBD@Z ENDP		; WaveLoader::CWaveFile::Open
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetFileType@CWaveFile@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT
_pdwType$ = 8
_this$ = -4
?GetFileType@CWaveFile@WaveLoader@@QAEJPAK@Z PROC NEAR	; WaveLoader::CWaveFile::GetFileType, COMDAT
; _this$ = ecx

; 345  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 346  :         *pdwType = m_dwFileType;

  00007	8b 45 08	 mov	 eax, DWORD PTR _pdwType$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 347  :         return S_OK;

  00012	33 c0		 xor	 eax, eax

; 348  :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?GetFileType@CWaveFile@WaveLoader@@QAEJPAK@Z ENDP	; WaveLoader::CWaveFile::GetFileType
_TEXT	ENDS
PUBLIC	?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ	; WaveLoader::CRiffChunk::GetDataOffset
; Function compile flags: /Odt
;	COMDAT ?GetDataOffset@CWaveFile@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT
_pdwDataOffset$ = 8
_this$ = -4
?GetDataOffset@CWaveFile@WaveLoader@@QAEJPAK@Z PROC NEAR ; WaveLoader::CWaveFile::GetDataOffset, COMDAT
; _this$ = ecx

; 351  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 352  :         *pdwDataOffset = m_DataChunk.GetDataOffset();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 20	 add	 ecx, 32			; 00000020H
  0000d	e8 00 00 00 00	 call	 ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ ; WaveLoader::CRiffChunk::GetDataOffset
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _pdwDataOffset$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 353  :         return S_OK;

  00017	33 c0		 xor	 eax, eax

; 354  :     }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetDataOffset@CWaveFile@WaveLoader@@QAEJPAK@Z ENDP	; WaveLoader::CWaveFile::GetDataOffset
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ PROC NEAR	; WaveLoader::CRiffChunk::GetDataOffset, COMDAT
; _this$ = ecx

; 271  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 272  :         return m_dwDataOffset;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 273  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDataOffset@CRiffChunk@WaveLoader@@QAEKXZ ENDP	; WaveLoader::CRiffChunk::GetDataOffset
_TEXT	ENDS
PUBLIC	?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ	; WaveLoader::CRiffChunk::GetDataSize
; Function compile flags: /Odt
;	COMDAT ?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z
_TEXT	SEGMENT
_pdwDuration$ = 8
_this$ = -4
?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z PROC NEAR	; WaveLoader::CWaveFile::GetDuration, COMDAT
; _this$ = ecx

; 357  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 358  :         *pdwDuration = m_DataChunk.GetDataSize();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 20	 add	 ecx, 32			; 00000020H
  0000d	e8 00 00 00 00	 call	 ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ ; WaveLoader::CRiffChunk::GetDataSize
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _pdwDuration$[ebp]
  00015	89 01		 mov	 DWORD PTR [ecx], eax

; 359  :         return S_OK;

  00017	33 c0		 xor	 eax, eax

; 360  :     }

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetDuration@CWaveFile@WaveLoader@@QAEJPAK@Z ENDP	; WaveLoader::CWaveFile::GetDuration
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ PROC NEAR	; WaveLoader::CRiffChunk::GetDataSize, COMDAT
; _this$ = ecx

; 276  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  :         return m_dwDataSize;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 278  :     }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetDataSize@CRiffChunk@WaveLoader@@QAEKXZ ENDP		; WaveLoader::CRiffChunk::GetDataSize
_TEXT	ENDS
EXTRN	?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z:NEAR ; CXboxAdpcmFilter::IsValidFormat
EXTRN	?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z:NEAR ; C8BitFilter::IsValidFormat
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
;	COMDAT ?GetValidFlags@CWaveBankEntry@@UAEKXZ
_TEXT	SEGMENT
_this$ = -8
_dwFlags$ = -4
?GetValidFlags@CWaveBankEntry@@UAEKXZ PROC NEAR		; CWaveBankEntry::GetValidFlags, COMDAT
; _this$ = ecx

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 547  :     DWORD                   dwFlags = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwFlags$[ebp], 0

; 548  :     
; 549  :     DPF_ENTER();
; 550  : 
; 551  :     if(CXboxAdpcmFilter::IsValidFormat(&m_Format))

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	05 14 03 00 00	 add	 eax, 788		; 00000314H
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?IsValidFormat@CXboxAdpcmFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::IsValidFormat
  0001e	85 c0		 test	 eax, eax
  00020	74 09		 je	 SHORT $L49017

; 552  :     {
; 553  :         dwFlags |= WBFILTER_ADPCM;

  00022	8b 4d fc	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00025	83 c9 01	 or	 ecx, 1
  00028	89 4d fc	 mov	 DWORD PTR _dwFlags$[ebp], ecx
$L49017:

; 554  :     }
; 555  : 
; 556  :     if(C8BitFilter::IsValidFormat(&m_Format))

  0002b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	81 c2 14 03 00
	00		 add	 edx, 788		; 00000314H
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?IsValidFormat@C8BitFilter@@SGHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::IsValidFormat
  0003a	85 c0		 test	 eax, eax
  0003c	74 08		 je	 SHORT $L49018

; 557  :     {
; 558  :         dwFlags |= WBFILTER_8BIT;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00041	0c 02		 or	 al, 2
  00043	89 45 fc	 mov	 DWORD PTR _dwFlags$[ebp], eax
$L49018:

; 559  :     }
; 560  : 
; 561  :     DPF_LEAVE(dwFlags);
; 562  : 
; 563  :     return dwFlags;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _dwFlags$[ebp]

; 564  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?GetValidFlags@CWaveBankEntry@@UAEKXZ ENDP		; CWaveBankEntry::GetValidFlags
_TEXT	ENDS
PUBLIC	??_C@_0BJ@IMJJ@CWaveBankEntry?3?3SetFlags?$AA@	; `string'
PUBLIC	??_C@_0DA@PLDD@ADPCM?5and?58BIT?5filtering?5are?5mut@ ; `string'
PUBLIC	?GetSize@CXboxAdpcmFilter@@SGKKKH@Z		; CXboxAdpcmFilter::GetSize
PUBLIC	?GetSize@C8BitFilter@@SGKKK@Z			; C8BitFilter::GetSize
;	COMDAT ??_C@_0BJ@IMJJ@CWaveBankEntry?3?3SetFlags?$AA@
CONST	SEGMENT
??_C@_0BJ@IMJJ@CWaveBankEntry?3?3SetFlags?$AA@ DB 'CWaveBankEntry::SetFla'
	DB	'gs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PLDD@ADPCM?5and?58BIT?5filtering?5are?5mut@
CONST	SEGMENT
??_C@_0DA@PLDD@ADPCM?5and?58BIT?5filtering?5are?5mut@ DB 'ADPCM and 8BIT '
	DB	'filtering are mutually exclusive', 00H	; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetFlags@CWaveBankEntry@@UAEKKK@Z
_TEXT	SEGMENT
_dwMask$ = 8
_dwFlags$ = 12
_this$ = -4
?SetFlags@CWaveBankEntry@@UAEKKK@Z PROC NEAR		; CWaveBankEntry::SetFlags, COMDAT
; _this$ = ecx

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 594  :     DPF_ENTER();
; 595  : 
; 596  :     //
; 597  :     // Check the mask against what the filters can actually deal with
; 598  :     //
; 599  : 
; 600  :     dwMask &= GetValidFlags();

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	ff 52 10	 call	 DWORD PTR [edx+16]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dwMask$[ebp]
  00015	23 c8		 and	 ecx, eax
  00017	89 4d 08	 mov	 DWORD PTR _dwMask$[ebp], ecx

; 601  : 
; 602  :     //
; 603  :     // Mask off any unused bits
; 604  :     //
; 605  :     
; 606  :     dwFlags &= dwMask;

  0001a	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0001d	23 55 08	 and	 edx, DWORD PTR _dwMask$[ebp]
  00020	89 55 0c	 mov	 DWORD PTR _dwFlags$[ebp], edx

; 607  :     
; 608  :     //
; 609  :     // ADPCM and 8BIT are mutually exclusive
; 610  :     //
; 611  : 
; 612  :     if((dwFlags & WBFILTER_ADPCM) && (dwFlags & WBFILTER_8BIT))

  00023	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  00026	83 e0 01	 and	 eax, 1
  00029	85 c0		 test	 eax, eax
  0002b	74 40		 je	 SHORT $L49024
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00030	83 e1 02	 and	 ecx, 2
  00033	85 c9		 test	 ecx, ecx
  00035	74 36		 je	 SHORT $L49024

; 613  :     {
; 614  :         DPF_WARNING("ADPCM and 8BIT filtering are mutually exclusive");

  00037	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@IMJJ@CWaveBankEntry?3?3SetFlags?$AA@ ; `string'
  00041	68 66 02 00 00	 push	 614			; 00000266H
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0004b	6a 03		 push	 3
  0004d	6a 09		 push	 9
  0004f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00054	83 c4 18	 add	 esp, 24			; 00000018H
  00057	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DA@PLDD@ADPCM?5and?58BIT?5filtering?5are?5mut@ ; `string'
  0005c	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00061	83 c4 04	 add	 esp, 4

; 615  :         dwFlags &= ~WBFILTER_8BIT;

  00064	8b 55 0c	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  00067	83 e2 fd	 and	 edx, -3			; fffffffdH
  0006a	89 55 0c	 mov	 DWORD PTR _dwFlags$[ebp], edx
$L49024:

; 616  :     }
; 617  : 
; 618  :     //
; 619  :     // Set the flags
; 620  :     //
; 621  : 
; 622  :     m_dwFlags &= ~dwMask;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _dwMask$[ebp]
  00070	f7 d0		 not	 eax
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 91 28 03 00
	00		 mov	 edx, DWORD PTR [ecx+808]
  0007b	23 d0		 and	 edx, eax
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	89 90 28 03 00
	00		 mov	 DWORD PTR [eax+808], edx

; 623  :     m_dwFlags |= dwFlags;

  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	8b 91 28 03 00
	00		 mov	 edx, DWORD PTR [ecx+808]
  0008f	0b 55 0c	 or	 edx, DWORD PTR _dwFlags$[ebp]
  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	89 90 28 03 00
	00		 mov	 DWORD PTR [eax+808], edx

; 624  : 
; 625  :     //
; 626  :     // Recalculate the size the entry will take in the wave bank, including
; 627  :     // alignment
; 628  :     //
; 629  : 
; 630  :     m_dwDestLength = m_PlayRegion.dwLength;

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 82 1c 03 00
	00		 mov	 eax, DWORD PTR [edx+796]
  000a7	89 81 34 03 00
	00		 mov	 DWORD PTR [ecx+820], eax

; 631  : 
; 632  :     if(m_dwFlags & WBFILTER_ADPCM)

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	8b 91 28 03 00
	00		 mov	 edx, DWORD PTR [ecx+808]
  000b6	83 e2 01	 and	 edx, 1
  000b9	85 d2		 test	 edx, edx
  000bb	74 2b		 je	 SHORT $L49027

; 633  :     {
; 634  :         m_dwDestLength = CXboxAdpcmFilter::GetSize(m_dwDestLength, m_Format.nChannels, TRUE);

  000bd	6a 01		 push	 1
  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 88 14 03 00
	00		 mov	 ecx, DWORD PTR [eax+788]
  000c8	d1 e9		 shr	 ecx, 1
  000ca	83 e1 07	 and	 ecx, 7
  000cd	51		 push	 ecx
  000ce	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d1	8b 82 34 03 00
	00		 mov	 eax, DWORD PTR [edx+820]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z ; CXboxAdpcmFilter::GetSize
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	89 81 34 03 00
	00		 mov	 DWORD PTR [ecx+820], eax

; 635  :     }
; 636  :     else if(m_dwFlags & WBFILTER_8BIT)

  000e6	eb 37		 jmp	 SHORT $L49028
$L49027:
  000e8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000eb	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  000f1	83 e0 02	 and	 eax, 2
  000f4	85 c0		 test	 eax, eax
  000f6	74 27		 je	 SHORT $L49029

; 637  :     {
; 638  :         m_dwDestLength = C8BitFilter::GetSize(m_dwDestLength, m_Format.nChannels);

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	8b 91 14 03 00
	00		 mov	 edx, DWORD PTR [ecx+788]
  00101	d1 ea		 shr	 edx, 1
  00103	83 e2 07	 and	 edx, 7
  00106	52		 push	 edx
  00107	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	8b 88 34 03 00
	00		 mov	 ecx, DWORD PTR [eax+820]
  00110	51		 push	 ecx
  00111	e8 00 00 00 00	 call	 ?GetSize@C8BitFilter@@SGKKK@Z ; C8BitFilter::GetSize
  00116	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00119	89 82 34 03 00
	00		 mov	 DWORD PTR [edx+820], eax
$L49029:
$L49028:

; 639  :     }
; 640  : 
; 641  :     DPF_LEAVE(dwFlags);
; 642  : 
; 643  :     return dwFlags;

  0011f	8b 45 0c	 mov	 eax, DWORD PTR _dwFlags$[ebp]

; 644  : }

  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 08 00	 ret	 8
?SetFlags@CWaveBankEntry@@UAEKKK@Z ENDP			; CWaveBankEntry::SetFlags
_TEXT	ENDS
PUBLIC	?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z	; CXboxAdpcmFilter::GetSourceAlignment
PUBLIC	?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z ; CXboxAdpcmFilter::GetDestinationAlignment
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.h
;	COMDAT ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z
_TEXT	SEGMENT
_cbSource$ = 8
_nChannels$ = 12
_fRoundUp$ = 16
_cbSrcAlign$ = -8
_cbDstAlign$ = -4
?GetSize@CXboxAdpcmFilter@@SGKKKH@Z PROC NEAR		; CXboxAdpcmFilter::GetSize, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 88   :     const DWORD             cbSrcAlign  = GetSourceAlignment(nChannels);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _nChannels$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z ; CXboxAdpcmFilter::GetSourceAlignment
  0000f	89 45 f8	 mov	 DWORD PTR _cbSrcAlign$[ebp], eax

; 89   :     const DWORD             cbDstAlign  = GetDestinationAlignment(nChannels);

  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _nChannels$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z ; CXboxAdpcmFilter::GetDestinationAlignment
  0001b	89 45 fc	 mov	 DWORD PTR _cbDstAlign$[ebp], eax

; 90   :     
; 91   :     if(fRoundUp)

  0001e	83 7d 10 00	 cmp	 DWORD PTR _fRoundUp$[ebp], 0
  00022	74 0d		 je	 SHORT $L48476

; 92   :     {
; 93   :         cbSource += cbSrcAlign - 1;

  00024	8b 55 f8	 mov	 edx, DWORD PTR _cbSrcAlign$[ebp]
  00027	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]
  0002a	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  0002e	89 4d 08	 mov	 DWORD PTR _cbSource$[ebp], ecx
$L48476:

; 94   :     }
; 95   : 
; 96   :     cbSource /= cbSrcAlign;

  00031	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]
  00034	33 d2		 xor	 edx, edx
  00036	f7 75 f8	 div	 DWORD PTR _cbSrcAlign$[ebp]
  00039	89 45 08	 mov	 DWORD PTR _cbSource$[ebp], eax

; 97   :     cbSource *= cbDstAlign;

  0003c	8b 55 08	 mov	 edx, DWORD PTR _cbSource$[ebp]
  0003f	0f af 55 fc	 imul	 edx, DWORD PTR _cbDstAlign$[ebp]
  00043	89 55 08	 mov	 DWORD PTR _cbSource$[ebp], edx

; 98   :     
; 99   :     return cbSource;

  00046	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]

; 100  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
?GetSize@CXboxAdpcmFilter@@SGKKKH@Z ENDP		; CXboxAdpcmFilter::GetSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT
_nChannels$ = 8
?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z PROC NEAR	; CXboxAdpcmFilter::GetSourceAlignment, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :     return nChannels * 2 * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nChannels$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	c1 e0 06	 shl	 eax, 6

; 69   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?GetSourceAlignment@CXboxAdpcmFilter@@SGKK@Z ENDP	; CXboxAdpcmFilter::GetSourceAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z
_TEXT	SEGMENT
_nChannels$ = 8
?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z PROC NEAR ; CXboxAdpcmFilter::GetDestinationAlignment, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :     return nChannels * XBOX_ADPCM_ENCODED_BLOCK_SIZE;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nChannels$[ebp]
  00006	6b c0 24	 imul	 eax, 36			; 00000024H

; 79   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?GetDestinationAlignment@CXboxAdpcmFilter@@SGKK@Z ENDP	; CXboxAdpcmFilter::GetDestinationAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSize@C8BitFilter@@SGKKK@Z
_TEXT	SEGMENT
_cbSource$ = 8
_nChannels$ = 12
?GetSize@C8BitFilter@@SGKKK@Z PROC NEAR			; C8BitFilter::GetSize, COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  :     return cbSource / (nChannels * 2) * nChannels;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _nChannels$[ebp]
  00006	d1 e1		 shl	 ecx, 1
  00008	8b 45 08	 mov	 eax, DWORD PTR _cbSource$[ebp]
  0000b	33 d2		 xor	 edx, edx
  0000d	f7 f1		 div	 ecx
  0000f	0f af 45 0c	 imul	 eax, DWORD PTR _nChannels$[ebp]

; 171  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetSize@C8BitFilter@@SGKKK@Z ENDP			; C8BitFilter::GetSize
_TEXT	ENDS
PUBLIC	??_C@_0DP@EKHO@?$CB?$CI?$CIm_dwFlags?5?$CG?5WBFILTER_ADPCM?$CJ?5?$CG@ ; `string'
PUBLIC	??_C@_09GHOK@m_fLoaded?$AA@			; `string'
PUBLIC	??_C@_08OKOI@fSuccess?$AA@			; `string'
EXTRN	?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z:NEAR ; CXboxAdpcmFilter::ConvertFormat
EXTRN	?ConvertFormat@C8BitFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z:NEAR ; C8BitFilter::ConvertFormat
;	COMDAT ??_C@_0DP@EKHO@?$CB?$CI?$CIm_dwFlags?5?$CG?5WBFILTER_ADPCM?$CJ?5?$CG@
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
CONST	SEGMENT
??_C@_0DP@EKHO@?$CB?$CI?$CIm_dwFlags?5?$CG?5WBFILTER_ADPCM?$CJ?5?$CG@ DB '!'
	DB	'((m_dwFlags & WBFILTER_ADPCM) && (m_dwFlags & WBFILTER_8BIT))'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09GHOK@m_fLoaded?$AA@
CONST	SEGMENT
??_C@_09GHOK@m_fLoaded?$AA@ DB 'm_fLoaded', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OKOI@fSuccess?$AA@
CONST	SEGMENT
??_C@_08OKOI@fSuccess?$AA@ DB 'fSuccess', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GetMetaData@CWaveBankEntry@@UAEJPAU_WAVEBANKENTRY@@KKPAK@Z
_TEXT	SEGMENT
_pMetaData$ = 8
_dwBaseOffset$ = 12
_dwAlignment$ = 16
_pdwOffset$ = 20
_this$ = -8
_fSuccess$ = -4
?GetMetaData@CWaveBankEntry@@UAEJPAU_WAVEBANKENTRY@@KKPAK@Z PROC NEAR ; CWaveBankEntry::GetMetaData, COMDAT
; _this$ = ecx

; 676  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 677  :     BOOL                    fSuccess;
; 678  :     
; 679  :     DPF_ENTER();
; 680  : 
; 681  :     ASSERT(!((m_dwFlags & WBFILTER_ADPCM) && (m_dwFlags & WBFILTER_8BIT)));

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 88 28 03 00
	00		 mov	 ecx, DWORD PTR [eax+808]
  00012	83 e1 01	 and	 ecx, 1
  00015	85 c9		 test	 ecx, ecx
  00017	74 19		 je	 SHORT $L49770
  00019	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00022	83 e0 02	 and	 eax, 2
  00025	85 c0		 test	 eax, eax
  00027	74 09		 je	 SHORT $L49770
  00029	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR -12+[ebp], 1
  00030	eb 07		 jmp	 SHORT $L49771
$L49770:
  00032	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L49771:
  00039	68 a9 02 00 00	 push	 681			; 000002a9H
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00043	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@EKHO@?$CB?$CI?$CIm_dwFlags?5?$CG?5WBFILTER_ADPCM?$CJ?5?$CG@ ; `string'
  00048	8b 4d f4	 mov	 ecx, DWORD PTR -12+[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00051	83 c4 10	 add	 esp, 16			; 00000010H

; 682  :     ASSERT(m_fLoaded);

  00054	68 aa 02 00 00	 push	 682			; 000002aaH
  00059	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0005e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09GHOK@m_fLoaded?$AA@ ; `string'
  00063	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00066	33 c0		 xor	 eax, eax
  00068	83 ba 30 03 00
	00 00		 cmp	 DWORD PTR [edx+816], 0
  0006f	0f 94 c0	 sete	 al
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00078	83 c4 10	 add	 esp, 16			; 00000010H

; 683  : 
; 684  :     //
; 685  :     // Align the starting offset
; 686  :     //
; 687  : 
; 688  :     *pdwOffset = BLOCKALIGNPAD(dwBaseOffset + *pdwOffset, dwAlignment) - dwBaseOffset;

  0007b	8b 4d 14	 mov	 ecx, DWORD PTR _pdwOffset$[ebp]
  0007e	8b 55 0c	 mov	 edx, DWORD PTR _dwBaseOffset$[ebp]
  00081	03 11		 add	 edx, DWORD PTR [ecx]
  00083	8b 45 10	 mov	 eax, DWORD PTR _dwAlignment$[ebp]
  00086	8d 44 02 ff	 lea	 eax, DWORD PTR [edx+eax-1]
  0008a	33 d2		 xor	 edx, edx
  0008c	f7 75 10	 div	 DWORD PTR _dwAlignment$[ebp]
  0008f	0f af 45 10	 imul	 eax, DWORD PTR _dwAlignment$[ebp]
  00093	2b 45 0c	 sub	 eax, DWORD PTR _dwBaseOffset$[ebp]
  00096	8b 4d 14	 mov	 ecx, DWORD PTR _pdwOffset$[ebp]
  00099	89 01		 mov	 DWORD PTR [ecx], eax

; 689  : 
; 690  :     //
; 691  :     // If we're compressing, write the compressed format, not the source
; 692  :     //
; 693  : 
; 694  :     pMetaData->Format = m_Format;

  0009b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	8b 82 14 03 00
	00		 mov	 eax, DWORD PTR [edx+788]
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax

; 695  : 
; 696  :     if(m_dwFlags & WBFILTER_ADPCM)

  000a9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ac	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  000b2	83 e0 01	 and	 eax, 1
  000b5	85 c0		 test	 eax, eax
  000b7	74 2f		 je	 SHORT $L49040

; 697  :     {
; 698  :         fSuccess = CXboxAdpcmFilter::ConvertFormat(&pMetaData->Format);

  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?ConvertFormat@CXboxAdpcmFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::ConvertFormat
  000c2	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax

; 699  :         ASSERT(fSuccess);

  000c5	68 bb 02 00 00	 push	 699			; 000002bbH
  000ca	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08OKOI@fSuccess?$AA@ ; `string'
  000d4	33 d2		 xor	 edx, edx
  000d6	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  000da	0f 94 c2	 sete	 dl
  000dd	52		 push	 edx
  000de	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000e3	83 c4 10	 add	 esp, 16			; 00000010H

; 700  :     }
; 701  :     else if(m_dwFlags & WBFILTER_8BIT)

  000e6	eb 3d		 jmp	 SHORT $L49042
$L49040:
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 88 28 03 00
	00		 mov	 ecx, DWORD PTR [eax+808]
  000f1	83 e1 02	 and	 ecx, 2
  000f4	85 c9		 test	 ecx, ecx
  000f6	74 2d		 je	 SHORT $L49043

; 702  :     {
; 703  :         fSuccess = C8BitFilter::ConvertFormat(&pMetaData->Format);

  000f8	8b 55 08	 mov	 edx, DWORD PTR _pMetaData$[ebp]
  000fb	52		 push	 edx
  000fc	e8 00 00 00 00	 call	 ?ConvertFormat@C8BitFilter@@SGHPAU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::ConvertFormat
  00101	89 45 fc	 mov	 DWORD PTR _fSuccess$[ebp], eax

; 704  :         ASSERT(fSuccess);

  00104	68 c0 02 00 00	 push	 704			; 000002c0H
  00109	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0010e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08OKOI@fSuccess?$AA@ ; `string'
  00113	33 c0		 xor	 eax, eax
  00115	83 7d fc 00	 cmp	 DWORD PTR _fSuccess$[ebp], 0
  00119	0f 94 c0	 sete	 al
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00122	83 c4 10	 add	 esp, 16			; 00000010H
$L49043:
$L49042:

; 705  :     }
; 706  : 
; 707  :     //
; 708  :     // Set the entry starting offset and length
; 709  :     //
; 710  : 
; 711  :     pMetaData->PlayRegion.dwStart = *pdwOffset;

  00125	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  00128	8b 55 14	 mov	 edx, DWORD PTR _pdwOffset$[ebp]
  0012b	8b 02		 mov	 eax, DWORD PTR [edx]
  0012d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 712  :     pMetaData->PlayRegion.dwLength = m_dwDestLength;

  00130	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  00133	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00136	8b 82 34 03 00
	00		 mov	 eax, DWORD PTR [edx+820]
  0013c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 713  : 
; 714  :     //
; 715  :     // Convert the loop offsets
; 716  :     //
; 717  : 
; 718  :     pMetaData->LoopRegion = m_LoopRegion;

  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	8b 91 20 03 00
	00		 mov	 edx, DWORD PTR [ecx+800]
  00148	8b 81 24 03 00
	00		 mov	 eax, DWORD PTR [ecx+804]
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  00151	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00154	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 719  : 
; 720  :     if(m_dwFlags & WBFILTER_ADPCM)

  00157	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  00160	83 e0 01	 and	 eax, 1
  00163	85 c0		 test	 eax, eax
  00165	74 48		 je	 SHORT $L49044

; 721  :     {
; 722  :         pMetaData->LoopRegion.dwStart = CXboxAdpcmFilter::GetSize(pMetaData->LoopRegion.dwStart, m_Format.nChannels);

  00167	6a 00		 push	 0
  00169	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	8b 91 14 03 00
	00		 mov	 edx, DWORD PTR [ecx+788]
  00172	d1 ea		 shr	 edx, 1
  00174	83 e2 07	 and	 edx, 7
  00177	52		 push	 edx
  00178	8b 45 08	 mov	 eax, DWORD PTR _pMetaData$[ebp]
  0017b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z ; CXboxAdpcmFilter::GetSize
  00184	8b 55 08	 mov	 edx, DWORD PTR _pMetaData$[ebp]
  00187	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 723  :         pMetaData->LoopRegion.dwLength = CXboxAdpcmFilter::GetSize(pMetaData->LoopRegion.dwLength, m_Format.nChannels);

  0018a	6a 00		 push	 0
  0018c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	8b 88 14 03 00
	00		 mov	 ecx, DWORD PTR [eax+788]
  00195	d1 e9		 shr	 ecx, 1
  00197	83 e1 07	 and	 ecx, 7
  0019a	51		 push	 ecx
  0019b	8b 55 08	 mov	 edx, DWORD PTR _pMetaData$[ebp]
  0019e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 ?GetSize@CXboxAdpcmFilter@@SGKKKH@Z ; CXboxAdpcmFilter::GetSize
  001a7	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  001aa	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 724  :     }
; 725  :     else if(m_dwFlags & WBFILTER_8BIT)

  001ad	eb 52		 jmp	 SHORT $L49045
$L49044:
  001af	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001b2	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  001b8	83 e0 02	 and	 eax, 2
  001bb	85 c0		 test	 eax, eax
  001bd	74 42		 je	 SHORT $L49046

; 726  :     {
; 727  :         pMetaData->LoopRegion.dwStart = C8BitFilter::GetSize(pMetaData->LoopRegion.dwStart, m_Format.nChannels);

  001bf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c2	8b 91 14 03 00
	00		 mov	 edx, DWORD PTR [ecx+788]
  001c8	d1 ea		 shr	 edx, 1
  001ca	83 e2 07	 and	 edx, 7
  001cd	52		 push	 edx
  001ce	8b 45 08	 mov	 eax, DWORD PTR _pMetaData$[ebp]
  001d1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001d4	51		 push	 ecx
  001d5	e8 00 00 00 00	 call	 ?GetSize@C8BitFilter@@SGKKK@Z ; C8BitFilter::GetSize
  001da	8b 55 08	 mov	 edx, DWORD PTR _pMetaData$[ebp]
  001dd	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 728  :         pMetaData->LoopRegion.dwLength = C8BitFilter::GetSize(pMetaData->LoopRegion.dwLength, m_Format.nChannels);

  001e0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001e3	8b 88 14 03 00
	00		 mov	 ecx, DWORD PTR [eax+788]
  001e9	d1 e9		 shr	 ecx, 1
  001eb	83 e1 07	 and	 ecx, 7
  001ee	51		 push	 ecx
  001ef	8b 55 08	 mov	 edx, DWORD PTR _pMetaData$[ebp]
  001f2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ?GetSize@C8BitFilter@@SGKKK@Z ; C8BitFilter::GetSize
  001fb	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  001fe	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$L49046:
$L49045:

; 729  :     }
; 730  : 
; 731  :     //
; 732  :     // Update the file offset
; 733  :     //
; 734  : 
; 735  :     *pdwOffset = pMetaData->PlayRegion.dwStart + pMetaData->PlayRegion.dwLength;

  00201	8b 55 08	 mov	 edx, DWORD PTR _pMetaData$[ebp]
  00204	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00207	8b 4d 08	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  0020a	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  0020d	8b 55 14	 mov	 edx, DWORD PTR _pdwOffset$[ebp]
  00210	89 02		 mov	 DWORD PTR [edx], eax

; 736  : 
; 737  :     DPF_LEAVE_HRESULT(S_OK);
; 738  : 
; 739  :     return S_OK;

  00212	33 c0		 xor	 eax, eax

; 740  : }

  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c2 10 00	 ret	 16			; 00000010H
?GetMetaData@CWaveBankEntry@@UAEJPAU_WAVEBANKENTRY@@KKPAK@Z ENDP ; CWaveBankEntry::GetMetaData
_TEXT	ENDS
PUBLIC	??_C@_0DD@LCBB@dwCopyBufferSize?5?$DO?$DN?5pMetaData?9?$DOP@ ; `string'
PUBLIC	??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
PUBLIC	??_C@_0DO@FDBK@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0DO@PBMG@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0CG@ECLE@Failed?5to?5initialize?5the?5ADPCM?5f@ ; `string'
PUBLIC	??_C@_0CF@OCPI@Failed?5to?5initialize?5the?58BIT?5fi@ ; `string'
PUBLIC	??_C@_0CA@FLDH@dwCopyBufferSize?5?$DO?$DN?5dwAlignment?$AA@ ; `string'
PUBLIC	??_C@_0BO@NPAA@dwFilterRead?5?$DN?$DN?5dwAlignedRead?$AA@ ; `string'
PUBLIC	??_C@_0CN@EGPJ@An?5error?5occurred?5while?5compress@ ; `string'
PUBLIC	??_C@_0DN@HPGN@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0CF@NCIG@dwTotalRead?5?$DN?$DN?5m_PlayRegion?4dwLe@ ; `string'
PUBLIC	??_C@_0DB@BIEL@dwTotalWritten?5?$DN?$DN?5pMetaData?9?$DOPla@ ; `string'
PUBLIC	?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ	; CXboxAdpcmFilter::GetSourceAlignment
PUBLIC	?GetSourceAlignment@C8BitFilter@@UAEKXZ		; C8BitFilter::GetSourceAlignment
EXTRN	??0CStdFileStream@WaveLoader@@QAE@XZ:NEAR	; WaveLoader::CStdFileStream::CStdFileStream
EXTRN	??1CStdFileStream@WaveLoader@@QAE@XZ:NEAR	; WaveLoader::CStdFileStream::~CStdFileStream
EXTRN	?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z:NEAR ; WaveLoader::CStdFileStream::Open
EXTRN	?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z:NEAR ; WaveLoader::CStdFileStream::Read
EXTRN	?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z:NEAR ; WaveLoader::CStdFileStream::Write
EXTRN	?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z:NEAR ; WaveLoader::CStdFileStream::Seek
EXTRN	?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z:NEAR ; WaveLoader::CWaveFile::ConvertAiffPcm
EXTRN	??0CXboxAdpcmFilter@@QAE@XZ:NEAR		; CXboxAdpcmFilter::CXboxAdpcmFilter
EXTRN	??1CXboxAdpcmFilter@@UAE@XZ:NEAR		; CXboxAdpcmFilter::~CXboxAdpcmFilter
EXTRN	?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z:NEAR ; CXboxAdpcmFilter::Initialize
EXTRN	?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z:NEAR ; CXboxAdpcmFilter::Convert
EXTRN	_memset:NEAR
EXTRN	??0C8BitFilter@@QAE@XZ:NEAR			; C8BitFilter::C8BitFilter
EXTRN	??1C8BitFilter@@UAE@XZ:NEAR			; C8BitFilter::~C8BitFilter
EXTRN	?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z:NEAR ; C8BitFilter::Initialize
EXTRN	?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z:NEAR	; C8BitFilter::Convert
;	COMDAT ??_C@_0DD@LCBB@dwCopyBufferSize?5?$DO?$DN?5pMetaData?9?$DOP@
CONST	SEGMENT
??_C@_0DD@LCBB@dwCopyBufferSize?5?$DO?$DN?5pMetaData?9?$DOP@ DB 'dwCopyBu'
	DB	'fferSize >= pMetaData->PlayRegion.dwLength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@
CONST	SEGMENT
??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ DB 'CWaveBankEntry::'
	DB	'CommitWaveData', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@FDBK@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0DO@FDBK@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to read from the wave file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PBMG@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0DO@PBMG@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to read from the bank file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ECLE@Failed?5to?5initialize?5the?5ADPCM?5f@
CONST	SEGMENT
??_C@_0CG@ECLE@Failed?5to?5initialize?5the?5ADPCM?5f@ DB 'Failed to initi'
	DB	'alize the ADPCM filter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OCPI@Failed?5to?5initialize?5the?58BIT?5fi@
CONST	SEGMENT
??_C@_0CF@OCPI@Failed?5to?5initialize?5the?58BIT?5fi@ DB 'Failed to initi'
	DB	'alize the 8BIT filter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FLDH@dwCopyBufferSize?5?$DO?$DN?5dwAlignment?$AA@
CONST	SEGMENT
??_C@_0CA@FLDH@dwCopyBufferSize?5?$DO?$DN?5dwAlignment?$AA@ DB 'dwCopyBuf'
	DB	'ferSize >= dwAlignment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NPAA@dwFilterRead?5?$DN?$DN?5dwAlignedRead?$AA@
CONST	SEGMENT
??_C@_0BO@NPAA@dwFilterRead?5?$DN?$DN?5dwAlignedRead?$AA@ DB 'dwFilterRea'
	DB	'd == dwAlignedRead', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EGPJ@An?5error?5occurred?5while?5compress@
CONST	SEGMENT
??_C@_0CN@EGPJ@An?5error?5occurred?5while?5compress@ DB 'An error occurre'
	DB	'd while compressing PCM data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@HPGN@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0DN@HPGN@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to write to the bank file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NCIG@dwTotalRead?5?$DN?$DN?5m_PlayRegion?4dwLe@
CONST	SEGMENT
??_C@_0CF@NCIG@dwTotalRead?5?$DN?$DN?5m_PlayRegion?4dwLe@ DB 'dwTotalRead'
	DB	' == m_PlayRegion.dwLength', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BIEL@dwTotalWritten?5?$DN?$DN?5pMetaData?9?$DOPla@
CONST	SEGMENT
??_C@_0DB@BIEL@dwTotalWritten?5?$DN?$DN?5pMetaData?9?$DOPla@ DB 'dwTotalW'
	DB	'ritten == pMetaData->PlayRegion.dwLength', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CommitWaveData@CWaveBankEntry@@UAEJPAVCWaveBankCallback@@PAVCStdFileStream@WaveLoader@@KPBU_WAVEBANKENTRY@@PAXK@Z
_TEXT	SEGMENT
_pCallback$ = 8
_pBankFile$ = 12
_dwBaseOffset$ = 16
_pMetaData$ = 20
_pvCopyBuffer$ = 24
_dwCopyBufferSize$ = 28
_this$ = -100
_dwTotalRead$ = -92
_dwTotalWritten$ = -20
_hr$ = -80
_AdpcmFilter$ = -72
_BitFilter$ = -88
_WaveFile$ = -32
_dwAlignment$ = -8
_dwRead$ = -16
_dwWritten$ = -12
_dwAlignedRead$ = -24
_dwFilterRead$ = -76
$T49779 = -96
?CommitWaveData@CWaveBankEntry@@UAEJPAVCWaveBankCallback@@PAVCStdFileStream@WaveLoader@@KPBU_WAVEBANKENTRY@@PAXK@Z PROC NEAR ; CWaveBankEntry::CommitWaveData, COMDAT
; _this$ = ecx

; 776  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	89 4d 9c	 mov	 DWORD PTR _this$[ebp], ecx

; 777  :     DWORD                   dwTotalRead     = 0;

  00009	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _dwTotalRead$[ebp], 0

; 778  :     DWORD                   dwTotalWritten  = 0;

  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwTotalWritten$[ebp], 0

; 779  :     HRESULT                 hr              = S_OK;

  00017	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 780  :     CXboxAdpcmFilter        AdpcmFilter;

  0001e	8d 4d b8	 lea	 ecx, DWORD PTR _AdpcmFilter$[ebp]
  00021	e8 00 00 00 00	 call	 ??0CXboxAdpcmFilter@@QAE@XZ ; CXboxAdpcmFilter::CXboxAdpcmFilter

; 781  :     C8BitFilter             BitFilter;

  00026	8d 4d a8	 lea	 ecx, DWORD PTR _BitFilter$[ebp]
  00029	e8 00 00 00 00	 call	 ??0C8BitFilter@@QAE@XZ	; C8BitFilter::C8BitFilter

; 782  :     CStdFileStream          WaveFile;

  0002e	8d 4d e0	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  00031	e8 00 00 00 00	 call	 ??0CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::CStdFileStream

; 783  :     DWORD                   dwAlignment;
; 784  :     DWORD                   dwRead;
; 785  :     DWORD                   dwWritten;
; 786  :     DWORD                   dwAlignedRead;
; 787  :     DWORD                   dwFilterRead;
; 788  :     DWORD                   dwFileType;
; 789  :     
; 790  :     DPF_ENTER();
; 791  : 
; 792  :     ASSERT(!((m_dwFlags & WBFILTER_ADPCM) && (m_dwFlags & WBFILTER_8BIT)));

  00036	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 88 28 03 00
	00		 mov	 ecx, DWORD PTR [eax+808]
  0003f	83 e1 01	 and	 ecx, 1
  00042	85 c9		 test	 ecx, ecx
  00044	74 19		 je	 SHORT $L49775
  00046	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00049	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  0004f	83 e0 02	 and	 eax, 2
  00052	85 c0		 test	 eax, eax
  00054	74 09		 je	 SHORT $L49775
  00056	c7 45 98 01 00
	00 00		 mov	 DWORD PTR -104+[ebp], 1
  0005d	eb 07		 jmp	 SHORT $L49776
$L49775:
  0005f	c7 45 98 00 00
	00 00		 mov	 DWORD PTR -104+[ebp], 0
$L49776:
  00066	68 18 03 00 00	 push	 792			; 00000318H
  0006b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00070	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@EKHO@?$CB?$CI?$CIm_dwFlags?5?$CG?5WBFILTER_ADPCM?$CJ?5?$CG@ ; `string'
  00075	8b 4d 98	 mov	 ecx, DWORD PTR -104+[ebp]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0007e	83 c4 10	 add	 esp, 16			; 00000010H

; 793  :     ASSERT(m_fLoaded);

  00081	68 19 03 00 00	 push	 793			; 00000319H
  00086	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_09GHOK@m_fLoaded?$AA@ ; `string'
  00090	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00093	33 c0		 xor	 eax, eax
  00095	83 ba 30 03 00
	00 00		 cmp	 DWORD PTR [edx+816], 0
  0009c	0f 94 c0	 sete	 al
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a5	83 c4 10	 add	 esp, 16			; 00000010H

; 794  :     
; 795  :     if(!pBankFile)

  000a8	83 7d 0c 00	 cmp	 DWORD PTR _pBankFile$[ebp], 0
  000ac	75 25		 jne	 SHORT $L49070

; 796  :     {
; 797  :         ASSERT(dwCopyBufferSize >= pMetaData->PlayRegion.dwLength);

  000ae	68 1d 03 00 00	 push	 797			; 0000031dH
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000b8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DD@LCBB@dwCopyBufferSize?5?$DO?$DN?5pMetaData?9?$DOP@ ; `string'
  000bd	8b 4d 14	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  000c0	8b 55 1c	 mov	 edx, DWORD PTR _dwCopyBufferSize$[ebp]
  000c3	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000c6	1b c0		 sbb	 eax, eax
  000c8	f7 d8		 neg	 eax
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000d0	83 c4 10	 add	 esp, 16			; 00000010H
$L49070:

; 798  :     }
; 799  :     
; 800  :     //
; 801  :     // Call the callback
; 802  :     //
; 803  : 
; 804  :     if(pCallback)

  000d3	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  000d7	74 1a		 je	 SHORT $L49072

; 805  :     {
; 806  :         if(!pCallback->BeginEntry(this))

  000d9	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  000e0	8b 02		 mov	 eax, DWORD PTR [edx]
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  000e5	ff 50 18	 call	 DWORD PTR [eax+24]
  000e8	85 c0		 test	 eax, eax
  000ea	75 07		 jne	 SHORT $L49073

; 807  :         {
; 808  :             hr = E_ABORT;

  000ec	c7 45 b0 04 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467260 ; 80004004H
$L49073:
$L49072:

; 809  :         }
; 810  :     }
; 811  : 
; 812  :     //
; 813  :     // Open the source file and seek to the start of the data chunk
; 814  :     //
; 815  : 
; 816  :     if(SUCCEEDED(hr))

  000f3	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f7	7c 60		 jl	 SHORT $L49076

; 817  :     {
; 818  :         if(FAILED(hr = WaveFile.Open(m_szFileName, GENERIC_READ, FILE_SHARE_READ, OPEN_EXISTING, FILE_FLAG_SEQUENTIAL_SCAN)))

  000f9	68 00 00 00 08	 push	 134217728		; 08000000H
  000fe	6a 03		 push	 3
  00100	6a 01		 push	 1
  00102	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00107	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  00110	51		 push	 ecx
  00111	8d 4d e0	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  00114	e8 00 00 00 00	 call	 ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z ; WaveLoader::CStdFileStream::Open
  00119	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax
  0011c	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00120	7d 37		 jge	 SHORT $L49078

; 819  :         {
; 820  :             DPF_ERROR("An error occurred while attempting to open %s", m_szFileName);

  00122	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00127	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  0012c	68 34 03 00 00	 push	 820			; 00000334H
  00131	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00136	6a 01		 push	 1
  00138	6a 09		 push	 9
  0013a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0013f	83 c4 18	 add	 esp, 24			; 00000018H
  00142	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00145	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  0014b	52		 push	 edx
  0014c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@ ; `string'
  00151	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00156	83 c4 08	 add	 esp, 8
$L49078:
$L49076:

; 821  :         }
; 822  :     }
; 823  : 
; 824  :     if(SUCCEEDED(hr))

  00159	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0015d	7c 4c		 jl	 SHORT $L49081

; 825  :     {
; 826  :         if(FAILED(hr = WaveFile.Seek(m_PlayRegion.dwStart, FILE_BEGIN)))

  0015f	6a 00		 push	 0
  00161	6a 00		 push	 0
  00163	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00166	8b 88 18 03 00
	00		 mov	 ecx, DWORD PTR [eax+792]
  0016c	51		 push	 ecx
  0016d	8d 4d e0	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  00170	e8 00 00 00 00	 call	 ?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z ; WaveLoader::CStdFileStream::Seek
  00175	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax
  00178	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0017c	7d 2d		 jge	 SHORT $L49083

; 827  :         {
; 828  :             DPF_ERROR("An error occurred while attempting to read from the wave file");

  0017e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00183	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  00188	68 3c 03 00 00	 push	 828			; 0000033cH
  0018d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00192	6a 01		 push	 1
  00194	6a 09		 push	 9
  00196	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
  0019e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@FDBK@An?5error?5occurred?5while?5attempti@ ; `string'
  001a3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001a8	83 c4 04	 add	 esp, 4
$L49083:
$L49081:

; 829  :         }
; 830  :     }
; 831  : 
; 832  :     //
; 833  :     // Seek to the proper location in the destination file
; 834  :     //
; 835  : 
; 836  :     if(SUCCEEDED(hr))

  001ab	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001af	7c 4c		 jl	 SHORT $L49086

; 837  :     {
; 838  :         if(FAILED(hr = pBankFile->Seek(dwBaseOffset + pMetaData->PlayRegion.dwStart, FILE_BEGIN)))

  001b1	6a 00		 push	 0
  001b3	6a 00		 push	 0
  001b5	8b 55 14	 mov	 edx, DWORD PTR _pMetaData$[ebp]
  001b8	8b 45 10	 mov	 eax, DWORD PTR _dwBaseOffset$[ebp]
  001bb	03 42 04	 add	 eax, DWORD PTR [edx+4]
  001be	50		 push	 eax
  001bf	8b 4d 0c	 mov	 ecx, DWORD PTR _pBankFile$[ebp]
  001c2	e8 00 00 00 00	 call	 ?Seek@CStdFileStream@WaveLoader@@QAEJJKPAK@Z ; WaveLoader::CStdFileStream::Seek
  001c7	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax
  001ca	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ce	7d 2d		 jge	 SHORT $L49088

; 839  :         {
; 840  :             DPF_ERROR("An error occurred while attempting to read from the bank file");

  001d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  001d5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  001da	68 48 03 00 00	 push	 840			; 00000348H
  001df	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  001e4	6a 01		 push	 1
  001e6	6a 09		 push	 9
  001e8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001ed	83 c4 18	 add	 esp, 24			; 00000018H
  001f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@PBMG@An?5error?5occurred?5while?5attempti@ ; `string'
  001f5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001fa	83 c4 04	 add	 esp, 4
$L49088:
$L49086:

; 841  :         }
; 842  :     }
; 843  : 
; 844  :     //
; 845  :     // Initialize the ADPCM filter
; 846  :     //
; 847  : 
; 848  :     if(SUCCEEDED(hr) && (m_dwFlags & WBFILTER_ADPCM))

  001fd	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00201	7c 59		 jl	 SHORT $L49091
  00203	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00206	8b 91 28 03 00
	00		 mov	 edx, DWORD PTR [ecx+808]
  0020c	83 e2 01	 and	 edx, 1
  0020f	85 d2		 test	 edx, edx
  00211	74 49		 je	 SHORT $L49091

; 849  :     {
; 850  :         if(!AdpcmFilter.Initialize(&m_Format))

  00213	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00216	05 14 03 00 00	 add	 eax, 788		; 00000314H
  0021b	50		 push	 eax
  0021c	8d 4d b8	 lea	 ecx, DWORD PTR _AdpcmFilter$[ebp]
  0021f	e8 00 00 00 00	 call	 ?Initialize@CXboxAdpcmFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; CXboxAdpcmFilter::Initialize
  00224	85 c0		 test	 eax, eax
  00226	75 34		 jne	 SHORT $L49092

; 851  :         {
; 852  :             DPF_ERROR("Failed to initialize the ADPCM filter");

  00228	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0022d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  00232	68 54 03 00 00	 push	 852			; 00000354H
  00237	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0023c	6a 01		 push	 1
  0023e	6a 09		 push	 9
  00240	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00245	83 c4 18	 add	 esp, 24			; 00000018H
  00248	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CG@ECLE@Failed?5to?5initialize?5the?5ADPCM?5f@ ; `string'
  0024d	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00252	83 c4 04	 add	 esp, 4

; 853  :             hr = E_FAIL;

  00255	c7 45 b0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49092:
$L49091:

; 854  :         }
; 855  :     }
; 856  : 
; 857  :     //
; 858  :     // Initialize the 8BIT filter
; 859  :     //
; 860  : 
; 861  :     if(SUCCEEDED(hr) && (m_dwFlags & WBFILTER_8BIT))

  0025c	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00260	7c 59		 jl	 SHORT $L49096
  00262	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00265	8b 91 28 03 00
	00		 mov	 edx, DWORD PTR [ecx+808]
  0026b	83 e2 02	 and	 edx, 2
  0026e	85 d2		 test	 edx, edx
  00270	74 49		 je	 SHORT $L49096

; 862  :     {
; 863  :         if(!BitFilter.Initialize(&m_Format))

  00272	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  00275	05 14 03 00 00	 add	 eax, 788		; 00000314H
  0027a	50		 push	 eax
  0027b	8d 4d a8	 lea	 ecx, DWORD PTR _BitFilter$[ebp]
  0027e	e8 00 00 00 00	 call	 ?Initialize@C8BitFilter@@UAEHPBU_WAVEBANKMINIWAVEFORMAT@@@Z ; C8BitFilter::Initialize
  00283	85 c0		 test	 eax, eax
  00285	75 34		 jne	 SHORT $L49097

; 864  :         {
; 865  :             DPF_ERROR("Failed to initialize the 8BIT filter");

  00287	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0028c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  00291	68 61 03 00 00	 push	 865			; 00000361H
  00296	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0029b	6a 01		 push	 1
  0029d	6a 09		 push	 9
  0029f	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002a4	83 c4 18	 add	 esp, 24			; 00000018H
  002a7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@OCPI@Failed?5to?5initialize?5the?58BIT?5fi@ ; `string'
  002ac	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002b1	83 c4 04	 add	 esp, 4

; 866  :             hr = E_FAIL;

  002b4	c7 45 b0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49097:
$L49096:

; 867  :         }
; 868  :     }
; 869  : 
; 870  :     //
; 871  :     // Get the filter alignment so we never have to seek backwards in the
; 872  :     // file due to converting less data than we read.
; 873  :     //
; 874  : 
; 875  :     if(SUCCEEDED(hr))

  002bb	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002bf	0f 8c 89 00 00
	00		 jl	 $L49101

; 876  :     {
; 877  :         if(m_dwFlags & WBFILTER_ADPCM)

  002c5	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  002c8	8b 91 28 03 00
	00		 mov	 edx, DWORD PTR [ecx+808]
  002ce	83 e2 01	 and	 edx, 1
  002d1	85 d2		 test	 edx, edx
  002d3	74 0d		 je	 SHORT $L49102

; 878  :         {
; 879  :             dwAlignment = AdpcmFilter.GetSourceAlignment();

  002d5	8d 4d b8	 lea	 ecx, DWORD PTR _AdpcmFilter$[ebp]
  002d8	e8 00 00 00 00	 call	 ?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ ; CXboxAdpcmFilter::GetSourceAlignment
  002dd	89 45 f8	 mov	 DWORD PTR _dwAlignment$[ebp], eax

; 880  :         }
; 881  :         else if(m_dwFlags & WBFILTER_8BIT)

  002e0	eb 4a		 jmp	 SHORT $L49103
$L49102:
  002e2	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  002e5	8b 88 28 03 00
	00		 mov	 ecx, DWORD PTR [eax+808]
  002eb	83 e1 02	 and	 ecx, 2
  002ee	85 c9		 test	 ecx, ecx
  002f0	74 0d		 je	 SHORT $L49104

; 882  :         {
; 883  :             dwAlignment = BitFilter.GetSourceAlignment();

  002f2	8d 4d a8	 lea	 ecx, DWORD PTR _BitFilter$[ebp]
  002f5	e8 00 00 00 00	 call	 ?GetSourceAlignment@C8BitFilter@@UAEKXZ ; C8BitFilter::GetSourceAlignment
  002fa	89 45 f8	 mov	 DWORD PTR _dwAlignment$[ebp], eax

; 884  :         }
; 885  :         else

  002fd	eb 2d		 jmp	 SHORT $L49105
$L49104:

; 886  :         {
; 887  :             dwAlignment = m_Format.nChannels;

  002ff	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00302	8b 82 14 03 00
	00		 mov	 eax, DWORD PTR [edx+788]
  00308	d1 e8		 shr	 eax, 1
  0030a	83 e0 07	 and	 eax, 7
  0030d	89 45 f8	 mov	 DWORD PTR _dwAlignment$[ebp], eax

; 888  :             
; 889  :             if(WAVEBANKMINIFORMAT_BITDEPTH_16 == m_Format.wBitsPerSample)

  00310	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00313	8b 91 14 03 00
	00		 mov	 edx, DWORD PTR [ecx+788]
  00319	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  0031c	83 e2 01	 and	 edx, 1
  0031f	83 fa 01	 cmp	 edx, 1
  00322	75 08		 jne	 SHORT $L49106

; 890  :             {
; 891  :                 dwAlignment *= 2;

  00324	8b 45 f8	 mov	 eax, DWORD PTR _dwAlignment$[ebp]
  00327	d1 e0		 shl	 eax, 1
  00329	89 45 f8	 mov	 DWORD PTR _dwAlignment$[ebp], eax
$L49106:
$L49105:
$L49103:

; 892  :             }
; 893  :         }
; 894  : 
; 895  :         ASSERT(dwCopyBufferSize >= dwAlignment);

  0032c	68 7f 03 00 00	 push	 895			; 0000037fH
  00331	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00336	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CA@FLDH@dwCopyBufferSize?5?$DO?$DN?5dwAlignment?$AA@ ; `string'
  0033b	8b 4d 1c	 mov	 ecx, DWORD PTR _dwCopyBufferSize$[ebp]
  0033e	3b 4d f8	 cmp	 ecx, DWORD PTR _dwAlignment$[ebp]
  00341	1b d2		 sbb	 edx, edx
  00343	f7 da		 neg	 edx
  00345	52		 push	 edx
  00346	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0034b	83 c4 10	 add	 esp, 16			; 00000010H
$L49101:
$L49109:

; 896  :     }
; 897  : 
; 898  :     //
; 899  :     // Start copying data
; 900  :     //
; 901  : 
; 902  :     while(SUCCEEDED(hr) && (dwTotalRead < m_PlayRegion.dwLength))

  0034e	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00352	0f 8c b3 02 00
	00		 jl	 $L49110
  00358	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  0035b	8b 4d a4	 mov	 ecx, DWORD PTR _dwTotalRead$[ebp]
  0035e	3b 88 1c 03 00
	00		 cmp	 ecx, DWORD PTR [eax+796]
  00364	0f 83 a1 02 00
	00		 jae	 $L49110

; 903  :     {
; 904  :         //
; 905  :         // Don't read past the end of the file
; 906  :         //
; 907  : 
; 908  :         dwRead = min(dwCopyBufferSize, m_PlayRegion.dwLength - dwTotalRead);

  0036a	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  0036d	8b 82 1c 03 00
	00		 mov	 eax, DWORD PTR [edx+796]
  00373	2b 45 a4	 sub	 eax, DWORD PTR _dwTotalRead$[ebp]
  00376	39 45 1c	 cmp	 DWORD PTR _dwCopyBufferSize$[ebp], eax
  00379	73 08		 jae	 SHORT $L49777
  0037b	8b 4d 1c	 mov	 ecx, DWORD PTR _dwCopyBufferSize$[ebp]
  0037e	89 4d 94	 mov	 DWORD PTR -108+[ebp], ecx
  00381	eb 0f		 jmp	 SHORT $L49778
$L49777:
  00383	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00386	8b 82 1c 03 00
	00		 mov	 eax, DWORD PTR [edx+796]
  0038c	2b 45 a4	 sub	 eax, DWORD PTR _dwTotalRead$[ebp]
  0038f	89 45 94	 mov	 DWORD PTR -108+[ebp], eax
$L49778:
  00392	8b 4d 94	 mov	 ecx, DWORD PTR -108+[ebp]
  00395	89 4d f0	 mov	 DWORD PTR _dwRead$[ebp], ecx

; 909  : 
; 910  :         //
; 911  :         // Align the read amount so we never have to seek backwards in the
; 912  :         // file due to converting less data than we read.  If there isn't
; 913  :         // enough data left in the file to satisfy the alignment, pad with
; 914  :         // silence.
; 915  :         //
; 916  : 
; 917  :         if(dwRead >= dwAlignment)

  00398	8b 55 f0	 mov	 edx, DWORD PTR _dwRead$[ebp]
  0039b	3b 55 f8	 cmp	 edx, DWORD PTR _dwAlignment$[ebp]
  0039e	72 17		 jb	 SHORT $L49112

; 918  :         {
; 919  :             dwRead = dwAlignedRead = BLOCKALIGN(dwRead, dwAlignment);

  003a0	8b 45 f0	 mov	 eax, DWORD PTR _dwRead$[ebp]
  003a3	33 d2		 xor	 edx, edx
  003a5	f7 75 f8	 div	 DWORD PTR _dwAlignment$[ebp]
  003a8	0f af 45 f8	 imul	 eax, DWORD PTR _dwAlignment$[ebp]
  003ac	89 45 e8	 mov	 DWORD PTR _dwAlignedRead$[ebp], eax
  003af	8b 45 e8	 mov	 eax, DWORD PTR _dwAlignedRead$[ebp]
  003b2	89 45 f0	 mov	 DWORD PTR _dwRead$[ebp], eax

; 920  :         }
; 921  :         else

  003b5	eb 16		 jmp	 SHORT $L49113
$L49112:

; 922  :         {
; 923  :             dwAlignedRead = BLOCKALIGNPAD(dwRead, dwAlignment);

  003b7	8b 4d f8	 mov	 ecx, DWORD PTR _dwAlignment$[ebp]
  003ba	8b 55 f0	 mov	 edx, DWORD PTR _dwRead$[ebp]
  003bd	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  003c1	33 d2		 xor	 edx, edx
  003c3	f7 75 f8	 div	 DWORD PTR _dwAlignment$[ebp]
  003c6	0f af 45 f8	 imul	 eax, DWORD PTR _dwAlignment$[ebp]
  003ca	89 45 e8	 mov	 DWORD PTR _dwAlignedRead$[ebp], eax
$L49113:

; 924  :         }
; 925  : 
; 926  :         dwWritten = dwAlignedRead;

  003cd	8b 45 e8	 mov	 eax, DWORD PTR _dwAlignedRead$[ebp]
  003d0	89 45 f4	 mov	 DWORD PTR _dwWritten$[ebp], eax

; 927  : 
; 928  :         //
; 929  :         // Read source data
; 930  :         //
; 931  :         
; 932  :         hr = WaveFile.Read(pvCopyBuffer, dwRead);

  003d3	6a 00		 push	 0
  003d5	8b 4d f0	 mov	 ecx, DWORD PTR _dwRead$[ebp]
  003d8	51		 push	 ecx
  003d9	8b 55 18	 mov	 edx, DWORD PTR _pvCopyBuffer$[ebp]
  003dc	52		 push	 edx
  003dd	8d 4d e0	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  003e0	e8 00 00 00 00	 call	 ?Read@CStdFileStream@WaveLoader@@QAEJPAXKPAK@Z ; WaveLoader::CStdFileStream::Read
  003e5	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax

; 933  : 
; 934  :         //
; 935  :         // Convert if AIFF PCM
; 936  :         //
; 937  : 
; 938  :         if(SUCCEEDED(hr) && (WAVELDR_FILETYPE_AIFF == m_dwFileType))

  003e8	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  003ec	7c 36		 jl	 SHORT $L49115
  003ee	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  003f1	83 b8 2c 03 00
	00 01		 cmp	 DWORD PTR [eax+812], 1
  003f8	75 2a		 jne	 SHORT $L49115

; 939  :         {
; 940  :             CWaveFile::ConvertAiffPcm(pvCopyBuffer, dwRead, (WAVEBANKMINIFORMAT_BITDEPTH_16 == m_Format.wBitsPerSample) ? 16 : 8);

  003fa	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  003fd	8b 91 14 03 00
	00		 mov	 edx, DWORD PTR [ecx+788]
  00403	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00406	83 e2 01	 and	 edx, 1
  00409	83 ea 01	 sub	 edx, 1
  0040c	f7 da		 neg	 edx
  0040e	1b d2		 sbb	 edx, edx
  00410	83 e2 f8	 and	 edx, -8			; fffffff8H
  00413	83 c2 10	 add	 edx, 16			; 00000010H
  00416	52		 push	 edx
  00417	8b 45 f0	 mov	 eax, DWORD PTR _dwRead$[ebp]
  0041a	50		 push	 eax
  0041b	8b 4d 18	 mov	 ecx, DWORD PTR _pvCopyBuffer$[ebp]
  0041e	51		 push	 ecx
  0041f	e8 00 00 00 00	 call	 ?ConvertAiffPcm@CWaveFile@WaveLoader@@SGXPAXKK@Z ; WaveLoader::CWaveFile::ConvertAiffPcm
$L49115:

; 941  :         }
; 942  : 
; 943  :         //
; 944  :         // Pad with silence if necessary
; 945  :         //
; 946  : 
; 947  :         if(SUCCEEDED(hr) && (dwAlignedRead > dwRead))

  00424	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00428	7c 20		 jl	 SHORT $L49117
  0042a	8b 55 e8	 mov	 edx, DWORD PTR _dwAlignedRead$[ebp]
  0042d	3b 55 f0	 cmp	 edx, DWORD PTR _dwRead$[ebp]
  00430	76 18		 jbe	 SHORT $L49117

; 948  :         {
; 949  :             ZeroMemory((LPBYTE)pvCopyBuffer + dwRead, dwAlignedRead - dwRead);

  00432	8b 45 e8	 mov	 eax, DWORD PTR _dwAlignedRead$[ebp]
  00435	2b 45 f0	 sub	 eax, DWORD PTR _dwRead$[ebp]
  00438	50		 push	 eax
  00439	6a 00		 push	 0
  0043b	8b 4d 18	 mov	 ecx, DWORD PTR _pvCopyBuffer$[ebp]
  0043e	03 4d f0	 add	 ecx, DWORD PTR _dwRead$[ebp]
  00441	51		 push	 ecx
  00442	e8 00 00 00 00	 call	 _memset
  00447	83 c4 0c	 add	 esp, 12			; 0000000cH
$L49117:

; 950  :         }
; 951  :         
; 952  :         //
; 953  :         // Convert (or not)
; 954  :         //
; 955  : 
; 956  :         if(SUCCEEDED(hr) && (m_dwFlags & WBFILTER_ADPCM))

  0044a	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0044e	0f 8c 8b 00 00
	00		 jl	 $L49120
  00454	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  00457	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  0045d	83 e0 01	 and	 eax, 1
  00460	85 c0		 test	 eax, eax
  00462	74 7b		 je	 SHORT $L49120

; 957  :         {
; 958  :             dwFilterRead = dwAlignedRead;

  00464	8b 4d e8	 mov	 ecx, DWORD PTR _dwAlignedRead$[ebp]
  00467	89 4d b4	 mov	 DWORD PTR _dwFilterRead$[ebp], ecx

; 959  :             
; 960  :             if(AdpcmFilter.Convert(pvCopyBuffer, &dwFilterRead, pvCopyBuffer, &dwWritten))

  0046a	8d 55 f4	 lea	 edx, DWORD PTR _dwWritten$[ebp]
  0046d	52		 push	 edx
  0046e	8b 45 18	 mov	 eax, DWORD PTR _pvCopyBuffer$[ebp]
  00471	50		 push	 eax
  00472	8d 4d b4	 lea	 ecx, DWORD PTR _dwFilterRead$[ebp]
  00475	51		 push	 ecx
  00476	8b 55 18	 mov	 edx, DWORD PTR _pvCopyBuffer$[ebp]
  00479	52		 push	 edx
  0047a	8d 4d b8	 lea	 ecx, DWORD PTR _AdpcmFilter$[ebp]
  0047d	e8 00 00 00 00	 call	 ?Convert@CXboxAdpcmFilter@@UAEHPBXPAKPAX1@Z ; CXboxAdpcmFilter::Convert
  00482	85 c0		 test	 eax, eax
  00484	74 25		 je	 SHORT $L49121

; 961  :             {
; 962  :                 ASSERT(dwFilterRead == dwAlignedRead);

  00486	68 c2 03 00 00	 push	 962			; 000003c2H
  0048b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00490	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NPAA@dwFilterRead?5?$DN?$DN?5dwAlignedRead?$AA@ ; `string'
  00495	8b 45 b4	 mov	 eax, DWORD PTR _dwFilterRead$[ebp]
  00498	33 c9		 xor	 ecx, ecx
  0049a	3b 45 e8	 cmp	 eax, DWORD PTR _dwAlignedRead$[ebp]
  0049d	0f 95 c1	 setne	 cl
  004a0	51		 push	 ecx
  004a1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  004a6	83 c4 10	 add	 esp, 16			; 00000010H

; 963  :             }
; 964  :             else

  004a9	eb 34		 jmp	 SHORT $L49123
$L49121:

; 965  :             {
; 966  :                 DPF_ERROR("An error occurred while compressing PCM data");

  004ab	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  004b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  004b5	68 c6 03 00 00	 push	 966			; 000003c6H
  004ba	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  004bf	6a 01		 push	 1
  004c1	6a 09		 push	 9
  004c3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  004c8	83 c4 18	 add	 esp, 24			; 00000018H
  004cb	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@EGPJ@An?5error?5occurred?5while?5compress@ ; `string'
  004d0	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  004d5	83 c4 04	 add	 esp, 4

; 967  :                 hr = E_FAIL;

  004d8	c7 45 b0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49123:
$L49120:

; 968  :             }
; 969  :         }
; 970  :             
; 971  :         if(SUCCEEDED(hr) && (m_dwFlags & WBFILTER_8BIT))

  004df	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  004e3	0f 8c 8b 00 00
	00		 jl	 $L49127
  004e9	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  004ec	8b 82 28 03 00
	00		 mov	 eax, DWORD PTR [edx+808]
  004f2	83 e0 02	 and	 eax, 2
  004f5	85 c0		 test	 eax, eax
  004f7	74 7b		 je	 SHORT $L49127

; 972  :         {
; 973  :             dwFilterRead = dwAlignedRead;

  004f9	8b 4d e8	 mov	 ecx, DWORD PTR _dwAlignedRead$[ebp]
  004fc	89 4d b4	 mov	 DWORD PTR _dwFilterRead$[ebp], ecx

; 974  :             
; 975  :             if(BitFilter.Convert(pvCopyBuffer, &dwFilterRead, pvCopyBuffer, &dwWritten))

  004ff	8d 55 f4	 lea	 edx, DWORD PTR _dwWritten$[ebp]
  00502	52		 push	 edx
  00503	8b 45 18	 mov	 eax, DWORD PTR _pvCopyBuffer$[ebp]
  00506	50		 push	 eax
  00507	8d 4d b4	 lea	 ecx, DWORD PTR _dwFilterRead$[ebp]
  0050a	51		 push	 ecx
  0050b	8b 55 18	 mov	 edx, DWORD PTR _pvCopyBuffer$[ebp]
  0050e	52		 push	 edx
  0050f	8d 4d a8	 lea	 ecx, DWORD PTR _BitFilter$[ebp]
  00512	e8 00 00 00 00	 call	 ?Convert@C8BitFilter@@UAEHPBXPAKPAX1@Z ; C8BitFilter::Convert
  00517	85 c0		 test	 eax, eax
  00519	74 25		 je	 SHORT $L49128

; 976  :             {
; 977  :                 ASSERT(dwFilterRead == dwAlignedRead);

  0051b	68 d1 03 00 00	 push	 977			; 000003d1H
  00520	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00525	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@NPAA@dwFilterRead?5?$DN?$DN?5dwAlignedRead?$AA@ ; `string'
  0052a	8b 45 b4	 mov	 eax, DWORD PTR _dwFilterRead$[ebp]
  0052d	33 c9		 xor	 ecx, ecx
  0052f	3b 45 e8	 cmp	 eax, DWORD PTR _dwAlignedRead$[ebp]
  00532	0f 95 c1	 setne	 cl
  00535	51		 push	 ecx
  00536	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0053b	83 c4 10	 add	 esp, 16			; 00000010H

; 978  :             }
; 979  :             else

  0053e	eb 34		 jmp	 SHORT $L49129
$L49128:

; 980  :             {
; 981  :                 DPF_ERROR("An error occurred while compressing PCM data");

  00540	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00545	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  0054a	68 d5 03 00 00	 push	 981			; 000003d5H
  0054f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00554	6a 01		 push	 1
  00556	6a 09		 push	 9
  00558	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0055d	83 c4 18	 add	 esp, 24			; 00000018H
  00560	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CN@EGPJ@An?5error?5occurred?5while?5compress@ ; `string'
  00565	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0056a	83 c4 04	 add	 esp, 4

; 982  :                 hr = E_FAIL;

  0056d	c7 45 b0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49129:
$L49127:

; 983  :             }
; 984  :         }
; 985  : 
; 986  :         //
; 987  :         // Write to the bank file
; 988  :         //
; 989  :         
; 990  :         if(SUCCEEDED(hr))

  00574	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00578	7c 48		 jl	 SHORT $L49132

; 991  :         {
; 992  :             if(FAILED(hr = pBankFile->Write(pvCopyBuffer, dwWritten)))

  0057a	6a 00		 push	 0
  0057c	8b 55 f4	 mov	 edx, DWORD PTR _dwWritten$[ebp]
  0057f	52		 push	 edx
  00580	8b 45 18	 mov	 eax, DWORD PTR _pvCopyBuffer$[ebp]
  00583	50		 push	 eax
  00584	8b 4d 0c	 mov	 ecx, DWORD PTR _pBankFile$[ebp]
  00587	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  0058c	89 45 b0	 mov	 DWORD PTR _hr$[ebp], eax
  0058f	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00593	7d 2d		 jge	 SHORT $L49134

; 993  :             {
; 994  :                 DPF_ERROR("An error occurred while attempting to write to the bank file");

  00595	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0059a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@KNFK@CWaveBankEntry?3?3CommitWaveData?$AA@ ; `string'
  0059f	68 e2 03 00 00	 push	 994			; 000003e2H
  005a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  005a9	6a 01		 push	 1
  005ab	6a 09		 push	 9
  005ad	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  005b2	83 c4 18	 add	 esp, 24			; 00000018H
  005b5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@HPGN@An?5error?5occurred?5while?5attempti@ ; `string'
  005ba	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  005bf	83 c4 04	 add	 esp, 4
$L49134:
$L49132:

; 995  :             }
; 996  :         }
; 997  : 
; 998  :         //
; 999  :         // Increment counters
; 1000 :         //
; 1001 : 
; 1002 :         if(SUCCEEDED(hr))

  005c2	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  005c6	7c 12		 jl	 SHORT $L49137

; 1003 :         {
; 1004 :             dwTotalRead += dwRead;

  005c8	8b 4d a4	 mov	 ecx, DWORD PTR _dwTotalRead$[ebp]
  005cb	03 4d f0	 add	 ecx, DWORD PTR _dwRead$[ebp]
  005ce	89 4d a4	 mov	 DWORD PTR _dwTotalRead$[ebp], ecx

; 1005 :             dwTotalWritten += dwWritten;

  005d1	8b 55 ec	 mov	 edx, DWORD PTR _dwTotalWritten$[ebp]
  005d4	03 55 f4	 add	 edx, DWORD PTR _dwWritten$[ebp]
  005d7	89 55 ec	 mov	 DWORD PTR _dwTotalWritten$[ebp], edx
$L49137:

; 1006 :         }
; 1007 : 
; 1008 :         //
; 1009 :         // If no file was specified, bail out now
; 1010 :         //
; 1011 : 
; 1012 :         if(!pBankFile)

  005da	83 7d 0c 00	 cmp	 DWORD PTR _pBankFile$[ebp], 0
  005de	75 02		 jne	 SHORT $L49138

; 1013 :         {
; 1014 :             break;

  005e0	eb 29		 jmp	 SHORT $L49110
$L49138:

; 1015 :         }
; 1016 : 
; 1017 :         //
; 1018 :         // Call the callback
; 1019 :         //
; 1020 : 
; 1021 :         if(pCallback)

  005e2	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  005e6	74 1e		 je	 SHORT $L49139

; 1022 :         {
; 1023 :             if(!pCallback->ProcessEntry(this, dwTotalRead))

  005e8	8b 45 a4	 mov	 eax, DWORD PTR _dwTotalRead$[ebp]
  005eb	50		 push	 eax
  005ec	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  005ef	51		 push	 ecx
  005f0	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  005f3	8b 02		 mov	 eax, DWORD PTR [edx]
  005f5	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  005f8	ff 50 1c	 call	 DWORD PTR [eax+28]
  005fb	85 c0		 test	 eax, eax
  005fd	75 07		 jne	 SHORT $L49140

; 1024 :             {
; 1025 :                 hr = E_ABORT;

  005ff	c7 45 b0 04 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467260 ; 80004004H
$L49140:
$L49139:

; 1026 :             }
; 1027 :         }
; 1028 :     }

  00606	e9 43 fd ff ff	 jmp	 $L49109
$L49110:

; 1029 : 
; 1030 :     if(SUCCEEDED(hr))

  0060b	83 7d b0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0060f	7c 4f		 jl	 SHORT $L49143

; 1031 :     {
; 1032 :         ASSERT(dwTotalRead == m_PlayRegion.dwLength);

  00611	68 08 04 00 00	 push	 1032			; 00000408H
  00616	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0061b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CF@NCIG@dwTotalRead?5?$DN?$DN?5m_PlayRegion?4dwLe@ ; `string'
  00620	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00623	8b 55 a4	 mov	 edx, DWORD PTR _dwTotalRead$[ebp]
  00626	33 c0		 xor	 eax, eax
  00628	3b 91 1c 03 00
	00		 cmp	 edx, DWORD PTR [ecx+796]
  0062e	0f 95 c0	 setne	 al
  00631	50		 push	 eax
  00632	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00637	83 c4 10	 add	 esp, 16			; 00000010H

; 1033 :         ASSERT(dwTotalWritten == pMetaData->PlayRegion.dwLength);

  0063a	68 09 04 00 00	 push	 1033			; 00000409H
  0063f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00644	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DB@BIEL@dwTotalWritten?5?$DN?$DN?5pMetaData?9?$DOPla@ ; `string'
  00649	8b 4d 14	 mov	 ecx, DWORD PTR _pMetaData$[ebp]
  0064c	8b 55 ec	 mov	 edx, DWORD PTR _dwTotalWritten$[ebp]
  0064f	33 c0		 xor	 eax, eax
  00651	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00654	0f 95 c0	 setne	 al
  00657	50		 push	 eax
  00658	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0065d	83 c4 10	 add	 esp, 16			; 00000010H
$L49143:

; 1034 :     }
; 1035 : 
; 1036 :     //
; 1037 :     // Call the callback
; 1038 :     //
; 1039 : 
; 1040 :     if(pCallback)

  00660	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  00664	74 0f		 je	 SHORT $L49146

; 1041 :     {
; 1042 :         pCallback->EndEntry(this);

  00666	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00669	51		 push	 ecx
  0066a	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  0066d	8b 02		 mov	 eax, DWORD PTR [edx]
  0066f	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  00672	ff 50 20	 call	 DWORD PTR [eax+32]
$L49146:

; 1043 :     }
; 1044 : 
; 1045 :     DPF_LEAVE_HRESULT(hr);
; 1046 : 
; 1047 :     return hr;

  00675	8b 4d b0	 mov	 ecx, DWORD PTR _hr$[ebp]
  00678	89 4d a0	 mov	 DWORD PTR $T49779[ebp], ecx
  0067b	8d 4d e0	 lea	 ecx, DWORD PTR _WaveFile$[ebp]
  0067e	e8 00 00 00 00	 call	 ??1CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::~CStdFileStream
  00683	8d 4d a8	 lea	 ecx, DWORD PTR _BitFilter$[ebp]
  00686	e8 00 00 00 00	 call	 ??1C8BitFilter@@UAE@XZ	; C8BitFilter::~C8BitFilter
  0068b	8d 4d b8	 lea	 ecx, DWORD PTR _AdpcmFilter$[ebp]
  0068e	e8 00 00 00 00	 call	 ??1CXboxAdpcmFilter@@UAE@XZ ; CXboxAdpcmFilter::~CXboxAdpcmFilter
  00693	8b 45 a0	 mov	 eax, DWORD PTR $T49779[ebp]

; 1048 : }

  00696	8b e5		 mov	 esp, ebp
  00698	5d		 pop	 ebp
  00699	c2 18 00	 ret	 24			; 00000018H
?CommitWaveData@CWaveBankEntry@@UAEJPAVCWaveBankCallback@@PAVCStdFileStream@WaveLoader@@KPBU_WAVEBANKENTRY@@PAXK@Z ENDP ; CWaveBankEntry::CommitWaveData
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\filter.h
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ PROC NEAR	; CXboxAdpcmFilter::GetSourceAlignment, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 73   :     return m_wfxEncode.wfx.nChannels * 2 * XBOX_ADPCM_SAMPLES_PER_BLOCK;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  00010	8b c1		 mov	 eax, ecx
  00012	d1 e0		 shl	 eax, 1
  00014	c1 e0 06	 shl	 eax, 6

; 74   : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?GetSourceAlignment@CXboxAdpcmFilter@@UAEKXZ ENDP	; CXboxAdpcmFilter::GetSourceAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetSourceAlignment@C8BitFilter@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetSourceAlignment@C8BitFilter@@UAEKXZ PROC NEAR	; C8BitFilter::GetSourceAlignment, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 155  :     return m_nChannels * 2;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	d1 e0		 shl	 eax, 1

; 156  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?GetSourceAlignment@C8BitFilter@@UAEKXZ ENDP		; C8BitFilter::GetSourceAlignment
_TEXT	ENDS
PUBLIC	??0CWaveBank@@QAE@PAVCWaveBankProject@@@Z	; CWaveBank::CWaveBank
PUBLIC	?Initialize@CWaveBank@@UAEJPBD00@Z		; CWaveBank::Initialize
PUBLIC	?SetName@CWaveBank@@UAEJPBD@Z			; CWaveBank::SetName
PUBLIC	?SetAlignment@CWaveBank@@UAEJK@Z		; CWaveBank::SetAlignment
PUBLIC	?GetBankDataSize@CWaveBank@@UAEKXZ		; CWaveBank::GetBankDataSize
PUBLIC	?AddEntry@CWaveBank@@UAEJPBD0KPAPAVCWaveBankEntry@@@Z ; CWaveBank::AddEntry
PUBLIC	?RemoveEntry@CWaveBank@@UAEXPAVCWaveBankEntry@@@Z ; CWaveBank::RemoveEntry
PUBLIC	?LoadEntries@CWaveBank@@UAEJH@Z			; CWaveBank::LoadEntries
PUBLIC	?GenerateBank@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z ; CWaveBank::GenerateBank
PUBLIC	?GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z ; CWaveBank::GenerateHeader
PUBLIC	?CreateEntry@CWaveBank@@MAEPAVCWaveBankEntry@@XZ ; CWaveBank::CreateEntry
PUBLIC	?GetBankHeaderSize@CWaveBank@@MAEKXZ		; CWaveBank::GetBankHeaderSize
PUBLIC	?FindDuplicateBank@CWaveBank@@MAEJPBDPAI0101@Z	; CWaveBank::FindDuplicateBank
PUBLIC	??_7CWaveBank@@6B@				; CWaveBank::`vftable'
PUBLIC	??_GCWaveBank@@UAEPAXI@Z			; CWaveBank::`scalar deleting destructor'
PUBLIC	??_ECWaveBank@@UAEPAXI@Z			; CWaveBank::`vector deleting destructor'
;	COMDAT ??_7CWaveBank@@6B@
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
CONST	SEGMENT
??_7CWaveBank@@6B@ DD FLAT:??_ECWaveBank@@UAEPAXI@Z	; CWaveBank::`vftable'
	DD	FLAT:?Initialize@CWaveBank@@UAEJPBD00@Z
	DD	FLAT:?SetName@CWaveBank@@UAEJPBD@Z
	DD	FLAT:?SetAlignment@CWaveBank@@UAEJK@Z
	DD	FLAT:?GetBankDataSize@CWaveBank@@UAEKXZ
	DD	FLAT:?AddEntry@CWaveBank@@UAEJPBD0KPAPAVCWaveBankEntry@@@Z
	DD	FLAT:?RemoveEntry@CWaveBank@@UAEXPAVCWaveBankEntry@@@Z
	DD	FLAT:?LoadEntries@CWaveBank@@UAEJH@Z
	DD	FLAT:?GenerateBank@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z
	DD	FLAT:?GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z
	DD	FLAT:?CreateEntry@CWaveBank@@MAEPAVCWaveBankEntry@@XZ
	DD	FLAT:?GetBankHeaderSize@CWaveBank@@MAEKXZ
	DD	FLAT:?FindDuplicateBank@CWaveBank@@MAEJPBDPAI0101@Z
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWaveBank@@QAE@PAVCWaveBankProject@@@Z
_TEXT	SEGMENT
_pParent$ = 8
_this$ = -4
??0CWaveBank@@QAE@PAVCWaveBankProject@@@Z PROC NEAR	; CWaveBank::CWaveBank, COMDAT
; _this$ = ecx

; 1073 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBank@@6B@ ; CWaveBank::`vftable'

; 1074 :     DPF_ENTER();
; 1075 : 
; 1076 :     m_pParent = pParent;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 55 08	 mov	 edx, DWORD PTR _pParent$[ebp]
  00016	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1077 :     m_dwEntryCount = 0;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c7 80 40 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+576], 0

; 1078 :     m_dwAlignment = m_dwMinAlignment;

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	c7 81 48 02 00
	00 04 00 00 00	 mov	 DWORD PTR [ecx+584], 4

; 1079 : 
; 1080 :     InitializeListHead(&m_lstEntries);

  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	81 c2 38 02 00
	00		 add	 edx, 568		; 00000238H
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 90 38 02 00
	00		 mov	 DWORD PTR [eax+568], edx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 82 38 02 00
	00		 mov	 eax, DWORD PTR [edx+568]
  00051	89 81 3c 02 00
	00		 mov	 DWORD PTR [ecx+572], eax

; 1081 : 
; 1082 :     if(m_pParent)

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0005e	74 2d		 je	 SHORT $L49152

; 1083 :     {
; 1084 :         InsertTailListUninit(&m_pParent->m_lstBanks, &m_leBank);

  00060	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	83 c2 08	 add	 edx, 8
  00066	52		 push	 edx
  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	83 c1 04	 add	 ecx, 4
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?InsertTailListUninit@@YGXPAU_LIST_ENTRY@@0@Z ; InsertTailListUninit

; 1085 : 
; 1086 :         m_pParent->m_dwBankCount++;

  00076	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00079	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007f	83 c1 01	 add	 ecx, 1
  00082	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00085	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00088	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1087 :     }
; 1088 :     else

  0008b	eb 18		 jmp	 SHORT $L49153
$L49152:

; 1089 :     {
; 1090 :         InitializeListHead(&m_leBank);

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	83 c1 08	 add	 ecx, 8
  00093	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00096	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a2	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$L49153:

; 1091 :     }
; 1092 : 
; 1093 :     DPF_LEAVE_VOID();
; 1094 : }

  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
??0CWaveBank@@QAE@PAVCWaveBankProject@@@Z ENDP		; CWaveBank::CWaveBank
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.h
_TEXT	ENDS
;	COMDAT ?RemoveEntry@CWaveBank@@UAEXPAVCWaveBankEntry@@@Z
_TEXT	SEGMENT
$T49792 = -4
$T49793 = -8
_pEntry$ = 8
_this$ = -12
?RemoveEntry@CWaveBank@@UAEXPAVCWaveBankEntry@@@Z PROC NEAR ; CWaveBank::RemoveEntry, COMDAT
; _this$ = ecx

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 139  :     DELETE(pEntry);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pEntry$[ebp], 0
  0000d	74 31		 je	 SHORT $L48694
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pEntry$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR $T49793[ebp], eax
  00015	8b 4d f8	 mov	 ecx, DWORD PTR $T49793[ebp]
  00018	89 4d fc	 mov	 DWORD PTR $T49792[ebp], ecx
  0001b	83 7d fc 00	 cmp	 DWORD PTR $T49792[ebp], 0
  0001f	74 11		 je	 SHORT $L49794
  00021	6a 01		 push	 1
  00023	8b 55 fc	 mov	 edx, DWORD PTR $T49792[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR $T49792[ebp]
  0002b	ff 10		 call	 DWORD PTR [eax]
  0002d	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  00030	eb 07		 jmp	 SHORT $L49795
$L49794:
  00032	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR -16+[ebp], 0
$L49795:
  00039	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pEntry$[ebp], 0
$L48694:

; 140  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?RemoveEntry@CWaveBank@@UAEXPAVCWaveBankEntry@@@Z ENDP	; CWaveBank::RemoveEntry
_TEXT	ENDS
PUBLIC	?GetBankHeaderSize@CWaveBank@@KGKK@Z		; CWaveBank::GetBankHeaderSize
; Function compile flags: /Odt
;	COMDAT ?GetBankHeaderSize@CWaveBank@@MAEKXZ
_TEXT	SEGMENT
_this$ = -4
?GetBankHeaderSize@CWaveBank@@MAEKXZ PROC NEAR		; CWaveBank::GetBankHeaderSize, COMDAT
; _this$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 149  :     return GetBankHeaderSize(m_dwEntryCount);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 88 40 02 00
	00		 mov	 ecx, DWORD PTR [eax+576]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?GetBankHeaderSize@CWaveBank@@KGKK@Z ; CWaveBank::GetBankHeaderSize

; 150  : }

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetBankHeaderSize@CWaveBank@@MAEKXZ ENDP		; CWaveBank::GetBankHeaderSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetBankHeaderSize@CWaveBank@@KGKK@Z
_TEXT	SEGMENT
_dwEntryCount$ = 8
?GetBankHeaderSize@CWaveBank@@KGKK@Z PROC NEAR		; CWaveBank::GetBankHeaderSize, COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 144  :     return sizeof(WAVEBANKHEADER) + (sizeof(WAVEBANKENTRY) * dwEntryCount);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwEntryCount$[ebp]
  00006	6b c0 14	 imul	 eax, 20			; 00000014H
  00009	83 c0 24	 add	 eax, 36			; 00000024H

; 145  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?GetBankHeaderSize@CWaveBank@@KGKK@Z ENDP		; CWaveBank::GetBankHeaderSize
_TEXT	ENDS
PUBLIC	??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@	; `string'
PUBLIC	??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
;	COMDAT ??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@ DB 'CWaveBankEntry(this)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@
CONST	SEGMENT
??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@ DB 'c:\xbox\privat'
	DB	'e\windows\directx\xact\common\wavbndlr\writer.h', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CreateEntry@CWaveBank@@MAEPAVCWaveBankEntry@@XZ
_TEXT	SEGMENT
$T49805 = -4
_this$ = -8
?CreateEntry@CWaveBank@@MAEPAVCWaveBankEntry@@XZ PROC NEAR ; CWaveBank::CreateEntry, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 154  :     return NEW(CWaveBankEntry(this));

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@KCDF@CWaveBankEntry?$CIthis?$CJ?$AA@ ; `string'
  0000e	68 9a 00 00 00	 push	 154			; 0000009aH
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00018	68 38 03 00 00	 push	 824			; 00000338H
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR $T49805[ebp], eax
  00028	83 7d fc 00	 cmp	 DWORD PTR $T49805[ebp], 0
  0002c	74 11		 je	 SHORT $L49806
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR $T49805[ebp]
  00035	e8 00 00 00 00	 call	 ??0CWaveBankEntry@@QAE@PAVCWaveBank@@@Z ; CWaveBankEntry::CWaveBankEntry
  0003a	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  0003d	eb 07		 jmp	 SHORT $L49807
$L49806:
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L49807:
  00046	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 155  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?CreateEntry@CWaveBank@@MAEPAVCWaveBankEntry@@XZ ENDP	; CWaveBank::CreateEntry
_TEXT	ENDS
EXTRN	?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z:NEAR ; DirectSound::CMemoryManager::TrackingPoolAlloc
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\dsound\common\memmgr.h
;	COMDAT ??2@YAPAXIPBDK0@Z
_TEXT	SEGMENT
_cbBuffer$ = 8
_pszFile$ = 12
_nLine$ = 16
_pszClass$ = 20
??2@YAPAXIPBDK0@Z PROC NEAR				; operator new, COMDAT

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  :     return DirectSound::CMemoryManager::TrackingMemAlloc(pszFile, nLine, pszClass, DSOUND_OBJECT_POOL_TAG, cbBuffer, TRUE); 

  00003	6a 01		 push	 1
  00005	8b 45 08	 mov	 eax, DWORD PTR _cbBuffer$[ebp]
  00008	50		 push	 eax
  00009	68 44 53 6f 62	 push	 1651462980		; 626f5344H
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _pszClass$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 10	 mov	 edx, DWORD PTR _nLine$[ebp]
  00015	52		 push	 edx
  00016	8b 45 0c	 mov	 eax, DWORD PTR _pszFile$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc

; 234  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??2@YAPAXIPBDK0@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??1CWaveBank@@UAE@XZ				; CWaveBank::~CWaveBank
; Function compile flags: /Odt
;	COMDAT ??_GCWaveBank@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCWaveBank@@UAEPAXI@Z PROC NEAR			; CWaveBank::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWaveBank@@UAE@XZ	; CWaveBank::~CWaveBank
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L49157
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L49157:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWaveBank@@UAEPAXI@Z ENDP				; CWaveBank::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BJ@CNLP@m_pParent?9?$DOm_dwBankCount?$AA@ ; `string'
;	COMDAT ??_C@_0BJ@CNLP@m_pParent?9?$DOm_dwBankCount?$AA@
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
CONST	SEGMENT
??_C@_0BJ@CNLP@m_pParent?9?$DOm_dwBankCount?$AA@ DB 'm_pParent->m_dwBankC'
	DB	'ount', 00H					; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??1CWaveBank@@UAE@XZ
_TEXT	SEGMENT
$T49817 = -12
$T49818 = -16
_this$ = -20
_pleEntry$ = -8
_pEntry$ = -4
??1CWaveBank@@UAE@XZ PROC NEAR				; CWaveBank::~CWaveBank, COMDAT
; _this$ = ecx

; 1119 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBank@@6B@ ; CWaveBank::`vftable'
$L49165:

; 1120 :     PLIST_ENTRY             pleEntry;
; 1121 :     CWaveBankEntry *        pEntry;
; 1122 :     
; 1123 :     DPF_ENTER();
; 1124 : 
; 1125 :     //
; 1126 :     // Free all the entries
; 1127 :     //
; 1128 :     
; 1129 :     while((pleEntry = m_lstEntries.Flink) != &m_lstEntries)

  00012	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 91 38 02 00
	00		 mov	 edx, DWORD PTR [ecx+568]
  0001b	89 55 f8	 mov	 DWORD PTR _pleEntry$[ebp], edx
  0001e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00021	05 38 02 00 00	 add	 eax, 568		; 00000238H
  00026	39 45 f8	 cmp	 DWORD PTR _pleEntry$[ebp], eax
  00029	74 42		 je	 SHORT $L49166

; 1130 :     {
; 1131 :         pEntry = CONTAINING_RECORD(pleEntry, CWaveBankEntry, m_leEntry);

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  0002e	83 e9 08	 sub	 ecx, 8
  00031	89 4d fc	 mov	 DWORD PTR _pEntry$[ebp], ecx

; 1132 :         
; 1133 :         DELETE(pEntry);

  00034	83 7d fc 00	 cmp	 DWORD PTR _pEntry$[ebp], 0
  00038	74 31		 je	 SHORT $L49171
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  0003d	89 55 f0	 mov	 DWORD PTR $T49818[ebp], edx
  00040	8b 45 f0	 mov	 eax, DWORD PTR $T49818[ebp]
  00043	89 45 f4	 mov	 DWORD PTR $T49817[ebp], eax
  00046	83 7d f4 00	 cmp	 DWORD PTR $T49817[ebp], 0
  0004a	74 11		 je	 SHORT $L49819
  0004c	6a 01		 push	 1
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR $T49817[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR $T49817[ebp]
  00056	ff 12		 call	 DWORD PTR [edx]
  00058	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  0005b	eb 07		 jmp	 SHORT $L49820
$L49819:
  0005d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L49820:
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pEntry$[ebp], 0
$L49171:

; 1134 :     }

  0006b	eb a5		 jmp	 SHORT $L49165
$L49166:

; 1135 : 
; 1136 :     //
; 1137 :     // Free ourselves from the parent list
; 1138 :     //
; 1139 : 
; 1140 :     RemoveEntryList(&m_leBank);

  0006d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00070	83 c0 08	 add	 eax, 8
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?RemoveEntryList@@YGPAU_LIST_ENTRY@@PAU1@@Z ; RemoveEntryList

; 1141 : 
; 1142 :     if(m_pParent)

  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00080	74 3c		 je	 SHORT $L49174

; 1143 :     {
; 1144 :         ASSERT(m_pParent->m_dwBankCount);

  00082	68 78 04 00 00	 push	 1144			; 00000478H
  00087	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0008c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BJ@CNLP@m_pParent?9?$DOm_dwBankCount?$AA@ ; `string'
  00091	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00094	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00097	33 c9		 xor	 ecx, ecx
  00099	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0009d	0f 94 c1	 sete	 cl
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  000a6	83 c4 10	 add	 esp, 16			; 00000010H

; 1145 :         m_pParent->m_dwBankCount--;

  000a9	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000ac	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000af	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b2	83 e9 01	 sub	 ecx, 1
  000b5	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bb	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L49174:

; 1146 :     }
; 1147 : 
; 1148 :     DPF_LEAVE_VOID();
; 1149 : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
??1CWaveBank@@UAE@XZ ENDP				; CWaveBank::~CWaveBank
_TEXT	ENDS
PUBLIC	??_C@_0BG@DKKB@CWaveBank?3?3Initialize?$AA@	; `string'
PUBLIC	??_C@_0EH@GOPH@A?5bank?5with?5that?5name?5?$CIor?5a?5simi@ ; `string'
PUBLIC	??_C@_0DJ@FGEE@A?5bank?5using?5that?5filename?5alrea@ ; `string'
PUBLIC	??_C@_0EA@FPCK@A?5bank?5using?5that?5header?5filenam@ ; `string'
;	COMDAT ??_C@_0BG@DKKB@CWaveBank?3?3Initialize?$AA@
CONST	SEGMENT
??_C@_0BG@DKKB@CWaveBank?3?3Initialize?$AA@ DB 'CWaveBank::Initialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@GOPH@A?5bank?5with?5that?5name?5?$CIor?5a?5simi@
CONST	SEGMENT
??_C@_0EH@GOPH@A?5bank?5with?5that?5name?5?$CIor?5a?5simi@ DB 'A bank wit'
	DB	'h that name (or a similar one) already exists in the project', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FGEE@A?5bank?5using?5that?5filename?5alrea@
CONST	SEGMENT
??_C@_0DJ@FGEE@A?5bank?5using?5that?5filename?5alrea@ DB 'A bank using th'
	DB	'at filename already exists in the project', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FPCK@A?5bank?5using?5that?5header?5filenam@
CONST	SEGMENT
??_C@_0EA@FPCK@A?5bank?5using?5that?5header?5filenam@ DB 'A bank using th'
	DB	'at header filename already exists in the project', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?Initialize@CWaveBank@@UAEJPBD00@Z
_TEXT	SEGMENT
_pszBankName$ = 8
_pszBankFile$ = 12
_pszHeaderFile$ = 16
_this$ = -20
_hr$ = -16
_nNameCount$ = -12
_nBankFileCount$ = -8
_nHeaderFileCount$ = -4
?Initialize@CWaveBank@@UAEJPBD00@Z PROC NEAR		; CWaveBank::Initialize, COMDAT
; _this$ = ecx

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1180 :     HRESULT                 hr                  = S_OK;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1181 :     UINT                    nNameCount;
; 1182 :     UINT                    nBankFileCount;
; 1183 :     UINT                    nHeaderFileCount;
; 1184 : 
; 1185 :     DPF_ENTER();
; 1186 : 
; 1187 :     _tcsncpy(m_szBankName, pszBankName, NUMELMS(m_szBankName));

  00010	6a 10		 push	 16			; 00000010H
  00012	8b 45 08	 mov	 eax, DWORD PTR _pszBankName$[ebp]
  00015	50		 push	 eax
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 10	 add	 ecx, 16			; 00000010H
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 _strncpy
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1188 :     _tcsncpy(m_szHeaderName, pszBankName, NUMELMS(m_szHeaderName));

  00025	6a 10		 push	 16			; 00000010H
  00027	8b 55 08	 mov	 edx, DWORD PTR _pszBankName$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 20	 add	 eax, 32			; 00000020H
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _strncpy
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1189 :     MakeHeaderString(m_szHeaderName);

  0003a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	83 c1 20	 add	 ecx, 32			; 00000020H
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 ?MakeHeaderString@@YGXPAD@Z ; MakeHeaderString

; 1190 : 
; 1191 :     GetFullPathName(pszBankFile, NUMELMS(m_szBankFile), m_szBankFile, NULL);

  00046	6a 00		 push	 0
  00048	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	83 c2 30	 add	 edx, 48			; 00000030H
  0004e	52		 push	 edx
  0004f	68 04 01 00 00	 push	 260			; 00000104H
  00054	8b 45 0c	 mov	 eax, DWORD PTR _pszBankFile$[ebp]
  00057	50		 push	 eax
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFullPathNameA@16

; 1192 :     GetFullPathName(pszHeaderFile, NUMELMS(m_szHeaderFile), m_szHeaderFile, NULL);

  0005e	6a 00		 push	 0
  00060	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	81 c1 34 01 00
	00		 add	 ecx, 308		; 00000134H
  00069	51		 push	 ecx
  0006a	68 04 01 00 00	 push	 260			; 00000104H
  0006f	8b 55 10	 mov	 edx, DWORD PTR _pszHeaderFile$[ebp]
  00072	52		 push	 edx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFullPathNameA@16

; 1193 : 
; 1194 :     FindDuplicateBank(m_szHeaderName, &nNameCount, m_szBankFile, &nBankFileCount, m_szHeaderFile, &nHeaderFileCount);

  00079	8d 45 fc	 lea	 eax, DWORD PTR _nHeaderFileCount$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	81 c1 34 01 00
	00		 add	 ecx, 308		; 00000134H
  00086	51		 push	 ecx
  00087	8d 55 f8	 lea	 edx, DWORD PTR _nBankFileCount$[ebp]
  0008a	52		 push	 edx
  0008b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	83 c0 30	 add	 eax, 48			; 00000030H
  00091	50		 push	 eax
  00092	8d 4d f4	 lea	 ecx, DWORD PTR _nNameCount$[ebp]
  00095	51		 push	 ecx
  00096	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00099	83 c2 20	 add	 edx, 32			; 00000020H
  0009c	52		 push	 edx
  0009d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 10		 mov	 edx, DWORD PTR [eax]
  000a2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	ff 52 30	 call	 DWORD PTR [edx+48]

; 1195 : 
; 1196 :     if(nNameCount)

  000a8	83 7d f4 00	 cmp	 DWORD PTR _nNameCount$[ebp], 0
  000ac	74 36		 je	 SHORT $L49187

; 1197 :     {
; 1198 :         DPF_ERROR("A bank with that name (or a similar one) already exists in the project");

  000ae	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@DKKB@CWaveBank?3?3Initialize?$AA@ ; `string'
  000b8	68 ae 04 00 00	 push	 1198			; 000004aeH
  000bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000c2	6a 01		 push	 1
  000c4	6a 09		 push	 9
  000c6	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000cb	83 c4 18	 add	 esp, 24			; 00000018H
  000ce	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@GOPH@A?5bank?5with?5that?5name?5?$CIor?5a?5simi@ ; `string'
  000d3	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000d8	83 c4 04	 add	 esp, 4

; 1199 :         hr = E_FAIL;

  000db	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 1200 :     }
; 1201 :     else if(nBankFileCount)

  000e2	eb 76		 jmp	 SHORT $L49191
$L49187:
  000e4	83 7d f8 00	 cmp	 DWORD PTR _nBankFileCount$[ebp], 0
  000e8	74 36		 je	 SHORT $L49192

; 1202 :     {
; 1203 :         DPF_ERROR("A bank using that filename already exists in the project");

  000ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  000ef	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@DKKB@CWaveBank?3?3Initialize?$AA@ ; `string'
  000f4	68 b3 04 00 00	 push	 1203			; 000004b3H
  000f9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000fe	6a 01		 push	 1
  00100	6a 09		 push	 9
  00102	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00107	83 c4 18	 add	 esp, 24			; 00000018H
  0010a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DJ@FGEE@A?5bank?5using?5that?5filename?5alrea@ ; `string'
  0010f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00114	83 c4 04	 add	 esp, 4

; 1204 :         hr = E_FAIL;

  00117	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 1205 :     }
; 1206 :     else if(nHeaderFileCount)

  0011e	eb 3a		 jmp	 SHORT $L49195
$L49192:
  00120	83 7d fc 00	 cmp	 DWORD PTR _nHeaderFileCount$[ebp], 0
  00124	74 34		 je	 SHORT $L49196

; 1207 :     {
; 1208 :         DPF_ERROR("A bank using that header filename already exists in the project");

  00126	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0012b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@DKKB@CWaveBank?3?3Initialize?$AA@ ; `string'
  00130	68 b8 04 00 00	 push	 1208			; 000004b8H
  00135	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0013a	6a 01		 push	 1
  0013c	6a 09		 push	 9
  0013e	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00143	83 c4 18	 add	 esp, 24			; 00000018H
  00146	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@FPCK@A?5bank?5using?5that?5header?5filenam@ ; `string'
  0014b	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00150	83 c4 04	 add	 esp, 4

; 1209 :         hr = E_FAIL;

  00153	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49196:
$L49195:
$L49191:

; 1210 :     }
; 1211 : 
; 1212 :     DPF_LEAVE_HRESULT(hr);
; 1213 : 
; 1214 :     return hr;

  0015a	8b 45 f0	 mov	 eax, DWORD PTR _hr$[ebp]

; 1215 : }

  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c2 0c 00	 ret	 12			; 0000000cH
?Initialize@CWaveBank@@UAEJPBD00@Z ENDP			; CWaveBank::Initialize
_TEXT	ENDS
PUBLIC	??_C@_0BH@NHHK@pszName?5?$HM?$HM?5pszBankFile?$AA@ ; `string'
;	COMDAT ??_C@_0BH@NHHK@pszName?5?$HM?$HM?5pszBankFile?$AA@
CONST	SEGMENT
??_C@_0BH@NHHK@pszName?5?$HM?$HM?5pszBankFile?$AA@ DB 'pszName || pszBank'
	DB	'File', 00H					; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?FindDuplicateBank@CWaveBank@@MAEJPBDPAI0101@Z
_TEXT	SEGMENT
_pszName$ = 8
_pnNameCount$ = 12
_pszBankFile$ = 16
_pnBankFileCount$ = 20
_pszHeaderFile$ = 24
_pnHeaderFileCount$ = 28
_this$ = -16
_hr$ = -8
_pleBank$ = -12
_pBank$ = -4
?FindDuplicateBank@CWaveBank@@MAEJPBDPAI0101@Z PROC NEAR ; CWaveBank::FindDuplicateBank, COMDAT
; _this$ = ecx

; 1249 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1250 :     HRESULT                 hr          = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1251 :     PLIST_ENTRY             pleBank;
; 1252 :     CWaveBank *             pBank;
; 1253 :     
; 1254 :     DPF_ENTER();
; 1255 : 
; 1256 :     ASSERT(pszName || pszBankFile);

  00010	83 7d 08 00	 cmp	 DWORD PTR _pszName$[ebp], 0
  00014	75 0f		 jne	 SHORT $L49827
  00016	83 7d 10 00	 cmp	 DWORD PTR _pszBankFile$[ebp], 0
  0001a	75 09		 jne	 SHORT $L49827
  0001c	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR -20+[ebp], 1
  00023	eb 07		 jmp	 SHORT $L49828
$L49827:
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR -20+[ebp], 0
$L49828:
  0002c	68 e8 04 00 00	 push	 1256			; 000004e8H
  00031	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@NHHK@pszName?5?$HM?$HM?5pszBankFile?$AA@ ; `string'
  0003b	8b 45 ec	 mov	 eax, DWORD PTR -20+[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 1257 : 
; 1258 :     if(pnNameCount)

  00047	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  0004b	74 09		 je	 SHORT $L49213

; 1259 :     {
; 1260 :         *pnNameCount = 0;

  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _pnNameCount$[ebp]
  00050	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L49213:

; 1261 :     }
; 1262 : 
; 1263 :     if(pnBankFileCount)

  00056	83 7d 14 00	 cmp	 DWORD PTR _pnBankFileCount$[ebp], 0
  0005a	74 09		 je	 SHORT $L49214

; 1264 :     {
; 1265 :         *pnBankFileCount = 0;

  0005c	8b 55 14	 mov	 edx, DWORD PTR _pnBankFileCount$[ebp]
  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$L49214:

; 1266 :     }
; 1267 : 
; 1268 :     if(pnHeaderFileCount)

  00065	83 7d 1c 00	 cmp	 DWORD PTR _pnHeaderFileCount$[ebp], 0
  00069	74 09		 je	 SHORT $L49215

; 1269 :     {
; 1270 :         *pnHeaderFileCount = 0;

  0006b	8b 45 1c	 mov	 eax, DWORD PTR _pnHeaderFileCount$[ebp]
  0006e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L49215:

; 1271 :     }
; 1272 : 
; 1273 :     for(pleBank = m_pParent->m_lstBanks.Flink; pleBank != &m_pParent->m_lstBanks; pleBank = pleBank->Flink)

  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007d	89 45 f4	 mov	 DWORD PTR _pleBank$[ebp], eax
  00080	eb 08		 jmp	 SHORT $L49216
$L49217:
  00082	8b 4d f4	 mov	 ecx, DWORD PTR _pleBank$[ebp]
  00085	8b 11		 mov	 edx, DWORD PTR [ecx]
  00087	89 55 f4	 mov	 DWORD PTR _pleBank$[ebp], edx
$L49216:
  0008a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00090	83 c1 04	 add	 ecx, 4
  00093	39 4d f4	 cmp	 DWORD PTR _pleBank$[ebp], ecx
  00096	0f 84 e1 00 00
	00		 je	 $L49218

; 1274 :     {
; 1275 :         if(this == (pBank = CONTAINING_RECORD(pleBank, CWaveBank, m_leBank)))

  0009c	8b 55 f4	 mov	 edx, DWORD PTR _pleBank$[ebp]
  0009f	83 ea 08	 sub	 edx, 8
  000a2	89 55 fc	 mov	 DWORD PTR _pBank$[ebp], edx
  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	3b 45 fc	 cmp	 eax, DWORD PTR _pBank$[ebp]
  000ab	75 02		 jne	 SHORT $L49223

; 1276 :         {
; 1277 :             continue;

  000ad	eb d3		 jmp	 SHORT $L49217
$L49223:

; 1278 :         }
; 1279 : 
; 1280 :         if(pszName)

  000af	83 7d 08 00	 cmp	 DWORD PTR _pszName$[ebp], 0
  000b3	74 3e		 je	 SHORT $L49224

; 1281 :         {
; 1282 :             if(!_tcsicmp(pszName, pBank->m_szHeaderName))

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _pBank$[ebp]
  000b8	83 c1 20	 add	 ecx, 32			; 00000020H
  000bb	51		 push	 ecx
  000bc	8b 55 08	 mov	 edx, DWORD PTR _pszName$[ebp]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 __stricmp
  000c5	83 c4 08	 add	 esp, 8
  000c8	85 c0		 test	 eax, eax
  000ca	75 27		 jne	 SHORT $L49225

; 1283 :             {
; 1284 :                 hr = E_FAIL;

  000cc	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 1285 :                 
; 1286 :                 if(pnNameCount)

  000d3	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  000d7	74 0f		 je	 SHORT $L49227

; 1287 :                 {
; 1288 :                     *pnNameCount = *pnNameCount + 1;

  000d9	8b 45 0c	 mov	 eax, DWORD PTR _pnNameCount$[ebp]
  000dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000de	83 c1 01	 add	 ecx, 1
  000e1	8b 55 0c	 mov	 edx, DWORD PTR _pnNameCount$[ebp]
  000e4	89 0a		 mov	 DWORD PTR [edx], ecx

; 1289 :                 }
; 1290 :                 else if(!pnBankFileCount)

  000e6	eb 0b		 jmp	 SHORT $L49228
$L49227:
  000e8	83 7d 14 00	 cmp	 DWORD PTR _pnBankFileCount$[ebp], 0
  000ec	75 05		 jne	 SHORT $L49229

; 1291 :                 {
; 1292 :                     break;

  000ee	e9 8a 00 00 00	 jmp	 $L49218
$L49229:
$L49228:
$L49225:
$L49224:

; 1293 :                 }
; 1294 :             }
; 1295 :         }
; 1296 : 
; 1297 :         if(pszBankFile)

  000f3	83 7d 10 00	 cmp	 DWORD PTR _pszBankFile$[ebp], 0
  000f7	74 3b		 je	 SHORT $L49230

; 1298 :         {
; 1299 :             if(!_tcsicmp(pszBankFile, pBank->m_szBankFile))

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _pBank$[ebp]
  000fc	83 c0 30	 add	 eax, 48			; 00000030H
  000ff	50		 push	 eax
  00100	8b 4d 10	 mov	 ecx, DWORD PTR _pszBankFile$[ebp]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 __stricmp
  00109	83 c4 08	 add	 esp, 8
  0010c	85 c0		 test	 eax, eax
  0010e	75 24		 jne	 SHORT $L49231

; 1300 :             {
; 1301 :                 hr = E_FAIL;

  00110	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 1302 :                 
; 1303 :                 if(pnBankFileCount)

  00117	83 7d 14 00	 cmp	 DWORD PTR _pnBankFileCount$[ebp], 0
  0011b	74 0f		 je	 SHORT $L49233

; 1304 :                 {
; 1305 :                     *pnBankFileCount = *pnBankFileCount + 1;

  0011d	8b 55 14	 mov	 edx, DWORD PTR _pnBankFileCount$[ebp]
  00120	8b 02		 mov	 eax, DWORD PTR [edx]
  00122	83 c0 01	 add	 eax, 1
  00125	8b 4d 14	 mov	 ecx, DWORD PTR _pnBankFileCount$[ebp]
  00128	89 01		 mov	 DWORD PTR [ecx], eax

; 1306 :                 }
; 1307 :                 else if(!pnNameCount)

  0012a	eb 08		 jmp	 SHORT $L49234
$L49233:
  0012c	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  00130	75 02		 jne	 SHORT $L49235

; 1308 :                 {
; 1309 :                     break;

  00132	eb 49		 jmp	 SHORT $L49218
$L49235:
$L49234:
$L49231:
$L49230:

; 1310 :                 }
; 1311 :             }
; 1312 :         }
; 1313 : 
; 1314 :         if(pszHeaderFile)

  00134	83 7d 18 00	 cmp	 DWORD PTR _pszHeaderFile$[ebp], 0
  00138	74 3e		 je	 SHORT $L49236

; 1315 :         {
; 1316 :             if(!_tcsicmp(pszHeaderFile, pBank->m_szHeaderFile))

  0013a	8b 55 fc	 mov	 edx, DWORD PTR _pBank$[ebp]
  0013d	81 c2 34 01 00
	00		 add	 edx, 308		; 00000134H
  00143	52		 push	 edx
  00144	8b 45 18	 mov	 eax, DWORD PTR _pszHeaderFile$[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 __stricmp
  0014d	83 c4 08	 add	 esp, 8
  00150	85 c0		 test	 eax, eax
  00152	75 24		 jne	 SHORT $L49237

; 1317 :             {
; 1318 :                 hr = E_FAIL;

  00154	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H

; 1319 :                 
; 1320 :                 if(pnHeaderFileCount)

  0015b	83 7d 1c 00	 cmp	 DWORD PTR _pnHeaderFileCount$[ebp], 0
  0015f	74 0f		 je	 SHORT $L49239

; 1321 :                 {
; 1322 :                     *pnHeaderFileCount = *pnHeaderFileCount + 1;

  00161	8b 4d 1c	 mov	 ecx, DWORD PTR _pnHeaderFileCount$[ebp]
  00164	8b 11		 mov	 edx, DWORD PTR [ecx]
  00166	83 c2 01	 add	 edx, 1
  00169	8b 45 1c	 mov	 eax, DWORD PTR _pnHeaderFileCount$[ebp]
  0016c	89 10		 mov	 DWORD PTR [eax], edx

; 1323 :                 }
; 1324 :                 else if(!pnNameCount)

  0016e	eb 08		 jmp	 SHORT $L49240
$L49239:
  00170	83 7d 0c 00	 cmp	 DWORD PTR _pnNameCount$[ebp], 0
  00174	75 02		 jne	 SHORT $L49241

; 1325 :                 {
; 1326 :                     break;

  00176	eb 05		 jmp	 SHORT $L49218
$L49241:
$L49240:
$L49237:
$L49236:

; 1327 :                 }
; 1328 :             }
; 1329 :         }
; 1330 :     }

  00178	e9 05 ff ff ff	 jmp	 $L49217
$L49218:

; 1331 :     
; 1332 :     DPF_LEAVE_HRESULT(hr);
; 1333 : 
; 1334 :     return hr;

  0017d	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1335 : }

  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 18 00	 ret	 24			; 00000018H
?FindDuplicateBank@CWaveBank@@MAEJPBDPAI0101@Z ENDP	; CWaveBank::FindDuplicateBank
_TEXT	ENDS
PUBLIC	??_C@_07OKEH@SetName?$AA@			; `string'
;	COMDAT ??_C@_07OKEH@SetName?$AA@
CONST	SEGMENT
??_C@_07OKEH@SetName?$AA@ DB 'SetName', 00H		; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetName@CWaveBank@@UAEJPBD@Z
_TEXT	SEGMENT
_pszName$ = 8
_this$ = -24
_hr$ = -20
_szHeaderName$ = -16
?SetName@CWaveBank@@UAEJPBD@Z PROC NEAR			; CWaveBank::SetName, COMDAT
; _this$ = ecx

; 1361 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1362 :     HRESULT                 hr                                      = S_OK;

  00009	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1363 :     TCHAR                   szHeaderName[NUMELMS(m_szHeaderName)];
; 1364 : 
; 1365 :     if(_tcslen(pszName) >= NUMELMS(m_szBankName))

  00010	8b 45 08	 mov	 eax, DWORD PTR _pszName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _strlen
  00019	83 c4 04	 add	 esp, 4
  0001c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0001f	72 34		 jb	 SHORT $L49249

; 1366 :     {
; 1367 :         DPF_ERROR("That name is too long");

  00021	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00026	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OKEH@SetName?$AA@ ; `string'
  0002b	68 57 05 00 00	 push	 1367			; 00000557H
  00030	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00035	6a 01		 push	 1
  00037	6a 09		 push	 9
  00039	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003e	83 c4 18	 add	 esp, 24			; 00000018H
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BG@EPOG@That?5name?5is?5too?5long?$AA@ ; `string'
  00046	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004b	83 c4 04	 add	 esp, 4

; 1368 :         hr = E_FAIL;

  0004e	c7 45 ec 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49249:

; 1369 :     }
; 1370 : 
; 1371 :     if(SUCCEEDED(hr))

  00055	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00059	0f 8c 96 00 00
	00		 jl	 $L49253

; 1372 :     {
; 1373 :         _tcsncpy(szHeaderName, pszName, NUMELMS(szHeaderName));

  0005f	6a 10		 push	 16			; 00000010H
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  00064	51		 push	 ecx
  00065	8d 55 f0	 lea	 edx, DWORD PTR _szHeaderName$[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _strncpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1374 :         MakeHeaderString(szHeaderName);

  00071	8d 45 f0	 lea	 eax, DWORD PTR _szHeaderName$[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?MakeHeaderString@@YGXPAD@Z ; MakeHeaderString

; 1375 : 
; 1376 :         hr = FindDuplicateBank(szHeaderName, NULL, NULL, NULL, NULL, NULL);

  0007a	6a 00		 push	 0
  0007c	6a 00		 push	 0
  0007e	6a 00		 push	 0
  00080	6a 00		 push	 0
  00082	6a 00		 push	 0
  00084	8d 4d f0	 lea	 ecx, DWORD PTR _szHeaderName$[ebp]
  00087	51		 push	 ecx
  00088	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 02		 mov	 eax, DWORD PTR [edx]
  0008d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	ff 50 30	 call	 DWORD PTR [eax+48]
  00093	89 45 ec	 mov	 DWORD PTR _hr$[ebp], eax

; 1377 : 
; 1378 :         if(SUCCEEDED(hr))

  00096	83 7d ec 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0009a	7c 2c		 jl	 SHORT $L49255

; 1379 :         {
; 1380 :             _tcsncpy(m_szBankName, pszName, NUMELMS(m_szBankName));

  0009c	6a 10		 push	 16			; 00000010H
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  000a1	51		 push	 ecx
  000a2	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	83 c2 10	 add	 edx, 16			; 00000010H
  000a8	52		 push	 edx
  000a9	e8 00 00 00 00	 call	 _strncpy
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1381 :             _tcsncpy(m_szHeaderName, szHeaderName, NUMELMS(m_szHeaderName));

  000b1	6a 10		 push	 16			; 00000010H
  000b3	8d 45 f0	 lea	 eax, DWORD PTR _szHeaderName$[ebp]
  000b6	50		 push	 eax
  000b7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	83 c1 20	 add	 ecx, 32			; 00000020H
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 _strncpy
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1382 :         }
; 1383 :         else

  000c6	eb 2d		 jmp	 SHORT $L49256
$L49255:

; 1384 :         {
; 1385 :             DPF_ERROR("A bank with that name (or a similar one) already exists in the project");

  000c8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  000cd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07OKEH@SetName?$AA@ ; `string'
  000d2	68 69 05 00 00	 push	 1385			; 00000569H
  000d7	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000dc	6a 01		 push	 1
  000de	6a 09		 push	 9
  000e0	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000e5	83 c4 18	 add	 esp, 24			; 00000018H
  000e8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EH@GOPH@A?5bank?5with?5that?5name?5?$CIor?5a?5simi@ ; `string'
  000ed	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000f2	83 c4 04	 add	 esp, 4
$L49256:
$L49253:

; 1386 :         }
; 1387 :     }
; 1388 : 
; 1389 :     return hr;

  000f5	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]

; 1390 : }

  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
?SetName@CWaveBank@@UAEJPBD@Z ENDP			; CWaveBank::SetName
_TEXT	ENDS
PUBLIC	??_C@_0N@HBCM@SetAlignment?$AA@			; `string'
PUBLIC	??_C@_0CE@BNOI@Alignment?5must?5be?5a?5multiple?5of?5@ ; `string'
;	COMDAT ??_C@_0N@HBCM@SetAlignment?$AA@
CONST	SEGMENT
??_C@_0N@HBCM@SetAlignment?$AA@ DB 'SetAlignment', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BNOI@Alignment?5must?5be?5a?5multiple?5of?5@
CONST	SEGMENT
??_C@_0CE@BNOI@Alignment?5must?5be?5a?5multiple?5of?5@ DB 'Alignment must'
	DB	' be a multiple of %lu', 00H			; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?SetAlignment@CWaveBank@@UAEJK@Z
_TEXT	SEGMENT
_dwAlignment$ = 8
_this$ = -8
_hr$ = -4
?SetAlignment@CWaveBank@@UAEJK@Z PROC NEAR		; CWaveBank::SetAlignment, COMDAT
; _this$ = ecx

; 1416 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1417 :     HRESULT                 hr  = S_OK;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1418 :     
; 1419 :     if(dwAlignment % m_dwMinAlignment)

  00010	8b 45 08	 mov	 eax, DWORD PTR _dwAlignment$[ebp]
  00013	33 d2		 xor	 edx, edx
  00015	b9 04 00 00 00	 mov	 ecx, 4
  0001a	f7 f1		 div	 ecx
  0001c	85 d2		 test	 edx, edx
  0001e	74 36		 je	 SHORT $L49263

; 1420 :     {
; 1421 :         DPF_ERROR("Alignment must be a multiple of %lu", m_dwMinAlignment);

  00020	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00025	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0N@HBCM@SetAlignment?$AA@ ; `string'
  0002a	68 8d 05 00 00	 push	 1421			; 0000058dH
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00034	6a 01		 push	 1
  00036	6a 09		 push	 9
  00038	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	6a 04		 push	 4
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CE@BNOI@Alignment?5must?5be?5a?5multiple?5of?5@ ; `string'
  00047	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0004c	83 c4 08	 add	 esp, 8

; 1422 :         hr = E_INVALIDARG;

  0004f	c7 45 fc 57 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024809 ; 80070057H
$L49263:

; 1423 :     }
; 1424 : 
; 1425 :     if(SUCCEEDED(hr))

  00056	83 7d fc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005a	7c 0c		 jl	 SHORT $L49268

; 1426 :     {
; 1427 :         m_dwAlignment = dwAlignment;

  0005c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 45 08	 mov	 eax, DWORD PTR _dwAlignment$[ebp]
  00062	89 82 48 02 00
	00		 mov	 DWORD PTR [edx+584], eax
$L49268:

; 1428 :     }
; 1429 : 
; 1430 :     return hr;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _hr$[ebp]

; 1431 : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?SetAlignment@CWaveBank@@UAEJK@Z ENDP			; CWaveBank::SetAlignment
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddEntry@CWaveBank@@UAEJPBD0KPAPAVCWaveBankEntry@@@Z
_TEXT	SEGMENT
$T49838 = -12
$T49839 = -16
_pszEntryName$ = 8
_pszFileName$ = 12
_dwFlags$ = 16
_ppEntry$ = 20
_this$ = -20
_pEntry$ = -4
_hr$ = -8
?AddEntry@CWaveBank@@UAEJPBD0KPAPAVCWaveBankEntry@@@Z PROC NEAR ; CWaveBank::AddEntry, COMDAT
; _this$ = ecx

; 1463 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1464 :     CWaveBankEntry *        pEntry;
; 1465 :     HRESULT                 hr;
; 1466 :     
; 1467 :     DPF_ENTER();
; 1468 : 
; 1469 :     hr = HRFROMP(pEntry = CreateEntry());

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	ff 52 28	 call	 DWORD PTR [edx+40]
  00014	89 45 fc	 mov	 DWORD PTR _pEntry$[ebp], eax
  00017	8b 45 fc	 mov	 eax, DWORD PTR _pEntry$[ebp]
  0001a	f7 d8		 neg	 eax
  0001c	1b c0		 sbb	 eax, eax
  0001e	25 f2 ff f8 7f	 and	 eax, 2147024882		; 7ff8fff2H
  00023	05 0e 00 07 80	 add	 eax, -2147024882	; 8007000eH
  00028	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1470 : 
; 1471 :     if(SUCCEEDED(hr))

  0002b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002f	7c 1a		 jl	 SHORT $L49281

; 1472 :     {
; 1473 :         hr = pEntry->Initialize(pszEntryName, pszFileName, dwFlags);

  00031	8b 4d 10	 mov	 ecx, DWORD PTR _dwFlags$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _pszEntryName$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00045	ff 52 04	 call	 DWORD PTR [edx+4]
  00048	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L49281:

; 1474 :     }
; 1475 : 
; 1476 :     if(SUCCEEDED(hr))

  0004b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004f	7c 10		 jl	 SHORT $L49283

; 1477 :     {
; 1478 :         if(ppEntry)

  00051	83 7d 14 00	 cmp	 DWORD PTR _ppEntry$[ebp], 0
  00055	74 08		 je	 SHORT $L49284

; 1479 :         {
; 1480 :             *ppEntry = pEntry;

  00057	8b 45 14	 mov	 eax, DWORD PTR _ppEntry$[ebp]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$L49284:

; 1481 :         }
; 1482 :     }
; 1483 :     else

  0005f	eb 37		 jmp	 SHORT $L49285
$L49283:

; 1484 :     {
; 1485 :         DELETE(pEntry);

  00061	83 7d fc 00	 cmp	 DWORD PTR _pEntry$[ebp], 0
  00065	74 31		 je	 SHORT $L49286
  00067	8b 55 fc	 mov	 edx, DWORD PTR _pEntry$[ebp]
  0006a	89 55 f0	 mov	 DWORD PTR $T49839[ebp], edx
  0006d	8b 45 f0	 mov	 eax, DWORD PTR $T49839[ebp]
  00070	89 45 f4	 mov	 DWORD PTR $T49838[ebp], eax
  00073	83 7d f4 00	 cmp	 DWORD PTR $T49838[ebp], 0
  00077	74 11		 je	 SHORT $L49840
  00079	6a 01		 push	 1
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR $T49838[ebp]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	8b 4d f4	 mov	 ecx, DWORD PTR $T49838[ebp]
  00083	ff 12		 call	 DWORD PTR [edx]
  00085	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00088	eb 07		 jmp	 SHORT $L49841
$L49840:
  0008a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L49841:
  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pEntry$[ebp], 0
$L49286:
$L49285:

; 1486 :     }
; 1487 : 
; 1488 :     return hr;

  00098	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1489 : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 10 00	 ret	 16			; 00000010H
?AddEntry@CWaveBank@@UAEJPBD0KPAPAVCWaveBankEntry@@@Z ENDP ; CWaveBank::AddEntry
_TEXT	ENDS
PUBLIC	??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@	; `string'
PUBLIC	??_C@_04EHOP@BYTE?$AA@				; `string'
PUBLIC	??_C@_0O@MNOP@Out?5of?5memory?$AA@		; `string'
PUBLIC	??_C@_0BO@CNBO@dwEntryIndex?5?$DM?5m_dwEntryCount?$AA@ ; `string'
PUBLIC	??_C@_0BF@DLDC@No?5entries?5added?5yet?$AA@	; `string'
;	COMDAT ??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@
CONST	SEGMENT
??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@ DB 'CWaveBank::GenerateBank'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHOP@BYTE?$AA@
CONST	SEGMENT
??_C@_04EHOP@BYTE?$AA@ DB 'BYTE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MNOP@Out?5of?5memory?$AA@
CONST	SEGMENT
??_C@_0O@MNOP@Out?5of?5memory?$AA@ DB 'Out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CNBO@dwEntryIndex?5?$DM?5m_dwEntryCount?$AA@
CONST	SEGMENT
??_C@_0BO@CNBO@dwEntryIndex?5?$DM?5m_dwEntryCount?$AA@ DB 'dwEntryIndex <'
	DB	' m_dwEntryCount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DLDC@No?5entries?5added?5yet?$AA@
CONST	SEGMENT
??_C@_0BF@DLDC@No?5entries?5added?5yet?$AA@ DB 'No entries added yet', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GenerateBank@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z
_TEXT	SEGMENT
$T49845 = -52
_pCallback$ = 8
_fAllowOverwrite$ = 12
_this$ = -56
_pvCopyBuffer$ = -36
_pvHeader$ = -12
_hr$ = -32
_BankFile$ = -20
_pHeader$ = -40
_paMetaData$ = -48
_pleEntry$ = -44
_pEntry$ = -24
_dwEntryIndex$ = -4
_dwHeaderSize$ = -8
_dwOffset$ = -28
?GenerateBank@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z PROC NEAR ; CWaveBank::GenerateBank, COMDAT
; _this$ = ecx

; 1517 : {                                   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 1518 :     static const DWORD      dwCopyBufferSize    = 256 * 1024;
; 1519 :     LPVOID                  pvCopyBuffer        = NULL;

  00009	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pvCopyBuffer$[ebp], 0

; 1520 :     LPVOID                  pvHeader            = NULL;

  00010	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pvHeader$[ebp], 0

; 1521 :     HRESULT                 hr                  = S_OK;

  00017	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1522 :     CStdFileStream          BankFile;

  0001e	8d 4d ec	 lea	 ecx, DWORD PTR _BankFile$[ebp]
  00021	e8 00 00 00 00	 call	 ??0CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::CStdFileStream

; 1523 :     LPWAVEBANKHEADER        pHeader;
; 1524 :     LPWAVEBANKENTRY         paMetaData;
; 1525 :     PLIST_ENTRY             pleEntry;
; 1526 :     CWaveBankEntry *        pEntry;
; 1527 :     DWORD                   dwEntryIndex;
; 1528 :     DWORD                   dwHeaderSize;
; 1529 :     DWORD                   dwOffset;
; 1530 :     
; 1531 :     DPF_ENTER();
; 1532 : 
; 1533 :     if(m_dwEntryCount)

  00026	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 b8 40 02 00
	00 00		 cmp	 DWORD PTR [eax+576], 0
  00030	0f 84 c6 03 00
	00		 je	 $L49308

; 1534 :     {
; 1535 :         //
; 1536 :         // Call the callback
; 1537 :         //
; 1538 : 
; 1539 :         if(pCallback)

  00036	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  0003a	74 1a		 je	 SHORT $L49309

; 1540 :         {
; 1541 :             if(!pCallback->OpenBank(this))

  0003c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  00048	ff 50 08	 call	 DWORD PTR [eax+8]
  0004b	85 c0		 test	 eax, eax
  0004d	75 07		 jne	 SHORT $L49310

; 1542 :             {
; 1543 :                 hr = E_ABORT;

  0004f	c7 45 e0 04 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467260 ; 80004004H
$L49310:
$L49309:

; 1544 :             }
; 1545 :         }
; 1546 : 
; 1547 :         //
; 1548 :         // Open the bank file
; 1549 :         //
; 1550 : 
; 1551 :         if(SUCCEEDED(hr))

  00056	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005a	7c 63		 jl	 SHORT $L49313

; 1552 :         {
; 1553 :             if(FAILED(hr = BankFile.Open(m_szBankFile, GENERIC_READ | GENERIC_WRITE, 0, fAllowOverwrite ? CREATE_ALWAYS : CREATE_NEW, FILE_FLAG_SEQUENTIAL_SCAN)))

  0005c	68 00 00 00 08	 push	 134217728		; 08000000H
  00061	33 c9		 xor	 ecx, ecx
  00063	83 7d 0c 00	 cmp	 DWORD PTR _fAllowOverwrite$[ebp], 0
  00067	0f 95 c1	 setne	 cl
  0006a	41		 inc	 ecx
  0006b	51		 push	 ecx
  0006c	6a 00		 push	 0
  0006e	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  00073	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00076	83 c2 30	 add	 edx, 48			; 00000030H
  00079	52		 push	 edx
  0007a	8d 4d ec	 lea	 ecx, DWORD PTR _BankFile$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z ; WaveLoader::CStdFileStream::Open
  00082	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
  00085	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00089	7d 34		 jge	 SHORT $L49315

; 1554 :             {
; 1555 :                 DPF_ERROR("An error occurred while attempting to open %s", m_szBankFile);

  0008b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00090	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@ ; `string'
  00095	68 13 06 00 00	 push	 1555			; 00000613H
  0009a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0009f	6a 01		 push	 1
  000a1	6a 09		 push	 9
  000a3	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000a8	83 c4 18	 add	 esp, 24			; 00000018H
  000ab	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	83 c0 30	 add	 eax, 48			; 00000030H
  000b1	50		 push	 eax
  000b2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@ ; `string'
  000b7	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000bc	83 c4 08	 add	 esp, 8
$L49315:
$L49313:

; 1556 :             }
; 1557 :         }
; 1558 :         
; 1559 :         //
; 1560 :         // Allocate temporary storage
; 1561 :         //
; 1562 : 
; 1563 :         if(SUCCEEDED(hr))

  000bf	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000c3	7c 6c		 jl	 SHORT $L49318

; 1564 :         {
; 1565 :             if(FAILED(hr = HRFROMP(pvCopyBuffer = MEMALLOC_NOINIT(BYTE, dwCopyBufferSize))))

  000c5	6a 00		 push	 0
  000c7	68 00 00 04 00	 push	 262144			; 00040000H
  000cc	68 44 53 64 61	 push	 1633964868		; 61645344H
  000d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04EHOP@BYTE?$AA@ ; `string'
  000d6	68 1d 06 00 00	 push	 1565			; 0000061dH
  000db	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000e0	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc
  000e5	89 45 dc	 mov	 DWORD PTR _pvCopyBuffer$[ebp], eax
  000e8	8b 4d dc	 mov	 ecx, DWORD PTR _pvCopyBuffer$[ebp]
  000eb	f7 d9		 neg	 ecx
  000ed	1b c9		 sbb	 ecx, ecx
  000ef	81 e1 f2 ff f8
	7f		 and	 ecx, 2147024882		; 7ff8fff2H
  000f5	81 c1 0e 00 07
	80		 add	 ecx, -2147024882	; 8007000eH
  000fb	89 4d e0	 mov	 DWORD PTR _hr$[ebp], ecx
  000fe	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00102	7d 2d		 jge	 SHORT $L49324

; 1566 :             {
; 1567 :                 DPF_ERROR("Out of memory");

  00104	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00109	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@ ; `string'
  0010e	68 1f 06 00 00	 push	 1567			; 0000061fH
  00113	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00118	6a 01		 push	 1
  0011a	6a 09		 push	 9
  0011c	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00121	83 c4 18	 add	 esp, 24			; 00000018H
  00124	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@MNOP@Out?5of?5memory?$AA@ ; `string'
  00129	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0012e	83 c4 04	 add	 esp, 4
$L49324:
$L49318:

; 1568 :             }
; 1569 :         }
; 1570 : 
; 1571 :         if(SUCCEEDED(hr))

  00131	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00135	7c 79		 jl	 SHORT $L49328

; 1572 :         {
; 1573 :             dwHeaderSize = GetBankHeaderSize();

  00137	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0013a	8b 02		 mov	 eax, DWORD PTR [edx]
  0013c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	ff 50 2c	 call	 DWORD PTR [eax+44]
  00142	89 45 f8	 mov	 DWORD PTR _dwHeaderSize$[ebp], eax

; 1574 :             
; 1575 :             if(FAILED(hr = HRFROMP(pvHeader = MEMALLOC(BYTE, dwHeaderSize))))

  00145	6a 01		 push	 1
  00147	8b 4d f8	 mov	 ecx, DWORD PTR _dwHeaderSize$[ebp]
  0014a	51		 push	 ecx
  0014b	68 44 53 64 61	 push	 1633964868		; 61645344H
  00150	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04EHOP@BYTE?$AA@ ; `string'
  00155	68 27 06 00 00	 push	 1575			; 00000627H
  0015a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0015f	e8 00 00 00 00	 call	 ?TrackingPoolAlloc@CMemoryManager@DirectSound@@SGPAXPBDK0W4DSOUND_POOL_TAG@@KH@Z ; DirectSound::CMemoryManager::TrackingPoolAlloc
  00164	89 45 f4	 mov	 DWORD PTR _pvHeader$[ebp], eax
  00167	8b 55 f4	 mov	 edx, DWORD PTR _pvHeader$[ebp]
  0016a	f7 da		 neg	 edx
  0016c	1b d2		 sbb	 edx, edx
  0016e	81 e2 f2 ff f8
	7f		 and	 edx, 2147024882		; 7ff8fff2H
  00174	81 c2 0e 00 07
	80		 add	 edx, -2147024882	; 8007000eH
  0017a	89 55 e0	 mov	 DWORD PTR _hr$[ebp], edx
  0017d	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00181	7d 2d		 jge	 SHORT $L49334

; 1576 :             {
; 1577 :                 DPF_ERROR("Out of memory");

  00183	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00188	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@ ; `string'
  0018d	68 29 06 00 00	 push	 1577			; 00000629H
  00192	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00197	6a 01		 push	 1
  00199	6a 09		 push	 9
  0019b	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  001a0	83 c4 18	 add	 esp, 24			; 00000018H
  001a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@MNOP@Out?5of?5memory?$AA@ ; `string'
  001a8	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001ad	83 c4 04	 add	 esp, 4
$L49334:
$L49328:

; 1578 :             }
; 1579 :         }
; 1580 : 
; 1581 :         if(SUCCEEDED(hr))

  001b0	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001b4	7c 0f		 jl	 SHORT $L49336

; 1582 :         {
; 1583 :             pHeader = (LPWAVEBANKHEADER)pvHeader;

  001b6	8b 45 f4	 mov	 eax, DWORD PTR _pvHeader$[ebp]
  001b9	89 45 d8	 mov	 DWORD PTR _pHeader$[ebp], eax

; 1584 :             paMetaData = (LPWAVEBANKENTRY)(pHeader + 1);

  001bc	8b 4d d8	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  001bf	83 c1 24	 add	 ecx, 36			; 00000024H
  001c2	89 4d d0	 mov	 DWORD PTR _paMetaData$[ebp], ecx
$L49336:

; 1585 :         }
; 1586 : 
; 1587 :         //
; 1588 :         // Create the file header
; 1589 :         //
; 1590 : 
; 1591 :         if(SUCCEEDED(hr))

  001c5	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c9	7c 58		 jl	 SHORT $L49340

; 1592 :         {
; 1593 :             pHeader->dwSignature = WAVEBANKHEADER_SIGNATURE;

  001cb	8b 55 d8	 mov	 edx, DWORD PTR _pHeader$[ebp]
  001ce	c7 02 57 42 4e
	44		 mov	 DWORD PTR [edx], 1145979479 ; 444e4257H

; 1594 :             pHeader->dwVersion = WAVEBANKHEADER_VERSION;

  001d4	8b 45 d8	 mov	 eax, DWORD PTR _pHeader$[ebp]
  001d7	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [eax+4], 2

; 1595 :             pHeader->dwFlags = m_dwFlags;

  001de	8b 4d d8	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  001e1	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  001e4	8b 82 44 02 00
	00		 mov	 eax, DWORD PTR [edx+580]
  001ea	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1596 :             pHeader->dwEntryCount = m_dwEntryCount;

  001ed	8b 4d d8	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  001f0	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  001f3	8b 82 40 02 00
	00		 mov	 eax, DWORD PTR [edx+576]
  001f9	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1597 :             pHeader->dwAlignment = m_dwAlignment;

  001fc	8b 4d d8	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  001ff	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00202	8b 82 48 02 00
	00		 mov	 eax, DWORD PTR [edx+584]
  00208	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1598 :             
; 1599 :             _tcsncpy(pHeader->szBankName, m_szBankName, NUMELMS(pHeader->szBankName));

  0020b	6a 10		 push	 16			; 00000010H
  0020d	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00210	83 c1 10	 add	 ecx, 16			; 00000010H
  00213	51		 push	 ecx
  00214	8b 55 d8	 mov	 edx, DWORD PTR _pHeader$[ebp]
  00217	83 c2 14	 add	 edx, 20			; 00000014H
  0021a	52		 push	 edx
  0021b	e8 00 00 00 00	 call	 _strncpy
  00220	83 c4 0c	 add	 esp, 12			; 0000000cH
$L49340:

; 1600 :         }
; 1601 : 
; 1602 :         //
; 1603 :         // Generate metadata
; 1604 :         //
; 1605 : 
; 1606 :         if(SUCCEEDED(hr))

  00223	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00227	0f 8c bc 00 00
	00		 jl	 $L49342

; 1607 :         {
; 1608 :             for(pleEntry = m_lstEntries.Flink, dwEntryIndex = 0, dwOffset = 0; SUCCEEDED(hr) && (pleEntry != &m_lstEntries); pleEntry = pleEntry->Flink, dwEntryIndex++)

  0022d	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00230	8b 88 38 02 00
	00		 mov	 ecx, DWORD PTR [eax+568]
  00236	89 4d d4	 mov	 DWORD PTR _pleEntry$[ebp], ecx
  00239	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwEntryIndex$[ebp], 0
  00240	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dwOffset$[ebp], 0
  00247	eb 11		 jmp	 SHORT $L49344
$L49345:
  00249	8b 55 d4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  0024c	8b 02		 mov	 eax, DWORD PTR [edx]
  0024e	89 45 d4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  00251	8b 4d fc	 mov	 ecx, DWORD PTR _dwEntryIndex$[ebp]
  00254	83 c1 01	 add	 ecx, 1
  00257	89 4d fc	 mov	 DWORD PTR _dwEntryIndex$[ebp], ecx
$L49344:
  0025a	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0025e	0f 8c 85 00 00
	00		 jl	 $L49346
  00264	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00267	81 c2 38 02 00
	00		 add	 edx, 568		; 00000238H
  0026d	39 55 d4	 cmp	 DWORD PTR _pleEntry$[ebp], edx
  00270	74 77		 je	 SHORT $L49346

; 1609 :             {
; 1610 :                 ASSERT(dwEntryIndex < m_dwEntryCount);

  00272	68 4a 06 00 00	 push	 1610			; 0000064aH
  00277	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0027c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@CNBO@dwEntryIndex?5?$DM?5m_dwEntryCount?$AA@ ; `string'
  00281	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00284	8b 4d fc	 mov	 ecx, DWORD PTR _dwEntryIndex$[ebp]
  00287	3b 88 40 02 00
	00		 cmp	 ecx, DWORD PTR [eax+576]
  0028d	1b d2		 sbb	 edx, edx
  0028f	42		 inc	 edx
  00290	52		 push	 edx
  00291	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00296	83 c4 10	 add	 esp, 16			; 00000010H

; 1611 :                 
; 1612 :                 pEntry = CONTAINING_RECORD(pleEntry, CWaveBankEntry, m_leEntry);

  00299	8b 45 d4	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  0029c	83 e8 08	 sub	 eax, 8
  0029f	89 45 e8	 mov	 DWORD PTR _pEntry$[ebp], eax

; 1613 : 
; 1614 :                 hr = pEntry->Load(TRUE);

  002a2	6a 01		 push	 1
  002a4	8b 4d e8	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  002a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a9	8b 4d e8	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  002ac	ff 52 08	 call	 DWORD PTR [edx+8]
  002af	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 1615 : 
; 1616 :                 if(SUCCEEDED(hr))

  002b2	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002b6	7c 2c		 jl	 SHORT $L49353

; 1617 :                 {
; 1618 :                     hr = pEntry->GetMetaData(&paMetaData[dwEntryIndex], dwHeaderSize, m_dwAlignment, &dwOffset);

  002b8	8d 45 e4	 lea	 eax, DWORD PTR _dwOffset$[ebp]
  002bb	50		 push	 eax
  002bc	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  002bf	8b 91 48 02 00
	00		 mov	 edx, DWORD PTR [ecx+584]
  002c5	52		 push	 edx
  002c6	8b 45 f8	 mov	 eax, DWORD PTR _dwHeaderSize$[ebp]
  002c9	50		 push	 eax
  002ca	8b 4d fc	 mov	 ecx, DWORD PTR _dwEntryIndex$[ebp]
  002cd	6b c9 14	 imul	 ecx, 20			; 00000014H
  002d0	8b 55 d0	 mov	 edx, DWORD PTR _paMetaData$[ebp]
  002d3	03 d1		 add	 edx, ecx
  002d5	52		 push	 edx
  002d6	8b 45 e8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  002d9	8b 10		 mov	 edx, DWORD PTR [eax]
  002db	8b 4d e8	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  002de	ff 52 18	 call	 DWORD PTR [edx+24]
  002e1	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
$L49353:

; 1619 :                 }
; 1620 :             }

  002e4	e9 60 ff ff ff	 jmp	 $L49345
$L49346:
$L49342:

; 1621 :         }
; 1622 : 
; 1623 :         //
; 1624 :         // Write the file header
; 1625 :         //
; 1626 :         
; 1627 :         if(SUCCEEDED(hr))

  002e9	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  002ed	7c 48		 jl	 SHORT $L49355

; 1628 :         {
; 1629 :             if(FAILED(hr = BankFile.Write(pvHeader, dwHeaderSize)))

  002ef	6a 00		 push	 0
  002f1	8b 45 f8	 mov	 eax, DWORD PTR _dwHeaderSize$[ebp]
  002f4	50		 push	 eax
  002f5	8b 4d f4	 mov	 ecx, DWORD PTR _pvHeader$[ebp]
  002f8	51		 push	 ecx
  002f9	8d 4d ec	 lea	 ecx, DWORD PTR _BankFile$[ebp]
  002fc	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  00301	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
  00304	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00308	7d 2d		 jge	 SHORT $L49357

; 1630 :             {
; 1631 :                 DPF_ERROR("An error occurred while attempting to write to the bank file");

  0030a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0030f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@ ; `string'
  00314	68 5f 06 00 00	 push	 1631			; 0000065fH
  00319	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0031e	6a 01		 push	 1
  00320	6a 09		 push	 9
  00322	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00327	83 c4 18	 add	 esp, 24			; 00000018H
  0032a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DN@HPGN@An?5error?5occurred?5while?5attempti@ ; `string'
  0032f	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00334	83 c4 04	 add	 esp, 4
$L49357:
$L49355:

; 1632 :             }
; 1633 :         }
; 1634 : 
; 1635 :         //
; 1636 :         // Write the data section
; 1637 :         //
; 1638 : 
; 1639 :         if(SUCCEEDED(hr))

  00337	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0033b	0f 8c a4 00 00
	00		 jl	 $L49359

; 1640 :         {
; 1641 :             for(pleEntry = m_lstEntries.Flink, dwEntryIndex = 0; SUCCEEDED(hr) && (pleEntry != &m_lstEntries); pleEntry = pleEntry->Flink, dwEntryIndex++)

  00341	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00344	8b 82 38 02 00
	00		 mov	 eax, DWORD PTR [edx+568]
  0034a	89 45 d4	 mov	 DWORD PTR _pleEntry$[ebp], eax
  0034d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwEntryIndex$[ebp], 0
  00354	eb 11		 jmp	 SHORT $L49361
$L49362:
  00356	8b 4d d4	 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  00359	8b 11		 mov	 edx, DWORD PTR [ecx]
  0035b	89 55 d4	 mov	 DWORD PTR _pleEntry$[ebp], edx
  0035e	8b 45 fc	 mov	 eax, DWORD PTR _dwEntryIndex$[ebp]
  00361	83 c0 01	 add	 eax, 1
  00364	89 45 fc	 mov	 DWORD PTR _dwEntryIndex$[ebp], eax
$L49361:
  00367	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0036b	7c 78		 jl	 SHORT $L49363
  0036d	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00370	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  00376	39 4d d4	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  00379	74 6a		 je	 SHORT $L49363

; 1642 :             {
; 1643 :                 ASSERT(dwEntryIndex < m_dwEntryCount);

  0037b	68 6b 06 00 00	 push	 1643			; 0000066bH
  00380	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00385	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BO@CNBO@dwEntryIndex?5?$DM?5m_dwEntryCount?$AA@ ; `string'
  0038a	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0038d	8b 45 fc	 mov	 eax, DWORD PTR _dwEntryIndex$[ebp]
  00390	3b 82 40 02 00
	00		 cmp	 eax, DWORD PTR [edx+576]
  00396	1b c9		 sbb	 ecx, ecx
  00398	41		 inc	 ecx
  00399	51		 push	 ecx
  0039a	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  0039f	83 c4 10	 add	 esp, 16			; 00000010H

; 1644 :                 
; 1645 :                 pEntry = CONTAINING_RECORD(pleEntry, CWaveBankEntry, m_leEntry);

  003a2	8b 55 d4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  003a5	83 ea 08	 sub	 edx, 8
  003a8	89 55 e8	 mov	 DWORD PTR _pEntry$[ebp], edx

; 1646 : 
; 1647 :                 if(SUCCEEDED(hr))

  003ab	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  003af	7c 2f		 jl	 SHORT $L49369

; 1648 :                 {
; 1649 :                     hr = pEntry->CommitWaveData(pCallback, &BankFile, dwHeaderSize, &paMetaData[dwEntryIndex], pvCopyBuffer, dwCopyBufferSize);

  003b1	68 00 00 04 00	 push	 262144			; 00040000H
  003b6	8b 45 dc	 mov	 eax, DWORD PTR _pvCopyBuffer$[ebp]
  003b9	50		 push	 eax
  003ba	8b 4d fc	 mov	 ecx, DWORD PTR _dwEntryIndex$[ebp]
  003bd	6b c9 14	 imul	 ecx, 20			; 00000014H
  003c0	8b 55 d0	 mov	 edx, DWORD PTR _paMetaData$[ebp]
  003c3	03 d1		 add	 edx, ecx
  003c5	52		 push	 edx
  003c6	8b 45 f8	 mov	 eax, DWORD PTR _dwHeaderSize$[ebp]
  003c9	50		 push	 eax
  003ca	8d 4d ec	 lea	 ecx, DWORD PTR _BankFile$[ebp]
  003cd	51		 push	 ecx
  003ce	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  003d1	52		 push	 edx
  003d2	8b 45 e8	 mov	 eax, DWORD PTR _pEntry$[ebp]
  003d5	8b 10		 mov	 edx, DWORD PTR [eax]
  003d7	8b 4d e8	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  003da	ff 52 1c	 call	 DWORD PTR [edx+28]
  003dd	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax
$L49369:

; 1650 :                 }
; 1651 :             }

  003e0	e9 71 ff ff ff	 jmp	 $L49362
$L49363:
$L49359:

; 1652 :         }
; 1653 : 
; 1654 :         //
; 1655 :         // Call the callback
; 1656 :         //
; 1657 : 
; 1658 :         if(pCallback)

  003e5	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  003e9	74 0f		 je	 SHORT $L49370

; 1659 :         {
; 1660 :             pCallback->CloseBank(this);

  003eb	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  003ee	50		 push	 eax
  003ef	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  003f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f4	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  003f7	ff 52 0c	 call	 DWORD PTR [edx+12]
$L49370:

; 1661 :         }
; 1662 :     }
; 1663 :     else

  003fa	eb 34		 jmp	 SHORT $L49371
$L49308:

; 1664 :     {
; 1665 :         DPF_ERROR("No entries added yet");

  003fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00401	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BI@CEMK@CWaveBank?3?3GenerateBank?$AA@ ; `string'
  00406	68 81 06 00 00	 push	 1665			; 00000681H
  0040b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00410	6a 01		 push	 1
  00412	6a 09		 push	 9
  00414	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00419	83 c4 18	 add	 esp, 24			; 00000018H
  0041c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@DLDC@No?5entries?5added?5yet?$AA@ ; `string'
  00421	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00426	83 c4 04	 add	 esp, 4

; 1666 :         hr = E_FAIL;

  00429	c7 45 e0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49371:

; 1667 :     }
; 1668 : 
; 1669 :     //
; 1670 :     // Clean up
; 1671 :     //
; 1672 : 
; 1673 :     MEMFREE(pvCopyBuffer);

  00430	83 7d dc 00	 cmp	 DWORD PTR _pvCopyBuffer$[ebp], 0
  00434	74 10		 je	 SHORT $L49374
  00436	8b 45 dc	 mov	 eax, DWORD PTR _pvCopyBuffer$[ebp]
  00439	50		 push	 eax
  0043a	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  0043f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pvCopyBuffer$[ebp], 0
$L49374:

; 1674 :     MEMFREE(pvHeader);

  00446	83 7d f4 00	 cmp	 DWORD PTR _pvHeader$[ebp], 0
  0044a	74 10		 je	 SHORT $L49375
  0044c	8b 4d f4	 mov	 ecx, DWORD PTR _pvHeader$[ebp]
  0044f	51		 push	 ecx
  00450	e8 00 00 00 00	 call	 ?TrackingPoolFree@CMemoryManager@DirectSound@@SGXPAX@Z ; DirectSound::CMemoryManager::TrackingPoolFree
  00455	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pvHeader$[ebp], 0
$L49375:

; 1675 : 
; 1676 :     DPF_LEAVE_HRESULT(hr);
; 1677 : 
; 1678 :     return hr;

  0045c	8b 55 e0	 mov	 edx, DWORD PTR _hr$[ebp]
  0045f	89 55 cc	 mov	 DWORD PTR $T49845[ebp], edx
  00462	8d 4d ec	 lea	 ecx, DWORD PTR _BankFile$[ebp]
  00465	e8 00 00 00 00	 call	 ??1CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::~CStdFileStream
  0046a	8b 45 cc	 mov	 eax, DWORD PTR $T49845[ebp]

; 1679 : }

  0046d	8b e5		 mov	 esp, ebp
  0046f	5d		 pop	 ebp
  00470	c2 08 00	 ret	 8
?GenerateBank@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z ENDP ; CWaveBank::GenerateBank
_TEXT	ENDS
PUBLIC	??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@	; `string'
PUBLIC	??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@ ; `string'
PUBLIC	??_C@_0BK@OAEM@dwEntry?5?$DN?$DN?5m_dwEntryCount?$AA@ ; `string'
EXTRN	_sprintf:NEAR
;	COMDAT ??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@
CONST	SEGMENT
??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ DB 'CWaveBank::GenerateHe'
	DB	'ader', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@
CONST	SEGMENT
??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@ DB 'An error occurre'
	DB	'd while attempting to write to the header file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OAEM@dwEntry?5?$DN?$DN?5m_dwEntryCount?$AA@
CONST	SEGMENT
??_C@_0BK@OAEM@dwEntry?5?$DN?$DN?5m_dwEntryCount?$AA@ DB 'dwEntry == m_dw'
	DB	'EntryCount', 00H				; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z
_TEXT	SEGMENT
$T49849 = -292
_pCallback$ = 8
_fAllowOverwrite$ = 12
_this$ = -296
_hr$ = -276
_HeaderFile$ = -288
_szText$ = -264
_pleEntry$ = -280
_pEntry$ = -268
_dwEntry$ = -272
?GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z PROC NEAR ; CWaveBank::GenerateHeader, COMDAT
; _this$ = ecx

; 1706 : {                                   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00009	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 1707 :     static const LPCTSTR    pszFileBegin            = TEXT("#pragma once\r\n\r\n");
; 1708 :     static const LPCTSTR    pszEnumBegin            = TEXT("typedef enum\r\n{\r\n");
; 1709 :     static const LPCTSTR    pszEnumEnd              = TEXT("} " WBCHEADER_ENUMNAME ";\r\n\r\n");
; 1710 :     static const LPCTSTR    pszEnumEntry            = TEXT("    ") WBCHEADER_ENUMENTRYNAME TEXT(" = %lu,\r\n");
; 1711 :     static const LPCTSTR    pszEnumCount            = TEXT("#define ") WBCHEADER_ENTRYCOUNTNAME TEXT(" %lu\r\n");
; 1712 :     HRESULT                 hr                      = S_OK;

  0000f	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _hr$[ebp], 0

; 1713 :     CStdFileStream          HeaderFile;

  00019	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::CStdFileStream

; 1714 :     TCHAR                   szText[MAX_PATH];
; 1715 :     PLIST_ENTRY             pleEntry;
; 1716 :     CWaveBankEntry *        pEntry;
; 1717 :     DWORD                   dwEntry;
; 1718 :     
; 1719 :     DPF_ENTER();
; 1720 : 
; 1721 :     if(m_dwEntryCount)

  00024	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 b8 40 02 00
	00 00		 cmp	 DWORD PTR [eax+576], 0
  00031	0f 84 f5 03 00
	00		 je	 $L49404

; 1722 :     {
; 1723 :         //
; 1724 :         // Call the callback
; 1725 :         //
; 1726 : 
; 1727 :         if(pCallback)

  00037	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  0003b	74 20		 je	 SHORT $L49405

; 1728 :         {
; 1729 :             if(!pCallback->OpenHeader(this))

  0003d	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  00047	8b 02		 mov	 eax, DWORD PTR [edx]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  0004c	ff 50 10	 call	 DWORD PTR [eax+16]
  0004f	85 c0		 test	 eax, eax
  00051	75 0a		 jne	 SHORT $L49406

; 1730 :             {
; 1731 :                 hr = E_ABORT;

  00053	c7 85 ec fe ff
	ff 04 40 00 80	 mov	 DWORD PTR _hr$[ebp], -2147467260 ; 80004004H
$L49406:
$L49405:

; 1732 :             }
; 1733 :         }
; 1734 : 
; 1735 :         //
; 1736 :         // Open the bank file
; 1737 :         //
; 1738 : 
; 1739 :         if(SUCCEEDED(hr))

  0005d	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00064	7c 77		 jl	 SHORT $L49409

; 1740 :         {
; 1741 :             if(FAILED(hr = HeaderFile.Open(m_szHeaderFile, GENERIC_READ | GENERIC_WRITE, 0, fAllowOverwrite ? CREATE_ALWAYS : CREATE_NEW, FILE_FLAG_SEQUENTIAL_SCAN)))

  00066	68 00 00 00 08	 push	 134217728		; 08000000H
  0006b	33 c9		 xor	 ecx, ecx
  0006d	83 7d 0c 00	 cmp	 DWORD PTR _fAllowOverwrite$[ebp], 0
  00071	0f 95 c1	 setne	 cl
  00074	41		 inc	 ecx
  00075	51		 push	 ecx
  00076	6a 00		 push	 0
  00078	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  0007d	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00083	81 c2 34 01 00
	00		 add	 edx, 308		; 00000134H
  00089	52		 push	 edx
  0008a	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  00090	e8 00 00 00 00	 call	 ?Open@CStdFileStream@WaveLoader@@QAEJPBDKKKK@Z ; WaveLoader::CStdFileStream::Open
  00095	89 85 ec fe ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
  0009b	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000a2	7d 39		 jge	 SHORT $L49411

; 1742 :             {
; 1743 :                 DPF_ERROR("An error occurred while attempting to open %s", m_szHeaderFile);

  000a4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  000a9	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ ; `string'
  000ae	68 cf 06 00 00	 push	 1743			; 000006cfH
  000b3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  000b8	6a 01		 push	 1
  000ba	6a 09		 push	 9
  000bc	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  000c1	83 c4 18	 add	 esp, 24			; 00000018H
  000c4	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  000ca	05 34 01 00 00	 add	 eax, 308		; 00000134H
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@EFJM@An?5error?5occurred?5while?5attempti@ ; `string'
  000d5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  000da	83 c4 08	 add	 esp, 8
$L49411:
$L49409:

; 1744 :             }
; 1745 :         }
; 1746 : 
; 1747 :         //
; 1748 :         // Write the file header
; 1749 :         //
; 1750 : 
; 1751 :         if(SUCCEEDED(hr))

  000dd	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  000e4	7c 60		 jl	 SHORT $L49414

; 1752 :         {
; 1753 :             if(FAILED(hr = HeaderFile.Write(pszFileBegin, _tcslen(pszFileBegin))))

  000e6	6a 00		 push	 0
  000e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszFileBegin@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 _strlen
  000f4	83 c4 04	 add	 esp, 4
  000f7	50		 push	 eax
  000f8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pszFileBegin@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB
  000fe	52		 push	 edx
  000ff	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  00105	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  0010a	89 85 ec fe ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
  00110	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00117	7d 2d		 jge	 SHORT $L49416

; 1754 :             {
; 1755 :                 DPF_ERROR("An error occurred while attempting to write to the header file");

  00119	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  0011e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ ; `string'
  00123	68 db 06 00 00	 push	 1755			; 000006dbH
  00128	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  0012d	6a 01		 push	 1
  0012f	6a 09		 push	 9
  00131	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00136	83 c4 18	 add	 esp, 24			; 00000018H
  00139	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@ ; `string'
  0013e	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00143	83 c4 04	 add	 esp, 4
$L49416:
$L49414:

; 1756 :             }
; 1757 :         }
; 1758 : 
; 1759 :         //
; 1760 :         // Write the enumeration header
; 1761 :         //
; 1762 : 
; 1763 :         if(SUCCEEDED(hr))

  00146	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0014d	7c 5f		 jl	 SHORT $L49419

; 1764 :         {
; 1765 :             if(FAILED(hr = HeaderFile.Write(pszEnumBegin, _tcslen(pszEnumBegin))))

  0014f	6a 00		 push	 0
  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszEnumBegin@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 _strlen
  0015c	83 c4 04	 add	 esp, 4
  0015f	50		 push	 eax
  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pszEnumBegin@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB
  00166	51		 push	 ecx
  00167	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  0016d	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  00172	89 85 ec fe ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
  00178	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0017f	7d 2d		 jge	 SHORT $L49421

; 1766 :             {
; 1767 :                 DPF_ERROR("An error occurred while attempting to write to the header file");

  00181	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00186	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ ; `string'
  0018b	68 e7 06 00 00	 push	 1767			; 000006e7H
  00190	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00195	6a 01		 push	 1
  00197	6a 09		 push	 9
  00199	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0019e	83 c4 18	 add	 esp, 24			; 00000018H
  001a1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@ ; `string'
  001a6	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  001ab	83 c4 04	 add	 esp, 4
$L49421:
$L49419:

; 1768 :             }
; 1769 :         }
; 1770 : 
; 1771 :         //
; 1772 :         // Begin the entry loop
; 1773 :         //
; 1774 : 
; 1775 :         if(SUCCEEDED(hr))

  001ae	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  001b5	0f 8c 07 01 00
	00		 jl	 $L49423

; 1776 :         {
; 1777 :             for(pleEntry = m_lstEntries.Flink, dwEntry = 0; (pleEntry != &m_lstEntries) && SUCCEEDED(hr); pleEntry = pleEntry->Flink, dwEntry++)

  001bb	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001c1	8b 82 38 02 00
	00		 mov	 eax, DWORD PTR [edx+568]
  001c7	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _pleEntry$[ebp], eax
  001cd	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwEntry$[ebp], 0
  001d7	eb 1d		 jmp	 SHORT $L49425
$L49426:
  001d9	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _pleEntry$[ebp]
  001df	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e1	89 95 e8 fe ff
	ff		 mov	 DWORD PTR _pleEntry$[ebp], edx
  001e7	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _dwEntry$[ebp]
  001ed	83 c0 01	 add	 eax, 1
  001f0	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _dwEntry$[ebp], eax
$L49425:
  001f6	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001fc	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  00202	39 8d e8 fe ff
	ff		 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  00208	0f 84 b4 00 00
	00		 je	 $L49427
  0020e	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00215	0f 8c a7 00 00
	00		 jl	 $L49427

; 1778 :             {
; 1779 :                 pEntry = CONTAINING_RECORD(pleEntry, CWaveBankEntry, m_leEntry);

  0021b	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00221	83 ea 08	 sub	 edx, 8
  00224	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _pEntry$[ebp], edx

; 1780 : 
; 1781 :                 //
; 1782 :                 // Add the entry to the enumeration
; 1783 :                 //
; 1784 : 
; 1785 :                 sprintf(szText, pszEnumEntry, m_szHeaderName, pEntry->m_szHeaderName, dwEntry);

  0022a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _dwEntry$[ebp]
  00230	50		 push	 eax
  00231	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00237	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  0023d	51		 push	 ecx
  0023e	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00244	83 c2 20	 add	 edx, 32			; 00000020H
  00247	52		 push	 edx
  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pszEnumEntry@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB
  0024d	50		 push	 eax
  0024e	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  00254	51		 push	 ecx
  00255	e8 00 00 00 00	 call	 _sprintf
  0025a	83 c4 14	 add	 esp, 20			; 00000014H

; 1786 : 
; 1787 :                 if(FAILED(hr = HeaderFile.Write(szText, _tcslen(szText))))

  0025d	6a 00		 push	 0
  0025f	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szText$[ebp]
  00265	52		 push	 edx
  00266	e8 00 00 00 00	 call	 _strlen
  0026b	83 c4 04	 add	 esp, 4
  0026e	50		 push	 eax
  0026f	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00275	50		 push	 eax
  00276	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  0027c	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  00281	89 85 ec fe ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
  00287	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  0028e	7d 2d		 jge	 SHORT $L49433

; 1788 :                 {
; 1789 :                     DPF_ERROR("An error occurred while attempting to write to the header file");

  00290	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00295	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ ; `string'
  0029a	68 fd 06 00 00	 push	 1789			; 000006fdH
  0029f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  002a4	6a 01		 push	 1
  002a6	6a 09		 push	 9
  002a8	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  002ad	83 c4 18	 add	 esp, 24			; 00000018H
  002b0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@ ; `string'
  002b5	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  002ba	83 c4 04	 add	 esp, 4
$L49433:

; 1790 :                 }
; 1791 :             }

  002bd	e9 17 ff ff ff	 jmp	 $L49426
$L49427:
$L49423:

; 1792 :         }
; 1793 : 
; 1794 :         //
; 1795 :         // End the enumeration
; 1796 :         //
; 1797 : 
; 1798 :         if(SUCCEEDED(hr))

  002c2	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  002c9	0f 8c 80 00 00
	00		 jl	 $L49435

; 1799 :         {
; 1800 :             sprintf(szText, pszEnumEnd, m_szHeaderName);

  002cf	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002d5	83 c1 20	 add	 ecx, 32			; 00000020H
  002d8	51		 push	 ecx
  002d9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pszEnumEnd@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB
  002df	52		 push	 edx
  002e0	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  002e6	50		 push	 eax
  002e7	e8 00 00 00 00	 call	 _sprintf
  002ec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1801 : 
; 1802 :             if(FAILED(hr = HeaderFile.Write(szText, _tcslen(szText))))

  002ef	6a 00		 push	 0
  002f1	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  002f7	51		 push	 ecx
  002f8	e8 00 00 00 00	 call	 _strlen
  002fd	83 c4 04	 add	 esp, 4
  00300	50		 push	 eax
  00301	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szText$[ebp]
  00307	52		 push	 edx
  00308	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  0030e	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  00313	89 85 ec fe ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
  00319	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00320	7d 2d		 jge	 SHORT $L49437

; 1803 :             {
; 1804 :                 DPF_ERROR("An error occurred while attempting to write to the header file");

  00322	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00327	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ ; `string'
  0032c	68 0c 07 00 00	 push	 1804			; 0000070cH
  00331	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00336	6a 01		 push	 1
  00338	6a 09		 push	 9
  0033a	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  0033f	83 c4 18	 add	 esp, 24			; 00000018H
  00342	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@ ; `string'
  00347	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0034c	83 c4 04	 add	 esp, 4
$L49437:
$L49435:

; 1805 :             }
; 1806 :         }
; 1807 : 
; 1808 :         //
; 1809 :         // Add a count
; 1810 :         //
; 1811 : 
; 1812 :         if(SUCCEEDED(hr))

  0034f	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  00356	0f 8c b6 00 00
	00		 jl	 $L49439

; 1813 :         {
; 1814 :             ASSERT(dwEntry == m_dwEntryCount);

  0035c	68 16 07 00 00	 push	 1814			; 00000716H
  00361	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00366	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@OAEM@dwEntry?5?$DN?$DN?5m_dwEntryCount?$AA@ ; `string'
  0036b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00371	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _dwEntry$[ebp]
  00377	33 d2		 xor	 edx, edx
  00379	3b 88 40 02 00
	00		 cmp	 ecx, DWORD PTR [eax+576]
  0037f	0f 95 c2	 setne	 dl
  00382	52		 push	 edx
  00383	e8 00 00 00 00	 call	 ?Assert@CDebug@DirectSound@@SAXHPBD0I@Z ; DirectSound::CDebug::Assert
  00388	83 c4 10	 add	 esp, 16			; 00000010H

; 1815 :             
; 1816 :             sprintf(szText, pszEnumCount, m_szHeaderName, dwEntry);

  0038b	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _dwEntry$[ebp]
  00391	50		 push	 eax
  00392	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00398	83 c1 20	 add	 ecx, 32			; 00000020H
  0039b	51		 push	 ecx
  0039c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pszEnumCount@?1??GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z@4QBDB
  003a2	52		 push	 edx
  003a3	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  003a9	50		 push	 eax
  003aa	e8 00 00 00 00	 call	 _sprintf
  003af	83 c4 10	 add	 esp, 16			; 00000010H

; 1817 : 
; 1818 :             if(FAILED(hr = HeaderFile.Write(szText, _tcslen(szText))))

  003b2	6a 00		 push	 0
  003b4	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
  003ba	51		 push	 ecx
  003bb	e8 00 00 00 00	 call	 _strlen
  003c0	83 c4 04	 add	 esp, 4
  003c3	50		 push	 eax
  003c4	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _szText$[ebp]
  003ca	52		 push	 edx
  003cb	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  003d1	e8 00 00 00 00	 call	 ?Write@CStdFileStream@WaveLoader@@QAEJPBXKPAK@Z ; WaveLoader::CStdFileStream::Write
  003d6	89 85 ec fe ff
	ff		 mov	 DWORD PTR _hr$[ebp], eax
  003dc	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _hr$[ebp], 0
  003e3	7d 2d		 jge	 SHORT $L49442

; 1819 :             {
; 1820 :                 DPF_ERROR("An error occurred while attempting to write to the header file");

  003e5	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  003ea	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ ; `string'
  003ef	68 1c 07 00 00	 push	 1820			; 0000071cH
  003f4	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  003f9	6a 01		 push	 1
  003fb	6a 09		 push	 9
  003fd	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00402	83 c4 18	 add	 esp, 24			; 00000018H
  00405	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DP@PPNC@An?5error?5occurred?5while?5attempti@ ; `string'
  0040a	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  0040f	83 c4 04	 add	 esp, 4
$L49442:
$L49439:

; 1821 :             }
; 1822 :         }
; 1823 : 
; 1824 :         //
; 1825 :         // Call the callback
; 1826 :         //
; 1827 : 
; 1828 :         if(pCallback)

  00412	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  00416	74 12		 je	 SHORT $L49443

; 1829 :         {
; 1830 :             pCallback->CloseHeader(this);

  00418	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0041e	50		 push	 eax
  0041f	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  00422	8b 11		 mov	 edx, DWORD PTR [ecx]
  00424	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  00427	ff 52 14	 call	 DWORD PTR [edx+20]
$L49443:

; 1831 :         }
; 1832 :     }
; 1833 :     else

  0042a	eb 37		 jmp	 SHORT $L49444
$L49404:

; 1834 :     {
; 1835 :         DPF_ERROR("No entries added yet");

  0042c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08IMGB@WAVBNDLR?$AA@ ; `string'
  00431	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@DFCH@CWaveBank?3?3GenerateHeader?$AA@ ; `string'
  00436	68 2b 07 00 00	 push	 1835			; 0000072bH
  0043b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0EA@LKGA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00440	6a 01		 push	 1
  00442	6a 09		 push	 9
  00444	e8 00 00 00 00	 call	 ?SetContext@CDebug@DirectSound@@SAXKKPBDI00@Z ; DirectSound::CDebug::SetContext
  00449	83 c4 18	 add	 esp, 24			; 00000018H
  0044c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@DLDC@No?5entries?5added?5yet?$AA@ ; `string'
  00451	e8 00 00 00 00	 call	 ?Print@CDebug@DirectSound@@SAXPBDZZ ; DirectSound::CDebug::Print
  00456	83 c4 04	 add	 esp, 4

; 1836 :         hr = E_FAIL;

  00459	c7 85 ec fe ff
	ff 05 40 00 80	 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$L49444:

; 1837 :     }
; 1838 : 
; 1839 :     DPF_LEAVE_HRESULT(hr);
; 1840 : 
; 1841 :     return hr;

  00463	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _hr$[ebp]
  00469	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T49849[ebp], eax
  0046f	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _HeaderFile$[ebp]
  00475	e8 00 00 00 00	 call	 ??1CStdFileStream@WaveLoader@@QAE@XZ ; WaveLoader::CStdFileStream::~CStdFileStream
  0047a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR $T49849[ebp]

; 1842 : }

  00480	8b e5		 mov	 esp, ebp
  00482	5d		 pop	 ebp
  00483	c2 08 00	 ret	 8
?GenerateHeader@CWaveBank@@UAEJPAVCWaveBankCallback@@H@Z ENDP ; CWaveBank::GenerateHeader
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?GetBankDataSize@CWaveBank@@UAEKXZ
_TEXT	SEGMENT
_this$ = -24
_pleEntry$ = -20
_pEntry$ = -8
_dwHeaderSize$ = -4
_dwSize$ = -16
_hr$ = -12
?GetBankDataSize@CWaveBank@@UAEKXZ PROC NEAR		; CWaveBank::GetBankDataSize, COMDAT
; _this$ = ecx

; 1868 : {                                   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1869 :     PLIST_ENTRY             pleEntry;
; 1870 :     CWaveBankEntry *        pEntry;
; 1871 :     DWORD                   dwHeaderSize;
; 1872 :     DWORD                   dwSize;
; 1873 :     HRESULT                 hr;
; 1874 :     
; 1875 :     DPF_ENTER();
; 1876 : 
; 1877 :     //
; 1878 :     // Calculate the total size of the bank's data segment based on the
; 1879 :     // total size of all the entries in the bank.  We're aligning the size
; 1880 :     // so that it matches the aligned offsets that will appear in the bank
; 1881 :     // file.
; 1882 :     //
; 1883 : 
; 1884 :     dwHeaderSize = GetBankHeaderSize();

  00009	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	ff 52 2c	 call	 DWORD PTR [edx+44]
  00014	89 45 fc	 mov	 DWORD PTR _dwHeaderSize$[ebp], eax

; 1885 : 
; 1886 :     for(pleEntry = m_lstEntries.Flink, dwSize = 0, hr = S_OK; SUCCEEDED(hr) && (pleEntry != &m_lstEntries); pleEntry = pleEntry->Flink)

  00017	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 88 38 02 00
	00		 mov	 ecx, DWORD PTR [eax+568]
  00020	89 4d ec	 mov	 DWORD PTR _pleEntry$[ebp], ecx
  00023	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 0
  0002a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
  00031	eb 08		 jmp	 SHORT $L49458
$L49459:
  00033	8b 55 ec	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	89 45 ec	 mov	 DWORD PTR _pleEntry$[ebp], eax
$L49458:
  0003b	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003f	7c 5c		 jl	 SHORT $L49460
  00041	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  0004a	39 4d ec	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  0004d	74 4e		 je	 SHORT $L49460

; 1887 :     {
; 1888 :         dwSize = BLOCKALIGNPAD(dwHeaderSize + dwSize, m_dwAlignment) - dwHeaderSize;

  0004f	8b 55 fc	 mov	 edx, DWORD PTR _dwHeaderSize$[ebp]
  00052	03 55 f0	 add	 edx, DWORD PTR _dwSize$[ebp]
  00055	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 88 48 02 00
	00		 mov	 ecx, DWORD PTR [eax+584]
  0005e	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  00062	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	33 d2		 xor	 edx, edx
  00067	f7 b1 48 02 00
	00		 div	 DWORD PTR [ecx+584]
  0006d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00070	0f af 82 48 02
	00 00		 imul	 eax, DWORD PTR [edx+584]
  00077	2b 45 fc	 sub	 eax, DWORD PTR _dwHeaderSize$[ebp]
  0007a	89 45 f0	 mov	 DWORD PTR _dwSize$[ebp], eax

; 1889 : 
; 1890 :         pEntry = CONTAINING_RECORD(pleEntry, CWaveBankEntry, m_leEntry);

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _pleEntry$[ebp]
  00080	83 e8 08	 sub	 eax, 8
  00083	89 45 f8	 mov	 DWORD PTR _pEntry$[ebp], eax

; 1891 : 
; 1892 :         if(!pEntry->m_fLoaded)

  00086	8b 4d f8	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  00089	83 b9 30 03 00
	00 00		 cmp	 DWORD PTR [ecx+816], 0
  00090	75 09		 jne	 SHORT $L49465

; 1893 :         {
; 1894 :             hr = E_ABORT;

  00092	c7 45 f4 04 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467260 ; 80004004H

; 1895 :             break;

  00099	eb 02		 jmp	 SHORT $L49460
$L49465:

; 1896 :         }
; 1897 :     }

  0009b	eb 96		 jmp	 SHORT $L49459
$L49460:

; 1898 : 
; 1899 :     if(FAILED(hr))

  0009d	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a1	7d 07		 jge	 SHORT $L49468

; 1900 :     {
; 1901 :         dwSize = 0;

  000a3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 0
$L49468:

; 1902 :     }
; 1903 : 
; 1904 :     DPF_LEAVE(dwSize);
; 1905 : 
; 1906 :     return dwSize;

  000aa	8b 45 f0	 mov	 eax, DWORD PTR _dwSize$[ebp]

; 1907 : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?GetBankDataSize@CWaveBank@@UAEKXZ ENDP			; CWaveBank::GetBankDataSize
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?LoadEntries@CWaveBank@@UAEJH@Z
_TEXT	SEGMENT
_fForce$ = 8
_this$ = -16
_hr$ = -8
_pleEntry$ = -12
_pEntry$ = -4
?LoadEntries@CWaveBank@@UAEJH@Z PROC NEAR		; CWaveBank::LoadEntries, COMDAT
; _this$ = ecx

; 1933 : {                                   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1934 :     HRESULT                 hr          = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 1935 :     PLIST_ENTRY             pleEntry;
; 1936 :     CWaveBankEntry *        pEntry;
; 1937 :     
; 1938 :     DPF_ENTER();
; 1939 : 
; 1940 :     for(pleEntry = m_lstEntries.Flink; SUCCEEDED(hr) && (pleEntry != &m_lstEntries); pleEntry = pleEntry->Flink)

  00010	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 88 38 02 00
	00		 mov	 ecx, DWORD PTR [eax+568]
  00019	89 4d f4	 mov	 DWORD PTR _pleEntry$[ebp], ecx
  0001c	eb 08		 jmp	 SHORT $L49478
$L49479:
  0001e	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	89 45 f4	 mov	 DWORD PTR _pleEntry$[ebp], eax
$L49478:
  00026	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002a	7c 2b		 jl	 SHORT $L49480
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  00035	39 4d f4	 cmp	 DWORD PTR _pleEntry$[ebp], ecx
  00038	74 1d		 je	 SHORT $L49480

; 1941 :     {
; 1942 :         pEntry = CONTAINING_RECORD(pleEntry, CWaveBankEntry, m_leEntry);

  0003a	8b 55 f4	 mov	 edx, DWORD PTR _pleEntry$[ebp]
  0003d	83 ea 08	 sub	 edx, 8
  00040	89 55 fc	 mov	 DWORD PTR _pEntry$[ebp], edx

; 1943 : 
; 1944 :         hr = pEntry->Load(fForce);

  00043	8b 45 08	 mov	 eax, DWORD PTR _fForce$[ebp]
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _pEntry$[ebp]
  0004f	ff 52 08	 call	 DWORD PTR [edx+8]
  00052	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 1945 :     }

  00055	eb c7		 jmp	 SHORT $L49479
$L49480:

; 1946 : 
; 1947 :     DPF_LEAVE_HRESULT(hr);
; 1948 : 
; 1949 :     return hr;

  00057	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 1950 : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?LoadEntries@CWaveBank@@UAEJH@Z ENDP			; CWaveBank::LoadEntries
_TEXT	ENDS
PUBLIC	??0CWaveBankProject@@QAE@XZ			; CWaveBankProject::CWaveBankProject
PUBLIC	?AddBank@CWaveBankProject@@UAEJPBD00PAPAVCWaveBank@@@Z ; CWaveBankProject::AddBank
PUBLIC	?RemoveBank@CWaveBankProject@@UAEXPAVCWaveBank@@@Z ; CWaveBankProject::RemoveBank
PUBLIC	?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z ; CWaveBankProject::Generate
PUBLIC	?CreateBank@CWaveBankProject@@MAEPAVCWaveBank@@XZ ; CWaveBankProject::CreateBank
PUBLIC	??_7CWaveBankProject@@6B@			; CWaveBankProject::`vftable'
PUBLIC	??_GCWaveBankProject@@UAEPAXI@Z			; CWaveBankProject::`scalar deleting destructor'
PUBLIC	??_ECWaveBankProject@@UAEPAXI@Z			; CWaveBankProject::`vector deleting destructor'
;	COMDAT ??_7CWaveBankProject@@6B@
CONST	SEGMENT
??_7CWaveBankProject@@6B@ DD FLAT:??_ECWaveBankProject@@UAEPAXI@Z ; CWaveBankProject::`vftable'
	DD	FLAT:?AddBank@CWaveBankProject@@UAEJPBD00PAPAVCWaveBank@@@Z
	DD	FLAT:?RemoveBank@CWaveBankProject@@UAEXPAVCWaveBank@@@Z
	DD	FLAT:?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z
	DD	FLAT:?CreateBank@CWaveBankProject@@MAEPAVCWaveBank@@XZ
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ??0CWaveBankProject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CWaveBankProject@@QAE@XZ PROC NEAR			; CWaveBankProject::CWaveBankProject, COMDAT
; _this$ = ecx

; 1975 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBankProject@@6B@ ; CWaveBankProject::`vftable'

; 1976 :     DPF_ENTER();
; 1977 : 
; 1978 :     m_dwBankCount = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 1979 :     m_dwEntryCount = 0;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 1980 : 
; 1981 :     InitializeListHead(&m_lstBanks);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00039	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1982 : 
; 1983 :     DPF_LEAVE_VOID();
; 1984 : }

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??0CWaveBankProject@@QAE@XZ ENDP			; CWaveBankProject::CWaveBankProject
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.h
_TEXT	ENDS
;	COMDAT ?RemoveBank@CWaveBankProject@@UAEXPAVCWaveBank@@@Z
_TEXT	SEGMENT
$T49862 = -4
$T49863 = -8
_pBank$ = 8
_this$ = -12
?RemoveBank@CWaveBankProject@@UAEXPAVCWaveBank@@@Z PROC NEAR ; CWaveBankProject::RemoveBank, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 187  :     DELETE(pBank);

  00009	83 7d 08 00	 cmp	 DWORD PTR _pBank$[ebp], 0
  0000d	74 31		 je	 SHORT $L48750
  0000f	8b 45 08	 mov	 eax, DWORD PTR _pBank$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR $T49863[ebp], eax
  00015	8b 4d f8	 mov	 ecx, DWORD PTR $T49863[ebp]
  00018	89 4d fc	 mov	 DWORD PTR $T49862[ebp], ecx
  0001b	83 7d fc 00	 cmp	 DWORD PTR $T49862[ebp], 0
  0001f	74 11		 je	 SHORT $L49864
  00021	6a 01		 push	 1
  00023	8b 55 fc	 mov	 edx, DWORD PTR $T49862[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR $T49862[ebp]
  0002b	ff 10		 call	 DWORD PTR [eax]
  0002d	89 45 f0	 mov	 DWORD PTR -16+[ebp], eax
  00030	eb 07		 jmp	 SHORT $L49865
$L49864:
  00032	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR -16+[ebp], 0
$L49865:
  00039	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _pBank$[ebp], 0
$L48750:

; 188  : }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?RemoveBank@CWaveBankProject@@UAEXPAVCWaveBank@@@Z ENDP	; CWaveBankProject::RemoveBank
_TEXT	ENDS
PUBLIC	??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@	; `string'
;	COMDAT ??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@ DB 'CWaveBank(this)', 00H ; `string'
; Function compile flags: /Odt
CONST	ENDS
;	COMDAT ?CreateBank@CWaveBankProject@@MAEPAVCWaveBank@@XZ
_TEXT	SEGMENT
$T49869 = -4
_this$ = -8
?CreateBank@CWaveBankProject@@MAEPAVCWaveBank@@XZ PROC NEAR ; CWaveBankProject::CreateBank, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 192  :     return NEW(CWaveBank(this));

  00009	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BA@MDJN@CWaveBank?$CIthis?$CJ?$AA@ ; `string'
  0000e	68 c0 00 00 00	 push	 192			; 000000c0H
  00013	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@EKAA@c?3?2xbox?2private?2windows?2directx?2@ ; `string'
  00018	68 4c 02 00 00	 push	 588			; 0000024cH
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXIPBDK0@Z	; operator new
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	89 45 fc	 mov	 DWORD PTR $T49869[ebp], eax
  00028	83 7d fc 00	 cmp	 DWORD PTR $T49869[ebp], 0
  0002c	74 11		 je	 SHORT $L49870
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	50		 push	 eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR $T49869[ebp]
  00035	e8 00 00 00 00	 call	 ??0CWaveBank@@QAE@PAVCWaveBankProject@@@Z ; CWaveBank::CWaveBank
  0003a	89 45 f4	 mov	 DWORD PTR -12+[ebp], eax
  0003d	eb 07		 jmp	 SHORT $L49871
$L49870:
  0003f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR -12+[ebp], 0
$L49871:
  00046	8b 45 f4	 mov	 eax, DWORD PTR -12+[ebp]

; 193  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?CreateBank@CWaveBankProject@@MAEPAVCWaveBank@@XZ ENDP	; CWaveBankProject::CreateBank
_TEXT	ENDS
PUBLIC	??1CWaveBankProject@@UAE@XZ			; CWaveBankProject::~CWaveBankProject
; Function compile flags: /Odt
;	COMDAT ??_GCWaveBankProject@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCWaveBankProject@@UAEPAXI@Z PROC NEAR		; CWaveBankProject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CWaveBankProject@@UAE@XZ ; CWaveBankProject::~CWaveBankProject
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	85 c0		 test	 eax, eax
  00017	74 0c		 je	 SHORT $L49492
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00022	83 c4 04	 add	 esp, 4
$L49492:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_GCWaveBankProject@@UAEPAXI@Z ENDP			; CWaveBankProject::`scalar deleting destructor'
; Function compile flags: /Odt
; File c:\xbox\private\windows\directx\xact\common\wavbndlr\writer.cpp
_TEXT	ENDS
;	COMDAT ??1CWaveBankProject@@UAE@XZ
_TEXT	SEGMENT
$T49878 = -12
$T49879 = -16
_this$ = -20
_pleBank$ = -8
_pBank$ = -4
??1CWaveBankProject@@UAE@XZ PROC NEAR			; CWaveBankProject::~CWaveBankProject, COMDAT
; _this$ = ecx

; 2009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CWaveBankProject@@6B@ ; CWaveBankProject::`vftable'
$L49500:

; 2010 :     PLIST_ENTRY             pleBank;
; 2011 :     CWaveBank *             pBank;
; 2012 :     
; 2013 :     DPF_ENTER();
; 2014 : 
; 2015 :     //
; 2016 :     // Free all the entries
; 2017 :     //
; 2018 :     
; 2019 :     while((pleBank = m_lstBanks.Flink) != &m_lstBanks)

  00012	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	89 55 f8	 mov	 DWORD PTR _pleBank$[ebp], edx
  0001b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 c0 04	 add	 eax, 4
  00021	39 45 f8	 cmp	 DWORD PTR _pleBank$[ebp], eax
  00024	74 42		 je	 SHORT $L49501

; 2020 :     {
; 2021 :         pBank = CONTAINING_RECORD(pleBank, CWaveBank, m_leBank);

  00026	8b 4d f8	 mov	 ecx, DWORD PTR _pleBank$[ebp]
  00029	83 e9 08	 sub	 ecx, 8
  0002c	89 4d fc	 mov	 DWORD PTR _pBank$[ebp], ecx

; 2022 :         
; 2023 :         DELETE(pBank);

  0002f	83 7d fc 00	 cmp	 DWORD PTR _pBank$[ebp], 0
  00033	74 31		 je	 SHORT $L49506
  00035	8b 55 fc	 mov	 edx, DWORD PTR _pBank$[ebp]
  00038	89 55 f0	 mov	 DWORD PTR $T49879[ebp], edx
  0003b	8b 45 f0	 mov	 eax, DWORD PTR $T49879[ebp]
  0003e	89 45 f4	 mov	 DWORD PTR $T49878[ebp], eax
  00041	83 7d f4 00	 cmp	 DWORD PTR $T49878[ebp], 0
  00045	74 11		 je	 SHORT $L49880
  00047	6a 01		 push	 1
  00049	8b 4d f4	 mov	 ecx, DWORD PTR $T49878[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR $T49878[ebp]
  00051	ff 12		 call	 DWORD PTR [edx]
  00053	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00056	eb 07		 jmp	 SHORT $L49881
$L49880:
  00058	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L49881:
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBank$[ebp], 0
$L49506:

; 2024 :     }

  00066	eb aa		 jmp	 SHORT $L49500
$L49501:

; 2025 : 
; 2026 :     DPF_LEAVE_VOID();
; 2027 : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??1CWaveBankProject@@UAE@XZ ENDP			; CWaveBankProject::~CWaveBankProject
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?AddBank@CWaveBankProject@@UAEJPBD00PAPAVCWaveBank@@@Z
_TEXT	SEGMENT
$T49885 = -12
$T49886 = -16
_pszBankName$ = 8
_pszBankFile$ = 12
_pszHeaderFile$ = 16
_ppBank$ = 20
_this$ = -20
_pBank$ = -4
_hr$ = -8
?AddBank@CWaveBankProject@@UAEJPBD00PAPAVCWaveBank@@@Z PROC NEAR ; CWaveBankProject::AddBank, COMDAT
; _this$ = ecx

; 2059 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2060 :     CWaveBank *             pBank;
; 2061 :     HRESULT                 hr;
; 2062 :     
; 2063 :     DPF_ENTER();
; 2064 : 
; 2065 :     hr = HRFROMP(pBank = CreateBank());

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	ff 52 10	 call	 DWORD PTR [edx+16]
  00014	89 45 fc	 mov	 DWORD PTR _pBank$[ebp], eax
  00017	8b 45 fc	 mov	 eax, DWORD PTR _pBank$[ebp]
  0001a	f7 d8		 neg	 eax
  0001c	1b c0		 sbb	 eax, eax
  0001e	25 f2 ff f8 7f	 and	 eax, 2147024882		; 7ff8fff2H
  00023	05 0e 00 07 80	 add	 eax, -2147024882	; 8007000eH
  00028	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2066 : 
; 2067 :     if(SUCCEEDED(hr))

  0002b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0002f	7c 1a		 jl	 SHORT $L49521

; 2068 :     {
; 2069 :         hr = pBank->Initialize(pszBankName, pszBankFile, pszHeaderFile);

  00031	8b 4d 10	 mov	 ecx, DWORD PTR _pszHeaderFile$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR _pszBankFile$[ebp]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _pszBankName$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _pBank$[ebp]
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _pBank$[ebp]
  00045	ff 52 04	 call	 DWORD PTR [edx+4]
  00048	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L49521:

; 2070 :     }
; 2071 : 
; 2072 :     if(SUCCEEDED(hr))

  0004b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0004f	7c 10		 jl	 SHORT $L49523

; 2073 :     {
; 2074 :         if(ppBank)

  00051	83 7d 14 00	 cmp	 DWORD PTR _ppBank$[ebp], 0
  00055	74 08		 je	 SHORT $L49524

; 2075 :         {
; 2076 :             *ppBank = pBank;

  00057	8b 45 14	 mov	 eax, DWORD PTR _ppBank$[ebp]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _pBank$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$L49524:

; 2077 :         }
; 2078 :     }
; 2079 :     else

  0005f	eb 37		 jmp	 SHORT $L49525
$L49523:

; 2080 :     {
; 2081 :         DELETE(pBank);

  00061	83 7d fc 00	 cmp	 DWORD PTR _pBank$[ebp], 0
  00065	74 31		 je	 SHORT $L49526
  00067	8b 55 fc	 mov	 edx, DWORD PTR _pBank$[ebp]
  0006a	89 55 f0	 mov	 DWORD PTR $T49886[ebp], edx
  0006d	8b 45 f0	 mov	 eax, DWORD PTR $T49886[ebp]
  00070	89 45 f4	 mov	 DWORD PTR $T49885[ebp], eax
  00073	83 7d f4 00	 cmp	 DWORD PTR $T49885[ebp], 0
  00077	74 11		 je	 SHORT $L49887
  00079	6a 01		 push	 1
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR $T49885[ebp]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	8b 4d f4	 mov	 ecx, DWORD PTR $T49885[ebp]
  00083	ff 12		 call	 DWORD PTR [edx]
  00085	89 45 e8	 mov	 DWORD PTR -24+[ebp], eax
  00088	eb 07		 jmp	 SHORT $L49888
$L49887:
  0008a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR -24+[ebp], 0
$L49888:
  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pBank$[ebp], 0
$L49526:
$L49525:

; 2082 :     }
; 2083 : 
; 2084 :     DPF_LEAVE_HRESULT(hr);
; 2085 : 
; 2086 :     return hr;

  00098	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2087 : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 10 00	 ret	 16			; 00000010H
?AddBank@CWaveBankProject@@UAEJPBD00PAPAVCWaveBank@@@Z ENDP ; CWaveBankProject::AddBank
; Function compile flags: /Odt
_TEXT	ENDS
;	COMDAT ?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z
_TEXT	SEGMENT
_pCallback$ = 8
_fAllowOverwrite$ = 12
_this$ = -20
_hr$ = -8
_pleBank$ = -16
_pBank$ = -4
?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z PROC NEAR ; CWaveBankProject::Generate, COMDAT
; _this$ = ecx

; 2115 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2116 :     HRESULT                 hr          = S_OK;

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0

; 2117 :     PLIST_ENTRY             pleBank;
; 2118 :     PLIST_ENTRY             pleEntry;
; 2119 :     CWaveBank *             pBank;
; 2120 : 
; 2121 :     DPF_ENTER();
; 2122 : 
; 2123 :     if(pCallback)

  00010	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  00014	74 19		 je	 SHORT $L49539

; 2124 :     {
; 2125 :         if(!pCallback->BeginProject(this))

  00016	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  0001d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  00022	ff 12		 call	 DWORD PTR [edx]
  00024	85 c0		 test	 eax, eax
  00026	75 07		 jne	 SHORT $L49540

; 2126 :         {
; 2127 :             hr = E_ABORT;

  00028	c7 45 f8 04 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467260 ; 80004004H
$L49540:
$L49539:

; 2128 :         }
; 2129 :     }
; 2130 : 
; 2131 :     for(pleBank = m_lstBanks.Flink; (pleBank != &m_lstBanks) && SUCCEEDED(hr); pleBank = pleBank->Flink)

  0002f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	89 4d f0	 mov	 DWORD PTR _pleBank$[ebp], ecx
  00038	eb 08		 jmp	 SHORT $L49543
$L49544:
  0003a	8b 55 f0	 mov	 edx, DWORD PTR _pleBank$[ebp]
  0003d	8b 02		 mov	 eax, DWORD PTR [edx]
  0003f	89 45 f0	 mov	 DWORD PTR _pleBank$[ebp], eax
$L49543:
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	39 4d f0	 cmp	 DWORD PTR _pleBank$[ebp], ecx
  0004b	74 43		 je	 SHORT $L49545
  0004d	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00051	7c 3d		 jl	 SHORT $L49545

; 2132 :     {
; 2133 :         pBank = CONTAINING_RECORD(pleBank, CWaveBank, m_leBank);

  00053	8b 55 f0	 mov	 edx, DWORD PTR _pleBank$[ebp]
  00056	83 ea 08	 sub	 edx, 8
  00059	89 55 fc	 mov	 DWORD PTR _pBank$[ebp], edx

; 2134 : 
; 2135 :         hr = pBank->GenerateBank(pCallback, fAllowOverwrite);

  0005c	8b 45 0c	 mov	 eax, DWORD PTR _fAllowOverwrite$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 fc	 mov	 edx, DWORD PTR _pBank$[ebp]
  00067	8b 02		 mov	 eax, DWORD PTR [edx]
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _pBank$[ebp]
  0006c	ff 50 20	 call	 DWORD PTR [eax+32]
  0006f	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax

; 2136 : 
; 2137 :         if(SUCCEEDED(hr))

  00072	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00076	7c 16		 jl	 SHORT $L49551

; 2138 :         {
; 2139 :             hr = pBank->GenerateHeader(pCallback, fAllowOverwrite);

  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _fAllowOverwrite$[ebp]
  0007b	51		 push	 ecx
  0007c	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  0007f	52		 push	 edx
  00080	8b 45 fc	 mov	 eax, DWORD PTR _pBank$[ebp]
  00083	8b 10		 mov	 edx, DWORD PTR [eax]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _pBank$[ebp]
  00088	ff 52 24	 call	 DWORD PTR [edx+36]
  0008b	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$L49551:

; 2140 :         }
; 2141 :     }

  0008e	eb aa		 jmp	 SHORT $L49544
$L49545:

; 2142 : 
; 2143 :     if(pCallback)

  00090	83 7d 08 00	 cmp	 DWORD PTR _pCallback$[ebp], 0
  00094	74 13		 je	 SHORT $L49552

; 2144 :     {
; 2145 :         pCallback->EndProject(this, hr);

  00096	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	51		 push	 ecx
  0009e	8b 55 08	 mov	 edx, DWORD PTR _pCallback$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _pCallback$[ebp]
  000a6	ff 50 04	 call	 DWORD PTR [eax+4]
$L49552:

; 2146 :     }
; 2147 : 
; 2148 :     DPF_LEAVE_HRESULT(hr);
; 2149 : 
; 2150 :     return hr;

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]

; 2151 : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?Generate@CWaveBankProject@@UAEJPAVCWaveBankCallback@@H@Z ENDP ; CWaveBankProject::Generate
_TEXT	ENDS
END
