//--------------------------------------------------------------------
// DBC.H
//
// This contains a list of all the debugger callback notifications.
//
// There are multiple users of this file.  To use it, you must
// define a DECL_DBC macro to extract the pieces of information that
// you are interested in from this file.  For example, if you want
// the numerical value, name (as a string), and fRequest flag for
// each callback, you could write the following:
//
//  typedef struct {
//      DBC     dbc;
//      LPCSTR  lszDbc;
//      BOOL    fRequest;
//  } DBCINFO;
//
//  #define DECL_DBC(name, fRequest, dbct) { dbc##name, "dbc" #name, fRequest },
//
//  DBCINFO rgdbcinfo[] = {
//      #include "dbc.h"
//  };
//
//  #undef DECL_DBC
//--------------------------------------------------------------------

DECL_DBC(Nil,             FALSE, dbctStop)

DECL_DBC(Bpt,             FALSE, dbctStop)



DECL_DBC(AsyncStop,       FALSE, dbctStop)     // Async stop has completed
DECL_DBC(EntryPoint,      FALSE, dbctStop)
DECL_DBC(LoadComplete,    FALSE, dbctStop)

DECL_DBC(Exception,		  FALSE, dbctStop)		// This one stops
DECL_DBC(NotifyException, FALSE, dbctContinue)	// This one continues

DECL_DBC(ExecuteDone,     FALSE, dbctContinue)
DECL_DBC(ExecuteFailed,   FALSE, dbctContinue)

DECL_DBC(Step,            FALSE, dbctStop)

DECL_DBC(CanStep,         TRUE,  dbctContinue)

DECL_DBC(NewProc,         FALSE, dbctContinue)
DECL_DBC(ProcTerm,        FALSE, dbctContinue)
DECL_DBC(DeleteProc,      FALSE, dbctContinue)


DECL_DBC(CreateThread,    FALSE,  dbctContinue)

DECL_DBC(ThreadTerm,      FALSE, dbctContinue)		// This one stops

DECL_DBC(ModLoad,         TRUE,	 dbctContinue)
DECL_DBC(ModFree,         FALSE, dbctContinue)

DECL_DBC(InfoAvail,       FALSE, dbctContinue) // i.e. OutputDebugString
DECL_DBC(Error,           FALSE, dbctContinue)     // misc error reporting

//
// We just exited a function (either stepped a RET, or stepped over a CALL)
//		wParam = nothing
//		lParam = LPADDR, points to some address in the function we just
//						 exited; NOT necessarily the very beginning of the func
//

DECL_DBC(ExitedFunction, TRUE,	dbctContinue)

// The name of a thread was changed
//
DECL_DBC(ThreadName, FALSE, dbctContinue)

DECL_DBC(RuntimeError,        FALSE, dbctStop)
DECL_DBC(NotifyRuntimeError,  FALSE, dbctContinue)

//
// The generic stopping and generic non-stopping events are to help out
// the shell.  They are NEVER generated by the DM or the EM.
//

DECL_DBC(GenericStoppingEvent,		FALSE, dbctStop)		
DECL_DBC(GenericNonstoppingEvent,	FALSE, dbctContinue)

DECL_DBC(SoftAsyncStop,       FALSE, dbctStop)     // Soft Break

DECL_DBC(Message,       FALSE, dbctContinue)     // a message for the shell 

DECL_DBC(NoSymbols,     FALSE, dbctContinue)     // no symbols for main binary (mod[0]) 

DECL_DBC(Max,             FALSE, dbctStop)

