// VBIDE.OLB
//---------------------------------------------------------------------------
// This describes the object classes in the VB5 IDE.  IT is a type library
// which is used by IDE add-ins to manipulate these classes, and
// VBIDE.H.
//
// NOTE:  This used to be autogenerated by running VBIDE.SRC through
// through MKTYPLIB.  This is no longer the case.  Instead, VBIDE.ID
// is run through IDHEADER.BAT to create helpid and browser string
// headers to include in this file.
//---------------------------------------------------------------------------
// Copyright (c) 1988-1995, Microsoft Corp.
//                 All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// WARNING: DO NOT USE THE NAME "VBEOBJ" FOR NEW OBJECTS SINCE IT
//          GETS REPLACED WITH "VBE" BY SED
//---------------------------------------------------------------------------

#define STRING(x) #x
#define XSTRING(x) STRING(x)

// NOTE: These are duplicated from dispatch.h. They need to match.
#define DISPID_VALUE 0
#define DISPID_PROPERTYPUT (-3)
#define DISPID_NEWENUM (-4)

// event dispids used in the code
#include "stdhlpvb.h"
#include "ideodl.h"

#include "shellver.h"
//---------------------------------------------------------------------------
// Preprocessor stuff for help ids and strings

#include "vbideid.h" // Generated from VBIDE.ID

#include "wizardid.h" // Generated from Wizard.id

#include "vbaextid.h" // Generated from VBAEXT.ID

#ifdef HELP
#error HELP() macro is already defined!
#endif  // HELP

// Use HELP(devstring) instead of helpcontext/helpstring separately!
// The devstrings are defined in RUBY.ID, and new ones should be
// added there.
//
//
// NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE!
//
// DON'T YOU EVEN THINK ABOUT ADDING ANYTHING VISIBLE WITHOUT 
// CREATING A DEVSTRING FOR IT WHEN YOU ADD IT!!!!!   You can leave 
// the context id at zero (for now, this will change in the future),
// but you should go ahead and add a reasonable help string.  Or add
// it as undone, but it's best to do it upfront.
//
// NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE!

// ALSO NOTE: The Get/Put properties should both use the same
// devstring, and the helpstring should read like "Returns/Sets the ..."

// Don't use these directly....
#define HELPID_(devstring) HID_ ## devstring
#define BROWSERSTR_(devstring) BS_ ## devstring

// No browser strings for VBE for this version
#define HELP(devstring) helpcontext(HID_ ## devstring)

// Flag to CheckBS app that help is not needed for this member 
// - has no meaning to the build process (stephwe 5/96)
#define HELPNOTNEEDED


#define DISPID_WINDOWS	    110  // donot change this...

//--------------- ------------------------------------------------------------


[   
  uuid(18BEB7F2-CA98-11d1-B6E7-00A0C90F2744),
  #define foo(ver) VEGAS Shell ver
  helpstring(XSTRING(foo(VBIDE_LIB_VERSION))),
    version(VBIDE_LIB_VERSION)
]
library VBIDE
{
    importlib("stdole2.tlb");    // Needed for IDispatch
    importlib("mso97.dll");        // Needed for CommandBars
    importlib("DTE.TLB");        // Needed for DTE (Shell) definitions.

// UNDONE RISC v-bmoret 2/7/96
// need the interfaces to build debugvbe
//#ifndef VBE 

#ifndef EXTBLDMINTLB

// VB5 interfaces
interface VBEOBJ;

interface _VBProjects;
coclass   VBProjects;

interface _VBProject;
coclass VBProject;

interface _VBComponents;
coclass   VBComponents;

interface _VBComponent;
coclass VBComponent;







interface _VBProjectsEvents;
coclass VBProjectsEvents;

interface _VBComponentsEvents;
coclass VBComponentsEvents;

interface _ReferencesEvents;
coclass ReferencesEvents;

coclass VBControlsEvents;
coclass SelectedVBControlsEvents;


coclass CodeModule;
coclass CodePanes;
coclass CodePane;

interface Reference;
interface _References;
coclass References;



// Backward Compatibility interfaces


interface _Components; 
coclass Components;  

interface _Component; 
coclass Component; 
interface SelectedComponents;


//coclass Windows;
//coclass Window;
//coclass Events;
//coclass AddIns;
//coclass Properties;
//coclass AddIn;

// UNDONE RISC v-bmoret 2/7/96
//#endif 




    typedef
    [uuid(06a03650-2369-11ce-bfdc-08002b2b8cda), hidden]
    enum vbextFileTypes
    {
	vbextFileTypeForm               = 0,
	vbextFileTypeModule             = 1,
	vbextFileTypeClass              = 2,
	vbextFileTypeProject            = 3,
	vbextFileTypeExe                = 4,
	vbextFileTypeFrx                = 5,
	vbextFileTypeRes                = 6,
	vbextFileTypeUserControl        = 7,
	vbextFileTypePropertyPage		= 8,
	vbextFileTypeDocObject			= 9,
	vbextFileTypeBinary             = 10,
	vbextFileTypeGroupProject		= 11,
    vbextFileTypeDesigners			= 12,
        vbextFileTypeDataClass			= 13,
	} vbextFileTypes;





    typedef
    [uuid(a3047830-333c-11ce-bfdc-08002b2b8cda), hidden]
    enum vbextDisconnectMode
    {
	 vbextHostShutdown = 0,
	 vbextUserClosed = 1
    } vbextDisconnectMode;

	typedef
	[uuid(0002E154-0000-0000-C000-000000000046), HELP(vbext_VBADisplayModel)]
	enum vbext_VBADisplayModel
	{
	[HELP(vbext_VBADisplayModel_SDI)] vbext_dm_SDI = 0,
	[HELP(vbext_VBADisplayModel_MDI)] vbext_dm_MDI = 1
	} vbext_VBADisplayModel;


    [
    uuid(0002E100-0000-0000-C000-000000000046),  // VB5
	 odl, dual, HELP(vbext_VBE)]
    interface VBEOBJ : IDispatch
    {

	// Default (value) property/method
	[id(DISPID_VALUE), propget, HELP(vbext_VBE_Name)]
	HRESULT Name([out, retval] BSTR _far *lpbstrReturn);

	// Standard properties & methods, this object type

	[id(10), propget, HELP(vbext_VBE_FullName)]
	HRESULT FullName([out, retval] BSTR _far *lpbstrReturn);

	[id(11), propget, HELP(vbext_VBE_LastUsedPath)]
	HRESULT LastUsedPath([out, retval] BSTR _far *lpbstrReturn);

	[id(11), propput, HELP(vbext_VBE_LastUsedPath)]
	HRESULT LastUsedPath([in] BSTR bstrNewPath);

	// Other properties & methods
	[id(100), propget, HELP(vbext_VBE_Version)]
	HRESULT Version([out, retval] BSTR _far *lpbstrReturn);


#ifdef MENUBARS_EXPOSED
	[id(102), propget, HELP(vbext_VBE_MnuBars)]
	HRESULT MenuBars([out, retval] MenuBars _far * _far * lppmbReturn);
#endif  // MENUBARS_EXPOSED

	[id(106), propget, HELP(vbext_VBE_ReadOnlyMode)]
	HRESULT ReadOnlyMode([out, retval] short * pReadOnlyMode);

	[id(106), propput, HELP(vbext_VBE_ReadOnlyMode)]
	HRESULT ReadOnlyMode([in] short ReadOnlyMode);

	[id(107), propget, HELP(vbext_VBE_Projects)]
	HRESULT VBProjects([out, retval] VBProjects _far* _far * lppptReturn);

	[id(108), propget, HELP(vbext_VBE_CommandBars)]
	HRESULT CommandBars([out, retval] CommandBars _far* _far* ppcbs);    

	[id(109), propget, HELP(vbext_VBE_CodePanes)]
	HRESULT CodePanes([out, retval] CodePanes _far* _far* ppCodePanes);

	[id(DISPID_WINDOWS), propget, HELP(vbext_VBE_WindowCollection)]
	HRESULT Windows( [out, retval] Windows ** ppwnsVBWindows );

	[id(111), propget, HELP(vbext_VBE_Events)]
	HRESULT Events([out, retval] Events ** ppevtEvents );    

	[id(200), propget, HELP(vbext_VBE_AddIns)]
	HRESULT AddIns([out, retval] AddIns _far* _far * lpppAddIns);

	[id(201), propget, HELP(vbext_VBE_ActiveVBProject)]
	HRESULT ActiveVBProject([out, retval] VBProject ** lppptReturn);

	[id(201), propputref, HELP(vbext_VBE_ActiveVBProject)]
	HRESULT ActiveVBProject([in] VBProject * lppptReturn);

	[id(202), propget, HELP(vbext_VBE_SelectedVBComponent)]
	HRESULT SelectedVBComponent([out, retval] VBComponent _far *_far * lppscReturn);

	[id(203), propget, HELP(vbext_VBE_TemplatePath)]
	HRESULT TemplatePath([out, retval] BSTR _far * lpbstrPath);

	[id(204), propget, HELP(vbext_VBE_MainWindow)]
	HRESULT MainWindow([out, retval] Window ** ppwin);

	[id(205), propget, HELP(vbext_Wins_ActiveWindow)]
	HRESULT ActiveWindow([out, retval] Window ** ppwinActive );

	[id(206), propget, HELP(vbext_VBE_ActiveCodePane)]
	HRESULT ActiveCodePane([out, retval] CodePane ** ppCodePane);

	[id(206), propputref, HELP(vbext_VBE_ActiveCodePane)]
	HRESULT ActiveCodePane([in] CodePane * ppCodePane);

	[id(207), HELP(vbext_VBE_Quit)]
	HRESULT Quit();

	[id(208), propget, HELP(vbext_VBE_DisplayModel)]
	HRESULT DisplayModel([out, retval] vbext_VBADisplayModel _far *lpDispModel);

	[id(208), propput, HELP(vbext_VBE_DisplayModel)]
	HRESULT DisplayModel([in] vbext_VBADisplayModel DispModel);

#if 0
   	[id(209), propget, HELP(vbext_VBE_Parent)]
	HRESULT Parent([out, retval] IDispatch _far * _far * lppaReturn);
#endif  // 0

	}





    [
   	uuid(0002E191-0000-0000-C000-000000000046),
	 oleautomation, odl, HELP(vbext_VBProjectsEvents)]
    interface _VBProjectsEvents : IUnknown {
    };

    // Also used by Projects in wizard.odl
    [
	uuid(0002E190-0000-0000-C000-000000000046)
	]
    dispinterface _dispVBProjectsEvents
    {
	properties:
	methods: // Events
	[id(1), HELP(vbext_VBProjectsEvents_ItemAdded)]     void ItemAdded    ( [in] VBProject _far *VBProject );
	[id(2), HELP(vbext_VBProjectsEvents_ItemRemoved)]   void ItemRemoved  ( [in] VBProject _far *VBProject );
	[id(3), HELP(vbext_VBProjectsEvents_ItemRenamed)]   void ItemRenamed  ( [in] VBProject _far *VBProject , [in] BSTR OldName);
	[id(4), HELP(vbext_VBProjectsEvents_ItemActivated)] void ItemActivated( [in] VBProject _far *VBProject );
    };

    [uuid(0002E114-0000-0000-C000-000000000046), HELP(vbext_VBProjectsEvents)]
    coclass VBProjectsEvents
    {
	[default] interface _VBProjectsEvents;
	[source] dispinterface _dispVBProjectsEvents;
    };

    [
	uuid(0002E192-0000-0000-C000-000000000046), 

	odl, oleautomation, HELP(vbext_VBComponentsEvents)]
    interface _VBComponentsEvents : IUnknown {
    };

    // Also used by Components in wizard.odl
    [
	uuid(0002E193-0000-0000-C000-000000000046), 
	HELP(vbext_VBComponentsEvents)]
    dispinterface _dispVBComponentsEvents
    {
	properties:
	methods: // Events
	[id(1), HELP(vbext_VBComponentsEvents_ItemAdded)]     void ItemAdded    ( [in] VBComponent _far *VBComponent );
	[id(2), HELP(vbext_VBComponentsEvents_ItemRemoved)]   void ItemRemoved  ( [in] VBComponent _far *VBComponent );
	[id(3), HELP(vbext_VBComponentsEvents_ItemRenamed)]   void ItemRenamed  ( [in] VBComponent _far *VBComponent,  [in] BSTR OldName );
	[id(4), HELP(vbext_VBComponentsEvents_ItemSelected)]  void ItemSelected ( [in] VBComponent _far *VBComponent );
	[id(5), HELP(vbext_VBComponentsEvents_ItemActivated)] void ItemActivated( [in] VBComponent _far *VBComponent );
	[id(6), HELP(vbext_VBComponentsEvents_ItemReloaded)]  void ItemReloaded ( [in] VBComponent _far *VBComponent );
    };

    [uuid(0002E117-0000-0000-C000-000000000046), HELP(vbext_VBComponentsEvents)]
    coclass VBComponentsEvents
    {
	[default] interface _VBComponentsEvents;
	[source] dispinterface _dispVBComponentsEvents;
    };

    [
	uuid(0002E195-0000-0000-C000-000000000046),
	 odl, oleautomation, HELP(vbext_ReferencesEvents)]
    interface _ReferencesEvents : IUnknown {
    };

    [
	uuid(0002E194-0000-0000-C000-000000000046), 
	HELP(vbext_ReferencesEvents)]
    dispinterface _dispReferencesEvents
    {
	properties:
	methods: // Events
	[id(1), HELP(vbext_ReferencesEvents_ItemAdded)]   void ItemAdded   ( [in] Reference * Reference );
	[id(2), HELP(vbext_ReferencesEvents_ItemRemoved)] void ItemRemoved ( [in] Reference * Reference );
    };

    [
	uuid(0002E196-0000-0000-C000-000000000046), 
	HELP(vbext_ReferencesEvents)]
    coclass ReferencesEvents
    {
	[default] interface _ReferencesEvents;
	[source] dispinterface _dispReferencesEvents;
    };




#include "wizard.odl" // include forms extensibility stuff
// CONSIDER: Because of the new global events model goodies. There is
//           considerable cross talk between vbide.odl (this file) and
//           wizard.odl. I believe that the contents of wizard.odl should be
//           dumped here (and wizard.id into vbide.id) creating just one file
//           of each type (.odl & .id). -Kirkgo

#include "vbaext.odl" // vba extensibility stuff.

#endif// EXTBLDMINTLB
}

