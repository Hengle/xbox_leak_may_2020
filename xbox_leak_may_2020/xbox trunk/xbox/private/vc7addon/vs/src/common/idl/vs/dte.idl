/*****************************************************************************
*dte.idl
*
*  Copyright (C) 1995-2000, Microsoft Corporation.  All Rights Reserved.
*  Information Contained Herein Is Proprietary and Confidential.
*
*Purpose:
*
*       Defines the object model for Visual Studio.
*
*
*
*   WARNING!!!!!!!!!!!!!!!!!
*
* Before Proceeding any further in this document: Do the following:
*   1) Right click here ---> X
*   2) Select Properties
*   3) Make sure that both "Tab size" & "Indent size" have the value 2
*   4) Click the Tools menu item
*   5) Click the Options menu item
*   6) Click the "Tabs" tab
*   7) Select ODL/IDL in the dropdown
*   8) Make sure the "Insert Spaces" Radio button is selected
*   9) Click OK
*   10) You may now proceed
*
*
* Other Notes:
*   The format of personal comments to remind you to do something at a later date are:
*     TODO: (youruserid)
*     Review: (youruserid)
*   (NOT $CONSIDER etc)
*
* *****************
* MOST IMPORTANTLY:
* *****************
*   Please notify either craigs or billchi of any additions/removals from this 
*     file before checked in. There are far reaching compatibility and or dependancies 
*     on this file between many groups. One small change can leave VB, VC, etc. broken
*     for days.
*****************************************************************************/

/*
*  README! README! README! README! README! README! README! README! README! README! README! README!
**************************************************************************************************
*
*  NOTE: Every time you check in this file, be sure to increment the value for DTEIDL_REVISION
*
**************************************************************************************************
*  README! README! README! README! README! README! README! README! README! README! README! README!
*/

#ifdef Delete
#define Delete_defined
#undef Delete
#endif

#ifdef ReplaceText
#define ReplaceText_defined
#undef ReplaceText
#endif

cpp_quote("#ifdef Delete")
cpp_quote("#define Delete_defined")
cpp_quote("#undef Delete")
cpp_quote("#endif")

cpp_quote("#ifdef ReplaceText")
cpp_quote("#define ReplaceText_defined")
cpp_quote("#undef ReplaceText")
cpp_quote("#endif")

cpp_quote("#define DTEIDL_REVISION 8")
cpp_quote("#define SID_SVsExtensibility IID_IVsExtensibility")

cpp_quote("//The following are defined for backward source compatibility")
cpp_quote("// They were needed when the transition from a coclass to interface")
cpp_quote("// object model was made.")

cpp_quote("#define IID__Projects IID_Projects")
cpp_quote("#define _Projects Projects")

cpp_quote("#define IID__Project IID_Project")
cpp_quote("#define _Project Project")

cpp_quote("#define IID__ProjectItems IID_ProjectItems")
cpp_quote("#define _ProjectItems ProjectItems")

cpp_quote("#define IID__ProjectItem IID_ProjectItem")
cpp_quote("#define _ProjectItem ProjectItem")

cpp_quote("#define IID__Commands IID_Commands")
cpp_quote("#define _Commands Commands")

cpp_quote("#define IID__AddIns IID_AddIns")
cpp_quote("#define _AddIns AddIns")

cpp_quote("#define IID__AddIn IID_AddIn")
cpp_quote("#define _AddIn AddIn")

cpp_quote("#define IID__Windows IID_Windows")
cpp_quote("#define _Windows Windows")

cpp_quote("#define IID__LinkedWindows IID_LinkedWindows")
cpp_quote("#define _LinkedWindows LinkedWindows")

cpp_quote("#define IID__SelectedItems IID_SelectedItems")
cpp_quote("#define _SelectedItems SelectedItems")

cpp_quote("#define IID__SelectedItem IID_SelectedItem")
cpp_quote("#define _SelectedItem SelectedItem")

cpp_quote("#define IID__Properties IID_Properties")
cpp_quote("#define _Properties Properties")

cpp_quote("#define IID__SelectionContainer IID_SelectionContainer")
cpp_quote("#define _SelectionContainer SelectionContainer")

cpp_quote("#define IID__TextBuffer IID_TextBuffer")
cpp_quote("#define _TextBuffer TextBuffer")

cpp_quote("#define SID_SVsProfferCommands IID_IVsProfferCommands")

//cpp_quote("#include \"msaddndr.h\"")
#include "shellver.h"
#include "indentstyle.idh"

// {1E58696E-C90F-11D2-AAB2-00C04F688DDE}
cpp_quote("const GUID GUID_Addins = { 0x1e58696e, 0xc90f, 0x11D2, { 0xaa, 0xb2, 0x0, 0xc0, 0x4f, 0x68, 0x8d, 0xde } };")

#define STRING(x) #x
#define XSTRING(x) STRING(x)

#define DISPID_WINDOWS      110  // donot change this...
#define DTE_VER DTE_LIB_VERSION

#ifdef HELP
#error HELP() macro is already defined!
#endif

#ifndef VARIANT_FALSE
#define VARIANT_FALSE 0
#endif

#ifndef VARIANT_TRUE
#define VARIANT_TRUE 0xffff
#endif

// Don't use these directly....
#define HELPID_(devstring) HID_ ## devstring
#define BROWSERSTR_(devstring) BS_ ## devstring

#define HELP(devstring) helpcontext(HID_ ## devstring), helpstring(BS_ ## devstring), helpstringcontext(HID_ ## devstring)

// Flag to CheckBS app that help is not needed for this member 
// - has no meaning to the build process (stephwe 5/96)
#define HELPNOTNEEDED

#include "VSEXTid.h"
#include "VSEXTbs.h"

cpp_quote("#define LIBID_DTE LIBID_EnvDTE")

[
  uuid(80cc9f66-e7d8-4ddd-85b6-d9e6cd0e93e2),
  #define foo(ver) Microsoft Development Environment ver
  helpfile("csext.chm"),
  helpstring(XSTRING(foo(DTE_VER))),
  version(DTE_VER),
//custom(0f21f359-ab84-41e8-9a78-36d110e6d2f9, "Microsoft.VisualStudio.EnvDTE")		 
]
library EnvDTE
{
  importlib("stdole2.tlb");  // Needed for IDispatch
  importlib("mso.dll");    // Needed for CommandBars

  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  // SEE COMMENTS IN VBIDE.ODL ABOUT HELP IDs AND HELPSTRINGS!
  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  interface _DTE;
  coclass   DTE;
  interface _Solution;
  coclass   Solution;
  interface Projects;
  interface Project;
  interface ProjectItems;
  interface ProjectItem;
  interface Commands;
  interface TextBuffer;
  interface AddIns;
  interface AddIn;
  interface Properties;
  interface Property;
  interface ISupportVSProperties;
  interface SelectedItems;
  interface SelectedItem;
  interface SelectionContainer;
  interface Windows;
  interface Window;
  interface LinkedWindows;
  interface Events;
  coclass   CommandBarEvents;
  coclass   CommandEvents;
  coclass   SelectionEvents;
  coclass   SolutionEvents;
  coclass   BuildEvents;
  coclass   WindowEvents;
  coclass   DocumentEvents;
  coclass   TextEditorEvents;
  coclass   TaskListEvents;
  coclass   OutputWindowEvents;
  coclass   FindEvents;
  coclass   DTEEvents;
  interface TaskList;
  interface TaskItems;
  interface TaskItem;
  interface ToolBox;
  interface ToolBoxTabs;
  interface ToolBoxTab;
  interface ToolBoxItem;
  interface ToolBoxItems;
  interface ToolBoxItemData;
  interface OutputWindow;
  interface OutputWindowPanes;
  interface OutputWindowPane;
  interface IExtensibleObjectSite;
  interface DataObjectFiles;
  interface DataObject;
  interface Document;
  interface Documents;
  interface WindowConfigurations;
  interface WindowConfiguration;
  interface Command;
  interface Globals;
  interface StatusBar;
  interface Find;
  interface ItemOperations;
  interface IVsProfferCommands;
  interface ObjectExtenders;
  interface IExtenderSite;
  interface IExtenderProvider;
  interface IExtenderProviderUnk;
  interface IFilterProperties;
  dispinterface _dispDTEEvents;
  interface BuildDependencies;
  interface BuildDependency;
  interface SolutionConfigurations;
  interface SolutionConfiguration;
  interface SolutionContext;
  interface SolutionBuild;
  interface UIHierarchyItem;
  interface UIHierarchyItems;
  interface UIHierarchy;
  interface UndoContext;
  interface Configuration;
  interface BuildDependency;
  interface SolutionContexts;
  interface Configurations;
  interface ConfigurationManager;
  interface Macros;
  interface OutputGroups;
  interface OutputGroup;
  interface ContextAttributes;
  interface SourceControl;

  // these used to be in textext.idl
  interface TextPoint;
  interface EditPoint;
  interface TextSelection;
  interface TextRanges;
  interface TextRange;
  interface TextDocument;
  interface VirtualPoint;
  interface TextPane;
  interface LanguageManager;
  interface TextWindow;
  interface TextPanes;
  interface UndoContext;
  interface TextEditor;

  #include "CodeModel.idl"
  #include "Debugger.idl"

  typedef [uuid(178c767a-1963-4bc5-b3f2-e70f3eb441a8), HELP(vsenumNavigateBrowser) ]
  enum vsNavigateBrowser
  {
    vsNavigateBrowserDefault    = 0,
    vsNavigateBrowserHelp       = 1,
    vsNavigateBrowserNewWindow  = 2
  } vsNavigateBrowser;

  typedef [uuid(947978f5-185b-4366-921e-a14c0ed46702), HELP(vsenumCommandDisabledFlags) ]
  enum vsCommandDisabledFlags
  {
		vsCommandDisabledFlagsEnabled = 0,
		vsCommandDisabledFlagsGrey    = 0x10,
    vsCommandDisabledFlagsHidden  = 0x20
  } vsCommandDisabledFlags;

  typedef [uuid(9e3c8489-ae44-4fcf-9697-cd3f312ba08c)]
  enum vsInitializeMode
  {
    vsInitializeModeStartup = 0,
    vsInitializeModeReset   = 1
  } vsInitializeMode;


  typedef [uuid(79946991-1ae2-4d2d-9768-fd7801be7daa), HELP(vsenumCommandBarType) ]
  enum vsCommandBarType
  {
    /*vsControlCustom = 0,
    vsControlButton = 1,
    vsControlEdit = 2,
    vsControlDropdown = 3,
    vsControlComboBox = 4,
    vsControlButtonDropdown = 5,
    vsControlSplitDropdown = 6,
    vsControlOCXDropdown = 7,
    vsControlGenericDropdown = 8,
    vsControlGraphicDropdown = 9,
    vsControlPopup = 10,
    vsControlGraphicPopup = 11,
    vsControlButtonPopup = 12,
    vsControlSplitButtonPopup = 13,
    vsControlSplitButtonMRUPopup = 14,
    vsControlLabel = 15,
    vsControlExpandingGrid = 16,
    vsControlSplitExpandingGrid = 17,
    vsControlGrid = 18,
    vsControlGauge = 19,
    vsControlGraphicCombo = 20,
    vsControlPane = 21,
    vsControlActiveX = 22*/

    //vsControlButton = 1,
    vsCommandBarTypePopup   = 10,
    vsCommandBarTypeToolbar = 23,
    vsCommandBarTypeMenu    = 24
  } vsCommandBarType;

  typedef [uuid(b638b3e3-c98b-4f59-9d05-105a620529f9), HELP(vsenumIDEMode) ]
  enum vsIDEMode
  {
    vsIDEModeDesign = 1,
    vsIDEModeDebug  = 2,
  } vsIDEMode;

  typedef [uuid(d920605a-11dd-4a12-a8dc-10578bb08606), HELP(vsenumWizardResult) ]
  enum wizardResult
  {
    wizardResultSuccess = -1,
    wizardResultFailure = 0,
    wizardResultCancel  = 1,
    wizardResultBackOut = 2
  } wizardResult;

  /*typedef [ uuid(289E9AF1-4973-11d1-AE81-00A0C90F26F4), HELP(vsenumExtConnectMode) ]
  enum ext_ConnectMode
  {
	  ext_cm_AfterStartup	= 0,
	  ext_cm_Startup		  = 1,
	  ext_cm_External		  = 2,
	  ext_cm_CommandLine	= 3,
    ext_cm_Solution     = 4,
    ext_cm_UISetup      = 5
	} ext_ConnectMode;

	typedef [ uuid(289E9AF2-4973-11d1-AE81-00A0C90F26F4), HELP(vsenumDisConnectMode) ]
  enum ext_DisconnectMode
  {
	  ext_dm_HostShutdown	    = 0,
	  ext_dm_UserClosed	      = 1,
    ext_dm_UISetupComplete  = 2,
    ext_dm_SolutionClosed   = 3
  } ext_DisconnectMode;*/

  cpp_quote("#define ext_cm_Solution 4")
  cpp_quote("#define ext_cm_UISetup 5")
  cpp_quote("#define ext_dm_UISetupComplete 2")
  cpp_quote("#define ext_dm_SolutionClosed 3")

  typedef [uuid(ca3ee5d0-6305-422f-a425-99737956088f), HELP(vsenumPromptResult) ]
  enum vsPromptResult
  {
    vsPromptResultYes        = 1,
    vsPromptResultNo         = 2,
    vsPromptResultCancelled  = 3
  } vsPromptResult;

  

  /*[ uuid(B65AD801-ABAF-11d0-BB8B-00A0C90F2744), odl, dual, oleautomation, object, local, HELP(vsextIDTExtensibility2Obj) ]
	interface IDTExtensibility2 : IDispatch
  {
    [id(1), HELP(vsextIDTExtensibility2OnConnection)] 
		HRESULT OnConnection([in] IDispatch* Application, [in] ext_ConnectMode ConnectMode, [in] IDispatch* AddInInst, [in] SAFEARRAY(VARIANT)* custom);

    [id(2), HELP(vsextIDTExtensibility2OnDisconnection)] 
		HRESULT OnDisconnection([in] ext_DisconnectMode RemoveMode, [in] SAFEARRAY(VARIANT)* custom);

    [id(3), HELP(vsextIDTExtensibility2OnAddInsUpdate)] 
		HRESULT OnAddInsUpdate([in] SAFEARRAY(VARIANT)* custom);

    [id(4), HELP(vsextIDTExtensibility2OnStartupComplete)] 
		HRESULT OnStartupComplete([in] SAFEARRAY(VARIANT)* custom);

    [id(5), HELP(vsextIDTExtensibility2OnBeginShutdown)] 
		HRESULT OnBeginShutdown([in] SAFEARRAY(VARIANT)* custom); 
  }*/

  [ odl, dual, oleautomation, object, uuid(E914BBE1-03A4-11D1-BBCD-00A0C90F2744), local, HELP(vsobjIDTWizard)]
  interface IDTWizard : IDispatch
  {
    [id(1), HELP(vsobjIDTWizardExec)] 
		HRESULT Execute([in] IDispatch *Application, [in] long hwndOwner, [in] SAFEARRAY (VARIANT)* ContextParams, [in] SAFEARRAY (VARIANT)* CustomParams, [in,out] wizardResult *RetVal);
  }

  [ odl, uuid(3c536122-57b1-46de-ab34-acc524140093), hidden, restricted ]
  interface IVsExtensibility : IUnknown
  {
    [id(1)] HRESULT get_Properties([in] ISupportVSProperties *pParent, [in] IDispatch *pdispPropObj, [out] Properties **ppProperties);
    [id(2)] HRESULT RunWizardFile([in] BSTR bstrWizFilename, [in] long hwndOwner, [in] SAFEARRAY (VARIANT)* vContextParams, [out, retval] wizardResult *pResult);
    [id(3)] HRESULT Get_TextBuffer([in] IUnknown *pVsTextStream, [in] IExtensibleObjectSite *pParent, [out, retval] TextBuffer **ppTextBuffer);
    [id(4)] HRESULT EnterAutomationFunction(void);
    [id(5)] HRESULT ExitAutomationFunction(void);
    [id(6)] HRESULT IsInAutomationFunction([out, retval] BOOL *pfInAutoFunc);
    [id(7)] HRESULT GetUserControl([out] VARIANT_BOOL *fUserControl);
    [id(8)] HRESULT SetUserControl([in] VARIANT_BOOL fUserControl);
    [id(9)] HRESULT SetUserControlUnlatched([in] VARIANT_BOOL fUserControl);
    [id(10)] HRESULT LockServer([in] VARIANT_BOOL);
    [id(11)] HRESULT GetLockCount([out, retval] long *pCount);
    [id(12)] HRESULT TestForShutdown([out, retval] VARIANT_BOOL *fShutdown);
    [id(13)] HRESULT GetGlobalsObject([in] VARIANT ExtractFrom, [out, retval] Globals **ppGlobals);
    [id(14)] HRESULT GetConfigMgr([in] IUnknown *pIVsProject, DWORD_PTR itemid, [out, retval] ConfigurationManager **ppCfgMgr);
    //[id(15)] HRESULT FireCodeModelEvent(DISPID dispid, VARIANT v1, VARIANT v2, VARIANT v3, VARIANT v4);
	  [id(16)] HRESULT FireMacroReset();
    [id(17)] HRESULT GetDocumentFromDocCookie(LONG_PTR lDocCookie, [out, retval] Document **ppDoc);
    [id(18)] HRESULT IsMethodDisabled(const GUID *pGUID, long dispid);
    [id(19)] HRESULT SetSuppressUI(VARIANT_BOOL In);
    [id(20)] HRESULT GetSuppressUI(VARIANT_BOOL *pOut);
  };

  [ odl, uuid(e2cc506a-588b-4f65-a1f0-2244c060abcb), hidden, restricted ]
  interface IVsGlobalsCallback : IUnknown
  {
    HRESULT WriteVariablesToData([in] LPCOLESTR pVariableName, [in] VARIANT *varData);
    HRESULT ReadData([in] Globals *pGlobals);
    HRESULT ClearVariables();
    HRESULT VariableChanged();
    HRESULT CanModifySource();
	  HRESULT GetParent(IDispatch **ppOut);
  };

  [ odl, uuid(192ac688-e7c6-4f9d-8180-4b37efbf6f3a), hidden, restricted ]
  interface IVsGlobals : IUnknown
  {
    HRESULT Load();
    HRESULT Save();
    HRESULT Empty();
  };

  typedef [ uuid(d9e97957-b425-4cd6-bb74-9e6f232a342a), HELP(vsenumCommandStatusTextWanted) ]
  enum vsCommandStatusTextWanted 
  {
    vsCommandStatusTextWantedNone   = 0,
    vsCommandStatusTextWantedName   = 1,
    vsCommandStatusTextWantedStatus = 2,
  } vsCommandStatusTextWanted ;
  
  typedef [ uuid(e0ace2e3-49c1-4aa3-ac03-a2877a93d77f), HELP(vsenumCommandStatus) ]
  enum vsCommandStatus
  {
    vsCommandStatusUnsupported =  0,
    vsCommandStatusSupported   =  1,
    vsCommandStatusEnabled     =  2,
    vsCommandStatusLatched     =  4,
    vsCommandStatusNinched     =  8,
    vsCommandStatusInvisible   = 16
  } vsCommandStatus;
  
  typedef [ uuid(3c537e1a-39b8-4fda-9f22-93d8c030865d), HELP(vsenumCommandExecOption) ]
  enum vsCommandExecOption 
  {
    vsCommandExecOptionDoDefault    = 0,
    vsCommandExecOptionPromptUser   = 1,
    vsCommandExecOptionDoPromptUser = 2,
    vsCommandExecOptionShowHelp     = 3
  } vsCommandExecOption;
  
  [ odl, dual, oleautomation, object, local, uuid(7ef39a3e-590d-4879-88d4-c9be5bcfd92e), HELP(vsobjIDTCommandTarget) ]
  interface IDTCommandTarget : IDispatch
  {
		[id(1), HELP(vsobjIDTCommandTargetQueryStatus)]
    HRESULT QueryStatus([in] BSTR CmdName, [in] vsCommandStatusTextWanted NeededText, [in, out] vsCommandStatus *StatusOption, [in,out] VARIANT *CommandText);
    
		[id(2), HELP(vsobjIDTCommandTargetExec)]
		HRESULT Exec([in] BSTR CmdName, [in] vsCommandExecOption ExecuteOption, [in] VARIANT *VariantIn, [in,out] VARIANT *VariantOut, [in, out] VARIANT_BOOL *Handled);
  };

  [ odl, dual, oleautomation, object, uuid(d8dec44d-caf2-4b39-a539-b91ae921ba92), HELP(vsextUndoContextObject) ]
  interface UndoContext : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE ([out, retval] DTE **DTEObject);

    [id(2), propget, HELP(vsproParentProperty)] 
    HRESULT Parent([out, retval] DTE **DTEObject);

    [id(3), HELP(vsextUndoContextOpen)] 
    HRESULT Open([in] BSTR Name, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL Strict);

    [id(4), HELP(vsextUndoContextClose)]
    HRESULT Close();

    [id(5), HELP(vsextUndoContextSetAborted)]
    HRESULT SetAborted();

    [id(6), propget, HELP(vsextUndoContextIsStrict)]
    HRESULT IsStrict([out, retval] VARIANT_BOOL *pIsStrict);

    [id(7), propget, HELP(vsextUndoContextIsAborted)]
    HRESULT IsAborted([out, retval] VARIANT_BOOL *pIsAborted);

    [id(8), propget, HELP(vsextUndoContextIsOpen)]
    HRESULT IsOpen([out, retval] VARIANT_BOOL *pIsOpen);
  };


  [ odl, dual, oleautomation, object, uuid(509b9955-7303-48c9-90d4-e165b974e6ba), HELP(vsobjCommandWindowObject) ]
  interface CommandWindow : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE ([out, retval] DTE **DTEObject);

    [id(2), propget, HELP(vsproParentProperty)] 
    HRESULT Parent([out, retval] Window **pParent);

    [id(3), HELP(vsobjCmdWinSendInput)]
    HRESULT SendInput(BSTR Command, VARIANT_BOOL Execute);

    [id(4), HELP(vsobjCmdWinOutputStr)]
    HRESULT OutputString(BSTR Text);

    [id(5), HELP(vsobjCmdWinClear)]
    HRESULT Clear();

    [id(6), propget, HELP(vsobjCmdWinTxtDoc)]
    HRESULT TextDocument([out, retval] TextDocument **ppTextDocument);
  };

  typedef [ uuid(e0e643c3-5410-487a-b64e-2664a5c4ab50), HELP(vsenumDisplay)]
  enum vsDisplay
  {
    // vsDisplaySDI = 0,  //GOODBYE_SDI
    vsDisplayMDI = 1,
    vsDisplayMDITabs = 2
  } vsDisplay;

  [ uuid(3c9cfe1e-389f-4118-9fad-365385190329), HELP(vsobjDTEObject), appobject ]
  coclass DTE
  {
    [default] interface _DTE;
  };

  [ odl, dual, oleautomation, object, uuid(04a72314-32e9-48e2-9b87-a63603454f3e), HELP(vsobjDTEObject) ]
  interface _DTE : IDispatch
  {
    // Default (value) property/method
    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR *lpbstrReturn);

    // Standard properties & methods, this object type

    [id(10), propget, hidden]
    HRESULT FileName([out, retval] BSTR *lpbstrReturn);

    //[id(11), propget, hidden, restricted]
    //HRESULT Reserved0([out, retval] BSTR *lpbstrReturn);
    // HRESULT LastUsedPath([out, retval] BSTR *lpbstrReturn);

    //[id(11), propput, hidden, restricted]
    //HRESULT Reserved0([in] BSTR bstrNewPath);
    //HRESULT LastUsedPath([in] BSTR bstrNewPath);

    // Other properties & methods
    [id(100), propget, HELP(vsproVersionProperty)]
    HRESULT Version([out, retval] BSTR *lpbstrReturn);

    //[id(106), propget, hidden, restricted]
    //HRESULT Reserved1([out, retval] short * pReadOnlyMode);
    // HRESULT ReadOnlyMode([out, retval] short * pReadOnlyMode);

    //[id(106), propput, hidden, restricted]
    //HRESULT Reserved1([in] short ReadOnlyMode);
    // HRESULT ReadOnlyMode([in] short ReadOnlyMode);

    //[id(107), propget, hidden, restricted]
    //HRESULT Reserved2([out, retval] IDispatch**lppptReturn);
    // HRESULT VBProjects([out, retval] VBProjects **lppptReturn);

    [id(108), propget, HELP(vsproCommandBarsProperty)]
    HRESULT CommandBars([out, retval] CommandBars **ppcbs);    

    //[id(109), propget, hidden, restricted]
    //HRESULT Reserved7([out, retval] IDispatch **ppCodePanes);
    //HRESULT CodePanes([out, retval] IDispatch **ppCodePanes);

    [id(DISPID_WINDOWS), propget, HELP(vsproWindowsProperty)]
    HRESULT Windows( [out, retval] Windows **ppwnsVBWindows );  

    [id(111), propget, HELP(vsproEventsProperty)]
    HRESULT Events([out, retval] Events **ppevtEvents );     

    [id(200), propget, HELP(vsproAddInsProperty)]
    HRESULT AddIns([out, retval] AddIns **lpppAddIns);  //AddIns

    /*[id(201), propget, hidden, restricted]
    HRESULT Reserved3([out, retval] IDispatch **lppptReturn);*/
    //HRESULT ActiveVBProject([out, retval] VBProject **lppptReturn);

    /*[id(201), propputref, hidden, restricted]
      HRESULT Reserved3([in] IDispatch * lppptReturn);*/
    //HRESULT ActiveVBProject([in] VBProject * lppptReturn);

    /*[id(202), propget, hidden, restricted]
    HRESULT Reserved4([out, retval] IDispatch **lppscReturn);*/
    // HRESULT SelectedVBComponent([out, retval] VBComponent **lppscReturn);

    /*[id(203), propget,hidden,restricted]
    HRESULT Reserved5([out, retval] BSTR  * lpbstrPath);*/
    //HRESULT TemplatePath([out, retval] BSTR  * lpbstrPath);

    [id(204), propget, HELP(vsproMainWindowProperty)]
    HRESULT MainWindow([out, retval] Window **ppwin);  

    [id(205), propget, HELP(vsproActiveWindowProperty)]
    HRESULT ActiveWindow([out, retval] Window **ppwinActive );  

    /*[id(206), propget, hidden, restricted]
    HRESULT Reserved6([out, retval] IDispatch **ppCodePane); // CodePane - cut*/
    //HRESULT ActiveCodePane([out, retval] IDispatch **ppCodePane); // CodePane - cut

    /*[id(206), propputref, hidden, restricted]
    HRESULT Reserved6([in] IDispatch * ppCodePane);  //  CodePane - cut*/
    //HRESULT ActiveCodePane([in] IDispatch * ppCodePane);  //  CodePane - cut

    [id(207), HELP(vsextQuitMethod)]
    HRESULT Quit();

    [id(208), propget, HELP(vsproDisplayModeProperty)]
    HRESULT DisplayMode([out, retval] vsDisplay   *lpDispMode); 

    [id(208), propput, HELP(vsproDisplayModeProperty)]
    HRESULT DisplayMode([in] vsDisplay  DispMode); 

    //========================End Backward compatibility ================================

    [id(209), propget, HELP(vsproSolutionProperty)]
    HRESULT Solution([out, retval] Solution **ppSolution);

    [id(210), propget, HELP(vsproCommandsProperty)]
    HRESULT Commands([out, retval] Commands **ppCommands);

    [id(211), HELP(vsextGetObjectMethod)]
    HRESULT GetObject([in] BSTR Name, [out, retval] IDispatch **ppObject);

    [id(212), propget, HELP(vsproPropertiesPropDTEObj)]
    HRESULT Properties(BSTR Category, BSTR Page, [out, retval] Properties **ppObject);

    [id(213), propget, HELP(vsproSelectedItemsProperty)]
    HRESULT SelectedItems([out, retval] SelectedItems **ppSelectedItems);

    [id(214), propget, HELP(vsproCommandLineArgumentsProperty)]
    HRESULT CommandLineArguments([out, retval] BSTR  *lpbstrReturn);

    [id(215), HELP(vsextOpenFileMethod), hidden]
    HRESULT OpenFile([in] BSTR ViewKind, [in]BSTR FileName, [out, retval] Window **ppwin);

    [id(216), propget, HELP(vsextIsOpenFileMethod), hidden]
    HRESULT IsOpenFile([in] BSTR ViewKind, [in]BSTR FileName, [out, retval] VARIANT_BOOL  *lpfReturn);

    [id(217), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(218), propget, HELP(vsproLocaleIDProperty)]
    HRESULT LocaleID([out, retval] long   * lpReturn);

    [id(219), propget, HELP(vsobjWindowConfigurationsProperty)]
    HRESULT WindowConfigurations([out, retval] WindowConfigurations **WindowConfigurationsObject);

    [id(220), propget, HELP(vsobjDocumentsProperty)]
    HRESULT Documents([out, retval] Documents **ppDocuments);

    [id(221), propget, HELP(vsobjActiveDocumentProperty)]
    HRESULT ActiveDocument([out, retval] Document **ppDocument);

    [id(222), HELP(vsobjExecuteMethod)]
    HRESULT ExecuteCommand([in] BSTR CommandName, [in, defaultvalue("")] BSTR CommandArgs);

    [id(223), propget, HELP(vsobjGlobalsProperty)]
    HRESULT Globals([out, retval] Globals **ppGlobals);
 
    [id(225), propget, HELP(vsobjStatusBarProperty)]
    HRESULT StatusBar([out, retval] StatusBar **ppStatusBar);
 
    [id(226), propget, HELP(vsproFileNamePropDTEObj)]
    HRESULT FullName([out, retval] BSTR *lpbstrReturn);

    [id(227), propget, HELP(vsobjUserControlProperty)]
    HRESULT UserControl([out, retval] VARIANT_BOOL *UserControl);

    [id(227), propput, HELP(vsobjUserControlProperty)]
    HRESULT UserControl([in] VARIANT_BOOL HasControl);

    [id(228), propget, HELP(vsproObjectExtendersProperty)]
    HRESULT ObjectExtenders([out, retval] ObjectExtenders **ppObjectExtenders);

    [id(229), propget, HELP(vsproFindProperty)]
    HRESULT Find([out, retval] Find **ppFind);

    [id(230), propget, HELP(vsobjIDEMode)]
    HRESULT Mode([out, retval] vsIDEMode *pVal);

    /*[id(231), propget, HELP(vsobjVBE)]
    HRESULT VBE([out, retval] IDispatch **pVBE);*/

    [id(232), HELP(vsobjLaunchWizard)]
    HRESULT LaunchWizard([in] BSTR VSZFile, [in] SAFEARRAY(VARIANT)* ContextParams, [out, retval] wizardResult *pResult);

    [id(233), propget, HELP(vsproItemOperationsProperty)]
    HRESULT ItemOperations([out, retval] ItemOperations **ppItemOperations);

    [id(235), propget, HELP(vsextUndoContextProperty)]
    HRESULT UndoContext([out, retval] UndoContext **ppUndoContext);

    [id(236), propget, HELP(vsextMacrosProperty)]
    HRESULT Macros([out, retval] Macros **ppMacros);

    [id(237), propget, HELP(vsextActiveProjects)]
    HRESULT ActiveSolutionProjects([out, retval] VARIANT *pProjects);

    [id(238), propget, HELP(vsextMacrosIDE)]
    HRESULT MacrosIDE([out, retval] DTE **pDTE);

    [id(239), propget, HELP(vsextRegRoot)]
    HRESULT RegistryRoot([out, retval] BSTR *pVal);

    [id(240), hidden, propget]
    HRESULT Application([out, retval] DTE **pVal);

    [id(241), propget, HELP(vsextCtxAttrsDTE)]
    HRESULT ContextAttributes([out, retval] ContextAttributes **ppVal);

    [id(242), propget, HELP(vsSourceCodeControlProp)]
    HRESULT SourceControl([out, retval] SourceControl **ppVal);

    [id(243), propget, HELP(vsSuppressUIProp)]
    HRESULT SuppressUI([out, retval] VARIANT_BOOL *pVal);

    [id(243), propput, HELP(vsSuppressUIProp)]
    HRESULT SuppressUI([in] VARIANT_BOOL Suppress);

    [id(244), propget, HELP(vsDebuggerProp)]
    HRESULT Debugger([out, retval] Debugger **ppDebugger);

    [id(245), HELP(vsSatDllProp)]
    HRESULT SatelliteDLLPath (BSTR Path, BSTR Name, [out, retval] BSTR *pFullPath);

    [id(246), propget, /*HELP()*/]
    HRESULT Edition([out, retval] BSTR *ProductEdition);
  }

  [ odl, dual, oleautomation, object, uuid(f9f99155-6d4d-49b1-ad63-c78c3e8a5916), HELP(vsextMacrosObject) ]
  interface Macros : IDispatch
  {
    [propget, id(1), HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);
 
    [propget, id(2), HELP(vsproDTEProperty)] 
    HRESULT Parent([out, retval] DTE **pDTE);

    [id(3), propget, HELP(vsextMacrosIsRecordingProperty)]
    HRESULT IsRecording([out, retval] VARIANT_BOOL *vbIsRecording);

    [id(4), HELP(vsextMacrosEmitMacroCode)]
    HRESULT EmitMacroCode(BSTR Code);

    [id(5), HELP(vsextMacrosPause)]
    HRESULT Pause();

    [id(6), HELP(vsextMacrosResume)]
    HRESULT Resume();
  }

  typedef [uuid (AAE3FAE8-8AFC-11D2-ADEE-00C04F7971C3), HELP(vsenumSaveChanges) ]
  enum vsSaveChanges
  {
    vsSaveChangesYes    = 1,
    vsSaveChangesNo     = 2,
    vsSaveChangesPrompt = 3,
  } vsSaveChanges;

  typedef [ uuid(8901ff7a-e6e8-4154-a505-135ee434817e), HELP(vsenumSaveStatus) ]
  enum vsSaveStatus
  {
    vsSaveCancelled = 2,
    vsSaveSucceeded = 1
  } vsSaveStatus;

  [ odl, dual, oleautomation, object, uuid(9e2cf3ea-140f-413e-bd4b-7d46740cd2f4), HELP(vsobjDocumentsObject) ]
  interface Documents : IDispatch
  {
    [id(100), propget, HELP(vsproDTEProperty)]
    HRESULT DTE ([out, retval] DTE **DTEObject);
        
    [id(101), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **DTEObject);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **Enumerator);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] Document **DocumentObject);

    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long * CountOfDocuments);

    [id(4), HELP(vsobjDocsAddProperty), hidden]
    HRESULT Add([in] BSTR Kind, [out, retval] Document **ppDocument);

    [id(5), HELP(vsobjDocsCloseAll)]
    HRESULT CloseAll([in, defaultvalue(vsSaveChangesPrompt)] vsSaveChanges Save);

    [id(6), HELP(vsobjDocsSaveAll)]
    HRESULT SaveAll();

    [id(7), hidden]
    HRESULT Open(BSTR PathName, [defaultvalue("Auto")] BSTR Kind, [defaultvalue(VARIANT_FALSE)] VARIANT_BOOL ReadOnly, [out, retval] Document **ppDocument);
  }

  [ odl, dual, oleautomation, object, uuid(63eb5c39-ca8f-498e-9a66-6dd4a27ac95b), HELP(vsobjDocumentObject) ]
  interface Document : IDispatch
  {
    [id(100), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE ([out, retval] DTE **lppaReturn);

    [id(141), propget, HELP(vsproKindProperty)]
    HRESULT Kind([out, retval] BSTR *pKind);
        
    [id(101), propget, HELP(vsproParentProperty)] 
    HRESULT Collection([out, retval] Documents **DocumentsObject);

    [id(102), propget, HELP(vsproActiveWindowProperty)]
    HRESULT ActiveWindow([retval, out] Window **pWindow); 

    [id(103), propget, HELP(vsobjFullNameProperty)]
    HRESULT FullName([retval, out] BSTR *pRetval);

    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([retval, out] BSTR *pRetval);

    [id(105), propget, HELP(vsobjDocumentPathProperty)]
    HRESULT Path([retval, out] BSTR *pRetval);

    [id(106), propget, HELP(vsobjReadOnlyProperty)]
    HRESULT ReadOnly([retval, out] VARIANT_BOOL *pRetval);

    [id(107), propget, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([retval, out] VARIANT_BOOL *pRetval);

    [id(107), propput, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([in] VARIANT_BOOL bSaved);

    [id(109), propget, HELP(vsproDocumentWindowsProperty)]
    HRESULT Windows([retval, out] Windows **pWindows);

    [id(110), propget, HELP(vsproProjectItemProperty)]
    HRESULT ProjectItem([retval, out] ProjectItem **pRetVal);

    [id(121), HELP(vsextActivateMethod)]
    HRESULT Activate(void);

    [id(123), HELP(vsobjDocumentClose)]
    HRESULT Close([in, defaultvalue(vsSaveChangesPrompt)] vsSaveChanges Save);

    [id(125), HELP(vsobjDocumentNewWindow)]
    HRESULT NewWindow([out, retval] Window **pWindow);

    [id(127), HELP(vsobjRedoMethod)]
    HRESULT Redo([out, retval] VARIANT_BOOL *pbRetVal);

    [id(128), HELP(vsobjUndoMethod)]
    HRESULT Undo([out, retval] VARIANT_BOOL *pbRetVal);

    [id(129), HELP(vsobjSaveMethod)]
    HRESULT Save([in, defaultvalue("")] BSTR FileName, [out, retval] vsSaveStatus *pStatus);

    [id(131), propget, HELP(vsobjSelection)]
    HRESULT Selection([out, retval] IDispatch **SelectionObject);

    [id(132), HELP(vsextGetObjectMethod)]
    HRESULT Object([in, defaultvalue("")] BSTR ModelKind, [out, retval] IDispatch **DataModelObject);

    [id(133), propget, nonbrowsable, HELP(vsobjExtendersExtenderProperty)]
    HRESULT Extender([in] BSTR ExtenderName, [out, retval] IDispatch **Extender);

    [id(134), propget, nonbrowsable, HELP(vsobjExtendersExtenderNamesProperty)] 
    HRESULT ExtenderNames([out, retval] VARIANT *ExtenderNames);

    [id(135), propget, nonbrowsable, HELP(vsobjExtenderExtenderCATIDProperty)]
    HRESULT ExtenderCATID ([out, retval] BSTR *pRetval);

        // the following methods are present for compatibility with the vc6 Document and TextDocument objects

    [id(126), hidden, HELP(vsobjPrint)]
    HRESULT PrintOut(void);

    [id(142), propget, hidden, HELP(vsproIndentSizeProperty)]
    HRESULT IndentSize([out, retval] long *pSize);

    [id(144), propget, hidden, HELP(vsextLanguageNameProperty)]
    HRESULT Language([out, retval] BSTR *pLanguage);

    [id(144), propput, hidden, HELP(vsextLanguageNameProperty)]
    HRESULT Language([in] BSTR Language);

    [id(106), propput, hidden, HELP(vsobjReadOnlyProperty)]
    HRESULT ReadOnly([in] VARIANT_BOOL bReadOnly);

    [id(147), propget, hidden, HELP(vsproTabSizeProperty)]
    HRESULT TabSize([out, retval] long *pSize);

    [id(122), hidden, HELP(vsextClearBookmarksMethod)]
    HRESULT ClearBookmarks(void);

    [id(124), hidden, HELP(vsextMarkTextMethod)]
    HRESULT MarkText([in] BSTR Pattern, [in, defaultvalue(0)] long Flags, [out, retval] VARIANT_BOOL *pbRetVal);

    [id(21), hidden, HELP(vsextReplaceTextMethod)]
    HRESULT ReplaceText([in] BSTR FindText, [in] BSTR ReplaceText, [in, defaultvalue(0)] long Flags, [out, retval] VARIANT_BOOL *pbRetVal);

    [id(149), hidden, propget, HELP(vsproTypeProperty)]
    HRESULT Type([retval, out] BSTR *pType);
  };

  [ odl, dual, oleautomation, object, uuid(f1ddc2c2-df76-4ebb-9de8-48ad2557062c), HELP(vsobjDocumentObject) ]
  interface SourceControl : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE ( [out, retval] DTE ** ppDTEObject);

    [id(2), propget, HELP(vsproParentProperty)] 
    HRESULT Parent ( [out, retval] DTE ** ppDTEObject);

    [id(3), HELP(vsSCCIsItemUnderSCC)] 
    HRESULT IsItemUnderSCC ( [in] BSTR ItemName, [out, retval] VARIANT_BOOL *pfControlled);

    [id(4), HELP(vsSCCIsItemCheckedOut)] 
    HRESULT IsItemCheckedOut([in] BSTR ItemName, [out, retval] VARIANT_BOOL *pfCheckedOut);

    [id(5), HELP(vsSCCCheckOutItem)] 
    HRESULT CheckOutItem([in] BSTR ItemName, [out, retval] VARIANT_BOOL *pfCheckedOut);

    [id(6), HELP(vsSCCCheckOutItem)] 
    HRESULT CheckOutItems([in] SAFEARRAY(VARIANT)* ItemNames, [out, retval] VARIANT_BOOL *pfCheckedOut);

    [id(7)] 
    HRESULT ExcludeItem( [in] BSTR ProjectFile, [in] BSTR ItemName );

    [id(8)] 
    HRESULT ExcludeItems( [in] BSTR ProjectFile, [in] SAFEARRAY(VARIANT)* ItemNames);
  }

  cpp_quote("#define SID_SVsSourceControl IID_SourceControl")

  [ odl, dual, oleautomation, object, uuid(26f6cc4b-7a48-4e4d-8af5-9e960232e05f), HELP(vsobjSolutionObject) ]
  interface _Solution : IDispatch
  {
    // Default (value) property/method
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] Project **lppcReturn);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    // Required Properties, all objects
    [id(10), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(11), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    // Standard properties & methods, this object type
    [id(12), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    [id(13), propget, HELP(vsproFileNamePropSolutionObj), hidden]
    HRESULT FileName([out, retval] BSTR  *lpbstrReturn);

    [id(14), HELP(vsextSaveAsMthSolutionObj)]
    HRESULT SaveAs([in] BSTR FileName); 

    [id(15), HELP(vsextAddFromTemplateMthSolutionObj)]
    HRESULT AddFromTemplate([in] BSTR FileName, [in] BSTR Destination, [in] BSTR ProjectName, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL Exclusive, [out,retval] Project **IppptReturn);

    [id(16), HELP(vsextAddFromFileMthSolutionObj)]
    HRESULT AddFromFile([in] BSTR FileName, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL Exclusive, [out,retval] Project **IppptReturn);

    [id(17), HELP(vsextOpenMthSolutionObj)]
    HRESULT Open([in] BSTR FileName);

    [id(18), HELP(vsextCloseMthSolutionObj)]
    HRESULT Close([in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL SaveFirst);

    [id(19), propget, HELP(vsproPropertiesProperty)]
    HRESULT Properties([out, retval]  Properties **ppObject);

    /*[id(20), propget, hidden, restricted ]
    HRESULT Reserved1([out, retval] IDispatch **ppConfigurations);*/
    //HRESULT Configurations([out, retval] Configurations **ppConfigurations);

    [id(22), propget, hidden]
    HRESULT IsDirty([out, retval] VARIANT_BOOL  *lpfReturn);

    [id(22), propput, hidden]
    HRESULT IsDirty([in] VARIANT_BOOL fDirty);

    [id(25), HELP(vsextRemoveMthSolutionObj)]
    HRESULT Remove([in] Project *proj);

    [id(26), propget, HELP(vsproTemplatePathProperty)]
    HRESULT TemplatePath([in] BSTR ProjectType, [out, retval] BSTR  * lpbstrPath);  

    /*[id(27), hidden, restricted]
    HRESULT Reserved2();*/
    //HRESULT Build();

    [id(28), propget, HELP(vsproFileNamePropSolutionObj)]
    HRESULT FullName([out, retval] BSTR *lpbstrReturn);

    [id(29), propget, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([out, retval] VARIANT_BOOL  *lpfReturn);

    [id(29), propput, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([in] VARIANT_BOOL fDirty);

    //[id(30), propget, HELP(vsobjSolutionMiscFiles)]
    //HRESULT MiscFiles([out, retval] Project **ppMiscFilesProject);

    [id(31), propget, HELP(vsobjGlobalsProperty)]
    HRESULT Globals([out, retval] Globals **ppGlobals);

    [id(32), propget, HELP(vsproSlnAddInsProperty)]
    HRESULT AddIns([out, retval] AddIns **ppAddIns);

    [id(33), propget, nonbrowsable, HELP(vsobjExtendersExtenderProperty)]
    HRESULT Extender([in] BSTR ExtenderName, [out, retval] IDispatch **Extender);

    [id(34), propget, nonbrowsable, HELP(vsobjExtendersExtenderNamesProperty)]
    HRESULT ExtenderNames([out, retval] VARIANT *ExtenderNames);

    [id(35), propget, nonbrowsable, HELP(vsobjExtenderExtenderCATIDProperty)]
    HRESULT ExtenderCATID ([out, retval] BSTR *pRetval);

    [id(36), propget, HELP(vsproSlnIsOpen)]
    HRESULT IsOpen([out, retval] VARIANT_BOOL *pVal);

	  //[id(37), propget]
    //HRESULT SolutionFiles([out, retval] Project **ppSolutionFilesProject);


  	[id(38), propget, HELP(vsextSolutionBuildProperty) ]
	  HRESULT SolutionBuild([out, retval] SolutionBuild **ppSolutionBuild);

    /*[id(39), propget, HELP(vsextSourceControlProperty) ]
    HRESULT SourceControl([out, retval] SourceControl **ppSourceControl);*/

    [id(40), HELP(vsextSlnCreate)]
    HRESULT Create(BSTR Destination, BSTR Name);

    [id(41), propget, HELP(vsSlnProjectsProp)]
    HRESULT Projects([out, retval] Projects **ppProjects);
		
	[id(42), HELP(vsSlnProjectFindProjItem)]
    HRESULT FindProjectItem(BSTR FileName, [out, retval] ProjectItem **ppProjectItem);

	[id(43), HELP(vsSlnProjectItemsTemplatePath)]
    HRESULT ProjectItemsTemplatePath(BSTR ProjectKind, [out, retval] BSTR *pFullPath);
  }

  [ uuid(b35caa8c-77de-4ab3-8e5a-f038e3fc6056), HELP(vsobjSolutionObject) ]
  coclass Solution
  {
    [default] interface _Solution;
  }

  [ odl, dual, oleautomation, object, uuid(e3ec0add-31b3-461f-8303-8a5e6931257a), HELP(vsobjProjectObjColl) ]
  interface Projects : IDispatch
  {
    // Default (value) property/method
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] Project **lppcReturn);

    // Required Properties, all objects
    //[id(20), propget,hidden, restricted]
    // HRESULT VBEOBJ([out, retval] VBEOBJ **lppaReturn);
    //HRESULT Reserved1([out, retval] IDispatch **lppaReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    // Standard properties & methods, this object type
    [id(10), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    //Add - for VBProjects
    //[id(128), hidden, restricted]
    // HRESULT Add([in] vbext_ProjectType Type, [in, defaultvalue(0)] VARIANT_BOOL Exclusive, [out, retval] VBProject **lppcReturn);
    //HRESULT Reserved2([in] long Type, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL Exclusive, [out, retval] IDispatch **lppcReturn);

    //[id(129), hidden, restricted]
    // HRESULT AddFromTemplate([in] BSTR PathName,[in, defaultvalue(0)] VARIANT_BOOL Exclusive, [out, retval] VBNewProjects **lppcReturn);
    //HRESULT Reserved3([in] BSTR PathName, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL Exclusive, [out, retval] IDispatch **lppcReturn);

    //[id(130),hidden, restricted]
    //  HRESULT AddFromFile([in] BSTR PathName,[in, defaultvalue(0)] VARIANT_BOOL Exclusive,[out, retval] VBNewProjects **lppcReturn);
    //HRESULT Reserved4([in] BSTR PathName, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL Exclusive, [out, retval] IDispatch **lppcReturn);

    //Remove - for VBProjects
    //[id(131),hidden, restricted]
    //HRESULT Remove([in] VBProject  * lpc);
    //HRESULT Reserved5([in] IDispatch  * lpc);

    //StartProject - for VBProjects
    //[id(132), propget, hidden, restricted]
    // HRESULT StartProject([out, retval] VBProject **lppptReturn);
    //HRESULT Reserved6([out, retval] IDispatch **lppptReturn);

    //[id(132), propput, hidden, restricted]
    //HRESULT StartProject([in] VBProject * lpptNewActiveProj);
    //HRESULT Reserved6([in] IDispatch * lpptNewActiveProj);

    //FileName - for VBProjects
    //[id(133),hidden, restricted]
    // HRESULT FileName([out, retval] BSTR  *lpbstrReturn);
    //HRESULT Reserved7([out, retval] BSTR  *lpbstrReturn);

    //IconState - for VBProjects
    //[id(134), propget, hidden, restricted]
    //HRESULT IconState([out, retval] vbextSCCStatus  * lpIconState);
    //HRESULT Reserved8([out, retval] long  * lpIconState);

    //[id(134), propput, hidden, restricted]
    //HRESULT IconState([in]vbextSCCStatus IconState);
    //HRESULT Reserved8([in]long IconState);

    //[id(135), hidden, restricted]
    //HRESULT SaveAs([in] BSTR PathName);
    //HRESULT Reserved9([in] BSTR PathName);

    //========================End Backward compatibility ================================

    [id(200), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(201), propget, HELP(vsproPropertiesProperty)]
    HRESULT Properties([out, retval]  Properties **ppObject);

    [id(202), propget, HELP(vsproKindProperty)]
    HRESULT Kind([out, retval] BSTR  *lpbstrReturn);
  }

  /*[ odl, dual, oleautomation, object, uuid(c0325e48-02a7-4a60-89e7-96e8497942ba) ]
  interface UserContext : IDispatch
  {
  }*/


  [ odl, dual, oleautomation, object, uuid(866311e6-c887-4143-9833-645f5b93f6f1), HELP(vsobjProjectObjColl) ]
  interface Project : IDispatch
  {
    [id(DISPID_VALUE), propget, HELP(vsproNamePropProjectItemProjectObjs)]
    HRESULT Name([out, retval] BSTR  * lpbstrName);

    [id(DISPID_VALUE), propput, HELP(vsproNamePropProjectItemProjectObjs)]
    HRESULT Name([in] BSTR bstrName);

    //[id(105),hidden, restricted]
    // HRESULT AddToolboxProgID([in] BSTR ProgID, [in, optional] VARIANT FileName);
    //HRESULT Reserved1([in] BSTR ProgID, [in, optional] VARIANT FileName);

    [id(109), propget, HELP(vsproFileNamePropProjectObj), hidden]
    HRESULT FileName([out, retval] BSTR  *lpbstrReturn);

    [id(110), propget, HELP(vsproIsDirtyProperty), hidden]
    HRESULT IsDirty([out, retval] VARIANT_BOOL  *lpfReturn);

    [id(110), propput, HELP(vsproIsDirtyProperty), hidden]
    HRESULT IsDirty([in] VARIANT_BOOL Dirty);

    //[id(111),hidden, restricted]
    //HRESULT WriteProperty([in] BSTR Section, [in] BSTR Key, [in] BSTR Value);
    //HRESULT Reserved2([in] BSTR Section, [in] BSTR Key, [in] BSTR Value);

    //[id(112),hidden, restricted]
    // HRESULT ReadProperty([in] BSTR Section, [in] BSTR Key, [out, retval] BSTR  * lpbstrValue);
    //HRESULT Reserved3([in] BSTR Section, [in] BSTR Key, [out, retval] BSTR  * lpbstrValue);

    //[id(116), propget, hidden, restricted]
    // HRESULT HelpFile([out, retval] BSTR  * lpbstrHelpFile);
    //HRESULT Reserved4([out, retval] BSTR  * lpbstrHelpFile);

    //[id(116), propput, hidden, restricted]
    //HRESULT HelpFile([in] BSTR bstrHelpFile);
    //HRESULT Reserved4([in] BSTR bstrHelpFile);

    //[id(117), propget, hidden, restricted]
    // HRESULT HelpContextID([out, retval] long  * lpdwContextID);
    //HRESULT Reserved5([out, retval] long  * lpdwContextID);

    //[id(117), propput, hidden, restricted]
    //HRESULT HelpContextID([in] long dwContextID);
    //HRESULT Reserved5([in] long dwContextID);

    //[id(118), propget, hidden, restricted]
    // HRESULT Description([out, retval] BSTR  * lpbstrDescription);
    //HRESULT Reserved6([out, retval] BSTR  * lpbstrDescription);

    //[id(118), propput, hidden, restricted]
    //HRESULT Description([in] BSTR bstrDescription);
    //HRESULT Reserved6([in] BSTR bstrDescription);

    //References
    //[id(120), propget, hidden, restricted]
    // HRESULT References([out, retval] References **lppReferences);
    //HRESULT Reserved7([out, retval] IDispatch **lppReferences);

    //[id(122), propget, hidden, restricted]
    //HRESULT VBEOBJ([out, retval] VBEOBJ **lppaReturn);
    //HRESULT Reserved8([out, retval] IDispatch **lppaReturn);

    //Collection
    [id(123), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] Projects **lppaReturn);

    //[id(125), propget,hidden, restricted]
    // HRESULT StartMode([out, retval] vbext_ProjectStartMode  * lpStartMode);
    //HRESULT Reserved9([out, retval] long  * lpStartMode);

    //[id(125), propput,hidden, restricted]
    //HRESULT StartMode([in] vbext_ProjectStartMode StartMode);
    //HRESULT Reserved9([in] long StartMode);

    //CompatibleOleServer - for VBProject
    //[id(126), propget,hidden, restricted]
    //HRESULT CompatibleOleServer([out, retval] BSTR  * lpbstrCompatibleOleServer);
    //HRESULT Reserved10([out, retval] BSTR  * lpbstrCompatibleOleServer);

    //[id(126), propput,hidden, restricted]
    //HRESULT CompatibleOleServer([in] BSTR bstrCompatibleOleServer);
    //HRESULT Reserved10([in] BSTR bstrCompatibleOleServer);

    [id(127), HELP(vsextSaveAsMethod)]
    HRESULT SaveAs([in]BSTR NewFileName);

    //[id(128),hidden, restricted]
    // HRESULT MakeCompiledFile();
    //HRESULT Reserved11();

    //[id(129), propget,hidden, restricted]
    // HRESULT Type([out, retval] vbext_ProjectType  * lpkind);
    //HRESULT Reserved12([out, retval] long  * lpkind);

    //[id(129), propput,hidden, restricted]
    // HRESULT Type([in] vbext_ProjectType Type);
    //HRESULT Reserved12([in] long Type);

    //[id(130), propget,hidden, restricted]
    //HRESULT IconState([out, retval] vbextSCCStatus  * lpIconState);
    //HRESULT Reserved13([out, retval] long  * lpIconState);

    //[id(130), propput,hidden, restricted]
    //HRESULT IconState([in]vbextSCCStatus IconState);
    //HRESULT Reserved13([in]long IconState);

    //[id(133), propget,hidden, restricted]
    //HRESULT Reserved17([out, retval] VARIANT_BOOL  *lpfReturn);
    //HRESULT Saved([out, retval] VARIANT_BOOL  *lpfReturn);

    //[id(135), propget,hidden, restricted]
    //HRESULT VBComponents([out, retval] VBComponents **lppcReturn);
    //HRESULT Reserved15([out, retval] IDispatch **lppcReturn);

    //[id(136), propget,hidden, restricted]
    // HRESULT BuildFileName([out, retval] BSTR  * lpbstrBldFName);
    //HRESULT Reserved16([out, retval] BSTR  * lpbstrBldFName);

    //[id(136), propput,hidden, restricted]
    // HRESULT BuildFileName([in] BSTR bstrBldFName);
    //HRESULT Reserved16([in] BSTR bstrBldFName);

  //========================End Backward compatibility ================================
    [id(200), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(201), propget, HELP(vsproKindProperty)]
    HRESULT Kind([out, retval] BSTR  * lpbstrFileName);

    [id(202), propget, HELP(vsproProjectItemsProperty)]
    HRESULT ProjectItems([out, retval] ProjectItems **lppcReturn);

    [id(203), propget, HELP(vsproPropertiesProperty)]
    HRESULT Properties([out, retval]  Properties **ppObject);

    [id(204), propget, HELP(vsproUniqueNameProperty)]
    HRESULT UniqueName([out, retval]  BSTR  * lpbstrFileName);

    [id(205), propget, HELP(vsextGetObjectMethod)]
    HRESULT Object([out, retval] IDispatch **ProjectModel);

    [id(206), propget, nonbrowsable, HELP(vsobjExtendersExtenderProperty)]
    HRESULT Extender([in] BSTR ExtenderName, [out, retval] IDispatch **Extender);

    [id(207), propget, nonbrowsable, HELP(vsobjExtendersExtenderNamesProperty)] 
    HRESULT ExtenderNames([out, retval] VARIANT *ExtenderNames);

    [id(208), propget, nonbrowsable, HELP(vsobjExtenderExtenderCATIDProperty)]
    HRESULT ExtenderCATID ([out, retval] BSTR *pRetval);

    [id(209), propget, HELP(vsproFileNamePropProjectObj) ]
    HRESULT FullName([out, retval] BSTR *lpbstrReturn);

    [id(210), propget, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([out, retval] VARIANT_BOOL *lpfReturn);

    [id(210), propput, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([in] VARIANT_BOOL SavedFlag);

    /*[id(211), propget, HELP(vsextUserContextProperty) ]
    HRESULT UserContext([out, retval] UserContext **ppUserContext);*/

    /*[id(212), propget, HELP(vsextSourceControlProperty) ]
    HRESULT SourceControl([out, retval] SourceControl **ppSourceControl);*/

    [id(213), propget, HELP(vsextProjConfigMgrProperty)]
    HRESULT ConfigurationManager([out, retval] ConfigurationManager **ppConfigurationManager);

    [id(214), propget, HELP(vsobjGlobalsProperty)]
    HRESULT Globals([out, retval] Globals **ppGlobals);

    //TODO:
    //[id(209), propget]
    //HRESULT Configurations();

    [id(215), HELP(vsextProjSave)]
    HRESULT Save([defaultvalue("")] BSTR FileName);

    [id(216), propget, HELP(vsextProjParentProjItem)]
    HRESULT ParentProjectItem([out, retval] ProjectItem **ppParentProjectItem);

    [id(217), propget, HELP(vsextProjCodeModel)]
    HRESULT CodeModel([out, retval] CodeModel **ppCodeModel);

    [id(218), HELP(vsextProjDelete)]
    HRESULT Delete();
  };

  [ odl, dual, oleautomation, object, uuid(8e2f1269-185e-43c7-8899-950ad2769ccf), HELP(vsobjProjectItemObjColl) ]
  interface ProjectItems : IDispatch
  {
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] ProjectItem **lppcReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] IDispatch **lppptReturn);

    [id(10), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    //[id(11), restricted]
    // HRESULT Remove([in] VBComponent  * VBComponent);
    //HRESULT Reserved1([in] IDispatch  * VBComponent);

    //[id(12), restricted]
    //HRESULT Add([in] vbext_ComponentType ComponentType, [out, retval] VBComponent **lppComponent);
    //HRESULT Reserved2([in] long ComponentType, [out, retval] IDispatch **lppComponent);

    //[id(20), propget, hidden, restricted]
    // HRESULT VBEOBJ([out, retval] VBEOBJ **lppaReturn);
    //HRESULT Reserved3([out, retval] IDispatch **lppaReturn);

    //[id(21), propget, restricted]
    // HRESULT StartUpObject([out, retval] VARIANT  * lpVar);
    //HRESULT Reserved4([out, retval] VARIANT  * lpVar);

    //[id(21), propput, restricted]
    // HRESULT StartUpObject([in] VARIANT varInput);
    //HRESULT Reserved4([in] VARIANT varInput);

    //[id(22), restricted]
    // HRESULT AddFile([in] BSTR FileName, [in, defaultvalue(0)] VARIANT_BOOL RelatedDocuement, [out, retval] VBComponent **lppComponent);
    //HRESULT Reserved5([in] BSTR FileName, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL RelatedDocuement, [out, retval] IDispatch **lppComponent);

    //[id(23), restricted]
    //HRESULT AddFromTemplate([in] BSTR FileName, [out, retval] VBComponent **lppComponent);
    //HRESULT Reserved6([in] BSTR FileName, [out, retval] IDispatch **lppComponent);

    //[id(24), restricted]
    //HRESULT AddCustom([in] BSTR ProgID, [out, retval] VBComponent **lppComponent);
    //HRESULT Reserved7([in] BSTR ProgID, [out, retval] IDispatch **lppComponent);

    //========================End Backward compatibility ================================

    [id(200), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(201), propget, HELP(vsproKindProperty)]
    HRESULT Kind([out, retval] BSTR  * lpbstrFileName);

    [id(202), HELP(vsextAddFromFileMthProjectItemsColl)]
    HRESULT AddFromFile([in] BSTR FileName, [out, retval] ProjectItem **lppcReturn);

    [id(203), HELP(vsextAddFromTemplateMthProjectItemsColl)]
    HRESULT AddFromTemplate([in] BSTR FileName, [in] BSTR Name, [out, retval] ProjectItem **lppcReturn);

    [id(204), HELP(vsextAddFromDirectoryMethod)]
    HRESULT AddFromDirectory([in] BSTR Directory, [out, retval] ProjectItem **lppcReturn);

    [id(205), propget, HELP(vsextProjItmsContainPrj)]
    HRESULT ContainingProject([out, retval] Project **ppProject);

    [id(206), HELP(vsextProjItmsAddFolder)]
    HRESULT AddFolder(BSTR Name, [defaultvalue("{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}")] BSTR Kind, [out, retval] ProjectItem **pProjectItem);

    [id(207), HELP(vsextProjItmsAddFromFileCopy)]
    HRESULT AddFromFileCopy(BSTR FilePath, [out, retval] ProjectItem **pProjectItem);
  };

  [ odl, dual, oleautomation, object, uuid(0b48100a-473e-433c-ab8f-66b9739ab620), HELP(vsobjProjectItemObjColl) ]
  interface ProjectItem : IDispatch
  {
    [id(10), propget, HELP(vsproIsDirtyProperty), hidden]
    HRESULT IsDirty([out, retval] VARIANT_BOOL  *lpfReturn);

    [id(10), propput, HELP(vsproIsDirtyProperty), hidden]
    HRESULT IsDirty([in] VARIANT_BOOL DirtyFlag);

    [id(11), propget, HELP(vsproFileNamesProperty)]
    HRESULT FileNames([in] short Index, [out, retval] BSTR  *lpbstrReturn);

    [id(12), HELP(vsextSaveAsMethod)]
    HRESULT SaveAs([in] BSTR NewFileName, [out, retval] VARIANT_BOOL  * lpfReturn);

    [id(13), propget, HELP(vsproFileCountProperty)]
    HRESULT FileCount([out, retval] short  * lpsReturn);

    //[id(14), propget, restricted, hidden]
    //HRESULT IconState([out, retval] long  *lpulReturn);
    //HRESULT Reserved1([out, retval] long  *lpulReturn);

    //[id(14), propput, restricted, hidden]
    //HRESULT IconState([in] long Value);
    //HRESULT Reserved1([in] long Value);

    //[id(46), restricted, hidden]
      // HRESULT InsertFile([in] BSTR FileName);
    //HRESULT Reserved2([in] BSTR FileName);

    //[id(47),restricted, hidden]
    //HRESULT Reload();
    //HRESULT Reserved3();

    [id(DISPID_VALUE), propget, HELP(vsproNamePropProjectItemProjectObjs)]
    HRESULT Name([out, retval] BSTR * pbstrReturn);

    [id(DISPID_VALUE), propput, HELP(vsproNamePropProjectItemProjectObjs)]
    HRESULT Name([in] BSTR bstrName);
    
    //[id(49), propget, hidden, restricted]
    //HRESULT Reserved14([out, retval] IDispatch **ppDispatch);
    // HRESULT Designer([out, retval] IDispatch **ppDispatch);

    //[id(50), propget,hidden, restricted]
    //HRESULT Reserved4([out, retval] IDispatch **ppVbaModule);
    // HRESULT TextBuffer([out, retval] TextBuffer **ppTextBuffer);
    // HRESULT Reserved4([out, retval] IDispatch **ppVbaModule);

    //[id(51), propget, restricted,hidden]
    //HRESULT Reserved5([out, retval] long * pkind);

    //[id(53), propget, restricted,hidden]
    //HRESULT Reserved6([out, retval] IDispatch **lppaReturn);

    [id(54), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] ProjectItems **lppcReturn);

    //[id(55), propget, restricted, hidden]
    //HRESULT Reserved15([out, retval] VARIANT_BOOL  *lpfReturn);
    //HRESULT HasOpenDesigner([out, retval] VARIANT_BOOL  *lpfReturn);

    [id(56), propget, HELP(vsproPropertiesProperty)]
    HRESULT Properties([out, retval]  Properties **ppObject);

    //[id(57), restricted,hidden]
    // HRESULT DesignerWindow([out, retval] Window **lppcReturn);
    //HRESULT Reserved7([out, retval] IDispatch **lppcReturn);

    //[id (58), restricted,hidden]
    //HRESULT ReadProperty([in] BSTR Key, [out, retval] BSTR  * lpbstrValue);
    //HRESULT Reserved8([in] BSTR Key, [out, retval] BSTR  * lpbstrValue);

    //[id(59), restricted,hidden]
    //HRESULT WriteProperty([in] BSTR Key, [in] BSTR Value);
    //HRESULT Reserved9([in] BSTR Key, [in] BSTR Value);

    //[id(60), restricted,hidden]
    // HRESULT Activate();
    //HRESULT Reserved10();

    //[id(61), propget, restricted,hidden]
    //HRESULT HelpContextID([out, retval] long  * lpdwContextID);
    //HRESULT Reserved11([out, retval] long  * lpdwContextID);

    //[id(61), propput, restricted,hidden]
    //HRESULT HelpContextID([in] long dwContextID);
    //HRESULT Reserved11([in] long dwContextID);

    //[id(62), propget, restricted,hidden]
    //HRESULT Description([out, retval] BSTR  * lpbstrDescription);
    //HRESULT Reserved12([out, retval] BSTR  * lpbstrDescription);
    
    //[id(62), propput, restricted,hidden]
    //HRESULT Description([in] BSTR bstrDescription);
    //HRESULT Reserved12([in] BSTR bstrDescription);

    //[id(63), propget, restricted,hidden]
    //HRESULT DesignerID([out, retval] BSTR * pbstrReturn);
    //HRESULT Reserved13([out, retval] BSTR * pbstrReturn);

  //========================End Backward compatibility ================================

    [id(200), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(201), propget, HELP(vsproKindProperty)]
    HRESULT Kind([out, retval] BSTR  * lpbstrFileName);

    [id(203), propget, HELP(vsproProjectItemsProperty)]
    HRESULT ProjectItems([out, retval] ProjectItems **lppcReturn);

    [id(204), propget, HELP(vsproIsOpenProperty)]
    HRESULT IsOpen([in, defaultvalue("{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}")] BSTR ViewKind, [out, retval] VARIANT_BOOL  *lpfReturn);

    [id(205), HELP(vsextOpenMthProjectItemObj)]
    HRESULT Open([in, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR ViewKind, [out, retval] Window **lppfReturn);

    [id(206), HELP(vsextRemoveMth)]
    HRESULT Remove();

    [id(107), HELP(vsextExpandViewMethod)]
    HRESULT ExpandView();

    [id(108), propget, HELP(vsextGetObjectMethod)]
    HRESULT Object([out, retval] IDispatch **ProjectItemModel);

    [id(109), propget, nonbrowsable, HELP(vsobjExtendersExtenderProperty)]
    HRESULT Extender([in] BSTR ExtenderName, [out, retval] IDispatch **Extender);

    [id(110), propget, nonbrowsable, HELP(vsobjExtendersExtenderNamesProperty)] 
    HRESULT ExtenderNames([out, retval] VARIANT *ExtenderNames);

    [id(111), propget, nonbrowsable, HELP(vsobjExtenderExtenderCATIDProperty)]
    HRESULT ExtenderCATID ([out, retval] BSTR *pRetval);

    [id(113), propget, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([out, retval] VARIANT_BOOL *lpfReturn);

    [id(113), propput, HELP(vsproIsDirtyProperty)]
    HRESULT Saved([in] VARIANT_BOOL SavedFlag);

    /*[id(114), propget, HELP(vsextUserContextProperty) ]
    HRESULT UserContext([out, retval] UserContext **ppUserContext);*/

    /*[id(115), propget, HELP(vsextSourceControlProperty) ]
    HRESULT SourceControl([out, retval] SourceControl **ppSourceControl);*/

    [id(116), propget, HELP(vsextProjConfigMgrProperty) ]
    HRESULT ConfigurationManager([out, retval] ConfigurationManager **ppConfigurationManager);

    [id(117), propget, HELP(vsextProjItemCodeModelProperty) ]
    HRESULT FileCodeModel([out, retval] FileCodeModel **ppFileCodeModel);

    //TODO:
    //[id(112), propget]
    //HRESULT Configurations();

    [id(118), HELP(vsextProjItmSave)]
    HRESULT Save([defaultvalue("")] BSTR FileName);

    [id(119), propget, HELP(vsextProjItmDoc)]
    HRESULT Document([out, retval] Document **ppDocument);

    [id(120), propget, HELP(vsextProjItmSubProj)]
    HRESULT SubProject([out, retval] Project **ppProject);

    [id(121), propget, HELP(vsextProjItmContainPrj)]
    HRESULT ContainingProject([out, retval] Project **ppProject);

    [id(122), HELP(vsextProjItmDelete)]
    HRESULT Delete();
  };

  [ odl, dual, oleautomation, object, uuid(f47dc7e7-84b6-474f-bb91-631640aa0560), HELP(vsobjTextBufferObject), hidden ]
  interface TextBuffer : IDispatch
  {
    [propget, HELP(vsproParentProperty)] 
    HRESULT Parent([out, retval] Window **retval);

    [propget, HELP(vsproDTEProperty)] 
    HRESULT DTE ([out, retval] DTE **lppaReturn);
    
    // name
    //[propget, id(0), hidden, restricted] 
    //HRESULT Reserved1([out, retval] BSTR *pbstrName);
    
    //[propput, id(0), hidden, restricted] 
    //HRESULT Reserved1([in] BSTR bstrName);
         
    // AddFromString
    [id(1), HELP(vsextAddFromStringMethod)] 
    HRESULT AddFromString([in] BSTR String, [in, defaultvalue(1)] long StartLine);

    // AddFromFile
    [id(2),HELP(vsextAddFromFileMthTextBufferObj)] 
    HRESULT AddFromFile([in] BSTR FileName, [in, defaultvalue(1)] long StartLine);    

    // Line
    [id(3), propget, HELP(vsproLinesProperty)] 
    HRESULT Lines([in] long StartLine, [in] long Count, [out, retval] BSTR *String);

    // CountOfLines
    [id(4), propget, HELP(vsproCountOfLinesProperty)] 
    HRESULT CountOfLines([out, retval] long *CountOfLines);

    //InsertLine
    //[id(5)] HRESULT InsertLines([in] long Line, [in] BSTR String);    

    [id(6), HELP(vsextDeleteLinesMethod)] 
    HRESULT DeleteLines([in] long StartLine, [in, defaultvalue(1)] long Count);

    //ReplaceLine
    //[id(7)] HRESULT ReplaceLine([in] long Line, [in] BSTR String); 

    //ProcStartLine HRESULT ProcStartLine([in] BSTR ProcName, [in] vbext_ProcKind ProcKind, [out, retval] long *ProcStartLine);
    //[id(8), propget,hidden, restricted] 
    //HRESULT Reserved4([in] BSTR ProcName, [in] long ProcKind, [out, retval] long *ProcStartLine);

    //ProcCountLines  HRESULT ProcCountLines([in] BSTR ProcName, [in] vbext_ProcKind ProcKind, [out, retval] long *ProcCountLines);
    //[id(9), propget,hidden, restricted] 
    //HRESULT Reserved5([in] BSTR ProcName, [in] long ProcKind, [out, retval] long *ProcCountLines);

    //ProcBodyLine HRESULT ProcBodyLine([in] BSTR ProcName, [in] vbext_ProcKind ProcKind, [out, retval] long *ProcBodyLine);
    //[id(10), propget, hidden, restricted] 
    //HRESULT Reserved6([in] BSTR ProcName, [in] long ProcKind, [out, retval] long *ProcBodyLine);

    //ProcOfLine HRESULT ProcOfLine([in] long line, [out] vbext_ProcKind *ProcKind, [out, retval] BSTR *pbstrName);
    //[id(11), propget, hidden, restricted] 
    //HRESULT Reserved7([in] long line, [out] long *ProcKind, [out, retval] BSTR *pbstrName);

    //DeclCountOfLines HRESULT CountOfDeclarationLines([out, retval] LONG *pDeclCountOfLines);
    //[id(12), propget, hidden, restricted] 
    //HRESULT Reserved8([out, retval] LONG *pDeclCountOfLines);
   
    //CreateEventProc HRESULT CreateEventProc([in] BSTR EventName, [in] BSTR ObjectName, [out, retval] long *line); 
    //[id(13), hidden, restricted] 
    //HRESULT Reserved9([in] BSTR EventName, [in] BSTR ObjectName, [out, retval] long *line); 

    //Search
    [id(14), HELP(vsextFindMethod)]
    HRESULT Find( [in] BSTR Target, [in, out] long *StartLine, [in, out] long *StartColumn, [in, out] long *EndLine, [in, out] long *EndColumn, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL WholeWord, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL MatchCase, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL PatternSearch, [out,retval] VARIANT_BOOL *pfFound);

    //GetCodePane HRESULT CodePane([out, retval] CodePane **CodePane); 
    //[id(15), propget, hidden, restricted] 
    //HRESULT Reserved10([out, retval] IDispatch **CodePane); 

    //GetMembers HRESULT Members([retval ,out] Members **Members); 
    //[id(16), propget, hidden, restricted] 
    //HRESULT Reserved11([retval ,out] IDispatch **Members); 

    //========================End Backward compatibility ================================
    //NOTE: Backward compatibility in this interface is not an issue
  };

  [ odl, dual, oleautomation, object, uuid(e6b96cac-b8c7-40ae-b705-5c81878c4a9e), HELP(vsobjCommandsObject) ]
  interface Commands : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    //Others
    [id(3), HELP(vsextAddMethCommandsObject), hidden]
    HRESULT Add([in] BSTR Guid, [in] long ID, [in] VARIANT *Control);

    [id(4), HELP(vsextRaiseMethod)]
    HRESULT Raise([in] BSTR Guid, [in] long ID, [in,out] VARIANT *CustomIn, [in,out] VARIANT *CustomOut);
    
    [id(5), HELP(vsproCommandInfoProperty)]
    HRESULT CommandInfo( [in] IDispatch  *CommandBarControl, [out] BSTR *Guid, [out] long *ID);

    [id(10), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [in, defaultvalue(-1)] long ID, [out, retval] Command **lppcReturn);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(11), HELP(vsobjAddNamedCommand)]
    HRESULT AddNamedCommand([in] AddIn *AddInInstance, [in] BSTR Name, [in] BSTR ButtonText, [in] BSTR Tooltip, [in] VARIANT_BOOL MSOButton, [in, defaultvalue(0)] long Bitmap, [in, optional] SAFEARRAY(VARIANT)* ContextUIGUIDs, [in, defaultvalue(vsCommandDisabledFlagsGrey)] long vsCommandDisabledFlagsValue, [out, retval] Command **pVal);
    
    [id(12), HELP(vsobjAddCommandBar)]
    HRESULT AddCommandBar([in] BSTR Name, [in] vsCommandBarType Type, [in, defaultvalue(0)] CommandBar *CommandBarParent, [in, defaultvalue(1)] long Position, [out, retval] IDispatch**pVal);
    
    [id(13), HELP(vsobjRemoveCommandBar)]
    HRESULT RemoveCommandBar([in] CommandBar *CommandBar);
  }

  [ odl, dual, oleautomation, object, uuid(5fe10fb0-91a1-4e55-baaa-eccae5cceb94), HELP(vsobjCommandObject) ]
  interface Command : IDispatch
  {
    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR *lpbstr);
    
    [id(2), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] Commands **lppcReturn);

    [id(3), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(4), propget, HELP(vsobjCommandGUID)]
    HRESULT GUID([out, retval] BSTR *lpbstr);

    [id(5), propget, HELP(vsobjCommandID)]
    HRESULT ID([out, retval] long *lReturn);

    [id(6), propget, HELP(vsobjCommandAvailable)]
    HRESULT IsAvailable([out, retval] VARIANT_BOOL *pAvail);

    [id(7), HELP(vsobjCommandAddControl)]
    HRESULT AddControl ([in] IDispatch *Owner, [in, defaultvalue(1)] long Position, [out, retval] CommandBarControl **pCommandBarControl);

    [id(8), HELP(vsobjCommandRemove)]
    HRESULT Delete();

    [id(9), propget, HELP(vsextCmdBindings)]
    HRESULT Bindings([out, retval] VARIANT *pVar);

    [id(9), propput, HELP(vsextCmdBindings)]
    HRESULT Bindings(VARIANT Bindings);

	[id(1), propget]
    HRESULT LocalizedName([out, retval] BSTR *lpbstr);
  }


  // The collections of addins
  [ odl, dual, oleautomation, object, uuid(50590801-d13e-4404-80c2-5ca30a4d0ee8), HELP(vsobjAddinObjColl)]
  interface AddIns : IDispatch
  {
    // Default (value) property/method
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] AddIn **lppaddin);

    //[id(1), propget, hidden, restricted] 
    // HRESULT VBEOBJ([out, retval] VBEOBJ **lppVBA);
    //HRESULT Reserved1([out, retval] IDispatch **lppVBA);

    // Parent
    [id(2), propget, HELP(vsproParentProperty)] 
    //HRESULT Parent([out, retval] VBEOBJ **lppVBA);
    HRESULT Parent([out, retval] IDispatch **lppaReturn);

    // Count
    [propget, id(40), HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    // _NewEnum
    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    // Update
    [id(41), HELP(vsextUpdateMethod)]
    HRESULT Update();

    //========================End Backward compatibility ================================

    [id(100), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **lppaReturn);

    //[id(101), hidden, restricted] 
    //HRESULT Reserved2([in] BSTR bstr, [out, retval] AddIn **lppaddin);

    [id(102), HELP(vsobjAddinsAdd)]
    HRESULT Add(BSTR ProgID, BSTR Description, BSTR Name, VARIANT_BOOL Connected, [out, retval] AddIn **);
  }

  // The AddIn Object
  [ odl, dual, oleautomation, object, uuid(53a87fa1-ce93-48bf-958b-c6da793c5028), HELP(vsobjAddinObjColl)]
  interface AddIn : IDispatch
  {
    // Default (value) 
    [id(DISPID_VALUE), propget, HELP(vsproDescriptionProperty)]
    HRESULT Description([out, retval] BSTR  * lpbstr);

    [id(DISPID_VALUE), propput, HELP(vsproDescriptionProperty)]
    HRESULT Description([in] BSTR bstr);

    //[id(1), propget, hidden, restricted] // HRESULT VBEOBJ([out, retval] VBEOBJ **lppVBE);
    //HRESULT Reserved([out, retval] IDispatch **lppVBE);

    [id(2), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] AddIns  **lppaddins);

    [propget, id(3), HELP(vsproProgIDProperty)]
    HRESULT ProgID([out, retval] BSTR  * lpbstr);

    [propget, id(4), HELP(vsproGUIDProperty)]
    HRESULT Guid([out, retval] BSTR  * lpbstr);

    [propget, id(6), HELP(vsproConnectedProperty)]
    HRESULT Connected([out, retval] VARIANT_BOOL  * lpfConnect);

    [propput, id(6), HELP(vsproConnectedProperty)]
    HRESULT Connected([in] VARIANT_BOOL fConnect);

    [propget, id(7), HELP(vsproObjectPropertyAddIn)]
    HRESULT Object([out, retval] IDispatch **lppdisp);

    [propput, id(7), HELP(vsproObjectPropertyAddIn)]
    HRESULT Object([in] IDispatch  * _lpdispObject);

    //========================End Backward compatibility ================================
    [id(301), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(302), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR  * lpbstr);

    [id(303), HELP(vsobjAddinRemove)]
    HRESULT Remove();

    [id(304), HELP(vsSatDllProp), propget]
    HRESULT SatelliteDllPath([out, retval] BSTR *pbstrPath);
  }

  [ odl, oleautomation, uuid(6659ed14-2ab6-47f3-a890-00c8aba43b84), hidden ]
  interface ISupportVSProperties : IUnknown
  {
    HRESULT NotifyPropertiesDelete();
  }


  [ odl, dual, oleautomation, object, uuid(7b988e06-2581-485e-9322-04881e0600d0), HELP(vsobjPropertyObjColl) ]
  interface Property : IDispatch
  {
    // Default (value) property/method
    [id(DISPID_VALUE), propget, HELP(vsproValueProperty)]
    HRESULT Value([out, retval] VARIANT  *lppvReturn);

    [id(DISPID_VALUE), propput, HELP(vsproValueProperty)]
    HRESULT Value([in] VARIANT NewValue);

    // UNDONE - HACK, npchow - Need set property.  Workaround for tlbimp bug #20064.
    [id(DISPID_VALUE), propputref, HELP(vsproValueProperty)]
    HRESULT Value([in] VARIANT NewValue);

    [id(3), propget, HELP(vsproIndexedValueProperty)]
    HRESULT IndexedValue([in] VARIANT Index1, [in, optional] VARIANT Index2, [in, optional] VARIANT Index3, [in, optional] VARIANT Index4, [out, retval] VARIANT  *Val);
    
    [id(3), propput, HELP(vsproIndexedValueProperty)]
    HRESULT IndexedValue([in] VARIANT Index1, [in, optional] VARIANT Index2, [in, optional] VARIANT Index3, [in, optional] VARIANT Index4, [in] VARIANT NewValue);

    [id(4), propget, HELP(vsproNumIndicesProperty)]
    HRESULT NumIndices([out, retval] short  * lpiRetVal);

    // Required properties, all objects
    [id(1), propget, hidden, restricted]
    HRESULT Application([out, retval] IDispatch **lppidReturn);

    [id(2), propget, hidden, restricted]
    HRESULT Parent([out, retval] Properties **lpppReturn);

    //Properties
    [propget, id(40), HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR  * lpbstrReturn);

    // VB5 additions
    //[propget, id(41), hidden, restricted]  
    // HRESULT VBEOBJ([out, retval] VBEOBJ **lppVBE);
    //HRESULT Reserved([out, retval] IDispatch **lppVBE);


    [propget, id(42), HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] Properties **lpppReturn);


    [propget, id(45), HELP(vsproObjectPropertyProp)]
    HRESULT Object([out, retval] IDispatch **lppunk);

    [propputref, id(45), HELP(vsproObjectPropertyProp)]
    HRESULT Object([in] IUnknown  * lpunk);

  //========================End Backward compatibility ================================

    [id(100), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);
  }

  [ odl, dual, oleautomation, object, uuid(4cc8ccf5-a926-4646-b17f-b4940caed472), HELP(vsobjPropertyObjColl) ]
  interface Properties : IDispatch
  {
    // Default (value) property/method
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] Property **lplppReturn);

    // Required properties, all objects
    [id(1), propget, hidden, restricted]
    HRESULT Application([out, retval] IDispatch **lppidReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] IDispatch **lppidReturn);

    //Properties
    [propget, id(40), HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    //Methods
    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    //VBE
    //[id(10), propget, hidden, restricted] // HRESULT VBEOBJ([out, retval] VBEOBJ **lppVBE);
    //HRESULT Reserved([out, retval] IDispatch **lppVBE);


    //========================End Backward compatibility ================================

    [id(100), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);
  }

  [ odl, dual, oleautomation, object, uuid(6caa67cf-43ae-4184-aaab-0200ddf6b240), HELP(vsobjSelectedItemObjColl)] 
  interface SelectedItems : IDispatch
  {
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] SelectedItem **lplppReturn);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(1),propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    [id(3), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(4), propget, HELP(vsproMultiSelectProperty)] 
    HRESULT MultiSelect([out, retval] VARIANT_BOOL * pfMultiSelect);

    [id(5), propget, HELP(vsproSelectionContainerProperty)] 
    HRESULT SelectionContainer([out, retval] SelectionContainer **lppdispSelContainer);
  }

  [ odl, dual, oleautomation, object, uuid(049d2cdf-3731-4cb6-a233-be97bce922d3), HELP(vsobjSelectedItemObjColl)]
  interface SelectedItem : IDispatch
  {
    [id(1), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] SelectedItems **lppReturn);

    [id(2), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **lppReturn);

    [id(3), propget, HELP(vsproProjectProperty)] 
    HRESULT Project([out, retval] Project **lppReturn);

    [id(4), propget, HELP(vsproProjectItemPropSelItem)] 
    HRESULT ProjectItem([out, retval] ProjectItem **lppReturn);

    /*[id(5), propget, hidden] // Reserved for future use 
    HRESULT MultiProjItems([out, retval] VARIANT_BOOL * fMultiProjItems);

    [id(6), propget, hidden]  // Reserved for future use 
    HRESULT AssocatedProjectItems([out, retval] IDispatch **lppReturn);*/

    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR  * lpbstrReturn);

    [id(8), hidden, restricted, propget, HELP(vsproInfoCountProperty)]
    HRESULT InfoCount([out, retval] short  * lpnCount);

    [id(9), hidden, restricted, propget, HELP(vsproInfoProperty)]
    HRESULT Info([in] short Index, [out, retval] VARIANT  * lpbstrReturn);
  }

  [ odl, dual, oleautomation, object, uuid(02273422-8dd4-4a9f-8a8b-d70443d510f4), HELP(vsobjSelectionContainerObject)]
  interface  SelectionContainer: IDispatch
  {
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] IDispatch **lplppReturn);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(1),propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long  * lplReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] SelectedItems **lppReturn);

    [id(3), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **lppReturn);
  }

  [ uuid(c6304bab-6765-4c63-9017-4940aeb6f207), HELP(vsobjDTEEventsObject) ]
  coclass DTEEvents
  {
    [default] interface _DTEEvents;
    [default, source] dispinterface _dispDTEEvents;
  };

  [ uuid(b50c9708-c909-4b87-a03d-af6cc4bfb422), HELP(vsobjDTEEventsObject) ]
  dispinterface _dispDTEEvents
  {
    properties:
    methods:
      [id(1), HELP(vsextDTEStartupCompleteEvent) ] 
      void OnStartupComplete();

      [id(2), HELP(vsextDTEShutdownEvent) ] 
      void OnBeginShutdown();

      [id(3), HELP(vsextDTEModeChangedEvent) ] 
      void ModeChanged([in] vsIDEMode LastMode);

			[id(4), HELP(vsextDTEMacrosRuntimeResetEvent) ]
			void OnMacrosRuntimeReset();
  };


  [ uuid (FA1BB6D7-CA83-11D2-AAB2-00C04F688DDE), oleautomation, odl, HELP(vsobjDTEEventsObject) ]
  interface _DTEEvents : IDispatch 
  {
  };

  [ uuid(22800963-2811-410d-bf87-a7808eac977d), dual, object, HELP(vsobjProjectItemsEventsObject) ]
  interface _ProjectItemsEvents : IDispatch
  {
  };

  [ uuid(6962753f-efd5-41c5-b083-d70687166aeb), HELP(vsobjProjectItemsEventsObject) ]
  dispinterface _dispProjectItemsEvents
  {
  properties:
  methods: // Events
    [id(1), HELP(vsobjProjectItemsEventsItemAdded) ] 
		void ItemAdded( [in] ProjectItem *ProjectItem );

    [id(2), HELP(vsobjProjectItemsEventsItemRemoved) ] 
		void ItemRemoved( [in] ProjectItem *ProjectItem );

    [id(3), HELP(vsobjProjectItemsEventsItemRenamed) ] 
		void ItemRenamed( [in] ProjectItem *ProjectItem , [in] BSTR OldName);

    // [id(4)]    void ItemActivated( [in] VBProject *VBProject );
  };

  [ uuid(de6c1098-93ca-4f49-bef0-262a13ca1176), HELP(vsobjProjectItemsEventsObject) ]
  coclass ProjectItemsEvents
  {
    [default] interface _ProjectItemsEvents;
    [default, source] dispinterface _dispProjectItemsEvents;
  };

  [ uuid(85451f83-b5ca-437f-a619-0cb705707420), dual, object, HELP(vsobjProjectsEventsObject) ]
  interface _ProjectsEvents : IDispatch
  {
  };

  [ uuid(7f508d55-627f-4d7f-be0b-9e3d829ff0ed), HELP(vsobjProjectsEventsObject) ]
  dispinterface _dispProjectsEvents
  {
  properties:
  methods: // Events
    [id(1), HELP(vsobjProjectsEventsItemAdded) ]   
		void ItemAdded( [in] Project *Project );
    
		[id(2), HELP(vsobjProjectsEventsItemRemoved) ]   
		void ItemRemoved( [in] Project *Project );
    
		[id(3), HELP(vsobjProjectsEventsItemRenamed) ]
		void ItemRenamed( [in] Project *Project , [in] BSTR OldName);
  };

  [ uuid(536a4be3-a376-408e-954c-471c779e216f), HELP(vsobjProjectsEventsObject) ]
  coclass ProjectsEvents
  {
    [default] interface _ProjectsEvents;
    [default, source] dispinterface _dispProjectsEvents;
  };

  [ uuid (7658B944-F37B-11D2-AACF-00C04F688DDE), dual, object, hidden ]
  interface _MiscSlnFilesEventsRoot : IDispatch
  {
    [id(1), propget]
    HRESULT SolutionItemsEvents([out, retval] IDispatch **ppeNew);

    [id(2), propget]
    HRESULT MiscFilesEvents([out, retval] IDispatch **ppeNew);
  };

  [ uuid (134170F8-93B1-42dd-9F89-A2AC7010BA07), odl, dual, HELP(vsobjEventsObject)]
  interface Events : IDispatch 
  {
	//NOTE: If you declare any event objects that take a default, NULL IDispatch as a param, see msodep\ideevnt.cpp CVBEvents::Invoke


    //[id(200), propget, hidden]
    //HRESULT VBProjectsEvents( [out, retval] VBProjectsEvents **ppceNew );
    //HRESULT Reserved1([out, retval] IUnknown **ppceNew);

    //[id(201), propget, hidden]
    //HRESULT VBComponentsEvents( [in]VBProject  *VBProject, [out, retval] VBComponentsEvents **pcceNew );
    //HRESULT Reserved2([in]IDispatch  *VBProject, [out, retval] IUnknown **ppceNew  );

    //[id(202), propget, hidden]
    // HRESULT ReferencesEvents( [in]VBProject  *VBProject, [out, retval]ReferencesEvents **prceNew );
    //HRESULT Reserved3([in]IDispatch  *VBProject, [out, retval] IUnknown **ppceNew);

    //[id(203), propget, hidden]
    // HRESULT VBControlsEvents([in]VBProject  *VBProject, [in]VBForm  *VBForm, [out, retval]VBControlsEvents **prceNew );
    //HRESULT Reserved4([in]IDispatch  *VBProject, [in]IDispatch  *VBForm, [out, retval] IUnknown **ppceNew);

    //[id(204), propget, hidden]
    // HRESULT SelectedVBControlsEvents([in]VBProject  *VBProject, [in]VBForm  *VBForm,[out, retval]SelectedVBControlsEvents **prceNew );
    //HRESULT Reserved5([in]IDispatch  *VBProject, [in]IDispatch  *VBForm,[out, retval] IUnknown **ppceNew );

    [id(205), propget, HELP(vsproCommandBarEventsProperty)]
    HRESULT CommandBarEvents([in] IDispatch  *CommandBarControl, [out, retval]CommandBarEvents **prceNew );

    //[id(206), propget, hidden]
    //HRESULT FileControlEvents([in]VBProject  *VBProject, [out, retval]FileControlEvents **prceNew );
    //HRESULT Reserved6([in]IDispatch  *VBProject, [out, retval] IUnknown **ppceNew);

    //========================End Backward compatibility ================================

    [id(300), propget, HELP(vsproCommandEventProperty)]
    HRESULT CommandEvents([in, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR Guid, [in, defaultvalue(0)]long ID, [out, retval] CommandEvents **ppceNew);

    [id(301), propget, HELP(vsproSelectionEventsProperty)]
    HRESULT SelectionEvents([out, retval] SelectionEvents **ppceNew);

    [id(302), propget, HELP(vsproSolutionEventsProperty)]
    HRESULT SolutionEvents([out, retval] SolutionEvents **ppceNew);

    [id(303), propget, HELP(vsproBuildEventsProperty)]
    HRESULT BuildEvents([out, retval] BuildEvents **ppceNew);

    [id(304), propget, HELP(vsproWindowEventsProperty)]
    HRESULT WindowEvents([in, defaultvalue(0)] Window *WindowFilter, [out, retval] WindowEvents **ppceNew);

    [id(305), propget, HELP(vsproOutputWindowEventsProperty)]
    HRESULT OutputWindowEvents([in, defaultvalue("")] BSTR Pane, [out, retval] OutputWindowEvents **ppceNew);

    [id(306), propget, HELP(vsproFindEventsProperty)]
    HRESULT FindEvents([out, retval] FindEvents **ppFindEvents);

    [id(307), propget, HELP(vsobjTaskListEventsProperty) ]
    HRESULT TaskListEvents([in, defaultvalue("")] BSTR Filter, [out, retval] TaskListEvents **ppceNew);

    [id(308), propget, HELP(vsobjDTEEventsProperty) ]
    HRESULT DTEEvents([out, retval] DTEEvents **ppceNew);

    [id(309), propget, HELP(vsobjDocumentEventsProperty) ]
    HRESULT DocumentEvents([in, defaultvalue(0)] Document *Document, [out, retval] DocumentEvents **ppceNew);

    [id(310), propget, HELP(vsobjSlnItemsEventsProperty) ]
    HRESULT SolutionItemsEvents([out, retval] ProjectItemsEvents **ppeNew);

    [id(311), propget, HELP(vsobjMiscItemsEventsProperty)]
    HRESULT MiscFilesEvents([out, retval] ProjectItemsEvents **ppeNew);

    [id(312), propget, HELP(vsobjDebuggerEventsProperty) ]
    HRESULT DebuggerEvents([out, retval] DebuggerEvents **ppeNew);

    [id(313), propget, HELP(vsobjTextEditorEvents) ]
    HRESULT TextEditorEvents([in, defaultvalue(0)] TextDocument *TextDocumentFilter, [out, retval] TextEditorEvents **ppeNew);

    [id(314), HELP(vsextGetObjectMethod)]
    HRESULT GetObject([in] BSTR Name, [out, retval] IDispatch **ppObject);
  };


  [ uuid (9E66FE98-A1C6-421d-8C0C-6DA4E652E770), oleautomation, odl, HELP(vsobjCommandBarEventsObject) ]
  interface _CommandBarControlEvents : IDispatch 
  {
  };

  [ uuid (987FB893-F96D-11D0-BBBB-00A0C90F2744), HELP(vsobjCommandBarEventsObject) ]
  dispinterface _dispCommandBarControlEvents
  {
    properties:
    methods: // Events
  
    [id(1), HELP(vsextClickEvent)]
    void Click([in] IDispatch * CommandBarControl, [in] VARIANT_BOOL * handled, [in] VARIANT_BOOL *CancelDefault);
  };

  [ uuid(bfd4b2b2-9eec-4db8-aba0-ac316f4c7328), HELP(vsobjCommandBarEventsObject) ]
  coclass CommandBarEvents
  {
    [default] interface _CommandBarControlEvents;
    [default, source] dispinterface _dispCommandBarControlEvents;
  };


  [ uuid (A79FC678-0D0A-496a-B9DC-0D5B9E1CA9FC), oleautomation, odl, HELP(vsobjCommandEventObject)]
  interface _CommandEvents : IDispatch 
  {
  };

  [ uuid (FF2D5C12-FEEA-11D0-BBC8-00A0C90F2744), HELP(vsobjCommandEventObject) ]
  dispinterface _dispCommandEvents
  {
    properties:
    methods: // Events
    
    [id(1), HELP(vsextBeforeExecuteEvent)]
    void BeforeExecute ([in] BSTR Guid, [in] long ID, [in] VARIANT CustomIn, [in] VARIANT CustomOut, [in, out] VARIANT_BOOL *CancelDefault);

    [id(2), HELP(vsextAfterExecuteEvent)]
    void AfterExecute ([in] BSTR Guid, [in] long ID, [in] VARIANT CustomIn, [in] VARIANT CustomOut);
  };

  [ uuid(1ded92b5-9a46-4b29-93ef-b5e07016659e), HELP(vsobjCommandEventObject) ]
  coclass CommandEvents
  {
    [default] interface _CommandEvents;
    [default, source] dispinterface _dispCommandEvents;
  };


  [ uuid (EB6783DB-1819-496d-84A4-3CFF883010F6), oleautomation, odl, HELP(vsobjSelectionEventsObject)]
  interface _SelectionEvents : IDispatch 
  {
  };

  [ uuid (DEEB28B3-23E6-11D1-AE5C-00A0C90F26F4) ]
  dispinterface _dispSelectionEvents
  {
    properties:
    methods: // Events
  
    [id(1), HELP(vsextOnChangedEvent)] 
    void OnChange (); 
  };

  [ uuid(af37511e-9e9d-4234-a5a1-7584d290e061), HELP(vsobjSelectionEventsObject) ]
  coclass SelectionEvents
  {
    [default] interface _SelectionEvents;
    [default, source] dispinterface _dispSelectionEvents;
  };

  [ uuid(794a2ba5-ffa6-4fc5-bf13-957b2c22edd7), oleautomation, odl, HELP(vsobjBuildEventsObject)]
  interface _BuildEvents : IDispatch 
  {
  };

  typedef [ uuid (3982FA28-7BCC-4f14-817C-93EEECE8BEEE), HELP(vsenumBuildKind) ]
  enum vsBuildKind
  {
    vsBuildKindSolution		= 0,
    vsBuildKindProject		= 1,
    vsBuildKindProjectItem	= 2,
  } vsBuildKind;

  typedef [ uuid (FA7FA701-EFAD-4895-A95A-D4ECB383BF7D), HELP(vsenumBuildScope) ]
  enum vsBuildScope 
  {
    vsBuildScopeSolution = 1,
    vsBuildScopeBatch = 2, 
    vsBuildScopeProject = 3
  } vsBuildScope;

  typedef [ uuid (FA7FA702-EFAD-4895-A95A-D4ECB383BF7D), HELP(vsenumBuildAction) ]
  enum vsBuildAction
  {
    vsBuildActionBuild = 1, 
    vsBuildActionRebuildAll = 2, 
    vsBuildActionClean = 3, 
    vsBuildActionDeploy = 4
  } vsBuildAction;

  [ uuid(1926364e-6b90-46cb-a44d-8a80fb11acd9) ]
  dispinterface _dispBuildEvents
  {
    properties:
    methods: // Events

    /*[hidden, id(1), HELP(vsextBuildDoneEvent)]
    void BuildDone(VARIANT_BOOL Success, VARIANT_BOOL Updated, VARIANT_BOOL Cancelled);

    [hidden, id(2), HELP(vsextBuildStartEvent)]
    void BuildStart();*/

    [id(3)]
    void OnBuildBegin(vsBuildScope Scope, vsBuildAction Action);

    [id(4)]
    void OnBuildDone(vsBuildScope Scope, vsBuildAction Action);

    [id(5)]
    void OnBuildProjConfigBegin(BSTR Project, BSTR ProjectConfig, BSTR Platform, BSTR SolutionConfig);

    [id(6)]
    void OnBuildProjConfigDone(BSTR Project, BSTR ProjectConfig, BSTR Platform, BSTR SolutionConfig, VARIANT_BOOL Success);
  }

  [ uuid(d83d60e3-229f-4660-8dd0-28b629eedcda), HELP(vsobjBuildEventsObject) ]
  coclass BuildEvents
  {
    [default] interface _BuildEvents;
    [default, source] dispinterface _dispBuildEvents;
  };


  [ uuid (BF8BBF37-5415-46a9-940D-594CAD9DEC26), oleautomation, odl, HELP(vsobjSolutionEventsObject)]
  interface _SolutionEvents : IDispatch 
  {
  };

  [ uuid (FBCFF1C2-261C-11D1-AE5E-00A0C90F26F4) ]
  dispinterface _dispSolutionEvents
  {
    properties:
    methods: // Events
    
    [id(1), HELP(vsextOpenedEvent)] 
    void Opened ();
    
    [id(2), HELP(vsextBeforeClosingEvent)]
    void BeforeClosing ();

    [id(3), HELP(vsevtAfterClosingEvent)]
    void AfterClosing ();

    [id(4), HELP(vsevtQueryCloseSolutionEvent)]
    void QueryCloseSolution ([in,out] VARIANT_BOOL *fCancel);

    [id(5), HELP(vsextRenamedEvent)]
    void Renamed ([in] BSTR OldName);

    [id(6), HELP(vsextProjectAddedEvent)]
    void ProjectAdded([in]Project *Project);

    [id(7), HELP(vsextProjectRemovedEvent)]
    void ProjectRemoved([in]Project *Project);

    [id(8), HELP(vsextProjectRenamedEvent)]
    void ProjectRenamed([in]Project *Project, [in] BSTR OldName);
  };

  [ uuid(88ac98c7-b38c-404b-bd86-d2a4f2e89dca), HELP(vsobjSolutionEventsObject) ]
  coclass SolutionEvents
  {
    [default] interface _SolutionEvents;
    [default, source] dispinterface _dispSolutionEvents;
  };


  //NOTE: DO NOT modify this. It is unnecessary because it is depricated.
  //  However, you should add your Persistence Slot GUID to the Constants section
  //  (read the note there).
  typedef [ uuid (705CD8A9-D29B-11D2-AABD-00C04F688DDE), HELP(vsenumWindowType) ]
  enum vsWindowType
  {
    vsWindowTypeCodeWindow        = 0,
    vsWindowTypeDesigner          = 1,
    vsWindowTypeBrowser           = 2,
    vsWindowTypeWatch             = 3,
    vsWindowTypeLocals            = 4,
    vsWindowTypeImmediate         = 5,
    vsWindowTypeSolutionExplorer  = 6,
    vsWindowTypeProperties        = 7,
    vsWindowTypeFind              = 8,
    vsWindowTypeFindReplace       = 9,
    vsWindowTypeToolbox           = 10,
    vsWindowTypeLinkedWindowFrame = 11,
    vsWindowTypeMainWindow        = 12,
    vsWindowTypePreview           = 13,
    vsWindowTypeColorPalette      = 14,
    vsWindowTypeToolWindow        = 15,
//========================End Backward compatibility ================================
    vsWindowTypeDocument          = 16, 
    vsWindowTypeOutput            = 17,
    vsWindowTypeTaskList          = 18,
    vsWindowTypeAutos             = 19,
    vsWindowTypeCallStack         = 20, 
    vsWindowTypeThreads           = 21,
    vsWindowTypeDocumentOutline   = 22,
    vsWindowTypeRunningDocuments  = 23
  } vsWindowType;

  typedef [ uuid(cd678662-7939-48a0-bf1d-fa1bed56c130), HELP(vsenumWindowState) ]
  enum vsWindowState
  {
    vsWindowStateNormal   = 0,
    vsWindowStateMinimize = 1,
    vsWindowStateMaximize = 2
  } vsWindowState;

  typedef [ uuid(539f9c17-db5f-421d-b02b-07bcf9faa92f), HELP(vsenumLinkedWindowType) ]
  enum vsLinkedWindowType
  {
    [hidden] vsLinkedWindowTypeDocked = 0,
    vsLinkedWindowTypeVertical        = 2,
    vsLinkedWindowTypeHorizontal      = 3,
    vsLinkedWindowTypeTabbed          = 1,
    //vsext_ws_Maximize = 2
  } vsLinkedWindowType;

  typedef [ uuid(59286edc-d580-4e22-96c9-44d15b6148cc), HELP(vsenumContextAttributes) ]
  enum vsContextAttributes
  {
    vsContextAttributesGlobal = 1,
    vsContextAttributesWindow = 2,
    vsContextAttributesHighPriority = 3
  } vsContextAttributes;

  typedef [ uuid(410202e1-b83a-41dd-aab0-8c0029fe9435), HELP(vsenumContextAttributeType) ]
  enum vsContextAttributeType
  {
    vsContextAttributeFilter = 1,
    vsContextAttributeLookup = 2,
    vsContextAttributeLookupF1 = 3
  } vsContextAttributeType;

  [ odl, dual, oleautomation, object, uuid(1a6e2cb3-b897-42eb-96be-ff0fdb65db2f) ]
  interface ContextAttribute : IDispatch
  {
    [id(DISPID_VALUE), propget, HELP(vsextCtxAttrName)]
    HRESULT Name([out, retval] BSTR *pName);

    [id(1), propget, HELP(vsextCtxAttrDTE)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(2), propget, HELP(vsextCtxAttrColl)]
    HRESULT Collection([out, retval] ContextAttributes **ppCollection);

    [id(3), propget, HELP(vsextCtxAttrVals)]
    HRESULT Values([out, retval] VARIANT *pVal);

    [id(4), HELP(vsextCtxAttrRem)]
    HRESULT Remove();
  }

  [ odl, dual, oleautomation, object, uuid(33c5ebb8-244e-449d-9cee-fad70a774e59) ]
  interface ContextAttributes : IDispatch
  {
    [id(DISPID_NEWENUM), restricted]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(DISPID_VALUE), HELP(vsextCtxAttrsItem)]
    HRESULT Item(VARIANT Index, [out, retval] ContextAttribute **ppVal);

    [id(1), propget, HELP(vsextCtxAttrDTE)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(2), propget, HELP(vsextCtxAttrsParent)]
    HRESULT Parent([out, retval] IDispatch **lppaReturn);

    [id(3), propget, HELP(vsextCtxAttrsCount)]
    HRESULT Count([out, retval] long *Count);

    [id(4), HELP(vsextCtxAttrsAdd)]
    HRESULT Add(BSTR AttributeName, BSTR AttributeValue, vsContextAttributeType Type, [out, retval] ContextAttribute **ppVal);

    [id(5), propget, HELP(vsextCtxAttrsType)]
    HRESULT Type([out, retval] vsContextAttributes *Type);

    [id(6), propget, HELP(vsextCtxAttrsHighPri)]
    HRESULT HighPriorityAttributes([out, retval] ContextAttributes **ppVal);

    [id(7), HELP(vsextCtxAttrsRefresh)]
    HRESULT Refresh();
  };

  [ odl, dual, oleautomation, object, uuid(0beab46b-4c07-4f94-a8d7-1626020e4e53), HELP(vsobjWindowObjColl)]
  interface Window : IDispatch 
  {
    // Required properties, all objects

    //[id(1), propget, hidden, restricted]
    //HRESULT VBEOBJ([out, retval] VBEOBJ **lppaReturn);
    //HRESULT Reserved1([out, retval] IDispatch **lppaReturn);

    [id(2), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] Windows **lppaReturn);

    // Standard properties & methods, this object type
    //[id(099), hidden]
    //HRESULT Reserved2();

    //[id(100), propget, hidden]
    //HRESULT Reserved3([out, retval] BSTR * pbstrTitle );

    [id(106), propget, HELP(vsproVisibleProperty)]
    HRESULT Visible([out, retval] VARIANT_BOOL * pfVisible );

    [id(106), propput, HELP(vsproVisibleProperty)]
    HRESULT Visible([in] VARIANT_BOOL fVisible );

    [id(101), propget, HELP(vsproLeftTop)]
    HRESULT Left([out, retval] long * plLeft);

    [id(101), propput, HELP(vsproLeftTop)]
    HRESULT Left([in] long lLeft );

    [id(103), propget, HELP(vsproLeftTop)]
    HRESULT Top([out, retval] long * plTop);

    [id(103), propput, HELP(vsproLeftTop)]
    HRESULT Top([in] long lTop_r );

    [id(105), propget, HELP(vsproHeightWidth)]
    HRESULT Width([out, retval] long * plWidth);

    [id(105), propput, HELP(vsproHeightWidth)]
    HRESULT Width([in] long lWidth );

    [id(107), propget, HELP(vsproHeightWidth)]
    HRESULT Height([out, retval] long * plHeight);

    [id(107), propput, HELP(vsproHeightWidth)]
    HRESULT Height([in] long lHeight_r );

    [id(109), propget, HELP(vsproWindowStateProperty)]
    HRESULT WindowState([out, retval] vsWindowState * plWindowState);

    [id(109), propput, HELP(vsproWindowStateProperty)]
    HRESULT WindowState([in] vsWindowState wstWindowState );

    [id(111), HELP(vsextSetFocusMethod), hidden]
    HRESULT SetFocus();

    [id(112), propget, HELP(vsproTypeProperty), hidden]
    HRESULT Type([out, retval] vsWindowType * pKind );

    [id(113), restricted, hidden]
    HRESULT SetKind([in] vsWindowType eKind );

    [id(116), propget, HELP(vsproLinkedWindowsProperty)]
    HRESULT LinkedWindows([out, retval] LinkedWindows **ppwnsCollection );

    [id(117), propget, HELP(vsproLinkedWindowFrameProperty)]
    HRESULT LinkedWindowFrame([out, retval] Window **ppwinFrame );

    [id(118), restricted, hidden]
    HRESULT Detach();

    [id(119), restricted, hidden]
    HRESULT Attach( [in] long lWindowHandle );

    [id(120), propget, hidden]
    HRESULT HWnd([out, retval] long  * plWindowHandle );

    //========================End Backward compatibility ================================
    [id(121), propget, HELP(vsproKindProperty)]
    HRESULT Kind([out, retval] BSTR * pbstrType);

    [id(122), propget, HELP(vsproObjectKindProperty)]
    HRESULT ObjectKind([out, retval] BSTR * pbstrTypeGUID);

    [id(123), propget, HELP(vsproObjectPropertyWin)]
    HRESULT Object([out, retval] IDispatch **ppToolObject);

    [id(124), propget, HELP(vsproDocumentDataProperty), hidden]
    HRESULT DocumentData([in, defaultvalue("")] BSTR bstrWhichData, [out, retval] IDispatch **ppDataObject);

    [id(125), propget, HELP(vsproProjectItemPropWin)]
    HRESULT ProjectItem([out, retval] ProjectItem **ppProjItem); 

    [id(126), propget, HELP(vsproProjectProperty)]
    HRESULT Project([out, retval] Project **ppProj); 

    [id(127), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(128), propget, HELP(vsobjWindowDocumentProperty)]
    HRESULT Document([out, retval] Document **ppDocument);

    [id(129), propget, HELP(vsobjSelection)]
    HRESULT Selection([out, retval] IDispatch **ppDocument);

    [id(130), propget, HELP(vsobjWindowLinkableProperty)]
    HRESULT Linkable([out, retval] VARIANT_BOOL *pLinkable);

    [id(130), propput, HELP(vsobjWindowLinkableProperty)]
    HRESULT Linkable([in] VARIANT_BOOL Linkable);

    [id(131), HELP(vsextActivateMethod)]
    HRESULT Activate();

    [id(132), HELP(vsextCloseMthWindowObj)]
    HRESULT Close([in, defaultvalue(vsSaveChangesNo)] vsSaveChanges SaveChanges);

    [id(DISPID_VALUE), propget, HELP(vsproCaptionProperty)]
    HRESULT Caption([out, retval] BSTR * pbstrTitle );

    [id(DISPID_VALUE), propput, HELP(vsproCaptionProperty)]
    HRESULT Caption([in] BSTR pbstrTitle );

    [id(133), HELP(vsextWindowSetSelectionContainer)]
    HRESULT SetSelectionContainer(SAFEARRAY(VARIANT)* Objects);

    /*[id(134), propget, HELP(vsextUserContextProperty) ]
    HRESULT UserContext([out, retval] UserContext **ppUserContext);*/

    [id(135), propget, HELP(vsextWinIsFloating)]
    HRESULT IsFloating([out, retval] VARIANT_BOOL *Floating);

    [id(135), propput, HELP(vsextWinIsFloating)]
    HRESULT IsFloating([in] VARIANT_BOOL Floating);

    [id(136), propget, HELP(vsextWinAutoHides)]
    HRESULT AutoHides([out, retval] VARIANT_BOOL *Hides);

    [id(136), propput, HELP(vsextWinAutoHides)]
    HRESULT AutoHides([in] VARIANT_BOOL Hides);

    [id(138), HELP(vsextWinSetPict)]
    HRESULT SetTabPicture(VARIANT Picture);

	[id(139), propget, HELP(vsextCtxAttrsWindow)]
	HRESULT ContextAttributes([out, retval] ContextAttributes **ppVal);
  } // End Window

  [ uuid (DC5437F4-F114-11D2-AACF-00C04F688DDE), dual, object, hidden ]
  interface _DocumentEventsRoot : IDispatch
  {
    [id(1), propget, hidden] 
    HRESULT _stdcall DocumentEvents([in] Document *WindowFilter, [out, retval] IDispatch**ppdisp);
  };

  [ uuid (DC5437F5-F114-11D2-AACF-00C04F688DDE), oleautomation, odl, ]
  interface _DocumentEvents : IDispatch
  {
  };

  [ uuid (DC5437F6-F114-11D2-AACF-00C04F688DDE) ]
  dispinterface _dispDocumentEvents
  {
    properties:
    methods: // Events
      [id(1), HELP(vsextDocSavedEvent)] 
      void DocumentSaved([in] Document *Document);

      [id(2), HELP(vsextDocClosingEvent)] 
      void DocumentClosing([in] Document *Document);

      [id(3), HELP(vsextDocOpeningEvent)] 
      void DocumentOpening([in] BSTR DocumentPath, [in] VARIANT_BOOL ReadOnly);

      [id(4), HELP(vsextDocOpenedEvent)] 
      void DocumentOpened([in] Document *Document);
  };

  [ uuid (DC5437F7-F114-11D2-AACF-00C04F688DDE) ]
  coclass DocumentEvents
  {
    [default] interface _DocumentEvents;
    [default, source] dispinterface _dispDocumentEvents;
  };

  typedef [uuid(11f0cb7f-4f63-4e09-b99c-92a6cc5f84ce)]
  enum vsTextChanged
  {
    vsTextChangedMultiLine    = 1,
    vsTextChangedSave         = 2,
    vsTextChangedCaretMoved   = 4,
    vsTextChangedReplaceAll   = 8,
    vsTextChangedNewline      = 16,
    vsTextChangedFindStarting = 32
  } vsTextChanged;

  [ uuid (B3C38885-B288-44a8-B290-34FE63BF3C76), dual, object, hidden ]
  interface _TextEditorEventsRoot : IDispatch
  {
    [id(1), propget, hidden] 
    HRESULT _stdcall TextEditorEvents([in] TextDocument *TextDocumentFilter, [out, retval] IDispatch**ppdisp);
  };

  [ uuid (23B7A868-6C89-436a-94FA-25D755456A77), oleautomation, odl, ]
  interface _TextEditorEvents : IDispatch
  {
  };

  [ uuid (2699DD44-C507-4da3-AA34-314A6C21DFE2) ]
  dispinterface _dispTextEditorEvents
  {
    properties:
    methods: // Events
      [id(1), HELP(vsextTxtLineChangedEvent)] 
      void LineChanged([in] TextPoint *StartPoint, TextPoint *EndPoint, long Hint);
  };

  [ uuid (ADF22C37-0069-4adf-B12D-D8D47C38FE79), HELP(vsobjTextEditorEventsObject) ]
  coclass TextEditorEvents
  {
    [default] interface _TextEditorEvents;
    [default, source] dispinterface _dispTextEditorEvents;
  };

  [ uuid(17d12026-ba99-403e-a359-71fd1e5a72cd), dual, object, hidden ]
  interface _WindowEventsRoot : IDispatch
  {
    [id(1), propget, hidden] 
    HRESULT _stdcall WindowEvents([in] Window *WindowFilter, [out, retval] IDispatch**ppdisp);
  };

  [ uuid (0D3A23A8-67BB-11D2-97C1-00C04FB6C6FF), oleautomation, odl, HELP(vsobjWindowEventsObject) ]
  interface _WindowEvents : IDispatch
  {
  };

  [ uuid (0D3A23A9-67BB-11D2-97C1-00C04FB6C6FF), HELP(vsobjWindowEventsObject) ]
  dispinterface _dispWindowEvents
  {
    properties:
    methods: // Events
      [id(1), HELP(vsextWinClosingEvent)] 
      void WindowClosing ([in] Window *Window);

      [id(2), HELP(vsextWinMovedEvent)] 
      void WindowMoved ([in] Window *Window, [in] long Top, [in] long Left, [in] long Width, [in] long Height);

      [id(3), HELP(vsextWinActivatedEvent) ] 
      void WindowActivated ([in] Window *GotFocus, [in] Window *LostFocus);

      [id(4), HELP(vsextWinCreatedEvent) ] 
      void WindowCreated ([in] Window *Window);
  };

  [ uuid(2e260fd4-c130-4e6d-8ebc-4a3bfd188181), HELP(vsobjWindowEventsObject) ]
  coclass WindowEvents
  {
    [default] interface _WindowEvents;
    [default, source] dispinterface _dispWindowEvents;
  };

  [ uuid(aa6f4085-33b6-4629-b9ea-692101007cc2), dual, object, hidden ]
  interface _OutputWindowEventsRoot : IDispatch
  {
    [id(1), propget, hidden] 
    HRESULT _stdcall OutputWindowEvents([in] BSTR PaneFilter, [out, retval] IDispatch**ppdisp);
  };

  [ uuid (0A3546A8-6840-11D2-97C1-00C04FB6C6FF), oleautomation, odl, HELP(vsobjOutputWindowEventsObject) ]
  interface _OutputWindowEvents : IDispatch 
  {
  };

  [ uuid (0D3A23AF-67BB-11D2-97C1-00C04FB6C6FF), HELP(vsobjOutputWindowEventsObject)  ]
  dispinterface _dispOutputWindowEvents
  {
    properties:
    methods: // Events
      [id(1), HELP(vsextOWinPaneAddedEvent) ] 
      void PaneAdded ([in] OutputWindowPane *pPane);

      [id(2), HELP(vsextOWinPaneUpdatedEvent) ] 
      void PaneUpdated ([in] OutputWindowPane *pPane);

      [id(3), HELP(vsextOWinPaneClearingEvent) ] 
      void PaneClearing ([in] OutputWindowPane *pPane);
      //Can this happen? [id(1)] void PaneRemoved ([in] OutputWindowPane *pPane);
  };

  [ uuid(3760037f-b012-44f8-9c23-3609d7a16def), HELP(vsobjOutputWindowEventsObject)  ]
  coclass OutputWindowEvents
  {
    [default] interface _OutputWindowEvents;
    [default, source] dispinterface _dispOutputWindowEvents;
  };

  [ odl, dual, oleautomation, object, uuid (2294311A-B7BC-4789-B365-1C15FF2CD17C), HELP(vsobjWindowObjColl)]
  interface Windows : IDispatch
  { 
    // need to change all the help numbers
    // Required Properties, all objects

    //[id(1), propget, hidden, restricted]
    //HRESULT VBEOBJ([out, retval] VBEOBJ **lppaReturn);
    //HRESULT Reserved1([out, retval] IDispatch **lppaReturn);

    //[id(2), propget, hidden, restricted]
    //HRESULT Parent([out, retval] VBEOBJ **lppaReturn);
    //HRESULT Reserved2([out, retval] IDispatch **lppaReturn);

    // Standard properties & methods, this object type
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] Window **lppcReturn);

    [id(201), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long * lplReturn);

    [id(DISPID_NEWENUM), restricted]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    // Methods specific to this object
    [id(300), HELP(vsextCreateToolWindowMethod)]
    HRESULT CreateToolWindow([in] AddIn *AddInInst, [in] BSTR ProgId, [in] BSTR Caption, [in] BSTR GuidPosition, [in, out] IDispatch **DocObj, [out, retval] Window **lppcReturn);

    //========================End Backward compatibility ================================
    [id(301), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);


    [id(302), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    [id(303), HELP(vsobjCreateLinkedWindowFrameProperty)]
    HRESULT CreateLinkedWindowFrame([in] Window *Window1, [in] Window *Window2, [in] vsLinkedWindowType Link, [out, retval] Window **LinkedWindowFrame);

    //[id(304), propget, HELP(vsextCreateDocumentWindowMethod)]
    //HRESULT CreateDocumentWindow([in] BSTR FilePath, [in] BSTR Control, [in, defaultvalue(0)] long IconHandle, [out, retval] Window **ppWindow);
  };

  [ odl, dual, oleautomation, object, uuid(f00ef34a-a654-4c1b-897a-585d5bcbb35a), HELP(vsobjLinkedWindowsCollection) ]
  interface LinkedWindows : IDispatch
  { 
    // need to change all the help numbers
    // Required Properties, all objects
    //[id(1), propget, hidden, restricted]
    // HRESULT VBEOBJ([out, retval] VBEOBJ **lppaReturn);
    //HRESULT Reserved1([out, retval] IDispatch **lppaReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Window **ppptReturn);

    // Standard properties & methods, this object type
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT index, [out, retval] Window **lppcReturn);

    [id(201), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long * lplReturn);

    [id(DISPID_NEWENUM), restricted]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(202), HELP(vsextRemoveMthLinkedWindowsColl)]
    HRESULT Remove([in] Window* Window );

    [id(203), HELP(vsextAddMethLinkedWindowsColln)]
    HRESULT Add( [in] Window* Window );

    //========================End Backward compatibility ================================
    [id(301), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    /*[id(302), propget, HELP(vsobjLinkedWindowTypeProperty)]
    HRESULT Type([out, retval] vsLinkedWindowType *pType);*/
  };

  [ odl, dual, oleautomation, object, uuid(e577442a-98e1-46c5-bd2e-d25807ec81ce), HELP(vsobjWindowCfgsObject) ]
  interface WindowConfigurations : IDispatch
  { 
    [id(DISPID_NEWENUM), restricted]
    HRESULT _NewEnum([out, retval] IUnknown **ppEnum);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] WindowConfiguration **pWindowConfiguration);

    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **pParent);

    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long * pCount);

    [id(4), HELP(vsextAddMethLinkedWindowsColln)]
    HRESULT Add( [in] BSTR Name, [out, retval] WindowConfiguration **pWindowConfiguration);

    [id(5), propget, HELP(vsextWinCfgCurrentName)]
    HRESULT ActiveConfigurationName([out, retval] BSTR *pbstrName);
  };

  [ odl, dual, oleautomation, object, uuid(41d02413-8a67-4c28-a980-ad7539ed415d), HELP(vsobjWindowConfigurationObject)]
  interface WindowConfiguration : IDispatch
  { 
    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR *pName);

    /*[id(DISPID_VALUE), propput, HELP(vsproNameProperty)]
    HRESULT Name([in] BSTR NewValue);*/

    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Collection([out, retval] WindowConfigurations **pWindowConfigurations);

    [id(3), HELP(vsobjWindowCfgApplyMethod)]
    HRESULT Apply([in, defaultvalue(-1)] VARIANT_BOOL FromCustomViews);

    [id(4), HELP(vsextRemoveMth)]
    HRESULT Delete();

    [id(5), HELP(vsobjWindowCfgUpdateMethod)]
    HRESULT Update();
  };

  typedef [ uuid (36B56DE8-5A17-11D1-B2B6-00C04FB6C6FF) , HELP(vsenumTaskPriority) ]
  enum vsTaskPriority
  {
    vsTaskPriorityLow     = 1,
    vsTaskPriorityMedium  = 2,
    vsTaskPriorityHigh    = 3
  } vsTaskPriority;

  typedef [ uuid (195DAB2E-4854-11D2-8820-00C04FB6C6FF), HELP(vsenumTaskIcon) ]
  enum vsTaskIcon
  {
    vsTaskIconNone      = 0,
    vsTaskIconCompile   = 1,
    vsTaskIconSquiggle  = 2,
    vsTaskIconComment   = 3,
    vsTaskIconShortcut  = 4,
    vsTaskIconUser      = 5
  } vsTaskIcon;

  typedef [ uuid (9848C17E-6AA5-11D2-97C3-00C04FB6C6FF), HELP(vsenumTaskListColumn) ]
  enum vsTaskListColumn
  {
    vsTaskListColumnPriority    = 1,
    vsTaskListColumnGlyph       = 2,
    vsTaskListColumnCheck       = 4,
    vsTaskListColumnDescription = 8,
    vsTaskListColumnFile        = 16,
    vsTaskListColumnLine        = 32
  } vsTaskListColumn;

  [ uuid(6bc8c372-c6f0-4be6-b255-827ac190bf71), dual, object, hidden ]
  interface _TaskListEventsRoot : IDispatch
  {
    [id(1), propget] HRESULT _stdcall TaskListEvents([out, retval] IDispatch**ppdisp);
  };

  [ uuid (1125C422-49BD-11D2-8823-00C04FB6C6FF), oleautomation, odl, HELP(vsobjTaskListEventsObject) ]
  interface _TaskListEvents : IDispatch
  {
  };

  [ uuid (1125C423-49BD-11D2-8823-00C04FB6C6FF), HELP(vsobjTaskListEventsObject) ]
  dispinterface _dispTaskListEvents
  {
    properties:
    methods: // Events
  
    [id(1), HELP(vsextTaskAddedEvent)] 
    void TaskAdded ([in] TaskItem *TaskItem);
    
    [id(2), HELP(vsextTaskRemovedEvent) ] 
    void TaskRemoved ([in] TaskItem *TaskItem);

    [id(3), HELP(vsextTaskModifiedEvent) ] 
    void TaskModified ([in] TaskItem *TaskItem, [in] vsTaskListColumn ColumnModified);

    [id(4), HELP(vsextTaskNavigatedEvent) ] 
    void TaskNavigated ([in] TaskItem *TaskItem, [out, in] VARIANT_BOOL *NavigateHandled);
  };

  [ uuid(29617acd-7859-4328-be09-298f91f48196), HELP(vsobjTaskListEventsObject) ]
  coclass TaskListEvents
  {
    [default] interface _TaskListEvents;
    [default, source] dispinterface _dispTaskListEvents;
  };

  [ odl, dual, oleautomation, object, uuid(4b51103d-513c-4773-b56a-354d0928fd04), HELP(vsobjTaskListItems) ]
  interface TaskItems : IDispatch 
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] TaskList **pTaskList);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] TaskItem **pTaskItem);

    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long * pCount);

    [id(4), HELP(vsobjTLIAddProperty)]
    HRESULT Add([in] BSTR Category, [in] BSTR SubCategory, [in] BSTR Description, [in, defaultvalue(vsTaskPriorityMedium)] vsTaskPriority Priority,
                [in, optional] VARIANT Icon, [in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL Checkable, [in, defaultvalue("")] BSTR File, 
                [in, defaultvalue(-1)] long Line, [in, defaultvalue(-1)] VARIANT_BOOL CanUserDelete,
                [in, defaultvalue(VARIANT_TRUE)] VARIANT_BOOL FlushItem, [out, retval] TaskItem **pTaskItem);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(6), HELP(vsobjOutputPaneForceItems)]
    HRESULT ForceItemsToTaskList();
  };

  [ odl, dual, oleautomation, object, uuid(4e4f0569-e16a-4da1-92de-10882a4ddd8c), HELP(vsobjTaskObject) ]
  interface TaskList : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **lppReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Window **lppReturn);

    [id(3), propget, HELP(vsproDefaultCommentTokenProperty)]
    HRESULT DefaultCommentToken([out, retval] BSTR * pbstrToken);

    /*[id(4), propget, HELP(vsobjTaskListCategories)]
    HRESULT Categories([out, retval] VARIANT* Categories);*/

    [id(5), propget, HELP(vsobjTLItemsProperty)]
    HRESULT TaskItems(/*[in, defaultvalue("")] BSTR Category, */[out, retval] TaskItems **pTaskItems);

    [id(6), propget, HELP(vsobjActiveItem)]
    HRESULT SelectedItems([out, retval] VARIANT* Selections);
  };

  [ odl, dual, oleautomation, object, uuid(58e4d419-6b8c-4c63-92de-70161cd95890), HELP(vsobjTaskListItemObject)]
  interface TaskItem : IDispatch 
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Collection([out, retval] TaskItems **pTaskItems);

    [id(3), propget, HELP(vsobjTLICategory)]
    HRESULT Category([out, retval] BSTR * pCategory);

    [id(4), propget, HELP(vsobjTLISubCategory)]
    HRESULT SubCategory([out, retval] BSTR *pSubCategory);

    [id(5), propget, HELP(vsobjTLIPrio)]
    HRESULT Priority([out, retval] vsTaskPriority *pPriority);

    [id(5), propput, HELP(vsobjTLIPrio)]
    HRESULT Priority([in] vsTaskPriority Priority);

    [id(6), propget, HELP(vsobjTLIDesc)]
    HRESULT Description([out, retval] BSTR *pDescription);

    [id(6), propput, HELP(vsobjTLIDesc)]
    HRESULT Description([in] BSTR Description);

    [id(7), propget, HELP(vsobjTLILine)]
    HRESULT FileName([out, retval] BSTR *pFileName);

    [id(7), propput, HELP(vsobjTLILine)]
    HRESULT FileName([in] BSTR FileName);

    [id(8), propget, HELP(vsobjTaskItemIsSettable)]
    HRESULT IsSettable([in] vsTaskListColumn Column, [out, retval] VARIANT_BOOL *pSettable);

    [id(9), propget, HELP(vsobjTLILine)]
    HRESULT Line([out, retval] long *pLine);

    [id(9), propput, HELP(vsobjTLILine)]
    HRESULT Line([in] long Line);

    [id(10), propget, HELP(vsobjTLIDisplayed)]
    HRESULT Displayed([out, retval] VARIANT_BOOL *pDisplayed);

    [id(11), propget, HELP(vsobjTLIChecked)]
    HRESULT Checked([out, retval] VARIANT_BOOL *pChecked);

    [id(11), propput, HELP(vsobjTLIChecked)]
    HRESULT Checked([in] VARIANT_BOOL Checked);

    [id(12), HELP(vsobjTLINavMth)]
    HRESULT Navigate();

    [id(13), HELP(vsextRemoveMth)]
    HRESULT Delete();

    [id(14), HELP(vsextSelect)]
    HRESULT Select();
  };

  typedef [ uuid(f40a5d39-fd39-4f03-8358-4df3c338b448), HELP(vsenumStatusAnimation) ]
  enum vsStatusAnimation
  {
    vsStatusAnimationGeneral  = 0,
    vsStatusAnimationPrint    = 1,
    vsStatusAnimationSave     = 2,
    vsStatusAnimationDeploy   = 3,
    vsStatusAnimationSync     = 4,
    vsStatusAnimationBuild    = 5,
    vsStatusAnimationFind     = 6
  } vsStatusAnimation;
 
 
  [ odl, dual, oleautomation, object, uuid(c34301a1-3ef1-41d8-932a-fea4a8a8ce0c), HELP(vsextStatusBarObj) ]
  interface StatusBar : IDispatch
  {
    [propget, id(1), HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);
 
    [propget, id(2), HELP(vsproDTEProperty)] 
    HRESULT Parent([out, retval] DTE **pDTE);
 
    [id(4), HELP(vsobjStatusBarClear)]
    HRESULT Clear();
  
    [id(5), HELP(vsobjStatusBarAnimate)]
    HRESULT Animate (VARIANT_BOOL On, VARIANT AnimationType);
 
    [id(6), HELP(vsobjStatusBarProgress)]
    HRESULT Progress(VARIANT_BOOL InProgress, [in, defaultvalue("")] BSTR Label, [in, defaultvalue(0)] long AmountCompleted, [in, defaultvalue(0)] long Total);
 
    [id(7), HELP(vsobjStatusBarPos)]
    HRESULT SetXYWidthHeight(long X, long Y, long Width, long Height);
 
    [id(8), HELP(vsobjStatusBarColChar)]
    HRESULT SetLineColumnCharacter(long Line, long Column, long Character);

    [propput, id(DISPID_VALUE), HELP(vsextStatusbarTextProperty)] 
    HRESULT Text([in] BSTR Text);
 
    [propget, id(DISPID_VALUE), HELP(vsextStatusbarTextProperty)] 
    HRESULT Text([out, retval] BSTR * pTextc);

    [id(9), HELP(vsextStatusbarHilight)]
    HRESULT Highlight(VARIANT_BOOL Highlight);

    [id(10), HELP(vsextStatBarShowUpdates)]
    HRESULT ShowTextUpdates(VARIANT_BOOL TextUpdates, [out, retval] VARIANT_BOOL *WillShowUpdates);
  }

  [ odl, dual, oleautomation, object, uuid(56fcd5af-7f17-4c5c-aa8d-ae2bb2ddbf38), HELP(vsobjToolBoxObject) ]
  interface ToolBox : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(2), propget, HELP(vsproParentProperty)] 
    HRESULT Parent([out, retval] Window **pParent);

    [id(3), propget, HELP(vsobjActiveItem)]
    HRESULT ActiveTab([out, retval] ToolBoxTab **pToolBoxTab);

    [id(4), propget, HELP(vsobjTbxTabsProperty)]
    HRESULT ToolBoxTabs([out, retval] ToolBoxTabs **pToolBoxTabs);
  }

  [ odl, dual, oleautomation, object, uuid(cf177b52-4f2f-42a0-8da3-ce78679a0d2d), HELP(vsobjToolboxTabsObject)]
  interface ToolBoxTabs : IDispatch
  { 
    [restricted, id(DISPID_NEWENUM)] 
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(DISPID_VALUE), HELP(vsextItemMethod)] 
    HRESULT Item(VARIANT Index, [out, retval] ToolBoxTab **pItem);

    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(2), propget, HELP(vsproParentProperty)] 
    HRESULT Parent([out, retval] ToolBox **pParent);

    [id(3), propget, HELP(vsproCountProperty)] 
    HRESULT Count([out, retval] long *pCount);

    [id(4), HELP(vsobjToolBoxTabsAdd)]
    HRESULT Add([in] BSTR Name, [out, retval] ToolBoxTab **pToolBoxTabs);
  }

  typedef [ uuid (44DF8FDC-7378-11D2-97CA-00C04FB6C6FF), HELP(vsenumToolBoxItemFormat) ]
  enum vsToolBoxItemFormat
  {
    vsToolBoxItemFormatText         = 1,
    vsToolBoxItemFormatHTML         = 2,
    vsToolBoxItemFormatGUID         = 4,
    vsToolBoxItemFormatDotNETComponent = 8
  } vsToolBoxItemFormat;


  [ odl, dual, oleautomation, object, uuid(395c7dfb-f158-431c-8f43-dda83b4ef54e), HELP(vsobjToolboxItems) ]
  interface ToolBoxItems : IDispatch
  {
    [restricted, id(DISPID_NEWENUM)] 
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(DISPID_VALUE), HELP(vsextItemMethod)] 
    HRESULT Item(VARIANT Index, [out, retval] ToolBoxItem **pItem);

    [id(1), propget, HELP(vsproCollectionProperty)] 
    HRESULT Parent([out, retval] ToolBoxTab **pParent);

    [id(2), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(3), propget, HELP(vsproCountProperty)] 
    HRESULT Count([out, retval] long *pCount);

    [id(4), HELP(vsobjToolBoxItmsAdd)]
    HRESULT Add([in] BSTR Name, [in] VARIANT Data, [in, defaultvalue(vsToolBoxItemFormatText)] vsToolBoxItemFormat Format, [out, retval] ToolBoxItem **pToolBoxItem);

    [id(5), propget, HELP(vsobjActiveItem)]
    HRESULT SelectedItem([out, retval] ToolBoxItem **pToolBoxItem);
  }

  [ odl, dual, oleautomation, object, uuid(ce2def9e-3387-4bf2-967b-a1f7f70df325), HELP(vsobjToolBoxTabObject)]
  interface ToolBoxTab : IDispatch
  {
    [id(DISPID_VALUE), propget, HELP(vsproNameProperty)]
    HRESULT Name([out, retval] BSTR *pName);

    [id(DISPID_VALUE), propput, HELP(vsproNameProperty)]
    HRESULT Name([in] BSTR NewName);

    [id(1), propget, HELP(vsproCollectionProperty)] 
    HRESULT Collection([out, retval] ToolBoxTabs **pToolBoxTabs);

    [id(2), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(4), HELP(vsextSetFocusMethod)]
    HRESULT Activate();

    [id(5), HELP(vsextRemoveMth)]
    HRESULT Delete();

    [id(6), propget, HELP(vsobjToolBoxItemsProperty)]
    HRESULT ToolBoxItems([out, retval] ToolBoxItems **pToolBoxItems);

    /*
    [id(7)]
    HRESULT Move([in, defaultvalue(-1)] VARIANT_BOOL Up, [in, defaultvalue(1)] long Count);
    */

    [id(8), propget, HELP(vsListViewMethod)]
    HRESULT ListView([out, retval] VARIANT_BOOL * pListView);

    [id(8), propput, HELP(vsListViewMethod)]
    HRESULT ListView([in] VARIANT_BOOL ListView);
  }

  [ odl, dual, oleautomation, object, uuid(46538d1b-4d81-4002-8bb4-dbdb65babb23), HELP(vsobjToolBoxItemObject)]
  interface ToolBoxItem : IDispatch
  {
    [id(DISPID_VALUE), propget, HELP(vsproNameProperty)] 
    HRESULT Name([out, retval] BSTR *Name);

    [id(DISPID_VALUE), propput, HELP(vsproNameProperty)] 
    HRESULT Name([in] BSTR Name);

    [id(1), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] ToolBoxItems **pToolBoxItems);

    [id(2), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(3), HELP(vsextRemoveMth)]
    HRESULT Delete();

    [id(4), HELP(vsextSelect)]
    HRESULT Select();
  }

  [ odl, dual, oleautomation, object, uuid(eab0a63d-c3a8-496e-9acf-a82cef6a43b3), HELP(vsobjOutputWindow) ]
  interface OutputWindow : IDispatch
  {
    [id(2), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(3), propget, HELP(vsproCollectionProperty)] 
    HRESULT Parent([out, retval] Window **pParent);

    [id(4), propget, HELP(vsobjOutputWindowPaneColl)] 
    HRESULT OutputWindowPanes([out, retval] OutputWindowPanes **pOutputWindowPanes);

    [id(5), propget, HELP(vsobjActiveItem)] 
    HRESULT ActivePane([out, retval] OutputWindowPane **pOutputWindowPane);
  };

  [ odl, dual, oleautomation, object, uuid(b02cf62a-9470-4308-a521-9675fba395ab), HELP(vsobjOutputWindowPanes) ]
  interface OutputWindowPanes : IDispatch
  {
    [id(2), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(3), propget, HELP(vsproCollectionProperty)] 
    HRESULT Parent([out, retval] OutputWindow **pOutputWindow);

    [id(4), propget, HELP(vsproCountProperty)] 
    HRESULT Count([out, retval] long *pCount);

    [id(5), HELP(vsobjOutputWindowAddProperty)]
    HRESULT Add([in] BSTR Name, [out, retval] OutputWindowPane **pOutputWindowPane);

    [id(DISPID_VALUE), HELP(vsextItemMethod)] 
    HRESULT Item(VARIANT Index, [out, retval] OutputWindowPane **pOutputWindowPane);

    [restricted, id(DISPID_NEWENUM)] 
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);
  };

  [ odl, dual, oleautomation, object, uuid(ffc9dfc4-61ca-4b0c-83c2-0703a24f5c16), HELP(vsobjOutputWindowPane) ]
  interface OutputWindowPane : IDispatch
  {
    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR *pName);

    [id(2), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [id(3), propget, HELP(vsproCollectionProperty)] 
    HRESULT Collection([out, retval] OutputWindowPanes **pOutputWindowPanes);

    [id(4), propget, HELP(vsobjOutputPaneGUID)]
    HRESULT GUID([out, retval] BSTR *pGUID);

    [id(5), HELP(vsobjOutputPaneOutputStr)]
    HRESULT OutputString([in] BSTR Text);

    [id(6), HELP(vsobjOutputPaneForceItems)]
    HRESULT ForceItemsToTaskList();

    [id(7), HELP(vsextActivateMethod)] 
    HRESULT Activate();

    [id(8), HELP(vsobjOutputPaneClear)] 
    HRESULT Clear();
    
    [id(9), HELP(vsobjOutputPaneOutputTIString)]
    HRESULT OutputTaskItemString([in] BSTR Text, [in] vsTaskPriority Priority, [in] BSTR SubCategory, [in] vsTaskIcon Icon, [in] BSTR FileName, [in] long Line, [in] BSTR Description, [in, defaultvalue(-1)] VARIANT_BOOL Force);

    [id(10), propget, HELP(vsobjOutputPaneDoc)]
    HRESULT TextDocument([out, retval] TextDocument **pDocument);
  };

  [ odl, dual, oleautomation, object, uuid(e68a3e0e-b435-4dde-86b7-f5adefc19df2), HELP(vsobjGlobals) ]
  interface Globals : IDispatch
  {
    [propget, id(1), HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **pDTE);

    [propget, id(2), HELP(vsproDTEProperty)] 
    HRESULT Parent([out, retval] IDispatch **pDTE);
    
    [propget, id(DISPID_VALUE), HELP(vsobjGlobalsVarVal)] 
    HRESULT VariableValue(BSTR VariableName, [out, retval] VARIANT *pVal);

    [propput, id(DISPID_VALUE), HELP(vsobjGlobalsVarVal)] 
    HRESULT VariableValue(BSTR VariableName, [in] VARIANT newVal);

    [propput, id(4), HELP(vsobjGlobalsVarPersists)] 
    HRESULT VariablePersists(BSTR VariableName, [in] VARIANT_BOOL pVal);
    
    [propget, id(4), HELP(vsobjGlobalsVarPersists)] 
    HRESULT VariablePersists(BSTR VariableName, [out, retval] VARIANT_BOOL *pVal);
    
    [propget, id(5), HELP(vsobjGlobalsVarExists)] 
    HRESULT VariableExists(BSTR Name, [out, retval] VARIANT_BOOL *pVal);

    [propget, id(6), HELP(vsobjGlobalsNames)]
    HRESULT VariableNames([out, retval] VARIANT* Names);
  };

  [ odl, dual, oleautomation, object, uuid(bdcaf240-2692-4713-902a-b110b1d0f100), local, HELP(vsobjIToolsOptionsPage) ]
  interface IDTToolsOptionsPage : IDispatch
  {
    [id(1), HELP(vsobjTOptPgAfterCreated)] 
    HRESULT OnAfterCreated([in] DTE *DTEObject);

    [id(2), HELP(vsobjTOptPgGetProp)] 
    HRESULT GetProperties([in, out] IDispatch **PropertiesObject);

    [id(3), HELP(vsobjTOptPgOnOK)] 
    HRESULT OnOK();

    [id(4), HELP(vsobjTOptPgOnCancel)] 
    HRESULT OnCancel();

    [id(5), HELP(vsobjTOptPgOnHelp)] 
    HRESULT OnHelp();
  };


//======================== Environment Properties =======================

//======================== General =======================
  typedef [ uuid (705CD8AC-D29B-11D2-AABD-00C04F688DDE), HELP(vsenumStartUp) ]
  enum vsStartUp
  {
    vsStartUpShowHomePage       = 0,
    vsStartUpLoadLastSolution   = 1,
    vsStartUpOpenProjectDialog  = 2,
    vsStartUpNewProjectDialog   = 3,
    vsStartUpEmptyEnvironment   = 4
    /*vsStartUpOpenSolutionDialog = 4,*/
  } vsStartUp;

  typedef [ uuid (705CD8A4-D29B-11D2-AABD-00C04F688DDE), HELP(vsenumFontCharSet) ]
  enum vsFontCharSet 
  {
    vsFontCharSetANSI         = 0,
    vsFontCharSetDefault      = 1,
    vsFontCharSetSymbol       = 2,
    vsFontCharSetShiftJIS     = 128,
    vsFontCharSetHangeul      = 129,
    vsFontCharSetGB2312       = 134,
    vsFontCharSetChineseBig5  = 136,
    vsFontCharSetOEM          = 255,
    vsFontCharSetJohab        = 130,
    vsFontCharSetHebrew       = 177,
    vsFontCharSetArabic       = 178,
    vsFontCharSetGreek        = 161,
    vsFontCharSetTurkish      = 162,
    vsFontCharSetVietnamese   = 163,
    vsFontCharSetThai         = 222,
    vsFontCharSetEastEurope   = 238,
    vsFontCharSetRussian      = 204,
    vsFontCharSetMac          = 77,
    vsFontCharSetBaltic       = 186
  } vsFontCharSet;

  typedef [ uuid (947FFC03-8314-4288-BDD7-DFD282DA40D5), HELP(vsenumBrowserViewSource) ]
  enum vsBrowserViewSource
  {
    vsBrowserViewSourceSource = 1,
    vsBrowserViewSourceDesign = 2,
    vsBrowserViewSourceExternal = 3
  } vsBrowserViewSource;

  [ odl, dual, oleautomation, object, uuid(a3286b03-5ac6-44f0-8cc3-ebed7f1124e5), hidden ]
  interface _EnvironmentWebBrowser : IDispatch 
  { 

    [id(1), propput, HELP(vsextBrowsPropDefHome)]
    HRESULT UseDefaultHomePage(VARIANT_BOOL UseDefault);

    [id(1), propget, HELP(vsextBrowsPropDefHome)]
    HRESULT UseDefaultHomePage([out, retval] VARIANT_BOOL *pUseDefault);

    [id(2), propput, HELP(vsextBrowsHomeURL)]
    HRESULT HomePage(BSTR URL);

    [id(2), propget, HELP(vsextBrowsHomeURL)]
    HRESULT HomePage([out, retval] BSTR *URL);

    [id(3), propput, HELP(vsextBrowsPropDefSearch)]
    HRESULT UseDefaultSearchPage(VARIANT_BOOL UseDefault);

    [id(3), propget, HELP(vsextBrowsPropDefSearch)]
    HRESULT UseDefaultSearchPage([out, retval] VARIANT_BOOL *pUseDefault);

    [id(4), propput, HELP(vsextBrowsSearchURL)]
    HRESULT SearchPage(BSTR URL);

    [id(4), propget, HELP(vsextBrowsSearchURL)]
    HRESULT SearchPage([out, retval] BSTR *URL);

    [id(5), propput, HELP(vsextBrowsViewSrcIn)]
    HRESULT ViewSourceIn(vsBrowserViewSource Location);

    [id(5), propget, HELP(vsextBrowsViewSrcIn)]
    HRESULT ViewSourceIn([out, retval] vsBrowserViewSource *Location);

    [id(6), propput, HELP(vsextBrowsViewSrcPrg)]
    HRESULT ViewSourceExternalProgram(BSTR Path);

    [id(6), propget, HELP(vsextBrowsViewSrcPrg)]
    HRESULT ViewSourceExternalProgram([out, retval] BSTR *Path);
  };


  [ odl, dual, oleautomation, object, uuid(AEBDED64-A206-11d3-B8B5-00C04F79F802), hidden ]
  interface _EnvironmentHelp : IDispatch
  {
    [propget, id(DISPID_VALUE), HELP(vsextHelpPropPrefLang)]
    HRESULT PreferredLanguage([out, retval] LONG * LCID); 

    [propput, id(DISPID_VALUE), HELP(vsextHelpPropPrefLang)] 
    HRESULT PreferredLanguage([in] LONG LCID); 

    [propget, id(1), HELP(vsextHelpPropPrefCol)] 
    HRESULT PreferredCollection([out, retval] BSTR * NameSpace);

    [propput, id(1), HELP(vsextHelpPropPrefCol)] 
    HRESULT PreferredCollection([in] BSTR NameSpace); 

    [propget, id(2), HELP(vsextHelpPropExternal)] 
    HRESULT External([out, retval] VARIANT_BOOL * ExternalHelp);

    [propput, id(2), HELP(vsextHelpPropExternal)] 
    HRESULT External([in] VARIANT_BOOL ExternalHelp);
  };


  [ odl, dual, oleautomation, object, uuid(e5d17051-d6e5-4da7-8b3a-ca888617a5e7) ]
  interface ColorableItems : IDispatch 
  {
    [id(DISPID_VALUE), propget]
    HRESULT Name([out, retval] BSTR *pName);

    [id(1), propget, HELP(vsColorableItemsForegroundProp)]
    HRESULT Foreground([out, retval] OLE_COLOR *pColor);

    [id(1), propput, HELP(vsColorableItemsForegroundProp)]
    HRESULT Foreground(OLE_COLOR Color);

    [id(2), propget, HELP(vsColorableItemsBackgroundProp)]
    HRESULT Background([out, retval] OLE_COLOR *pColor);

    [id(2), propput, HELP(vsColorableItemsBackgroundProp)]
    HRESULT Background(OLE_COLOR Color);

    [id(3), propget, HELP(vsColorableItemsBoldProp)]
    HRESULT Bold([out, retval] VARIANT_BOOL *Bold);

    [id(3), propput, HELP(vsColorableItemsBoldProp)]
    HRESULT Bold(VARIANT_BOOL Bols);
  };

  [ odl, dual, oleautomation, object, uuid(f25ae7e6-1460-4ba4-8e5e-bbbe746de353), HELP(vsobjFontsAndColorsItems) ]
  interface FontsAndColorsItems : IDispatch 
  {
    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] ColorableItems **pFontsAndColorsItem);

    [id(1), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long * pCount);
  };

  [ odl, dual, oleautomation, object, uuid(256068f6-1add-4f7b-ba76-571314c413ad), hidden ]
  interface _FontsAndColors : IDispatch 
  {
    [id(1), propget, HELP(vsproFontFamilyPropEnv)]
    HRESULT FontFamily([out, retval] BSTR *pFamily);

    [id(1), propput, HELP(vsproFontFamilyPropEnv)]
    HRESULT FontFamily(BSTR Family);

    [id(2), propget, HELP(vsproFontCharacterSetPropEnv)]
    HRESULT FontCharacterSet([out, retval] vsFontCharSet *pFontCharSet);

    [id(2), propput, HELP(vsproFontCharacterSetPropEnv)]
    HRESULT FontCharacterSet(vsFontCharSet FontCharSet);

    [id(3), propget, HELP(vsproFontSizePropEnv)]
    HRESULT FontSize([out, retval] short *pSize);

    [id(3), propput, HELP(vsproFontSizePropEnv)]
    HRESULT FontSize(short Size);

    [id(4), propget, HELP(vsFontsAndColorsItemsProp)]
    HRESULT FontsAndColorsItems([out, retval] FontsAndColorsItems **ppColorableItems);
  };

  [ odl, dual, oleautomation, object, uuid(48e61d9c-8c8d-42d3-914b-46d70c8b7a40), hidden ]
  interface _EnvironmentGeneral : IDispatch 
  { 

    [id(1), propput, HELP(vsproOnStartupProperty)]
    HRESULT OnStartUp([in] vsStartUp startup );

    [id(1), propget, HELP(vsproOnStartupProperty)]
    HRESULT OnStartUp([out, retval] vsStartUp * pstartup);

    //Per bug Vegas # 14013  [id(2), propput]
    //Per bug Vegas # 14013  HRESULT DefaultWebBrowser([in] BSTR bstr );

    //Per bug Vegas # 14013  [id(2), propget]
    //Per bug Vegas # 14013  HRESULT DefaultWebBrowser([out, retval] BSTR * pbstr);

    [id(2), propput, HELP(vsproShowStatusBarProperty)]
    HRESULT ShowStatusBar([in] VARIANT_BOOL fshow);

    [id(2), propget, HELP(vsproShowStatusBarProperty)]
    HRESULT ShowStatusBar([out, retval] VARIANT_BOOL * pfshow);

    /*[propput, HELP(vsproAutoReloadExternallyModifiedFilesProperty)]
    HRESULT DetectFileChangesOutsideIDE([in] VARIANT_BOOL fAutoRead);

    [propget, HELP(vsproAutoReloadExternallyModifiedFilesProperty)]
    HRESULT DetectFileChangesOutsideIDE([out, retval] VARIANT_BOOL * pfAutoRead);*/

    [id(3), propput, HELP(vsproWindowMenuContainsNItemsProperty)]
    HRESULT WindowMenuContainsNItems([in] long lCount);

    [id(3), propget, HELP(vsproWindowMenuContainsNItemsProperty)]
    HRESULT WindowMenuContainsNItems([out, retval] long * plCount);

    [id(4), propput, HELP(vsproMRUListContainsNItemsProperty)]
    HRESULT MRUListContainsNItems([in] long lCount);

    [id(4), propget, HELP(vsproMRUListContainsNItemsProperty)]
    HRESULT MRUListContainsNItems([out, retval] long * plCount);

    /*[propget, HELP(vsproFontFamilyPropEnv)]
    HRESULT FontFamily([out, retval] BSTR * pbstr);

    [propget, HELP(vsproFontCharacterSetPropEnv)]
    HRESULT FontCharacterSet([out, retval] vsFontCharSet * pfcs);

    [propget, HELP(vsproFontSizePropEnv)]
    HRESULT FontSize([out, retval] short * pshort);*/

    [id(5), propget, HELP(vsextEnvGenAnimSpeed)]
    HRESULT AnimationSpeed([out, retval] short *pSpeed);

    [id(5), propput, HELP(vsextEnvGenAnimSpeed)]
    HRESULT AnimationSpeed(short Speed);

    [id(6), propget, HELP(vsextEnvGenAnim)]
    HRESULT Animations([out, retval] VARIANT_BOOL *pAnimations);
    
    [id(6), propput, HELP(vsextEnvGenAnim)]
    HRESULT Animations(VARIANT_BOOL Animations);

    [id(7), propget, HELP(vsextEnvGenCmdWinCompletion)]
    HRESULT ShowCommandWindowCompletion([out, retval] VARIANT_BOOL *pComplete);
    
    [id(7), propput, HELP(vsextEnvGenCmdWinCompletion)]
    HRESULT ShowCommandWindowCompletion(VARIANT_BOOL Complete);

    /*[id(8), propput, HELP(vsextEnvGenReuseWin)]
    HRESULT ReuseDocumentWindowIfSaved(VARIANT_BOOL Reuse);

    [id(8), propget, HELP(vsextEnvGenReuseWin)]
    HRESULT ReuseDocumentWindowIfSaved([out, retval] VARIANT_BOOL *pReuse);*/

    [id(11), propput /*HELP()*/]
    HRESULT CloseButtonActiveTabOnly(VARIANT_BOOL CloseActiveOnly);

    [id(11), propget /*HELP()*/]
    HRESULT CloseButtonActiveTabOnly([out, retval] VARIANT_BOOL *CloseActiveOnly);

    [id(12), propput /*HELP()*/]
    HRESULT AutohidePinActiveTabOnly(VARIANT_BOOL AutohidePinActiveOnly);

    [id(12), propget /*HELP()*/]
    HRESULT AutohidePinActiveTabOnly([out, retval] VARIANT_BOOL *AutohidePinActiveOnly);
  }

  [ odl, dual, oleautomation, object, uuid(f809cab6-2c9f-41f2-a5af-e26fb80e62ad), hidden ]
  interface _EnvironmentFontsAndColors : IDispatch
  {
    /*[id(1), propput, HELP(vsproFileNamePropDTEPropColn)]
    HRESULT StoreToFileName([in] BSTR bstr);

    [id(2), propput, HELP(vsproFileNamePropDTEPropColn)]
    HRESULT ReadFromFileName([in] BSTR * pbstr);*/
  }


  //======================== Saving =======================
  /*[ odl, dual, oleautomation, object, uuid(350e526d-2e95-4e8d-8018-72b73acee8aa), hidden ]
  interface _EnvironmentSaving : IDispatch 
  {

    [propput, HELP(vsproOnRunOrPreviewProperty)]
    HRESULT OnRunOrPreview([in] vsSaveChanges bld);

    [propget, HELP(vsproOnRunOrPreviewProperty)]
    HRESULT OnRunOrPreview([out, retval] vsSaveChanges * pbld);

    [propput, HELP(vsproMiscFilesProjectSavesLastNItemsProperty)]
    HRESULT MiscFilesProjectSavesLastNItems([in] long lCount);

    [propget, HELP(vsproMiscFilesProjectSavesLastNItemsProperty)]
    HRESULT MiscFilesProjectSavesLastNItems([out, retval] long * plCount);
  }*/

  //======================== ProjectsAndSolution =======================
  [ odl, dual, oleautomation, object, uuid(478f06d4-5d57-473f-9b74-5f8e88efa5e7), hidden ]
  interface _EnvironmentProjectsAndSolution : IDispatch 
  {
    [id(1), propput, HELP(vsproOnRunOrPreviewProperty)]
    HRESULT OnRunOrPreview([in] vsSaveChanges bld);

    [id(1), propget, HELP(vsproOnRunOrPreviewProperty)]
    HRESULT OnRunOrPreview([out, retval] vsSaveChanges * pbld);

    [id(2), propput]
    HRESULT ProjectsLocation([in] BSTR Location);

    [id(2), propget]
    HRESULT ProjectsLocation([out, retval] BSTR *pLocation);

    [id(3), propput]
    HRESULT ShowOutputWindowBeforeBuild([in] VARIANT_BOOL fShow);

    [id(3), propget]
    HRESULT ShowOutputWindowBeforeBuild([out, retval] VARIANT_BOOL * pfShow);

    [id(4), propput]
    HRESULT ShowTaskListAfterBuild([in] VARIANT_BOOL fShow);

    [id(4), propget]
    HRESULT ShowTaskListAfterBuild([out, retval] VARIANT_BOOL * pfShow);
  }

  //======================== Documents =======================
  [ odl, dual, oleautomation, object, uuid(76ed1c48-ed86-4e9e-acf8-a40e765daf25), hidden ]
  interface _EnvironmentDocuments : IDispatch 
  {

    [id(1), propput, HELP(vsextEnvGenReuseWin)]
    HRESULT ReuseSavedActiveDocWindow(VARIANT_BOOL Reuse);

    [id(1), propget, HELP(vsextEnvGenReuseWin)]
    HRESULT ReuseSavedActiveDocWindow([out, retval] VARIANT_BOOL *pReuse);

    [id(2), propput, HELP(vsproAutoReloadExternallyModifiedFilesProperty)]
    HRESULT DetectFileChangesOutsideIDE([in] VARIANT_BOOL fAutoRead);

    [id(2), propget, HELP(vsproAutoReloadExternallyModifiedFilesProperty)]
    HRESULT DetectFileChangesOutsideIDE([out, retval] VARIANT_BOOL * pfAutoRead);

    [id(3), propput]
    HRESULT AutoloadExternalChanges([in] VARIANT_BOOL fAutoload);

    [id(3), propget]
    HRESULT AutoloadExternalChanges([out, retval] VARIANT_BOOL * pfAutoload);

    [id(4), propput]
    HRESULT InitializeOpenFileFromCurrentDocument([in] VARIANT_BOOL fInit);

    [id(4), propget]
    HRESULT InitializeOpenFileFromCurrentDocument([out, retval] VARIANT_BOOL * pfInit);

    [id(5), propput, HELP(vsproMiscFilesProjectSavesLastNItemsProperty)]
    HRESULT MiscFilesProjectSavesLastNItems([in] long lCount);

    [id(5), propget, HELP(vsproMiscFilesProjectSavesLastNItemsProperty)]
    HRESULT MiscFilesProjectSavesLastNItems([out, retval] long * plCount);

	[id(6), propget, HELP(vsextEnvGenFindReplShowMsgboxs)]
    HRESULT FindReplaceShowMessageBoxes([out, retval] VARIANT_BOOL *pShow);

    [id(6), propput, HELP(vsextEnvGenFindReplShowMsgboxs)]
    HRESULT FindReplaceShowMessageBoxes(VARIANT_BOOL Show);

    [id(7), propget, HELP(vsextEnvGenFindReplInitFromEditor)]
    HRESULT FindReplaceInitializeFromEditor([out, retval] VARIANT_BOOL *pShow);

    [id(7), propput, HELP(vsextEnvGenFindReplInitFromEditor)]
    HRESULT FindReplaceInitializeFromEditor(VARIANT_BOOL Show);
  }


  //======================== Windows =======================
  /*[ odl, dual, oleautomation, object, uuid(05b2fda4-5aa9-4bae-927d-3dd2b38b66ff), hidden ]
  interface _EnvironmentWindows : IDispatch
  {
  }*/
  //If you change this guid, change the corresponding one in env\codewin\taskopts.cpp
  /*typedef [uuid(d443258c-1814-4e8a-970c-bad240ee0589)]
  struct vsCommentTokens
  {
    BSTR Name;
    vsTaskPriority Priority;
  } vsCommentTokens;*/

  //======================== Windows =======================
  [ odl, dual, oleautomation, object, uuid(4bc18a5b-dbb6-4af5-a443-2e3f19365304), hidden ]
  interface _EnvironmentTaskList : IDispatch
  {
    [id(1), propget, HELP(vsextTLPropConfirmDel)]
    HRESULT ConfirmTaskDeletion([out, retval] VARIANT_BOOL *pConfirm);

    [id(1), propput, HELP(vsextTLPropConfirmDel)]
    HRESULT ConfirmTaskDeletion(VARIANT_BOOL Confirm);

    [id(2), propget, HELP(vsextTLWrnAddHidden)]
    HRESULT WarnOnAddingHiddenItem([out, retval] VARIANT_BOOL *pWarn);

    [id(2), propput, HELP(vsextTLWrnAddHidden)]
    HRESULT WarnOnAddingHiddenItem(VARIANT_BOOL Warn);

    [id(3), propget, HELP(vsextTLCommentToks)]
    HRESULT CommentTokens([out, retval] VARIANT *pTokens);

    [id(3), propput, HELP(vsextTLCommentToks)]
    HRESULT CommentTokens(VARIANT Tokens);
    
  }


  //======================== Keyboard =======================
  [ odl, dual, oleautomation, object, uuid(9c722678-490d-408f-98ae-b6b9a68aa45d), hidden ]
  interface _EnvironmentKeyboard : IDispatch
  {
    [id(1), propput, HELP(vsproFileNamePropDTEPropColn)]
    HRESULT Scheme([in] BSTR bstr);

    [id(1), propget, HELP(vsproFileNamePropDTEPropColn)]
    HRESULT Scheme([out, retval] BSTR * pbstr);

    /*[id(2), propput, HELP(vsproFileNamePropDTEPropColn)]
    HRESULT StoreToFileName([in] BSTR bstr);

    [id(3), propput, HELP(vsproFileNamePropDTEPropColn)]
    HRESULT ReadFromFileName([in] BSTR pbstr);*/
  }


  [ uuid(eb5be8a7-e593-4de6-a923-c2afecb96336), version(1.0), odl, hidden, restricted ]
  interface IExtensibleObjectSite : IUnknown
  {
    HRESULT NotifyDelete( [in] IUnknown *punkObj);
  }


  [ uuid(86c31347-5b52-4715-b454-a6e5fcab975d), version(1.0), odl, hidden, restricted ]
  interface IExtensibleObject : IUnknown
  {
    HRESULT GetAutomationObject([in] BSTR  Name, [in] IExtensibleObjectSite  *pParent,  [out] IDispatch **ppDisp);
  }

  [uuid(8cc0cde1-c16a-4749-99af-6f7523c34a57), version(1.0), odl, hidden, restricted]
  interface IVsProfferCommands : IUnknown
  {
    HRESULT AddNamedCommand ([in] const GUID *pguidPackage, [in] const GUID *pguidCmdGroup, [in, string] const LPCOLESTR pszCmdNameCanonical,
                             [out] DWORD *pdwCmdId, [in, string] const LPCOLESTR pszCmdNameLocalized,
                             [in, string] const LPCOLESTR pszBtnText, [in, string] const LPCOLESTR pszCmdTooltip,
                             [in, string] const LPCOLESTR pszSatelliteDLL, [in] DWORD dwBitmapResourceId, [in] DWORD dwBitmapImageIndex,
                             [in] DWORD dwCmdFlagsDefault, [in] DWORD cUIContexts, [in, size_is(cUIContexts)] const GUID *rgguidUIContexts);

    HRESULT RemoveNamedCommand ([in, string] const LPCOLESTR pszCmdNameCanonical);

    HRESULT RenameNamedCommand ([in, string] const LPCOLESTR pszCmdNameCanonical, [in, string] const LPCOLESTR pszCmdNameCanonicalNew,
                                [in, string] const LPCOLESTR pszCmdNameLocalizedNew);

    HRESULT AddCommandBarControl ([in, string] const LPCOLESTR pszCmdNameCanonical, [in] IDispatch *pCmdBarParent, [in] DWORD dwIndex,
                                  [in] DWORD dwCmdType, [out] IDispatch **ppCmdBarCtrl);

    HRESULT RemoveCommandBarControl ([in] IDispatch *pCmdBarCtrl);

    HRESULT AddCommandBar ([in, string] const LPCOLESTR pszCmdBarName, [in] vsCommandBarType dwType, [in] IDispatch *pCmdBarParent, [in] DWORD dwIndex, [out] IDispatch **ppCmdBar);

    HRESULT RemoveCommandBar ([in] IDispatch *pCmdBar);

    HRESULT FindCommandBar ([in] void *pToolbarSet, [in] const GUID *pguidCmdGroup, [in] DWORD dwMenuId, [out, retval] IDispatch **ppdispCmdBar);
  }

  /*[ uuid(b8261c94-1bdb-4240-aee2-87067a51a646), dllname(XSTRING(PRODBIN)) ] 
  module vsDocumentKind
  {
    const LPSTR vsDocumentKindText                    = "{8E7B96A8-E33D-11D0-A6D5-00C04FB67F6A}";
    const LPSTR vsDocumentKindHTML                    = "{C76D83F8-A489-11D0-8195-00A0C91BBEE3}";
    const LPSTR vsDocumentKindResource                = "{00000000-0000-0000-0000-000000000000}";
    const LPSTR vsDocumentKindBinary                  = "{25834150-CD7E-11D0-92DF-00A0C9138C45}";    
  }

  [ uuid(c5c22de6-2517-4923-b416-c14ea2c59f9d), dllname(XSTRING(PRODBIN)) ] 
  module vsViewKind
  {
    const LPSTR vsViewKindPrimary                     = "{00000000-0000-0000-0000-000000000000}";
    const LPSTR vsViewKindAny                         = "{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}";
    const LPSTR vsViewKindDebugging                   = "{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsViewKindCode                        = "{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsViewKindDesigner                    = "{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsViewKindTextView                    = "{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";
  }

  [ uuid(8629006f-16dc-4602-82f8-9c9b6c56e895), dllname(XSTRING(PRODBIN)) ] 
  module vsWindowKind
  {
    // NOTE: If you add or remove any vsWindowKind* constants, please update g_gcmap
    // in iderecsvc.cpp.  It is used when recording to output macro code using the named
    // constants instead of raw GUIDs.
    // NOTE: Please make all GUIDs entered here upper case!!!
    const LPSTR vsWindowKindTaskList                  = "{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}"; //GUID in V6 was, is this correct? "{7651A704-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsWindowKindToolbox                   = "{B1E99781-AB81-11D0-B683-00AA00A3EE26}";
    const LPSTR vsWindowKindCallStack                 = "{0504FF91-9D61-11D0-A794-00A0C9110051}";
    const LPSTR vsWindowKindThread                    = "{E62CE6A0-B439-11D0-A79D-00A0C9110051}";
    const LPSTR vsWindowKindLocals                    = "{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";
    const LPSTR vsWindowKindAutoLocals                = "{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";
    const LPSTR vsWindowKindWatch                     = "{90243340-BD7A-11D0-93EF-00A0C90F2734}";
    //const LPSTR vsWindowKindImmediate                 = "{98731960-965C-11D0-A78F-00A0C9110051}";
    const LPSTR vsWindowKindProperties                = "{EEFA5220-E298-11D0-8F78-00A0C9110057}";
    const LPSTR vsWindowKindSolutionExplorer          = "{3AE79031-E1BC-11D0-8F78-00A0C9110057}";
    const LPSTR vsWindowKindOutput                    = "{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";
    const LPSTR vsWindowKindObjectBrowser             = "{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";
    const LPSTR vsWindowKindMacroExplorer             = "{07CD18B4-3BA1-11D2-890A-0060083196C6}";
    const LPSTR vsWindowKindDynamicHelp               = "{66DBA47C-61DF-11D2-AA79-00C04F990343}";
    const LPSTR vsWindowKindClassView                 = "{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";
    const LPSTR vsWindowKindResourceView              = "{2D7728C2-DE0A-45b5-99AA-89B609DFDE73}";
    const LPSTR vsWindowKindDocumentOutline           = "{25F7E850-FFA1-11D0-B63F-00A0C922E851}";
    const LPSTR vsWindowKindServerExplorer            = "{74946827-37A0-11D2-A273-00C04F8EF4FF}";
    const LPSTR vsWindowKindCommandWindow             = "{28836128-FC2C-11D2-A433-00C04F72D18A}";
    const LPSTR vsWindowKindFindSymbol                = "{53024D34-0EF5-11D3-87E0-00C04F7971A5}";
    const LPSTR vsWindowKindFindSymbolResults         = "{68487888-204A-11D3-87EB-00C04F7971A5}";
    const LPSTR vsWindowKindFindReplace               = "{CF2DDC32-8CAD-11D2-9302-005345000000}";
    const LPSTR vsWindowKindFindReplaceInFiles        = "{E830EC50-C2B5-11D2-9375-0080C747D9A0}";
    const LPSTR vsWindowKindFindResults1              = "{0F887920-C2B6-11D2-9375-0080C747D9A0}";
    const LPSTR vsWindowKindFindResults2              = "{0F887921-C2B6-11D2-9375-0080C747D9A0}";
    const LPSTR vsWindowKindMainWindow                = "{9DDABE98-1D02-11D3-89A1-00C04F688DDE}";
    const LPSTR vsWindowKindLinkedWindowFrame         = "{9DDABE99-1D02-11D3-89A1-00C04F688DDE}";
    const LPSTR vsWindowKindWebBrowser                = "{E8B06F52-6D01-11D2-AA7D-00C04F990343}";
    const LPSTR vsWizardAddSubProject                 = "{0F90E1D2-4999-11D1-B6D1-00A0C90F2744}";
    const LPSTR vsWizardAddItem                       = "{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";
    const LPSTR vsWizardNewProject                    = "{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";
  }

  [ uuid(223bc942-fd95-4f29-aa27-79667462c8a6), dllname(XSTRING(PRODBIN)) ] 
  module vsContext
  {
    const LPSTR vsContextSolutionBuilding             = "{ADFC4E60-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextDebugging                    = "{ADFC4E61-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextFullScreenMode               = "{ADFC4E62-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextDesignMode                   = "{ADFC4E63-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextNoSolution                   = "{ADFC4E64-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextEmptySolution                = "{ADFC4E65-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextSolutionHasSingleProject     = "{ADFC4E66-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextSolutionHasMultipleProjects  = "{93694FA0-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextMacroRecording               = "{04BBF6A5-4697-11D2-890E-0060083196C6}";
    const LPSTR vsContextMacroRecordingToolbar        = "{85A70471-270A-11D2-88F9-0060083196C6}";
  }*/

	[ uuid(7bc6a78f-28da-4639-856c-88ea7a3f4cc0), dllname(XSTRING(PRODBIN)) ] 
  module vsTaskCategories
  {
		const LPSTR vsTaskCategoryBuildCompile = "BuildCompile";
		const LPSTR vsTaskCategoryComment = "Comment";
		const LPSTR vsTaskCategoryShortcut = "Shortcut";
		const LPSTR vsTaskCategoryUser = "User";
		const LPSTR vsTaskCategoryMisc = "Misc";
		const LPSTR vsTaskCategoryHTML = "HTML";
	};

  [ uuid(b1ab3125-0744-4b46-aa7a-8902e36d2e15), dllname(XSTRING(PRODBIN)) ] 
  module Constants
  {
    const LPSTR vsDocumentKindText                    = "{8E7B96A8-E33D-11D0-A6D5-00C04FB67F6A}";
    const LPSTR vsDocumentKindHTML                    = "{C76D83F8-A489-11D0-8195-00A0C91BBEE3}";
    const LPSTR vsDocumentKindResource                = "{00000000-0000-0000-0000-000000000000}";
    const LPSTR vsDocumentKindBinary                  = "{25834150-CD7E-11D0-92DF-00A0C9138C45}";

    const LPSTR vsViewKindPrimary                     = "{00000000-0000-0000-0000-000000000000}";
    const LPSTR vsViewKindAny                         = "{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}";
    const LPSTR vsViewKindDebugging                   = "{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsViewKindCode                        = "{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsViewKindDesigner                    = "{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsViewKindTextView                    = "{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";

    // NOTE: If you add or remove any vsWindowKind* constants, please update g_gcmap
    // in iderecsvc.cpp.  It is used when recording to output macro code using the named
    // constants instead of raw GUIDs.
    // NOTE: Please make all GUIDs entered here upper case!!!
    const LPSTR vsWindowKindTaskList                  = "{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}"; //GUID in V6 was, is this correct? "{7651A704-06E5-11D1-8EBD-00A0C90F26EA}";
    const LPSTR vsWindowKindToolbox                   = "{B1E99781-AB81-11D0-B683-00AA00A3EE26}";
    const LPSTR vsWindowKindCallStack                 = "{0504FF91-9D61-11D0-A794-00A0C9110051}";
    const LPSTR vsWindowKindThread                    = "{E62CE6A0-B439-11D0-A79D-00A0C9110051}";
    const LPSTR vsWindowKindLocals                    = "{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";
    const LPSTR vsWindowKindAutoLocals                = "{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";
    const LPSTR vsWindowKindWatch                     = "{90243340-BD7A-11D0-93EF-00A0C90F2734}";
    //const LPSTR vsWindowKindImmediate                 = "{98731960-965C-11D0-A78F-00A0C9110051}";
    const LPSTR vsWindowKindProperties                = "{EEFA5220-E298-11D0-8F78-00A0C9110057}";
    const LPSTR vsWindowKindSolutionExplorer           = "{3AE79031-E1BC-11D0-8F78-00A0C9110057}";
    const LPSTR vsWindowKindOutput                    = "{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";
    const LPSTR vsWindowKindObjectBrowser             = "{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";
    const LPSTR vsWindowKindMacroExplorer             = "{07CD18B4-3BA1-11D2-890A-0060083196C6}";
    const LPSTR vsWindowKindDynamicHelp               = "{66DBA47C-61DF-11D2-AA79-00C04F990343}";
    const LPSTR vsWindowKindClassView                 = "{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";
    const LPSTR vsWindowKindResourceView              = "{2D7728C2-DE0A-45b5-99AA-89B609DFDE73}";
    const LPSTR vsWindowKindDocumentOutline           = "{25F7E850-FFA1-11D0-B63F-00A0C922E851}";
    const LPSTR vsWindowKindServerExplorer            = "{74946827-37A0-11D2-A273-00C04F8EF4FF}";
    const LPSTR vsWindowKindCommandWindow             = "{28836128-FC2C-11D2-A433-00C04F72D18A}";
    const LPSTR vsWindowKindFindSymbol                = "{53024D34-0EF5-11D3-87E0-00C04F7971A5}";
    const LPSTR vsWindowKindFindSymbolResults         = "{68487888-204A-11D3-87EB-00C04F7971A5}";
    const LPSTR vsWindowKindFindReplace               = "{CF2DDC32-8CAD-11D2-9302-005345000000}";
    //const LPSTR vsWindowKindFindReplaceInFiles        = "{E830EC50-C2B5-11D2-9375-0080C747D9A0}";
    const LPSTR vsWindowKindFindResults1              = "{0F887920-C2B6-11D2-9375-0080C747D9A0}";
    const LPSTR vsWindowKindFindResults2              = "{0F887921-C2B6-11D2-9375-0080C747D9A0}";
    const LPSTR vsWindowKindMainWindow                = "{9DDABE98-1D02-11D3-89A1-00C04F688DDE}";
    const LPSTR vsWindowKindLinkedWindowFrame         = "{9DDABE99-1D02-11D3-89A1-00C04F688DDE}";
    const LPSTR vsWindowKindWebBrowser                = "{E8B06F52-6D01-11D2-AA7D-00C04F990343}";
    const LPSTR vsWizardAddSubProject                 = "{0F90E1D2-4999-11D1-B6D1-00A0C90F2744}";
    const LPSTR vsWizardAddItem                       = "{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";
    const LPSTR vsWizardNewProject                    = "{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";
                                                      
    const LPSTR vsProjectKindMisc                     = "{66A2671D-8FB5-11D2-AA7E-00C04F688DDE}";
    const LPSTR vsProjectItemsKindMisc                = "{66A2671E-8FB5-11D2-AA7E-00C04F688DDE}";
    const LPSTR vsProjectItemKindMisc                 = "{66A2671F-8FB5-11D2-AA7E-00C04F688DDE}";
    const LPSTR vsProjectKindUnmodeled                = "{67294A52-A4F0-11D2-AA88-00C04F688DDE}";

    const LPSTR vsProjectKindSolutionItems            = "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";
    const LPSTR vsProjectItemsKindSolutionItems       = "{66A26721-8FB5-11D2-AA7E-00C04F688DDE}";
    const LPSTR vsProjectItemKindSolutionItems        = "{66A26722-8FB5-11D2-AA7E-00C04F688DDE}";

    const LPSTR vsProjectsKindSolution                = "{96410B9F-3542-4A14-877F-BC7227B51D3B}";

    const LPSTR vsAddInCmdGroup                       = "{1E58696E-C90F-11D2-AAB2-00C04F688DDE}";

    const LPSTR vsContextSolutionBuilding             = "{ADFC4E60-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextDebugging                    = "{ADFC4E61-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextFullScreenMode               = "{ADFC4E62-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextDesignMode                   = "{ADFC4E63-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextNoSolution                   = "{ADFC4E64-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextEmptySolution                = "{ADFC4E65-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextSolutionHasSingleProject     = "{ADFC4E66-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextSolutionHasMultipleProjects  = "{93694FA0-0397-11D1-9F4E-00A0C911004F}";
    const LPSTR vsContextMacroRecording               = "{04BBF6A5-4697-11D2-890E-0060083196C6}";
    const LPSTR vsContextMacroRecordingToolbar        = "{85A70471-270A-11D2-88F9-0060083196C6}";

    const LPSTR vsMiscFilesProjectUniqueName          = "<MiscFiles>";
    const LPSTR vsSolutionItemsProjectUniqueName      = "<SolnItems>";

    const LPSTR vsProjectItemKindPhysicalFile         = "{6BB5F8EE-4483-11D3-8BCF-00C04F8EC28C}";
    const LPSTR vsProjectItemKindPhysicalFolder       = "{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}";
    const LPSTR vsProjectItemKindVirtualFolder        = "{6BB5F8F0-4483-11D3-8BCF-00C04F8EC28C}";
    const LPSTR vsProjectItemKindSubProject           = "{EA6618E8-6E24-4528-94BE-6889FE16485C}";

    //Begin Backward compatible constants:
    [hidden] const LPSTR vsext_vk_Primary             = "{00000000-0000-0000-0000-000000000000}";
    [hidden] const LPSTR vsext_vk_Debugging           = "{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";
    [hidden] const LPSTR vsext_vk_Code                = "{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";
    [hidden] const LPSTR vsext_vk_Designer            = "{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";
    [hidden] const LPSTR vsext_vk_TextView            = "{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";
    [hidden] const LPSTR vsext_wk_TaskList            = "{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}"; //GUID in V6 was, is this correct? "{7651A704-06E5-11D1-8EBD-00A0C90F26EA}";
    [hidden] const LPSTR vsext_wk_Toolbox             = "{B1E99781-AB81-11D0-B683-00AA00A3EE26}";
    [hidden] const LPSTR vsext_wk_CallStackWindow     = "{0504FF91-9D61-11D0-A794-00A0C9110051}";
    [hidden] const LPSTR vsext_wk_ThreadWindow        = "{E62CE6A0-B439-11D0-A79D-00A0C9110051}";
    [hidden] const LPSTR vsext_wk_LocalsWindow        = "{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";
    [hidden] const LPSTR vsext_wk_AutoLocalsWindow    = "{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";
    [hidden] const LPSTR vsext_wk_WatchWindow         = "{90243340-BD7A-11D0-93EF-00A0C90F2734}";
    [hidden] const LPSTR vsext_wk_ImmedWindow         = "{98731960-965C-11D0-A78F-00A0C9110051}";
    [hidden] const LPSTR vsext_wk_PropertyBrowser     = "{EEFA5220-E298-11D0-8F78-00A0C9110057}";
    [hidden] const LPSTR vsext_wk_SProjectWindow      = "{3AE79031-E1BC-11D0-8F78-00A0C9110057}";
    [hidden] const LPSTR vsext_wk_OutputWindow        = "{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";
    [hidden] const LPSTR vsext_wk_ObjectBrowser       = "{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";
    [hidden] const LPSTR vsext_wk_ContextWindow       = "{66DBA47C-61DF-11D2-AA79-00C04F990343}";
    [hidden] const LPSTR vsext_wk_ClassView           = "{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";

    [hidden] const LPSTR vsext_GUID_AddItemWizard     = "{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";
    [hidden] const LPSTR vsext_GUID_NewProjectWizard  = "{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";

    [hidden] const LPSTR dsCPP                        = "C/C++";
    [hidden] const LPSTR dsHTML_IE3                   = "HTML - IE 3.0";
    [hidden] const LPSTR dsHTML_RFC1866               = "HTML 2.0 (RFC 1866)";
    [hidden] const LPSTR dsFortran_Fixed              = "Fortran Fixed";
    [hidden] const LPSTR dsFortran_Free               = "Fortran Free";
    [hidden] const LPSTR dsJava                       = "Java";
    [hidden] const LPSTR dsVBSMacro                   = "VBS Macro";
    [hidden] const LPSTR dsIDL                        = "ODL/IDL";
    //End Backward compatible constants:
 

		// Standard Shell Automation Extender CATIDs - see section below for guid defines
		
		
    [helpstring("Solution Automation object CATID")]                const LPSTR vsCATIDSolution							= "{52AEFF70-BBD8-11d2-8598-006097C68E81}";
    [helpstring("Solution Browse Object CATID ")]                   const LPSTR vsCATIDSolutionBrowseObject	= "{A2392464-7C22-11d3-BDCA-00C04F688E50}";
    [helpstring("Misc Files Project Automation Object CATID")]      const LPSTR vsCATIDMiscFilesProject			= "{610d4612-d0d5-11d2-8599-006097c68e81}";  
    [helpstring("Misc Files Project Item Automation Object CATID")] const LPSTR vsCATIDMiscFilesProjectItem	= "{610d4613-d0d5-11d2-8599-006097c68e81}";
    [helpstring("Generic Project Automation Object CATID")]         const LPSTR vsCATIDGenericProject				= "{610d4616-d0d5-11d2-8599-006097c68e81}";
    [helpstring("(Generic) Document Automation Object CATID")]      const LPSTR vsCATIDDocument							= "{610d4611-d0d5-11d2-8599-006097c68e81}";
    //TODO: Misc Files Project Browse Object CATID
    //TODO: Misc Files Project Item Browse Object CATID
  }


  // Standard Shell Automation Extender CATIDs
  cpp_quote("// Standard Shell Automation Extender CATIDs")
  cpp_quote("// These are the intrinsic extender CATIDs for the automation and the property")
  cpp_quote("// browser IDispatch objects implemented by the shell that suppport Automation")
  cpp_quote("// Extenders. For other implementation specific extender CATIDs (for eg. VB, VC)")
  cpp_quote("// look in those specific headers")
  cpp_quote("//")
  cpp_quote("// Also note that the object (IDispatch) used for automation is typically")
  cpp_quote("// different than the one used for Property Browsing. For instance, the")
  cpp_quote("// DTE.Solution automation object is different than the object used to populate")
  cpp_quote("// the property browser when the solution node is selected in the project")
  cpp_quote("// explorer. Hence, the two objects used DIFFERENT intrinsic CATIDs")
  cpp_quote("// (guidCATIDSolution for the Solution automation object and")
  cpp_quote("// guidCATIDSolutionBrowseObject for the Solution's property browse object)")
			
  cpp_quote("// Solution Automation object CATID {52AEFF70-BBD8-11d2-8598-006097C68E81}")
  cpp_quote("DEFINE_GUID(guidCATIDSolution,						0x52aeff70, 0xbbd8, 0x11d2, 0x85, 0x98, 0x0, 0x60, 0x97, 0xc6, 0x8e, 0x81);")
	
  cpp_quote("// Solution Browse Object CATID {A2392464-7C22-11d3-BDCA-00C04F688E50}")
  cpp_quote("DEFINE_GUID(guidCATIDSolutionBrowseObject, 0xa2392464, 0x7c22, 0x11d3, 0xbd, 0xca, 0x0, 0xc0, 0x4f, 0x68, 0x8e, 0x50);")

  cpp_quote("// Misc Files Project Automation Object CATID {610d4612-d0d5-11d2-8599-006097c68e81}")
  cpp_quote("DEFINE_GUID(guidCATIDMiscFilesProject,		0x610d4612, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);")

  //$UNDONE: Misc Files Project Browse Object CATID

  cpp_quote("// Misc Files Project Item Automation Object CATID {610d4613-d0d5-11d2-8599-006097c68e81")
  cpp_quote("DEFINE_GUID(guidCATIDMiscFilesProjectItem, 0x610d4613, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);")

  //$UNDONE: Misc Files Project Item Browse Object CATID

  cpp_quote("// Generic Project Automation Object CATID {610d4616-d0d5-11d2-8599-006097c68e81}")
  cpp_quote("DEFINE_GUID(guidCATIDGenericProject,			0x610d4616, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);")

  cpp_quote("// (Generic) Document Automation Object CATID {610d4611-d0d5-11d2-8599-006097c68e81}")	
  cpp_quote("DEFINE_GUID(guidCATIDDocument,						0x610d4611, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);")



  typedef [ uuid(28362492-b1e3-4998-94c6-0a2cdb5484ed), HELP(vsenumUISelectionType)]
  enum vsUISelectionType
  {
    vsUISelectionTypeSelect   = 1,
    vsUISelectionTypeToggle   = 2,
    vsUISelectionTypeExtend   = 3,
    vsUISelectionTypeSetCaret = 4
  } vsUISelectionType;

  [ uuid(fbd0d024-09cd-4d9f-9e2b-cacd628426a5), odl, dual, HELP(vsobjUIHierarchyItem) ]
  interface UIHierarchyItem : IDispatch 
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproCollectionProperty)] 
    HRESULT Collection([out, retval] UIHierarchyItems **ppUIHierarchyItems);
    
    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)] 
    HRESULT Name([out, retval] BSTR * pbstrName);

    [id(3), propget, HELP(vsproUIHierarchyItems)] 
    HRESULT UIHierarchyItems([out, retval] UIHierarchyItems **ppUIHierarchyItems);

    [id(4), propget, HELP(vsproObjectUIHierarchyItem)] 
    HRESULT Object([out, retval] IDispatch **ppDispatch);

    [id(5), HELP(vsextSelect)] 
    HRESULT Select([in] vsUISelectionType How);

    [id(6), propget, HELP(vsproIsSelected)]
    HRESULT IsSelected([out, retval] VARIANT_BOOL *pfSelected);
  }

  [ odl, dual, oleautomation, object, uuid(db8406b0-a916-449c-a277-bb04028f4394), HELP(vsobjUIHierarchyItems) ]
  interface UIHierarchyItems : IDispatch 
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] IDispatch **ppDispatch);
    
    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] UIHierarchyItem **ppUIHierarchyItem);

    [id(5), propget, HELP(vsproUIHItemsExpanded)]
    HRESULT Expanded([out, retval] VARIANT_BOOL *pfExpanded);
      
    [id(5), propput, HELP(vsproUIHItemsExpanded)]
    HRESULT Expanded([in] VARIANT_BOOL Expanded);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **ppUnknown);
  }


  [ odl, dual, oleautomation, object, uuid(72a2a2ef-c209-408c-a377-76871774adb7) ]
  interface UIHierarchy : IDispatch 
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Window **ppwin);

    [id(3), propget, HELP(vsproUIHierarchyItems)]
    HRESULT UIHierarchyItems([out, retval] UIHierarchyItems **ppUIHierarchyItems);

    [id(4), propget, HELP(vsproUIHSelectedItemsProperty)]
    HRESULT SelectedItems([out, retval] VARIANT* pvarSel);

    [id(5), HELP(vsproUIHGetItem)]
    HRESULT GetItem([in] BSTR Names, [out, retval] UIHierarchyItem **ppUIHierarchyItem);

    [id(6), HELP(vsextUIHSelectUp)]
    HRESULT SelectUp([in] vsUISelectionType How, [in] long Count);

    [id(7), HELP(vsextUIHSelectDown)]
    HRESULT SelectDown([in] vsUISelectionType How, [in] long Count);

    [id(DISPID_VALUE)]
    HRESULT DoDefaultAction();
  };

  typedef [ uuid(16386f0e-4ad2-41b8-8d6f-7ff230ae1d17), HELP(vsenumBuildState) ]
  enum vsBuildState
  {
    vsBuildStateNotStarted   = 1,
    vsBuildStateInProgress   = 2,
    vsBuildStateDone         = 3,
  } vsBuildState;

  [ odl, dual, oleautomation, object, uuid(23e78ed7-c9e1-462d-8bc6-366003486ed9), HELP(vsextSlnConfigurations) ]
  interface SolutionConfigurations : IDispatch
  {
    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **Enumerator);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] SolutionConfiguration **ppOut);

    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] SolutionBuild **ppBuild);

    [id(3), HELP(vsextSlnCfgAdd)]
    HRESULT Add([in] BSTR NewName, [in] BSTR ExistingName, [in] VARIANT_BOOL Propagate, [out, retval] SolutionConfiguration **ppSolutionConfiguration);

    [id(4), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);    
  };

  [ odl, dual, oleautomation, object, uuid(a3c1c40c-9218-4d4c-9daa-075f64f6922c), HELP(vsextSolutionBuildObj) ]
  interface SolutionBuild : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Solution **ppSolution);

    [id(3), propget, HELP(vsextActiveCfgProperty)]
    HRESULT ActiveConfiguration([out, retval] SolutionConfiguration **ppSolutionConfiguration);

    [id(4), propget, HELP(vsextBuildDepsProperty)]
    HRESULT BuildDependencies([out, retval] BuildDependencies **ppBuildDependencies);

    [id(5), propget, HELP(vsextBuildStateProperty)]
    HRESULT BuildState([out, retval] vsBuildState *pvsBuildState);

    [id(6), propget, HELP(vsextLastBuildInfo)]
    HRESULT LastBuildInfo([out, retval] long *pBuiltSuccessfully);

    [id(7), propput, HELP(vsextStartupProjects)]
    HRESULT StartupProjects([in] VARIANT Projects);

    [id(7), propget, HELP(vsextStartupProjects)]
    HRESULT StartupProjects([out, retval] VARIANT *pProject);

    [id(8), HELP(vsextSlnBuildBuild)]
    HRESULT Build([in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL WaitForBuildToFinish);

    [id(9), HELP(vsextSlnBuildDebug)]
    HRESULT Debug(/*TODO: How*/);

    [id(10), HELP(vsextSlnBuildDeploy)]
    HRESULT Deploy([in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL WaitForDeployToFinish);

    [id(11), HELP(vsextSlnBuildClean)]
    HRESULT Clean([in, defaultvalue(VARIANT_FALSE)] VARIANT_BOOL WaitForCleanToFinish);

    [id(12), HELP(vsextSlnBuildRun)]
    HRESULT Run();

    [id(13), propget, HELP(vsextSlnBuildSlnCfgsProperty)]
    HRESULT SolutionConfigurations([out, retval] SolutionConfigurations **ppSolutionConfigurations);

    [id(14), HELP(vsBuildProject)]
    HRESULT BuildProject(BSTR SolutionConfiguration, BSTR ProjectUniqueName, [defaultvalue(VARIANT_FALSE)] VARIANT_BOOL WaitForBuildToFinish);
  };


  cpp_quote("#ifdef Debug")
  cpp_quote("#define Debug_defined")
  cpp_quote("#undef Debug")
  cpp_quote("#endif")

  [ odl, dual, oleautomation, object, uuid(60aaad75-cb8d-4c62-9959-24d6a6a50de7), HELP(vsextSlnConfiguration) ]
  interface SolutionConfiguration : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] SolutionConfigurations **ppSolutionConfigurations);

    [id(DISPID_VALUE), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR *pVal);

    [id(3), propget, HELP(vsextSlnCfgSlnCtxsProperty)]
    HRESULT SolutionContexts([out, retval] SolutionContexts **ppOut);

    [id(4), HELP(vsextSlnCfgDelete)]
    HRESULT Delete();

    [id(5), HELP(vsextSlnCfgActivate)]
    HRESULT Activate();
  };

  [ odl, dual, oleautomation, object, uuid(fc6a1a82-9c8a-47bb-a046-6e965df5a99b), HELP(vsextSolutionContextObj) ]
  interface SolutionContext : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);
    
    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Collection([out, retval] SolutionContexts **ppSolutionContexts);
    
    [id(3), propget, HELP(vsextSlnCtxProjectNameProperty)]
    HRESULT ProjectName([out, retval] BSTR *pName);
    
    [id(4), propget, HELP(vsextSlnCtxCfgNameProperty)]
    HRESULT ConfigurationName([out, retval] BSTR *pConfigurationName);

    [id(4), propput, HELP(vsextSlnCtxCfgNameProperty)]
    HRESULT ConfigurationName([in] BSTR Name);

    [id(5), propget, HELP(vsextSlnCtxCfgPlatformProperty)]
    HRESULT PlatformName([out, retval] BSTR *pPlatformName);

    [id(6), propget, HELP(vsextSlnCtxCfgShouldBuildProperty)]
    HRESULT ShouldBuild([out, retval] VARIANT_BOOL *pPlatformName);

    [id(6), propput, HELP(vsextSlnCtxCfgShouldBuildProperty)]
    HRESULT ShouldBuild([in] VARIANT_BOOL IsBuilt);

    [id(7), propget, HELP(vsextSlnCtxCfgShouldDeployProperty)]
    HRESULT ShouldDeploy([out, retval] VARIANT_BOOL *pPlatformName);

    [id(7), propput, HELP(vsextSlnCtxCfgShouldDeployProperty)]
    HRESULT ShouldDeploy([in] VARIANT_BOOL IsDeployed);
  };

  [ odl, dual, oleautomation, object, uuid(0685b546-fb84-4917-ab98-98d40f892d61), HELP(vsextSolutionContextsObj) ]
  interface SolutionContexts : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);
    
    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] SolutionConfiguration **ppSolutionConfiguration);
    
    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **Enumerator);
    
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] SolutionContext **ppOut);
    
    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);
  };

  [ odl, dual, oleautomation, object, uuid(9043fda1-345b-4364-900f-bc8598eb8e4f), HELP(vsCfgMgr) ]
  interface ConfigurationManager : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);
    
    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] IDispatch **ppParent);
    
    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **Enumerator);
    
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [defaultvalue("")] BSTR Platform, [out, retval] Configuration **ppOut);
    
    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);

    [id(4), HELP(vsextConfigurationManagerRowProp)]
    HRESULT ConfigurationRow(BSTR Name, [out, retval] Configurations **ppOut);

    [id(5), HELP(vsextConfigurationManagerAddRowProp)]
    HRESULT AddConfigurationRow(BSTR NewName, BSTR ExistingName, [in] VARIANT_BOOL Propagate, [out, retval] Configurations **ppOut);

    [id(6), HELP(vsextConfigurationManagerDeleteRowProp)]
    HRESULT DeleteConfigurationRow(BSTR Name);

    [id(7), propget, HELP(vsextConfigurationManagerNamesProp)]
    HRESULT ConfigurationRowNames([out, retval] VARIANT *pNames);

    [id(8), HELP(vsextConfigurationManagerPlatform)]
    HRESULT Platform(BSTR Name, [out, retval] Configurations **ppOut);

    [id(9), HELP(vsextConfigurationManagerAddPlatform)]
    HRESULT AddPlatform(BSTR NewName, BSTR ExistingName, [in] VARIANT_BOOL Propagate, [out, retval] Configurations **ppOut);

    [id(10), HELP(vsextConfigurationManagerDeletePlatform)]
    HRESULT DeletePlatform(BSTR Name);

    [id(11), propget, HELP(vsextConfigurationManagerPlatformNames)]
    HRESULT PlatformNames([out, retval] VARIANT *pNames);

    [id(12), propget, HELP(vsextConfigurationManagerSupportedPlatforms)]
    HRESULT SupportedPlatforms([out, retval] VARIANT *pPlatforms);

    [id(13), propget, HELP(vsextConfigurationManagerActiveCfg)]
    HRESULT ActiveConfiguration([out, retval] Configuration **ppOut);
  };

  typedef [ uuid(612256bd-7ba2-45c4-b60f-7b2ae42f96c3), HELP(vsenumConfigurationType) ]
  enum vsConfigurationType 
  {
    vsConfigurationTypeProject     = 1,
    vsConfigurationTypeProjectItem = 2
  } vsConfigurationType;

  [ odl, dual, oleautomation, object, uuid(b6b4c8d6-4d27-43b9-b45c-52bd16b6ba38), HELP(vsCfgsObj) ]
  interface Configurations : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);
    
    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] IDispatch **ppParent);

	  [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **Enumerator);
    
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] Configuration **ppOut);

    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);

    [id(4), propget, HELP(vsproNamePropertyRO)]
    HRESULT Name([out, retval] BSTR *pName);

    [id(5), propget, HELP(vsproTypeProperty2)]
    HRESULT Type([out, retval] vsConfigurationType *pType);
  };

  [ odl, dual, oleautomation, object, uuid(a3a80783-875f-435b-9639-e5ce888df737), HELP(vsOutputGroup) ]
  interface OutputGroup : IDispatch
  {
	  [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Collection([out, retval] OutputGroups **ppOutputGroups);

	  [id(3), propget, HELP(vsextOutputGroupFileNames)]
	  HRESULT FileNames([out, retval] VARIANT *pNames);

	  [id(4), propget, HELP(vsextOutputGroupFileCount)]
	  HRESULT FileCount([out, retval] long *pCountNames);

	  [id(DISPID_VALUE), propget, HELP(vsextOutputGroupDispName)]
	  HRESULT DisplayName([out, retval] BSTR *pName);

	  [id(5), propget, HELP(vsextOutputGroupCannonName)]
	  HRESULT CanonicalName([out, retval] BSTR *pName);

    [id(6), propget, HELP(vsextOutputGroupFileNames)]
	  HRESULT FileURLs([out, retval] VARIANT *pURLs);

    [id(7), propget, HELP(vsextOutputGroupDesc)]
	  HRESULT Description([out, retval] BSTR *pDesc);
  };

  [ odl, dual, oleautomation, object, uuid(f9fa748e-e302-44cf-891b-e263189d585e), HELP(vsOutputGroups) ]
  interface OutputGroups : IDispatch
  {
	[id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Configuration **ppConfiguration);

	  [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **Enumerator);
    
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] OutputGroup **ppOut);

	  [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);
  };

  [ odl, dual, oleautomation, object, uuid(90813589-fe21-4aa4-a2e5-053fd274e980), HELP(vsCfgObj) ]
  interface Configuration : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);
    
    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Collection([out, retval] ConfigurationManager **ppConfigurationManager);
    
    [id(3), propget, HELP(vsproConfigAssignmentCfgName)]
    HRESULT ConfigurationName([out, retval] BSTR *pName);

    [id(4), propget, HELP(vsproConfigAssignmentPlatformName)]
    HRESULT PlatformName([out, retval] BSTR *pName);

    [id(5), propget, HELP(vsproTypeProperty2)]
    HRESULT Type([out, retval] vsConfigurationType *pType);

    [id(6), propget, HELP(vsproConfigOwner)]
    HRESULT Owner([out, retval] IDispatch **ppOwner);

    [id(7), propget, HELP(vsproPropertiesProperty)]
    HRESULT Properties([out, retval] Properties **ppProperties);

    [id(8), propget, HELP(vsextConfigAssignmentIsBuildable)]
    HRESULT IsBuildable([out, retval] VARIANT_BOOL *pBuildable);

    [id(9), propget, HELP(vsIsRunnableProp)]
    HRESULT IsRunable([out, retval] VARIANT_BOOL *pRunable);

    /*[id(9), propget, HELP(vsextConfigAssignmentIsDebuggable)]
    HRESULT IsDebuggable([out, retval] VARIANT_BOOL *pDebuggable);*/

    [id(10), propget, HELP(vsextConfigAssignmentIsDebuggable)]
    HRESULT IsDeployable([out, retval] VARIANT_BOOL *pDeployable);

    [id(11), HELP(vsextGetObjectMethod), propget]
    HRESULT Object([out, retval] IDispatch **ppDisp);

    [id(12), propget, nonbrowsable, HELP(vsobjExtendersExtenderProperty)]
    HRESULT Extender([in] BSTR ExtenderName, [out, retval] IDispatch **Extender);

    [id(13), propget, nonbrowsable, HELP(vsobjExtendersExtenderNamesProperty)] 
    HRESULT ExtenderNames([out, retval] VARIANT *ExtenderNames);

    [id(14), propget, nonbrowsable, HELP(vsobjExtenderExtenderCATIDProperty)]
    HRESULT ExtenderCATID ([out, retval] BSTR *pRetval);

	  [id(15), propget, HELP(vsextobjCfgOutputGroups)]
	  HRESULT OutputGroups([out, retval] OutputGroups **ppOutputGroups);
  };

  [ odl, dual, oleautomation, object, uuid(ead260eb-1e5b-450a-b628-4cfada11b4a1), HELP(vsextBuildDependenciesObj) ]
  interface BuildDependencies : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);
    
    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] SolutionBuild **ppSolutionBuild);
    
    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **Enumerator);
    
    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] BuildDependency **ppOut);
    
    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);
  };

  [ odl, dual, oleautomation, object, uuid(9c5ceaac-062f-4434-a2ed-78ab4d6134fe), HELP(vsextBuildDependencyObj) ]
  interface BuildDependency : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)] 
    HRESULT DTE([out, retval] DTE **ppDTE);
    
    [id(2), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] BuildDependencies **ppBuildDependencies);
    
    [id(3), propget, HELP(vsextBuildDependencyProj)]
    HRESULT Project([out, retval] Project **ppProject);
    
    [id(4), propget, HELP(vsextBuildDependencyProj)]
    HRESULT RequiredProjects([out, retval] VARIANT *pProjects);
    
    [id(5), HELP(vsextBuildDependencyAddProj)]
    HRESULT AddProject(BSTR ProjectUniqueName);
    
    [id(6), HELP(vsextBuildDependencyRemoveProj)]
    HRESULT RemoveProject(BSTR ProjectUniqueName);

	[id(7), HELP(vsextBuildDependencyRemoveAllProj)]
    HRESULT RemoveAllProjects();

    /*[id(8), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *plCount);*/
  };

  typedef [ uuid(9fb64132-726a-4262-829e-051c6ec7b24f), HELP(vsenumFindAction)]
  enum vsFindAction 
  {
    vsFindActionFind        = 1,
    vsFindActionFindAll     = 2,
    vsFindActionReplace     = 3,
    vsFindActionReplaceAll  = 4,
    vsFindActionBookmarkAll = 5,
  } vsFindAction;

  typedef [ uuid(6fa137be-32a8-4f54-8099-60bb955097a3), HELP(vsenumFindResult) ]
  enum vsFindResult
  {
    vsFindResultNotFound           = 0,
    vsFindResultFound              = 1,
    vsFindResultReplaceAndNotFound = 2,
    vsFindResultReplaceAndFound    = 3,
	  vsFindResultReplaced		       = 4,
    vsFindResultPending            = 5,
	  vsFindResultError			         = 6
  } vsFindResult;

  typedef [ uuid(530f2d0e-a5f9-4b7a-a379-0a3b99b5e66d), HELP(vsenumFindPatternSyntax) ]
  enum vsFindPatternSyntax
  {
    vsFindPatternSyntaxLiteral    = 0,
    vsFindPatternSyntaxRegExpr    = 1,
    vsFindPatternSyntaxWildcards  = 2
  } vsFindPatternSyntax;

  typedef [ uuid(481899fb-b657-4e45-8c00-0e051052bb13), HELP(vsenumFindTarget) ]
  enum vsFindTarget 
  {
    vsFindTargetCurrentDocument           = 1,
    vsFindTargetCurrentDocumentSelection  = 2,
    vsFindTargetCurrentDocumentFunction   = 3,
    vsFindTargetOpenDocuments             = 4,
    vsFindTargetCurrentProject            = 5,
    vsFindTargetSolution                  = 6,
    vsFindTargetFiles                     = 7
  } vsFindTarget;

  typedef [ uuid(ea9142bf-b2af-48a7-b256-93ccd3350bd8), HELP(vsenumFindResultsLocation) ]
  enum vsFindResultsLocation 
  {
	  vsFindResultsNone	= 0,
    vsFindResults1		= 1,
    vsFindResults2		= 2
  } vsFindResultsLocation;

  // these values are consistent with the old Devstudio values (DsTextSearchOptions) whenever applicable
  typedef [ uuid(a457303f-d058-4415-a2b4-a81b148c7689), HELP(vsenumFindOptions) ]
  enum vsFindOptions 
  {
    vsFindOptionsNone                       = 0x00000000,
    vsFindOptionsMatchWholeWord             = 0x00000002,
    vsFindOptionsMatchCase                  = 0x00000004,
    vsFindOptionsRegularExpression          = 0x00000008,
    // range of values 0x10 - 0x040 unused as DevStudio defined these for RegExpE, RegExpB & RegExpCurrent
    vsFindOptionsBackwards                  = 0x00000080,
    vsFindOptionsFromStart                  = 0x00000100,
    vsFindOptionsMatchInHiddenText          = 0x00000200,
    vsFindOptionsWildcards                  = 0x00000400,
    vsFindOptionsSearchSubfolders           = 0x00001000,
    vsFindOptionsKeepModifiedDocumentsOpen  = 0x00002000
  } vsFindOptions;

  [ uuid(40d4b9b6-739b-4965-8d65-692aec692266), odl, dual, HELP(vsobjFindSymbol)]
  interface Find : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    [id(3), propget, HELP(vsproActionProperty)]
    HRESULT Action([out, retval] vsFindAction *pAction); 

    [id(3), propput, HELP(vsproActionProperty)]
    HRESULT Action([in] vsFindAction Action); 

    [id(4), propget, HELP(vsproFindWhatProperty)]
    HRESULT FindWhat([out, retval] BSTR *pFindWhat); 

    [id(4), propput, HELP(vsproFindWhatProperty)]
    HRESULT FindWhat([in] BSTR FindWhat); 

    [id(5), propget, HELP(vsproMatchCaseProperty)]
    HRESULT MatchCase([out, retval] VARIANT_BOOL *pMatchCase); 

    [id(5), propput, HELP(vsproMatchCaseProperty)]
    HRESULT MatchCase([in] VARIANT_BOOL MatchCase); 

    [id(6), propget, HELP(vsproMatchWholeWordProperty)]
    HRESULT MatchWholeWord([out, retval] VARIANT_BOOL *pMatchWholeWord); 

    [id(6), propput, HELP(vsproMatchWholeWordProperty)]
    HRESULT MatchWholeWord([in] VARIANT_BOOL MatchWholeWord); 

    [id(7), propget, HELP(vsproMatchInHiddenTextProperty)]
    HRESULT MatchInHiddenText([out, retval] VARIANT_BOOL *pMatchInHiddenText); 

    [id(7), propput, HELP(vsproMatchInHiddenTextProperty)]
    HRESULT MatchInHiddenText([in] VARIANT_BOOL MatchInHiddenText); 

    [id(8), propget, HELP(vsproBackwardsProperty)]
    HRESULT Backwards([out, retval] VARIANT_BOOL *pBackwards); 

    [id(8), propput, HELP(vsproBackwardsProperty)]
    HRESULT Backwards([in] VARIANT_BOOL Backwards); 

    [id(9), propget, HELP(vsproSearchSubfoldersProperty)]
    HRESULT SearchSubfolders([out, retval] VARIANT_BOOL *pSearchSubfolders); 

    [id(9), propput, HELP(vsproSearchSubfoldersProperty)]
    HRESULT SearchSubfolders([in] VARIANT_BOOL SearchSubfolders); 

    [id(10), propget, HELP(vsproKeepModifiedDocumentsOpenProperty)]
    HRESULT KeepModifiedDocumentsOpen([out, retval] VARIANT_BOOL *pKeepModifiedDocumentsOpen); 

    [id(10), propput, HELP(vsproKeepModifiedDocumentsOpenProperty)]
    HRESULT KeepModifiedDocumentsOpen([in] VARIANT_BOOL KeepModifiedDocumentsOpen); 

    [id(11), propget, HELP(vsproFindPatternSyntaxProperty)]
    HRESULT PatternSyntax([out, retval] vsFindPatternSyntax *pPatternSyntax); 

    [id(11), propput, HELP(vsproFindPatternSyntaxProperty)]
    HRESULT PatternSyntax([in] vsFindPatternSyntax PatternSyntax); 

    [id(12), propget, HELP(vsproReplaceWithProperty)]
    HRESULT ReplaceWith([out, retval] BSTR *pReplaceWith); 

    [id(12), propput, HELP(vsproReplaceWithProperty)]
    HRESULT ReplaceWith([in] BSTR ReplaceWith); 
    
    [id(13), propget, HELP(vsproFindTargetProperty)]
    HRESULT Target([out, retval] vsFindTarget *pTarget); 

    [id(13), propput, HELP(vsproFindTargetProperty)]
    HRESULT Target([in] vsFindTarget Target); 

    [id(14), propget, HELP(vsproSearchPathProperty)]
    HRESULT SearchPath([out, retval] BSTR *pSearchPath); 

    [id(14), propput, HELP(vsproSearchPathProperty)]
    HRESULT SearchPath([in] BSTR SearchPath); 

    [id(15), propget, HELP(vsproFilesOfTypeProperty)]
    HRESULT FilesOfType([out, retval] BSTR *pFilesOfType); 

    [id(15), propput, HELP(vsproFilesOfTypeProperty)]
    HRESULT FilesOfType([in] BSTR FilesOfType); 

    [id(16), propget, HELP(vsproResultsLocationProperty)]
    HRESULT ResultsLocation([out, retval] vsFindResultsLocation *pResultsLocation); 

    [id(16), propput, HELP(vsproResultsLocationProperty)]
    HRESULT ResultsLocation([in] vsFindResultsLocation ResultsLocation); 

    [id(17), HELP(vsproFindExecuteMethod)]
    HRESULT Execute([out, retval] vsFindResult *pResult); 

    // default (method) on Find object
    [id(DISPID_VALUE), HELP(vsproFindFindMethod)]
    HRESULT FindReplace([in] vsFindAction Action, [in] BSTR FindWhat, [in, defaultvalue(vsFindOptionsNone)] long vsFindOptionsValue, 
                        [in, defaultvalue("")] BSTR ReplaceWith, [in, defaultvalue(vsFindTargetCurrentDocument)] vsFindTarget Target,
                        [in, defaultvalue("")] BSTR SearchPath, [in, defaultvalue("")] BSTR FilesOfType, 
                        [in, defaultvalue(vsFindResults1)] vsFindResultsLocation ResultsLocation, [out, retval] vsFindResult *pResult);

  };

  [ uuid (c5331acd-c5d5-11D2-8598-006097c68e81), oleautomation, odl, HELP(vsobjFindEventsObject)]
  interface _FindEvents : IDispatch 
  {
  };

  [ uuid (c5331ace-c5d5-11D2-8598-006097c68e81) ]
  dispinterface _dispFindEvents
  {
    properties:
    methods: // Events
  
    [id(1), HELP(vsproFindDoneEvent)] 
    void FindDone ([in] vsFindResult Result, [in] VARIANT_BOOL Cancelled); 
  };

  [ uuid(811322bc-042d-4828-bff2-640ef8b7209f), HELP(vsobjFindEventsObject) ]
  coclass FindEvents
  {
    [default] interface _FindEvents;
    [default, source] dispinterface _dispFindEvents;
  };


  // ItemOperations
  typedef [ uuid(b4cc3e73-0038-47e5-ba52-d1183f8fdbf0), HELP(vsenumNavigateOptions) ]
  enum vsNavigateOptions 
  {
    vsNavigateOptionsDefault =    0x00000000,
    vsNavigateOptionsNewWindow =  0x00000001
  } vsNavigateOptions;

  [ uuid(d5dbe57b-c074-4e95-b015-abeeaa391693), odl, dual, HELP(vsobjItemOperationsObject)]
  interface ItemOperations : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    //REVIEW (Rahulk): For the following methods if an [in, defaultvalue("")] BSTR EditorKind
    // is needed to support OpenWith scenarios
    [id(3), HELP(vsextOpenFileMethod)]
    HRESULT OpenFile([in] BSTR FileName, [in, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR ViewKind, [out, retval] Window **Window); 

    [id(4), HELP(vsobjIONewFileMethod)]
    HRESULT NewFile([in, defaultvalue("General\Text File")] BSTR Item, [in, defaultvalue("")] BSTR Name, [in, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR ViewKind, [out, retval] Window **Window); 

    [id(5), HELP(vsextIsOpenFileMethod)]
    HRESULT IsFileOpen([in] BSTR FileName, [in, defaultvalue("{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}")] BSTR ViewKind, [out, retval] VARIANT_BOOL *pfRetval);

    [id(6), HELP(vsobjIOAddExistingItemMethod)]
    HRESULT AddExistingItem([in] BSTR FileName, [out, retval] ProjectItem **ProjectItem); 

    [id(7), HELP(vsobjIOAddNewItemMethod)]
    HRESULT AddNewItem([in, defaultvalue("General\Text File")] BSTR Item, [in, defaultvalue("")] BSTR Name, [out, retval] ProjectItem **ProjectItem); 

    [id(8), HELP(vsobjIONavigateMethod)]
    HRESULT Navigate([in, defaultvalue("")] BSTR URL, [in, defaultvalue(vsNavigateOptionsDefault)] vsNavigateOptions Options, [out, retval] Window **Window);

    [id(9), propget, HELP(vsextItemOpPromptToSave)]
    HRESULT PromptToSave([out, retval] vsPromptResult *Saved);
  };


  // Automation Extenders related interfaces 

  // ObjectExtensions
  [ uuid(8d0aa9cc-8465-42f3-ad6e-dfde28ccc75d), odl, dual, HELP(vsobjObjectExtendersObject)]
  interface ObjectExtenders : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **lppaReturn);

    [id(3), HELP(vsobjExtRegProviderMethod)]
    HRESULT RegisterExtenderProvider([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [in] IExtenderProvider *ExtenderProvider,
                                     [in, defaultvalue("")] BSTR LocalizedName, [out, retval] long *Cookie);

    [id(4), HELP(vsobjExtUnregProviderMethod)]
    HRESULT UnregisterExtenderProvider([in] long Cookie);

    [id(5), HELP(vsobjExtGetExtenderMethod)]
    HRESULT GetExtender([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [in] IUnknown *ExtendeeObject, [out, retval] IDispatch **Extender);

    [id(6), HELP(vsobjExtGetExtenderNamesMethod)]
    HRESULT GetExtenderNames([in] BSTR ExtenderCATID, [in] IUnknown *ExtendeeObject, [out, retval] VARIANT *ExtenderNames);

    [id(7), HELP(vsobjExtGetContextualCATIDsMethod)] 
    HRESULT GetContextualExtenderCATIDs([out, retval] VARIANT *ExtenderCATIDs);

    [id(8), hidden]
    HRESULT GetLocalizedExtenderName([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [out, retval] BSTR *pLocalizedName);

    [id(9)]
    HRESULT RegisterExtenderProviderUnk([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [in] IExtenderProviderUnk *ExtenderProvider,
                                     [in, defaultvalue("")] BSTR LocalizedName, [out, retval] long *Cookie);
  };

  cpp_quote("#define SID_SExtensionManager	IID_ObjectExtenders")

  // Extender site interface
  // IExtenderSite
  [ uuid(e57c510b-968b-4a3c-a467-ee4013157dc9), odl, dual, HELP(vsobjExtenderSiteObject)]
  interface IExtenderSite : IDispatch
  {
    [id(1), HELP(vsobjExtSiteNotifyDeleteMethod)]
    HRESULT NotifyDelete([in] long Cookie);

    [id(2), HELP(vsextGetObjectMethod)]
    HRESULT GetObject([in, defaultvalue("")] BSTR Name, [out, retval] IDispatch **ppObject);
  };

  // Following 3 interfaces can be used when implementing an extender
  // REVIEW: (rahulk) moving this into a whole new .idl which generates a totally separate typelib
  // if we want to decouple how someone implements an Extender from the VS Automation model

  // IExtenderProvider
  [ uuid(4db06329-23f4-443b-9abd-9cf611e8ae07), odl, dual, HELP(vsobjExtenderProviderObject)]
  interface IExtenderProvider : IDispatch
  {
    [id(1), HELP(vsobjExtProviderGetExtenderMethod)]
    HRESULT GetExtender ([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [in] IDispatch *ExtendeeObject, [in] IExtenderSite *ExtenderSite,
                         [in] long Cookie, [out, retval] IDispatch **Extender);

    [id(2), HELP(vsobjExtProviderCanExtendMethod)] 
    HRESULT CanExtend([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [in] IDispatch *ExtendeeObject, [out, retval] VARIANT_BOOL *fRetval);

  };

  // IExtenderProviderUnk
  [ uuid(F69B64A3-9017-4e48-9784-E152B51AA722), odl, dual, HELP(vsobjExtenderProviderObject)]
  interface IExtenderProviderUnk : IDispatch
  {
    [id(1), HELP(vsobjExtProviderGetExtenderMethod)]
    HRESULT GetExtender ([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [in] IUnknown *ExtendeeObject, [in] IExtenderSite *ExtenderSite,
                         [in] long Cookie, [out, retval] IDispatch **Extender);

    [id(2), HELP(vsobjExtProviderCanExtendMethod)] 
    HRESULT CanExtend([in] BSTR ExtenderCATID, [in] BSTR ExtenderName, [in] IUnknown *ExtendeeObject, [out, retval] VARIANT_BOOL *fRetval);

  };

  // vsFilterProperties
  typedef [ uuid(221ab797-408b-4d69-9dd1-c6f329189414), HELP(vsenumFilterProperties) ]
  enum vsFilterProperties
  {
    vsFilterPropertiesNone  = 0,
    vsFilterPropertiesAll   = 1,
    vsFilterPropertiesSet   = 2 
  } vsFilterProperties;

  // IFilterProperties
  [ uuid(aade1f59-6ace-43d1-8fca-42af3a5c4f3c), odl, dual, HELP(vsobjFilterPropsObject)]
  interface IFilterProperties : IDispatch
  {
    [id(1), HELP(vsobjFilterPropsIsPropertyHiddenMethod)]
    HRESULT IsPropertyHidden([in] BSTR PropertyName, [out, retval] vsFilterProperties *pRetval); 
  };



  // *************************************************************
  // Moved from textext.idl

  
  typedef [ uuid(bbdfcfe4-4c68-4736-b991-f85fa955d585) ]
  enum vsWhitespaceOptions
  {
    vsWhitespaceOptionsHorizontal = 0,
    vsWhitespaceOptionsVertical   = 1,
  } vsWhitespaceOptions;

  typedef [ uuid(98a2f403-007b-41f8-9a18-87addef1760f) ]
  enum vsCaseOptions
  {
    vsCaseOptionsLowercase  = 1,
    vsCaseOptionsUppercase  = 2,
    vsCaseOptionsCapitalize = 3
  } vsCaseOptions;

  typedef [ uuid(29182bd4-48a8-4e4b-81dd-1b742a3a5203) ]
  enum vsMovementOptions
  {
    vsMovementOptionsMove   = 0,
    vsMovementOptionsExtend = 1
  } vsMovementOptions;


  typedef [ uuid(f05ea427-01ba-46dc-8392-fb4aa7e5eb3a) ]
  enum vsStartOfLineOptions
  {
    vsStartOfLineOptionsFirstColumn = 0,
    vsStartOfLineOptionsFirstText   = 1
  } vsStartOfLineOptions;

  typedef [ uuid(11b63a24-6200-48cd-9b8d-fc6a6fb9eff0) ]
  enum vsGoToLineOptions
  {
    vsGoToLineOptionsLast  = -1,
    vsGoToLineOptionsFirst = -2
  } vsGoToLineOptions;

  typedef [ uuid(c512dde3-a220-4373-8950-e6636f8cc546) ]
  enum vsSmartFormatOptions
  {
    vsSmartFormatOptionsNone  = 0,
    vsSmartFormatOptionsBlock = 1,
    vsSmartFormatOptionsSmart = 2
  } vsSmartFormatOptions; 

  typedef [ uuid(f3128012-b41f-46ec-8794-f716db9697d0) ]
  enum vsSelectionMode
  {
    vsSelectionModeStream = 0,
    vsSelectionModeBox    = 1
  } vsSelectionMode;

  typedef [ uuid(79515b53-8294-4f96-aa96-dd16bf126703) ]
  enum vsInsertFlags
  {
    vsInsertFlagsCollapseToEnd   = 1,
    vsInsertFlagsCollapseToStart = 2,
    vsInsertFlagsContainNewText  = 4,
    vsInsertFlagsInsertAtEnd     = 8,
    vsInsertFlagsInsertAtStart   = 16
  } vsInsertFlags;

  typedef [ uuid(b26ac3c2-3981-4a2e-9d6f-559b41cd1cd2) ]
  enum vsPaneShowHow
  {
    vsPaneShowCentered = 0,
    vsPaneShowTop      = 1,
    vsPaneShowAsIs     = 2
  } vsPaneShowHow;

  typedef [ uuid(4eb2c04f-8a83-4363-81db-dbb76cd76812) ]
  enum vsMoveToColumnLine
  {
    vsMoveToColumnLineFirst = 0,
    vsMoveToColumnLineLast  = 1
  } vsMoveToColumnLine;


  typedef [ uuid(3740dcf8-b8b2-49a9-a1ab-944c84876c3c) ]
  enum vsEPReplaceTextOptions
  {
    vsEPReplaceTextKeepMarkers       = 1,
    vsEPReplaceTextNormalizeNewlines = 2,
    vsEPReplaceTextTabsSpaces        = 4,
    vsEPReplaceTextAutoformat        = 8
  } vsEPReplaceTextOptions;


  [ odl, dual, oleautomation, object, uuid(b6422e9c-9efd-4f87-bddc-c7fd8f2fd303), HELP(vsobjTextRanges) ]
  interface TextRanges : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] TextDocument **ppParent);

    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] TextRange **ppRange);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);
  };

  [ odl, dual, oleautomation, object, uuid(72767524-e3b3-43d0-bb46-bbe1d556a9ff), HELP(vsobjTextRange) ]
  interface TextRange : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] TextRanges **ppParent);

    [id(3), propget, HELP(vsextStartPointProperty)]
    HRESULT StartPoint([out, retval] EditPoint **ppPoint);

    [id(4), propget, HELP(vsextEndPointProperty)]
    HRESULT EndPoint([out, retval] EditPoint **ppPoint);
  };


  [ dual, odl, oleautomation, object, uuid(2e1bfd1c-5b26-4aca-b97b-ed9d261ba3e7), hidden ]
  interface IVsTextEditGeneral : IDispatch
  {
    [id(1), propput]   HRESULT  SelectionMargin ([in] VARIANT_BOOL fSelectionMargin);
    [id(1), propget]   HRESULT  SelectionMargin ([out,retval] VARIANT_BOOL *pfSelectionMargin);

    [id(2), propput]   HRESULT  GoToAnchorAfterEscape ([in] VARIANT_BOOL fGoToAnchorAfterEscape);
    [id(2), propget]   HRESULT  GoToAnchorAfterEscape ([out,retval] VARIANT_BOOL *pfGoToAnchorAfterEscape);

    /*[propput]   HRESULT  CaretAtBeginningOfPaste ([in] VARIANT_BOOL fCaretAtBeginningOfPaste);
    [propget]   HRESULT  CaretAtBeginningOfPaste ([out,retval] VARIANT_BOOL *pfCaretAtBeginningOfPaste);*/

    [id(3), propput]   HRESULT  DragNDropTextEditing ([in] VARIANT_BOOL fDragNDropTextEditing);
    [id(3), propget]   HRESULT  DragNDropTextEditing ([out,retval] VARIANT_BOOL *pfDragNDropTextEditing);

    [id(4), propput]   HRESULT  UndoCaretActions ([in] VARIANT_BOOL fUndoCaretActions);
    [id(4), propget]   HRESULT  UndoCaretActions ([out,retval] VARIANT_BOOL *pfUndoCaretActions);

    /*[propput]   HRESULT  ClickWaitTime ([in] short lClickTimeWait);
    [propget]   HRESULT  ClickWaitTime ([out,retval] short *plClickTimeWait);*/

    [id(5), propput]   HRESULT  MarginIndicatorBar ([in] VARIANT_BOOL fMarginIndicatorBar);
    [id(5), propget]   HRESULT  MarginIndicatorBar ([out,retval] VARIANT_BOOL *pfMarginIndicatorBar);

    [id(6), propput]   HRESULT  HorizontalScrollBar ([in] VARIANT_BOOL fHorizontalScrollBar);
    [id(6), propget]   HRESULT  HorizontalScrollBar ([out,retval] VARIANT_BOOL *pfHorizontalScrollBar);

    [id(7), propput]   HRESULT  VerticalScrollBar ([in] VARIANT_BOOL fVerticalScrollBar);
    [id(7), propget]   HRESULT  VerticalScrollBar ([out,retval] VARIANT_BOOL *pfVerticalScrollBar);

    [id(8), propput]   HRESULT  AutoDelimiterHighlighting ([in] VARIANT_BOOL fHighlighting);
    [id(8), propget]   HRESULT  AutoDelimiterHighlighting ([out,retval] VARIANT_BOOL *pfHighlighting);
  };

  [ odl, dual, oleautomation, object, uuid(5943bd7e-d722-42db-a251-fe2add8711ea), hidden ]
  interface IVsTextEditPerLanguage : IDispatch
  {
    [id(1), propput]   HRESULT  TabSize ([in] short iTabSize);
    [id(1), propget]   HRESULT  TabSize ([out,retval] short *piTabSize);

    [id(2), propput]   HRESULT  IndentSize ([in] short iIndentSize);
    [id(2), propget]   HRESULT  IndentSize ([out,retval] short *piIndentSize);

    [id(3), propput]   HRESULT  InsertTabs ([in] VARIANT_BOOL fInsertTabs);
    [id(3), propget]   HRESULT  InsertTabs ([out,retval] VARIANT_BOOL *pfInsertTabs);

    [id(4), propput]   HRESULT  IndentStyle ([in] vsIndentStyle indentStyle);
    [id(4), propget]   HRESULT  IndentStyle ([out,retval] vsIndentStyle *pfIndentStyle);

    [id(5), propput]   HRESULT AutoListMembers ([in] VARIANT_BOOL fAutoListMembers);
    [id(5), propget]   HRESULT AutoListMembers ([out,retval] VARIANT_BOOL *pfAutoListMembers);

    [id(6), propput]   HRESULT AutoListParams ([in] VARIANT_BOOL fAutoListParams);
    [id(6), propget]   HRESULT AutoListParams ([out,retval] VARIANT_BOOL *pfAutoListParams);

    [id(7), propput]   HRESULT VirtualSpace ([in] VARIANT_BOOL fVirtualSpace);
    [id(7), propget]   HRESULT VirtualSpace ([out,retval] VARIANT_BOOL *pfVirtualSpace);

    /*[propput]   HRESULT StreamSelectionMode ([in] VARIANT_BOOL fStreamSelMode);
    [propget]   HRESULT StreamSelectionMode ([out,retval] VARIANT_BOOL *pfStreamSelMode);*/

    [id(8), propput]   HRESULT EnableLeftClickForURLs ([in] VARIANT_BOOL fHotURLs);
    [id(8), propget]   HRESULT EnableLeftClickForURLs ([out,retval] VARIANT_BOOL *pfHotURLs);

    [id(9), propput]   HRESULT WordWrap ([in] VARIANT_BOOL fWrap);
    [id(9), propget]   HRESULT WordWrap ([out,retval] VARIANT_BOOL *pfWrap);

    [id(10), propput]   HRESULT ShowLineNumbers ([in] VARIANT_BOOL fShow);
    [id(10), propget]   HRESULT ShowLineNumbers ([out,retval] VARIANT_BOOL *pfShow);

    [id(11), propput]   HRESULT ShowNavigationBar ([in] VARIANT_BOOL fShow);
    [id(11), propget]   HRESULT ShowNavigationBar ([out,retval] VARIANT_BOOL *pfShow);

    /*[id(12), propput]   HRESULT ShowSquiggles ([in] VARIANT_BOOL fShow);
    [id(12), propget]   HRESULT ShowSquiggles ([out,retval] VARIANT_BOOL *pfShow);*/

    [id(13), propput]   HRESULT HideAdvancedMembers ([in] VARIANT_BOOL fHide);
    [id(13), propget]   HRESULT HideAdvancedMembers ([out,retval] VARIANT_BOOL *pfHide);
  };

  [ odl, dual, oleautomation, object, uuid(f39ab913-e6c9-4546-a265-1e43f8de924c), hidden, restricted ]
  interface IVsTextEditFonts : IDispatch
  {
    [id(1), propput]   HRESULT  FontFamily ([in] BSTR bstrFontFamily);
    [id(1), propget]   HRESULT  FontFamily ([out,retval] BSTR *pbstrFontFamily);

    [id(2), propput]   HRESULT  FontCharacterSet ([in] vsFontCharSet bstrFontCharacterSet);
    [id(2), propget]   HRESULT  FontCharacterSet ([out,retval] vsFontCharSet *pbstrCharacterSet);

    [id(3), propput]   HRESULT  FontSize ([in] short iFontSize);
    [id(3), propget]   HRESULT  FontSize ([out,retval] short *piFontSize);
  };

  [ odl, dual, oleautomation, object, uuid(7f59e94e-4939-40d2-9f7f-b7651c25905d), HELP(vsobjTextPoint) ]
  interface TextPoint : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **lppaReturn);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] TextDocument **lppaReturn);

    /* the 1-based line # */
    [id(11), propget, HELP(vsextLineProperty)]
    HRESULT Line([out, retval] long * lppaReturn);

	/* the 1-based char index into the line */
    [id(12), propget, HELP(vsextLineCharOffsetProperty)]
    HRESULT LineCharOffset([out, retval] long * lppaReturn);

	/* the 1-based char index into the buffer */
    [id(13), propget, HELP(vsextAbsoluteCharOffsetProperty)]
    HRESULT AbsoluteCharOffset([out, retval] long * lppaReturn);

    /*
        DisplayColumn provides the apparent column index when tab expansion is taken into account.
        For buffers where there are no tab characters expanded to >1 space, this will be the same
        as LineCharOffset.
    */
    [id(14), propget, HELP(vsextDisplayColumnProperty)]
    HRESULT DisplayColumn([out, retval] long * lppaReturn);

	/* whether the location is after the last character of the buffer */
    [id(21), propget, HELP(vsextEndOfDocProperty)]
    HRESULT AtEndOfDocument([out, retval] VARIANT_BOOL * lppaReturn);

	/* whether the location is before the first character of the buffer */
    [id(22), propget, HELP(vsextStartOfDocProperty)]
    HRESULT AtStartOfDocument([out, retval] VARIANT_BOOL * lppaReturn);

	/* whether the location is after the last character of the line */
    [id(23), propget, HELP(vsextEndOfLineProperty)]
    HRESULT AtEndOfLine([out, retval] VARIANT_BOOL * lppaReturn);

	/* whether the location is before the first character of the line */
    [id(24), propget, HELP(vsextStartOfLineProperty)]
    HRESULT AtStartOfLine([out, retval] VARIANT_BOOL * lppaReturn);

	/* length (in Unicode characters) of the line */
    [id(25), propget, HELP(vsextLineLengthProperty)]
    HRESULT LineLength([out, retval] long * lppaReturn);

	/* whether the given point is equal to another */
    [id(31), HELP(vsextEqualProperty)]
    HRESULT EqualTo([in] TextPoint *Point, [out, retval] VARIANT_BOOL * lppaReturn);

	/* whether the given point is before another */
    [id(32), HELP(vsextLessThanProperty)]
    HRESULT LessThan([in] TextPoint *Point, [out, retval] VARIANT_BOOL * lppaReturn);

	/* whether the given point is after to another */
    [id(33), HELP(vsextGreaterThanProperty)]
    HRESULT GreaterThan([in] TextPoint *Point, [out, retval] VARIANT_BOOL * lppaReturn);

	[id(50), HELP(vsextTryToShowTPMethod)]
	HRESULT TryToShow([in, defaultvalue(0)] vsPaneShowHow How, [in, optional] VARIANT PointOrCount, [out, retval] VARIANT_BOOL *pbResult);

	[id(51), propget, HELP(vsextCodeElementProperty)]
	HRESULT CodeElement([in] vsCMElement Scope, [out, retval] CodeElement **ppResult);

	/* whether the given point is after to another */
    [id(34), HELP(vsextCreateEditPointMethod)]
    HRESULT CreateEditPoint([out, retval] EditPoint **lppaReturn);

	/* vtable space for future expansion (since EditPoint derives from TextPoint) */

	/*[id(35), hidden, restricted]
	HRESULT Reserved1();

	[id(36), hidden, restricted]
	HRESULT Reserved2();

	[id(37), hidden, restricted]
	HRESULT Reserved3();

	[id(38), hidden, restricted]
	HRESULT Reserved4();

	[id(39), hidden, restricted]
	HRESULT Reserved5();

	[id(40), hidden, restricted]
	HRESULT Reserved6();

	[id(41), hidden, restricted]
	HRESULT Reserved7();

	[id(42), hidden, restricted]
	HRESULT Reserved8();

	[id(43), hidden, restricted]
	HRESULT Reserved9();

	[id(44), hidden, restricted]
	HRESULT Reserved10();*/
  };

  [ odl, dual, oleautomation, object, uuid(c1ffe800-028b-4475-a907-14f51f19bb7d), HELP(vsobjEditPoint) ]
  interface EditPoint : TextPoint
  {
    [id(101), HELP(vsextCharLeftMethod)] // moves left by one character (or cr/lf; treats cr/lf pairs as one character)
    HRESULT CharLeft([in, defaultvalue(1)] long Count);

    [id(102), HELP(vsextCharRightMethod)] // moves right by one character (or cr/lf; treats cr/lf pairs as one character)
    HRESULT CharRight([in, defaultvalue(1)] long Count);

    [id(103), HELP(vsextEndOfLineMethod)] // places point after last char in line
    HRESULT EndOfLine(void);
    
    [id(104), HELP(vsextStartOfLineMethod)] // places point before first char in line
    HRESULT StartOfLine(void);
    
    [id(105), HELP(vsextEndOfDocumentMethod)] // places point after last char in buffer
    HRESULT EndOfDocument(void);
    
    [id(106), HELP(vsextStartOfDocumentMethod)] // places point before first char in buffer
    HRESULT StartOfDocument(void);
    
    [id(107), HELP(vsextWordLeftMethod)] // moves left by one word
    HRESULT WordLeft([in, defaultvalue(1)] long Count);

    [id(108), HELP(vsextWordRightMethod)] // moves right by one word
    HRESULT WordRight([in, defaultvalue(1)] long Count);

    [id(109), HELP(vsextLineUpMethod)] // moves up by one BUFFER line
    HRESULT LineUp([in, defaultvalue(1)] long Count);

    [id(110), HELP(vsextLineDownMethod)] // moves down by one BUFFER line
    HRESULT LineDown([in, defaultvalue(1)] long Count);

	[id(170), HELP(vsextMoveToPointMethod)]
	HRESULT MoveToPoint([in] TextPoint *Point);

	[id(171), HELP(vsextMoveToPointMethod)]
	HRESULT MoveToLineAndOffset([in] long Line, [in] long Offset);

	[id(172), HELP(vsextMoveToAbsoluteOffsetMethod)]
	HRESULT MoveToAbsoluteOffset([in] long Offset);

    [id(121), HELP(vsextSetBookmarkMethod)] // ensures that a temporary bookmark exists on the line
    HRESULT SetBookmark(void);

    [id(122), HELP(vsextClearBookmarkMethod)] // ensures that no temporary bookmark exists on the line
    HRESULT ClearBookmark(void);

    [id(123), HELP(vsextNextBookmarkMethod)] // moves to next temp bookmark
    HRESULT NextBookmark([out, retval] VARIANT_BOOL *pbFound);

    [id(124), HELP(vsextPreviousBookmarkMethod)] // moves to previous temp bookmark
    HRESULT PreviousBookmark([out, retval] VARIANT_BOOL *pbFound);

    [id(131), HELP(vsextPadToColumnMethod)] // fills whitespace to specified display column
    HRESULT PadToColumn([in] long Column);

    [id(132), HELP(vsextInsertMethod)] // inserts text at given location
    HRESULT Insert([in] BSTR Text);

    [id(133), HELP(vsextInsertFromFileMethod)]
    HRESULT InsertFromFile([in] BSTR File);

    [id(134), HELP(vsextGetTextMethod)] // gets text either to point or for a specific # of chars, depending on VARIANT param
    HRESULT GetText([in] VARIANT PointOrCount, [out, retval] BSTR *pbstrText);

	[id(173), HELP(vsextGetLinesMethod)]
	HRESULT GetLines([in] long Start, [in] long ExclusiveEnd, [out, retval] BSTR *pbstrText);

    [id(136), HELP(vsextCopySpanMethod)] // copies text to clipboard either to point or for a specific # of chars, depending on VARIANT param
    HRESULT Copy([in] VARIANT PointOrCount, [in, defaultvalue(0)] VARIANT_BOOL Append);

    [id(137), HELP(vsextCutSpanMethod)] // cuts text to clipboard either to point or for a specific # of chars, depending on VARIANT param
    HRESULT Cut([in] VARIANT PointOrCount, [in, defaultvalue(0)] VARIANT_BOOL Append);

    [id(135), HELP(vsextDeleteSpanMethod)] // deletes text either to point or for a specific # of chars, depending on VARIANT param
    HRESULT Delete([in] VARIANT PointOrCount);

    [id(138), HELP(vsextPasteMethod)] // pastes text from clipboard
    HRESULT Paste(void);

    [id(139), HELP(vsextReadOnlySpanMethod)] // checks for read-only state of text span
    HRESULT ReadOnly([in] VARIANT PointOrCount, [out, retval] VARIANT_BOOL *lfResult);

    [id(151), HELP(vsextFindPatternMethod)] // finds text
    HRESULT FindPattern([in] BSTR Pattern, [in, defaultvalue(vsFindOptionsNone)] long vsFindOptionsValue, [in, out, defaultvalue(0)] EditPoint **EndPoint, [in, out, defaultvalue(0)] TextRanges **Tags, [out, retval] VARIANT_BOOL *pbFound);

    [id(152), HELP(vsextReplacePatternMethod)] // replaces text
    HRESULT ReplacePattern([in] TextPoint *Point, [in] BSTR Pattern, [in] BSTR Replace, [in, defaultvalue(vsFindOptionsNone)] long vsFindOptionsValue, [in, out, defaultvalue(0)] TextRanges **Tags, [out, retval] VARIANT_BOOL *pbFound);

    [id(161), HELP(vsextIndentMethod)] // indents
    HRESULT Indent([in, defaultvalue(0)] TextPoint *Point, [in, defaultvalue(1)] long Count);

    [id(162), HELP(vsextUnindentMethod)] // unindents
    HRESULT Unindent([in, defaultvalue(0)] TextPoint *Point, [in, defaultvalue(1)] long Count);

    [id(163), HELP(vsextSmartFormatMethod)] // reformats according to language rules
    HRESULT SmartFormat([in] TextPoint *Point);

	[id(167), HELP(vsextEPOutlineSectionMethod)]
	HRESULT OutlineSection([in] VARIANT PointOrCount);

    [id(164), HELP(vsextEPReplaceTextMethod)] // replaces a specified span of text
    HRESULT ReplaceText([in] VARIANT PointOrCount, [in] BSTR Text, [in] long Flags);

    [id(165), HELP(vsextChangeCaseMethod)] // alters case
    HRESULT ChangeCase([in] VARIANT PointOrCount, [in] vsCaseOptions How);

    [id(166), HELP(vsextDeleteWhitespaceMethod)] // blasts whitespace, either horz. (surrounding space chars) or vert. (blank lines)
    HRESULT DeleteWhitespace([in, defaultvalue(vsWhitespaceOptionsHorizontal)] vsWhitespaceOptions Direction);
  };

  [ odl, dual, oleautomation, object, uuid(cb218890-1382-472b-9118-782700c88115), HELP(vsobjTextDocument) ]
  interface TextDocument : IDispatch
  {
    [id(150), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(151), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Document **ppParent);

    [id(1), propget, HELP(vsobjSelection)]
    HRESULT Selection([retval, out] TextSelection **ppSel);

    [id(122), HELP(vsextClearBookmarksMethod)]
    HRESULT ClearBookmarks(void);

    [id(124), HELP(vsextMarkTextMethod)]
    HRESULT MarkText([in] BSTR Pattern, [in, defaultvalue(0)] long vsFindOptionsValue, [out, retval] VARIANT_BOOL *pbRetVal);

    [id(128), HELP(vsextReplaceTextMethod)]
    HRESULT ReplacePattern([in] BSTR Pattern, [in] BSTR Replace, [in, defaultvalue(0)] long vsFindOptionsValue, [in, out, defaultvalue(0)] TextRanges **Tags, [out, retval] VARIANT_BOOL *pbRetVal);

    [id(131), HELP(vsextDocCreateEditPointMethod)]
    HRESULT CreateEditPoint([in, defaultvalue(0)] TextPoint *TextPoint, [out, retval] EditPoint **lppaReturn);

    [id(132), propget, HELP(vsextStartPointProperty)]
    HRESULT StartPoint([retval, out] TextPoint **pStartPoint);

    [id(133), propget, HELP(vsextEndPointProperty)]
    HRESULT EndPoint([retval, out] TextPoint **pEndPoint);

    [id(137), propget, hidden, HELP(vsextLanguageNameProperty)]
    HRESULT Language([out, retval] BSTR *pLanguage);

    [id(137), propput, hidden, HELP(vsextLanguageNameProperty)]
    HRESULT Language([in] BSTR Language);

    [id(145), hidden, propget, HELP(vsproTypeProperty)]
    HRESULT Type([retval, out] BSTR *pType);

    [id(135), propget, hidden, HELP(vsproIndentSizeProperty)]
    HRESULT IndentSize([out, retval] long *pSize);

    [id(140), propget, hidden, HELP(vsproTabSizeProperty)]
    HRESULT TabSize([out, retval] long *pSize);

    [id(144), hidden, HELP(vsextReplaceTextMethod)]
    HRESULT ReplaceText([in] BSTR FindText, [in] BSTR ReplaceText, [in, defaultvalue(0)] long vsFindOptionsValue, [out, retval] VARIANT_BOOL *pbRetVal);

    [id(134), hidden, HELP(vsobjPrint)]
    HRESULT PrintOut(void);
    };

  [ odl, dual, oleautomation, object, uuid(1fa0e135-399a-4d2c-a4fe-d21e2480f921), HELP(vsobjTextSelection) ]
  interface TextSelection : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] TextDocument **ppParent);

    [id(3), propget, HELP(vsextAnchorPointProperty)]
    HRESULT AnchorPoint([out, retval] VirtualPoint **ppPoint);

    [id(4), propget, HELP(vsextActivePointProperty)]
    HRESULT ActivePoint([out, retval] VirtualPoint **ppPoint);

    [id(5), propget, hidden, HELP(vsextAnchorColumnProperty)]
    HRESULT AnchorColumn([out, retval] long *pColumn);

    [id(6), propget, hidden, HELP(vsextBottomLineProperty)]
    HRESULT BottomLine([out, retval] long *pLine);

    [id(7), propget, HELP(vsextBottomPointProperty)]
    HRESULT BottomPoint([out, retval] VirtualPoint **ppPoint);

    [id(8), propget, hidden, HELP(vsextCurrentColumnProperty)]
    HRESULT CurrentColumn([out, retval] long *pColumn);

    [id(9), propget, hidden, HELP(vsextCurrentLineProperty)]
    HRESULT CurrentLine([out, retval] long *pLine);

    [id(10), propget, HELP(vsextIsEmptyProperty)]
    HRESULT IsEmpty([out, retval] VARIANT_BOOL *pfEmpty);

    [id(11), propget, HELP(vsextIsActiveEndGreaterProperty)]
    HRESULT IsActiveEndGreater([out, retval] VARIANT_BOOL *pfGreater);

    [id(0), propget, HELP(vsextTextProperty)]
    HRESULT Text([out, retval] BSTR *pText);

    [id(0), propput, HELP(vsextTextProperty)]
    HRESULT Text([in] BSTR Text);

    [id(13), propget, hidden, HELP(vsextTopLineProperty)]
    HRESULT TopLine([out, retval] long *pLine);

    [id(14), propget, HELP(vsextTopPointProperty)]
    HRESULT TopPoint([out, retval] VirtualPoint **ppPoint);

    [id(15), HELP(vsextSelectionChangeCaseMethod)]
    HRESULT ChangeCase([in] vsCaseOptions How);

    [id(16), HELP(vsextCharLeftMethod)]
    HRESULT CharLeft([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);

    [id(17), HELP(vsextCharRightMethod)]
    HRESULT CharRight([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);

    [id(18), HELP(vsextClearBookmarkMethod)]
    HRESULT ClearBookmark();

    [id(19), HELP(vsextCollapseMethod)]
    HRESULT Collapse();

	[id(72), HELP(vsextOutlineSectionMethod)]
	HRESULT OutlineSection();

    [id(20), HELP(vsextCopyMethod)]
    HRESULT Copy();

    [id(21), HELP(vsextCutMethod)]
    HRESULT Cut();

    [id(22), HELP(vsextPasteMethod)]
    HRESULT Paste();

    [id(23), HELP(vsextDeleteMethod)]
    HRESULT Delete([in, defaultvalue(1)] long Count);

    [id(24), HELP(vsextDeleteLeftMethod)]
    HRESULT DeleteLeft([in, defaultvalue(1)] long Count);

    [id(25), HELP(vsextDeleteWhitespaceMethod)]
    HRESULT DeleteWhitespace([in, defaultvalue(vsWhitespaceOptionsHorizontal)] vsWhitespaceOptions Direction);

    [id(26), HELP(vsextEndOfLineMethod)]
    HRESULT EndOfLine([in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(27), HELP(vsextStartOfLineMethod)]
    HRESULT StartOfLine([in, defaultvalue(vsStartOfLineOptionsFirstColumn)] vsStartOfLineOptions Where, [in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(28), HELP(vsextEndOfDocumentMethod)]
    HRESULT EndOfDocument([in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(29), HELP(vsextStartOfDocumentMethod)]
    HRESULT StartOfDocument([in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(30), HELP(vsextSelectionFindPatternMethod)]
    HRESULT FindPattern([in] BSTR Pattern, [in, defaultvalue(0)] long vsFindOptionsValue, [in, out, defaultvalue(0)] TextRanges **Tags, [out, retval] VARIANT_BOOL *pfFound);

    [id(31), HELP(vsextSelectionReplacePatternMethod)]
    HRESULT ReplacePattern([in] BSTR Pattern, [in] BSTR Replace, [in, defaultvalue(0)] long vsFindOptionsValue, [in, out, defaultvalue(0)] TextRanges **Tags, [out, retval] VARIANT_BOOL *pfFound);

    [id(70), HELP(vsextSelectionFindPatternMethod)]
    HRESULT FindText([in] BSTR Pattern, [in, defaultvalue(0)] long vsFindOptionsValue, [out, retval] VARIANT_BOOL *pfFound);

    [id(71), hidden, HELP(vsextSelectionReplacePatternMethod)]
    HRESULT ReplaceText([in] BSTR Pattern, [in] BSTR Replace, [in, defaultvalue(0)] long vsFindOptionsValue, [out, retval] VARIANT_BOOL *pfFound);

    [id(32), HELP(vsextGotoLineMethod)]
    HRESULT GotoLine([in] long Line, [in, defaultvalue(0)] VARIANT_BOOL Select);

    [id(33), HELP(vsextSelectionIndentMethod)]
    HRESULT Indent([in, defaultvalue(1)] long Count);

    [id(34), HELP(vsextSelectionUnindentMethod)]
    HRESULT Unindent([in, defaultvalue(1)] long Count);

    [id(35), HELP(vsextInsertMethod)]
    HRESULT Insert([in] BSTR Text, [in, defaultvalue(vsInsertFlagsCollapseToEnd)] long vsInsertFlagsCollapseToEndValue);

    [id(61), HELP(vsextInsertFromFileMethod)]
    HRESULT InsertFromFile([in] BSTR File);

    [id(36), HELP(vsextLineDownMethod)]
    HRESULT LineDown([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);

    [id(37), HELP(vsextLineUpMethod)]
    HRESULT LineUp([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);

    [id(38), HELP(vsextMoveToPointMethod)]
    HRESULT MoveToPoint([in] TextPoint *Point, [in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(39), HELP(vsextMoveToPointMethod)]
    HRESULT MoveToLineAndOffset([in] long Line, [in] long Offset, [in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(40), HELP(vsextMoveToAbsoluteOffsetMethod)]
    HRESULT MoveToAbsoluteOffset([in] long Offset, [in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(41), HELP(vsextNewLineMethod)]
    HRESULT NewLine([in, defaultvalue(1)] long Count);

    [id(42), HELP(vsextSetBookmarkMethod)]
    HRESULT SetBookmark();

    [id(43), HELP(vsextNextBookmarkMethod)]
    HRESULT NextBookmark([out, retval] VARIANT_BOOL *pbFound);

    [id(44), HELP(vsextPreviousBookmarkMethod)]
    HRESULT PreviousBookmark([out, retval] VARIANT_BOOL *pbFound);

    [id(45), HELP(vsextPadToColumnMethod)]
    HRESULT PadToColumn([in] long Column);

    [id(46), HELP(vsextSmartFormatMethod)]
    HRESULT SmartFormat();

    [id(47), HELP(vsextSelectAllMethod)]
    HRESULT SelectAll();

    [id(48), HELP(vsextSelectLineMethod)]
    HRESULT SelectLine();

    [id(49), HELP(vsextSwapAnchorMethod)]
    HRESULT SwapAnchor();

    [id(50), HELP(vsextTabifyMethod)]
    HRESULT Tabify();

    [id(51), HELP(vsextUntabifyMethod)]
    HRESULT Untabify();

    [id(52), HELP(vsextWordLeftMethod)]
    HRESULT WordLeft([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);

    [id(53), HELP(vsextWordRightMethod)]
    HRESULT WordRight([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);

    [id(54), propget, HELP(vsextTextPaneProperty)]
    HRESULT TextPane([out, retval] TextPane **ppPane);

    [id(55), propget, HELP(vsproStreamSelectionMode)]
    HRESULT Mode([out, retval] vsSelectionMode *pMode);

    [id(55), propput, HELP(vsproStreamSelectionMode)]
    HRESULT Mode([in] vsSelectionMode Mode);

    [id(56), propget, HELP(vsextTextRangesProperty)]
    HRESULT TextRanges([out, retval] TextRanges **ppRanges);

    [id(80), hidden, HELP(vsextDeleteLeftMethod)]
    HRESULT Backspace([in, defaultvalue(1)] long Count);

    [id(81), hidden, HELP(vsextCollapseMethod)]
    HRESULT Cancel();

    [id(57), HELP(vsextDestructiveInsertMethod)]
    HRESULT DestructiveInsert([in] BSTR Text);

    [id(82), hidden, HELP(vsextMoveToDisplayColumnMethod)]
    HRESULT MoveTo([in] long Line, [in] long Column, [in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(58), HELP(vsextMoveToDisplayColumnMethod)]
    HRESULT MoveToDisplayColumn([in] long Line, [in] long Column, [in, defaultvalue(0)] VARIANT_BOOL Extend);

    [id(59), HELP(vsextPageUpMethod)]
    HRESULT PageUp([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);

    [id(60), HELP(vsextPageDownMethod)]
    HRESULT PageDown([in, defaultvalue(0)] VARIANT_BOOL Extend, [in, defaultvalue(1)] long Count);
  };


  [ odl, dual, oleautomation, object, uuid(42320454-626c-4dd0-9ecb-357c4f1966d8), HELP(vsobjVirtualPoint) ]
  interface VirtualPoint : TextPoint
  {
    [id(101), propget, HELP(vsextVirtualCharOffsetProperty)]
    HRESULT VirtualCharOffset([out, retval] long *pOffset);

    [id(102), propget, HELP(vsextDisplayColumnProperty)]
    HRESULT VirtualDisplayColumn([out, retval] long * lppaReturn);

  };


  [ odl, dual, oleautomation, object, uuid(2fc54dc9-922b-44eb-8cc0-ba182584dc4b), HELP(vsobjTextWindow) ]
  interface TextWindow : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Window **ppParent);

    [id(3), propget, HELP(vsobjSelection)]
    HRESULT Selection([out, retval] TextSelection **ppSel);

    [id(4), propget, HELP(vsextActivePaneProperty)]
    HRESULT ActivePane([out, retval] TextPane **ppPane);

    [id(5), propget, HELP(vsextPanesProperty)]
    HRESULT Panes([out, retval] TextPanes **ppPanes);
  };


  [ odl, dual, oleautomation, object, uuid(d9013d31-3652-46b2-a25a-29a881b9f86b), HELP(vsobjTextPanes) ]
  interface TextPanes : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] TextWindow **ppParent);

    [id(3), propget, HELP(vsproCountProperty)]
    HRESULT Count([out, retval] long *pCount);

    [id(DISPID_VALUE), HELP(vsextItemMethod)]
    HRESULT Item([in] VARIANT Index, [out, retval] TextPane **ppPane);

    [restricted, id(DISPID_NEWENUM)]
    HRESULT _NewEnum([out, retval] IUnknown **lppiuReturn);
  };


  [ odl, dual, oleautomation, object, uuid(0a3bf283-05f8-4669-9bcb-a84b6423349a), HELP(vsobjTextPane) ]
  interface TextPane : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproCollectionProperty)]
    HRESULT Collection([out, retval] TextPanes **ppPanes);

    [id(3), propget, HELP(vsextWindowProperty)]
    HRESULT Window([out, retval] Window **ppWin);

    [id(4), propget, HELP(vsextHeightProperty)]
    HRESULT Height([out, retval] long *pHeight);

    [id(5), propget, HELP(vsextWidthProperty)]
    HRESULT Width([out, retval] long *pWidth);

    [id(8), propget, HELP(vsobjSelection)]
    HRESULT Selection([out, retval] TextSelection **ppSel);

    [id(9), propget, HELP(vsextStartPointProperty)]
    HRESULT StartPoint([out, retval] TextPoint **ppPoint);

    [id(12), HELP(vsextActivateMethod)]
    HRESULT Activate();

    [id(10), HELP(vsextIsVisibleMethod)]
    HRESULT IsVisible([in] TextPoint *Point, [in, optional] VARIANT PointOrCount, [out, retval] VARIANT_BOOL *pbResult);

    [id(11), HELP(vsextTryToShowMethod)]
    HRESULT TryToShow([in] TextPoint *Point, [in, defaultvalue(vsPaneShowAsIs)] vsPaneShowHow How, [in, optional] VARIANT PointOrCount, [out, retval] VARIANT_BOOL *pbResult);
  };

  [ odl, dual, oleautomation, object, uuid(9ff3ddca-1795-4191-a5b1-02d1ae35d074), hidden ]
  interface TextEditor : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT Application([out, retval] DTE **ppApp);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] DTE **ppParent);

    [id(3), propget, HELP(vsextEmulationProperty)]
    HRESULT Emulation([out, retval] long *pEditorType);

    [id(3), propput, HELP(vsextEmulationProperty)]
    HRESULT Emulation([in] long EditorType);

    [id(4), propget, HELP(vsextOvertypeProperty)]
    HRESULT Overtype([out, retval] VARIANT_BOOL *pbOT);

    [id(4), propput, HELP(vsextOvertypeProperty)]
    HRESULT Overtype([in] VARIANT_BOOL bOT);

    [id(5), propget, HELP(vsextVisibleWhitespaceProperty)]
    HRESULT VisibleWhitespace([out, retval] VARIANT_BOOL *pbVW);

    [id(5), propput, HELP(vsextVisibleWhitespaceProperty)]
    HRESULT VisibleWhitespace([in] VARIANT_BOOL bVW);
  };

  //Backward compatible constants:
  typedef [ uuid (C106C8DC-6D0C-11D1-B2C9-00C04FB6C6FF), hidden ]
  enum vsext_FontCharSet 
  {
    vsext_fontcs_ANSI         = 0,
    vsext_fontcs_DEFAULT      = 1,
    vsext_fontcs_SYMBOL       = 2,
    vsext_fontcs_SHIFTJIS     = 128,
    vsext_fontcs_HANGEUL      = 129,
    vsext_fontcs_GB2312       = 134,
    vsext_fontcs_CHINESEBIG5  = 136,
    vsext_fontcs_OEM          = 255,
    vsext_fontcs_JOHAB        = 130,
    vsext_fontcs_HEBREW       = 177,
    vsext_fontcs_ARABIC       = 178,
    vsext_fontcs_GREEK        = 161,
    vsext_fontcs_TURKISH      = 162,
    vsext_fontcs_VIETNAMESE   = 163,
    vsext_fontcs_THAI         = 222,
    vsext_fontcs_EASTEUROPE   = 238,
    vsext_fontcs_RUSSIAN      = 204,
    vsext_fontcs_MAC          = 77,
    vsext_fontcs_BALTIC       = 186
  } vsext_FontCharSet;

  typedef [ uuid(cb0066fc-c052-4b24-84e7-045f33e4d6af), hidden ] 
  enum VSEXECRESULT 
  {
    RESULT_Success = -1 ,  
    RESULT_Failure = 0,
    RESULT_Cancel  = 1
  } vs_exec_Result;

  typedef [ uuid(91aab9c3-da83-473a-8bc9-1a2730865995), hidden]
  enum vsext_DisplayMode
  {
    vsext_dm_SDI = 0,
    vsext_dm_MDI = 1
  } vsext_DisplayMode;

  typedef [ uuid (E4B9E990-FD59-11D0-BBC6-00A0C90F2744), hidden ]
  enum vsext_WindowType 
  {
    vsext_wt_CodeWindow         = 0,
    vsext_wt_Designer           = 1,
    vsext_wt_Browser            = 2,
    vsext_wt_Watch              = 3,
    vsext_wt_Locals             = 4,
    vsext_wt_Immediate          = 5,
    vsext_wt_ProjectWindow      = 6,
    vsext_wt_PropertyWindow     = 7,
    vsext_wt_Find               = 8,
    vsext_wt_FindReplace        = 9,
    vsext_wt_Toolbox            = 10,
    vsext_wt_LinkedWindowFrame  = 11,
    vsext_wt_MainWindow         = 12,
    vsext_wt_Preview            = 13,
    vsext_wt_ColorPalette       = 14,
    vsext_wt_ToolWindow         = 15,
    vsext_wt_Document           = 16, 
    vsext_wt_OutPutWindow       = 17,
    vsext_wt_TaskList           = 18,
    vsext_wt_Autos              = 19,
    vsext_wt_CallStack          = 20, 
    vsext_wt_Threads            = 21,
    vsext_wt_DocumentOutline    = 22,
    vsext_wt_RunningDocuments   = 23
  } vsext_WindowType;

  typedef [ uuid(e0c72e51-6b99-489b-aca6-90cedce888e7), hidden ]
  enum vsext_WindowState
  {
    vsext_ws_Normal   = 0,
    vsext_ws_Minimize = 1,
    vsext_ws_Maximize = 2
  } vsext_WindowState;

  typedef [ uuid(97653acf-d869-4ec0-b450-e9842457c729), hidden ]
  enum vsext_LinkedWindowType
  {
    vsext_lwt_Docked  = 0,
    vsext_lwt_Tabbed  = 1,
    //vsext_ws_Maximize = 2
  } vsext_LinkedWindowType;

  typedef [ uuid (A5578594-18E0-11D1-BBDB-00A0C90F2744), hidden ]
  enum vsext_StartUp 
  {
    vsext_su_EMPTY_ENVIRONMENT    = 0,
    vsext_su_NEW_SOLUTION_DIALOG  = 1,
    vsext_su_LOAD_LAST_SOLUTION   = 2
  } vsext_StartUp;

  typedef [ uuid (47046891-19F7-11D1-BCAF-000000000000), hidden ]
  enum vsext_Build 
  {
    vsext_bld_SAVE_CHANGES  = 0,
    vsext_bld_CONFIRM_SAVE  = 1,
    vsext_bld_NO_SAVE       = 2
  } vsext_Build;

  
  typedef [ uuid(bdbe10aa-74d3-498a-a464-8074cd5e99cb), hidden ]
  enum DsTextSearchOptions
  {
    dsMatchWord     = 2,  // match whole words
    dsMatchCase     = 4,  // match is sensitive to case
    dsMatchNoRegExp   = 0,  // don't use regular expressions
    dsMatchRegExp   = 8,  // match Dev Studio regular expressions
    dsMatchRegExpB    = 16,
    dsMatchRegExpE    = 32,
    dsMatchRegExpCur  = 64,
    dsMatchForward    = 0,  // search forward
    dsMatchBackward   = 128,  // search backwards
    dsMatchFromStart  = 256,  // do search from start or end of view
  } DsTextSearchOptions;

  typedef [uuid (99744EC4-7A72-11D2-ADC9-00C04F7971C3), hidden ]
  enum DsSaveChanges
  {
    dsSaveChangesYes  = 1,
    dsSaveChangesNo   = 2,
    dsSaveChangesPrompt = 3
  } DsSaveChanges;

  typedef [ uuid(6269c78d-5591-40d6-a095-5bac8ba07478), hidden ]
  enum DsGoToLineOptions
  {
    dsLastLine = -1
  } DsGoToLineOptions;

  typedef [ uuid(95751137-ac07-4c76-a219-4be5d381985d), hidden ]
  enum DsStartOfLineOptions
  {
    dsFirstColumn = 0,
    dsFirstText   = 1
  } DsStartOfLineOptions;

  
  typedef [ uuid(4b58f807-6f08-4b41-abaf-b5bca4869d2c), hidden ]
  enum DsMovementOptions
  {
    dsMove    = 0,
    dsExtend  = 1
  } DsMovementOptions;


  typedef [ uuid(31445615-bcae-4ba0-a99c-246bc660cfe8), hidden ]
  enum DsWhitespaceOptions
  {
    dsHorizontal = 0,
    dsVertical   = 1
  } DsWhitespaceOptions;


  typedef [ uuid(f7d38518-e803-4462-8fa2-e481642d42fb), hidden ]
  enum DsCaseOptions
  {
    dsLowercase   = 1,
    dsUppercase   = 2,
    dsCapitalize  = 3
  } DsCaseOptions;

  typedef [ uuid(8d78b9a9-a3be-49d0-aa97-bf7fa46d8ea2), hidden ]
  enum dsSaveStatus
  {
    dsSaveCancelled = 2,
    dsSaveSucceeded = 1
  } dsSaveStatus;

  typedef [ uuid(44160df5-e305-4d85-b7fe-6b5a1b81b9b0), HELP(vsenumHTMLTabs) ]
  enum vsHTMLTabs
  {
    vsHTMLTabsSource = 0,
    vsHTMLTabsDesign = 1
  } vsHTMLTabs;


  [ odl, dual, oleautomation, object, uuid(f6576203-fbce-477e-a66b-eda237bb68a7) ]
  interface HTMLWindow : IDispatch
  {
    [id(1), propget, HELP(vsproDTEProperty)]
    HRESULT DTE([out, retval] DTE **ppDTE);

    [id(2), propget, HELP(vsproParentProperty)]
    HRESULT Parent([out, retval] Window **ppParent);

	[id(4), propget, HELP(vsextCurrentTab)]
	HRESULT CurrentTab([out, retval] vsHTMLTabs *pTab);

	[id(4), propput, HELP(vsextCurrentTab)]
	HRESULT CurrentTab([in] vsHTMLTabs Tab);

	[id(5), propget, HELP(vsextCurrentTabObject)]
	HRESULT CurrentTabObject([out, retval] IDispatch **ppObj);
  };
};

cpp_quote("#define SID_SDTE	IID__DTE")

cpp_quote("#ifdef Delete_defined")
cpp_quote("#define Delete delete")
cpp_quote("#endif")

cpp_quote("#ifdef ReplaceText_defined")
cpp_quote("#ifdef UNICODE")
cpp_quote("#define ReplaceText ReplaceTextW")
cpp_quote("#else")
cpp_quote("#define ReplaceText ReplaceTextA")
cpp_quote("#endif")
cpp_quote("#endif")


#ifdef Delete_defined
#define Delete delete
#endif

#ifdef ReplaceText_defined
#ifdef UNICODE
#define ReplaceText ReplaceTextW
#else
#define ReplaceText ReplaceTextA
#endif
#endif
