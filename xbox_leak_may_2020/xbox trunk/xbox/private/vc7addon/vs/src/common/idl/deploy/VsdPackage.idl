 // VsdPackage.idl : IDL source for Deployment Packaging
//


// DISPIDs
typedef
[
	uuid(54565967-dbfb-11d2-898d-0000f8064ebb),
	helpstring("DISPIDs_IVsdPackageManager")
]
enum DISPIDs_IVsdPackageManager
{
	[helpstring("DISPID_IVsdPackageManager_Items")] DISPID_IVsdPackageManager_Items							= 1,
	[helpstring("DISPID_IVsdPackageManager_Attributes")] DISPID_IVsdPackageManager_Attributes				= 2,
	[helpstring("DISPID_IVsdPackageManager_PackageType")] DISPID_IVsdPackageManager_PackageType				= 3,
	[helpstring("DISPID_IVsdPackageManager_Compression")] DISPID_IVsdPackageManager_Compression				= 4,
	[helpstring("DISPID_IVsdPackageManager_Folder")] DISPID_IVsdPackageManager_Folder						= 5,
	[helpstring("DISPID_IVsdPackageManager_FileName")] DISPID_IVsdPackageManager_FileName					= 6,
	[helpstring("DISPID_IVsdPackageManager_FolderMarkPerFile")] DISPID_IVsdPackageManager_FolderMarkPerFile	= 7,
	[helpstring("DISPID_IVsdPackageManager_FolderMarkPerKb")] DISPID_IVsdPackageManager_FolderMarkPerKb		= 8,
	[helpstring("DISPID_IVsdPackageManager_CabinetSize")] DISPID_IVsdPackageManager_CabinetSize				= 9,
	[helpstring("DISPID_IVsdPackageManager_OutputFiles")] DISPID_IVsdPackageManager_OutputFiles				= 10,
	[helpstring("DISPID_IVsdPackageManager_Media")] DISPID_IVsdPackageManager_Media							= 11,
	[helpstring("DISPID_IVsdPackageManager_Package")] DISPID_IVsdPackageManager_Package						= 16,
	[helpstring("DISPID_IVsdPackageManager_Cancel")] DISPID_IVsdPackageManager_Cancel						= 17,
	[helpstring("DISPID_IVsdPackageManager_Clean")] DISPID_IVsdPackageManager_Clean							= 18,
	[helpstring("DISPID_IVsdPackageManager_Close")] DISPID_IVsdPackageManager_Close							= 19,
	[helpstring("DISPID_IVsdPackageManager_ProjectFolder")] DISPID_IVsdPackageManager_ProjectFolder			= 20,
} DISPIDs_IVsdPackageManager;

typedef
[
	uuid(54565968-dbfb-11d2-898d-0000f8064ebb),
	helpstring("DISPIDs_IVsdPackageManagerEvent")
]
enum DISPIDs_IVsdPackageManagerEvent
{
	[helpstring("DISPID_IVsdPackageManagerEvent_OnPackageStart")] DISPID_IVsdPackageManagerEvent_OnPackageStart		= 1,
	[helpstring("DISPID_IVsdPackageManagerEvent_OnPackageError")] DISPID_IVsdPackageManagerEvent_OnPackageError		= 2,
	[helpstring("DISPID_IVsdPackageManagerEvent_OnPackageStatus")] DISPID_IVsdPackageManagerEvent_OnPackageStatus	= 3,
	[helpstring("DISPID_IVsdPackageManagerEvent_OnPackageProgress")] DISPID_IVsdPackageManagerEvent_OnPackageProgress = 4,
	[helpstring("DISPID_IVsdPackageManagerEvent_OnPackageEnd")] DISPID_IVsdPackageManagerEvent_OnPackageEnd			= 5,
} DISPIDs_IVsdPackageManagerEvent;

typedef
[
	uuid(54565969-dbfb-11d2-898d-0000f8064ebb),
	helpstring("DISPIDs_IVsdPackageStream")
]
enum DISPIDs_IVsdPackageStream
{
	[helpstring("DISPID_IVsdPackageStream_Stream")] DISPID_IVsdPackageStream_Stream						= 1,
} DISPIDs_IVsdPackageStream;

typedef
[
	uuid(5456596a-dbfb-11d2-898d-0000f8064ebb),
	helpstring("DISPIDs_IVsdPackageStreamAttributes")
]
enum DISPIDs_IVsdPackageStreamAttributes
{
	[helpstring("DISPID_IVsdPackageStreamAttributes_PackageAs")] DISPID_IVsdPackageStreamAttributes_PackageAs				= 2,
	[helpstring("DISPID_IVsdPackageStreamAttributes_TargetID")] DISPID_IVsdPackageStreamAttributes_TargetID					= 3,
	[helpstring("DISPID_IVsdPackageStreamAttributes_TargetName")] DISPID_IVsdPackageStreamAttributes_TargetName				= 4,
	[helpstring("DISPID_IVsdPackageStreamAttributes_TargetDate")] DISPID_IVsdPackageStreamAttributes_TargetDate				= 5,
	[helpstring("DISPID_IVsdPackageStreamAttributes_TargetAttributes")] DISPID_IVsdPackageStreamAttributes_TargetAttributes	= 7,
	[helpstring("DISPID_IVsdPackageStreamAttributes_DisplayName")] DISPID_IVsdPackageStreamAttributes_DisplayName			= 8,
} DISPIDs_IVsdPackageStreamAttributes;

typedef
[
	uuid(5456596b-dbfb-11d2-898d-0000f8064ebb),
	helpstring("DISPIDs_IVsdPackageFile")
]
enum DISPIDs_IVsdPackageFile
{
	[helpstring("DISPID_IVsdPackageFile_SourceName")] DISPID_IVsdPackageFile_SourceName	= 1,
} DISPIDs_IVsdPackageFile;


typedef
[
	uuid(54565979-dbfb-11d2-898d-0000f8064ebb),
	helpstring("DISPIDs_IVsdPackageFile")
]
enum DISPIDs_IVsdPackageMedia
{
	[helpstring("DISPID_IVsdPackageMedia_FileName")] DISPID_IVsdPackageMedia_FileName	= 1,
	[helpstring("DISPID_IVsdPackageMedia_Sequence")] DISPID_IVsdPackageMedia_Sequence	= 2,
	[helpstring("DISPID_IVsdPackageMedia_Files")] DISPID_IVsdPackageMedia_Files			= 3,
} DISPIDs_IVsdPackageMedia;

typedef
[
	uuid(5456597a-dbfb-11d2-898d-0000f8064ebb),
	helpstring("DISPIDs_IVsdPackageFile")
]
enum DISPIDs_IVsdPackageMediaFile
{
	[helpstring("DISPID_IVsdPackageFile_Key")] DISPID_IVsdPackageMediaFile_Key				= 1,
	[helpstring("DISPID_IVsdPackageFile_Sequence")] DISPID_IVsdPackageMediaFile_Sequence	= 2,
} DISPIDs_IVsdPackageMediaFile;


// enums
typedef
[
	uuid(5456596c-dbfb-11d2-898d-0000f8064ebb),
	helpstring("vsdPackageManagerAttributes")
]
enum vsdPackageManagerAttributes
{
	[helpstring("vsdpmaSmartCopy")] vsdpmaSmartCopy								= 1,
	[helpstring("vsdpmaCleanup")] vsdpmaCleanup									= 2,
	[helpstring("vsdpmaCreateFolderMarks")] vsdpmaCreateFolderMarks				= 4,
} vsdPackageManagerAttributes;

typedef
[
	uuid(5456596d-dbfb-11d2-898d-0000f8064ebb),
	helpstring("vsdCompressionOptimization")
]
enum vsdCompressionOptimization
{
	[helpstring("vsdcoNone")] vsdcoNone									= 1,
	[helpstring("vsdcoOptimizeForSpeed")] vsdcoOptimizeForSpeed			= 2,
	[helpstring("vsdcoOptimizeForSize")] vsdcoOptimizeForSize			= 3,
} vsdCompressionOptimization;

typedef
[
	uuid(5456596e-dbfb-11d2-898d-0000f8064ebb),
	helpstring("vsdPackageType")
]
enum vsdPackageType
{
	[helpstring("vsdptNormal")] vsdptNormal								= 1,
	[helpstring("vsdptSingleCabinet")] vsdptSingleCabinet				= 2,
	[helpstring("vsdptMultipleCabinets")] vsdptMultipleCabinets			= 3,
} vsdPackageType;

typedef
[
	uuid(5456596f-dbfb-11d2-898d-0000f8064ebb),
	helpstring("vsdPackageAs")
]
enum vsdPackageAs
{
	[helpstring("vsdpaDefault")] vsdpaDefault							= 1,
	[helpstring("vsdpaLoose")] vsdpaLoose								= 2,
} vsdPackageAs;



// interface
cpp_quote("#define SID_SVsdPackageManager IID_IVsdPackageManager")
[
object,
uuid(54565970-dbfb-11d2-898d-0000f8064ebb),
dual,
version(1.0),
pointer_default(unique)
]
interface IVsdPackageManager : IDispatch
{

	[propget, id(DISPID_IVsdPackageManager_Items), helpstring("property Items")] HRESULT Items([out, retval] IVsdManagedCollection **ppVal);
	[propget, id(DISPID_IVsdPackageManager_Attributes), helpstring("property Attributes")] HRESULT Attributes([out, retval] long *pVal);
	[propput, id(DISPID_IVsdPackageManager_Attributes), helpstring("property Attributes")] HRESULT Attributes([in] long Val);
	[propget, id(DISPID_IVsdPackageManager_PackageType), helpstring("property PackageType")] HRESULT PackageType([out, retval] vsdPackageType *pVal);
	[propput, id(DISPID_IVsdPackageManager_PackageType), helpstring("property PackageType")] HRESULT PackageType([in] vsdPackageType Val);
	[propget, id(DISPID_IVsdPackageManager_Compression), helpstring("property Compression")] HRESULT Compression([out, retval] vsdCompressionOptimization *pVal);
	[propput, id(DISPID_IVsdPackageManager_Compression), helpstring("property Compression")] HRESULT Compression([in] vsdCompressionOptimization Val);
	[propget, id(DISPID_IVsdPackageManager_Folder), helpstring("property Folder")] HRESULT Folder([out, retval] BSTR *pVal);
	[propput, id(DISPID_IVsdPackageManager_Folder), helpstring("property Folder")] HRESULT Folder([in] BSTR Val);
	[propget, id(DISPID_IVsdPackageManager_FileName), helpstring("property FileName")] HRESULT FileName([out, retval] BSTR *pVal);
	[propput, id(DISPID_IVsdPackageManager_FileName), helpstring("property FileName")] HRESULT FileName([in] BSTR Val);
	[propget, id(DISPID_IVsdPackageManager_FolderMarkPerFile), helpstring("property FolderMarkPerFile")] HRESULT FolderMarkPerFile([out, retval] long *pVal);
	[propput, id(DISPID_IVsdPackageManager_FolderMarkPerFile), helpstring("property FolderMarkPerFile")] HRESULT FolderMarkPerFile([in] long Val);
	[propget, id(DISPID_IVsdPackageManager_FolderMarkPerKb), helpstring("property FolderMarkPerKb")] HRESULT FolderMarkPerKb([out, retval] long *pVal);
	[propput, id(DISPID_IVsdPackageManager_FolderMarkPerKb), helpstring("property FolderMarkPerKb")] HRESULT FolderMarkPerKb([in] long Val);
	[propget, id(DISPID_IVsdPackageManager_CabinetSize), helpstring("property CabinetSize")] HRESULT CabinetSize([out, retval] long *pVal);
	[propput, id(DISPID_IVsdPackageManager_CabinetSize), helpstring("property CabinetSize")] HRESULT CabinetSize([in] long Val);
	[propget, id(DISPID_IVsdPackageManager_OutputFiles), helpstring("property OutputFiles")] HRESULT OutputFiles([out, retval] VARIANT *pVal);
	[propget, id(DISPID_IVsdPackageManager_Media), helpstring("property Media")] HRESULT Media([out, retval] IVsdCollectionSubset **Collection);
	[propget, id(DISPID_IVsdPackageManager_ProjectFolder), helpstring("property ProjectFolder")] HRESULT ProjectFolder([out, retval] BSTR *pVal);
	[propput, id(DISPID_IVsdPackageManager_ProjectFolder), helpstring("property ProjectFolder")] HRESULT ProjectFolder([in] BSTR Val);

	[id(DISPID_IVsdPackageManager_Package), helpstring("method Package")] HRESULT Package();
	[id(DISPID_IVsdPackageManager_Cancel), helpstring("method Cancel")] HRESULT Cancel();
	[id(DISPID_IVsdPackageManager_Clean), helpstring("method Clean")] HRESULT Clean();
	[id(DISPID_IVsdPackageManager_Close), helpstring("method Close")] HRESULT Close();
	
}

[
object,
uuid(54565971-dbfb-11d2-898d-0000f8064ebb),
dual,
version(1.0),
pointer_default(unique)
]
interface IVsdPackageManagerEvent : IDispatch
{
	[id(DISPID_IVsdPackageManagerEvent_OnPackageStart), helpstring("method OnPackageStart")] HRESULT OnPackageStart([out]VARIANT_BOOL *Continue);
	[id(DISPID_IVsdPackageManagerEvent_OnPackageError), helpstring("method OnPackageError")] HRESULT OnPackageError([in]IDispatch *EventObject, [in]DISPID ID, [in]long Error, [in]BSTR Message, [in]long lHelpContext, [out]VARIANT_BOOL *Continue);
	[id(DISPID_IVsdPackageManagerEvent_OnPackageStatus), helpstring("method OnPackageStatus")] HRESULT OnPackageStatus([in]IDispatch *EventObject, [in]DISPID ID, [in]BSTR Message, [out]VARIANT_BOOL *Continue);
	[id(DISPID_IVsdPackageManagerEvent_OnPackageProgress), helpstring("method OnPackageProgress")] HRESULT OnPackageProgress([in]long lProcessed, [in]long lTotal);
	[id(DISPID_IVsdPackageManagerEvent_OnPackageEnd), helpstring("method OnPackageEnd")] HRESULT OnPackageEnd([out]VARIANT_BOOL *Continue);
}

[
object,
uuid(54565972-dbfb-11d2-898d-0000f8064ebb),
dual,
version(1.0),
pointer_default(unique)
]
interface IVsdPackageStream : IVsdPackageStreamAttributes
{
#if (__midl >= 501)
midl_pragma warning( disable: 2039 ) 
#endif
	[propget, id(DISPID_IVsdPackageStream_Stream), helpstring("property Stream"), hidden] HRESULT Stream([out, retval] IStream **ppVal);
#if (__midl >= 501)
midl_pragma warning( enable: 2039 ) 
#endif
}


[
object,
uuid(54565973-dbfb-11d2-898d-0000f8064ebb),
dual,
version(1.0),
pointer_default(unique)
]
interface IVsdPackageStreamAttributes : IDispatch
{
	[propget, id(DISPID_IVsdPackageStreamAttributes_PackageAs), helpstring("property PackageAs")] HRESULT PackageAs([out, retval] vsdPackageAs *pVal);
	[propput, id(DISPID_IVsdPackageStreamAttributes_PackageAs), helpstring("property PackageAs")] HRESULT PackageAs([in] vsdPackageAs Val);
	[propget, id(DISPID_IVsdPackageStreamAttributes_TargetID), helpstring("property TargetID")] HRESULT TargetID([out, retval] BSTR *pVal);
	[propput, id(DISPID_IVsdPackageStreamAttributes_TargetID), helpstring("property TargetID")] HRESULT TargetID([in] BSTR Val);
	[propget, id(DISPID_IVsdPackageStreamAttributes_TargetName), helpstring("property TargetName")] HRESULT TargetName([out, retval] BSTR *pVal);
	[propput, id(DISPID_IVsdPackageStreamAttributes_TargetName), helpstring("property TargetName")] HRESULT TargetName([in] BSTR Val);
	[propget, id(DISPID_IVsdPackageStreamAttributes_TargetDate), helpstring("property TargetDate")] HRESULT TargetDate([out, retval] double *pVal);
	[propput, id(DISPID_IVsdPackageStreamAttributes_TargetDate), helpstring("property TargetDate")] HRESULT TargetDate([in] double Val);
	[propget, id(DISPID_IVsdPackageStreamAttributes_TargetAttributes), helpstring("property TargetAttributes")] HRESULT TargetAttributes([out, retval] long *pVal);
	[propput, id(DISPID_IVsdPackageStreamAttributes_TargetAttributes), helpstring("property TargetAttributes")] HRESULT TargetAttributes([in] long Val);
	[propget, id(DISPID_IVsdPackageStreamAttributes_DisplayName), helpstring("property DisplayName")] HRESULT DisplayName([out, retval] BSTR *pVal);
	[propput, id(DISPID_IVsdPackageStreamAttributes_DisplayName), helpstring("property DisplayName")] HRESULT DisplayName([in] BSTR Val);
}

[
object,
uuid(54565974-dbfb-11d2-898d-0000f8064ebb),
dual,		
version(1.0),
pointer_default(unique)
]
interface IVsdPackageFile : IVsdPackageStreamAttributes
{
	[propget, id(DISPID_IVsdPackageFile_SourceName), helpstring("property SourceName")] HRESULT SourceName([out, retval] BSTR *pVal);
	[propput, id(DISPID_IVsdPackageFile_SourceName), helpstring("property SourceName")] HRESULT SourceName([in] BSTR Val);
}

[
object,
uuid(5456597b-dbfb-11d2-898d-0000f8064ebb),
dual,		
version(1.0),
pointer_default(unique)
]
interface IVsdPackageMedia : IDispatch
{
	[propget, id(DISPID_IVsdPackageMedia_FileName), helpstring("property FileName")] HRESULT FileName([out, retval] BSTR *pVal);
	[propget, id(DISPID_IVsdPackageMedia_Sequence), helpstring("property Sequence")] HRESULT Sequence([out, retval] long *pVal);
	[propget, id(DISPID_IVsdPackageMedia_Files), helpstring("property Files")] HRESULT Files([out, retval] IVsdCollectionSubset **Collection);
}

[
object,
uuid(5456597c-dbfb-11d2-898d-0000f8064ebb),
dual,		
version(1.0),
pointer_default(unique)
]
interface IVsdPackageMediaFile : IDispatch
{
	[propget, id(DISPID_IVsdPackageMediaFile_Key), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
	[propget, id(DISPID_IVsdPackageMediaFile_Sequence), helpstring("property Sequence")] HRESULT Sequence([out, retval] long *pVal);
}

