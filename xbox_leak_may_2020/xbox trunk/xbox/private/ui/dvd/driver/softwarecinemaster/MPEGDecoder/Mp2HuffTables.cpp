////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// Copyright 2000-2001 STMicroelectronics, Inc.  All Rights Reserved.         //
// HIGHLY CONFIDENTIAL INFORMATION:  This source code contains                //
// confidential and proprietary information of STMicroelectronics, Inc.       //
// This source code is provided to Microsoft Corporation under a written      //
// confidentiality agreement between STMicroelectronics and Microsoft.  This  //
// software may not be reproduced, distributed, modified, disclosed, used,    //
// displayed, stored in a retrieval system or transmitted in whole or in part,//
// in any form or by any means, electronic, mechanical, photocopying or       //
// otherwise, except as expressly authorized by STMicroelectronics. THE ONLY  //
// PERSONS WHO MAY HAVE ACCESS TO THIS SOFTWARE ARE THOSE PERSONS             //
// AUTHORIZED BY RAVISENT, WHO HAVE EXECUTED AND DELIVERED A                  //
// WRITTEN CONFIDENTIALITY AGREEMENT TO STMicroelectronics, IN THE FORM       //
// PRESCRIBED BY STMicroelectronics.                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include "Mp2HuffTables.h"

struct HuffInit MacroBlockAddressIncrementInit[] = {
	{"1",					1},
	{"011",				2},
	{"010",				3},
	{"0011",				4},
	{"0010",				5},
	{"00011",			6},
	{"00010",			7},
	{"0000111",			8},
	{"0000110",			9},
	{"00001011",		10},
	{"00001010",		11},
	{"00001001",		12},
	{"00001000",		13},
	{"00000111",		14},
	{"00000110",		15},
	{"0000010111",		16},
	{"0000010110",		17},
	{"0000010101",		18},
	{"0000010100",		19},
	{"0000010011",		20},
	{"0000010010",		21},
	{"00000100011",	22},
	{"00000100010",	23},
	{"00000100001",	24},
	{"00000100000",	25},
	{"00000011111",	26},
	{"00000011110",	27},
	{"00000011101",	28},
	{"00000011100",	29},
	{"00000011011",	30},
	{"00000011010",	31},
	{"00000011001",	32},
	{"00000011000",	33},
	{"00000001000",	34},
	{NULL, 0}};

struct HuffInit IFrameMacroBlockTypeInit[] = {
	{"10",		MKMF(MF_FRAME_PREDICTION | MF_INTRA)},
	{"11",		MKMF(MF_FRAME_PREDICTION | MF_ALTERNATE_DCT | MF_INTRA)},
   {"010",		MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_INTRA)},
   {"011",		MKMF(MF_FRAME_PREDICTION | MF_ALTERNATE_DCT | MF_QUANT | MF_INTRA)},

	// security to fill empy slot
	{"00",		0},

   {NULL,		0}};

struct HuffInit PFrameMacroBlockTypeInit[] = {
	{"010",			MKMF(                   MF_FRAME_PREDICTION | MF_PATTERN)},
	{"011",			MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_PATTERN)},
	{"1000",			MKMF(                                         MF_PATTERN | MF_MOTION_FORWARD)},
	{"1001",			MKMF(MF_ALTERNATE_DCT |                       MF_PATTERN | MF_MOTION_FORWARD)},
	{"1010",			MKMF(                   MF_FIELD_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"1011",			MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"1100",			MKMF(                   MF_FRAME_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"1101",			MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"1110",			MKMF(                   MF_DUAL_PRIME_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"1111",			MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},

	{"00100",		MKMF(                                            MF_MOTION_FORWARD)},
	{"00101",		MKMF(                      MF_FIELD_PREDICTION | MF_MOTION_FORWARD)},
	{"00110",		MKMF(MF_FRAME_PREDICTION |                       MF_MOTION_FORWARD)},
	{"00111",		MKMF(MF_DUAL_PRIME_PREDICTION                  | MF_MOTION_FORWARD)},

	{"000010",		MKMF(                   MF_FRAME_PREDICTION | MF_QUANT | MF_PATTERN)},
	{"000011",		MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_QUANT | MF_PATTERN)},
	{"000110",		MKMF(                   MF_FRAME_PREDICTION | MF_INTRA)},
	{"000111",		MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_INTRA)},
	{"0000010",		MKMF(                   MF_FRAME_PREDICTION | MF_QUANT | MF_INTRA)},
	{"0000011",		MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_QUANT | MF_INTRA)},
	{"00010000",	MKMF(                   MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010001",	MKMF(MF_ALTERNATE_DCT | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010010",	MKMF(                   MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010011",	MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010100",	MKMF(                   MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010101",	MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010110",	MKMF(                   MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010111",	MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},

	{NULL,		0}};

struct HuffInit BFrameMacroBlockTypeInit[] = {
	{"1000",			MKMF(MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01000",		MKMF(MF_MOTION_BACKWARD)},
	{"001000",		MKMF(MF_MOTION_FORWARD)},

	{"1001",			MKMF(MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01001",		MKMF(MF_FIELD_PREDICTION | MF_MOTION_BACKWARD)},
	{"001001",		MKMF(MF_FIELD_PREDICTION | MF_MOTION_FORWARD)},

	{"1010",			MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01010",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_BACKWARD)},
	{"001010",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD)},

	{"1011",			MKMF(MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01011",		MKMF(MF_DUAL_PRIME_PREDICTION | MF_MOTION_BACKWARD)},
	{"001011",		MKMF(MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD)},

	{"11000",		MKMF(MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011000",		MKMF(MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011000",		MKMF(MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010000",	MKMF(MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011000",	MKMF(MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010000",	MKMF(MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"11010",		MKMF(MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011010",		MKMF(MF_FIELD_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011010",		MKMF(MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010010",	MKMF(MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011010",	MKMF(MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010010",	MKMF(MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"11100",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011100",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011100",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010100",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011100",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010100",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"11110",		MKMF(MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011110",		MKMF(MF_DUAL_PRIME_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011110",		MKMF(MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010110",	MKMF(MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011110",	MKMF(MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010110",	MKMF(MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"000110",		MKMF(MF_FRAME_PREDICTION | MF_INTRA)},
	{"0000010",		MKMF(MF_QUANT | MF_INTRA)},

	{"11001",		MKMF(MF_ALTERNATE_DCT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011001",		MKMF(MF_ALTERNATE_DCT | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011001",		MKMF(MF_ALTERNATE_DCT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010001",	MKMF(MF_ALTERNATE_DCT | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011001",	MKMF(MF_ALTERNATE_DCT | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010001",	MKMF(MF_ALTERNATE_DCT | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"11011",		MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011011",		MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011011",		MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010011",	MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011011",	MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010011",	MKMF(MF_ALTERNATE_DCT | MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"11101",		MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011101",		MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011101",		MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010101",	MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011101",	MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010101",	MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"11111",		MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"011111",		MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0011111",		MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00010111",	MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011111",	MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010111",	MKMF(MF_ALTERNATE_DCT | MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"000111",		MKMF(MF_ALTERNATE_DCT | MF_FRAME_PREDICTION | MF_INTRA)},
	{"0000011",		MKMF(MF_ALTERNATE_DCT | MF_QUANT | MF_INTRA)},

	{NULL,		0}};

struct HuffInit IFrameMacroBlockTypeInitFPFD[] = {
	{"1",    MKMF(MF_FRAME_PREDICTION | MF_INTRA)},
   {"01",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_INTRA)},
   {NULL,	0}};

struct HuffInit PFrameMacroBlockTypeInitFPFD[] = {
	{"1",	 		MKMF(MF_FRAME_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"01",		MKMF(MF_FRAME_PREDICTION | MF_PATTERN)},
	{"001",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD)},
	{"00011",	MKMF(MF_FRAME_PREDICTION | MF_INTRA)},
	{"00010",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00001",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_PATTERN)},
	{"000001",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_INTRA)},
	{NULL,		0}};

struct HuffInit BFrameMacroBlockTypeInitFPFD[] = {
	{"10",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"11",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"010",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_BACKWARD)},
	{"011",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"0010",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD)},
	{"0011",		MKMF(MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00011",	MKMF(MF_FRAME_PREDICTION | MF_INTRA)},
	{"00010",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000011",	MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"000010",  MKMF(MF_FRAME_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"000001",	MKMF(MF_QUANT | MF_INTRA)},
	{NULL,		0}};

struct HuffInit IFieldMacroBlockTypeInit[] = {
	{"1",    MKMI(MF_FRAME_PREDICTION | MF_INTRA)},
   {"01",	MKMI(MF_FRAME_PREDICTION | MF_QUANT | MF_INTRA)},
   {NULL,	0}};

struct HuffInit PFieldMacroBlockTypeInit[] = {
	{"01",			MKMI(                   MF_FIELD_PREDICTION | MF_PATTERN)},
	{"100",			MKMI(                                         MF_PATTERN | MF_MOTION_FORWARD)},
	{"101",			MKMI(                   MF_FIELD_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"110",			MKMI(                   MF_16X8_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},
	{"111",			MKMI(                   MF_DUAL_PRIME_PREDICTION | MF_PATTERN | MF_MOTION_FORWARD)},

	{"00100",		MKMI(                                            MF_MOTION_FORWARD)},
	{"00101",		MKMI(                      MF_FIELD_PREDICTION | MF_MOTION_FORWARD)},
	{"00110",		MKMI(MF_16X8_PREDICTION |                       MF_MOTION_FORWARD)},
	{"00111",		MKMI(MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD)},

	{"00001",		MKMI(                   MF_FIELD_PREDICTION | MF_QUANT | MF_PATTERN)},
	{"00011",		MKMI(                   MF_FIELD_PREDICTION | MF_INTRA)},
	{"000001",		MKMI(                   MF_FIELD_PREDICTION | MF_QUANT | MF_INTRA)},
	{"0001000",		MKMI(                   MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"0001001",		MKMI(                   MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"0001010",		MKMI(                   MF_16X8_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"0001011",		MKMI(                   MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},

	{NULL,		0}};

struct HuffInit BFieldMacroBlockTypeInit[] = {
	{"1000",			MKMI(MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01000",		MKMI(MF_MOTION_BACKWARD)},
	{"001000",		MKMI(MF_MOTION_FORWARD)},

	{"1001",			MKMI(MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01001",		MKMI(MF_FIELD_PREDICTION | MF_MOTION_BACKWARD)},
	{"001001",		MKMI(MF_FIELD_PREDICTION | MF_MOTION_FORWARD)},

	{"1010",			MKMI(MF_16X8_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01010",		MKMI(MF_16X8_PREDICTION | MF_MOTION_BACKWARD)},
	{"001010",		MKMI(MF_16X8_PREDICTION | MF_MOTION_FORWARD)},

	{"1011",			MKMI(MF_FIELD_PREDICTION | MF_FRAME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD)},
	{"01011",		MKMI(MF_FIELD_PREDICTION | MF_FRAME_PREDICTION | MF_MOTION_BACKWARD)},
	{"001011",		MKMI(MF_FIELD_PREDICTION | MF_FRAME_PREDICTION | MF_MOTION_FORWARD)},

	{"1100",			MKMI(MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"01100",		MKMI(MF_MOTION_BACKWARD | MF_PATTERN)},
	{"001100",		MKMI(MF_MOTION_FORWARD | MF_PATTERN)},
	{"0001000",		MKMI(MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"00001100",	MKMI(MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00001000",	MKMI(MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"1101",			MKMI(MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"01101",		MKMI(MF_FIELD_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"001101",		MKMI(MF_FIELD_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"0001001",		MKMI(MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"00001101",	MKMI(MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00001001",	MKMI(MF_FIELD_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"1110",			MKMI(MF_16X8_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"01110",		MKMI(MF_16X8_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"001110",		MKMI(MF_16X8_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"0001010",		MKMI(MF_16X8_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"00001110",	MKMI(MF_16X8_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00001010",	MKMI(MF_16X8_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"1111",			MKMI(MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"01111",		MKMI(MF_DUAL_PRIME_PREDICTION | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"001111",		MKMI(MF_DUAL_PRIME_PREDICTION | MF_MOTION_FORWARD | MF_PATTERN)},
	{"0001011",		MKMI(MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_MOTION_BACKWARD | MF_PATTERN)},
	{"00001111",	MKMI(MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_FORWARD | MF_PATTERN)},
	{"00001011",	MKMI(MF_DUAL_PRIME_PREDICTION | MF_QUANT | MF_MOTION_BACKWARD | MF_PATTERN)},

	{"00011",		MKMI(MF_FRAME_PREDICTION | MF_INTRA)},
	{"000001",		MKMI(MF_QUANT | MF_INTRA)},

	{NULL,		0}};


struct HuffInit CodedBlockPatternInit420[] = {
	{"111",				60},
	{"1101",				4},
	{"1100",				8},
	{"1011",				16},
	{"1010",				32},
	{"10011",			12},
	{"10010",			48},
	{"10001",			20},
	{"10000",			40},
	{"01111",			28},
	{"01110",			44},
	{"01101",			52},
	{"01100",			56},
	{"01011",			1},
	{"01010",			61},
	{"01001",			2},
	{"01000",			62},
	{"001111",			24},
	{"001110",			36},
	{"001101",			3},
	{"001100",			63},
	{"0010111",			5},
	{"0010110",			9},
	{"0010101",			17},
	{"0010100",			33},
	{"0010011",			6},
	{"0010010",			10},
	{"0010001",			18},
	{"0010000",			34},
	{"00011111",		7},
	{"00011110",		11},
	{"00011101",		19},

	{"00011100",		35},
	{"00011011",		13},
	{"00011010",		49},
	{"00011001",		21},
	{"00011000",		41},
	{"00010111",		14},
	{"00010110",		50},
	{"00010101",		22},
	{"00010100",		42},
	{"00010011",		15},
	{"00010010",		51},
	{"00010001",		23},
	{"00010000",		43},
	{"00001111",		25},
	{"00001110",		37},
	{"00001101",		26},
	{"00001100",		38},
	{"00001011",		29},
	{"00001010",		45},
	{"00001001",		53},
	{"00001000",		57},
	{"00000111",		30},
	{"00000110",		46},
	{"00000101",		54},
	{"00000100",		58},
	{"000000111",		31},
	{"000000110",		47},
	{"000000101",		55},
	{"000000100",		59},
	{"000000011",		27},
	{"000000010",		39},
	{"000000001",		0},
	{NULL, 0}};

struct HuffInit MotionCodesInit[] = {
	{"1",				0x01},
	{"01",			0x02},
	{"0011",			0x03},
	{"00101",		0x04},
	{"00100",		0x05},
	{"00011",		0x06},
	{"0001011",		0x07},
	{"0001010",		0x08},
	{"0001001",		0x09},
	{"00010001",	0x0a},
	{"00010000",	0x0b},
	{"00001111",	0x0c},
	{"00001110",	0x0d},
	{"00001101",	0x0e},
	{"00001100",	0x0f},
	{NULL, 0}};

struct HuffInit DMTVectorInit[] = {
	{"11",		-1},
	{"0",			0},
	{"10",		1},
	{NULL,		0}};

struct HuffInit DCTDCSizeLuminanceInit[] = {
	{"100",			0},
	{"00",			1},
	{"01",			2},
	{"101",			3},
	{"110",			4},
	{"1110",			5},
	{"11110",		6},
	{"111110",		7},
	{"1111110",		8},
	{"11111110",	9},
	{"111111110",	10},
	{"111111111",	11},
	{NULL,			0}};

struct HuffInit DCTDCSizeChrominanceInit[] = {
	{"00",			0},
	{"01",			1},
	{"10",			2},
	{"110",			3},
	{"1110",			4},
	{"11110",		5},
	{"111110",		6},
	{"1111110",		7},
	{"11111110",	8},
	{"111111110",	9},
	{"1111111110",	10},
	{"1111111111",	11},
	{NULL,			0}};


struct HuffInit DCTCoefficientZeroInit[] = {
	{"10",						-2},	// end of block
	{"000001",					-1},	// escape code

	{"11x",						RL(0,1)},
	{"011x",						RL(1,1)},
	{"0100x",					RL(0,2)},
	{"0101x",					RL(2,1)},
	{"00101x",					RL(0,3)},
	{"00111x",					RL(3,1)},
	{"00110x",					RL(4,1)},
	{"000110x",					RL(1,2)},
	{"000111x",					RL(5,1)},
	{"000101x",					RL(6,1)},
	{"000100x",					RL(7,1)},
	{"0000110x",				RL(0,4)},
	{"0000100x",				RL(2,2)},
	{"0000111x",				RL(8,1)},
	{"0000101x",				RL(9,1)},
	{"00100110x",				RL(0,5)},
	{"00100001x",				RL(0,6)},
	{"00100101x",				RL(1,3)},
	{"00100100x",				RL(3,2)},
	{"00100111x",				RL(10,1)},
	{"00100011x",				RL(11,1)},
	{"00100010x",				RL(12,1)},
	{"00100000x",				RL(13,1)},

	{"0000001010x",			RL(0,7)},
	{"0000001100x",			RL(1,4)},
	{"0000001011x",			RL(2,3)},
	{"0000001111x",			RL(4,2)},
	{"0000001001x",			RL(5,2)},
	{"0000001110x",			RL(14,1)},
	{"0000001101x",			RL(15,1)},
	{"0000001000x",			RL(16,1)},
	{"000000011101x",			RL(0,8)},
	{"000000011000x",			RL(0,9)},
	{"000000010011x",			RL(0,10)},
	{"000000010000x",			RL(0,11)},
	{"000000011011x",			RL(1,5)},
	{"000000010100x",			RL(2,4)},
	{"000000011100x",			RL(3,3)},
	{"000000010010x",			RL(4,3)},
	{"000000011110x",			RL(6,2)},
	{"000000010101x",			RL(7,2)},
	{"000000010001x",			RL(8,2)},
	{"000000011111x",			RL(17,1)},
	{"000000011010x",			RL(18,1)},
	{"000000011001x",			RL(19,1)},
	{"000000010111x",			RL(20,1)},
	{"000000010110x",			RL(21,1)},
	{"0000000011010x",		RL(0,12)},
	{"0000000011001x",		RL(0,13)},
	{"0000000011000x",		RL(0,14)},
	{"0000000010111x",		RL(0,15)},
	{"0000000010110x",		RL(1,6)},
	{"0000000010101x",		RL(1,7)},
	{"0000000010100x",		RL(2,5)},
	{"0000000010011x",		RL(3,4)},
	{"0000000010010x",		RL(5,3)},
	{"0000000010001x",		RL(9,2)},
	{"0000000010000x",		RL(10,2)},
	{"0000000011111x",		RL(22,1)},
	{"0000000011110x",		RL(23,1)},
	{"0000000011101x",		RL(24,1)},
	{"0000000011100x",		RL(25,1)},
	{"0000000011011x",		RL(26,1)},

	{"00000000011111x",		RL(0,16)},
	{"00000000011110x",		RL(0,17)},
	{"00000000011101x",		RL(0,18)},
	{"00000000011100x",		RL(0,19)},
	{"00000000011011x",		RL(0,20)},
	{"00000000011010x",		RL(0,21)},
	{"00000000011001x",		RL(0,22)},
	{"00000000011000x",		RL(0,23)},
	{"00000000010111x",		RL(0,24)},
	{"00000000010110x",		RL(0,25)},
	{"00000000010101x",		RL(0,26)},
	{"00000000010100x",		RL(0,27)},
	{"00000000010011x",		RL(0,28)},
	{"00000000010010x",		RL(0,29)},
	{"00000000010001x",		RL(0,30)},
	{"00000000010000x",		RL(0,31)},
	{"000000000011000x",		RL(0,32)},
	{"000000000010111x",		RL(0,33)},
	{"000000000010110x",		RL(0,34)},
	{"000000000010101x",		RL(0,35)},
	{"000000000010100x",		RL(0,36)},
	{"000000000010011x",		RL(0,37)},
	{"000000000010010x",		RL(0,38)},
	{"000000000010001x",		RL(0,39)},
	{"000000000010000x",		RL(0,40)},
	{"000000000011111x",		RL(1,8)},
	{"000000000011110x",		RL(1,9)},
	{"000000000011101x",		RL(1,10)},
	{"000000000011100x",		RL(1,11)},
	{"000000000011011x",		RL(1,12)},
	{"000000000011010x",		RL(1,13)},
	{"000000000011001x",		RL(1,14)},

	{"0000000000010011x",	RL(1,15)},
	{"0000000000010010x",	RL(1,16)},
	{"0000000000010001x",	RL(1,17)},
	{"0000000000010000x",	RL(1,18)},
	{"0000000000010100x",	RL(6,3)},
	{"0000000000011010x",	RL(11,2)},
	{"0000000000011001x",	RL(12,2)},
	{"0000000000011000x",	RL(13,2)},
	{"0000000000010111x",	RL(14,2)},
	{"0000000000010110x",	RL(15,2)},
	{"0000000000010101x",	RL(16,2)},
	{"0000000000011111x",	RL(27,1)},
	{"0000000000011110x",	RL(28,1)},
	{"0000000000011101x",	RL(29,1)},
	{"0000000000011100x",	RL(30,1)},
	{"0000000000011011x",	RL(31,1)},

	{NULL,					0}};


struct HuffInit DCTCoefficientZeroFirstInit[] = {
	{"000001",					-1},
	{"1x",						RLF(0,1)},
	{"011x",						RLF(1,1)},
	{"0100x",					RLF(0,2)},
	{"0101x",					RLF(2,1)},
	{"00101x",					RLF(0,3)},
	{"00111x",					RLF(3,1)},
	{"00110x",					RLF(4,1)},
	{"000110x",					RLF(1,2)},
	{"000111x",					RLF(5,1)},
	{"000101x",					RLF(6,1)},
	{"000100x",					RLF(7,1)},
	{"0000110x",				RLF(0,4)},
	{"0000100x",				RLF(2,2)},
	{"0000111x",				RLF(8,1)},
	{"0000101x",				RLF(9,1)},
	{"00100110x",				RLF(0,5)},
	{"00100001x",				RLF(0,6)},
	{"00100101x",				RLF(1,3)},
	{"00100100x",				RLF(3,2)},
	{"00100111x",				RLF(10,1)},
	{"00100011x",				RLF(11,1)},
	{"00100010x",				RLF(12,1)},
	{"00100000x",				RLF(13,1)},

	{"0000001010x",			RLF(0,7)},
	{"0000001100x",			RLF(1,4)},
	{"0000001011x",			RLF(2,3)},
	{"0000001111x",			RLF(4,2)},
	{"0000001001x",			RLF(5,2)},
	{"0000001110x",			RLF(14,1)},
	{"0000001101x",			RLF(15,1)},
	{"0000001000x",			RLF(16,1)},
	{"000000011101x",			RLF(0,8)},
	{"000000011000x",			RLF(0,9)},
	{"000000010011x",			RLF(0,10)},
	{"000000010000x",			RLF(0,11)},
	{"000000011011x",			RLF(1,5)},
	{"000000010100x",			RLF(2,4)},
	{"000000011100x",			RLF(3,3)},
	{"000000010010x",			RLF(4,3)},
	{"000000011110x",			RLF(6,2)},
	{"000000010101x",			RLF(7,2)},
	{"000000010001x",			RLF(8,2)},
	{"000000011111x",			RLF(17,1)},
	{"000000011010x",			RLF(18,1)},
	{"000000011001x",			RLF(19,1)},
	{"000000010111x",			RLF(20,1)},
	{"000000010110x",			RLF(21,1)},
	{"0000000011010x",		RLF(0,12)},
	{"0000000011001x",		RLF(0,13)},
	{"0000000011000x",		RLF(0,14)},
	{"0000000010111x",		RLF(0,15)},
	{"0000000010110x",		RLF(1,6)},
	{"0000000010101x",		RLF(1,7)},
	{"0000000010100x",		RLF(2,5)},
	{"0000000010011x",		RLF(3,4)},
	{"0000000010010x",		RLF(5,3)},
	{"0000000010001x",		RLF(9,2)},
	{"0000000010000x",		RLF(10,2)},
	{"0000000011111x",		RLF(22,1)},
	{"0000000011110x",		RLF(23,1)},
	{"0000000011101x",		RLF(24,1)},
	{"0000000011100x",		RLF(25,1)},
	{"0000000011011x",		RLF(26,1)},

	{"00000000011111x",		RLF(0,16)},
	{"00000000011110x",		RLF(0,17)},
	{"00000000011101x",		RLF(0,18)},
	{"00000000011100x",		RLF(0,19)},
	{"00000000011011x",		RLF(0,20)},
	{"00000000011010x",		RLF(0,21)},
	{"00000000011001x",		RLF(0,22)},
	{"00000000011000x",		RLF(0,23)},
	{"00000000010111x",		RLF(0,24)},
	{"00000000010110x",		RLF(0,25)},
	{"00000000010101x",		RLF(0,26)},
	{"00000000010100x",		RLF(0,27)},
	{"00000000010011x",		RLF(0,28)},
	{"00000000010010x",		RLF(0,29)},
	{"00000000010001x",		RLF(0,30)},
	{"00000000010000x",		RLF(0,31)},
	{"000000000011000x",		RLF(0,32)},
	{"000000000010111x",		RLF(0,33)},
	{"000000000010110x",		RLF(0,34)},
	{"000000000010101x",		RLF(0,35)},
	{"000000000010100x",		RLF(0,36)},
	{"000000000010011x",		RLF(0,37)},
	{"000000000010010x",		RLF(0,38)},
	{"000000000010001x",		RLF(0,39)},
	{"000000000010000x",		RLF(0,40)},
	{"000000000011111x",		RLF(1,8)},
	{"000000000011110x",		RLF(1,9)},
	{"000000000011101x",		RLF(1,10)},
	{"000000000011100x",		RLF(1,11)},
	{"000000000011011x",		RLF(1,12)},
	{"000000000011010x",		RLF(1,13)},
	{"000000000011001x",		RLF(1,14)},
	{"0000000000010011x",	RLF(1,15)},
	{"0000000000010010x",	RLF(1,16)},
	{"0000000000010001x",	RLF(1,17)},
	{"0000000000010000x",	RLF(1,18)},
	{"0000000000010100x",	RLF(6,3)},
	{"0000000000011010x",	RLF(11,2)},
	{"0000000000011001x",	RLF(12,2)},
	{"0000000000011000x",	RLF(13,2)},
	{"0000000000010111x",	RLF(14,2)},
	{"0000000000010110x",	RLF(15,2)},
	{"0000000000010101x",	RLF(16,2)},
	{"0000000000011111x",	RLF(27,1)},
	{"0000000000011110x",	RLF(28,1)},
	{"0000000000011101x",	RLF(29,1)},
	{"0000000000011100x",	RLF(30,1)},
	{"0000000000011011x",	RLF(31,1)},

	{NULL,					0}};


struct HuffInit DCTCoefficientOneInit[] = {
	{"0110",				   -2},
	{"000001",				-1},

	{"10x",						RL(0,1)},
	{"010x",						RL(1,1)},
	{"110x",						RL(0,2)},
	{"0111x",					RL(0,3)},
	{"00101x",					RL(2,1)},
	{"00111x",					RL(3,1)},
	{"00110x",					RL(1,2)},
	{"11100x",					RL(0,4)},
	{"11101x",					RL(0,5)},
	{"000101x",					RL(0,6)},
	{"000110x",					RL(4,1)},
	{"000111x",					RL(5,1)},
	{"000100x",					RL(0,7)},
	{"0000110x",				RL(6,1)},
	{"0000100x",				RL(7,1)},
	{"0000111x",				RL(2,2)},
	{"0000101x",				RL(8,1)},
	{"1111000x",				RL(9,1)},
	{"1111001x",				RL(1,3)},
	{"1111010x",				RL(10,1)},
	{"1111011x",				RL(0,8)},
	{"1111100x",				RL(0,9)},
	{"00100110x",				RL(3,2)},
	{"00100001x",				RL(11,1)},
	{"00100101x",				RL(12,1)},
	{"00100100x",				RL(13,1)},
	{"00100111x",				RL(1,4)},
	{"11111100x",				RL(2,3)},
	{"11111101x",				RL(4,2)},
	{"11111010x",				RL(0,12)},
	{"11111011x",				RL(0,13)},
	{"11111110x",				RL(0,14)},
	{"11111111x",				RL(0,15)},
	{"00100011x",				RL(0,10)},
	{"00100010x",				RL(0,11)},
	{"00100000x",				RL(1,5)},

	{"000000100x",				RL(5,2)},
	{"000000101x",				RL(14,1)},
	{"000000111x",				RL(15,1)},
	{"0000001101x",			RL(16,1)},
	{"0000001100x",			RL(2,4)},
	{"000000011100x",			RL(3,3)},
	{"000000010010x",			RL(4,3)},
	{"000000011110x",			RL(6,2)},
	{"000000010101x",			RL(7,2)},
	{"000000010001x",			RL(8,2)},
	{"000000011111x",			RL(17,1)},
	{"000000011010x",			RL(18,1)},
	{"000000011001x",			RL(19,1)},
	{"000000010111x",			RL(20,1)},
	{"000000010110x",			RL(21,1)},
	{"0000000010110x",		RL(1,6)},
	{"0000000010101x",		RL(1,7)},
	{"0000000010100x",		RL(2,5)},
	{"0000000010011x",		RL(3,4)},
	{"0000000010010x",		RL(5,3)},
	{"0000000010001x",		RL(9,2)},
	{"0000000010000x",		RL(10,2)},
	{"0000000011111x",		RL(22,1)},
	{"0000000011110x",		RL(23,1)},
	{"0000000011101x",		RL(24,1)},
	{"0000000011100x",		RL(25,1)},
	{"0000000011011x",		RL(26,1)},

	{"00000000011111x",		RL(0,16)},
	{"00000000011110x",		RL(0,17)},
	{"00000000011101x",		RL(0,18)},
	{"00000000011100x",		RL(0,19)},
	{"00000000011011x",		RL(0,20)},
	{"00000000011010x",		RL(0,21)},
	{"00000000011001x",		RL(0,22)},
	{"00000000011000x",		RL(0,23)},
	{"00000000010111x",		RL(0,24)},
	{"00000000010110x",		RL(0,25)},
	{"00000000010101x",		RL(0,26)},
	{"00000000010100x",		RL(0,27)},
	{"00000000010011x",		RL(0,28)},
	{"00000000010010x",		RL(0,29)},
	{"00000000010001x",		RL(0,30)},
	{"00000000010000x",		RL(0,31)},
	{"000000000011000x",		RL(0,32)},
	{"000000000010111x",		RL(0,33)},
	{"000000000010110x",		RL(0,34)},
	{"000000000010101x",		RL(0,35)},
	{"000000000010100x",		RL(0,36)},
	{"000000000010011x",		RL(0,37)},
	{"000000000010010x",		RL(0,38)},
	{"000000000010001x",		RL(0,39)},
	{"000000000010000x",		RL(0,40)},
	{"000000000011111x",		RL(1,8)},
	{"000000000011110x",		RL(1,9)},
	{"000000000011101x",		RL(1,10)},
	{"000000000011100x",		RL(1,11)},
	{"000000000011011x",		RL(1,12)},
	{"000000000011010x",		RL(1,13)},
	{"000000000011001x",		RL(1,14)},
	{"0000000000010011x",	RL(1,15)},
	{"0000000000010010x",	RL(1,16)},
	{"0000000000010001x",	RL(1,17)},
	{"0000000000010000x",	RL(1,18)},
	{"0000000000010100x",	RL(6,3)},
	{"0000000000011010x",	RL(11,2)},
	{"0000000000011001x",	RL(12,2)},
	{"0000000000011000x",	RL(13,2)},
	{"0000000000010111x",	RL(14,2)},
	{"0000000000010110x",	RL(15,2)},
	{"0000000000010101x",	RL(16,2)},
	{"0000000000011111x",	RL(27,1)},
	{"0000000000011110x",	RL(28,1)},
	{"0000000000011101x",	RL(29,1)},
	{"0000000000011100x",	RL(30,1)},
	{"0000000000011011x",	RL(31,1)},

	{NULL, 0}};

#pragma data_seg(".zeroseg0")

HuffmanTable	macroBlockAddressIncrement(MacroBlockAddressIncrementInit);
HuffmanTable	iFrameMacroBlockType(IFrameMacroBlockTypeInit);
HuffmanTable	bFrameMacroBlockType(BFrameMacroBlockTypeInit);
HuffmanTable	pFrameMacroBlockType(PFrameMacroBlockTypeInit);
HuffmanTable	iFieldMacroBlockType(IFieldMacroBlockTypeInit);
HuffmanTable	bFieldMacroBlockType(BFieldMacroBlockTypeInit);
HuffmanTable	pFieldMacroBlockType(PFieldMacroBlockTypeInit);
HuffmanTable	iFrameMacroBlockTypeFPFD(IFrameMacroBlockTypeInitFPFD);
HuffmanTable	bFrameMacroBlockTypeFPFD(BFrameMacroBlockTypeInitFPFD);
HuffmanTable	pFrameMacroBlockTypeFPFD(PFrameMacroBlockTypeInitFPFD);
HuffmanTable	codedBlockPattern420(CodedBlockPatternInit420);
HuffmanTable	motionCodes(MotionCodesInit);
HuffmanTable	dmtVector(DMTVectorInit);
HuffmanTable	dctDCSizeLuminance(DCTDCSizeLuminanceInit);
HuffmanTable	dctDCSizeChrominance(DCTDCSizeChrominanceInit);
HuffmanTable	dctCoefficientZero(DCTCoefficientZeroInit);
HuffmanTable	dctCoefficientZeroFirst(DCTCoefficientZeroFirstInit);
HuffmanTable	dctCoefficientOne(DCTCoefficientOneInit);

#pragma data_seg()
